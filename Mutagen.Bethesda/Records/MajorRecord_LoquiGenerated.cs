/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda
{
    #region Class
    public abstract partial class MajorRecord :
        LoquiNotifyingObject,
        IMajorRecordInternal,
        ILoquiObjectSetter<MajorRecord>,
        ILinkSubContainer,
        IEquatable<MajorRecord>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MajorRecord_Registration.Instance;
        public static MajorRecord_Registration Registration => MajorRecord_Registration.Instance;
        protected virtual object CommonInstance => MajorRecordCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        protected MajorRecord()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MajorRecordFlagsRaw
        private Int32 _MajorRecordFlagsRaw;
        public Int32 MajorRecordFlagsRaw
        {
            get => this._MajorRecordFlagsRaw;
            set => this.RaiseAndSetIfChanged(ref this._MajorRecordFlagsRaw, value, nameof(MajorRecordFlagsRaw));
        }
        #endregion
        #region FormKey
        public FormKey FormKey { get; protected set; }
        protected void UnsetFormKey()
        {
            _hasBeenSetTracker[(int)MajorRecord_FieldIndex.FormKey] = false;
            FormKey = default(FormKey);
        }
        FormKey IMajorRecordInternal.FormKey
        {
            get => this.FormKey;
            set => this.FormKey = value;
        }
        #endregion
        #region Version
        private UInt32 _Version;
        public UInt32 Version
        {
            get => this._Version;
            set => this.RaiseAndSetIfChanged(ref this._Version, value, nameof(Version));
        }
        #endregion
        #region EditorID
        public bool EditorID_IsSet
        {
            get => _hasBeenSetTracker[(int)MajorRecord_FieldIndex.EditorID];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)MajorRecord_FieldIndex.EditorID, nameof(EditorID_IsSet));
        }
        bool IMajorRecordGetter.EditorID_IsSet => EditorID_IsSet;
        private String _EditorID;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String EditorID
        {
            get => this._EditorID;
            set => EditorID_Set(value);
        }
        String IMajorRecordGetter.EditorID => this.EditorID;
        public void EditorID_Set(
            String value,
            bool markSet = true)
        {
            this.RaiseAndSetIfReferenceChanged(ref _EditorID, value, _hasBeenSetTracker, markSet, (int)MajorRecord_FieldIndex.EditorID, nameof(EditorID), nameof(EditorID_IsSet));
        }
        public void EditorID_Unset()
        {
            this.EditorID_Set(default(String), false);
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMajorRecordInternalGetter)rhs, include);
        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string name = null)
        {
            MajorRecordMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IMajorRecordInternalGetter rhs)) return false;
            return ((MajorRecordCommon)((ILoquiObject)this).CommonInstance).Equals(this, rhs);
        }

        public bool Equals(MajorRecord obj)
        {
            return ((MajorRecordCommon)((ILoquiObject)this).CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((MajorRecordCommon)((ILoquiObject)this).CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected virtual object XmlWriteTranslator => MajorRecordXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static MajorRecord CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            MajorRecord_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MajorRecord CreateFromXml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = MajorRecord_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MajorRecord CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return null;
                    break;
                default:
                    break;
            }
            MajorRecord ret;
            if (!LoquiXmlTranslation.Instance.TryCreate(node, out ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown MajorRecord subclass: {node.Name.LocalName}");
            }
            return ret;
        }

        public static MajorRecord CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            MajorRecord_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static MajorRecord CreateFromXml(
            string path,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MajorRecord CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            MajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MajorRecord CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            MajorRecord_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static MajorRecord CreateFromXml(
            Stream stream,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MajorRecord CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            MajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            MajorRecord item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "FormKey":
                    try
                    {
                        errorMask?.PushIndex((int)MajorRecord_FieldIndex.FormKey);
                        if (FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out FormKey FormKeyParse,
                            errorMask: errorMask))
                        {
                            item.FormKey = FormKeyParse;
                        }
                        else
                        {
                            item.FormKey = default(FormKey);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected virtual bool GetHasBeenSet(int index)
        {
            switch ((MajorRecord_FieldIndex)index)
            {
                case MajorRecord_FieldIndex.EditorID:
                    return _hasBeenSetTracker[index];
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                case MajorRecord_FieldIndex.FormKey:
                case MajorRecord_FieldIndex.Version:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public virtual async Task WriteToXmlFolder(
            DirectoryPath? dir,
            string name,
            XElement node,
            int counter,
            ErrorMaskBuilder errorMask)
        {
            this.WriteToXml(
                node: node,
                errorMask: errorMask,
                translationMask: null);
        }
        public MajorRecord(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public MajorRecord(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public virtual IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield break;
        }

        public virtual void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod
        {
        }

        #endregion

        #region Binary Translation
        protected virtual object BinaryWriteTranslator => MajorRecordBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        protected static void FillBinaryStructs(
            MajorRecord item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            item.MajorRecordFlagsRaw = frame.ReadInt32();
            if (Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                item: out FormKey FormKeyParse))
            {
                item.FormKey = FormKeyParse;
            }
            else
            {
                item.FormKey = default(FormKey);
            }
            item.Version = frame.ReadUInt32();
        }

        protected static TryGet<int?> FillBinaryRecordTypes(
            MajorRecord item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x44494445: // EDID
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true,
                        item: out String EditorIDParse))
                    {
                        item.EditorID = EditorIDParse;
                    }
                    else
                    {
                        item.EditorID = default(String);
                    }
                    return TryGet<int?>.Succeed((int)MajorRecord_FieldIndex.EditorID);
                }
                default:
                    errorMask?.ReportWarning($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength + frame.MetaData.SubConstants.HeaderLength;
                    return TryGet<int?>.Succeed(null);
            }
        }

        #endregion

        public MajorRecord Copy(
            MajorRecord_CopyMask copyMask = null,
            MajorRecord def = null)
        {
            return MajorRecord.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static MajorRecord Copy(
            MajorRecord item,
            MajorRecord_CopyMask copyMask = null,
            MajorRecord def = null)
        {
            MajorRecord ret = (MajorRecord)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static MajorRecord Copy_ToLoqui(
            MajorRecord item,
            MajorRecord_CopyMask copyMask = null,
            MajorRecord def = null)
        {
            MajorRecord ret = (MajorRecord)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public virtual void CopyFieldsFrom(MajorRecord rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            MajorRecord rhs,
            MajorRecord_CopyMask copyMask,
            MajorRecord def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            MajorRecord rhs,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_CopyMask copyMask = null,
            MajorRecord def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MajorRecordCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = MajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            MajorRecord rhs,
            ErrorMaskBuilder errorMask,
            MajorRecord_CopyMask copyMask = null,
            MajorRecord def = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected virtual void SetNthObject(ushort index, object obj)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    this.MajorRecordFlagsRaw = (Int32)obj;
                    break;
                case MajorRecord_FieldIndex.FormKey:
                    this.FormKey = (FormKey)obj;
                    break;
                case MajorRecord_FieldIndex.Version:
                    this.Version = (UInt32)obj;
                    break;
                case MajorRecord_FieldIndex.EditorID:
                    this.EditorID = (String)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void Clear()
        {
            MajorRecordCommon.Instance.Clear(this);
        }

        protected static void CopyInInternal_MajorRecord(MajorRecord obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out MajorRecord_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    obj.MajorRecordFlagsRaw = (Int32)pair.Value;
                    break;
                case MajorRecord_FieldIndex.FormKey:
                    obj.FormKey = (FormKey)pair.Value;
                    break;
                case MajorRecord_FieldIndex.Version:
                    obj.Version = (UInt32)pair.Value;
                    break;
                case MajorRecord_FieldIndex.EditorID:
                    obj.EditorID = (String)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IMajorRecord :
        IMajorRecordInternalGetter,
        ILoquiObjectSetter<IMajorRecordInternal>
    {
        new Int32 MajorRecordFlagsRaw { get; set; }

        new UInt32 Version { get; set; }

        new String EditorID { get; set; }
        new bool EditorID_IsSet { get; set; }
        void EditorID_Set(String value, bool hasBeenSet = true);
        void EditorID_Unset();

        void CopyFieldsFrom(
            MajorRecord rhs,
            ErrorMaskBuilder errorMask = null,
            MajorRecord_CopyMask copyMask = null,
            MajorRecord def = null);
    }

    public partial interface IMajorRecordInternal :
        IMajorRecord,
        IMajorRecordInternalGetter
    {
        new FormKey FormKey { get; set; }

    }

    public partial interface IMajorRecordGetter :
        ILoquiObject,
        ILoquiObject<IMajorRecordInternalGetter>,
        IXmlItem,
        IBinaryItem
    {
        #region MajorRecordFlagsRaw
        Int32 MajorRecordFlagsRaw { get; }

        #endregion
        #region FormKey
        FormKey FormKey { get; }

        #endregion
        #region Version
        UInt32 Version { get; }

        #endregion
        #region EditorID
        String EditorID { get; }
        bool EditorID_IsSet { get; }

        #endregion

    }

    public partial interface IMajorRecordInternalGetter : IMajorRecordGetter
    {

    }

    #endregion

    #region Common MixIn
    public static class MajorRecordMixIn
    {
        public static void Clear(this IMajorRecordInternal item)
        {
            ((MajorRecordCommon)((ILoquiObject)item).CommonInstance).Clear(item: item);
        }

        public static MajorRecord_Mask<bool> GetEqualsMask(
            this IMajorRecordInternalGetter item,
            IMajorRecordInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MajorRecordCommon)((ILoquiObject)item).CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMajorRecordInternalGetter item,
            string name = null,
            MajorRecord_Mask<bool> printMask = null)
        {
            return ((MajorRecordCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMajorRecordInternalGetter item,
            FileGeneration fg,
            string name = null,
            MajorRecord_Mask<bool> printMask = null)
        {
            ((MajorRecordCommon)((ILoquiObject)item).CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IMajorRecordInternalGetter item,
            MajorRecord_Mask<bool?> checkMask)
        {
            return ((MajorRecordCommon)((ILoquiObject)item).CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static MajorRecord_Mask<bool> GetHasBeenSetMask(this IMajorRecordInternalGetter item)
        {
            var ret = new MajorRecord_Mask<bool>();
            ((MajorRecordCommon)((ILoquiObject)item).CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IMajorRecordInternalGetter item,
            IMajorRecordInternalGetter rhs)
        {
            return ((MajorRecordCommon)((ILoquiObject)item).CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

        #region Mutagen
        public static IMajorRecordCommon Duplicate(
            this MajorRecord item,
            Func<FormKey> getNextFormKey,
            IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords = null)
        {
            return ((MajorRecordCommon)((ILoquiObject)item).CommonInstance).Duplicate(
                item: item,
                getNextFormKey: getNextFormKey,
                duplicatedRecords: duplicatedRecords);
        }
        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Internals
{
    #region Field Index
    public enum MajorRecord_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
    }
    #endregion

    #region Registration
    public class MajorRecord_Registration : ILoquiRegistration
    {
        public static readonly MajorRecord_Registration Instance = new MajorRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Bethesda.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Bethesda.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "1382b2d8-9016-424e-923f-502a4417cbc7";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(MajorRecord_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MajorRecord_ErrorMask);

        public static readonly Type ClassType = typeof(MajorRecord);

        public static readonly Type GetterType = typeof(IMajorRecordGetter);

        public static readonly Type InternalGetterType = typeof(IMajorRecordInternalGetter);

        public static readonly Type SetterType = typeof(IMajorRecord);

        public static readonly Type InternalSetterType = typeof(IMajorRecordInternal);

        public static readonly Type CommonType = typeof(MajorRecordCommon);

        public const string FullName = "Mutagen.Bethesda.MajorRecord";

        public const string Name = "MajorRecord";

        public const string Namespace = "Mutagen.Bethesda";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MAJORRECORDFLAGSRAW":
                    return (ushort)MajorRecord_FieldIndex.MajorRecordFlagsRaw;
                case "FORMKEY":
                    return (ushort)MajorRecord_FieldIndex.FormKey;
                case "VERSION":
                    return (ushort)MajorRecord_FieldIndex.Version;
                case "EDITORID":
                    return (ushort)MajorRecord_FieldIndex.EditorID;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                case MajorRecord_FieldIndex.FormKey:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                case MajorRecord_FieldIndex.FormKey:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                case MajorRecord_FieldIndex.FormKey:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return "MajorRecordFlagsRaw";
                case MajorRecord_FieldIndex.FormKey:
                    return "FormKey";
                case MajorRecord_FieldIndex.Version:
                    return "Version";
                case MajorRecord_FieldIndex.EditorID:
                    return "EditorID";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                case MajorRecord_FieldIndex.FormKey:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.FormKey:
                    return true;
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return typeof(Int32);
                case MajorRecord_FieldIndex.FormKey:
                    return typeof(FormKey);
                case MajorRecord_FieldIndex.Version:
                    return typeof(UInt32);
                case MajorRecord_FieldIndex.EditorID:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(MajorRecordXmlWriteTranslation);
        public static readonly RecordType ACTI_HEADER = new RecordType("ACTI");
        public static readonly RecordType PACK_HEADER = new RecordType("PACK");
        public static readonly RecordType ANIO_HEADER = new RecordType("ANIO");
        public static readonly RecordType BSGN_HEADER = new RecordType("BSGN");
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType CLMT_HEADER = new RecordType("CLMT");
        public static readonly RecordType CSTY_HEADER = new RecordType("CSTY");
        public static readonly RecordType CONT_HEADER = new RecordType("CONT");
        public static readonly RecordType DIAL_HEADER = new RecordType("DIAL");
        public static readonly RecordType INFO_HEADER = new RecordType("INFO");
        public static readonly RecordType DOOR_HEADER = new RecordType("DOOR");
        public static readonly RecordType EFSH_HEADER = new RecordType("EFSH");
        public static readonly RecordType ENCH_HEADER = new RecordType("ENCH");
        public static readonly RecordType EYES_HEADER = new RecordType("EYES");
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType FLOR_HEADER = new RecordType("FLOR");
        public static readonly RecordType FURN_HEADER = new RecordType("FURN");
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static readonly RecordType GRAS_HEADER = new RecordType("GRAS");
        public static readonly RecordType HAIR_HEADER = new RecordType("HAIR");
        public static readonly RecordType IDLE_HEADER = new RecordType("IDLE");
        public static readonly RecordType LAND_HEADER = new RecordType("LAND");
        public static readonly RecordType LTEX_HEADER = new RecordType("LTEX");
        public static readonly RecordType LSCR_HEADER = new RecordType("LSCR");
        public static readonly RecordType MGEF_HEADER = new RecordType("MGEF");
        public static readonly RecordType PGRD_HEADER = new RecordType("PGRD");
        public static readonly RecordType ACRE_HEADER = new RecordType("ACRE");
        public static readonly RecordType ACHR_HEADER = new RecordType("ACHR");
        public static readonly RecordType REFR_HEADER = new RecordType("REFR");
        public static readonly RecordType QUST_HEADER = new RecordType("QUST");
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType REGN_HEADER = new RecordType("REGN");
        public static readonly RecordType ROAD_HEADER = new RecordType("ROAD");
        public static readonly RecordType SCPT_HEADER = new RecordType("SCPT");
        public static readonly RecordType SKIL_HEADER = new RecordType("SKIL");
        public static readonly RecordType SOUN_HEADER = new RecordType("SOUN");
        public static readonly RecordType STAT_HEADER = new RecordType("STAT");
        public static readonly RecordType SBSP_HEADER = new RecordType("SBSP");
        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType WATR_HEADER = new RecordType("WATR");
        public static readonly RecordType WTHR_HEADER = new RecordType("WTHR");
        public static readonly RecordType APPA_HEADER = new RecordType("APPA");
        public static readonly RecordType AMMO_HEADER = new RecordType("AMMO");
        public static readonly RecordType BOOK_HEADER = new RecordType("BOOK");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType BMDT_HEADER = new RecordType("BMDT");
        public static readonly RecordType INGR_HEADER = new RecordType("INGR");
        public static readonly RecordType KEYM_HEADER = new RecordType("KEYM");
        public static readonly RecordType LVLI_HEADER = new RecordType("LVLI");
        public static readonly RecordType LIGH_HEADER = new RecordType("LIGH");
        public static readonly RecordType MISC_HEADER = new RecordType("MISC");
        public static readonly RecordType ALCH_HEADER = new RecordType("ALCH");
        public static readonly RecordType SGST_HEADER = new RecordType("SGST");
        public static readonly RecordType SLGM_HEADER = new RecordType("SLGM");
        public static readonly RecordType WEAP_HEADER = new RecordType("WEAP");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType CLOT_HEADER = new RecordType("CLOT");
        public static readonly RecordType LVLC_HEADER = new RecordType("LVLC");
        public static readonly RecordType CREA_HEADER = new RecordType("CREA");
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType WRLD_HEADER = new RecordType("WRLD");
        public static readonly RecordType LVSP_HEADER = new RecordType("LVSP");
        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static readonly RecordType EDID_HEADER = new RecordType("EDID");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        ACTI_HEADER,
                        PACK_HEADER,
                        ANIO_HEADER,
                        BSGN_HEADER,
                        CLAS_HEADER,
                        CLMT_HEADER,
                        CSTY_HEADER,
                        CONT_HEADER,
                        DIAL_HEADER,
                        INFO_HEADER,
                        DOOR_HEADER,
                        EFSH_HEADER,
                        ENCH_HEADER,
                        EYES_HEADER,
                        FACT_HEADER,
                        FLOR_HEADER,
                        FURN_HEADER,
                        GMST_HEADER,
                        GLOB_HEADER,
                        GRAS_HEADER,
                        HAIR_HEADER,
                        IDLE_HEADER,
                        LAND_HEADER,
                        LTEX_HEADER,
                        LSCR_HEADER,
                        MGEF_HEADER,
                        PGRD_HEADER,
                        ACRE_HEADER,
                        ACHR_HEADER,
                        REFR_HEADER,
                        QUST_HEADER,
                        RACE_HEADER,
                        REGN_HEADER,
                        ROAD_HEADER,
                        SCPT_HEADER,
                        SKIL_HEADER,
                        SOUN_HEADER,
                        STAT_HEADER,
                        SBSP_HEADER,
                        TREE_HEADER,
                        WATR_HEADER,
                        WTHR_HEADER,
                        APPA_HEADER,
                        AMMO_HEADER,
                        BOOK_HEADER,
                        FULL_HEADER,
                        SCRI_HEADER,
                        ENAM_HEADER,
                        ANAM_HEADER,
                        BMDT_HEADER,
                        INGR_HEADER,
                        KEYM_HEADER,
                        LVLI_HEADER,
                        LIGH_HEADER,
                        MISC_HEADER,
                        ALCH_HEADER,
                        SGST_HEADER,
                        SLGM_HEADER,
                        WEAP_HEADER,
                        ARMO_HEADER,
                        CLOT_HEADER,
                        LVLC_HEADER,
                        CREA_HEADER,
                        NPC__HEADER,
                        CELL_HEADER,
                        WRLD_HEADER,
                        LVSP_HEADER,
                        SPEL_HEADER
                    })
            );
        });
        public const int NumStructFields = 3;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(MajorRecordBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class MajorRecordCommon
    {
        public static readonly MajorRecordCommon Instance = new MajorRecordCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            MajorRecord item,
            MajorRecord rhs,
            MajorRecord def,
            ErrorMaskBuilder errorMask,
            MajorRecord_CopyMask copyMask)
        {
            if (copyMask?.MajorRecordFlagsRaw ?? true)
            {
                errorMask?.PushIndex((int)MajorRecord_FieldIndex.MajorRecordFlagsRaw);
                try
                {
                    item.MajorRecordFlagsRaw = rhs.MajorRecordFlagsRaw;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Version ?? true)
            {
                errorMask?.PushIndex((int)MajorRecord_FieldIndex.Version);
                try
                {
                    item.Version = rhs.Version;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EditorID ?? true)
            {
                errorMask?.PushIndex((int)MajorRecord_FieldIndex.EditorID);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.EditorID,
                        rhsHasBeenSet: rhs.EditorID_IsSet,
                        defItem: def?.EditorID ?? default(String),
                        defHasBeenSet: def?.EditorID_IsSet ?? false,
                        outRhsItem: out var rhsEditorIDItem,
                        outDefItem: out var defEditorIDItem))
                    {
                        item.EditorID = rhsEditorIDItem;
                    }
                    else
                    {
                        item.EditorID_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IMajorRecordInternal item)
        {
            ClearPartial();
            item.MajorRecordFlagsRaw = default(Int32);
            item.Version = default(UInt32);
            item.EditorID_Unset();
        }

        public MajorRecord_Mask<bool> GetEqualsMask(
            IMajorRecordInternalGetter item,
            IMajorRecordInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MajorRecord_Mask<bool>();
            ((MajorRecordCommon)((ILoquiObject)item).CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IMajorRecordInternalGetter item,
            IMajorRecordInternalGetter rhs,
            MajorRecord_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MajorRecordFlagsRaw = item.MajorRecordFlagsRaw == rhs.MajorRecordFlagsRaw;
            ret.Version = item.Version == rhs.Version;
            ret.EditorID = item.EditorID_IsSet == rhs.EditorID_IsSet && string.Equals(item.EditorID, rhs.EditorID);
        }

        public string ToString(
            IMajorRecordInternalGetter item,
            string name = null,
            MajorRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IMajorRecordInternalGetter item,
            FileGeneration fg,
            string name = null,
            MajorRecord_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MajorRecord =>");
            }
            else
            {
                fg.AppendLine($"{name} (MajorRecord) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IMajorRecordInternalGetter item,
            FileGeneration fg,
            MajorRecord_Mask<bool> printMask = null)
        {
            if (printMask?.MajorRecordFlagsRaw ?? true)
            {
                fg.AppendLine($"MajorRecordFlagsRaw => {item.MajorRecordFlagsRaw}");
            }
            if (printMask?.FormKey ?? true)
            {
            }
            if (printMask?.Version ?? true)
            {
                fg.AppendLine($"Version => {item.Version}");
            }
            if (printMask?.EditorID ?? true)
            {
                fg.AppendLine($"EditorID => {item.EditorID}");
            }
        }

        public bool HasBeenSet(
            IMajorRecordInternalGetter item,
            MajorRecord_Mask<bool?> checkMask)
        {
            if (checkMask.EditorID.HasValue && checkMask.EditorID.Value != item.EditorID_IsSet) return false;
            return true;
        }

        public void FillHasBeenSetMask(
            IMajorRecordInternalGetter item,
            MajorRecord_Mask<bool> mask)
        {
            mask.MajorRecordFlagsRaw = true;
            mask.FormKey = true;
            mask.Version = true;
            mask.EditorID = item.EditorID_IsSet;
        }

        #region Equals and Hash
        public virtual bool Equals(
            IMajorRecordInternalGetter lhs,
            IMajorRecordInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.MajorRecordFlagsRaw != rhs.MajorRecordFlagsRaw) return false;
            if (lhs.FormKey != rhs.FormKey) return false;
            if (lhs.Version != rhs.Version) return false;
            if (lhs.EditorID_IsSet != rhs.EditorID_IsSet) return false;
            if (lhs.EditorID_IsSet)
            {
                if (!string.Equals(lhs.EditorID, rhs.EditorID)) return false;
            }
            return true;
        }

        public virtual int GetHashCode(IMajorRecordInternalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.MajorRecordFlagsRaw).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FormKey).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Version).CombineHashCode(ret);
            if (item.EditorID_IsSet)
            {
                ret = HashHelper.GetHashCode(item.EditorID).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Mutagen
        partial void PostDuplicate(MajorRecord obj, MajorRecord rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords);

        public virtual IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)> duplicatedRecords)
        {
            throw new NotImplementedException();
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class MajorRecordXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static MajorRecordXmlWriteTranslation Instance = new MajorRecordXmlWriteTranslation();

        public static void WriteToNodeXml(
            IMajorRecordInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.MajorRecordFlagsRaw) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MajorRecordFlagsRaw),
                    item: item.MajorRecordFlagsRaw,
                    fieldIndex: (int)MajorRecord_FieldIndex.MajorRecordFlagsRaw,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.FormKey) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FormKey),
                    item: item.FormKey,
                    fieldIndex: (int)MajorRecord_FieldIndex.FormKey,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.Version) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Version),
                    item: item.Version,
                    fieldIndex: (int)MajorRecord_FieldIndex.Version,
                    errorMask: errorMask);
            }
            if (item.EditorID_IsSet
                && (translationMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.EditorID) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EditorID),
                    item: item.EditorID,
                    fieldIndex: (int)MajorRecord_FieldIndex.EditorID,
                    errorMask: errorMask);
            }
        }

        public virtual void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.MajorRecord");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.MajorRecord");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public virtual void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IMajorRecordInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IMajorRecordInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class MajorRecordXmlCreateTranslation
    {
        public readonly static MajorRecordXmlCreateTranslation Instance = new MajorRecordXmlCreateTranslation();

        public static void FillPublicXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IMajorRecordInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "MajorRecordFlagsRaw":
                    try
                    {
                        errorMask?.PushIndex((int)MajorRecord_FieldIndex.MajorRecordFlagsRaw);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 MajorRecordFlagsRawParse,
                            errorMask: errorMask))
                        {
                            item.MajorRecordFlagsRaw = MajorRecordFlagsRawParse;
                        }
                        else
                        {
                            item.MajorRecordFlagsRaw = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Version":
                    try
                    {
                        errorMask?.PushIndex((int)MajorRecord_FieldIndex.Version);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 VersionParse,
                            errorMask: errorMask))
                        {
                            item.Version = VersionParse;
                        }
                        else
                        {
                            item.Version = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EditorID":
                    try
                    {
                        errorMask?.PushIndex((int)MajorRecord_FieldIndex.EditorID);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String EditorIDParse,
                            errorMask: errorMask))
                        {
                            item.EditorID = EditorIDParse;
                        }
                        else
                        {
                            item.EditorID = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class MajorRecordXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IMajorRecordInternalGetter item,
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((MajorRecordXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IMajorRecordInternalGetter item,
            string path,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMajorRecordInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMajorRecordInternalGetter item,
            Stream stream,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMajorRecordInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMajorRecordInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((MajorRecordXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IMajorRecordInternalGetter item,
            XElement node,
            string name = null,
            MajorRecord_TranslationMask translationMask = null)
        {
            ((MajorRecordXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IMajorRecordInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((MajorRecordXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMajorRecordInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((MajorRecordXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class MajorRecord_Mask<T> : IMask<T>, IEquatable<MajorRecord_Mask<T>>
    {
        #region Ctors
        public MajorRecord_Mask()
        {
        }

        public MajorRecord_Mask(T initialValue)
        {
            this.MajorRecordFlagsRaw = initialValue;
            this.FormKey = initialValue;
            this.Version = initialValue;
            this.EditorID = initialValue;
        }
        #endregion

        #region Members
        public T MajorRecordFlagsRaw;
        public T FormKey;
        public T Version;
        public T EditorID;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MajorRecord_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MajorRecord_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.MajorRecordFlagsRaw, rhs.MajorRecordFlagsRaw)) return false;
            if (!object.Equals(this.FormKey, rhs.FormKey)) return false;
            if (!object.Equals(this.Version, rhs.Version)) return false;
            if (!object.Equals(this.EditorID, rhs.EditorID)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MajorRecordFlagsRaw?.GetHashCode());
            ret = ret.CombineHashCode(this.FormKey?.GetHashCode());
            ret = ret.CombineHashCode(this.Version?.GetHashCode());
            ret = ret.CombineHashCode(this.EditorID?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public virtual bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.MajorRecordFlagsRaw)) return false;
            if (!eval(this.FormKey)) return false;
            if (!eval(this.Version)) return false;
            if (!eval(this.EditorID)) return false;
            return true;
        }
        #endregion

        #region Translate
        public MajorRecord_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MajorRecord_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MajorRecord_Mask<R> obj, Func<T, R> eval)
        {
            obj.MajorRecordFlagsRaw = eval(this.MajorRecordFlagsRaw);
            obj.FormKey = eval(this.FormKey);
            obj.Version = eval(this.Version);
            obj.EditorID = eval(this.EditorID);
        }
        #endregion

        #region Clear Enumerables
        public virtual void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MajorRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MajorRecord_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MajorRecord_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MajorRecordFlagsRaw ?? true)
                {
                    fg.AppendLine($"MajorRecordFlagsRaw => {MajorRecordFlagsRaw}");
                }
                if (printMask?.FormKey ?? true)
                {
                    fg.AppendLine($"FormKey => {FormKey}");
                }
                if (printMask?.Version ?? true)
                {
                    fg.AppendLine($"Version => {Version}");
                }
                if (printMask?.EditorID ?? true)
                {
                    fg.AppendLine($"EditorID => {EditorID}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MajorRecord_ErrorMask : IErrorMask, IErrorMask<MajorRecord_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception MajorRecordFlagsRaw;
        public Exception FormKey;
        public Exception Version;
        public Exception EditorID;
        #endregion

        #region IErrorMask
        public virtual object GetNthMask(int index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return MajorRecordFlagsRaw;
                case MajorRecord_FieldIndex.FormKey:
                    return FormKey;
                case MajorRecord_FieldIndex.Version:
                    return Version;
                case MajorRecord_FieldIndex.EditorID:
                    return EditorID;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthException(int index, Exception ex)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    this.MajorRecordFlagsRaw = ex;
                    break;
                case MajorRecord_FieldIndex.FormKey:
                    this.FormKey = ex;
                    break;
                case MajorRecord_FieldIndex.Version:
                    this.Version = ex;
                    break;
                case MajorRecord_FieldIndex.EditorID:
                    this.EditorID = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthMask(int index, object obj)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    this.MajorRecordFlagsRaw = (Exception)obj;
                    break;
                case MajorRecord_FieldIndex.FormKey:
                    this.FormKey = (Exception)obj;
                    break;
                case MajorRecord_FieldIndex.Version:
                    this.Version = (Exception)obj;
                    break;
                case MajorRecord_FieldIndex.EditorID:
                    this.EditorID = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual bool IsInError()
        {
            if (Overall != null) return true;
            if (MajorRecordFlagsRaw != null) return true;
            if (FormKey != null) return true;
            if (Version != null) return true;
            if (EditorID != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public virtual void ToString(FileGeneration fg)
        {
            fg.AppendLine("MajorRecord_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected virtual void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"MajorRecordFlagsRaw => {MajorRecordFlagsRaw}");
            fg.AppendLine($"FormKey => {FormKey}");
            fg.AppendLine($"Version => {Version}");
            fg.AppendLine($"EditorID => {EditorID}");
        }
        #endregion

        #region Combine
        public MajorRecord_ErrorMask Combine(MajorRecord_ErrorMask rhs)
        {
            var ret = new MajorRecord_ErrorMask();
            ret.MajorRecordFlagsRaw = this.MajorRecordFlagsRaw.Combine(rhs.MajorRecordFlagsRaw);
            ret.FormKey = this.FormKey.Combine(rhs.FormKey);
            ret.Version = this.Version.Combine(rhs.Version);
            ret.EditorID = this.EditorID.Combine(rhs.EditorID);
            return ret;
        }
        public static MajorRecord_ErrorMask Combine(MajorRecord_ErrorMask lhs, MajorRecord_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static MajorRecord_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new MajorRecord_ErrorMask();
        }
        #endregion

    }
    public class MajorRecord_CopyMask
    {
        public MajorRecord_CopyMask()
        {
        }

        public MajorRecord_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.MajorRecordFlagsRaw = defaultOn;
            this.FormKey = defaultOn;
            this.Version = defaultOn;
            this.EditorID = defaultOn;
        }

        #region Members
        public bool MajorRecordFlagsRaw;
        public bool FormKey;
        public bool Version;
        public bool EditorID;
        #endregion

    }

    public class MajorRecord_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool MajorRecordFlagsRaw;
        public bool FormKey;
        public bool Version;
        public bool EditorID;
        #endregion

        #region Ctors
        public MajorRecord_TranslationMask()
        {
        }

        public MajorRecord_TranslationMask(bool defaultOn)
        {
            this.MajorRecordFlagsRaw = defaultOn;
            this.FormKey = defaultOn;
            this.Version = defaultOn;
            this.EditorID = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected virtual void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((MajorRecordFlagsRaw, null));
            ret.Add((FormKey, null));
            ret.Add((Version, null));
            ret.Add((EditorID, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class MajorRecordBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static MajorRecordBinaryWriteTranslation Instance = new MajorRecordBinaryWriteTranslation();

        public static void Write_Embedded(
            IMajorRecordInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            writer.Write(item.MajorRecordFlagsRaw);
            Mutagen.Bethesda.Binary.FormKeyBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FormKey,
                masterReferences: masterReferences);
            writer.Write(item.Version);
        }

        public static void Write_RecordTypes(
            IMajorRecordInternalGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.EditorID_IsSet)
            {
                Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EditorID,
                    header: recordTypeConverter.ConvertToCustom(MajorRecord_Registration.EDID_HEADER),
                    nullable: false);
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IMajorRecordInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class MajorRecordBinaryCreateTranslation
    {
        public readonly static MajorRecordBinaryCreateTranslation Instance = new MajorRecordBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class MajorRecordBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMajorRecordInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((MajorRecordBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IMajorRecordInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((MajorRecordBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IMajorRecordInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((MajorRecordBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion

    public partial class MajorRecordBinaryWrapper : IMajorRecordInternalGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MajorRecord_Registration.Instance;
        public static MajorRecord_Registration Registration => MajorRecord_Registration.Instance;
        protected virtual object CommonInstance => MajorRecordCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMajorRecordInternalGetter)rhs, include);

        protected virtual object XmlWriteTranslator => MajorRecordXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        protected virtual object BinaryWriteTranslator => MajorRecordBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        protected ReadOnlyMemorySlice<byte> _data;
        protected BinaryWrapperFactoryPackage _package;

        public Int32 MajorRecordFlagsRaw => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0, 4));
        public FormKey FormKey => FormKeyBinaryTranslation.Parse(_data.Span.Slice(4, 4), this._package.MasterReferences);
        public UInt32 Version => BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(8, 4));
        #region EditorID
        private int? _EditorIDLocation;
        public bool EditorID_IsSet => _EditorIDLocation.HasValue;
        public String EditorID => _EditorIDLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _EditorIDLocation.Value, _package.Meta)) : default;
        #endregion
        partial void CustomCtor(BinaryMemoryReadStream stream, int offset);

        protected MajorRecordBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
        {
            this._data = bytes;
            this._package = package;
        }

        public virtual TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int offset,
            RecordType type,
            int? lastParsed)
        {
            switch (type.TypeInt)
            {
                case 0x44494445: // EDID
                {
                    _EditorIDLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MajorRecord_FieldIndex.EditorID);
                }
                default:
                    return TryGet<int?>.Succeed(null);
            }
        }
    }

    #endregion

    #endregion

}
