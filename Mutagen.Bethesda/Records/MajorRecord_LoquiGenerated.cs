/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda
{
    #region Class
    public abstract partial class MajorRecord : IMajorRecord, ILoquiObjectSetter, IEquatable<MajorRecord>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MajorRecord_Registration.Instance;
        public static MajorRecord_Registration Registration => MajorRecord_Registration.Instance;

        #region Ctor
        public MajorRecord()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MajorRecordFlags
        protected readonly INotifyingItem<MajorRecord.MajorRecordFlag> _MajorRecordFlags = NotifyingItem.Factory<MajorRecord.MajorRecordFlag>();
        public INotifyingItem<MajorRecord.MajorRecordFlag> MajorRecordFlags_Property => _MajorRecordFlags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MajorRecord.MajorRecordFlag MajorRecordFlags
        {
            get => this._MajorRecordFlags.Item;
            set => this._MajorRecordFlags.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<MajorRecord.MajorRecordFlag> IMajorRecord.MajorRecordFlags_Property => this.MajorRecordFlags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<MajorRecord.MajorRecordFlag> IMajorRecordGetter.MajorRecordFlags_Property => this.MajorRecordFlags_Property;
        #endregion
        #region FormID
        protected readonly INotifyingItem<FormID> _FormID = NotifyingItem.Factory<FormID>();
        public INotifyingItemGetter<FormID> FormID_Property => _FormID;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public FormID FormID
        {
            get => this._FormID.Item;
            protected set => this._FormID.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<FormID> IMajorRecordGetter.FormID_Property => this.FormID_Property;
        #endregion
        #region Version
        protected readonly INotifyingItem<Byte[]> _Version = NotifyingItem.Factory<Byte[]>(noNullFallback: () => new byte[4]);
        public INotifyingItem<Byte[]> Version_Property => _Version;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] Version
        {
            get => this._Version.Item;
            set => this._Version.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> IMajorRecord.Version_Property => this.Version_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> IMajorRecordGetter.Version_Property => this.Version_Property;
        #endregion
        #region EditorID
        protected readonly INotifyingSetItem<String> _EditorID = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> EditorID_Property => _EditorID;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String EditorID
        {
            get => this._EditorID.Item;
            set => this._EditorID.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IMajorRecord.EditorID_Property => this.EditorID_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IMajorRecordGetter.EditorID_Property => this.EditorID_Property;
        #endregion
        #region RecordType
        protected readonly INotifyingItem<RecordType> _RecordType = NotifyingItem.Factory<RecordType>();
        public INotifyingItemGetter<RecordType> RecordType_Property => _RecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordType RecordType
        {
            get => this._RecordType.Item;
            protected set => this._RecordType.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<RecordType> IMajorRecordGetter.RecordType_Property => this.RecordType_Property;
        #endregion

        #region Loqui Getter Interface

        protected virtual object GetNthObject(ushort index) => MajorRecordCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected virtual bool GetNthObjectHasBeenSet(ushort index) => MajorRecordCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected virtual void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => MajorRecordCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected virtual void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            MajorRecordCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return MajorRecordCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            MajorRecord_Mask<bool> printMask = null)
        {
            return MajorRecordCommon.ToString(this, name: name, printMask: printMask);
        }

        public virtual void ToString(
            FileGeneration fg,
            string name = null)
        {
            MajorRecordCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public MajorRecord_Mask<bool> GetHasBeenSetMask()
        {
            return MajorRecordCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is MajorRecord rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MajorRecord rhs)
        {
            if (rhs == null) return false;
            if (MajorRecordFlags != rhs.MajorRecordFlags) return false;
            if (FormID != rhs.FormID) return false;
            if (!Version.EqualsFast(rhs.Version)) return false;
            if (EditorID_Property.HasBeenSet != rhs.EditorID_Property.HasBeenSet) return false;
            if (EditorID_Property.HasBeenSet)
            {
                if (!object.Equals(EditorID, rhs.EditorID)) return false;
            }
            if (!object.Equals(RecordType, rhs.RecordType)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(MajorRecordFlags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FormID).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Version).CombineHashCode(ret);
            if (EditorID_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EditorID).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(RecordType).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Copy In
        public virtual void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<MajorRecord, MajorRecord_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<MajorRecord, MajorRecord_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: doMasks) as MajorRecord_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public abstract void Write_XML(
            XmlWriter writer,
            string name = null);
        public abstract void Write_XML(
            string path,
            string name = null);
        public abstract void Write_XML(
            Stream stream,
            string name = null);

        protected virtual object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            MajorRecordCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                writer: writer,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_XML_Internal(
            MajorRecord item,
            XElement root,
            string name,
            Func<MajorRecord_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "MajorRecordFlags":
                    item._MajorRecordFlags.SetIfSucceeded(EnumXmlTranslation<MajorRecord.MajorRecordFlag>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)MajorRecord_FieldIndex.MajorRecordFlags,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "FormID":
                    item._FormID.SetIfSucceeded(FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)MajorRecord_FieldIndex.FormID,
                        errorMask: errorMask));
                    break;
                case "Version":
                    item._Version.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)MajorRecord_FieldIndex.Version,
                        errorMask: errorMask));
                    break;
                case "EditorID":
                    item._EditorID.SetIfSucceeded(StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)MajorRecord_FieldIndex.EditorID,
                        errorMask: errorMask));
                    break;
                case "RecordType":
                    item._RecordType.SetIfSucceeded(WildcardXmlTranslation.Instance.Parse(
                        root: root,
                        fieldIndex: (int)MajorRecord_FieldIndex.RecordType,
                        errorMask: errorMask).Bubble<RecordType>(i => (RecordType)i));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Mutagen
        public virtual IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield break;
        }
        #endregion

        #region Binary Translation
        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as MajorRecord_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public abstract void Write_Binary(MutagenWriter writer);
        public abstract void Write_Binary(string path);
        public abstract void Write_Binary(Stream stream);

        protected virtual object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            MajorRecordCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_Binary_Structs(
            MajorRecord item,
            MutagenFrame frame,
            Func<MajorRecord_ErrorMask> errorMask)
        {
            item._MajorRecordFlags.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<MajorRecord.MajorRecordFlag>.Instance.Parse(
                frame: frame.Spawn(new ContentLength(4)),
                fieldIndex: (int)MajorRecord_FieldIndex.MajorRecordFlags,
                errorMask: errorMask));
            item._FormID.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MajorRecord_FieldIndex.FormID,
                errorMask: errorMask));
            var VersiontryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.Spawn(new ContentLength(4)),
                fieldIndex: (int)MajorRecord_FieldIndex.Version,
                errorMask: errorMask);
            item._Version.SetIfSucceeded(VersiontryGet);
        }

        protected static TryGet<MajorRecord_FieldIndex?> Fill_Binary_RecordTypes(
            MajorRecord item,
            MutagenFrame frame,
            Func<MajorRecord_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "EDID":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var EditorIDtryGet = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)MajorRecord_FieldIndex.EditorID,
                        errorMask: errorMask);
                    item._EditorID.SetIfSucceeded(EditorIDtryGet);
                    return TryGet<MajorRecord_FieldIndex?>.Succeed(MajorRecord_FieldIndex.EditorID);
                default:
                    errorMask().Warnings.Add($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength + Constants.SUBRECORD_LENGTH;
                    return TryGet<MajorRecord_FieldIndex?>.Succeed(null);
            }
        }

        #endregion

        public MajorRecord Copy(
            MajorRecord_CopyMask copyMask = null,
            IMajorRecordGetter def = null)
        {
            return MajorRecord.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static MajorRecord Copy(
            IMajorRecord item,
            MajorRecord_CopyMask copyMask = null,
            IMajorRecordGetter def = null)
        {
            MajorRecord ret = (MajorRecord)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            MajorRecord_CopyMask copyMask = null,
            IMajorRecordGetter def = null)
            where CopyType : class, IMajorRecord
        {
            CopyType ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static MajorRecord Copy_ToLoqui(
            IMajorRecordGetter item,
            MajorRecord_CopyMask copyMask = null,
            IMajorRecordGetter def = null)
        {
            MajorRecord ret = (MajorRecord)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected virtual void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.RecordType:
                    throw new ArgumentException($"Tried to set at a derivative index {index}");
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    this._MajorRecordFlags.Set(
                        (MajorRecord.MajorRecordFlag)obj,
                        cmds);
                    break;
                case MajorRecord_FieldIndex.FormID:
                    this._FormID.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case MajorRecord_FieldIndex.Version:
                    this._Version.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case MajorRecord_FieldIndex.EditorID:
                    this._EditorID.Set(
                        (String)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public virtual void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            MajorRecordCommon.Clear(this, cmds);
        }


        protected static void CopyInInternal_MajorRecord(MajorRecord obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out MajorRecord_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    obj._MajorRecordFlags.Set(
                        (MajorRecord.MajorRecordFlag)pair.Value,
                        null);
                    break;
                case MajorRecord_FieldIndex.FormID:
                    obj._FormID.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case MajorRecord_FieldIndex.Version:
                    obj._Version.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case MajorRecord_FieldIndex.EditorID:
                    obj._EditorID.Set(
                        (String)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, MajorRecord obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IMajorRecord : IMajorRecordGetter, ILoquiClass<IMajorRecord, IMajorRecordGetter>, ILoquiClass<MajorRecord, IMajorRecordGetter>
    {
        new MajorRecord.MajorRecordFlag MajorRecordFlags { get; set; }
        new INotifyingItem<MajorRecord.MajorRecordFlag> MajorRecordFlags_Property { get; }

        new Byte[] Version { get; set; }
        new INotifyingItem<Byte[]> Version_Property { get; }

        new String EditorID { get; set; }
        new INotifyingSetItem<String> EditorID_Property { get; }

    }

    public interface IMajorRecordGetter : ILoquiObject
    {
        #region MajorRecordFlags
        MajorRecord.MajorRecordFlag MajorRecordFlags { get; }
        INotifyingItemGetter<MajorRecord.MajorRecordFlag> MajorRecordFlags_Property { get; }

        #endregion
        #region FormID
        FormID FormID { get; }
        INotifyingItemGetter<FormID> FormID_Property { get; }

        #endregion
        #region Version
        Byte[] Version { get; }
        INotifyingItemGetter<Byte[]> Version_Property { get; }

        #endregion
        #region EditorID
        String EditorID { get; }
        INotifyingSetItemGetter<String> EditorID_Property { get; }

        #endregion
        #region RecordType
        RecordType RecordType { get; }
        INotifyingItemGetter<RecordType> RecordType_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Internals
{
    #region Field Index
    public enum MajorRecord_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
    }
    #endregion

    #region Registration
    public class MajorRecord_Registration : ILoquiRegistration
    {
        public static readonly MajorRecord_Registration Instance = new MajorRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Bethesda.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Bethesda.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "1382b2d8-9016-424e-923f-502a4417cbc7";

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(MajorRecord_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MajorRecord_ErrorMask);

        public static readonly Type ClassType = typeof(MajorRecord);

        public static readonly Type GetterType = typeof(IMajorRecordGetter);

        public static readonly Type SetterType = typeof(IMajorRecord);

        public static readonly Type CommonType = typeof(MajorRecordCommon);

        public const string FullName = "Mutagen.Bethesda.MajorRecord";

        public const string Name = "MajorRecord";

        public const string Namespace = "Mutagen.Bethesda";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MAJORRECORDFLAGS":
                    return (ushort)MajorRecord_FieldIndex.MajorRecordFlags;
                case "FORMID":
                    return (ushort)MajorRecord_FieldIndex.FormID;
                case "VERSION":
                    return (ushort)MajorRecord_FieldIndex.Version;
                case "EDITORID":
                    return (ushort)MajorRecord_FieldIndex.EditorID;
                case "RECORDTYPE":
                    return (ushort)MajorRecord_FieldIndex.RecordType;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                case MajorRecord_FieldIndex.RecordType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                case MajorRecord_FieldIndex.RecordType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                case MajorRecord_FieldIndex.RecordType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return "MajorRecordFlags";
                case MajorRecord_FieldIndex.FormID:
                    return "FormID";
                case MajorRecord_FieldIndex.Version:
                    return "Version";
                case MajorRecord_FieldIndex.EditorID:
                    return "EditorID";
                case MajorRecord_FieldIndex.RecordType:
                    return "RecordType";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.RecordType:
                    return true;
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.RecordType:
                    return true;
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return typeof(MajorRecord.MajorRecordFlag);
                case MajorRecord_FieldIndex.FormID:
                    return typeof(FormID);
                case MajorRecord_FieldIndex.Version:
                    return typeof(Byte[]);
                case MajorRecord_FieldIndex.EditorID:
                    return typeof(String);
                case MajorRecord_FieldIndex.RecordType:
                    return typeof(RecordType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public const int NumStructFields = 4;
        public const int NumTypedFields = 1;
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType PACK_HEADER = new RecordType("PACK");
        public static readonly RecordType CSTY_HEADER = new RecordType("CSTY");
        public static readonly RecordType EFSH_HEADER = new RecordType("EFSH");
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static readonly RecordType GRAS_HEADER = new RecordType("GRAS");
        public static readonly RecordType LTEX_HEADER = new RecordType("LTEX");
        public static readonly RecordType LVLI_HEADER = new RecordType("LVLI");
        public static readonly RecordType LIGH_HEADER = new RecordType("LIGH");
        public static readonly RecordType SCPT_HEADER = new RecordType("SCPT");
        public static readonly RecordType SKIL_HEADER = new RecordType("SKIL");
        public static readonly RecordType SOUN_HEADER = new RecordType("SOUN");
        public static readonly RecordType STAT_HEADER = new RecordType("STAT");
        public static readonly RecordType SBSP_HEADER = new RecordType("SBSP");
        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType WTHR_HEADER = new RecordType("WTHR");
        public static readonly RecordType ACTI_HEADER = new RecordType("ACTI");
        public static readonly RecordType APPA_HEADER = new RecordType("APPA");
        public static readonly RecordType BSGN_HEADER = new RecordType("BSGN");
        public static readonly RecordType BOOK_HEADER = new RecordType("BOOK");
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType BMDT_HEADER = new RecordType("BMDT");
        public static readonly RecordType CONT_HEADER = new RecordType("CONT");
        public static readonly RecordType CREA_HEADER = new RecordType("CREA");
        public static readonly RecordType DOOR_HEADER = new RecordType("DOOR");
        public static readonly RecordType ENCH_HEADER = new RecordType("ENCH");
        public static readonly RecordType EYES_HEADER = new RecordType("EYES");
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType FLOR_HEADER = new RecordType("FLOR");
        public static readonly RecordType FURN_HEADER = new RecordType("FURN");
        public static readonly RecordType HAIR_HEADER = new RecordType("HAIR");
        public static readonly RecordType INGR_HEADER = new RecordType("INGR");
        public static readonly RecordType KEYM_HEADER = new RecordType("KEYM");
        public static readonly RecordType MGEF_HEADER = new RecordType("MGEF");
        public static readonly RecordType MISC_HEADER = new RecordType("MISC");
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static readonly RecordType ALCH_HEADER = new RecordType("ALCH");
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType SGST_HEADER = new RecordType("SGST");
        public static readonly RecordType SLGM_HEADER = new RecordType("SLGM");
        public static readonly RecordType WEAP_HEADER = new RecordType("WEAP");
        public static readonly RecordType WRLD_HEADER = new RecordType("WRLD");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType CLOT_HEADER = new RecordType("CLOT");
        public static readonly RecordType LVSP_HEADER = new RecordType("LVSP");
        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static readonly RecordType AMMO_HEADER = new RecordType("AMMO");
        public static readonly RecordType LVLC_HEADER = new RecordType("LVLC");
        public static readonly RecordType EDID_HEADER = new RecordType("EDID");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        FULL_HEADER,
                        PACK_HEADER,
                        CSTY_HEADER,
                        EFSH_HEADER,
                        GMST_HEADER,
                        GLOB_HEADER,
                        GRAS_HEADER,
                        LTEX_HEADER,
                        LVLI_HEADER,
                        LIGH_HEADER,
                        SCPT_HEADER,
                        SKIL_HEADER,
                        SOUN_HEADER,
                        STAT_HEADER,
                        SBSP_HEADER,
                        TREE_HEADER,
                        WTHR_HEADER,
                        ACTI_HEADER,
                        APPA_HEADER,
                        BSGN_HEADER,
                        BOOK_HEADER,
                        CLAS_HEADER,
                        SCRI_HEADER,
                        ENAM_HEADER,
                        ANAM_HEADER,
                        BMDT_HEADER,
                        CONT_HEADER,
                        CREA_HEADER,
                        DOOR_HEADER,
                        ENCH_HEADER,
                        EYES_HEADER,
                        FACT_HEADER,
                        FLOR_HEADER,
                        FURN_HEADER,
                        HAIR_HEADER,
                        INGR_HEADER,
                        KEYM_HEADER,
                        MGEF_HEADER,
                        MISC_HEADER,
                        NPC__HEADER,
                        ALCH_HEADER,
                        RACE_HEADER,
                        SGST_HEADER,
                        SLGM_HEADER,
                        WEAP_HEADER,
                        WRLD_HEADER,
                        ARMO_HEADER,
                        CLOT_HEADER,
                        LVSP_HEADER,
                        SPEL_HEADER,
                        AMMO_HEADER,
                        LVLC_HEADER
                    })
            );
        });
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class MajorRecordCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IMajorRecord item,
            IMajorRecordGetter rhs,
            MajorRecord_CopyMask copyMask = null,
            IMajorRecordGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IMajorRecord item,
            IMajorRecordGetter rhs,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_CopyMask copyMask = null,
            IMajorRecordGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IMajorRecord item,
            IMajorRecordGetter rhs,
            IMajorRecordGetter def,
            bool doMasks,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecord_ErrorMask retErrorMask = null;
            Func<MajorRecord_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new MajorRecord_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IMajorRecord item,
            IMajorRecordGetter rhs,
            IMajorRecordGetter def,
            bool doMasks,
            Func<MajorRecord_ErrorMask> errorMask,
            MajorRecord_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.MajorRecordFlags ?? true)
            {
                try
                {
                    item.MajorRecordFlags_Property.Set(
                        value: rhs.MajorRecordFlags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MajorRecord_FieldIndex.MajorRecordFlags, ex);
                }
            }
            if (copyMask?.Version ?? true)
            {
                try
                {
                    item.Version_Property.Set(
                        value: rhs.Version,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MajorRecord_FieldIndex.Version, ex);
                }
            }
            if (copyMask?.EditorID ?? true)
            {
                try
                {
                    item.EditorID_Property.SetToWithDefault(
                        rhs: rhs.EditorID_Property,
                        def: def?.EditorID_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MajorRecord_FieldIndex.EditorID, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IMajorRecord obj,
            NotifyingFireParameters cmds = null)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.RecordType:
                    throw new ArgumentException($"Tried to set at a derivative index {index}");
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.Version:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case MajorRecord_FieldIndex.EditorID:
                    obj.EditorID_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IMajorRecord obj,
            NotifyingUnsetParameters cmds = null)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.RecordType:
                    throw new ArgumentException($"Tried to unset at a derivative index {index}");
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    obj.MajorRecordFlags = default(MajorRecord.MajorRecordFlag);
                    break;
                case MajorRecord_FieldIndex.FormID:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case MajorRecord_FieldIndex.Version:
                    obj.Version = default(Byte[]);
                    break;
                case MajorRecord_FieldIndex.EditorID:
                    obj.EditorID_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IMajorRecord obj)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.RecordType:
                    return true;
                case MajorRecord_FieldIndex.EditorID:
                    return obj.EditorID_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IMajorRecordGetter obj)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return obj.MajorRecordFlags;
                case MajorRecord_FieldIndex.FormID:
                    return obj.FormID;
                case MajorRecord_FieldIndex.Version:
                    return obj.Version;
                case MajorRecord_FieldIndex.EditorID:
                    return obj.EditorID;
                case MajorRecord_FieldIndex.RecordType:
                    return obj.RecordType;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IMajorRecord item,
            NotifyingUnsetParameters cmds = null)
        {
            item.MajorRecordFlags = default(MajorRecord.MajorRecordFlag);
            item.Version = default(Byte[]);
            item.EditorID_Property.Unset(cmds.ToUnsetParams());
        }

        public static MajorRecord_Mask<bool> GetEqualsMask(
            this IMajorRecordGetter item,
            IMajorRecordGetter rhs)
        {
            var ret = new MajorRecord_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IMajorRecordGetter item,
            IMajorRecordGetter rhs,
            MajorRecord_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.MajorRecordFlags = item.MajorRecordFlags == rhs.MajorRecordFlags;
            ret.FormID = item.FormID == rhs.FormID;
            ret.Version = item.Version.EqualsFast(rhs.Version);
            ret.EditorID = item.EditorID_Property.Equals(rhs.EditorID_Property, (l, r) => object.Equals(l, r));
            ret.RecordType = object.Equals(item.RecordType, rhs.RecordType);
        }

        public static string ToString(
            this IMajorRecordGetter item,
            string name = null,
            MajorRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IMajorRecordGetter item,
            FileGeneration fg,
            string name = null,
            MajorRecord_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(MajorRecord)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(MajorRecord)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MajorRecordFlags ?? true)
                {
                    fg.AppendLine($"MajorRecordFlags => {item.MajorRecordFlags}");
                }
                if (printMask?.FormID ?? true)
                {
                    fg.AppendLine($"FormID => {item.FormID}");
                }
                if (printMask?.Version ?? true)
                {
                    fg.AppendLine($"Version => {item.Version}");
                }
                if (printMask?.EditorID ?? true)
                {
                    fg.AppendLine($"EditorID => {item.EditorID}");
                }
                if (printMask?.RecordType ?? true)
                {
                    fg.AppendLine($"RecordType => {item.RecordType}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IMajorRecordGetter item,
            MajorRecord_Mask<bool?> checkMask)
        {
            if (checkMask.EditorID.HasValue && checkMask.EditorID.Value != item.EditorID_Property.HasBeenSet) return false;
            return true;
        }

        public static MajorRecord_Mask<bool> GetHasBeenSetMask(IMajorRecordGetter item)
        {
            var ret = new MajorRecord_Mask<bool>();
            ret.MajorRecordFlags = true;
            ret.FormID = true;
            ret.Version = true;
            ret.EditorID = item.EditorID_Property.HasBeenSet;
            ret.RecordType = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IMajorRecordGetter item,
            bool doMasks,
            out MajorRecord_ErrorMask errorMask,
            string name = null)
        {
            MajorRecord_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MajorRecord_ErrorMask()) : default(Func<MajorRecord_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IMajorRecordGetter item,
            Func<MajorRecord_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.MajorRecord"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.MajorRecord");
                    }
                    EnumXmlTranslation<MajorRecord.MajorRecordFlag>.Instance.Write(
                        writer: writer,
                        name: nameof(item.MajorRecordFlags),
                        item: item.MajorRecordFlags_Property,
                        fieldIndex: (int)MajorRecord_FieldIndex.MajorRecordFlags,
                        errorMask: errorMask);
                    FormIDXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.FormID),
                        item: item.FormID_Property,
                        fieldIndex: (int)MajorRecord_FieldIndex.FormID,
                        errorMask: errorMask);
                    ByteArrayXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Version),
                        item: item.Version_Property,
                        fieldIndex: (int)MajorRecord_FieldIndex.Version,
                        errorMask: errorMask);
                    if (item.EditorID_Property.HasBeenSet)
                    {
                        StringXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.EditorID),
                            item: item.EditorID_Property,
                            fieldIndex: (int)MajorRecord_FieldIndex.EditorID,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            MajorRecord item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out MajorRecord_ErrorMask errorMask)
        {
            MajorRecord_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MajorRecord_ErrorMask()) : default(Func<MajorRecord_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            MajorRecord item,
            RecordTypeConverter recordTypeConverter,
            Func<MajorRecord_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            MajorRecord item,
            MutagenWriter writer,
            Func<MajorRecord_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MajorRecord.MajorRecordFlag>.Instance.Write(
                writer,
                item.MajorRecordFlags_Property,
                length: new ContentLength(4),
                fieldIndex: (int)MajorRecord_FieldIndex.MajorRecordFlags,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FormID_Property,
                fieldIndex: (int)MajorRecord_FieldIndex.FormID,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Version_Property,
                fieldIndex: (int)MajorRecord_FieldIndex.Version,
                errorMask: errorMask);
        }

        public static void Write_Binary_RecordTypes(
            MajorRecord item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<MajorRecord_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EditorID_Property,
                fieldIndex: (int)MajorRecord_FieldIndex.EditorID,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(MajorRecord_Registration.EDID_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class MajorRecord_Mask<T> : IMask<T>, IEquatable<MajorRecord_Mask<T>>
    {
        #region Ctors
        public MajorRecord_Mask()
        {
        }

        public MajorRecord_Mask(T initialValue)
        {
            this.MajorRecordFlags = initialValue;
            this.FormID = initialValue;
            this.Version = initialValue;
            this.EditorID = initialValue;
            this.RecordType = initialValue;
        }
        #endregion

        #region Members
        public T MajorRecordFlags;
        public T FormID;
        public T Version;
        public T EditorID;
        public T RecordType;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MajorRecord_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MajorRecord_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.MajorRecordFlags, rhs.MajorRecordFlags)) return false;
            if (!object.Equals(this.FormID, rhs.FormID)) return false;
            if (!object.Equals(this.Version, rhs.Version)) return false;
            if (!object.Equals(this.EditorID, rhs.EditorID)) return false;
            if (!object.Equals(this.RecordType, rhs.RecordType)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MajorRecordFlags?.GetHashCode());
            ret = ret.CombineHashCode(this.FormID?.GetHashCode());
            ret = ret.CombineHashCode(this.Version?.GetHashCode());
            ret = ret.CombineHashCode(this.EditorID?.GetHashCode());
            ret = ret.CombineHashCode(this.RecordType?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public virtual bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.MajorRecordFlags)) return false;
            if (!eval(this.FormID)) return false;
            if (!eval(this.Version)) return false;
            if (!eval(this.EditorID)) return false;
            if (!eval(this.RecordType)) return false;
            return true;
        }
        #endregion

        #region Translate
        public MajorRecord_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MajorRecord_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MajorRecord_Mask<R> obj, Func<T, R> eval)
        {
            obj.MajorRecordFlags = eval(this.MajorRecordFlags);
            obj.FormID = eval(this.FormID);
            obj.Version = eval(this.Version);
            obj.EditorID = eval(this.EditorID);
            obj.RecordType = eval(this.RecordType);
        }
        #endregion

        #region Clear Enumerables
        public virtual void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MajorRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MajorRecord_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MajorRecord_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MajorRecordFlags ?? true)
                {
                    fg.AppendLine($"MajorRecordFlags => {MajorRecordFlags}");
                }
                if (printMask?.FormID ?? true)
                {
                    fg.AppendLine($"FormID => {FormID}");
                }
                if (printMask?.Version ?? true)
                {
                    fg.AppendLine($"Version => {Version}");
                }
                if (printMask?.EditorID ?? true)
                {
                    fg.AppendLine($"EditorID => {EditorID}");
                }
                if (printMask?.RecordType ?? true)
                {
                    fg.AppendLine($"RecordType => {RecordType}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MajorRecord_ErrorMask : IErrorMask, IErrorMask<MajorRecord_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception MajorRecordFlags;
        public Exception FormID;
        public Exception Version;
        public Exception EditorID;
        public object RecordType;
        #endregion

        #region IErrorMask
        public virtual void SetNthException(int index, Exception ex)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    this.MajorRecordFlags = ex;
                    break;
                case MajorRecord_FieldIndex.FormID:
                    this.FormID = ex;
                    break;
                case MajorRecord_FieldIndex.Version:
                    this.Version = ex;
                    break;
                case MajorRecord_FieldIndex.EditorID:
                    this.EditorID = ex;
                    break;
                case MajorRecord_FieldIndex.RecordType:
                    this.RecordType = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthMask(int index, object obj)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    this.MajorRecordFlags = (Exception)obj;
                    break;
                case MajorRecord_FieldIndex.FormID:
                    this.FormID = (Exception)obj;
                    break;
                case MajorRecord_FieldIndex.Version:
                    this.Version = (Exception)obj;
                    break;
                case MajorRecord_FieldIndex.EditorID:
                    this.EditorID = (Exception)obj;
                    break;
                case MajorRecord_FieldIndex.RecordType:
                    this.RecordType = obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual bool IsInError()
        {
            if (Overall != null) return true;
            if (MajorRecordFlags != null) return true;
            if (FormID != null) return true;
            if (Version != null) return true;
            if (EditorID != null) return true;
            if (RecordType != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public virtual void ToString(FileGeneration fg)
        {
            fg.AppendLine("MajorRecord_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected virtual void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"MajorRecordFlags => {MajorRecordFlags}");
            fg.AppendLine($"FormID => {FormID}");
            fg.AppendLine($"Version => {Version}");
            fg.AppendLine($"EditorID => {EditorID}");
            fg.AppendLine($"RecordType => {RecordType}");
        }
        #endregion

        #region Combine
        public MajorRecord_ErrorMask Combine(MajorRecord_ErrorMask rhs)
        {
            var ret = new MajorRecord_ErrorMask();
            ret.MajorRecordFlags = this.MajorRecordFlags.Combine(rhs.MajorRecordFlags);
            ret.FormID = this.FormID.Combine(rhs.FormID);
            ret.Version = this.Version.Combine(rhs.Version);
            ret.EditorID = this.EditorID.Combine(rhs.EditorID);
            ret.RecordType = this.RecordType ?? rhs.RecordType;
            return ret;
        }
        public static MajorRecord_ErrorMask Combine(MajorRecord_ErrorMask lhs, MajorRecord_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class MajorRecord_CopyMask
    {
        #region Members
        public bool MajorRecordFlags;
        public bool FormID;
        public bool Version;
        public bool EditorID;
        public bool RecordType;
        #endregion

    }
    #endregion




    #endregion

}
