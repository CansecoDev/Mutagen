/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda
{
    #region Class
    public partial class MasterReference : IMasterReference, ILoquiObjectSetter, IEquatable<MasterReference>
    {
        ILoquiRegistration ILoquiObject.Registration => MasterReference_Registration.Instance;
        public static MasterReference_Registration Registration => MasterReference_Registration.Instance;

        #region Ctor
        public MasterReference()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Master
        protected readonly INotifyingSetItem<String> _Master = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> Master_Property => _Master;
        public String Master
        {
            get => this._Master.Item;
            set => this._Master.Set(value);
        }
        INotifyingSetItem<String> IMasterReference.Master_Property => this.Master_Property;
        INotifyingSetItemGetter<String> IMasterReferenceGetter.Master_Property => this.Master_Property;
        #endregion
        #region FileSize
        protected readonly INotifyingSetItem<UInt64> _FileSize = NotifyingSetItem.Factory<UInt64>(markAsSet: false);
        public INotifyingSetItem<UInt64> FileSize_Property => _FileSize;
        public UInt64 FileSize
        {
            get => this._FileSize.Item;
            set => this._FileSize.Set(value);
        }
        INotifyingSetItem<UInt64> IMasterReference.FileSize_Property => this.FileSize_Property;
        INotifyingSetItemGetter<UInt64> IMasterReferenceGetter.FileSize_Property => this.FileSize_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => MasterReferenceCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => MasterReferenceCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => MasterReferenceCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            MasterReferenceCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return MasterReferenceCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            MasterReference_Mask<bool> printMask = null)
        {
            return MasterReferenceCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            MasterReferenceCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public MasterReference_Mask<bool> GetHasBeenSetMask()
        {
            return MasterReferenceCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is MasterReference rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MasterReference rhs)
        {
            if (rhs == null) return false;
            if (Master_Property.HasBeenSet != rhs.Master_Property.HasBeenSet) return false;
            if (Master_Property.HasBeenSet)
            {
                if (!object.Equals(Master, rhs.Master)) return false;
            }
            if (FileSize_Property.HasBeenSet != rhs.FileSize_Property.HasBeenSet) return false;
            if (FileSize_Property.HasBeenSet)
            {
                if (FileSize != rhs.FileSize) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Master_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Master).CombineHashCode(ret);
            }
            if (FileSize_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FileSize).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static MasterReference Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static MasterReference Create_XML(
            XElement root,
            out MasterReference_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static MasterReference Create_XML(
            XElement root,
            bool doMasks,
            out MasterReference_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (MasterReference Object, MasterReference_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            MasterReference_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MasterReference_ErrorMask()) : default(Func<MasterReference_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static MasterReference Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static MasterReference Create_XML(
            string path,
            out MasterReference_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static MasterReference Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static MasterReference Create_XML(
            Stream stream,
            out MasterReference_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<MasterReference, MasterReference_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out MasterReference_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<MasterReference, MasterReference_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out MasterReference_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out MasterReference_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out MasterReference_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (MasterReference_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out MasterReference_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out MasterReference_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            MasterReferenceCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static MasterReference Create_XML_Internal(
            XElement root,
            Func<MasterReference_ErrorMask> errorMask)
        {
            var ret = new MasterReference();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            MasterReference item,
            XElement root,
            string name,
            Func<MasterReference_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Master":
                    item._Master.SetIfSucceeded(StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)MasterReference_FieldIndex.Master,
                        errorMask: errorMask));
                    break;
                case "FileSize":
                    item._FileSize.SetIfSucceeded(UInt64XmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)MasterReference_FieldIndex.FileSize,
                        errorMask: errorMask));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static MasterReference Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static MasterReference Create_Binary(
            MutagenFrame frame,
            out MasterReference_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static MasterReference Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out MasterReference_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (MasterReference Object, MasterReference_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            MasterReference_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MasterReference_ErrorMask()) : default(Func<MasterReference_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static MasterReference Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static MasterReference Create_Binary(
            string path,
            out MasterReference_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static MasterReference Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static MasterReference Create_Binary(
            Stream stream,
            out MasterReference_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<MasterReference, MasterReference_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out MasterReference_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<MasterReference, MasterReference_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out MasterReference_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out MasterReference_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out MasterReference_ErrorMask errorMask)
        {
            errorMask = (MasterReference_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out MasterReference_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out MasterReference_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            MasterReferenceCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static MasterReference Create_Binary_Internal(
            MutagenFrame frame,
            Func<MasterReference_ErrorMask> errorMask)
        {
            var ret = new MasterReference();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    MasterReference_FieldIndex? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            errorMask: errorMask);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            MasterReference item,
            MutagenFrame frame,
            Func<MasterReference_ErrorMask> errorMask)
        {
        }

        protected static TryGet<MasterReference_FieldIndex?> Fill_Binary_RecordTypes(
            MasterReference item,
            MutagenFrame frame,
            MasterReference_FieldIndex? lastParsed,
            Func<MasterReference_ErrorMask> errorMask)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                frame: frame,
                contentLength: out var contentLength);
            switch (nextRecordType.Type)
            {
                case "MAST":
                    if (lastParsed.HasValue && lastParsed.Value >= MasterReference_FieldIndex.Master) return TryGet<MasterReference_FieldIndex?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var MastertryGet = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)MasterReference_FieldIndex.Master,
                        errorMask: errorMask);
                    item._Master.SetIfSucceeded(MastertryGet);
                    return TryGet<MasterReference_FieldIndex?>.Succeed(MasterReference_FieldIndex.Master);
                case "DATA":
                    if (lastParsed.HasValue && lastParsed.Value >= MasterReference_FieldIndex.FileSize) return TryGet<MasterReference_FieldIndex?>.Failure;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._FileSize.SetIfSucceeded(Mutagen.Bethesda.Binary.UInt64BinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)MasterReference_FieldIndex.FileSize,
                        errorMask: errorMask));
                    return TryGet<MasterReference_FieldIndex?>.Succeed(MasterReference_FieldIndex.FileSize);
                default:
                    return TryGet<MasterReference_FieldIndex?>.Failure;
            }
        }

        #endregion

        public MasterReference Copy(
            MasterReference_CopyMask copyMask = null,
            IMasterReferenceGetter def = null)
        {
            return MasterReference.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static MasterReference Copy(
            IMasterReference item,
            MasterReference_CopyMask copyMask = null,
            IMasterReferenceGetter def = null)
        {
            MasterReference ret;
            if (item.GetType().Equals(typeof(MasterReference)))
            {
                ret = new MasterReference();
            }
            else
            {
                ret = (MasterReference)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            MasterReference_CopyMask copyMask = null,
            IMasterReferenceGetter def = null)
            where CopyType : class, IMasterReference
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(MasterReference)))
            {
                ret = new MasterReference() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static MasterReference Copy_ToLoqui(
            IMasterReferenceGetter item,
            MasterReference_CopyMask copyMask = null,
            IMasterReferenceGetter def = null)
        {
            MasterReference ret;
            if (item.GetType().Equals(typeof(MasterReference)))
            {
                ret = new MasterReference() as MasterReference;
            }
            else
            {
                ret = (MasterReference)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    this._Master.Set(
                        (String)obj,
                        cmds);
                    break;
                case MasterReference_FieldIndex.FileSize:
                    this._FileSize.Set(
                        (UInt64)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            MasterReferenceCommon.Clear(this, cmds);
        }


        public static MasterReference Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new MasterReference();
            foreach (var pair in fields)
            {
                CopyInInternal_MasterReference(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_MasterReference(MasterReference obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out MasterReference_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    obj._Master.Set(
                        (String)pair.Value,
                        null);
                    break;
                case MasterReference_FieldIndex.FileSize:
                    obj._FileSize.Set(
                        (UInt64)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, MasterReference obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IMasterReference : IMasterReferenceGetter, ILoquiClass<IMasterReference, IMasterReferenceGetter>, ILoquiClass<MasterReference, IMasterReferenceGetter>
    {
        new String Master { get; set; }
        new INotifyingSetItem<String> Master_Property { get; }

        new UInt64 FileSize { get; set; }
        new INotifyingSetItem<UInt64> FileSize_Property { get; }

    }

    public interface IMasterReferenceGetter : ILoquiObject
    {
        #region Master
        String Master { get; }
        INotifyingSetItemGetter<String> Master_Property { get; }

        #endregion
        #region FileSize
        UInt64 FileSize { get; }
        INotifyingSetItemGetter<UInt64> FileSize_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Internals
{
    #region Field Index
    public enum MasterReference_FieldIndex
    {
        Master = 0,
        FileSize = 1,
    }
    #endregion

    #region Registration
    public class MasterReference_Registration : ILoquiRegistration
    {
        public static readonly MasterReference_Registration Instance = new MasterReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Bethesda.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Bethesda.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "f1785555-cc72-4e7c-91b3-342cee7a1068";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(MasterReference_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MasterReference_ErrorMask);

        public static readonly Type ClassType = typeof(MasterReference);

        public static readonly Type GetterType = typeof(IMasterReferenceGetter);

        public static readonly Type SetterType = typeof(IMasterReference);

        public static readonly Type CommonType = typeof(MasterReferenceCommon);

        public const string FullName = "Mutagen.Bethesda.MasterReference";

        public const string Name = "MasterReference";

        public const string Namespace = "Mutagen.Bethesda";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MASTER":
                    return (ushort)MasterReference_FieldIndex.Master;
                case "FILESIZE":
                    return (ushort)MasterReference_FieldIndex.FileSize;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    return "Master";
                case MasterReference_FieldIndex.FileSize:
                    return "FileSize";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    return typeof(String);
                case MasterReference_FieldIndex.FileSize:
                    return typeof(UInt64);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType MAST_HEADER = new RecordType("MAST");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        MAST_HEADER,
                        DATA_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class MasterReferenceCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IMasterReference item,
            IMasterReferenceGetter rhs,
            MasterReference_CopyMask copyMask = null,
            IMasterReferenceGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            MasterReferenceCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IMasterReference item,
            IMasterReferenceGetter rhs,
            out MasterReference_ErrorMask errorMask,
            MasterReference_CopyMask copyMask = null,
            IMasterReferenceGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            MasterReferenceCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IMasterReference item,
            IMasterReferenceGetter rhs,
            IMasterReferenceGetter def,
            bool doMasks,
            out MasterReference_ErrorMask errorMask,
            MasterReference_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            MasterReference_ErrorMask retErrorMask = null;
            Func<MasterReference_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new MasterReference_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IMasterReference item,
            IMasterReferenceGetter rhs,
            IMasterReferenceGetter def,
            bool doMasks,
            Func<MasterReference_ErrorMask> errorMask,
            MasterReference_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.Master ?? true)
            {
                try
                {
                    item.Master_Property.SetToWithDefault(
                        rhs: rhs.Master_Property,
                        def: def?.Master_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MasterReference_FieldIndex.Master, ex);
                }
            }
            if (copyMask?.FileSize ?? true)
            {
                try
                {
                    item.FileSize_Property.SetToWithDefault(
                        rhs: rhs.FileSize_Property,
                        def: def?.FileSize_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MasterReference_FieldIndex.FileSize, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IMasterReference obj,
            NotifyingFireParameters? cmds = null)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    obj.Master_Property.HasBeenSet = on;
                    break;
                case MasterReference_FieldIndex.FileSize:
                    obj.FileSize_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IMasterReference obj,
            NotifyingUnsetParameters? cmds = null)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    obj.Master_Property.Unset(cmds);
                    break;
                case MasterReference_FieldIndex.FileSize:
                    obj.FileSize_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IMasterReference obj)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    return obj.Master_Property.HasBeenSet;
                case MasterReference_FieldIndex.FileSize:
                    return obj.FileSize_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IMasterReferenceGetter obj)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    return obj.Master;
                case MasterReference_FieldIndex.FileSize:
                    return obj.FileSize;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IMasterReference item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Master_Property.Unset(cmds.ToUnsetParams());
            item.FileSize_Property.Unset(cmds.ToUnsetParams());
        }

        public static MasterReference_Mask<bool> GetEqualsMask(
            this IMasterReferenceGetter item,
            IMasterReferenceGetter rhs)
        {
            var ret = new MasterReference_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IMasterReferenceGetter item,
            IMasterReferenceGetter rhs,
            MasterReference_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Master = item.Master_Property.Equals(rhs.Master_Property, (l, r) => object.Equals(l, r));
            ret.FileSize = item.FileSize_Property.Equals(rhs.FileSize_Property, (l, r) => l == r);
        }

        public static string ToString(
            this IMasterReferenceGetter item,
            string name = null,
            MasterReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IMasterReferenceGetter item,
            FileGeneration fg,
            string name = null,
            MasterReference_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(MasterReference)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(MasterReference)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Master ?? true)
                {
                    fg.AppendLine($"Master => {item.Master}");
                }
                if (printMask?.FileSize ?? true)
                {
                    fg.AppendLine($"FileSize => {item.FileSize}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IMasterReferenceGetter item,
            MasterReference_Mask<bool?> checkMask)
        {
            if (checkMask.Master.HasValue && checkMask.Master.Value != item.Master_Property.HasBeenSet) return false;
            if (checkMask.FileSize.HasValue && checkMask.FileSize.Value != item.FileSize_Property.HasBeenSet) return false;
            return true;
        }

        public static MasterReference_Mask<bool> GetHasBeenSetMask(IMasterReferenceGetter item)
        {
            var ret = new MasterReference_Mask<bool>();
            ret.Master = item.Master_Property.HasBeenSet;
            ret.FileSize = item.FileSize_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IMasterReferenceGetter item,
            bool doMasks,
            out MasterReference_ErrorMask errorMask,
            string name = null)
        {
            MasterReference_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MasterReference_ErrorMask()) : default(Func<MasterReference_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IMasterReferenceGetter item,
            Func<MasterReference_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.MasterReference"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.MasterReference");
                    }
                    if (item.Master_Property.HasBeenSet)
                    {
                        StringXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Master),
                            item: item.Master_Property,
                            fieldIndex: (int)MasterReference_FieldIndex.Master,
                            errorMask: errorMask);
                    }
                    if (item.FileSize_Property.HasBeenSet)
                    {
                        UInt64XmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.FileSize),
                            item: item.FileSize_Property,
                            fieldIndex: (int)MasterReference_FieldIndex.FileSize,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IMasterReferenceGetter item,
            bool doMasks,
            out MasterReference_ErrorMask errorMask)
        {
            MasterReference_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MasterReference_ErrorMask()) : default(Func<MasterReference_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IMasterReferenceGetter item,
            Func<MasterReference_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            IMasterReferenceGetter item,
            MutagenWriter writer,
            Func<MasterReference_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Master_Property,
                fieldIndex: (int)MasterReference_FieldIndex.Master,
                errorMask: errorMask,
                header: MasterReference_Registration.MAST_HEADER,
                nullable: false);
            Mutagen.Bethesda.Binary.UInt64BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FileSize_Property,
                fieldIndex: (int)MasterReference_FieldIndex.FileSize,
                errorMask: errorMask,
                header: MasterReference_Registration.DATA_HEADER,
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class MasterReference_Mask<T> : IMask<T>, IEquatable<MasterReference_Mask<T>>
    {
        #region Ctors
        public MasterReference_Mask()
        {
        }

        public MasterReference_Mask(T initialValue)
        {
            this.Master = initialValue;
            this.FileSize = initialValue;
        }
        #endregion

        #region Members
        public T Master;
        public T FileSize;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MasterReference_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MasterReference_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Master, rhs.Master)) return false;
            if (!object.Equals(this.FileSize, rhs.FileSize)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Master?.GetHashCode());
            ret = ret.CombineHashCode(this.FileSize?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Master)) return false;
            if (!eval(this.FileSize)) return false;
            return true;
        }
        #endregion

        #region Translate
        public MasterReference_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MasterReference_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MasterReference_Mask<R> obj, Func<T, R> eval)
        {
            obj.Master = eval(this.Master);
            obj.FileSize = eval(this.FileSize);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MasterReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MasterReference_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MasterReference_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Master ?? true)
                {
                    fg.AppendLine($"Master => {Master}");
                }
                if (printMask?.FileSize ?? true)
                {
                    fg.AppendLine($"FileSize => {FileSize}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MasterReference_ErrorMask : IErrorMask, IErrorMask<MasterReference_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Master;
        public Exception FileSize;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    this.Master = ex;
                    break;
                case MasterReference_FieldIndex.FileSize:
                    this.FileSize = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    this.Master = (Exception)obj;
                    break;
                case MasterReference_FieldIndex.FileSize:
                    this.FileSize = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Master != null) return true;
            if (FileSize != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("MasterReference_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Master => {Master}");
            fg.AppendLine($"FileSize => {FileSize}");
        }
        #endregion

        #region Combine
        public MasterReference_ErrorMask Combine(MasterReference_ErrorMask rhs)
        {
            var ret = new MasterReference_ErrorMask();
            ret.Master = this.Master.Combine(rhs.Master);
            ret.FileSize = this.FileSize.Combine(rhs.FileSize);
            return ret;
        }
        public static MasterReference_ErrorMask Combine(MasterReference_ErrorMask lhs, MasterReference_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class MasterReference_CopyMask
    {
        #region Members
        public bool Master;
        public bool FileSize;
        #endregion

    }
    #endregion




    #endregion

}
