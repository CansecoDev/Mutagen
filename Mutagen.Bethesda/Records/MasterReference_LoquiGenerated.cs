/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda
{
    #region Class
    public partial class MasterReference : 
        LoquiNotifyingObject,
        IMasterReference,
        ILoquiObject<MasterReference>,
        ILoquiObjectSetter,
        IEquatable<MasterReference>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MasterReference_Registration.Instance;
        public static MasterReference_Registration Registration => MasterReference_Registration.Instance;

        #region Ctor
        public MasterReference()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Master
        public bool Master_IsSet
        {
            get => _hasBeenSetTracker[(int)MasterReference_FieldIndex.Master];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)MasterReference_FieldIndex.Master, nameof(Master_IsSet));
        }
        bool IMasterReferenceGetter.Master_IsSet => Master_IsSet;
        private ModKey _Master;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ModKey Master
        {
            get => this._Master;
            set => Master_Set(value);
        }
        ModKey IMasterReferenceGetter.Master => this.Master;
        public void Master_Set(
            ModKey value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _Master, value, _hasBeenSetTracker, markSet, (int)MasterReference_FieldIndex.Master, nameof(Master), nameof(Master_IsSet));
        }
        public void Master_Unset()
        {
            this.Master_Set(default(ModKey), false);
        }
        #endregion
        #region FileSize
        public bool FileSize_IsSet
        {
            get => _hasBeenSetTracker[(int)MasterReference_FieldIndex.FileSize];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)MasterReference_FieldIndex.FileSize, nameof(FileSize_IsSet));
        }
        bool IMasterReferenceGetter.FileSize_IsSet => FileSize_IsSet;
        private UInt64 _FileSize;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt64 FileSize
        {
            get => this._FileSize;
            set => FileSize_Set(value);
        }
        UInt64 IMasterReferenceGetter.FileSize => this.FileSize;
        public void FileSize_Set(
            UInt64 value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _FileSize, value, _hasBeenSetTracker, markSet, (int)MasterReference_FieldIndex.FileSize, nameof(FileSize), nameof(FileSize_IsSet));
        }
        public void FileSize_Unset()
        {
            this.FileSize_Set(default(UInt64), false);
        }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => MasterReferenceCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => MasterReferenceCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => MasterReferenceCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            MasterReferenceCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<MasterReference>.GetEqualsMask(MasterReference rhs) => MasterReferenceCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IMasterReferenceGetter>.GetEqualsMask(IMasterReferenceGetter rhs) => MasterReferenceCommon.GetEqualsMask(this, rhs);
        #region To String
        public string ToString(
            string name = null,
            MasterReference_Mask<bool> printMask = null)
        {
            return MasterReferenceCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            MasterReferenceCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public MasterReference_Mask<bool> GetHasBeenSetMask()
        {
            return MasterReferenceCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is MasterReference rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MasterReference rhs)
        {
            if (rhs == null) return false;
            if (Master_IsSet != rhs.Master_IsSet) return false;
            if (Master_IsSet)
            {
                if (this.Master != rhs.Master) return false;
            }
            if (FileSize_IsSet != rhs.FileSize_IsSet) return false;
            if (FileSize_IsSet)
            {
                if (this.FileSize != rhs.FileSize) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Master_IsSet)
            {
                ret = HashHelper.GetHashCode(Master).CombineHashCode(ret);
            }
            if (FileSize_IsSet)
            {
                ret = HashHelper.GetHashCode(FileSize).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static MasterReference Create_Xml(
            XElement node,
            MasterReference_TranslationMask translationMask = null)
        {
            return Create_Xml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MasterReference Create_Xml(
            XElement node,
            out MasterReference_ErrorMask errorMask,
            bool doMasks = true,
            MasterReference_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MasterReference Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new MasterReference();
            try
            {
                foreach (var elem in node.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static MasterReference Create_Xml(
            string path,
            MasterReference_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static MasterReference Create_Xml(
            string path,
            out MasterReference_ErrorMask errorMask,
            MasterReference_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MasterReference Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            MasterReference_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MasterReference Create_Xml(
            Stream stream,
            MasterReference_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static MasterReference Create_Xml(
            Stream stream,
            out MasterReference_ErrorMask errorMask,
            MasterReference_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MasterReference Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            MasterReference_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement node,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                node: node,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out MasterReference_ErrorMask errorMask,
            MasterReference_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<MasterReference>.Instance.CopyIn(
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out MasterReference_ErrorMask errorMask,
            MasterReference_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out MasterReference_ErrorMask errorMask,
            MasterReference_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out MasterReference_ErrorMask errorMask,
            bool doMasks = true,
            MasterReference_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out MasterReference_ErrorMask errorMask,
            MasterReference_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out MasterReference_ErrorMask errorMask,
            MasterReference_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            MasterReference_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            MasterReferenceCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            MasterReference item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Master":
                    try
                    {
                        errorMask?.PushIndex((int)MasterReference_FieldIndex.Master);
                        if (ModKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out ModKey MasterParse,
                            errorMask: errorMask))
                        {
                            item.Master = MasterParse;
                        }
                        else
                        {
                            item.Master = default(ModKey);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FileSize":
                    try
                    {
                        errorMask?.PushIndex((int)MasterReference_FieldIndex.FileSize);
                        if (UInt64XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt64 FileSizeParse,
                            errorMask: errorMask))
                        {
                            item.FileSize = FileSizeParse;
                        }
                        else
                        {
                            item.FileSize = default(UInt64);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((MasterReference_FieldIndex)index)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return _hasBeenSetTracker[index];
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static MasterReference Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static MasterReference Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out MasterReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MasterReference Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new MasterReference();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        masterReferences: masterReferences,
                        errorMask: errorMask);
                    int? lastParsed = null;
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            lastParsed: lastParsed,
                            masterReferences: masterReferences,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                        lastParsed = parsed.Value;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static MasterReference Create_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static MasterReference Create_Binary(
            string path,
            MasterReferences masterReferences,
            out MasterReference_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static MasterReference Create_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        public static MasterReference Create_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame);
            }
        }

        public static MasterReference Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out MasterReference_ErrorMask errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static MasterReference Create_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var reader = new BinaryReadStream(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    masterReferences: masterReferences,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MasterReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            MasterReferences masterReferences,
            out MasterReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(
            string path,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: errorMask);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }
        public virtual void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            out MasterReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public void Write_Binary(
            Stream stream,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }
        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            string path,
            MasterReferences masterReferences)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        masterReferences: masterReferences,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public void Write_Binary(
            Stream stream,
            MasterReferences masterReferences)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    masterReferences: masterReferences,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MasterReferenceCommon.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            MasterReference item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            MasterReference item,
            MutagenFrame frame,
            int? lastParsed,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x5453414D: // MAST
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MasterReference_FieldIndex.Master) return TryGet<int?>.Failure;
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)MasterReference_FieldIndex.Master);
                        if (Mutagen.Bethesda.Binary.ModKeyBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out ModKey MasterParse,
                            errorMask: errorMask))
                        {
                            item.Master = MasterParse;
                        }
                        else
                        {
                            item.Master = default(ModKey);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)MasterReference_FieldIndex.Master);
                case 0x41544144: // DATA
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MasterReference_FieldIndex.FileSize) return TryGet<int?>.Failure;
                    frame.Position += Mutagen.Bethesda.Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)MasterReference_FieldIndex.FileSize);
                        if (Mutagen.Bethesda.Binary.UInt64BinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            item: out UInt64 FileSizeParse,
                            errorMask: errorMask))
                        {
                            item.FileSize = FileSizeParse;
                        }
                        else
                        {
                            item.FileSize = default(UInt64);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)MasterReference_FieldIndex.FileSize);
                default:
                    return TryGet<int?>.Failure;
            }
        }

        #endregion

        public MasterReference Copy(
            MasterReference_CopyMask copyMask = null,
            IMasterReferenceGetter def = null)
        {
            return MasterReference.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static MasterReference Copy(
            IMasterReference item,
            MasterReference_CopyMask copyMask = null,
            IMasterReferenceGetter def = null)
        {
            MasterReference ret;
            if (item.GetType().Equals(typeof(MasterReference)))
            {
                ret = new MasterReference();
            }
            else
            {
                ret = (MasterReference)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static MasterReference Copy_ToLoqui(
            IMasterReferenceGetter item,
            MasterReference_CopyMask copyMask = null,
            IMasterReferenceGetter def = null)
        {
            MasterReference ret;
            if (item.GetType().Equals(typeof(MasterReference)))
            {
                ret = new MasterReference() as MasterReference;
            }
            else
            {
                ret = (MasterReference)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IMasterReferenceGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IMasterReferenceGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IMasterReferenceGetter rhs,
            MasterReference_CopyMask copyMask,
            IMasterReferenceGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IMasterReferenceGetter rhs,
            out MasterReference_ErrorMask errorMask,
            MasterReference_CopyMask copyMask = null,
            IMasterReferenceGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MasterReferenceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IMasterReferenceGetter rhs,
            ErrorMaskBuilder errorMask,
            MasterReference_CopyMask copyMask = null,
            IMasterReferenceGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            MasterReferenceCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    this.Master = (ModKey)obj;
                    break;
                case MasterReference_FieldIndex.FileSize:
                    this.FileSize = (UInt64)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            MasterReferenceCommon.Clear(this, cmds);
        }


        public static MasterReference Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new MasterReference();
            foreach (var pair in fields)
            {
                CopyInInternal_MasterReference(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_MasterReference(MasterReference obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out MasterReference_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    obj.Master = (ModKey)pair.Value;
                    break;
                case MasterReference_FieldIndex.FileSize:
                    obj.FileSize = (UInt64)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, MasterReference obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IMasterReference : IMasterReferenceGetter, ILoquiClass<IMasterReference, IMasterReferenceGetter>, ILoquiClass<MasterReference, IMasterReferenceGetter>
    {
        new ModKey Master { get; set; }
        new bool Master_IsSet { get; set; }
        void Master_Set(ModKey item, bool hasBeenSet = true);
        void Master_Unset();

        new UInt64 FileSize { get; set; }
        new bool FileSize_IsSet { get; set; }
        void FileSize_Set(UInt64 item, bool hasBeenSet = true);
        void FileSize_Unset();

    }

    public partial interface IMasterReferenceGetter : ILoquiObject
    {
        #region Master
        ModKey Master { get; }
        bool Master_IsSet { get; }

        #endregion
        #region FileSize
        UInt64 FileSize { get; }
        bool FileSize_IsSet { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Internals
{
    #region Field Index
    public enum MasterReference_FieldIndex
    {
        Master = 0,
        FileSize = 1,
    }
    #endregion

    #region Registration
    public class MasterReference_Registration : ILoquiRegistration
    {
        public static readonly MasterReference_Registration Instance = new MasterReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Bethesda.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Bethesda.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "f1785555-cc72-4e7c-91b3-342cee7a1068";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(MasterReference_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MasterReference_ErrorMask);

        public static readonly Type ClassType = typeof(MasterReference);

        public static readonly Type GetterType = typeof(IMasterReferenceGetter);

        public static readonly Type SetterType = typeof(IMasterReference);

        public static readonly Type CommonType = typeof(MasterReferenceCommon);

        public const string FullName = "Mutagen.Bethesda.MasterReference";

        public const string Name = "MasterReference";

        public const string Namespace = "Mutagen.Bethesda";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MASTER":
                    return (ushort)MasterReference_FieldIndex.Master;
                case "FILESIZE":
                    return (ushort)MasterReference_FieldIndex.FileSize;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    return "Master";
                case MasterReference_FieldIndex.FileSize:
                    return "FileSize";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    return typeof(ModKey);
                case MasterReference_FieldIndex.FileSize:
                    return typeof(UInt64);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType MAST_HEADER = new RecordType("MAST");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        MAST_HEADER,
                        DATA_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class MasterReferenceCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IMasterReference item,
            IMasterReferenceGetter rhs,
            IMasterReferenceGetter def,
            ErrorMaskBuilder errorMask,
            MasterReference_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Master ?? true)
            {
                errorMask?.PushIndex((int)MasterReference_FieldIndex.Master);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Master,
                        rhsHasBeenSet: rhs.Master_IsSet,
                        defItem: def?.Master ?? default(ModKey),
                        defHasBeenSet: def?.Master_IsSet ?? false,
                        outRhsItem: out var rhsMasterItem,
                        outDefItem: out var defMasterItem))
                    {
                        item.Master = rhsMasterItem;
                    }
                    else
                    {
                        item.Master_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.FileSize ?? true)
            {
                errorMask?.PushIndex((int)MasterReference_FieldIndex.FileSize);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FileSize,
                        rhsHasBeenSet: rhs.FileSize_IsSet,
                        defItem: def?.FileSize ?? default(UInt64),
                        defHasBeenSet: def?.FileSize_IsSet ?? false,
                        outRhsItem: out var rhsFileSizeItem,
                        outDefItem: out var defFileSizeItem))
                    {
                        item.FileSize = rhsFileSizeItem;
                    }
                    else
                    {
                        item.FileSize_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IMasterReference obj,
            NotifyingFireParameters cmds = null)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    obj.Master_IsSet = on;
                    break;
                case MasterReference_FieldIndex.FileSize:
                    obj.FileSize_IsSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IMasterReference obj,
            NotifyingUnsetParameters cmds = null)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    obj.Master_Unset();
                    break;
                case MasterReference_FieldIndex.FileSize:
                    obj.FileSize_Unset();
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IMasterReference obj)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    return obj.Master_IsSet;
                case MasterReference_FieldIndex.FileSize:
                    return obj.FileSize_IsSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IMasterReferenceGetter obj)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    return obj.Master;
                case MasterReference_FieldIndex.FileSize:
                    return obj.FileSize;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IMasterReference item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Master_Unset();
            item.FileSize_Unset();
        }

        public static MasterReference_Mask<bool> GetEqualsMask(
            this IMasterReferenceGetter item,
            IMasterReferenceGetter rhs)
        {
            var ret = new MasterReference_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IMasterReferenceGetter item,
            IMasterReferenceGetter rhs,
            MasterReference_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Master = item.Master_IsSet == rhs.Master_IsSet && item.Master == rhs.Master;
            ret.FileSize = item.FileSize_IsSet == rhs.FileSize_IsSet && item.FileSize == rhs.FileSize;
        }

        public static string ToString(
            this IMasterReferenceGetter item,
            string name = null,
            MasterReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IMasterReferenceGetter item,
            FileGeneration fg,
            string name = null,
            MasterReference_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(MasterReference)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(MasterReference)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Master ?? true)
                {
                    fg.AppendLine($"Master => {item.Master}");
                }
                if (printMask?.FileSize ?? true)
                {
                    fg.AppendLine($"FileSize => {item.FileSize}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IMasterReferenceGetter item,
            MasterReference_Mask<bool?> checkMask)
        {
            if (checkMask.Master.HasValue && checkMask.Master.Value != item.Master_IsSet) return false;
            if (checkMask.FileSize.HasValue && checkMask.FileSize.Value != item.FileSize_IsSet) return false;
            return true;
        }

        public static MasterReference_Mask<bool> GetHasBeenSetMask(IMasterReferenceGetter item)
        {
            var ret = new MasterReference_Mask<bool>();
            ret.Master = item.Master_IsSet;
            ret.FileSize = item.FileSize_IsSet;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            MasterReference item,
            bool doMasks,
            out MasterReference_ErrorMask errorMask,
            MasterReference_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            MasterReference item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.MasterReference");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.MasterReference");
            }
            if (item.Master_IsSet
                && (translationMask?.GetShouldTranslate((int)MasterReference_FieldIndex.Master) ?? true))
            {
                ModKeyXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Master),
                    item: item.Master,
                    fieldIndex: (int)MasterReference_FieldIndex.Master,
                    errorMask: errorMask);
            }
            if (item.FileSize_IsSet
                && (translationMask?.GetShouldTranslate((int)MasterReference_FieldIndex.FileSize) ?? true))
            {
                UInt64XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FileSize),
                    item: item.FileSize,
                    fieldIndex: (int)MasterReference_FieldIndex.FileSize,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            MasterReference item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out MasterReference_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            MasterReference item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            MasterReference item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            if (item.Master_IsSet)
            {
                Mutagen.Bethesda.Binary.ModKeyBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Master,
                    fieldIndex: (int)MasterReference_FieldIndex.Master,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(MasterReference_Registration.MAST_HEADER),
                    nullable: false);
            }
            if (item.FileSize_IsSet)
            {
                Mutagen.Bethesda.Binary.UInt64BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FileSize,
                    fieldIndex: (int)MasterReference_FieldIndex.FileSize,
                    errorMask: errorMask,
                    header: recordTypeConverter.ConvertToCustom(MasterReference_Registration.DATA_HEADER),
                    nullable: false);
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class MasterReference_Mask<T> : IMask<T>, IEquatable<MasterReference_Mask<T>>
    {
        #region Ctors
        public MasterReference_Mask()
        {
        }

        public MasterReference_Mask(T initialValue)
        {
            this.Master = initialValue;
            this.FileSize = initialValue;
        }
        #endregion

        #region Members
        public T Master;
        public T FileSize;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MasterReference_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MasterReference_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Master, rhs.Master)) return false;
            if (!object.Equals(this.FileSize, rhs.FileSize)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Master?.GetHashCode());
            ret = ret.CombineHashCode(this.FileSize?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Master)) return false;
            if (!eval(this.FileSize)) return false;
            return true;
        }
        #endregion

        #region Translate
        public MasterReference_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MasterReference_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MasterReference_Mask<R> obj, Func<T, R> eval)
        {
            obj.Master = eval(this.Master);
            obj.FileSize = eval(this.FileSize);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MasterReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MasterReference_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MasterReference_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Master ?? true)
                {
                    fg.AppendLine($"Master => {Master}");
                }
                if (printMask?.FileSize ?? true)
                {
                    fg.AppendLine($"FileSize => {FileSize}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MasterReference_ErrorMask : IErrorMask, IErrorMask<MasterReference_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Master;
        public Exception FileSize;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    return Master;
                case MasterReference_FieldIndex.FileSize:
                    return FileSize;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    this.Master = ex;
                    break;
                case MasterReference_FieldIndex.FileSize:
                    this.FileSize = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    this.Master = (Exception)obj;
                    break;
                case MasterReference_FieldIndex.FileSize:
                    this.FileSize = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Master != null) return true;
            if (FileSize != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("MasterReference_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Master => {Master}");
            fg.AppendLine($"FileSize => {FileSize}");
        }
        #endregion

        #region Combine
        public MasterReference_ErrorMask Combine(MasterReference_ErrorMask rhs)
        {
            var ret = new MasterReference_ErrorMask();
            ret.Master = this.Master.Combine(rhs.Master);
            ret.FileSize = this.FileSize.Combine(rhs.FileSize);
            return ret;
        }
        public static MasterReference_ErrorMask Combine(MasterReference_ErrorMask lhs, MasterReference_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static MasterReference_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new MasterReference_ErrorMask();
        }
        #endregion

    }
    public class MasterReference_CopyMask
    {
        public MasterReference_CopyMask()
        {
        }

        public MasterReference_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Master = defaultOn;
            this.FileSize = defaultOn;
        }

        #region Members
        public bool Master;
        public bool FileSize;
        #endregion

    }

    public class MasterReference_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Master;
        public bool FileSize;
        #endregion

        #region Ctors
        public MasterReference_TranslationMask()
        {
        }

        public MasterReference_TranslationMask(bool defaultOn)
        {
            this.Master = defaultOn;
            this.FileSize = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Master, null));
            ret.Add((FileSize, null));
        }
    }
    #endregion

    #endregion

}
