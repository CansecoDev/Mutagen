/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

namespace Mutagen.Bethesda
{
    #region Class
    public partial class MasterReference :
        IMasterReference,
        ILoquiObjectSetter<MasterReference>,
        IEquatable<MasterReference>,
        IEqualsMask
    {
        #region Ctor
        public MasterReference()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Master
        public ModKey Master { get; set; }
        #endregion
        #region FileSize
        public bool FileSize_IsSet
        {
            get => _hasBeenSetTracker[(int)MasterReference_FieldIndex.FileSize];
            set => _hasBeenSetTracker[(int)MasterReference_FieldIndex.FileSize] = value;
        }
        bool IMasterReferenceGetter.FileSize_IsSet => FileSize_IsSet;
        private UInt64 _FileSize;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt64 FileSize
        {
            get => this._FileSize;
            set => FileSize_Set(value);
        }
        UInt64 IMasterReferenceGetter.FileSize => this.FileSize;
        public void FileSize_Set(
            UInt64 value,
            bool markSet = true)
        {
            _FileSize = value;
            _hasBeenSetTracker[(int)MasterReference_FieldIndex.FileSize] = markSet;
        }
        public void FileSize_Unset()
        {
            this.FileSize_Set(default(UInt64), false);
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMasterReferenceGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            MasterReferenceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IMasterReferenceGetter rhs)) return false;
            return ((MasterReferenceCommon)((IMasterReferenceGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(MasterReference obj)
        {
            return ((MasterReferenceCommon)((IMasterReferenceGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((MasterReferenceCommon)((IMasterReferenceGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => MasterReferenceXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((MasterReferenceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static MasterReference CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            MasterReference_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MasterReference CreateFromXml(
            XElement node,
            out MasterReference_ErrorMask errorMask,
            bool doMasks = true,
            MasterReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MasterReference CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new MasterReference() : null;
                    break;
                default:
                    break;
            }
            var ret = new MasterReference();
            ((MasterReferenceSetterCommon)((IMasterReferenceGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static MasterReference CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            MasterReference_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static MasterReference CreateFromXml(
            string path,
            out MasterReference_ErrorMask errorMask,
            MasterReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MasterReference CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            MasterReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MasterReference CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            MasterReference_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static MasterReference CreateFromXml(
            Stream stream,
            out MasterReference_ErrorMask errorMask,
            MasterReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MasterReference CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            MasterReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((MasterReference_FieldIndex)index)
            {
                case MasterReference_FieldIndex.FileSize:
                    return _hasBeenSetTracker[index];
                case MasterReference_FieldIndex.Master:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = MasterReference_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        protected object BinaryWriteTranslator => MasterReferenceBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((MasterReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static MasterReference CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static MasterReference CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out MasterReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MasterReference CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new MasterReference();
            ((MasterReferenceSetterCommon)((IMasterReferenceGetter)ret).CommonSetterInstance()).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            return ret;
        }

        #endregion

        #endregion

        void IClearable.Clear()
        {
            ((MasterReferenceSetterCommon)((IMasterReferenceGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface IMasterReference :
        IMasterReferenceGetter,
        ILoquiObjectSetter<IMasterReference>
    {
        new ModKey Master { get; set; }

        new UInt64 FileSize { get; set; }
        new bool FileSize_IsSet { get; set; }
        void FileSize_Set(UInt64 value, bool hasBeenSet = true);
        void FileSize_Unset();

    }

    public partial interface IMasterReferenceGetter :
        ILoquiObject,
        ILoquiObject<IMasterReferenceGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterCopyInstance();
        #region Master
        ModKey Master { get; }

        #endregion
        #region FileSize
        UInt64 FileSize { get; }
        bool FileSize_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class MasterReferenceMixIn
    {
        public static void Clear(this IMasterReference item)
        {
            ((MasterReferenceSetterCommon)((IMasterReferenceGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static MasterReference_Mask<bool> GetEqualsMask(
            this IMasterReferenceGetter item,
            IMasterReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MasterReferenceCommon)((IMasterReferenceGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMasterReferenceGetter item,
            string name = null,
            MasterReference_Mask<bool> printMask = null)
        {
            return ((MasterReferenceCommon)((IMasterReferenceGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMasterReferenceGetter item,
            FileGeneration fg,
            string name = null,
            MasterReference_Mask<bool> printMask = null)
        {
            ((MasterReferenceCommon)((IMasterReferenceGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IMasterReferenceGetter item,
            MasterReference_Mask<bool?> checkMask)
        {
            return ((MasterReferenceCommon)((IMasterReferenceGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static MasterReference_Mask<bool> GetHasBeenSetMask(this IMasterReferenceGetter item)
        {
            var ret = new MasterReference_Mask<bool>();
            ((MasterReferenceCommon)((IMasterReferenceGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IMasterReferenceGetter item,
            IMasterReferenceGetter rhs)
        {
            return ((MasterReferenceCommon)((IMasterReferenceGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void CopyFieldsFrom(
            this MasterReference lhs,
            MasterReference rhs)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void CopyFieldsFrom(
            this MasterReference lhs,
            MasterReference rhs,
            MasterReference_CopyMask copyMask,
            MasterReference def = null)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void CopyFieldsFrom(
            this MasterReference lhs,
            MasterReference rhs,
            out MasterReference_ErrorMask errorMask,
            MasterReference_CopyMask copyMask = null,
            MasterReference def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((MasterReferenceSetterCopyCommon)((IMasterReferenceGetter)lhs).CommonSetterCopyInstance()).CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyFieldsFrom(
            this MasterReference lhs,
            MasterReference rhs,
            ErrorMaskBuilder errorMask,
            MasterReference_CopyMask copyMask = null,
            MasterReference def = null)
        {
            ((MasterReferenceSetterCopyCommon)((IMasterReferenceGetter)lhs).CommonSetterCopyInstance()).CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static MasterReference Copy(
            this MasterReference item,
            MasterReference_CopyMask copyMask = null,
            MasterReference def = null)
        {
            return ((MasterReferenceSetterCommon)((IMasterReferenceGetter)item).CommonSetterInstance()).Copy(
                item: item,
                copyMask: copyMask,
                def: def);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMasterReference item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            MasterReference_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMasterReference item,
            XElement node,
            out MasterReference_ErrorMask errorMask,
            bool doMasks = true,
            MasterReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IMasterReference item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((MasterReferenceSetterCommon)((IMasterReferenceGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        public static void CopyInFromXml(
            this IMasterReference item,
            string path,
            MissingCreate missing = MissingCreate.New,
            MasterReference_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMasterReference item,
            string path,
            out MasterReference_ErrorMask errorMask,
            MasterReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMasterReference item,
            string path,
            ErrorMaskBuilder errorMask,
            MasterReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IMasterReference item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            MasterReference_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMasterReference item,
            Stream stream,
            out MasterReference_ErrorMask errorMask,
            MasterReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMasterReference item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            MasterReference_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IMasterReference item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IMasterReference item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            out MasterReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromBinary(
            this IMasterReference item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((MasterReferenceSetterCommon)((IMasterReferenceGetter)item).CommonSetterInstance()).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Internals
{
    #region Field Index
    public enum MasterReference_FieldIndex
    {
        Master = 0,
        FileSize = 1,
    }
    #endregion

    #region Registration
    public class MasterReference_Registration : ILoquiRegistration
    {
        public static readonly MasterReference_Registration Instance = new MasterReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Bethesda.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Bethesda.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "f1785555-cc72-4e7c-91b3-342cee7a1068";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(MasterReference_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MasterReference_ErrorMask);

        public static readonly Type ClassType = typeof(MasterReference);

        public static readonly Type GetterType = typeof(IMasterReferenceGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMasterReference);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.MasterReference";

        public const string Name = "MasterReference";

        public const string Namespace = "Mutagen.Bethesda";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MASTER":
                    return (ushort)MasterReference_FieldIndex.Master;
                case "FILESIZE":
                    return (ushort)MasterReference_FieldIndex.FileSize;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    return "Master";
                case MasterReference_FieldIndex.FileSize:
                    return "FileSize";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                case MasterReference_FieldIndex.FileSize:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    return typeof(ModKey);
                case MasterReference_FieldIndex.FileSize:
                    return typeof(UInt64);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(MasterReferenceXmlWriteTranslation);
        public static readonly RecordType MAST_HEADER = new RecordType("MAST");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = MAST_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(MasterReferenceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class MasterReferenceSetterCommon
    {
        public static readonly MasterReferenceSetterCommon Instance = new MasterReferenceSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IMasterReference item)
        {
            ClearPartial();
            item.Master = default(ModKey);
            item.FileSize_Unset();
        }
        
        public MasterReference GetNew()
        {
            return new MasterReference();
        }
        
        public MasterReference Copy(
            MasterReference item,
            MasterReference_CopyMask copyMask = null,
            MasterReference def = null)
        {
            MasterReference ret = GetNew();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IMasterReference item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MasterReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IMasterReference item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IMasterReference item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x5453414D: // MAST
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MasterReference_FieldIndex.Master) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    if (Mutagen.Bethesda.Binary.ModKeyBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        item: out ModKey MasterParse))
                    {
                        item.Master = MasterParse;
                    }
                    else
                    {
                        item.Master = default(ModKey);
                    }
                    return TryGet<int?>.Succeed((int)MasterReference_FieldIndex.Master);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FileSize = frame.ReadUInt64();
                    return TryGet<int?>.Succeed((int)MasterReference_FieldIndex.FileSize);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IMasterReference item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class MasterReferenceCommon
    {
        public static readonly MasterReferenceCommon Instance = new MasterReferenceCommon();

        public MasterReference_Mask<bool> GetEqualsMask(
            IMasterReferenceGetter item,
            IMasterReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MasterReference_Mask<bool>();
            ((MasterReferenceCommon)((IMasterReferenceGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMasterReferenceGetter item,
            IMasterReferenceGetter rhs,
            MasterReference_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Master = item.Master == rhs.Master;
            ret.FileSize = item.FileSize_IsSet == rhs.FileSize_IsSet && item.FileSize == rhs.FileSize;
        }
        
        public string ToString(
            IMasterReferenceGetter item,
            string name = null,
            MasterReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMasterReferenceGetter item,
            FileGeneration fg,
            string name = null,
            MasterReference_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MasterReference =>");
            }
            else
            {
                fg.AppendLine($"{name} (MasterReference) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMasterReferenceGetter item,
            FileGeneration fg,
            MasterReference_Mask<bool> printMask = null)
        {
            if (printMask?.Master ?? true)
            {
                fg.AppendLine($"Master => {item.Master}");
            }
            if (printMask?.FileSize ?? true)
            {
                fg.AppendLine($"FileSize => {item.FileSize}");
            }
        }
        
        public bool HasBeenSet(
            IMasterReferenceGetter item,
            MasterReference_Mask<bool?> checkMask)
        {
            if (checkMask.FileSize.HasValue && checkMask.FileSize.Value != item.FileSize_IsSet) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IMasterReferenceGetter item,
            MasterReference_Mask<bool> mask)
        {
            mask.Master = true;
            mask.FileSize = item.FileSize_IsSet;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMasterReferenceGetter lhs,
            IMasterReferenceGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Master != rhs.Master) return false;
            if (lhs.FileSize_IsSet != rhs.FileSize_IsSet) return false;
            if (lhs.FileSize_IsSet)
            {
                if (lhs.FileSize != rhs.FileSize) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IMasterReferenceGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Master).CombineHashCode(ret);
            if (item.FileSize_IsSet)
            {
                ret = HashHelper.GetHashCode(item.FileSize).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class MasterReferenceSetterCopyCommon
    {
        public static readonly MasterReferenceSetterCopyCommon Instance = new MasterReferenceSetterCopyCommon();

        #region Copy Fields From
        public void CopyFieldsFrom(
            MasterReference item,
            MasterReference rhs,
            MasterReference def,
            ErrorMaskBuilder errorMask,
            MasterReference_CopyMask copyMask)
        {
            if (copyMask?.Master ?? true)
            {
                errorMask?.PushIndex((int)MasterReference_FieldIndex.Master);
                item.Master = rhs.Master;
                errorMask?.PopIndex();
            }
            if (copyMask?.FileSize ?? true)
            {
                errorMask?.PushIndex((int)MasterReference_FieldIndex.FileSize);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.FileSize,
                        rhsHasBeenSet: rhs.FileSize_IsSet,
                        defItem: def?.FileSize ?? default(UInt64),
                        defHasBeenSet: def?.FileSize_IsSet ?? false,
                        outRhsItem: out var rhsFileSizeItem,
                        outDefItem: out var defFileSizeItem))
                    {
                        item.FileSize = rhsFileSizeItem;
                    }
                    else
                    {
                        item.FileSize_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda
{
    public partial class MasterReference
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MasterReference_Registration.Instance;
        public static MasterReference_Registration Registration => MasterReference_Registration.Instance;
        protected object CommonInstance()
        {
            return MasterReferenceCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return MasterReferenceSetterCommon.Instance;
        }
        protected object CommonSetterCopyInstance()
        {
            return MasterReferenceSetterCopyCommon.Instance;
        }
        object IMasterReferenceGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IMasterReferenceGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IMasterReferenceGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Internals
{
    public partial class MasterReferenceXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static MasterReferenceXmlWriteTranslation Instance = new MasterReferenceXmlWriteTranslation();

        public static void WriteToNodeXml(
            IMasterReferenceGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)MasterReference_FieldIndex.Master) ?? true))
            {
                ModKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Master),
                    item: item.Master,
                    fieldIndex: (int)MasterReference_FieldIndex.Master,
                    errorMask: errorMask);
            }
            if (item.FileSize_IsSet
                && (translationMask?.GetShouldTranslate((int)MasterReference_FieldIndex.FileSize) ?? true))
            {
                UInt64XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FileSize),
                    item: item.FileSize,
                    fieldIndex: (int)MasterReference_FieldIndex.FileSize,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IMasterReferenceGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.MasterReference");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.MasterReference");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IMasterReferenceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IMasterReferenceGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IMasterReferenceGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class MasterReferenceXmlCreateTranslation
    {
        public readonly static MasterReferenceXmlCreateTranslation Instance = new MasterReferenceXmlCreateTranslation();

        public static void FillPublicXml(
            IMasterReference item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MasterReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IMasterReference item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Master":
                    try
                    {
                        errorMask?.PushIndex((int)MasterReference_FieldIndex.Master);
                        if (ModKeyXmlTranslation.Instance.Parse(
                            node: node,
                            item: out ModKey MasterParse,
                            errorMask: errorMask))
                        {
                            item.Master = MasterParse;
                        }
                        else
                        {
                            item.Master = default(ModKey);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FileSize":
                    try
                    {
                        errorMask?.PushIndex((int)MasterReference_FieldIndex.FileSize);
                        if (UInt64XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt64 FileSizeParse,
                            errorMask: errorMask))
                        {
                            item.FileSize = FileSizeParse;
                        }
                        else
                        {
                            item.FileSize = default(UInt64);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda
{
    #region Xml Write Mixins
    public static class MasterReferenceXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IMasterReferenceGetter item,
            XElement node,
            out MasterReference_ErrorMask errorMask,
            bool doMasks = true,
            MasterReference_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((MasterReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IMasterReferenceGetter item,
            string path,
            out MasterReference_ErrorMask errorMask,
            MasterReference_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMasterReferenceGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMasterReferenceGetter item,
            Stream stream,
            out MasterReference_ErrorMask errorMask,
            MasterReference_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMasterReferenceGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMasterReferenceGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((MasterReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IMasterReferenceGetter item,
            XElement node,
            string name = null,
            MasterReference_TranslationMask translationMask = null)
        {
            ((MasterReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IMasterReferenceGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((MasterReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMasterReferenceGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((MasterReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Internals
{
    public class MasterReference_Mask<T> : IMask<T>, IEquatable<MasterReference_Mask<T>>
    {
        #region Ctors
        public MasterReference_Mask()
        {
        }

        public MasterReference_Mask(T initialValue)
        {
            this.Master = initialValue;
            this.FileSize = initialValue;
        }
        #endregion

        #region Members
        public T Master;
        public T FileSize;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MasterReference_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MasterReference_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Master, rhs.Master)) return false;
            if (!object.Equals(this.FileSize, rhs.FileSize)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Master?.GetHashCode());
            ret = ret.CombineHashCode(this.FileSize?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Master)) return false;
            if (!eval(this.FileSize)) return false;
            return true;
        }
        #endregion

        #region Translate
        public MasterReference_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MasterReference_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MasterReference_Mask<R> obj, Func<T, R> eval)
        {
            obj.Master = eval(this.Master);
            obj.FileSize = eval(this.FileSize);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MasterReference_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MasterReference_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MasterReference_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Master ?? true)
                {
                    fg.AppendLine($"Master => {Master}");
                }
                if (printMask?.FileSize ?? true)
                {
                    fg.AppendLine($"FileSize => {FileSize}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MasterReference_ErrorMask : IErrorMask, IErrorMask<MasterReference_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Master;
        public Exception FileSize;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    return Master;
                case MasterReference_FieldIndex.FileSize:
                    return FileSize;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    this.Master = ex;
                    break;
                case MasterReference_FieldIndex.FileSize:
                    this.FileSize = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            MasterReference_FieldIndex enu = (MasterReference_FieldIndex)index;
            switch (enu)
            {
                case MasterReference_FieldIndex.Master:
                    this.Master = (Exception)obj;
                    break;
                case MasterReference_FieldIndex.FileSize:
                    this.FileSize = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Master != null) return true;
            if (FileSize != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("MasterReference_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Master => {Master}");
            fg.AppendLine($"FileSize => {FileSize}");
        }
        #endregion

        #region Combine
        public MasterReference_ErrorMask Combine(MasterReference_ErrorMask rhs)
        {
            var ret = new MasterReference_ErrorMask();
            ret.Master = this.Master.Combine(rhs.Master);
            ret.FileSize = this.FileSize.Combine(rhs.FileSize);
            return ret;
        }
        public static MasterReference_ErrorMask Combine(MasterReference_ErrorMask lhs, MasterReference_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static MasterReference_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new MasterReference_ErrorMask();
        }
        #endregion

    }
    public class MasterReference_CopyMask
    {
        public MasterReference_CopyMask()
        {
        }

        public MasterReference_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Master = defaultOn;
            this.FileSize = defaultOn;
        }

        #region Members
        public bool Master;
        public bool FileSize;
        #endregion

    }

    public class MasterReference_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Master;
        public bool FileSize;
        #endregion

        #region Ctors
        public MasterReference_TranslationMask()
        {
        }

        public MasterReference_TranslationMask(bool defaultOn)
        {
            this.Master = defaultOn;
            this.FileSize = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Master, null));
            ret.Add((FileSize, null));
        }
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Internals
{
    public partial class MasterReferenceBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static MasterReferenceBinaryWriteTranslation Instance = new MasterReferenceBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IMasterReferenceGetter item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.ModKeyBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Master,
                header: recordTypeConverter.ConvertToCustom(MasterReference_Registration.MAST_HEADER),
                nullable: false);
            if (item.FileSize_IsSet)
            {
                Mutagen.Bethesda.Binary.UInt64BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FileSize,
                    header: recordTypeConverter.ConvertToCustom(MasterReference_Registration.DATA_HEADER),
                    nullable: false);
            }
        }

        public void Write(
            MutagenWriter writer,
            IMasterReferenceGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (IMasterReferenceGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class MasterReferenceBinaryCreateTranslation
    {
        public readonly static MasterReferenceBinaryCreateTranslation Instance = new MasterReferenceBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda
{
    #region Binary Write Mixins
    public static class MasterReferenceBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMasterReferenceGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out MasterReference_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((MasterReferenceBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MasterReference_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this IMasterReferenceGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            ((MasterReferenceBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this IMasterReferenceGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((MasterReferenceBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Internals
{
    public partial class MasterReferenceBinaryWrapper :
        BinaryWrapper,
        IMasterReferenceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MasterReference_Registration.Instance;
        public static MasterReference_Registration Registration => MasterReference_Registration.Instance;
        protected object CommonInstance()
        {
            return MasterReferenceCommon.Instance;
        }
        object IMasterReferenceGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IMasterReferenceGetter.CommonSetterInstance()
        {
            return null;
        }
        object IMasterReferenceGetter.CommonSetterCopyInstance()
        {
            return null;
        }

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMasterReferenceGetter)rhs, include);

        protected object XmlWriteTranslator => MasterReferenceXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((MasterReferenceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        protected object BinaryWriteTranslator => MasterReferenceBinaryWriteTranslation.Instance;
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ((MasterReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        #region Master
        private int? _MasterLocation;
        public ModKey Master => _MasterLocation.HasValue ? ModKey.Factory(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordSpan(_data, _MasterLocation.Value, _package.Meta))) : default;
        #endregion
        #region FileSize
        private int? _FileSizeLocation;
        public bool FileSize_IsSet => _FileSizeLocation.HasValue;
        public UInt64 FileSize => _FileSizeLocation.HasValue ? BinaryPrimitives.ReadUInt64LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _FileSizeLocation.Value, _package.Meta)) : default;
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);

        protected MasterReferenceBinaryWrapper(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryWrapperFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this._data = bytes;
        }

        public static MasterReferenceBinaryWrapper MasterReferenceFactory(
            BinaryMemoryReadStream stream,
            BinaryWrapperFactoryPackage package,
            RecordTypeConverter recordTypeConverter = null)
        {
            var ret = new MasterReferenceBinaryWrapper(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x5453414D: // MAST
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)MasterReference_FieldIndex.Master) return TryGet<int?>.Failure;
                    _MasterLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MasterReference_FieldIndex.Master);
                }
                case 0x41544144: // DATA
                {
                    _FileSizeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MasterReference_FieldIndex.FileSize);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

