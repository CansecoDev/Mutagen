/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Internals;
using Mutagen.Bethesda;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda
{
    #region Class
    public abstract partial class NamedMajorRecord : MajorRecord, INamedMajorRecord, ILoquiObject<NamedMajorRecord>, ILoquiObjectSetter, IEquatable<NamedMajorRecord>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NamedMajorRecord_Registration.Instance;
        public new static NamedMajorRecord_Registration Registration => NamedMajorRecord_Registration.Instance;

        #region Ctor
        public NamedMajorRecord()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingSetItem<String> _Name = NotifyingSetItem.Factory<String>(markAsSet: false);
        public INotifyingSetItem<String> Name_Property => _Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String Name
        {
            get => this._Name.Item;
            set => this._Name.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> INamedMajorRecord.Name_Property => this.Name_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> INamedMajorRecordGetter.Name_Property => this.Name_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => NamedMajorRecordCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => NamedMajorRecordCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<NamedMajorRecord>.GetEqualsMask(NamedMajorRecord rhs) => NamedMajorRecordCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<INamedMajorRecordGetter>.GetEqualsMask(INamedMajorRecordGetter rhs) => NamedMajorRecordCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return NamedMajorRecordCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            NamedMajorRecord_Mask<bool> printMask = null)
        {
            return NamedMajorRecordCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            NamedMajorRecordCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new NamedMajorRecord_Mask<bool> GetHasBeenSetMask()
        {
            return NamedMajorRecordCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is NamedMajorRecord rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(NamedMajorRecord rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_Property.HasBeenSet != rhs.Name_Property.HasBeenSet) return false;
            if (Name_Property.HasBeenSet)
            {
                if (!object.Equals(Name, rhs.Name)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<NamedMajorRecord, NamedMajorRecord_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<NamedMajorRecord, NamedMajorRecord_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out NamedMajorRecord_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out NamedMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as NamedMajorRecord_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out NamedMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out NamedMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        protected override object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            NamedMajorRecordCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_XML_Internal(
            NamedMajorRecord item,
            XElement root,
            string name,
            Func<NamedMajorRecord_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Name":
                    item._Name.SetIfSucceeded(StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)NamedMajorRecord_FieldIndex.Name,
                        errorMask: errorMask));
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out NamedMajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            errorMask = this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                doMasks: doMasks) as NamedMajorRecord_ErrorMask;
        }

        public virtual void Write_Binary(
            string path,
            out NamedMajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out NamedMajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
        {
            NamedMajorRecordCommon.Write_Binary(
                item: this,
                doMasks: doMasks,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static TryGet<NamedMajorRecord_FieldIndex?> Fill_Binary_RecordTypes(
            NamedMajorRecord item,
            MutagenFrame frame,
            Func<NamedMajorRecord_ErrorMask> errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                case "FULL":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var NametryGet = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        fieldIndex: (int)NamedMajorRecord_FieldIndex.Name,
                        parseWhole: true,
                        errorMask: errorMask);
                    item._Name.SetIfSucceeded(NametryGet);
                    return TryGet<NamedMajorRecord_FieldIndex?>.Succeed(NamedMajorRecord_FieldIndex.Name);
                default:
                    return MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask).Bubble((i) => NamedMajorRecordCommon.ConvertFieldIndex(i));
            }
        }

        #endregion

        public NamedMajorRecord Copy(
            NamedMajorRecord_CopyMask copyMask = null,
            INamedMajorRecordGetter def = null)
        {
            return NamedMajorRecord.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static NamedMajorRecord Copy(
            INamedMajorRecord item,
            NamedMajorRecord_CopyMask copyMask = null,
            INamedMajorRecordGetter def = null)
        {
            NamedMajorRecord ret = (NamedMajorRecord)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static NamedMajorRecord Copy_ToLoqui(
            INamedMajorRecordGetter item,
            NamedMajorRecord_CopyMask copyMask = null,
            INamedMajorRecordGetter def = null)
        {
            NamedMajorRecord ret = (NamedMajorRecord)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            INamedMajorRecordGetter rhs,
            NamedMajorRecord_CopyMask copyMask,
            INamedMajorRecordGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            INamedMajorRecordGetter rhs,
            out NamedMajorRecord_ErrorMask errorMask,
            NamedMajorRecord_CopyMask copyMask = null,
            INamedMajorRecordGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            NamedMajorRecord_ErrorMask retErrorMask = null;
            Func<IErrorMask> maskGetter = !doMasks ? default(Func<IErrorMask>) : () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new NamedMajorRecord_ErrorMask();
                }
                return retErrorMask;
            };
            NamedMajorRecordCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    this._Name.Set(
                        (String)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            NamedMajorRecordCommon.Clear(this, cmds);
        }


        protected new static void CopyInInternal_NamedMajorRecord(NamedMajorRecord obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out NamedMajorRecord_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    obj._Name.Set(
                        (String)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, NamedMajorRecord obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface INamedMajorRecord : INamedMajorRecordGetter, IMajorRecord, ILoquiClass<INamedMajorRecord, INamedMajorRecordGetter>, ILoquiClass<NamedMajorRecord, INamedMajorRecordGetter>
    {
        new String Name { get; set; }
        new INotifyingSetItem<String> Name_Property { get; }

    }

    public partial interface INamedMajorRecordGetter : IMajorRecordGetter
    {
        #region Name
        String Name { get; }
        INotifyingSetItemGetter<String> Name_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Internals
{
    #region Field Index
    public enum NamedMajorRecord_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
        Name = 5,
    }
    #endregion

    #region Registration
    public class NamedMajorRecord_Registration : ILoquiRegistration
    {
        public static readonly NamedMajorRecord_Registration Instance = new NamedMajorRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Bethesda.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Bethesda.ProtocolKey,
            msgID: 2,
            version: 0);

        public const string GUID = "492d4810-c631-49fc-8358-a68f4d1af93d";

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(NamedMajorRecord_Mask<>);

        public static readonly Type ErrorMaskType = typeof(NamedMajorRecord_ErrorMask);

        public static readonly Type ClassType = typeof(NamedMajorRecord);

        public static readonly Type GetterType = typeof(INamedMajorRecordGetter);

        public static readonly Type SetterType = typeof(INamedMajorRecord);

        public static readonly Type CommonType = typeof(NamedMajorRecordCommon);

        public const string FullName = "Mutagen.Bethesda.NamedMajorRecord";

        public const string Name = "NamedMajorRecord";

        public const string Namespace = "Mutagen.Bethesda";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)NamedMajorRecord_FieldIndex.Name;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return "Name";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return typeof(String);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType ACTI_HEADER = new RecordType("ACTI");
        public static readonly RecordType APPA_HEADER = new RecordType("APPA");
        public static readonly RecordType BSGN_HEADER = new RecordType("BSGN");
        public static readonly RecordType BOOK_HEADER = new RecordType("BOOK");
        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType CONT_HEADER = new RecordType("CONT");
        public static readonly RecordType CREA_HEADER = new RecordType("CREA");
        public static readonly RecordType DOOR_HEADER = new RecordType("DOOR");
        public static readonly RecordType ENCH_HEADER = new RecordType("ENCH");
        public static readonly RecordType EYES_HEADER = new RecordType("EYES");
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType FLOR_HEADER = new RecordType("FLOR");
        public static readonly RecordType FURN_HEADER = new RecordType("FURN");
        public static readonly RecordType HAIR_HEADER = new RecordType("HAIR");
        public static readonly RecordType INGR_HEADER = new RecordType("INGR");
        public static readonly RecordType KEYM_HEADER = new RecordType("KEYM");
        public static readonly RecordType MGEF_HEADER = new RecordType("MGEF");
        public static readonly RecordType MISC_HEADER = new RecordType("MISC");
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static readonly RecordType ALCH_HEADER = new RecordType("ALCH");
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType SGST_HEADER = new RecordType("SGST");
        public static readonly RecordType SLGM_HEADER = new RecordType("SLGM");
        public static readonly RecordType WEAP_HEADER = new RecordType("WEAP");
        public static readonly RecordType WRLD_HEADER = new RecordType("WRLD");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType CLOT_HEADER = new RecordType("CLOT");
        public static readonly RecordType LVSP_HEADER = new RecordType("LVSP");
        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        FULL_HEADER,
                        ACTI_HEADER,
                        APPA_HEADER,
                        BSGN_HEADER,
                        BOOK_HEADER,
                        CELL_HEADER,
                        CLAS_HEADER,
                        CONT_HEADER,
                        CREA_HEADER,
                        DOOR_HEADER,
                        ENCH_HEADER,
                        EYES_HEADER,
                        FACT_HEADER,
                        FLOR_HEADER,
                        FURN_HEADER,
                        HAIR_HEADER,
                        INGR_HEADER,
                        KEYM_HEADER,
                        MGEF_HEADER,
                        MISC_HEADER,
                        NPC__HEADER,
                        ALCH_HEADER,
                        RACE_HEADER,
                        SGST_HEADER,
                        SLGM_HEADER,
                        WEAP_HEADER,
                        WRLD_HEADER,
                        ARMO_HEADER,
                        CLOT_HEADER,
                        LVSP_HEADER,
                        SPEL_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class NamedMajorRecordCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            INamedMajorRecord item,
            INamedMajorRecordGetter rhs,
            INamedMajorRecordGetter def,
            bool doMasks,
            Func<IErrorMask> errorMask,
            NamedMajorRecord_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Name ?? true)
            {
                try
                {
                    item.Name_Property.SetToWithDefault(
                        rhs: rhs.Name_Property,
                        def: def?.Name_Property,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)NamedMajorRecord_FieldIndex.Name, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            INamedMajorRecord obj,
            NotifyingFireParameters cmds = null)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    obj.Name_Property.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            INamedMajorRecord obj,
            NotifyingUnsetParameters cmds = null)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    obj.Name_Property.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            INamedMajorRecord obj)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return obj.Name_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            INamedMajorRecordGetter obj)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return obj.Name;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            INamedMajorRecord item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Name_Property.Unset(cmds.ToUnsetParams());
        }

        public static NamedMajorRecord_Mask<bool> GetEqualsMask(
            this INamedMajorRecordGetter item,
            INamedMajorRecordGetter rhs)
        {
            var ret = new NamedMajorRecord_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            INamedMajorRecordGetter item,
            INamedMajorRecordGetter rhs,
            NamedMajorRecord_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Name = item.Name_Property.Equals(rhs.Name_Property, (l, r) => object.Equals(l, r));
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this INamedMajorRecordGetter item,
            string name = null,
            NamedMajorRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this INamedMajorRecordGetter item,
            FileGeneration fg,
            string name = null,
            NamedMajorRecord_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(NamedMajorRecord)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(NamedMajorRecord)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this INamedMajorRecordGetter item,
            NamedMajorRecord_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_Property.HasBeenSet) return false;
            return true;
        }

        public static NamedMajorRecord_Mask<bool> GetHasBeenSetMask(INamedMajorRecordGetter item)
        {
            var ret = new NamedMajorRecord_Mask<bool>();
            ret.Name = item.Name_Property.HasBeenSet;
            return ret;
        }

        public static NamedMajorRecord_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static NamedMajorRecord_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return (NamedMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormID:
                    return (NamedMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (NamedMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (NamedMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.RecordType:
                    return (NamedMajorRecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            INamedMajorRecordGetter item,
            bool doMasks,
            out NamedMajorRecord_ErrorMask errorMask,
            string name = null)
        {
            NamedMajorRecord_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new NamedMajorRecord_ErrorMask()) : default(Func<NamedMajorRecord_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XElement node,
            INamedMajorRecordGetter item,
            Func<NamedMajorRecord_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                var elem = new XElement(name ?? "Mutagen.Bethesda.NamedMajorRecord");
                node.Add(elem);
                if (name != null)
                {
                    elem.SetAttributeValue("type", "Mutagen.Bethesda.NamedMajorRecord");
                }
                if (item.Name_Property.HasBeenSet)
                {
                    StringXmlTranslation.Instance.Write(
                        node: elem,
                        name: nameof(item.Name),
                        item: item.Name_Property,
                        fieldIndex: (int)NamedMajorRecord_FieldIndex.Name,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            NamedMajorRecord item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out NamedMajorRecord_ErrorMask errorMask)
        {
            NamedMajorRecord_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new NamedMajorRecord_ErrorMask()) : default(Func<NamedMajorRecord_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            NamedMajorRecord item,
            RecordTypeConverter recordTypeConverter,
            Func<NamedMajorRecord_ErrorMask> errorMask)
        {
            try
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            NamedMajorRecord item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<NamedMajorRecord_ErrorMask> errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name_Property,
                fieldIndex: (int)NamedMajorRecord_FieldIndex.Name,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(NamedMajorRecord_Registration.FULL_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class NamedMajorRecord_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<NamedMajorRecord_Mask<T>>
    {
        #region Ctors
        public NamedMajorRecord_Mask()
        {
        }

        public NamedMajorRecord_Mask(T initialValue)
        {
            this.Name = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is NamedMajorRecord_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(NamedMajorRecord_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new NamedMajorRecord_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new NamedMajorRecord_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(NamedMajorRecord_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(NamedMajorRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, NamedMajorRecord_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(NamedMajorRecord_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class NamedMajorRecord_ErrorMask : MajorRecord_ErrorMask, IErrorMask<NamedMajorRecord_ErrorMask>
    {
        #region Members
        public Exception Name;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return Name;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    this.Name = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("NamedMajorRecord_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Name => {Name}");
        }
        #endregion

        #region Combine
        public NamedMajorRecord_ErrorMask Combine(NamedMajorRecord_ErrorMask rhs)
        {
            var ret = new NamedMajorRecord_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            return ret;
        }
        public static NamedMajorRecord_ErrorMask Combine(NamedMajorRecord_ErrorMask lhs, NamedMajorRecord_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class NamedMajorRecord_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool Name;
        #endregion

    }
    #endregion




    #endregion

}
