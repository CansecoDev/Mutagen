/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Grass :
        OblivionMajorRecord,
        IGrassInternal,
        ILoquiObjectSetter<Grass>,
        IEquatable<Grass>,
        IEqualsMask
    {
        #region Ctor
        protected Grass()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IGrassGetter.Model => this.Model;
        #endregion
        #region Density
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Density;
        public Byte Density
        {
            get => this._Density;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Density = value;
            }
        }
        #endregion
        #region MinSlope
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _MinSlope;
        public Byte MinSlope
        {
            get => this._MinSlope;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._MinSlope = value;
            }
        }
        #endregion
        #region MaxSlope
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _MaxSlope;
        public Byte MaxSlope
        {
            get => this._MaxSlope;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._MaxSlope = value;
            }
        }
        #endregion
        #region Fluff1
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Fluff1;
        public Byte Fluff1
        {
            get => this._Fluff1;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Fluff1 = value;
            }
        }
        #endregion
        #region UnitFromWaterAmount
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _UnitFromWaterAmount;
        public UInt16 UnitFromWaterAmount
        {
            get => this._UnitFromWaterAmount;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._UnitFromWaterAmount = value;
            }
        }
        #endregion
        #region Fluff2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _Fluff2;
        public UInt16 Fluff2
        {
            get => this._Fluff2;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Fluff2 = value;
            }
        }
        #endregion
        #region UnitFromWaterMode
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Grass.UnitFromWaterType _UnitFromWaterMode;
        public Grass.UnitFromWaterType UnitFromWaterMode
        {
            get => this._UnitFromWaterMode;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._UnitFromWaterMode = value;
            }
        }
        #endregion
        #region PositionRange
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _PositionRange;
        public Single PositionRange
        {
            get => this._PositionRange;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._PositionRange = value;
            }
        }
        #endregion
        #region HeightRange
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _HeightRange;
        public Single HeightRange
        {
            get => this._HeightRange;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._HeightRange = value;
            }
        }
        #endregion
        #region ColorRange
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ColorRange;
        public Single ColorRange
        {
            get => this._ColorRange;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._ColorRange = value;
            }
        }
        #endregion
        #region WavePeriod
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _WavePeriod;
        public Single WavePeriod
        {
            get => this._WavePeriod;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._WavePeriod = value;
            }
        }
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Grass.GrassFlag _Flags;
        public Grass.GrassFlag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region DATADataTypeState
        public Grass.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            GrassMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IGrassGetter rhs)) return false;
            return ((GrassCommon)((IGrassGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Grass obj)
        {
            return ((GrassCommon)((IGrassGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((GrassCommon)((IGrassGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => GrassXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((GrassXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Grass CreateFromXml(
            XElement node,
            Grass.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Grass CreateFromXml(
            XElement node,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Grass.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Grass CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Grass();
            ((GrassSetterCommon)((IGrassGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Grass CreateFromXml(
            string path,
            Grass.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Grass CreateFromXml(
            string path,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Grass CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Grass.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Grass CreateFromXml(
            Stream stream,
            Grass.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Grass CreateFromXml(
            Stream stream,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Grass CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Grass.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Density = initialValue;
                this.MinSlope = initialValue;
                this.MaxSlope = initialValue;
                this.Fluff1 = initialValue;
                this.UnitFromWaterAmount = initialValue;
                this.Fluff2 = initialValue;
                this.UnitFromWaterMode = initialValue;
                this.PositionRange = initialValue;
                this.HeightRange = initialValue;
                this.ColorRange = initialValue;
                this.WavePeriod = initialValue;
                this.Flags = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Model,
                TItem Density,
                TItem MinSlope,
                TItem MaxSlope,
                TItem Fluff1,
                TItem UnitFromWaterAmount,
                TItem Fluff2,
                TItem UnitFromWaterMode,
                TItem PositionRange,
                TItem HeightRange,
                TItem ColorRange,
                TItem WavePeriod,
                TItem Flags,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Density = Density;
                this.MinSlope = MinSlope;
                this.MaxSlope = MaxSlope;
                this.Fluff1 = Fluff1;
                this.UnitFromWaterAmount = UnitFromWaterAmount;
                this.Fluff2 = Fluff2;
                this.UnitFromWaterMode = UnitFromWaterMode;
                this.PositionRange = PositionRange;
                this.HeightRange = HeightRange;
                this.ColorRange = ColorRange;
                this.WavePeriod = WavePeriod;
                this.Flags = Flags;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Density;
            public TItem MinSlope;
            public TItem MaxSlope;
            public TItem Fluff1;
            public TItem UnitFromWaterAmount;
            public TItem Fluff2;
            public TItem UnitFromWaterMode;
            public TItem PositionRange;
            public TItem HeightRange;
            public TItem ColorRange;
            public TItem WavePeriod;
            public TItem Flags;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Density, rhs.Density)) return false;
                if (!object.Equals(this.MinSlope, rhs.MinSlope)) return false;
                if (!object.Equals(this.MaxSlope, rhs.MaxSlope)) return false;
                if (!object.Equals(this.Fluff1, rhs.Fluff1)) return false;
                if (!object.Equals(this.UnitFromWaterAmount, rhs.UnitFromWaterAmount)) return false;
                if (!object.Equals(this.Fluff2, rhs.Fluff2)) return false;
                if (!object.Equals(this.UnitFromWaterMode, rhs.UnitFromWaterMode)) return false;
                if (!object.Equals(this.PositionRange, rhs.PositionRange)) return false;
                if (!object.Equals(this.HeightRange, rhs.HeightRange)) return false;
                if (!object.Equals(this.ColorRange, rhs.ColorRange)) return false;
                if (!object.Equals(this.WavePeriod, rhs.WavePeriod)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Model?.GetHashCode());
                ret = ret.CombineHashCode(this.Density?.GetHashCode());
                ret = ret.CombineHashCode(this.MinSlope?.GetHashCode());
                ret = ret.CombineHashCode(this.MaxSlope?.GetHashCode());
                ret = ret.CombineHashCode(this.Fluff1?.GetHashCode());
                ret = ret.CombineHashCode(this.UnitFromWaterAmount?.GetHashCode());
                ret = ret.CombineHashCode(this.Fluff2?.GetHashCode());
                ret = ret.CombineHashCode(this.UnitFromWaterMode?.GetHashCode());
                ret = ret.CombineHashCode(this.PositionRange?.GetHashCode());
                ret = ret.CombineHashCode(this.HeightRange?.GetHashCode());
                ret = ret.CombineHashCode(this.ColorRange?.GetHashCode());
                ret = ret.CombineHashCode(this.WavePeriod?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Density)) return false;
                if (!eval(this.MinSlope)) return false;
                if (!eval(this.MaxSlope)) return false;
                if (!eval(this.Fluff1)) return false;
                if (!eval(this.UnitFromWaterAmount)) return false;
                if (!eval(this.Fluff2)) return false;
                if (!eval(this.UnitFromWaterMode)) return false;
                if (!eval(this.PositionRange)) return false;
                if (!eval(this.HeightRange)) return false;
                if (!eval(this.ColorRange)) return false;
                if (!eval(this.WavePeriod)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Density)) return true;
                if (eval(this.MinSlope)) return true;
                if (eval(this.MaxSlope)) return true;
                if (eval(this.Fluff1)) return true;
                if (eval(this.UnitFromWaterAmount)) return true;
                if (eval(this.Fluff2)) return true;
                if (eval(this.UnitFromWaterMode)) return true;
                if (eval(this.PositionRange)) return true;
                if (eval(this.HeightRange)) return true;
                if (eval(this.ColorRange)) return true;
                if (eval(this.WavePeriod)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Grass.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Density = eval(this.Density);
                obj.MinSlope = eval(this.MinSlope);
                obj.MaxSlope = eval(this.MaxSlope);
                obj.Fluff1 = eval(this.Fluff1);
                obj.UnitFromWaterAmount = eval(this.UnitFromWaterAmount);
                obj.Fluff2 = eval(this.Fluff2);
                obj.UnitFromWaterMode = eval(this.UnitFromWaterMode);
                obj.PositionRange = eval(this.PositionRange);
                obj.HeightRange = eval(this.HeightRange);
                obj.ColorRange = eval(this.ColorRange);
                obj.WavePeriod = eval(this.WavePeriod);
                obj.Flags = eval(this.Flags);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Grass.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Grass.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Grass.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Density ?? true)
                    {
                        fg.AppendItem(Density, "Density");
                    }
                    if (printMask?.MinSlope ?? true)
                    {
                        fg.AppendItem(MinSlope, "MinSlope");
                    }
                    if (printMask?.MaxSlope ?? true)
                    {
                        fg.AppendItem(MaxSlope, "MaxSlope");
                    }
                    if (printMask?.Fluff1 ?? true)
                    {
                        fg.AppendItem(Fluff1, "Fluff1");
                    }
                    if (printMask?.UnitFromWaterAmount ?? true)
                    {
                        fg.AppendItem(UnitFromWaterAmount, "UnitFromWaterAmount");
                    }
                    if (printMask?.Fluff2 ?? true)
                    {
                        fg.AppendItem(Fluff2, "Fluff2");
                    }
                    if (printMask?.UnitFromWaterMode ?? true)
                    {
                        fg.AppendItem(UnitFromWaterMode, "UnitFromWaterMode");
                    }
                    if (printMask?.PositionRange ?? true)
                    {
                        fg.AppendItem(PositionRange, "PositionRange");
                    }
                    if (printMask?.HeightRange ?? true)
                    {
                        fg.AppendItem(HeightRange, "HeightRange");
                    }
                    if (printMask?.ColorRange ?? true)
                    {
                        fg.AppendItem(ColorRange, "ColorRange");
                    }
                    if (printMask?.WavePeriod ?? true)
                    {
                        fg.AppendItem(WavePeriod, "WavePeriod");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Density;
            public Exception? MinSlope;
            public Exception? MaxSlope;
            public Exception? Fluff1;
            public Exception? UnitFromWaterAmount;
            public Exception? Fluff2;
            public Exception? UnitFromWaterMode;
            public Exception? PositionRange;
            public Exception? HeightRange;
            public Exception? ColorRange;
            public Exception? WavePeriod;
            public Exception? Flags;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Grass_FieldIndex enu = (Grass_FieldIndex)index;
                switch (enu)
                {
                    case Grass_FieldIndex.Model:
                        return Model;
                    case Grass_FieldIndex.Density:
                        return Density;
                    case Grass_FieldIndex.MinSlope:
                        return MinSlope;
                    case Grass_FieldIndex.MaxSlope:
                        return MaxSlope;
                    case Grass_FieldIndex.Fluff1:
                        return Fluff1;
                    case Grass_FieldIndex.UnitFromWaterAmount:
                        return UnitFromWaterAmount;
                    case Grass_FieldIndex.Fluff2:
                        return Fluff2;
                    case Grass_FieldIndex.UnitFromWaterMode:
                        return UnitFromWaterMode;
                    case Grass_FieldIndex.PositionRange:
                        return PositionRange;
                    case Grass_FieldIndex.HeightRange:
                        return HeightRange;
                    case Grass_FieldIndex.ColorRange:
                        return ColorRange;
                    case Grass_FieldIndex.WavePeriod:
                        return WavePeriod;
                    case Grass_FieldIndex.Flags:
                        return Flags;
                    case Grass_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Grass_FieldIndex enu = (Grass_FieldIndex)index;
                switch (enu)
                {
                    case Grass_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Grass_FieldIndex.Density:
                        this.Density = ex;
                        break;
                    case Grass_FieldIndex.MinSlope:
                        this.MinSlope = ex;
                        break;
                    case Grass_FieldIndex.MaxSlope:
                        this.MaxSlope = ex;
                        break;
                    case Grass_FieldIndex.Fluff1:
                        this.Fluff1 = ex;
                        break;
                    case Grass_FieldIndex.UnitFromWaterAmount:
                        this.UnitFromWaterAmount = ex;
                        break;
                    case Grass_FieldIndex.Fluff2:
                        this.Fluff2 = ex;
                        break;
                    case Grass_FieldIndex.UnitFromWaterMode:
                        this.UnitFromWaterMode = ex;
                        break;
                    case Grass_FieldIndex.PositionRange:
                        this.PositionRange = ex;
                        break;
                    case Grass_FieldIndex.HeightRange:
                        this.HeightRange = ex;
                        break;
                    case Grass_FieldIndex.ColorRange:
                        this.ColorRange = ex;
                        break;
                    case Grass_FieldIndex.WavePeriod:
                        this.WavePeriod = ex;
                        break;
                    case Grass_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Grass_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Grass_FieldIndex enu = (Grass_FieldIndex)index;
                switch (enu)
                {
                    case Grass_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Grass_FieldIndex.Density:
                        this.Density = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.MinSlope:
                        this.MinSlope = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.MaxSlope:
                        this.MaxSlope = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.Fluff1:
                        this.Fluff1 = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.UnitFromWaterAmount:
                        this.UnitFromWaterAmount = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.Fluff2:
                        this.Fluff2 = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.UnitFromWaterMode:
                        this.UnitFromWaterMode = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.PositionRange:
                        this.PositionRange = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.HeightRange:
                        this.HeightRange = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.ColorRange:
                        this.ColorRange = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.WavePeriod:
                        this.WavePeriod = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Grass_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Model != null) return true;
                if (Density != null) return true;
                if (MinSlope != null) return true;
                if (MaxSlope != null) return true;
                if (Fluff1 != null) return true;
                if (UnitFromWaterAmount != null) return true;
                if (Fluff2 != null) return true;
                if (UnitFromWaterMode != null) return true;
                if (PositionRange != null) return true;
                if (HeightRange != null) return true;
                if (ColorRange != null) return true;
                if (WavePeriod != null) return true;
                if (Flags != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                Model?.ToString(fg);
                fg.AppendItem(Density, "Density");
                fg.AppendItem(MinSlope, "MinSlope");
                fg.AppendItem(MaxSlope, "MaxSlope");
                fg.AppendItem(Fluff1, "Fluff1");
                fg.AppendItem(UnitFromWaterAmount, "UnitFromWaterAmount");
                fg.AppendItem(Fluff2, "Fluff2");
                fg.AppendItem(UnitFromWaterMode, "UnitFromWaterMode");
                fg.AppendItem(PositionRange, "PositionRange");
                fg.AppendItem(HeightRange, "HeightRange");
                fg.AppendItem(ColorRange, "ColorRange");
                fg.AppendItem(WavePeriod, "WavePeriod");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Density = this.Density.Combine(rhs.Density);
                ret.MinSlope = this.MinSlope.Combine(rhs.MinSlope);
                ret.MaxSlope = this.MaxSlope.Combine(rhs.MaxSlope);
                ret.Fluff1 = this.Fluff1.Combine(rhs.Fluff1);
                ret.UnitFromWaterAmount = this.UnitFromWaterAmount.Combine(rhs.UnitFromWaterAmount);
                ret.Fluff2 = this.Fluff2.Combine(rhs.Fluff2);
                ret.UnitFromWaterMode = this.UnitFromWaterMode.Combine(rhs.UnitFromWaterMode);
                ret.PositionRange = this.PositionRange.Combine(rhs.PositionRange);
                ret.HeightRange = this.HeightRange.Combine(rhs.HeightRange);
                ret.ColorRange = this.ColorRange.Combine(rhs.ColorRange);
                ret.WavePeriod = this.WavePeriod.Combine(rhs.WavePeriod);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool Density;
            public bool MinSlope;
            public bool MaxSlope;
            public bool Fluff1;
            public bool UnitFromWaterAmount;
            public bool Fluff2;
            public bool UnitFromWaterMode;
            public bool PositionRange;
            public bool HeightRange;
            public bool ColorRange;
            public bool WavePeriod;
            public bool Flags;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Density = defaultOn;
                this.MinSlope = defaultOn;
                this.MaxSlope = defaultOn;
                this.Fluff1 = defaultOn;
                this.UnitFromWaterAmount = defaultOn;
                this.Fluff2 = defaultOn;
                this.UnitFromWaterMode = defaultOn;
                this.PositionRange = defaultOn;
                this.HeightRange = defaultOn;
                this.ColorRange = defaultOn;
                this.WavePeriod = defaultOn;
                this.Flags = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Density, null));
                ret.Add((MinSlope, null));
                ret.Add((MaxSlope, null));
                ret.Add((Fluff1, null));
                ret.Add((UnitFromWaterAmount, null));
                ret.Add((Fluff2, null));
                ret.Add((UnitFromWaterMode, null));
                ret.Add((PositionRange, null));
                ret.Add((HeightRange, null));
                ret.Add((ColorRange, null));
                ret.Add((WavePeriod, null));
                ret.Add((Flags, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Grass_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        public Grass(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Grass(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GrassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((GrassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Grass CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Grass CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Grass();
            ((GrassSetterCommon)((IGrassGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGrassGetter)rhs, include);

        void IClearable.Clear()
        {
            ((GrassSetterCommon)((IGrassGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Grass GetNew()
        {
            return new Grass();
        }

    }
    #endregion

    #region Interface
    public partial interface IGrass :
        IGrassGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IGrassInternal>
    {
        new Model? Model { get; set; }
        new Byte Density { get; set; }
        new Byte MinSlope { get; set; }
        new Byte MaxSlope { get; set; }
        new Byte Fluff1 { get; set; }
        new UInt16 UnitFromWaterAmount { get; set; }
        new UInt16 Fluff2 { get; set; }
        new Grass.UnitFromWaterType UnitFromWaterMode { get; set; }
        new Single PositionRange { get; set; }
        new Single HeightRange { get; set; }
        new Single ColorRange { get; set; }
        new Single WavePeriod { get; set; }
        new Grass.GrassFlag Flags { get; set; }
        new Grass.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IGrassInternal :
        IOblivionMajorRecordInternal,
        IGrass,
        IGrassGetter
    {
    }

    public partial interface IGrassGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IGrassGetter>,
        IXmlItem,
        IBinaryItem
    {
        IModelGetter? Model { get; }
        Byte Density { get; }
        Byte MinSlope { get; }
        Byte MaxSlope { get; }
        Byte Fluff1 { get; }
        UInt16 UnitFromWaterAmount { get; }
        UInt16 Fluff2 { get; }
        Grass.UnitFromWaterType UnitFromWaterMode { get; }
        Single PositionRange { get; }
        Single HeightRange { get; }
        Single ColorRange { get; }
        Single WavePeriod { get; }
        Grass.GrassFlag Flags { get; }
        Grass.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class GrassMixIn
    {
        public static void Clear(this IGrassInternal item)
        {
            ((GrassSetterCommon)((IGrassGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Grass.Mask<bool> GetEqualsMask(
            this IGrassGetter item,
            IGrassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GrassCommon)((IGrassGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IGrassGetter item,
            string? name = null,
            Grass.Mask<bool>? printMask = null)
        {
            return ((GrassCommon)((IGrassGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IGrassGetter item,
            FileGeneration fg,
            string? name = null,
            Grass.Mask<bool>? printMask = null)
        {
            ((GrassCommon)((IGrassGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IGrassGetter item,
            Grass.Mask<bool?> checkMask)
        {
            return ((GrassCommon)((IGrassGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Grass.Mask<bool> GetHasBeenSetMask(this IGrassGetter item)
        {
            var ret = new Grass.Mask<bool>(false);
            ((GrassCommon)((IGrassGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IGrassGetter item,
            IGrassGetter rhs)
        {
            return ((GrassCommon)((IGrassGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IGrassInternal lhs,
            IGrassGetter rhs,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GrassSetterTranslationCommon)((IGrassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Grass.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGrassInternal lhs,
            IGrassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GrassSetterTranslationCommon)((IGrassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Grass DeepCopy(
            this IGrassGetter item,
            Grass.TranslationMask? copyMask = null)
        {
            return ((GrassSetterTranslationCommon)((IGrassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Grass DeepCopy(
            this IGrassGetter item,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? copyMask = null)
        {
            return ((GrassSetterTranslationCommon)((IGrassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Grass DeepCopy(
            this IGrassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GrassSetterTranslationCommon)((IGrassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IGrassInternal item,
            XElement node,
            Grass.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IGrassInternal item,
            XElement node,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Grass.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IGrassInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((GrassSetterCommon)((IGrassGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGrassInternal item,
            string path,
            Grass.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGrassInternal item,
            string path,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGrassInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Grass.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IGrassInternal item,
            Stream stream,
            Grass.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGrassInternal item,
            Stream stream,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGrassInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Grass.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IGrassInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IGrassInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((GrassSetterCommon)((IGrassGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Grass_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Model = 5,
        Density = 6,
        MinSlope = 7,
        MaxSlope = 8,
        Fluff1 = 9,
        UnitFromWaterAmount = 10,
        Fluff2 = 11,
        UnitFromWaterMode = 12,
        PositionRange = 13,
        HeightRange = 14,
        ColorRange = 15,
        WavePeriod = 16,
        Flags = 17,
        DATADataTypeState = 18,
    }
    #endregion

    #region Registration
    public partial class Grass_Registration : ILoquiRegistration
    {
        public static readonly Grass_Registration Instance = new Grass_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 58,
            version: 0);

        public const string GUID = "08091e89-54fe-4950-b16d-c11d6c7faef3";

        public const ushort AdditionalFieldCount = 14;

        public const ushort FieldCount = 19;

        public static readonly Type MaskType = typeof(Grass.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Grass.ErrorMask);

        public static readonly Type ClassType = typeof(Grass);

        public static readonly Type GetterType = typeof(IGrassGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGrass);

        public static readonly Type? InternalSetterType = typeof(IGrassInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Grass";

        public const string Name = "Grass";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Grass_FieldIndex.Model;
                case "DENSITY":
                    return (ushort)Grass_FieldIndex.Density;
                case "MINSLOPE":
                    return (ushort)Grass_FieldIndex.MinSlope;
                case "MAXSLOPE":
                    return (ushort)Grass_FieldIndex.MaxSlope;
                case "FLUFF1":
                    return (ushort)Grass_FieldIndex.Fluff1;
                case "UNITFROMWATERAMOUNT":
                    return (ushort)Grass_FieldIndex.UnitFromWaterAmount;
                case "FLUFF2":
                    return (ushort)Grass_FieldIndex.Fluff2;
                case "UNITFROMWATERMODE":
                    return (ushort)Grass_FieldIndex.UnitFromWaterMode;
                case "POSITIONRANGE":
                    return (ushort)Grass_FieldIndex.PositionRange;
                case "HEIGHTRANGE":
                    return (ushort)Grass_FieldIndex.HeightRange;
                case "COLORRANGE":
                    return (ushort)Grass_FieldIndex.ColorRange;
                case "WAVEPERIOD":
                    return (ushort)Grass_FieldIndex.WavePeriod;
                case "FLAGS":
                    return (ushort)Grass_FieldIndex.Flags;
                case "DATADATATYPESTATE":
                    return (ushort)Grass_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.Fluff1:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.Fluff2:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                case Grass_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    return true;
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.Fluff1:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.Fluff2:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                case Grass_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.Fluff1:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.Fluff2:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                case Grass_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    return "Model";
                case Grass_FieldIndex.Density:
                    return "Density";
                case Grass_FieldIndex.MinSlope:
                    return "MinSlope";
                case Grass_FieldIndex.MaxSlope:
                    return "MaxSlope";
                case Grass_FieldIndex.Fluff1:
                    return "Fluff1";
                case Grass_FieldIndex.UnitFromWaterAmount:
                    return "UnitFromWaterAmount";
                case Grass_FieldIndex.Fluff2:
                    return "Fluff2";
                case Grass_FieldIndex.UnitFromWaterMode:
                    return "UnitFromWaterMode";
                case Grass_FieldIndex.PositionRange:
                    return "PositionRange";
                case Grass_FieldIndex.HeightRange:
                    return "HeightRange";
                case Grass_FieldIndex.ColorRange:
                    return "ColorRange";
                case Grass_FieldIndex.WavePeriod:
                    return "WavePeriod";
                case Grass_FieldIndex.Flags:
                    return "Flags";
                case Grass_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.Fluff1:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.Fluff2:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                case Grass_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                case Grass_FieldIndex.Density:
                case Grass_FieldIndex.MinSlope:
                case Grass_FieldIndex.MaxSlope:
                case Grass_FieldIndex.Fluff1:
                case Grass_FieldIndex.UnitFromWaterAmount:
                case Grass_FieldIndex.Fluff2:
                case Grass_FieldIndex.UnitFromWaterMode:
                case Grass_FieldIndex.PositionRange:
                case Grass_FieldIndex.HeightRange:
                case Grass_FieldIndex.ColorRange:
                case Grass_FieldIndex.WavePeriod:
                case Grass_FieldIndex.Flags:
                case Grass_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Grass_FieldIndex enu = (Grass_FieldIndex)index;
            switch (enu)
            {
                case Grass_FieldIndex.Model:
                    return typeof(Model);
                case Grass_FieldIndex.Density:
                    return typeof(Byte);
                case Grass_FieldIndex.MinSlope:
                    return typeof(Byte);
                case Grass_FieldIndex.MaxSlope:
                    return typeof(Byte);
                case Grass_FieldIndex.Fluff1:
                    return typeof(Byte);
                case Grass_FieldIndex.UnitFromWaterAmount:
                    return typeof(UInt16);
                case Grass_FieldIndex.Fluff2:
                    return typeof(UInt16);
                case Grass_FieldIndex.UnitFromWaterMode:
                    return typeof(Grass.UnitFromWaterType);
                case Grass_FieldIndex.PositionRange:
                    return typeof(Single);
                case Grass_FieldIndex.HeightRange:
                    return typeof(Single);
                case Grass_FieldIndex.ColorRange:
                    return typeof(Single);
                case Grass_FieldIndex.WavePeriod:
                    return typeof(Single);
                case Grass_FieldIndex.Flags:
                    return typeof(Grass.GrassFlag);
                case Grass_FieldIndex.DATADataTypeState:
                    return typeof(Grass.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(GrassXmlWriteTranslation);
        public static readonly RecordType GRAS_HEADER = new RecordType("GRAS");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GRAS_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(GrassBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class GrassSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly GrassSetterCommon Instance = new GrassSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGrassInternal item)
        {
            ClearPartial();
            item.Model = null;
            item.Density = default;
            item.MinSlope = default;
            item.MaxSlope = default;
            item.Fluff1 = default;
            item.UnitFromWaterAmount = default;
            item.Fluff2 = default;
            item.UnitFromWaterMode = default;
            item.PositionRange = default;
            item.HeightRange = default;
            item.ColorRange = default;
            item.WavePeriod = default;
            item.Flags = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IGrassInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IGrassInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IGrassInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Grass.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IGrassInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    GrassXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Grass_Registration.GRAS_HEADER;
        protected static void FillBinaryStructs(
            IGrassInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IGrassInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Grass_FieldIndex.Model);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = Grass.DATADataType.Has;
                    }
                    item.Density = dataFrame.ReadUInt8();
                    item.MinSlope = dataFrame.ReadUInt8();
                    item.MaxSlope = dataFrame.ReadUInt8();
                    item.Fluff1 = dataFrame.ReadUInt8();
                    item.UnitFromWaterAmount = dataFrame.ReadUInt16();
                    item.Fluff2 = dataFrame.ReadUInt16();
                    item.UnitFromWaterMode = EnumBinaryTranslation<Grass.UnitFromWaterType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.PositionRange = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HeightRange = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ColorRange = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.WavePeriod = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Flags = EnumBinaryTranslation<Grass.GrassFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    return TryGet<int?>.Succeed((int)Grass_FieldIndex.Flags);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IGrassInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IGrassInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class GrassCommon : OblivionMajorRecordCommon
    {
        public new static readonly GrassCommon Instance = new GrassCommon();

        public Grass.Mask<bool> GetEqualsMask(
            IGrassGetter item,
            IGrassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Grass.Mask<bool>(false);
            ((GrassCommon)((IGrassGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGrassGetter item,
            IGrassGetter rhs,
            Grass.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Density = item.Density == rhs.Density;
            ret.MinSlope = item.MinSlope == rhs.MinSlope;
            ret.MaxSlope = item.MaxSlope == rhs.MaxSlope;
            ret.Fluff1 = item.Fluff1 == rhs.Fluff1;
            ret.UnitFromWaterAmount = item.UnitFromWaterAmount == rhs.UnitFromWaterAmount;
            ret.Fluff2 = item.Fluff2 == rhs.Fluff2;
            ret.UnitFromWaterMode = item.UnitFromWaterMode == rhs.UnitFromWaterMode;
            ret.PositionRange = item.PositionRange.EqualsWithin(rhs.PositionRange);
            ret.HeightRange = item.HeightRange.EqualsWithin(rhs.HeightRange);
            ret.ColorRange = item.ColorRange.EqualsWithin(rhs.ColorRange);
            ret.WavePeriod = item.WavePeriod.EqualsWithin(rhs.WavePeriod);
            ret.Flags = item.Flags == rhs.Flags;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IGrassGetter item,
            string? name = null,
            Grass.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IGrassGetter item,
            FileGeneration fg,
            string? name = null,
            Grass.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Grass =>");
            }
            else
            {
                fg.AppendLine($"{name} (Grass) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IGrassGetter item,
            FileGeneration fg,
            Grass.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.Density ?? true)
            {
                fg.AppendItem(item.Density, "Density");
            }
            if (printMask?.MinSlope ?? true)
            {
                fg.AppendItem(item.MinSlope, "MinSlope");
            }
            if (printMask?.MaxSlope ?? true)
            {
                fg.AppendItem(item.MaxSlope, "MaxSlope");
            }
            if (printMask?.Fluff1 ?? true)
            {
                fg.AppendItem(item.Fluff1, "Fluff1");
            }
            if (printMask?.UnitFromWaterAmount ?? true)
            {
                fg.AppendItem(item.UnitFromWaterAmount, "UnitFromWaterAmount");
            }
            if (printMask?.Fluff2 ?? true)
            {
                fg.AppendItem(item.Fluff2, "Fluff2");
            }
            if (printMask?.UnitFromWaterMode ?? true)
            {
                fg.AppendItem(item.UnitFromWaterMode, "UnitFromWaterMode");
            }
            if (printMask?.PositionRange ?? true)
            {
                fg.AppendItem(item.PositionRange, "PositionRange");
            }
            if (printMask?.HeightRange ?? true)
            {
                fg.AppendItem(item.HeightRange, "HeightRange");
            }
            if (printMask?.ColorRange ?? true)
            {
                fg.AppendItem(item.ColorRange, "ColorRange");
            }
            if (printMask?.WavePeriod ?? true)
            {
                fg.AppendItem(item.WavePeriod, "WavePeriod");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IGrassGetter item,
            Grass.Mask<bool?> checkMask)
        {
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IGrassGetter item,
            Grass.Mask<bool> mask)
        {
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.Density = true;
            mask.MinSlope = true;
            mask.MaxSlope = true;
            mask.Fluff1 = true;
            mask.UnitFromWaterAmount = true;
            mask.Fluff2 = true;
            mask.UnitFromWaterMode = true;
            mask.PositionRange = true;
            mask.HeightRange = true;
            mask.ColorRange = true;
            mask.WavePeriod = true;
            mask.Flags = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Grass_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Grass_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Grass_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Grass_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Grass_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Grass_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Grass_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Grass_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Grass_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGrassGetter? lhs,
            IGrassGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (lhs.Density != rhs.Density) return false;
            if (lhs.MinSlope != rhs.MinSlope) return false;
            if (lhs.MaxSlope != rhs.MaxSlope) return false;
            if (lhs.Fluff1 != rhs.Fluff1) return false;
            if (lhs.UnitFromWaterAmount != rhs.UnitFromWaterAmount) return false;
            if (lhs.Fluff2 != rhs.Fluff2) return false;
            if (lhs.UnitFromWaterMode != rhs.UnitFromWaterMode) return false;
            if (!lhs.PositionRange.EqualsWithin(rhs.PositionRange)) return false;
            if (!lhs.HeightRange.EqualsWithin(rhs.HeightRange)) return false;
            if (!lhs.ColorRange.EqualsWithin(rhs.ColorRange)) return false;
            if (!lhs.WavePeriod.EqualsWithin(rhs.WavePeriod)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IGrassGetter?)lhs,
                rhs: rhs as IGrassGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IGrassGetter?)lhs,
                rhs: rhs as IGrassGetter);
        }
        
        public virtual int GetHashCode(IGrassGetter item)
        {
            int ret = 0;
            if (item.Model.TryGet(out var Modelitem))
            {
                ret = HashHelper.GetHashCode(Modelitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Density).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MinSlope).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MaxSlope).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Fluff1).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.UnitFromWaterAmount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Fluff2).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.UnitFromWaterMode).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PositionRange).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HeightRange).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ColorRange).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.WavePeriod).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IGrassGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IGrassGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Grass.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IGrassGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(Grass obj, Grass rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Grass(getNextFormKey());
            ret.DeepCopyIn((Grass)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Grass)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class GrassSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly GrassSetterTranslationCommon Instance = new GrassSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IGrassInternal item,
            IGrassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IGrass item,
            IGrassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Grass_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Grass_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Density) ?? true))
            {
                item.Density = rhs.Density;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.MinSlope) ?? true))
            {
                item.MinSlope = rhs.MinSlope;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.MaxSlope) ?? true))
            {
                item.MaxSlope = rhs.MaxSlope;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Fluff1) ?? true))
            {
                item.Fluff1 = rhs.Fluff1;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.UnitFromWaterAmount) ?? true))
            {
                item.UnitFromWaterAmount = rhs.UnitFromWaterAmount;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Fluff2) ?? true))
            {
                item.Fluff2 = rhs.Fluff2;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.UnitFromWaterMode) ?? true))
            {
                item.UnitFromWaterMode = rhs.UnitFromWaterMode;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.PositionRange) ?? true))
            {
                item.PositionRange = rhs.PositionRange;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.HeightRange) ?? true))
            {
                item.HeightRange = rhs.HeightRange;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.ColorRange) ?? true))
            {
                item.ColorRange = rhs.ColorRange;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.WavePeriod) ?? true))
            {
                item.WavePeriod = rhs.WavePeriod;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Grass_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IGrassInternal)item,
                rhs: (IGrassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IGrass)item,
                rhs: (IGrassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IGrassInternal)item,
                rhs: (IGrassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IGrass)item,
                rhs: (IGrassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Grass DeepCopy(
            IGrassGetter item,
            Grass.TranslationMask? copyMask = null)
        {
            Grass ret = (Grass)((GrassCommon)((IGrassGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Grass DeepCopy(
            IGrassGetter item,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? copyMask = null)
        {
            Grass ret = (Grass)((GrassCommon)((IGrassGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Grass DeepCopy(
            IGrassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Grass ret = (Grass)((GrassCommon)((IGrassGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Grass
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Grass_Registration.Instance;
        public new static Grass_Registration Registration => Grass_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GrassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return GrassSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GrassSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class GrassXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static GrassXmlWriteTranslation Instance = new GrassXmlWriteTranslation();

        public static void WriteToNodeXml(
            IGrassGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Grass_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Grass_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Grass_FieldIndex.Model));
                }
            }
            if (item.DATADataTypeState.HasFlag(Grass.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.Density) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Density),
                        item: item.Density,
                        fieldIndex: (int)Grass_FieldIndex.Density,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.MinSlope) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MinSlope),
                        item: item.MinSlope,
                        fieldIndex: (int)Grass_FieldIndex.MinSlope,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.MaxSlope) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MaxSlope),
                        item: item.MaxSlope,
                        fieldIndex: (int)Grass_FieldIndex.MaxSlope,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.Fluff1) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fluff1),
                        item: item.Fluff1,
                        fieldIndex: (int)Grass_FieldIndex.Fluff1,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.UnitFromWaterAmount) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.UnitFromWaterAmount),
                        item: item.UnitFromWaterAmount,
                        fieldIndex: (int)Grass_FieldIndex.UnitFromWaterAmount,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.Fluff2) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fluff2),
                        item: item.Fluff2,
                        fieldIndex: (int)Grass_FieldIndex.Fluff2,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.UnitFromWaterMode) ?? true))
                {
                    EnumXmlTranslation<Grass.UnitFromWaterType>.Instance.Write(
                        node: node,
                        name: nameof(item.UnitFromWaterMode),
                        item: item.UnitFromWaterMode,
                        fieldIndex: (int)Grass_FieldIndex.UnitFromWaterMode,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.PositionRange) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.PositionRange),
                        item: item.PositionRange,
                        fieldIndex: (int)Grass_FieldIndex.PositionRange,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.HeightRange) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.HeightRange),
                        item: item.HeightRange,
                        fieldIndex: (int)Grass_FieldIndex.HeightRange,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.ColorRange) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ColorRange),
                        item: item.ColorRange,
                        fieldIndex: (int)Grass_FieldIndex.ColorRange,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.WavePeriod) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.WavePeriod),
                        item: item.WavePeriod,
                        fieldIndex: (int)Grass_FieldIndex.WavePeriod,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<Grass.GrassFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Grass_FieldIndex.Flags,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Grass_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Grass.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Grass_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IGrassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Grass");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Grass");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IGrassGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IGrassGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IGrassGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class GrassXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static GrassXmlCreateTranslation Instance = new GrassXmlCreateTranslation();

        public static void FillPublicXml(
            IGrassInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GrassXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IGrassInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Model":
                    errorMask?.PushIndex((int)Grass_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Grass_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Density":
                    errorMask?.PushIndex((int)Grass_FieldIndex.Density);
                    try
                    {
                        item.Density = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Grass.DATADataType.Has;
                    break;
                case "MinSlope":
                    errorMask?.PushIndex((int)Grass_FieldIndex.MinSlope);
                    try
                    {
                        item.MinSlope = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxSlope":
                    errorMask?.PushIndex((int)Grass_FieldIndex.MaxSlope);
                    try
                    {
                        item.MaxSlope = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff1":
                    errorMask?.PushIndex((int)Grass_FieldIndex.Fluff1);
                    try
                    {
                        item.Fluff1 = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnitFromWaterAmount":
                    errorMask?.PushIndex((int)Grass_FieldIndex.UnitFromWaterAmount);
                    try
                    {
                        item.UnitFromWaterAmount = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fluff2":
                    errorMask?.PushIndex((int)Grass_FieldIndex.Fluff2);
                    try
                    {
                        item.Fluff2 = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnitFromWaterMode":
                    errorMask?.PushIndex((int)Grass_FieldIndex.UnitFromWaterMode);
                    try
                    {
                        item.UnitFromWaterMode = EnumXmlTranslation<Grass.UnitFromWaterType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PositionRange":
                    errorMask?.PushIndex((int)Grass_FieldIndex.PositionRange);
                    try
                    {
                        item.PositionRange = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HeightRange":
                    errorMask?.PushIndex((int)Grass_FieldIndex.HeightRange);
                    try
                    {
                        item.HeightRange = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorRange":
                    errorMask?.PushIndex((int)Grass_FieldIndex.ColorRange);
                    try
                    {
                        item.ColorRange = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WavePeriod":
                    errorMask?.PushIndex((int)Grass_FieldIndex.WavePeriod);
                    try
                    {
                        item.WavePeriod = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Grass_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Grass.GrassFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)Grass_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<Grass.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class GrassXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IGrassGetter item,
            XElement node,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((GrassXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Grass.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IGrassGetter item,
            string path,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IGrassGetter item,
            Stream stream,
            out Grass.ErrorMask errorMask,
            Grass.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class GrassBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static GrassBinaryWriteTranslation Instance = new GrassBinaryWriteTranslation();

        public static void Write_Embedded(
            IGrassGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IGrassGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.DATADataTypeState.HasFlag(Grass.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Grass_Registration.DATA_HEADER)))
                {
                    writer.Write(item.Density);
                    writer.Write(item.MinSlope);
                    writer.Write(item.MaxSlope);
                    writer.Write(item.Fluff1);
                    writer.Write(item.UnitFromWaterAmount);
                    writer.Write(item.Fluff2);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Grass.UnitFromWaterType>.Instance.Write(
                        writer,
                        item.UnitFromWaterMode,
                        length: 4);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.PositionRange);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.HeightRange);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.ColorRange);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.WavePeriod);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Grass.GrassFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IGrassGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Grass_Registration.GRAS_HEADER,
                type: ObjectType.Record))
            {
                Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IGrassGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IGrassGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IGrassGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class GrassBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static GrassBinaryCreateTranslation Instance = new GrassBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class GrassBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class GrassBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IGrassGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Grass_Registration.Instance;
        public new static Grass_Registration Registration => Grass_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GrassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GrassSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGrassGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => GrassXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((GrassXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GrassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((GrassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Model
        public IModelGetter? Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        private int? _DATALocation;
        public Grass.DATADataType DATADataTypeState { get; private set; }
        #region Density
        private int _DensityLocation => _DATALocation!.Value + 0x0;
        private bool _Density_IsSet => _DATALocation.HasValue;
        public Byte Density => _Density_IsSet ? _data.Span[_DensityLocation] : default;
        #endregion
        #region MinSlope
        private int _MinSlopeLocation => _DATALocation!.Value + 0x1;
        private bool _MinSlope_IsSet => _DATALocation.HasValue;
        public Byte MinSlope => _MinSlope_IsSet ? _data.Span[_MinSlopeLocation] : default;
        #endregion
        #region MaxSlope
        private int _MaxSlopeLocation => _DATALocation!.Value + 0x2;
        private bool _MaxSlope_IsSet => _DATALocation.HasValue;
        public Byte MaxSlope => _MaxSlope_IsSet ? _data.Span[_MaxSlopeLocation] : default;
        #endregion
        #region Fluff1
        private int _Fluff1Location => _DATALocation!.Value + 0x3;
        private bool _Fluff1_IsSet => _DATALocation.HasValue;
        public Byte Fluff1 => _Fluff1_IsSet ? _data.Span[_Fluff1Location] : default;
        #endregion
        #region UnitFromWaterAmount
        private int _UnitFromWaterAmountLocation => _DATALocation!.Value + 0x4;
        private bool _UnitFromWaterAmount_IsSet => _DATALocation.HasValue;
        public UInt16 UnitFromWaterAmount => _UnitFromWaterAmount_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_UnitFromWaterAmountLocation, 2)) : default;
        #endregion
        #region Fluff2
        private int _Fluff2Location => _DATALocation!.Value + 0x6;
        private bool _Fluff2_IsSet => _DATALocation.HasValue;
        public UInt16 Fluff2 => _Fluff2_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_Fluff2Location, 2)) : default;
        #endregion
        #region UnitFromWaterMode
        private int _UnitFromWaterModeLocation => _DATALocation!.Value + 0x8;
        private bool _UnitFromWaterMode_IsSet => _DATALocation.HasValue;
        public Grass.UnitFromWaterType UnitFromWaterMode => _UnitFromWaterMode_IsSet ? (Grass.UnitFromWaterType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_UnitFromWaterModeLocation, 4)) : default;
        #endregion
        #region PositionRange
        private int _PositionRangeLocation => _DATALocation!.Value + 0xC;
        private bool _PositionRange_IsSet => _DATALocation.HasValue;
        public Single PositionRange => _PositionRange_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_PositionRangeLocation, 4)) : default;
        #endregion
        #region HeightRange
        private int _HeightRangeLocation => _DATALocation!.Value + 0x10;
        private bool _HeightRange_IsSet => _DATALocation.HasValue;
        public Single HeightRange => _HeightRange_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_HeightRangeLocation, 4)) : default;
        #endregion
        #region ColorRange
        private int _ColorRangeLocation => _DATALocation!.Value + 0x14;
        private bool _ColorRange_IsSet => _DATALocation.HasValue;
        public Single ColorRange => _ColorRange_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ColorRangeLocation, 4)) : default;
        #endregion
        #region WavePeriod
        private int _WavePeriodLocation => _DATALocation!.Value + 0x18;
        private bool _WavePeriod_IsSet => _DATALocation.HasValue;
        public Single WavePeriod => _WavePeriod_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_WavePeriodLocation, 4)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0x1C;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Grass.GrassFlag Flags => _Flags_IsSet ? (Grass.GrassFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 4)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected GrassBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static GrassBinaryOverlay GrassFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new GrassBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Grass_FieldIndex.Model);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = Grass.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)Grass_FieldIndex.Flags);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

