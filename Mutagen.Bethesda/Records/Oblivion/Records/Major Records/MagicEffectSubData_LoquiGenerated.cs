/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MagicEffectSubData :
        IMagicEffectSubData,
        ILoquiObjectSetter<MagicEffectSubData>,
        IEquatable<MagicEffectSubData>,
        IEqualsMask
    {
        #region Ctor
        public MagicEffectSubData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region EnchantEffect
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<EffectShader> _EnchantEffect = new FormLink<EffectShader>();
        public IFormLink<EffectShader> EnchantEffect => this._EnchantEffect;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IEffectShaderGetter> IMagicEffectSubDataGetter.EnchantEffect => this.EnchantEffect;
        #endregion
        #region CastingSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<Sound> _CastingSound = new FormLink<Sound>();
        public IFormLink<Sound> CastingSound => this._CastingSound;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundGetter> IMagicEffectSubDataGetter.CastingSound => this.CastingSound;
        #endregion
        #region BoltSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<Sound> _BoltSound = new FormLink<Sound>();
        public IFormLink<Sound> BoltSound => this._BoltSound;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundGetter> IMagicEffectSubDataGetter.BoltSound => this.BoltSound;
        #endregion
        #region HitSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<Sound> _HitSound = new FormLink<Sound>();
        public IFormLink<Sound> HitSound => this._HitSound;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundGetter> IMagicEffectSubDataGetter.HitSound => this.HitSound;
        #endregion
        #region AreaSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<Sound> _AreaSound = new FormLink<Sound>();
        public IFormLink<Sound> AreaSound => this._AreaSound;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundGetter> IMagicEffectSubDataGetter.AreaSound => this.AreaSound;
        #endregion
        #region ConstantEffectEnchantmentFactor
        public Single ConstantEffectEnchantmentFactor { get; set; } = default;
        #endregion
        #region ConstantEffectBarterFactor
        public Single ConstantEffectBarterFactor { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MagicEffectSubDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IMagicEffectSubDataGetter rhs)) return false;
            return ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(MagicEffectSubData obj)
        {
            return ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => MagicEffectSubDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((MagicEffectSubDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static MagicEffectSubData CreateFromXml(
            XElement node,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MagicEffectSubData CreateFromXml(
            XElement node,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffectSubData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MagicEffectSubData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new MagicEffectSubData();
            ((MagicEffectSubDataSetterCommon)((IMagicEffectSubDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static MagicEffectSubData CreateFromXml(
            string path,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static MagicEffectSubData CreateFromXml(
            string path,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MagicEffectSubData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MagicEffectSubData CreateFromXml(
            Stream stream,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static MagicEffectSubData CreateFromXml(
            Stream stream,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MagicEffectSubData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.EnchantEffect = initialValue;
                this.CastingSound = initialValue;
                this.BoltSound = initialValue;
                this.HitSound = initialValue;
                this.AreaSound = initialValue;
                this.ConstantEffectEnchantmentFactor = initialValue;
                this.ConstantEffectBarterFactor = initialValue;
            }

            public Mask(
                TItem EnchantEffect,
                TItem CastingSound,
                TItem BoltSound,
                TItem HitSound,
                TItem AreaSound,
                TItem ConstantEffectEnchantmentFactor,
                TItem ConstantEffectBarterFactor)
            {
                this.EnchantEffect = EnchantEffect;
                this.CastingSound = CastingSound;
                this.BoltSound = BoltSound;
                this.HitSound = HitSound;
                this.AreaSound = AreaSound;
                this.ConstantEffectEnchantmentFactor = ConstantEffectEnchantmentFactor;
                this.ConstantEffectBarterFactor = ConstantEffectBarterFactor;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem EnchantEffect;
            public TItem CastingSound;
            public TItem BoltSound;
            public TItem HitSound;
            public TItem AreaSound;
            public TItem ConstantEffectEnchantmentFactor;
            public TItem ConstantEffectBarterFactor;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.EnchantEffect, rhs.EnchantEffect)) return false;
                if (!object.Equals(this.CastingSound, rhs.CastingSound)) return false;
                if (!object.Equals(this.BoltSound, rhs.BoltSound)) return false;
                if (!object.Equals(this.HitSound, rhs.HitSound)) return false;
                if (!object.Equals(this.AreaSound, rhs.AreaSound)) return false;
                if (!object.Equals(this.ConstantEffectEnchantmentFactor, rhs.ConstantEffectEnchantmentFactor)) return false;
                if (!object.Equals(this.ConstantEffectBarterFactor, rhs.ConstantEffectBarterFactor)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.EnchantEffect?.GetHashCode());
                ret = ret.CombineHashCode(this.CastingSound?.GetHashCode());
                ret = ret.CombineHashCode(this.BoltSound?.GetHashCode());
                ret = ret.CombineHashCode(this.HitSound?.GetHashCode());
                ret = ret.CombineHashCode(this.AreaSound?.GetHashCode());
                ret = ret.CombineHashCode(this.ConstantEffectEnchantmentFactor?.GetHashCode());
                ret = ret.CombineHashCode(this.ConstantEffectBarterFactor?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.EnchantEffect)) return false;
                if (!eval(this.CastingSound)) return false;
                if (!eval(this.BoltSound)) return false;
                if (!eval(this.HitSound)) return false;
                if (!eval(this.AreaSound)) return false;
                if (!eval(this.ConstantEffectEnchantmentFactor)) return false;
                if (!eval(this.ConstantEffectBarterFactor)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.EnchantEffect)) return true;
                if (eval(this.CastingSound)) return true;
                if (eval(this.BoltSound)) return true;
                if (eval(this.HitSound)) return true;
                if (eval(this.AreaSound)) return true;
                if (eval(this.ConstantEffectEnchantmentFactor)) return true;
                if (eval(this.ConstantEffectBarterFactor)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MagicEffectSubData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.EnchantEffect = eval(this.EnchantEffect);
                obj.CastingSound = eval(this.CastingSound);
                obj.BoltSound = eval(this.BoltSound);
                obj.HitSound = eval(this.HitSound);
                obj.AreaSound = eval(this.AreaSound);
                obj.ConstantEffectEnchantmentFactor = eval(this.ConstantEffectEnchantmentFactor);
                obj.ConstantEffectBarterFactor = eval(this.ConstantEffectBarterFactor);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(MagicEffectSubData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, MagicEffectSubData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(MagicEffectSubData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.EnchantEffect ?? true)
                    {
                        fg.AppendItem(EnchantEffect, "EnchantEffect");
                    }
                    if (printMask?.CastingSound ?? true)
                    {
                        fg.AppendItem(CastingSound, "CastingSound");
                    }
                    if (printMask?.BoltSound ?? true)
                    {
                        fg.AppendItem(BoltSound, "BoltSound");
                    }
                    if (printMask?.HitSound ?? true)
                    {
                        fg.AppendItem(HitSound, "HitSound");
                    }
                    if (printMask?.AreaSound ?? true)
                    {
                        fg.AppendItem(AreaSound, "AreaSound");
                    }
                    if (printMask?.ConstantEffectEnchantmentFactor ?? true)
                    {
                        fg.AppendItem(ConstantEffectEnchantmentFactor, "ConstantEffectEnchantmentFactor");
                    }
                    if (printMask?.ConstantEffectBarterFactor ?? true)
                    {
                        fg.AppendItem(ConstantEffectBarterFactor, "ConstantEffectBarterFactor");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? EnchantEffect;
            public Exception? CastingSound;
            public Exception? BoltSound;
            public Exception? HitSound;
            public Exception? AreaSound;
            public Exception? ConstantEffectEnchantmentFactor;
            public Exception? ConstantEffectBarterFactor;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectSubData_FieldIndex.EnchantEffect:
                        return EnchantEffect;
                    case MagicEffectSubData_FieldIndex.CastingSound:
                        return CastingSound;
                    case MagicEffectSubData_FieldIndex.BoltSound:
                        return BoltSound;
                    case MagicEffectSubData_FieldIndex.HitSound:
                        return HitSound;
                    case MagicEffectSubData_FieldIndex.AreaSound:
                        return AreaSound;
                    case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                        return ConstantEffectEnchantmentFactor;
                    case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                        return ConstantEffectBarterFactor;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectSubData_FieldIndex.EnchantEffect:
                        this.EnchantEffect = ex;
                        break;
                    case MagicEffectSubData_FieldIndex.CastingSound:
                        this.CastingSound = ex;
                        break;
                    case MagicEffectSubData_FieldIndex.BoltSound:
                        this.BoltSound = ex;
                        break;
                    case MagicEffectSubData_FieldIndex.HitSound:
                        this.HitSound = ex;
                        break;
                    case MagicEffectSubData_FieldIndex.AreaSound:
                        this.AreaSound = ex;
                        break;
                    case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                        this.ConstantEffectEnchantmentFactor = ex;
                        break;
                    case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                        this.ConstantEffectBarterFactor = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectSubData_FieldIndex.EnchantEffect:
                        this.EnchantEffect = (Exception?)obj;
                        break;
                    case MagicEffectSubData_FieldIndex.CastingSound:
                        this.CastingSound = (Exception?)obj;
                        break;
                    case MagicEffectSubData_FieldIndex.BoltSound:
                        this.BoltSound = (Exception?)obj;
                        break;
                    case MagicEffectSubData_FieldIndex.HitSound:
                        this.HitSound = (Exception?)obj;
                        break;
                    case MagicEffectSubData_FieldIndex.AreaSound:
                        this.AreaSound = (Exception?)obj;
                        break;
                    case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                        this.ConstantEffectEnchantmentFactor = (Exception?)obj;
                        break;
                    case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                        this.ConstantEffectBarterFactor = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (EnchantEffect != null) return true;
                if (CastingSound != null) return true;
                if (BoltSound != null) return true;
                if (HitSound != null) return true;
                if (AreaSound != null) return true;
                if (ConstantEffectEnchantmentFactor != null) return true;
                if (ConstantEffectBarterFactor != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(EnchantEffect, "EnchantEffect");
                fg.AppendItem(CastingSound, "CastingSound");
                fg.AppendItem(BoltSound, "BoltSound");
                fg.AppendItem(HitSound, "HitSound");
                fg.AppendItem(AreaSound, "AreaSound");
                fg.AppendItem(ConstantEffectEnchantmentFactor, "ConstantEffectEnchantmentFactor");
                fg.AppendItem(ConstantEffectBarterFactor, "ConstantEffectBarterFactor");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.EnchantEffect = this.EnchantEffect.Combine(rhs.EnchantEffect);
                ret.CastingSound = this.CastingSound.Combine(rhs.CastingSound);
                ret.BoltSound = this.BoltSound.Combine(rhs.BoltSound);
                ret.HitSound = this.HitSound.Combine(rhs.HitSound);
                ret.AreaSound = this.AreaSound.Combine(rhs.AreaSound);
                ret.ConstantEffectEnchantmentFactor = this.ConstantEffectEnchantmentFactor.Combine(rhs.ConstantEffectEnchantmentFactor);
                ret.ConstantEffectBarterFactor = this.ConstantEffectBarterFactor.Combine(rhs.ConstantEffectBarterFactor);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool EnchantEffect;
            public bool CastingSound;
            public bool BoltSound;
            public bool HitSound;
            public bool AreaSound;
            public bool ConstantEffectEnchantmentFactor;
            public bool ConstantEffectBarterFactor;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.EnchantEffect = defaultOn;
                this.CastingSound = defaultOn;
                this.BoltSound = defaultOn;
                this.HitSound = defaultOn;
                this.AreaSound = defaultOn;
                this.ConstantEffectEnchantmentFactor = defaultOn;
                this.ConstantEffectBarterFactor = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((EnchantEffect, null));
                ret.Add((CastingSound, null));
                ret.Add((BoltSound, null));
                ret.Add((HitSound, null));
                ret.Add((AreaSound, null));
                ret.Add((ConstantEffectEnchantmentFactor, null));
                ret.Add((ConstantEffectBarterFactor, null));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => MagicEffectSubDataCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MagicEffectSubDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((MagicEffectSubDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static MagicEffectSubData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static MagicEffectSubData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new MagicEffectSubData();
            ((MagicEffectSubDataSetterCommon)((IMagicEffectSubDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMagicEffectSubDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((MagicEffectSubDataSetterCommon)((IMagicEffectSubDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static MagicEffectSubData GetNew()
        {
            return new MagicEffectSubData();
        }

    }
    #endregion

    #region Interface
    public partial interface IMagicEffectSubData :
        IMagicEffectSubDataGetter,
        ILoquiObjectSetter<IMagicEffectSubData>
    {
        new IFormLink<EffectShader> EnchantEffect { get; }
        new IFormLink<Sound> CastingSound { get; }
        new IFormLink<Sound> BoltSound { get; }
        new IFormLink<Sound> HitSound { get; }
        new IFormLink<Sound> AreaSound { get; }
        new Single ConstantEffectEnchantmentFactor { get; set; }
        new Single ConstantEffectBarterFactor { get; set; }
    }

    public partial interface IMagicEffectSubDataGetter :
        ILoquiObject,
        ILoquiObject<IMagicEffectSubDataGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        IFormLinkGetter<IEffectShaderGetter> EnchantEffect { get; }
        IFormLinkGetter<ISoundGetter> CastingSound { get; }
        IFormLinkGetter<ISoundGetter> BoltSound { get; }
        IFormLinkGetter<ISoundGetter> HitSound { get; }
        IFormLinkGetter<ISoundGetter> AreaSound { get; }
        Single ConstantEffectEnchantmentFactor { get; }
        Single ConstantEffectBarterFactor { get; }

    }

    #endregion

    #region Common MixIn
    public static class MagicEffectSubDataMixIn
    {
        public static void Clear(this IMagicEffectSubData item)
        {
            ((MagicEffectSubDataSetterCommon)((IMagicEffectSubDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MagicEffectSubData.Mask<bool> GetEqualsMask(
            this IMagicEffectSubDataGetter item,
            IMagicEffectSubDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMagicEffectSubDataGetter item,
            string? name = null,
            MagicEffectSubData.Mask<bool>? printMask = null)
        {
            return ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMagicEffectSubDataGetter item,
            FileGeneration fg,
            string? name = null,
            MagicEffectSubData.Mask<bool>? printMask = null)
        {
            ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IMagicEffectSubDataGetter item,
            MagicEffectSubData.Mask<bool?> checkMask)
        {
            return ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static MagicEffectSubData.Mask<bool> GetHasBeenSetMask(this IMagicEffectSubDataGetter item)
        {
            var ret = new MagicEffectSubData.Mask<bool>(false);
            ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IMagicEffectSubDataGetter item,
            IMagicEffectSubDataGetter rhs)
        {
            return ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IMagicEffectSubData lhs,
            IMagicEffectSubDataGetter rhs,
            MagicEffectSubData.TranslationMask? copyMask = null)
        {
            ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IMagicEffectSubData lhs,
            IMagicEffectSubDataGetter rhs,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = MagicEffectSubData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMagicEffectSubData lhs,
            IMagicEffectSubDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static MagicEffectSubData DeepCopy(
            this IMagicEffectSubDataGetter item,
            MagicEffectSubData.TranslationMask? copyMask = null)
        {
            return ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MagicEffectSubData DeepCopy(
            this IMagicEffectSubDataGetter item,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? copyMask = null)
        {
            return ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MagicEffectSubData DeepCopy(
            this IMagicEffectSubDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MagicEffectSubDataSetterTranslationCommon)((IMagicEffectSubDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMagicEffectSubData item,
            XElement node,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMagicEffectSubData item,
            XElement node,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffectSubData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IMagicEffectSubData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((MagicEffectSubDataSetterCommon)((IMagicEffectSubDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectSubData item,
            string path,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectSubData item,
            string path,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectSubData item,
            string path,
            ErrorMaskBuilder? errorMask,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IMagicEffectSubData item,
            Stream stream,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectSubData item,
            Stream stream,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectSubData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IMagicEffectSubData item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IMagicEffectSubData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((MagicEffectSubDataSetterCommon)((IMagicEffectSubDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum MagicEffectSubData_FieldIndex
    {
        EnchantEffect = 0,
        CastingSound = 1,
        BoltSound = 2,
        HitSound = 3,
        AreaSound = 4,
        ConstantEffectEnchantmentFactor = 5,
        ConstantEffectBarterFactor = 6,
    }
    #endregion

    #region Registration
    public partial class MagicEffectSubData_Registration : ILoquiRegistration
    {
        public static readonly MagicEffectSubData_Registration Instance = new MagicEffectSubData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 56,
            version: 0);

        public const string GUID = "ebfe4657-51cf-4f56-95c9-8e3eee98fa5a";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(MagicEffectSubData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MagicEffectSubData.ErrorMask);

        public static readonly Type ClassType = typeof(MagicEffectSubData);

        public static readonly Type GetterType = typeof(IMagicEffectSubDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMagicEffectSubData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.MagicEffectSubData";

        public const string Name = "MagicEffectSubData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ENCHANTEFFECT":
                    return (ushort)MagicEffectSubData_FieldIndex.EnchantEffect;
                case "CASTINGSOUND":
                    return (ushort)MagicEffectSubData_FieldIndex.CastingSound;
                case "BOLTSOUND":
                    return (ushort)MagicEffectSubData_FieldIndex.BoltSound;
                case "HITSOUND":
                    return (ushort)MagicEffectSubData_FieldIndex.HitSound;
                case "AREASOUND":
                    return (ushort)MagicEffectSubData_FieldIndex.AreaSound;
                case "CONSTANTEFFECTENCHANTMENTFACTOR":
                    return (ushort)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor;
                case "CONSTANTEFFECTBARTERFACTOR":
                    return (ushort)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    return "EnchantEffect";
                case MagicEffectSubData_FieldIndex.CastingSound:
                    return "CastingSound";
                case MagicEffectSubData_FieldIndex.BoltSound:
                    return "BoltSound";
                case MagicEffectSubData_FieldIndex.HitSound:
                    return "HitSound";
                case MagicEffectSubData_FieldIndex.AreaSound:
                    return "AreaSound";
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    return "ConstantEffectEnchantmentFactor";
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return "ConstantEffectBarterFactor";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                case MagicEffectSubData_FieldIndex.CastingSound:
                case MagicEffectSubData_FieldIndex.BoltSound:
                case MagicEffectSubData_FieldIndex.HitSound:
                case MagicEffectSubData_FieldIndex.AreaSound:
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MagicEffectSubData_FieldIndex enu = (MagicEffectSubData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectSubData_FieldIndex.EnchantEffect:
                    return typeof(IFormLink<EffectShader>);
                case MagicEffectSubData_FieldIndex.CastingSound:
                    return typeof(IFormLink<Sound>);
                case MagicEffectSubData_FieldIndex.BoltSound:
                    return typeof(IFormLink<Sound>);
                case MagicEffectSubData_FieldIndex.HitSound:
                    return typeof(IFormLink<Sound>);
                case MagicEffectSubData_FieldIndex.AreaSound:
                    return typeof(IFormLink<Sound>);
                case MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor:
                    return typeof(Single);
                case MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(MagicEffectSubDataXmlWriteTranslation);
        public const int NumStructFields = 7;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(MagicEffectSubDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class MagicEffectSubDataSetterCommon
    {
        public static readonly MagicEffectSubDataSetterCommon Instance = new MagicEffectSubDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMagicEffectSubData item)
        {
            ClearPartial();
            item.EnchantEffect.FormKey = FormKey.Null;
            item.CastingSound.FormKey = FormKey.Null;
            item.BoltSound.FormKey = FormKey.Null;
            item.HitSound.FormKey = FormKey.Null;
            item.AreaSound.FormKey = FormKey.Null;
            item.ConstantEffectEnchantmentFactor = default;
            item.ConstantEffectBarterFactor = default;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IMagicEffectSubData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MagicEffectSubDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IMagicEffectSubData item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            item.EnchantEffect.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.Null);
            item.CastingSound.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.Null);
            item.BoltSound.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.Null);
            item.HitSound.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.Null);
            item.AreaSound.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.Null);
            item.ConstantEffectEnchantmentFactor = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ConstantEffectBarterFactor = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }
        
        public void CopyInFromBinary(
            IMagicEffectSubData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class MagicEffectSubDataCommon
    {
        public static readonly MagicEffectSubDataCommon Instance = new MagicEffectSubDataCommon();

        public MagicEffectSubData.Mask<bool> GetEqualsMask(
            IMagicEffectSubDataGetter item,
            IMagicEffectSubDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MagicEffectSubData.Mask<bool>(false);
            ((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMagicEffectSubDataGetter item,
            IMagicEffectSubDataGetter rhs,
            MagicEffectSubData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.EnchantEffect = object.Equals(item.EnchantEffect, rhs.EnchantEffect);
            ret.CastingSound = object.Equals(item.CastingSound, rhs.CastingSound);
            ret.BoltSound = object.Equals(item.BoltSound, rhs.BoltSound);
            ret.HitSound = object.Equals(item.HitSound, rhs.HitSound);
            ret.AreaSound = object.Equals(item.AreaSound, rhs.AreaSound);
            ret.ConstantEffectEnchantmentFactor = item.ConstantEffectEnchantmentFactor.EqualsWithin(rhs.ConstantEffectEnchantmentFactor);
            ret.ConstantEffectBarterFactor = item.ConstantEffectBarterFactor.EqualsWithin(rhs.ConstantEffectBarterFactor);
        }
        
        public string ToString(
            IMagicEffectSubDataGetter item,
            string? name = null,
            MagicEffectSubData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMagicEffectSubDataGetter item,
            FileGeneration fg,
            string? name = null,
            MagicEffectSubData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MagicEffectSubData =>");
            }
            else
            {
                fg.AppendLine($"{name} (MagicEffectSubData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMagicEffectSubDataGetter item,
            FileGeneration fg,
            MagicEffectSubData.Mask<bool>? printMask = null)
        {
            if (printMask?.EnchantEffect ?? true)
            {
                fg.AppendItem(item.EnchantEffect, "EnchantEffect");
            }
            if (printMask?.CastingSound ?? true)
            {
                fg.AppendItem(item.CastingSound, "CastingSound");
            }
            if (printMask?.BoltSound ?? true)
            {
                fg.AppendItem(item.BoltSound, "BoltSound");
            }
            if (printMask?.HitSound ?? true)
            {
                fg.AppendItem(item.HitSound, "HitSound");
            }
            if (printMask?.AreaSound ?? true)
            {
                fg.AppendItem(item.AreaSound, "AreaSound");
            }
            if (printMask?.ConstantEffectEnchantmentFactor ?? true)
            {
                fg.AppendItem(item.ConstantEffectEnchantmentFactor, "ConstantEffectEnchantmentFactor");
            }
            if (printMask?.ConstantEffectBarterFactor ?? true)
            {
                fg.AppendItem(item.ConstantEffectBarterFactor, "ConstantEffectBarterFactor");
            }
        }
        
        public bool HasBeenSet(
            IMagicEffectSubDataGetter item,
            MagicEffectSubData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IMagicEffectSubDataGetter item,
            MagicEffectSubData.Mask<bool> mask)
        {
            mask.EnchantEffect = true;
            mask.CastingSound = true;
            mask.BoltSound = true;
            mask.HitSound = true;
            mask.AreaSound = true;
            mask.ConstantEffectEnchantmentFactor = true;
            mask.ConstantEffectBarterFactor = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMagicEffectSubDataGetter? lhs,
            IMagicEffectSubDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.EnchantEffect.Equals(rhs.EnchantEffect)) return false;
            if (!lhs.CastingSound.Equals(rhs.CastingSound)) return false;
            if (!lhs.BoltSound.Equals(rhs.BoltSound)) return false;
            if (!lhs.HitSound.Equals(rhs.HitSound)) return false;
            if (!lhs.AreaSound.Equals(rhs.AreaSound)) return false;
            if (!lhs.ConstantEffectEnchantmentFactor.EqualsWithin(rhs.ConstantEffectEnchantmentFactor)) return false;
            if (!lhs.ConstantEffectBarterFactor.EqualsWithin(rhs.ConstantEffectBarterFactor)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IMagicEffectSubDataGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.EnchantEffect).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CastingSound).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BoltSound).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HitSound).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AreaSound).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ConstantEffectEnchantmentFactor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ConstantEffectBarterFactor).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return MagicEffectSubData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IMagicEffectSubDataGetter obj)
        {
            yield return obj.EnchantEffect;
            yield return obj.CastingSound;
            yield return obj.BoltSound;
            yield return obj.HitSound;
            yield return obj.AreaSound;
            yield break;
        }
        
        #endregion
        
    }
    public partial class MagicEffectSubDataSetterTranslationCommon
    {
        public static readonly MagicEffectSubDataSetterTranslationCommon Instance = new MagicEffectSubDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IMagicEffectSubData item,
            IMagicEffectSubDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.EnchantEffect) ?? true))
            {
                item.EnchantEffect.FormKey = rhs.EnchantEffect.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.CastingSound) ?? true))
            {
                item.CastingSound.FormKey = rhs.CastingSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.BoltSound) ?? true))
            {
                item.BoltSound.FormKey = rhs.BoltSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.HitSound) ?? true))
            {
                item.HitSound.FormKey = rhs.HitSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.AreaSound) ?? true))
            {
                item.AreaSound.FormKey = rhs.AreaSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor) ?? true))
            {
                item.ConstantEffectEnchantmentFactor = rhs.ConstantEffectEnchantmentFactor;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor) ?? true))
            {
                item.ConstantEffectBarterFactor = rhs.ConstantEffectBarterFactor;
            }
        }
        
        #endregion
        
        public MagicEffectSubData DeepCopy(
            IMagicEffectSubDataGetter item,
            MagicEffectSubData.TranslationMask? copyMask = null)
        {
            MagicEffectSubData ret = (MagicEffectSubData)((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public MagicEffectSubData DeepCopy(
            IMagicEffectSubDataGetter item,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? copyMask = null)
        {
            MagicEffectSubData ret = (MagicEffectSubData)((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public MagicEffectSubData DeepCopy(
            IMagicEffectSubDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MagicEffectSubData ret = (MagicEffectSubData)((MagicEffectSubDataCommon)((IMagicEffectSubDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class MagicEffectSubData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffectSubData_Registration.Instance;
        public static MagicEffectSubData_Registration Registration => MagicEffectSubData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MagicEffectSubDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return MagicEffectSubDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MagicEffectSubDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMagicEffectSubDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMagicEffectSubDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IMagicEffectSubDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MagicEffectSubDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static MagicEffectSubDataXmlWriteTranslation Instance = new MagicEffectSubDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IMagicEffectSubDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.EnchantEffect) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EnchantEffect),
                    item: item.EnchantEffect.FormKey,
                    fieldIndex: (int)MagicEffectSubData_FieldIndex.EnchantEffect,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.CastingSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CastingSound),
                    item: item.CastingSound.FormKey,
                    fieldIndex: (int)MagicEffectSubData_FieldIndex.CastingSound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.BoltSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BoltSound),
                    item: item.BoltSound.FormKey,
                    fieldIndex: (int)MagicEffectSubData_FieldIndex.BoltSound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.HitSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HitSound),
                    item: item.HitSound.FormKey,
                    fieldIndex: (int)MagicEffectSubData_FieldIndex.HitSound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.AreaSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AreaSound),
                    item: item.AreaSound.FormKey,
                    fieldIndex: (int)MagicEffectSubData_FieldIndex.AreaSound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ConstantEffectEnchantmentFactor),
                    item: item.ConstantEffectEnchantmentFactor,
                    fieldIndex: (int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ConstantEffectBarterFactor),
                    item: item.ConstantEffectBarterFactor,
                    fieldIndex: (int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IMagicEffectSubDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.MagicEffectSubData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.MagicEffectSubData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IMagicEffectSubDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IMagicEffectSubDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IMagicEffectSubDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class MagicEffectSubDataXmlCreateTranslation
    {
        public readonly static MagicEffectSubDataXmlCreateTranslation Instance = new MagicEffectSubDataXmlCreateTranslation();

        public static void FillPublicXml(
            IMagicEffectSubData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MagicEffectSubDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IMagicEffectSubData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "EnchantEffect":
                    errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.EnchantEffect);
                    try
                    {
                        item.EnchantEffect.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CastingSound":
                    errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.CastingSound);
                    try
                    {
                        item.CastingSound.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BoltSound":
                    errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.BoltSound);
                    try
                    {
                        item.BoltSound.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HitSound":
                    errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.HitSound);
                    try
                    {
                        item.HitSound.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AreaSound":
                    errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.AreaSound);
                    try
                    {
                        item.AreaSound.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ConstantEffectEnchantmentFactor":
                    errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.ConstantEffectEnchantmentFactor);
                    try
                    {
                        item.ConstantEffectEnchantmentFactor = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ConstantEffectBarterFactor":
                    errorMask?.PushIndex((int)MagicEffectSubData_FieldIndex.ConstantEffectBarterFactor);
                    try
                    {
                        item.ConstantEffectBarterFactor = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class MagicEffectSubDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IMagicEffectSubDataGetter item,
            XElement node,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((MagicEffectSubDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffectSubData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IMagicEffectSubDataGetter item,
            string path,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMagicEffectSubDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMagicEffectSubDataGetter item,
            Stream stream,
            out MagicEffectSubData.ErrorMask errorMask,
            MagicEffectSubData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMagicEffectSubDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMagicEffectSubDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((MagicEffectSubDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IMagicEffectSubDataGetter item,
            XElement node,
            string? name = null,
            MagicEffectSubData.TranslationMask? translationMask = null)
        {
            ((MagicEffectSubDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IMagicEffectSubDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((MagicEffectSubDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMagicEffectSubDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((MagicEffectSubDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MagicEffectSubDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static MagicEffectSubDataBinaryWriteTranslation Instance = new MagicEffectSubDataBinaryWriteTranslation();

        public static void Write_Embedded(
            IMagicEffectSubDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EnchantEffect,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CastingSound,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BoltSound,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.HitSound,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AreaSound,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ConstantEffectEnchantmentFactor);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ConstantEffectBarterFactor);
        }

        public void Write(
            MutagenWriter writer,
            IMagicEffectSubDataGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IMagicEffectSubDataGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class MagicEffectSubDataBinaryCreateTranslation
    {
        public readonly static MagicEffectSubDataBinaryCreateTranslation Instance = new MagicEffectSubDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class MagicEffectSubDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMagicEffectSubDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((MagicEffectSubDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MagicEffectSubDataBinaryOverlay :
        BinaryOverlay,
        IMagicEffectSubDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffectSubData_Registration.Instance;
        public static MagicEffectSubData_Registration Registration => MagicEffectSubData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MagicEffectSubDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MagicEffectSubDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMagicEffectSubDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IMagicEffectSubDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IMagicEffectSubDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMagicEffectSubDataGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => MagicEffectSubDataCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => MagicEffectSubDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((MagicEffectSubDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MagicEffectSubDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((MagicEffectSubDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public IFormLinkGetter<IEffectShaderGetter> EnchantEffect => new FormLink<IEffectShaderGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0, 4))));
        public IFormLinkGetter<ISoundGetter> CastingSound => new FormLink<ISoundGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(4, 4))));
        public IFormLinkGetter<ISoundGetter> BoltSound => new FormLink<ISoundGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(8, 4))));
        public IFormLinkGetter<ISoundGetter> HitSound => new FormLink<ISoundGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(12, 4))));
        public IFormLinkGetter<ISoundGetter> AreaSound => new FormLink<ISoundGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(16, 4))));
        public Single ConstantEffectEnchantmentFactor => SpanExt.GetFloat(_data.Span.Slice(20, 4));
        public Single ConstantEffectBarterFactor => SpanExt.GetFloat(_data.Span.Slice(24, 4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected MagicEffectSubDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static MagicEffectSubDataBinaryOverlay MagicEffectSubDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new MagicEffectSubDataBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 28),
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

