/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Region :
        OblivionMajorRecord,
        IRegionInternal,
        ILoquiObjectSetter<Region>,
        IEquatable<Region>,
        IEqualsMask
    {
        #region Ctor
        protected Region()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Icon;
        public String? Icon
        {
            get => this._Icon;
            set => this._Icon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRegionGetter.Icon => this.Icon;
        #endregion
        #region MapColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Color? _MapColor;
        public Color? MapColor
        {
            get => this._MapColor;
            set => this._MapColor = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? IRegionGetter.MapColor => this.MapColor;
        #endregion
        #region Worldspace
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Worldspace> _Worldspace = new FormLinkNullable<Worldspace>();
        public IFormLinkNullable<Worldspace> Worldspace => this._Worldspace;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IWorldspaceGetter> IRegionGetter.Worldspace => this.Worldspace;
        #endregion
        #region Areas
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RegionArea>? _Areas;
        public ExtendedList<RegionArea>? Areas
        {
            get => this._Areas;
            set => this._Areas = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRegionAreaGetter>? IRegionGetter.Areas => _Areas;
        #endregion

        #endregion
        #region Objects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegionDataObjects? _Objects;
        public RegionDataObjects? Objects
        {
            get => _Objects;
            set => _Objects = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataObjectsGetter? IRegionGetter.Objects => this.Objects;
        #endregion
        #region Weather
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegionDataWeather? _Weather;
        public RegionDataWeather? Weather
        {
            get => _Weather;
            set => _Weather = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataWeatherGetter? IRegionGetter.Weather => this.Weather;
        #endregion
        #region MapName
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegionDataMapName? _MapName;
        public RegionDataMapName? MapName
        {
            get => _MapName;
            set => _MapName = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataMapNameGetter? IRegionGetter.MapName => this.MapName;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegionDataGrasses? _Grasses;
        public RegionDataGrasses? Grasses
        {
            get => _Grasses;
            set => _Grasses = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataGrassesGetter? IRegionGetter.Grasses => this.Grasses;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegionDataSounds? _Sounds;
        public RegionDataSounds? Sounds
        {
            get => _Sounds;
            set => _Sounds = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRegionDataSoundsGetter? IRegionGetter.Sounds => this.Sounds;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RegionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRegionGetter rhs)) return false;
            return ((RegionCommon)((IRegionGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Region obj)
        {
            return ((RegionCommon)((IRegionGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RegionCommon)((IRegionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => RegionXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RegionXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Region CreateFromXml(
            XElement node,
            Region.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Region CreateFromXml(
            XElement node,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Region.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Region CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Region();
            ((RegionSetterCommon)((IRegionGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Region CreateFromXml(
            string path,
            Region.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Region CreateFromXml(
            string path,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Region CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Region.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Region CreateFromXml(
            Stream stream,
            Region.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Region CreateFromXml(
            Stream stream,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Region CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Region.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            OblivionMajorRecord.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.Icon = initialValue;
                this.MapColor = initialValue;
                this.Worldspace = initialValue;
                this.Areas = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RegionArea.Mask<T>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<T, RegionArea.Mask<T>?>>());
                this.Objects = new MaskItem<T, RegionDataObjects.Mask<T>?>(initialValue, new RegionDataObjects.Mask<T>(initialValue));
                this.Weather = new MaskItem<T, RegionDataWeather.Mask<T>?>(initialValue, new RegionDataWeather.Mask<T>(initialValue));
                this.MapName = new MaskItem<T, RegionDataMapName.Mask<T>?>(initialValue, new RegionDataMapName.Mask<T>(initialValue));
                this.Grasses = new MaskItem<T, RegionDataGrasses.Mask<T>?>(initialValue, new RegionDataGrasses.Mask<T>(initialValue));
                this.Sounds = new MaskItem<T, RegionDataSounds.Mask<T>?>(initialValue, new RegionDataSounds.Mask<T>(initialValue));
            }

            public Mask(
                T MajorRecordFlagsRaw,
                T FormKey,
                T Version,
                T EditorID,
                T OblivionMajorRecordFlags,
                T Icon,
                T MapColor,
                T Worldspace,
                T Areas,
                T Objects,
                T Weather,
                T MapName,
                T Grasses,
                T Sounds)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Icon = Icon;
                this.MapColor = MapColor;
                this.Worldspace = Worldspace;
                this.Areas = new MaskItem<T, IEnumerable<MaskItemIndexed<T, RegionArea.Mask<T>?>>?>(Areas, Enumerable.Empty<MaskItemIndexed<T, RegionArea.Mask<T>?>>());
                this.Objects = new MaskItem<T, RegionDataObjects.Mask<T>?>(Objects, new RegionDataObjects.Mask<T>(Objects));
                this.Weather = new MaskItem<T, RegionDataWeather.Mask<T>?>(Weather, new RegionDataWeather.Mask<T>(Weather));
                this.MapName = new MaskItem<T, RegionDataMapName.Mask<T>?>(MapName, new RegionDataMapName.Mask<T>(MapName));
                this.Grasses = new MaskItem<T, RegionDataGrasses.Mask<T>?>(Grasses, new RegionDataGrasses.Mask<T>(Grasses));
                this.Sounds = new MaskItem<T, RegionDataSounds.Mask<T>?>(Sounds, new RegionDataSounds.Mask<T>(Sounds));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T Icon;
            public T MapColor;
            public T Worldspace;
            public MaskItem<T, IEnumerable<MaskItemIndexed<T, RegionArea.Mask<T>?>>?>? Areas;
            public MaskItem<T, RegionDataObjects.Mask<T>?>? Objects { get; set; }
            public MaskItem<T, RegionDataWeather.Mask<T>?>? Weather { get; set; }
            public MaskItem<T, RegionDataMapName.Mask<T>?>? MapName { get; set; }
            public MaskItem<T, RegionDataGrasses.Mask<T>?>? Grasses { get; set; }
            public MaskItem<T, RegionDataSounds.Mask<T>?>? Sounds { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.MapColor, rhs.MapColor)) return false;
                if (!object.Equals(this.Worldspace, rhs.Worldspace)) return false;
                if (!object.Equals(this.Areas, rhs.Areas)) return false;
                if (!object.Equals(this.Objects, rhs.Objects)) return false;
                if (!object.Equals(this.Weather, rhs.Weather)) return false;
                if (!object.Equals(this.MapName, rhs.MapName)) return false;
                if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Icon?.GetHashCode());
                ret = ret.CombineHashCode(this.MapColor?.GetHashCode());
                ret = ret.CombineHashCode(this.Worldspace?.GetHashCode());
                ret = ret.CombineHashCode(this.Areas?.GetHashCode());
                ret = ret.CombineHashCode(this.Objects?.GetHashCode());
                ret = ret.CombineHashCode(this.Weather?.GetHashCode());
                ret = ret.CombineHashCode(this.MapName?.GetHashCode());
                ret = ret.CombineHashCode(this.Grasses?.GetHashCode());
                ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<T, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Icon)) return false;
                if (!eval(this.MapColor)) return false;
                if (!eval(this.Worldspace)) return false;
                if (this.Areas != null)
                {
                    if (!eval(this.Areas.Overall)) return false;
                    if (this.Areas.Specific != null)
                    {
                        foreach (var item in this.Areas.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Objects != null)
                {
                    if (!eval(this.Objects.Overall)) return false;
                    if (this.Objects.Specific != null && !this.Objects.Specific.All(eval)) return false;
                }
                if (Weather != null)
                {
                    if (!eval(this.Weather.Overall)) return false;
                    if (this.Weather.Specific != null && !this.Weather.Specific.All(eval)) return false;
                }
                if (MapName != null)
                {
                    if (!eval(this.MapName.Overall)) return false;
                    if (this.MapName.Specific != null && !this.MapName.Specific.All(eval)) return false;
                }
                if (Grasses != null)
                {
                    if (!eval(this.Grasses.Overall)) return false;
                    if (this.Grasses.Specific != null && !this.Grasses.Specific.All(eval)) return false;
                }
                if (Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null && !this.Sounds.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<T, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Icon)) return true;
                if (eval(this.MapColor)) return true;
                if (eval(this.Worldspace)) return true;
                if (this.Areas != null)
                {
                    if (eval(this.Areas.Overall)) return true;
                    if (this.Areas.Specific != null)
                    {
                        foreach (var item in this.Areas.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Objects != null)
                {
                    if (eval(this.Objects.Overall)) return true;
                    if (this.Objects.Specific != null && this.Objects.Specific.Any(eval)) return true;
                }
                if (Weather != null)
                {
                    if (eval(this.Weather.Overall)) return true;
                    if (this.Weather.Specific != null && this.Weather.Specific.Any(eval)) return true;
                }
                if (MapName != null)
                {
                    if (eval(this.MapName.Overall)) return true;
                    if (this.MapName.Specific != null && this.MapName.Specific.Any(eval)) return true;
                }
                if (Grasses != null)
                {
                    if (eval(this.Grasses.Overall)) return true;
                    if (this.Grasses.Specific != null && this.Grasses.Specific.Any(eval)) return true;
                }
                if (Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null && this.Sounds.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new Region.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Icon = eval(this.Icon);
                obj.MapColor = eval(this.MapColor);
                obj.Worldspace = eval(this.Worldspace);
                if (Areas != null)
                {
                    obj.Areas = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RegionArea.Mask<R>?>>?>(eval(this.Areas.Overall), Enumerable.Empty<MaskItemIndexed<R, RegionArea.Mask<R>?>>());
                    if (Areas.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RegionArea.Mask<R>?>>();
                        obj.Areas.Specific = l;
                        foreach (var item in Areas.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, RegionArea.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, RegionArea.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Objects = this.Objects == null ? null : new MaskItem<R, RegionDataObjects.Mask<R>?>(eval(this.Objects.Overall), this.Objects.Specific?.Translate(eval));
                obj.Weather = this.Weather == null ? null : new MaskItem<R, RegionDataWeather.Mask<R>?>(eval(this.Weather.Overall), this.Weather.Specific?.Translate(eval));
                obj.MapName = this.MapName == null ? null : new MaskItem<R, RegionDataMapName.Mask<R>?>(eval(this.MapName.Overall), this.MapName.Specific?.Translate(eval));
                obj.Grasses = this.Grasses == null ? null : new MaskItem<R, RegionDataGrasses.Mask<R>?>(eval(this.Grasses.Overall), this.Grasses.Specific?.Translate(eval));
                obj.Sounds = this.Sounds == null ? null : new MaskItem<R, RegionDataSounds.Mask<R>?>(eval(this.Sounds.Overall), this.Sounds.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Region.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Region.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Region.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendItem(Icon, "Icon");
                    }
                    if (printMask?.MapColor ?? true)
                    {
                        fg.AppendItem(MapColor, "MapColor");
                    }
                    if (printMask?.Worldspace ?? true)
                    {
                        fg.AppendItem(Worldspace, "Worldspace");
                    }
                    if ((printMask?.Areas?.Overall ?? true)
                        && Areas.TryGet(out var AreasItem))
                    {
                        fg.AppendLine("Areas =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AreasItem.Overall);
                            if (AreasItem.Specific != null)
                            {
                                foreach (var subItem in AreasItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Objects?.Overall ?? true)
                    {
                        Objects?.ToString(fg);
                    }
                    if (printMask?.Weather?.Overall ?? true)
                    {
                        Weather?.ToString(fg);
                    }
                    if (printMask?.MapName?.Overall ?? true)
                    {
                        MapName?.ToString(fg);
                    }
                    if (printMask?.Grasses?.Overall ?? true)
                    {
                        Grasses?.ToString(fg);
                    }
                    if (printMask?.Sounds?.Overall ?? true)
                    {
                        Sounds?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Icon;
            public Exception? MapColor;
            public Exception? Worldspace;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RegionArea.ErrorMask?>>?>? Areas;
            public MaskItem<Exception?, RegionDataObjects.ErrorMask?>? Objects;
            public MaskItem<Exception?, RegionDataWeather.ErrorMask?>? Weather;
            public MaskItem<Exception?, RegionDataMapName.ErrorMask?>? MapName;
            public MaskItem<Exception?, RegionDataGrasses.ErrorMask?>? Grasses;
            public MaskItem<Exception?, RegionDataSounds.ErrorMask?>? Sounds;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Region_FieldIndex enu = (Region_FieldIndex)index;
                switch (enu)
                {
                    case Region_FieldIndex.Icon:
                        return Icon;
                    case Region_FieldIndex.MapColor:
                        return MapColor;
                    case Region_FieldIndex.Worldspace:
                        return Worldspace;
                    case Region_FieldIndex.Areas:
                        return Areas;
                    case Region_FieldIndex.Objects:
                        return Objects;
                    case Region_FieldIndex.Weather:
                        return Weather;
                    case Region_FieldIndex.MapName:
                        return MapName;
                    case Region_FieldIndex.Grasses:
                        return Grasses;
                    case Region_FieldIndex.Sounds:
                        return Sounds;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Region_FieldIndex enu = (Region_FieldIndex)index;
                switch (enu)
                {
                    case Region_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case Region_FieldIndex.MapColor:
                        this.MapColor = ex;
                        break;
                    case Region_FieldIndex.Worldspace:
                        this.Worldspace = ex;
                        break;
                    case Region_FieldIndex.Areas:
                        this.Areas = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RegionArea.ErrorMask?>>?>(ex, null);
                        break;
                    case Region_FieldIndex.Objects:
                        this.Objects = new MaskItem<Exception?, RegionDataObjects.ErrorMask?>(ex, null);
                        break;
                    case Region_FieldIndex.Weather:
                        this.Weather = new MaskItem<Exception?, RegionDataWeather.ErrorMask?>(ex, null);
                        break;
                    case Region_FieldIndex.MapName:
                        this.MapName = new MaskItem<Exception?, RegionDataMapName.ErrorMask?>(ex, null);
                        break;
                    case Region_FieldIndex.Grasses:
                        this.Grasses = new MaskItem<Exception?, RegionDataGrasses.ErrorMask?>(ex, null);
                        break;
                    case Region_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, RegionDataSounds.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Region_FieldIndex enu = (Region_FieldIndex)index;
                switch (enu)
                {
                    case Region_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case Region_FieldIndex.MapColor:
                        this.MapColor = (Exception?)obj;
                        break;
                    case Region_FieldIndex.Worldspace:
                        this.Worldspace = (Exception?)obj;
                        break;
                    case Region_FieldIndex.Areas:
                        this.Areas = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RegionArea.ErrorMask?>>?>)obj;
                        break;
                    case Region_FieldIndex.Objects:
                        this.Objects = (MaskItem<Exception?, RegionDataObjects.ErrorMask?>?)obj;
                        break;
                    case Region_FieldIndex.Weather:
                        this.Weather = (MaskItem<Exception?, RegionDataWeather.ErrorMask?>?)obj;
                        break;
                    case Region_FieldIndex.MapName:
                        this.MapName = (MaskItem<Exception?, RegionDataMapName.ErrorMask?>?)obj;
                        break;
                    case Region_FieldIndex.Grasses:
                        this.Grasses = (MaskItem<Exception?, RegionDataGrasses.ErrorMask?>?)obj;
                        break;
                    case Region_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, RegionDataSounds.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Icon != null) return true;
                if (MapColor != null) return true;
                if (Worldspace != null) return true;
                if (Areas != null) return true;
                if (Objects != null) return true;
                if (Weather != null) return true;
                if (MapName != null) return true;
                if (Grasses != null) return true;
                if (Sounds != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Icon, "Icon");
                fg.AppendItem(MapColor, "MapColor");
                fg.AppendItem(Worldspace, "Worldspace");
                if (Areas.TryGet(out var AreasItem))
                {
                    fg.AppendLine("Areas =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AreasItem.Overall);
                        if (AreasItem.Specific != null)
                        {
                            foreach (var subItem in AreasItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Objects?.ToString(fg);
                Weather?.ToString(fg);
                MapName?.ToString(fg);
                Grasses?.ToString(fg);
                Sounds?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.MapColor = this.MapColor.Combine(rhs.MapColor);
                ret.Worldspace = this.Worldspace.Combine(rhs.Worldspace);
                ret.Areas = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RegionArea.ErrorMask?>>?>(ExceptionExt.Combine(this.Areas?.Overall, rhs.Areas?.Overall), ExceptionExt.Combine(this.Areas?.Specific, rhs.Areas?.Specific));
                ret.Objects = this.Objects.Combine(rhs.Objects, (l, r) => l.Combine(r));
                ret.Weather = this.Weather.Combine(rhs.Weather, (l, r) => l.Combine(r));
                ret.MapName = this.MapName.Combine(rhs.MapName, (l, r) => l.Combine(r));
                ret.Grasses = this.Grasses.Combine(rhs.Grasses, (l, r) => l.Combine(r));
                ret.Sounds = this.Sounds.Combine(rhs.Sounds, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Icon;
            public bool MapColor;
            public bool Worldspace;
            public MaskItem<bool, RegionArea.TranslationMask?> Areas;
            public MaskItem<bool, RegionDataObjects.TranslationMask?> Objects;
            public MaskItem<bool, RegionDataWeather.TranslationMask?> Weather;
            public MaskItem<bool, RegionDataMapName.TranslationMask?> MapName;
            public MaskItem<bool, RegionDataGrasses.TranslationMask?> Grasses;
            public MaskItem<bool, RegionDataSounds.TranslationMask?> Sounds;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Icon = defaultOn;
                this.MapColor = defaultOn;
                this.Worldspace = defaultOn;
                this.Areas = new MaskItem<bool, RegionArea.TranslationMask?>(defaultOn, null);
                this.Objects = new MaskItem<bool, RegionDataObjects.TranslationMask?>(defaultOn, null);
                this.Weather = new MaskItem<bool, RegionDataWeather.TranslationMask?>(defaultOn, null);
                this.MapName = new MaskItem<bool, RegionDataMapName.TranslationMask?>(defaultOn, null);
                this.Grasses = new MaskItem<bool, RegionDataGrasses.TranslationMask?>(defaultOn, null);
                this.Sounds = new MaskItem<bool, RegionDataSounds.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Icon, null));
                ret.Add((MapColor, null));
                ret.Add((Worldspace, null));
                ret.Add((Areas?.Overall ?? true, Areas?.Specific?.GetCrystal()));
                ret.Add((Objects?.Overall ?? true, Objects?.Specific?.GetCrystal()));
                ret.Add((Weather?.Overall ?? true, Weather?.Specific?.GetCrystal()));
                ret.Add((MapName?.Overall ?? true, MapName?.Specific?.GetCrystal()));
                ret.Add((Grasses?.Overall ?? true, Grasses?.Specific?.GetCrystal()));
                ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Region_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => RegionCommon.Instance.GetLinks(this);
        public Region(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Region(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RegionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((RegionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Region CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Region CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Region();
            ((RegionSetterCommon)((IRegionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RegionSetterCommon)((IRegionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Region GetNew()
        {
            return new Region();
        }

    }
    #endregion

    #region Interface
    public partial interface IRegion :
        IRegionGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IRegionInternal>
    {
        new String? Icon { get; set; }
        new Color? MapColor { get; set; }
        new IFormLinkNullable<Worldspace> Worldspace { get; }
        new ExtendedList<RegionArea>? Areas { get; set; }
        new RegionDataObjects? Objects { get; set; }
        new RegionDataWeather? Weather { get; set; }
        new RegionDataMapName? MapName { get; set; }
        new RegionDataGrasses? Grasses { get; set; }
        new RegionDataSounds? Sounds { get; set; }
    }

    public partial interface IRegionInternal :
        IOblivionMajorRecordInternal,
        IRegion,
        IRegionGetter
    {
    }

    public partial interface IRegionGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IRegionGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Icon { get; }
        Color? MapColor { get; }
        IFormLinkNullableGetter<IWorldspaceGetter> Worldspace { get; }
        IReadOnlyList<IRegionAreaGetter>? Areas { get; }
        IRegionDataObjectsGetter? Objects { get; }
        IRegionDataWeatherGetter? Weather { get; }
        IRegionDataMapNameGetter? MapName { get; }
        IRegionDataGrassesGetter? Grasses { get; }
        IRegionDataSoundsGetter? Sounds { get; }

    }

    #endregion

    #region Common MixIn
    public static class RegionMixIn
    {
        public static void Clear(this IRegionInternal item)
        {
            ((RegionSetterCommon)((IRegionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Region.Mask<bool> GetEqualsMask(
            this IRegionGetter item,
            IRegionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RegionCommon)((IRegionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRegionGetter item,
            string? name = null,
            Region.Mask<bool>? printMask = null)
        {
            return ((RegionCommon)((IRegionGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRegionGetter item,
            FileGeneration fg,
            string? name = null,
            Region.Mask<bool>? printMask = null)
        {
            ((RegionCommon)((IRegionGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRegionGetter item,
            Region.Mask<bool?> checkMask)
        {
            return ((RegionCommon)((IRegionGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Region.Mask<bool> GetHasBeenSetMask(this IRegionGetter item)
        {
            var ret = new Region.Mask<bool>(false);
            ((RegionCommon)((IRegionGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRegionGetter item,
            IRegionGetter rhs)
        {
            return ((RegionCommon)((IRegionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRegionInternal lhs,
            IRegionGetter rhs,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RegionSetterTranslationCommon)((IRegionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Region.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRegionInternal lhs,
            IRegionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RegionSetterTranslationCommon)((IRegionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Region DeepCopy(
            this IRegionGetter item,
            Region.TranslationMask? copyMask = null)
        {
            return ((RegionSetterTranslationCommon)((IRegionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Region DeepCopy(
            this IRegionGetter item,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? copyMask = null)
        {
            return ((RegionSetterTranslationCommon)((IRegionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Region DeepCopy(
            this IRegionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RegionSetterTranslationCommon)((IRegionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRegionInternal item,
            XElement node,
            Region.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRegionInternal item,
            XElement node,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Region.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRegionInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((RegionSetterCommon)((IRegionGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionInternal item,
            string path,
            Region.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionInternal item,
            string path,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Region.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRegionInternal item,
            Stream stream,
            Region.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionInternal item,
            Stream stream,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Region.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRegionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRegionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((RegionSetterCommon)((IRegionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Region_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Icon = 5,
        MapColor = 6,
        Worldspace = 7,
        Areas = 8,
        Objects = 9,
        Weather = 10,
        MapName = 11,
        Grasses = 12,
        Sounds = 13,
    }
    #endregion

    #region Registration
    public partial class Region_Registration : ILoquiRegistration
    {
        public static readonly Region_Registration Instance = new Region_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 107,
            version: 0);

        public const string GUID = "638d02e0-687a-49ad-a934-6f2ed1e05c3a";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(Region.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Region.ErrorMask);

        public static readonly Type ClassType = typeof(Region);

        public static readonly Type GetterType = typeof(IRegionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRegion);

        public static readonly Type? InternalSetterType = typeof(IRegionInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Region";

        public const string Name = "Region";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ICON":
                    return (ushort)Region_FieldIndex.Icon;
                case "MAPCOLOR":
                    return (ushort)Region_FieldIndex.MapColor;
                case "WORLDSPACE":
                    return (ushort)Region_FieldIndex.Worldspace;
                case "AREAS":
                    return (ushort)Region_FieldIndex.Areas;
                case "OBJECTS":
                    return (ushort)Region_FieldIndex.Objects;
                case "WEATHER":
                    return (ushort)Region_FieldIndex.Weather;
                case "MAPNAME":
                    return (ushort)Region_FieldIndex.MapName;
                case "GRASSES":
                    return (ushort)Region_FieldIndex.Grasses;
                case "SOUNDS":
                    return (ushort)Region_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Areas:
                    return true;
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return true;
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    return "Icon";
                case Region_FieldIndex.MapColor:
                    return "MapColor";
                case Region_FieldIndex.Worldspace:
                    return "Worldspace";
                case Region_FieldIndex.Areas:
                    return "Areas";
                case Region_FieldIndex.Objects:
                    return "Objects";
                case Region_FieldIndex.Weather:
                    return "Weather";
                case Region_FieldIndex.MapName:
                    return "MapName";
                case Region_FieldIndex.Grasses:
                    return "Grasses";
                case Region_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                case Region_FieldIndex.MapColor:
                case Region_FieldIndex.Worldspace:
                case Region_FieldIndex.Areas:
                case Region_FieldIndex.Objects:
                case Region_FieldIndex.Weather:
                case Region_FieldIndex.MapName:
                case Region_FieldIndex.Grasses:
                case Region_FieldIndex.Sounds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Region_FieldIndex enu = (Region_FieldIndex)index;
            switch (enu)
            {
                case Region_FieldIndex.Icon:
                    return typeof(String);
                case Region_FieldIndex.MapColor:
                    return typeof(Color);
                case Region_FieldIndex.Worldspace:
                    return typeof(IFormLinkNullable<Worldspace>);
                case Region_FieldIndex.Areas:
                    return typeof(ExtendedList<RegionArea>);
                case Region_FieldIndex.Objects:
                    return typeof(RegionDataObjects);
                case Region_FieldIndex.Weather:
                    return typeof(RegionDataWeather);
                case Region_FieldIndex.MapName:
                    return typeof(RegionDataMapName);
                case Region_FieldIndex.Grasses:
                    return typeof(RegionDataGrasses);
                case Region_FieldIndex.Sounds:
                    return typeof(RegionDataSounds);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RegionXmlWriteTranslation);
        public static readonly RecordType REGN_HEADER = new RecordType("REGN");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType RCLR_HEADER = new RecordType("RCLR");
        public static readonly RecordType WNAM_HEADER = new RecordType("WNAM");
        public static readonly RecordType RPLI_HEADER = new RecordType("RPLI");
        public static readonly RecordType RPLD_HEADER = new RecordType("RPLD");
        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = REGN_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 9;
        public static readonly Type BinaryWriteTranslation = typeof(RegionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RegionSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly RegionSetterCommon Instance = new RegionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRegionInternal item)
        {
            ClearPartial();
            item.Icon = default;
            item.MapColor = default;
            item.Worldspace.FormKey = null;
            item.Areas = null;
            item.Objects = null;
            item.Weather = null;
            item.MapName = null;
            item.Grasses = null;
            item.Sounds = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IRegionInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRegionInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IRegionInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IRegionInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RegionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Region_Registration.REGN_HEADER;
        protected static void FillBinaryStructs(
            IRegionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IRegionInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Icon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Icon);
                }
                case 0x524C4352: // RCLR
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MapColor = Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        extraByte: true);
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.MapColor);
                }
                case 0x4D414E57: // WNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Worldspace.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Worldspace);
                }
                case 0x494C5052: // RPLI
                case 0x444C5052: // RPLD
                {
                    item.Areas = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionArea>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: RegionArea_Registration.TriggeringRecordTypes,
                            lengthLength: frame.MetaData.SubConstants.LengthLength,
                            transl: (MutagenFrame r, out RegionArea listSubItem) =>
                            {
                                return LoquiBinaryTranslation<RegionArea>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem,
                                    masterReferences: masterReferences);
                            })
                        .ToExtendedList<RegionArea>();
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Areas);
                }
                case 0x54414452: // RDAT
                {
                    RegionBinaryCreateTranslation.FillBinaryRegionAreaLogicCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed(null);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IRegionInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<IRegionInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RegionCommon : OblivionMajorRecordCommon
    {
        public new static readonly RegionCommon Instance = new RegionCommon();

        public Region.Mask<bool> GetEqualsMask(
            IRegionGetter item,
            IRegionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Region.Mask<bool>(false);
            ((RegionCommon)((IRegionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRegionGetter item,
            IRegionGetter rhs,
            Region.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.MapColor = item.MapColor.ColorOnlyEquals(rhs.MapColor);
            ret.Worldspace = object.Equals(item.Worldspace, rhs.Worldspace);
            ret.Areas = item.Areas.CollectionEqualsHelper(
                rhs.Areas,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Objects = EqualsMaskHelper.EqualsHelper(
                item.Objects,
                rhs.Objects,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Weather = EqualsMaskHelper.EqualsHelper(
                item.Weather,
                rhs.Weather,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MapName = EqualsMaskHelper.EqualsHelper(
                item.MapName,
                rhs.MapName,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Grasses = EqualsMaskHelper.EqualsHelper(
                item.Grasses,
                rhs.Grasses,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Sounds = EqualsMaskHelper.EqualsHelper(
                item.Sounds,
                rhs.Sounds,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IRegionGetter item,
            string? name = null,
            Region.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRegionGetter item,
            FileGeneration fg,
            string? name = null,
            Region.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Region =>");
            }
            else
            {
                fg.AppendLine($"{name} (Region) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRegionGetter item,
            FileGeneration fg,
            Region.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Icon ?? true)
                && item.Icon.TryGet(out var IconItem))
            {
                fg.AppendItem(IconItem, "Icon");
            }
            if ((printMask?.MapColor ?? true)
                && item.MapColor.TryGet(out var MapColorItem))
            {
                fg.AppendItem(MapColorItem, "MapColor");
            }
            if ((printMask?.Worldspace ?? true)
                && item.Worldspace.TryGet(out var WorldspaceItem))
            {
                fg.AppendItem(WorldspaceItem, "Worldspace");
            }
            if ((printMask?.Areas?.Overall ?? true)
                && item.Areas.TryGet(out var AreasItem))
            {
                fg.AppendLine("Areas =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in AreasItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Objects?.Overall ?? true)
                && item.Objects.TryGet(out var ObjectsItem))
            {
                ObjectsItem?.ToString(fg, "Objects");
            }
            if ((printMask?.Weather?.Overall ?? true)
                && item.Weather.TryGet(out var WeatherItem))
            {
                WeatherItem?.ToString(fg, "Weather");
            }
            if ((printMask?.MapName?.Overall ?? true)
                && item.MapName.TryGet(out var MapNameItem))
            {
                MapNameItem?.ToString(fg, "MapName");
            }
            if ((printMask?.Grasses?.Overall ?? true)
                && item.Grasses.TryGet(out var GrassesItem))
            {
                GrassesItem?.ToString(fg, "Grasses");
            }
            if ((printMask?.Sounds?.Overall ?? true)
                && item.Sounds.TryGet(out var SoundsItem))
            {
                SoundsItem?.ToString(fg, "Sounds");
            }
        }
        
        public bool HasBeenSet(
            IRegionGetter item,
            Region.Mask<bool?> checkMask)
        {
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != (item.Icon != null)) return false;
            if (checkMask.MapColor.HasValue && checkMask.MapColor.Value != (item.MapColor != null)) return false;
            if (checkMask.Worldspace.HasValue && checkMask.Worldspace.Value != (item.Worldspace.FormKey != null)) return false;
            if (checkMask.Areas?.Overall.HasValue ?? false && checkMask.Areas!.Overall.Value != (item.Areas != null)) return false;
            if (checkMask.Objects?.Overall.HasValue ?? false && checkMask.Objects.Overall.Value != (item.Objects != null)) return false;
            if (checkMask.Objects?.Specific != null && (item.Objects == null || !item.Objects.HasBeenSet(checkMask.Objects.Specific))) return false;
            if (checkMask.Weather?.Overall.HasValue ?? false && checkMask.Weather.Overall.Value != (item.Weather != null)) return false;
            if (checkMask.Weather?.Specific != null && (item.Weather == null || !item.Weather.HasBeenSet(checkMask.Weather.Specific))) return false;
            if (checkMask.MapName?.Overall.HasValue ?? false && checkMask.MapName.Overall.Value != (item.MapName != null)) return false;
            if (checkMask.MapName?.Specific != null && (item.MapName == null || !item.MapName.HasBeenSet(checkMask.MapName.Specific))) return false;
            if (checkMask.Grasses?.Overall.HasValue ?? false && checkMask.Grasses.Overall.Value != (item.Grasses != null)) return false;
            if (checkMask.Grasses?.Specific != null && (item.Grasses == null || !item.Grasses.HasBeenSet(checkMask.Grasses.Specific))) return false;
            if (checkMask.Sounds?.Overall.HasValue ?? false && checkMask.Sounds.Overall.Value != (item.Sounds != null)) return false;
            if (checkMask.Sounds?.Specific != null && (item.Sounds == null || !item.Sounds.HasBeenSet(checkMask.Sounds.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IRegionGetter item,
            Region.Mask<bool> mask)
        {
            mask.Icon = (item.Icon != null);
            mask.MapColor = (item.MapColor != null);
            mask.Worldspace = (item.Worldspace.FormKey != null);
            if (item.Areas.TryGet(out var AreasItem))
            {
                mask.Areas = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RegionArea.Mask<bool>?>>?>(true, AreasItem.WithIndex().Select((i) => new MaskItemIndexed<bool, RegionArea.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            var itemObjects = item.Objects;
            mask.Objects = new MaskItem<bool, RegionDataObjects.Mask<bool>?>(itemObjects != null, itemObjects?.GetHasBeenSetMask());
            var itemWeather = item.Weather;
            mask.Weather = new MaskItem<bool, RegionDataWeather.Mask<bool>?>(itemWeather != null, itemWeather?.GetHasBeenSetMask());
            var itemMapName = item.MapName;
            mask.MapName = new MaskItem<bool, RegionDataMapName.Mask<bool>?>(itemMapName != null, itemMapName?.GetHasBeenSetMask());
            var itemGrasses = item.Grasses;
            mask.Grasses = new MaskItem<bool, RegionDataGrasses.Mask<bool>?>(itemGrasses != null, itemGrasses?.GetHasBeenSetMask());
            var itemSounds = item.Sounds;
            mask.Sounds = new MaskItem<bool, RegionDataSounds.Mask<bool>?>(itemSounds != null, itemSounds?.GetHasBeenSetMask());
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Region_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Region_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Region_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Region_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Region_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Region_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Region_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Region_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Region_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRegionGetter? lhs,
            IRegionGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            if (!lhs.MapColor.ColorOnlyEquals(rhs.MapColor)) return false;
            if (!lhs.Worldspace.Equals(rhs.Worldspace)) return false;
            if (!lhs.Areas.SequenceEqual(rhs.Areas)) return false;
            if (!object.Equals(lhs.Objects, rhs.Objects)) return false;
            if (!object.Equals(lhs.Weather, rhs.Weather)) return false;
            if (!object.Equals(lhs.MapName, rhs.MapName)) return false;
            if (!object.Equals(lhs.Grasses, rhs.Grasses)) return false;
            if (!object.Equals(lhs.Sounds, rhs.Sounds)) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IRegionGetter?)lhs,
                rhs: rhs as IRegionGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IRegionGetter?)lhs,
                rhs: rhs as IRegionGetter);
        }
        
        public virtual int GetHashCode(IRegionGetter item)
        {
            int ret = 0;
            if (item.Icon.TryGet(out var Iconitem))
            {
                ret = HashHelper.GetHashCode(Iconitem).CombineHashCode(ret);
            }
            if (item.MapColor.TryGet(out var MapColoritem))
            {
                ret = HashHelper.GetHashCode(MapColoritem).CombineHashCode(ret);
            }
            if (item.Worldspace.TryGet(out var Worldspaceitem))
            {
                ret = HashHelper.GetHashCode(Worldspaceitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Areas).CombineHashCode(ret);
            if (item.Objects.TryGet(out var Objectsitem))
            {
                ret = HashHelper.GetHashCode(Objectsitem).CombineHashCode(ret);
            }
            if (item.Weather.TryGet(out var Weatheritem))
            {
                ret = HashHelper.GetHashCode(Weatheritem).CombineHashCode(ret);
            }
            if (item.MapName.TryGet(out var MapNameitem))
            {
                ret = HashHelper.GetHashCode(MapNameitem).CombineHashCode(ret);
            }
            if (item.Grasses.TryGet(out var Grassesitem))
            {
                ret = HashHelper.GetHashCode(Grassesitem).CombineHashCode(ret);
            }
            if (item.Sounds.TryGet(out var Soundsitem))
            {
                ret = HashHelper.GetHashCode(Soundsitem).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IRegionGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IRegionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Region.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IRegionGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Worldspace;
            if (obj.Objects != null)
            {
                foreach (var item in obj.Objects.Links)
                {
                    yield return item;
                }
            }
            if (obj.Weather != null)
            {
                foreach (var item in obj.Weather.Links)
                {
                    yield return item;
                }
            }
            if (obj.Grasses != null)
            {
                foreach (var item in obj.Grasses.Links)
                {
                    yield return item;
                }
            }
            if (obj.Sounds != null)
            {
                foreach (var item in obj.Sounds.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        partial void PostDuplicate(Region obj, Region rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Region(getNextFormKey());
            ret.DeepCopyIn((Region)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Region)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class RegionSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly RegionSetterTranslationCommon Instance = new RegionSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IRegionInternal item,
            IRegionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IRegion item,
            IRegionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.MapColor) ?? true))
            {
                item.MapColor = rhs.MapColor;
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.Worldspace) ?? true))
            {
                item.Worldspace.FormKey = rhs.Worldspace.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.Areas) ?? true))
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Areas);
                try
                {
                    if ((rhs.Areas != null))
                    {
                        item.Areas = 
                            rhs.Areas
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<RegionArea>();
                    }
                    else
                    {
                        item.Areas = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.Objects) ?? true))
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Objects);
                try
                {
                    if(rhs.Objects.TryGet(out var rhsObjects))
                    {
                        item.Objects = rhsObjects.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Region_FieldIndex.Objects));
                    }
                    else
                    {
                        item.Objects = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.Weather) ?? true))
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Weather);
                try
                {
                    if(rhs.Weather.TryGet(out var rhsWeather))
                    {
                        item.Weather = rhsWeather.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Region_FieldIndex.Weather));
                    }
                    else
                    {
                        item.Weather = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.MapName) ?? true))
            {
                errorMask?.PushIndex((int)Region_FieldIndex.MapName);
                try
                {
                    if(rhs.MapName.TryGet(out var rhsMapName))
                    {
                        item.MapName = rhsMapName.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Region_FieldIndex.MapName));
                    }
                    else
                    {
                        item.MapName = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.Grasses) ?? true))
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Grasses);
                try
                {
                    if(rhs.Grasses.TryGet(out var rhsGrasses))
                    {
                        item.Grasses = rhsGrasses.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Region_FieldIndex.Grasses));
                    }
                    else
                    {
                        item.Grasses = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Region_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)Region_FieldIndex.Sounds);
                try
                {
                    if(rhs.Sounds.TryGet(out var rhsSounds))
                    {
                        item.Sounds = rhsSounds.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Region_FieldIndex.Sounds));
                    }
                    else
                    {
                        item.Sounds = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRegionInternal)item,
                rhs: (IRegionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRegion)item,
                rhs: (IRegionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRegionInternal)item,
                rhs: (IRegionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRegion)item,
                rhs: (IRegionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Region DeepCopy(
            IRegionGetter item,
            Region.TranslationMask? copyMask = null)
        {
            Region ret = (Region)((RegionCommon)((IRegionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Region DeepCopy(
            IRegionGetter item,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? copyMask = null)
        {
            Region ret = (Region)((RegionCommon)((IRegionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Region DeepCopy(
            IRegionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Region ret = (Region)((RegionCommon)((IRegionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Region
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Region_Registration.Instance;
        public new static Region_Registration Registration => Region_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RegionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return RegionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RegionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static RegionXmlWriteTranslation Instance = new RegionXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRegionGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Icon != null)
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Region_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if ((item.MapColor != null)
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.MapColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MapColor),
                    item: item.MapColor.Value,
                    fieldIndex: (int)Region_FieldIndex.MapColor,
                    errorMask: errorMask);
            }
            if ((item.Worldspace.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Worldspace) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Worldspace),
                    item: item.Worldspace.FormKey,
                    fieldIndex: (int)Region_FieldIndex.Worldspace,
                    errorMask: errorMask);
            }
            if ((item.Areas != null)
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Areas) ?? true))
            {
                ListXmlTranslation<IRegionAreaGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Areas),
                    item: item.Areas,
                    fieldIndex: (int)Region_FieldIndex.Areas,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Areas),
                    transl: (XElement subNode, IRegionAreaGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((RegionAreaXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((item.Objects != null)
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Objects) ?? true))
            {
                if (item.Objects.TryGet(out var ObjectsItem))
                {
                    ((RegionDataObjectsXmlWriteTranslation)((IXmlItem)ObjectsItem).XmlWriteTranslator).Write(
                        item: ObjectsItem,
                        node: node,
                        name: nameof(item.Objects),
                        fieldIndex: (int)Region_FieldIndex.Objects,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Objects));
                }
            }
            if ((item.Weather != null)
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Weather) ?? true))
            {
                if (item.Weather.TryGet(out var WeatherItem))
                {
                    ((RegionDataWeatherXmlWriteTranslation)((IXmlItem)WeatherItem).XmlWriteTranslator).Write(
                        item: WeatherItem,
                        node: node,
                        name: nameof(item.Weather),
                        fieldIndex: (int)Region_FieldIndex.Weather,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Weather));
                }
            }
            if ((item.MapName != null)
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.MapName) ?? true))
            {
                if (item.MapName.TryGet(out var MapNameItem))
                {
                    ((RegionDataMapNameXmlWriteTranslation)((IXmlItem)MapNameItem).XmlWriteTranslator).Write(
                        item: MapNameItem,
                        node: node,
                        name: nameof(item.MapName),
                        fieldIndex: (int)Region_FieldIndex.MapName,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.MapName));
                }
            }
            if ((item.Grasses != null)
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Grasses) ?? true))
            {
                if (item.Grasses.TryGet(out var GrassesItem))
                {
                    ((RegionDataGrassesXmlWriteTranslation)((IXmlItem)GrassesItem).XmlWriteTranslator).Write(
                        item: GrassesItem,
                        node: node,
                        name: nameof(item.Grasses),
                        fieldIndex: (int)Region_FieldIndex.Grasses,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Grasses));
                }
            }
            if ((item.Sounds != null)
                && (translationMask?.GetShouldTranslate((int)Region_FieldIndex.Sounds) ?? true))
            {
                if (item.Sounds.TryGet(out var SoundsItem))
                {
                    ((RegionDataSoundsXmlWriteTranslation)((IXmlItem)SoundsItem).XmlWriteTranslator).Write(
                        item: SoundsItem,
                        node: node,
                        name: nameof(item.Sounds),
                        fieldIndex: (int)Region_FieldIndex.Sounds,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Sounds));
                }
            }
        }

        public void Write(
            XElement node,
            IRegionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Region");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Region");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRegionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRegionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRegionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class RegionXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static RegionXmlCreateTranslation Instance = new RegionXmlCreateTranslation();

        public static void FillPublicXml(
            IRegionInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRegionInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Icon":
                    errorMask?.PushIndex((int)Region_FieldIndex.Icon);
                    try
                    {
                        item.Icon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MapColor":
                    errorMask?.PushIndex((int)Region_FieldIndex.MapColor);
                    try
                    {
                        item.MapColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Worldspace":
                    errorMask?.PushIndex((int)Region_FieldIndex.Worldspace);
                    try
                    {
                        item.Worldspace.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Areas":
                    errorMask?.PushIndex((int)Region_FieldIndex.Areas);
                    try
                    {
                        if (ListXmlTranslation<RegionArea>.Instance.Parse(
                            node: node,
                            enumer: out var AreasItem,
                            transl: LoquiXmlTranslation<RegionArea>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Areas = AreasItem.ToExtendedList();
                        }
                        else
                        {
                            item.Areas = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Objects":
                    errorMask?.PushIndex((int)Region_FieldIndex.Objects);
                    try
                    {
                        item.Objects = LoquiXmlTranslation<RegionDataObjects>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Objects));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weather":
                    errorMask?.PushIndex((int)Region_FieldIndex.Weather);
                    try
                    {
                        item.Weather = LoquiXmlTranslation<RegionDataWeather>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Weather));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MapName":
                    errorMask?.PushIndex((int)Region_FieldIndex.MapName);
                    try
                    {
                        item.MapName = LoquiXmlTranslation<RegionDataMapName>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.MapName));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Grasses":
                    errorMask?.PushIndex((int)Region_FieldIndex.Grasses);
                    try
                    {
                        item.Grasses = LoquiXmlTranslation<RegionDataGrasses>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Grasses));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    errorMask?.PushIndex((int)Region_FieldIndex.Sounds);
                    try
                    {
                        item.Sounds = LoquiXmlTranslation<RegionDataSounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Region_FieldIndex.Sounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class RegionXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRegionGetter item,
            XElement node,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RegionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Region.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRegionGetter item,
            string path,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRegionGetter item,
            Stream stream,
            out Region.ErrorMask errorMask,
            Region.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RegionBinaryWriteTranslation Instance = new RegionBinaryWriteTranslation();

        static partial void WriteBinaryRegionAreaLogicCustom(
            MutagenWriter writer,
            IRegionGetter item,
            MasterReferences masterReferences);

        public static void WriteBinaryRegionAreaLogic(
            MutagenWriter writer,
            IRegionGetter item,
            MasterReferences masterReferences)
        {
            WriteBinaryRegionAreaLogicCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        public static void Write_RecordTypes(
            IRegionGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: recordTypeConverter.ConvertToCustom(Region_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MapColor,
                header: recordTypeConverter.ConvertToCustom(Region_Registration.RCLR_HEADER),
                extraByte: true);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Worldspace,
                header: recordTypeConverter.ConvertToCustom(Region_Registration.WNAM_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRegionAreaGetter>.Instance.Write(
                writer: writer,
                items: item.Areas,
                transl: (MutagenWriter subWriter, IRegionAreaGetter subItem) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((RegionAreaBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            masterReferences: masterReferences,
                            recordTypeConverter: null);
                    }
                });
            RegionBinaryWriteTranslation.WriteBinaryRegionAreaLogic(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            IRegionGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Region_Registration.REGN_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IRegionGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IRegionGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IRegionGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RegionBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static RegionBinaryCreateTranslation Instance = new RegionBinaryCreateTranslation();

        static partial void FillBinaryRegionAreaLogicCustom(
            MutagenFrame frame,
            IRegionInternal item,
            MasterReferences masterReferences);

        public static void FillBinaryRegionAreaLogicCustomPublic(
            MutagenFrame frame,
            IRegionInternal item,
            MasterReferences masterReferences)
        {
            FillBinaryRegionAreaLogicCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RegionBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IRegionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Region_Registration.Instance;
        public new static Region_Registration Registration => Region_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RegionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RegionSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => RegionCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => RegionXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RegionXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RegionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((RegionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Icon
        partial void IconCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);
        public String? Icon => GetIconCustom();
        #endregion
        #region MapColor
        private int? _MapColorLocation;
        public Color? MapColor => _MapColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _MapColorLocation.Value, _package.Meta).ReadColor() : default(Color?);
        #endregion
        #region Worldspace
        private int? _WorldspaceLocation;
        public bool Worldspace_IsSet => _WorldspaceLocation.HasValue;
        public IFormLinkNullableGetter<IWorldspaceGetter> Worldspace => _WorldspaceLocation.HasValue ? new FormLinkNullable<IWorldspaceGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _WorldspaceLocation.Value, _package.Meta)))) : FormLinkNullable<IWorldspaceGetter>.Empty;
        #endregion
        public IReadOnlyList<IRegionAreaGetter>? Areas { get; private set; }
        #region RegionAreaLogic
        partial void RegionAreaLogicCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RegionBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RegionBinaryOverlay RegionFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new RegionBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    IconCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Icon);
                }
                case 0x524C4352: // RCLR
                {
                    _MapColorLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.MapColor);
                }
                case 0x4D414E57: // WNAM
                {
                    _WorldspaceLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Worldspace);
                }
                case 0x494C5052: // RPLI
                case 0x444C5052: // RPLD
                {
                    this.Areas = this.ParseRepeatedTypelessSubrecord<RegionAreaBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: RegionArea_Registration.TriggeringRecordTypes,
                        factory:  RegionAreaBinaryOverlay.RegionAreaFactory);
                    return TryGet<int?>.Succeed((int)Region_FieldIndex.Areas);
                }
                case 0x54414452: // RDAT
                {
                    RegionAreaLogicCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(null);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

