/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class BodyDataPair :
        IBodyDataPair,
        ILoquiObjectSetter<BodyDataPair>,
        IEquatable<BodyDataPair>,
        IEqualsMask
    {
        #region Ctor
        public BodyDataPair()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Male
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BodyData? _Male;
        public BodyData? Male
        {
            get => _Male;
            set => _Male = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBodyDataGetter? IBodyDataPairGetter.Male => this.Male;
        #endregion
        #region Female
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BodyData? _Female;
        public BodyData? Female
        {
            get => _Female;
            set => _Female = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBodyDataGetter? IBodyDataPairGetter.Female => this.Female;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            BodyDataPairMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IBodyDataPairGetter rhs)) return false;
            return ((BodyDataPairCommon)((IBodyDataPairGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(BodyDataPair obj)
        {
            return ((BodyDataPairCommon)((IBodyDataPairGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((BodyDataPairCommon)((IBodyDataPairGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => BodyDataPairXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((BodyDataPairXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static BodyDataPair CreateFromXml(
            XElement node,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static BodyDataPair CreateFromXml(
            XElement node,
            out BodyDataPair.ErrorMask errorMask,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = BodyDataPair.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static BodyDataPair CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new BodyDataPair();
            ((BodyDataPairSetterCommon)((IBodyDataPairGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static BodyDataPair CreateFromXml(
            string path,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static BodyDataPair CreateFromXml(
            string path,
            out BodyDataPair.ErrorMask errorMask,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static BodyDataPair CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static BodyDataPair CreateFromXml(
            Stream stream,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static BodyDataPair CreateFromXml(
            Stream stream,
            out BodyDataPair.ErrorMask errorMask,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static BodyDataPair CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Male = new MaskItem<TItem, BodyData.Mask<TItem>?>(initialValue, new BodyData.Mask<TItem>(initialValue));
                this.Female = new MaskItem<TItem, BodyData.Mask<TItem>?>(initialValue, new BodyData.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Male,
                TItem Female)
            {
                this.Male = new MaskItem<TItem, BodyData.Mask<TItem>?>(Male, new BodyData.Mask<TItem>(Male));
                this.Female = new MaskItem<TItem, BodyData.Mask<TItem>?>(Female, new BodyData.Mask<TItem>(Female));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, BodyData.Mask<TItem>?>? Male { get; set; }
            public MaskItem<TItem, BodyData.Mask<TItem>?>? Female { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Male, rhs.Male)) return false;
                if (!object.Equals(this.Female, rhs.Female)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Male?.GetHashCode());
                ret = ret.CombineHashCode(this.Female?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (Male != null)
                {
                    if (!eval(this.Male.Overall)) return false;
                    if (this.Male.Specific != null && !this.Male.Specific.All(eval)) return false;
                }
                if (Female != null)
                {
                    if (!eval(this.Female.Overall)) return false;
                    if (this.Female.Specific != null && !this.Female.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (Male != null)
                {
                    if (eval(this.Male.Overall)) return true;
                    if (this.Male.Specific != null && this.Male.Specific.Any(eval)) return true;
                }
                if (Female != null)
                {
                    if (eval(this.Female.Overall)) return true;
                    if (this.Female.Specific != null && this.Female.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BodyDataPair.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Male = this.Male == null ? null : new MaskItem<R, BodyData.Mask<R>?>(eval(this.Male.Overall), this.Male.Specific?.Translate(eval));
                obj.Female = this.Female == null ? null : new MaskItem<R, BodyData.Mask<R>?>(eval(this.Female.Overall), this.Female.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(BodyDataPair.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, BodyDataPair.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(BodyDataPair.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Male?.Overall ?? true)
                    {
                        Male?.ToString(fg);
                    }
                    if (printMask?.Female?.Overall ?? true)
                    {
                        Female?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, BodyData.ErrorMask?>? Male;
            public MaskItem<Exception?, BodyData.ErrorMask?>? Female;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                BodyDataPair_FieldIndex enu = (BodyDataPair_FieldIndex)index;
                switch (enu)
                {
                    case BodyDataPair_FieldIndex.Male:
                        return Male;
                    case BodyDataPair_FieldIndex.Female:
                        return Female;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                BodyDataPair_FieldIndex enu = (BodyDataPair_FieldIndex)index;
                switch (enu)
                {
                    case BodyDataPair_FieldIndex.Male:
                        this.Male = new MaskItem<Exception?, BodyData.ErrorMask?>(ex, null);
                        break;
                    case BodyDataPair_FieldIndex.Female:
                        this.Female = new MaskItem<Exception?, BodyData.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                BodyDataPair_FieldIndex enu = (BodyDataPair_FieldIndex)index;
                switch (enu)
                {
                    case BodyDataPair_FieldIndex.Male:
                        this.Male = (MaskItem<Exception?, BodyData.ErrorMask?>?)obj;
                        break;
                    case BodyDataPair_FieldIndex.Female:
                        this.Female = (MaskItem<Exception?, BodyData.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Male != null) return true;
                if (Female != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                Male?.ToString(fg);
                Female?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Male = this.Male.Combine(rhs.Male, (l, r) => l.Combine(r));
                ret.Female = this.Female.Combine(rhs.Female, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public MaskItem<bool, BodyData.TranslationMask?> Male;
            public MaskItem<bool, BodyData.TranslationMask?> Female;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Male = new MaskItem<bool, BodyData.TranslationMask?>(defaultOn, null);
                this.Female = new MaskItem<bool, BodyData.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Male?.Overall ?? true, Male?.Specific?.GetCrystal()));
                ret.Add((Female?.Overall ?? true, Female?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => BodyDataPairCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BodyDataPairBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((BodyDataPairBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static BodyDataPair CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static BodyDataPair CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new BodyDataPair();
            ((BodyDataPairSetterCommon)((IBodyDataPairGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBodyDataPairGetter)rhs, include);

        void IClearable.Clear()
        {
            ((BodyDataPairSetterCommon)((IBodyDataPairGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BodyDataPair GetNew()
        {
            return new BodyDataPair();
        }

    }
    #endregion

    #region Interface
    public partial interface IBodyDataPair :
        IBodyDataPairGetter,
        ILoquiObjectSetter<IBodyDataPair>
    {
        new BodyData? Male { get; set; }
        new BodyData? Female { get; set; }
    }

    public partial interface IBodyDataPairGetter :
        ILoquiObject,
        ILoquiObject<IBodyDataPairGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        IBodyDataGetter? Male { get; }
        IBodyDataGetter? Female { get; }

    }

    #endregion

    #region Common MixIn
    public static class BodyDataPairMixIn
    {
        public static void Clear(this IBodyDataPair item)
        {
            ((BodyDataPairSetterCommon)((IBodyDataPairGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BodyDataPair.Mask<bool> GetEqualsMask(
            this IBodyDataPairGetter item,
            IBodyDataPairGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BodyDataPairCommon)((IBodyDataPairGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IBodyDataPairGetter item,
            string? name = null,
            BodyDataPair.Mask<bool>? printMask = null)
        {
            return ((BodyDataPairCommon)((IBodyDataPairGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IBodyDataPairGetter item,
            FileGeneration fg,
            string? name = null,
            BodyDataPair.Mask<bool>? printMask = null)
        {
            ((BodyDataPairCommon)((IBodyDataPairGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IBodyDataPairGetter item,
            BodyDataPair.Mask<bool?> checkMask)
        {
            return ((BodyDataPairCommon)((IBodyDataPairGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static BodyDataPair.Mask<bool> GetHasBeenSetMask(this IBodyDataPairGetter item)
        {
            var ret = new BodyDataPair.Mask<bool>(false);
            ((BodyDataPairCommon)((IBodyDataPairGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IBodyDataPairGetter item,
            IBodyDataPairGetter rhs)
        {
            return ((BodyDataPairCommon)((IBodyDataPairGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IBodyDataPair lhs,
            IBodyDataPairGetter rhs,
            BodyDataPair.TranslationMask? copyMask = null)
        {
            ((BodyDataPairSetterTranslationCommon)((IBodyDataPairGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IBodyDataPair lhs,
            IBodyDataPairGetter rhs,
            out BodyDataPair.ErrorMask errorMask,
            BodyDataPair.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BodyDataPairSetterTranslationCommon)((IBodyDataPairGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = BodyDataPair.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBodyDataPair lhs,
            IBodyDataPairGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BodyDataPairSetterTranslationCommon)((IBodyDataPairGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static BodyDataPair DeepCopy(
            this IBodyDataPairGetter item,
            BodyDataPair.TranslationMask? copyMask = null)
        {
            return ((BodyDataPairSetterTranslationCommon)((IBodyDataPairGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BodyDataPair DeepCopy(
            this IBodyDataPairGetter item,
            out BodyDataPair.ErrorMask errorMask,
            BodyDataPair.TranslationMask? copyMask = null)
        {
            return ((BodyDataPairSetterTranslationCommon)((IBodyDataPairGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BodyDataPair DeepCopy(
            this IBodyDataPairGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BodyDataPairSetterTranslationCommon)((IBodyDataPairGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IBodyDataPair item,
            XElement node,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IBodyDataPair item,
            XElement node,
            out BodyDataPair.ErrorMask errorMask,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = BodyDataPair.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IBodyDataPair item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((BodyDataPairSetterCommon)((IBodyDataPairGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyDataPair item,
            string path,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyDataPair item,
            string path,
            out BodyDataPair.ErrorMask errorMask,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyDataPair item,
            string path,
            ErrorMaskBuilder? errorMask,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IBodyDataPair item,
            Stream stream,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyDataPair item,
            Stream stream,
            out BodyDataPair.ErrorMask errorMask,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyDataPair item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IBodyDataPair item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IBodyDataPair item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((BodyDataPairSetterCommon)((IBodyDataPairGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum BodyDataPair_FieldIndex
    {
        Male = 0,
        Female = 1,
    }
    #endregion

    #region Registration
    public partial class BodyDataPair_Registration : ILoquiRegistration
    {
        public static readonly BodyDataPair_Registration Instance = new BodyDataPair_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 59,
            version: 0);

        public const string GUID = "046e44ba-578b-4c1a-8073-2ba3fe0772ea";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(BodyDataPair.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BodyDataPair.ErrorMask);

        public static readonly Type ClassType = typeof(BodyDataPair);

        public static readonly Type GetterType = typeof(IBodyDataPairGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBodyDataPair);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.BodyDataPair";

        public const string Name = "BodyDataPair";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MALE":
                    return (ushort)BodyDataPair_FieldIndex.Male;
                case "FEMALE":
                    return (ushort)BodyDataPair_FieldIndex.Female;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            BodyDataPair_FieldIndex enu = (BodyDataPair_FieldIndex)index;
            switch (enu)
            {
                case BodyDataPair_FieldIndex.Male:
                case BodyDataPair_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            BodyDataPair_FieldIndex enu = (BodyDataPair_FieldIndex)index;
            switch (enu)
            {
                case BodyDataPair_FieldIndex.Male:
                case BodyDataPair_FieldIndex.Female:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            BodyDataPair_FieldIndex enu = (BodyDataPair_FieldIndex)index;
            switch (enu)
            {
                case BodyDataPair_FieldIndex.Male:
                case BodyDataPair_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            BodyDataPair_FieldIndex enu = (BodyDataPair_FieldIndex)index;
            switch (enu)
            {
                case BodyDataPair_FieldIndex.Male:
                    return "Male";
                case BodyDataPair_FieldIndex.Female:
                    return "Female";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            BodyDataPair_FieldIndex enu = (BodyDataPair_FieldIndex)index;
            switch (enu)
            {
                case BodyDataPair_FieldIndex.Male:
                case BodyDataPair_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            BodyDataPair_FieldIndex enu = (BodyDataPair_FieldIndex)index;
            switch (enu)
            {
                case BodyDataPair_FieldIndex.Male:
                case BodyDataPair_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            BodyDataPair_FieldIndex enu = (BodyDataPair_FieldIndex)index;
            switch (enu)
            {
                case BodyDataPair_FieldIndex.Male:
                    return typeof(BodyData);
                case BodyDataPair_FieldIndex.Female:
                    return typeof(BodyData);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(BodyDataPairXmlWriteTranslation);
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        MNAM_HEADER,
                        FNAM_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(BodyDataPairBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class BodyDataPairSetterCommon
    {
        public static readonly BodyDataPairSetterCommon Instance = new BodyDataPairSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBodyDataPair item)
        {
            ClearPartial();
            item.Male = null;
            item.Female = null;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IBodyDataPair item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    BodyDataPairXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IBodyDataPair item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IBodyDataPair item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E4D: // MNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)BodyDataPair_FieldIndex.Male) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.Male = Mutagen.Bethesda.Skyrim.BodyData.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)BodyDataPair_FieldIndex.Male);
                }
                case 0x4D414E46: // FNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)BodyDataPair_FieldIndex.Female) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.Female = Mutagen.Bethesda.Skyrim.BodyData.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)BodyDataPair_FieldIndex.Female);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IBodyDataPair item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class BodyDataPairCommon
    {
        public static readonly BodyDataPairCommon Instance = new BodyDataPairCommon();

        public BodyDataPair.Mask<bool> GetEqualsMask(
            IBodyDataPairGetter item,
            IBodyDataPairGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BodyDataPair.Mask<bool>(false);
            ((BodyDataPairCommon)((IBodyDataPairGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBodyDataPairGetter item,
            IBodyDataPairGetter rhs,
            BodyDataPair.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Male = EqualsMaskHelper.EqualsHelper(
                item.Male,
                rhs.Male,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Female = EqualsMaskHelper.EqualsHelper(
                item.Female,
                rhs.Female,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IBodyDataPairGetter item,
            string? name = null,
            BodyDataPair.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IBodyDataPairGetter item,
            FileGeneration fg,
            string? name = null,
            BodyDataPair.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"BodyDataPair =>");
            }
            else
            {
                fg.AppendLine($"{name} (BodyDataPair) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IBodyDataPairGetter item,
            FileGeneration fg,
            BodyDataPair.Mask<bool>? printMask = null)
        {
            if ((printMask?.Male?.Overall ?? true)
                && item.Male.TryGet(out var MaleItem))
            {
                MaleItem?.ToString(fg, "Male");
            }
            if ((printMask?.Female?.Overall ?? true)
                && item.Female.TryGet(out var FemaleItem))
            {
                FemaleItem?.ToString(fg, "Female");
            }
        }
        
        public bool HasBeenSet(
            IBodyDataPairGetter item,
            BodyDataPair.Mask<bool?> checkMask)
        {
            if (checkMask.Male?.Overall.HasValue ?? false && checkMask.Male.Overall.Value != (item.Male != null)) return false;
            if (checkMask.Male?.Specific != null && (item.Male == null || !item.Male.HasBeenSet(checkMask.Male.Specific))) return false;
            if (checkMask.Female?.Overall.HasValue ?? false && checkMask.Female.Overall.Value != (item.Female != null)) return false;
            if (checkMask.Female?.Specific != null && (item.Female == null || !item.Female.HasBeenSet(checkMask.Female.Specific))) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IBodyDataPairGetter item,
            BodyDataPair.Mask<bool> mask)
        {
            var itemMale = item.Male;
            mask.Male = new MaskItem<bool, BodyData.Mask<bool>?>(itemMale != null, itemMale?.GetHasBeenSetMask());
            var itemFemale = item.Female;
            mask.Female = new MaskItem<bool, BodyData.Mask<bool>?>(itemFemale != null, itemFemale?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBodyDataPairGetter? lhs,
            IBodyDataPairGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.Male, rhs.Male)) return false;
            if (!object.Equals(lhs.Female, rhs.Female)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IBodyDataPairGetter item)
        {
            int ret = 0;
            if (item.Male.TryGet(out var Maleitem))
            {
                ret = HashHelper.GetHashCode(Maleitem).CombineHashCode(ret);
            }
            if (item.Female.TryGet(out var Femaleitem))
            {
                ret = HashHelper.GetHashCode(Femaleitem).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return BodyDataPair.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IBodyDataPairGetter obj)
        {
            if (obj.Male != null)
            {
                foreach (var item in obj.Male.Links)
                {
                    yield return item;
                }
            }
            if (obj.Female != null)
            {
                foreach (var item in obj.Female.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class BodyDataPairSetterTranslationCommon
    {
        public static readonly BodyDataPairSetterTranslationCommon Instance = new BodyDataPairSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IBodyDataPair item,
            IBodyDataPairGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)BodyDataPair_FieldIndex.Male) ?? true))
            {
                errorMask?.PushIndex((int)BodyDataPair_FieldIndex.Male);
                try
                {
                    if(rhs.Male.TryGet(out var rhsMale))
                    {
                        item.Male = rhsMale.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)BodyDataPair_FieldIndex.Male));
                    }
                    else
                    {
                        item.Male = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BodyDataPair_FieldIndex.Female) ?? true))
            {
                errorMask?.PushIndex((int)BodyDataPair_FieldIndex.Female);
                try
                {
                    if(rhs.Female.TryGet(out var rhsFemale))
                    {
                        item.Female = rhsFemale.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)BodyDataPair_FieldIndex.Female));
                    }
                    else
                    {
                        item.Female = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public BodyDataPair DeepCopy(
            IBodyDataPairGetter item,
            BodyDataPair.TranslationMask? copyMask = null)
        {
            BodyDataPair ret = (BodyDataPair)((BodyDataPairCommon)((IBodyDataPairGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public BodyDataPair DeepCopy(
            IBodyDataPairGetter item,
            out BodyDataPair.ErrorMask errorMask,
            BodyDataPair.TranslationMask? copyMask = null)
        {
            BodyDataPair ret = (BodyDataPair)((BodyDataPairCommon)((IBodyDataPairGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public BodyDataPair DeepCopy(
            IBodyDataPairGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BodyDataPair ret = (BodyDataPair)((BodyDataPairCommon)((IBodyDataPairGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class BodyDataPair
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BodyDataPair_Registration.Instance;
        public static BodyDataPair_Registration Registration => BodyDataPair_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BodyDataPairCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BodyDataPairSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BodyDataPairSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBodyDataPairGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBodyDataPairGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBodyDataPairGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class BodyDataPairXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static BodyDataPairXmlWriteTranslation Instance = new BodyDataPairXmlWriteTranslation();

        public static void WriteToNodeXml(
            IBodyDataPairGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((item.Male != null)
                && (translationMask?.GetShouldTranslate((int)BodyDataPair_FieldIndex.Male) ?? true))
            {
                if (item.Male.TryGet(out var MaleItem))
                {
                    ((BodyDataXmlWriteTranslation)((IXmlItem)MaleItem).XmlWriteTranslator).Write(
                        item: MaleItem,
                        node: node,
                        name: nameof(item.Male),
                        fieldIndex: (int)BodyDataPair_FieldIndex.Male,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)BodyDataPair_FieldIndex.Male));
                }
            }
            if ((item.Female != null)
                && (translationMask?.GetShouldTranslate((int)BodyDataPair_FieldIndex.Female) ?? true))
            {
                if (item.Female.TryGet(out var FemaleItem))
                {
                    ((BodyDataXmlWriteTranslation)((IXmlItem)FemaleItem).XmlWriteTranslator).Write(
                        item: FemaleItem,
                        node: node,
                        name: nameof(item.Female),
                        fieldIndex: (int)BodyDataPair_FieldIndex.Female,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)BodyDataPair_FieldIndex.Female));
                }
            }
        }

        public void Write(
            XElement node,
            IBodyDataPairGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.BodyDataPair");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.BodyDataPair");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IBodyDataPairGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IBodyDataPairGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IBodyDataPairGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class BodyDataPairXmlCreateTranslation
    {
        public readonly static BodyDataPairXmlCreateTranslation Instance = new BodyDataPairXmlCreateTranslation();

        public static void FillPublicXml(
            IBodyDataPair item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    BodyDataPairXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IBodyDataPair item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Male":
                    errorMask?.PushIndex((int)BodyDataPair_FieldIndex.Male);
                    try
                    {
                        item.Male = LoquiXmlTranslation<BodyData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)BodyDataPair_FieldIndex.Male));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Female":
                    errorMask?.PushIndex((int)BodyDataPair_FieldIndex.Female);
                    try
                    {
                        item.Female = LoquiXmlTranslation<BodyData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)BodyDataPair_FieldIndex.Female));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class BodyDataPairXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IBodyDataPairGetter item,
            XElement node,
            out BodyDataPair.ErrorMask errorMask,
            BodyDataPair.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((BodyDataPairXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = BodyDataPair.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IBodyDataPairGetter item,
            string path,
            out BodyDataPair.ErrorMask errorMask,
            BodyDataPair.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBodyDataPairGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBodyDataPairGetter item,
            Stream stream,
            out BodyDataPair.ErrorMask errorMask,
            BodyDataPair.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IBodyDataPairGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IBodyDataPairGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((BodyDataPairXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IBodyDataPairGetter item,
            XElement node,
            string? name = null,
            BodyDataPair.TranslationMask? translationMask = null)
        {
            ((BodyDataPairXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IBodyDataPairGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((BodyDataPairXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBodyDataPairGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((BodyDataPairXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class BodyDataPairBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static BodyDataPairBinaryWriteTranslation Instance = new BodyDataPairBinaryWriteTranslation();

        public static void Write_RecordTypes(
            IBodyDataPairGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            if (item.Male.TryGet(out var MaleItem))
            {
                using (HeaderExport.ExportHeader(writer, BodyDataPair_Registration.MNAM_HEADER, ObjectType.Subrecord)) { }
                ((BodyDataBinaryWriteTranslation)((IBinaryItem)MaleItem).BinaryWriteTranslator).Write(
                    item: MaleItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (item.Female.TryGet(out var FemaleItem))
            {
                using (HeaderExport.ExportHeader(writer, BodyDataPair_Registration.FNAM_HEADER, ObjectType.Subrecord)) { }
                ((BodyDataBinaryWriteTranslation)((IBinaryItem)FemaleItem).BinaryWriteTranslator).Write(
                    item: FemaleItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
        }

        public void Write(
            MutagenWriter writer,
            IBodyDataPairGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IBodyDataPairGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class BodyDataPairBinaryCreateTranslation
    {
        public readonly static BodyDataPairBinaryCreateTranslation Instance = new BodyDataPairBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class BodyDataPairBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBodyDataPairGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((BodyDataPairBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class BodyDataPairBinaryOverlay :
        BinaryOverlay,
        IBodyDataPairGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BodyDataPair_Registration.Instance;
        public static BodyDataPair_Registration Registration => BodyDataPair_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BodyDataPairCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BodyDataPairSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBodyDataPairGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBodyDataPairGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBodyDataPairGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBodyDataPairGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => BodyDataPairCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => BodyDataPairXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((BodyDataPairXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BodyDataPairBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((BodyDataPairBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Male
        public IBodyDataGetter? Male { get; private set; }
        public bool Male_IsSet => Male != null;
        #endregion
        #region Female
        public IBodyDataGetter? Female { get; private set; }
        public bool Female_IsSet => Female != null;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected BodyDataPairBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static BodyDataPairBinaryOverlay BodyDataPairFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new BodyDataPairBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4D414E4D: // MNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)BodyDataPair_FieldIndex.Male) return TryGet<int?>.Failure;
                    stream.Position += _package.Meta.SubConstants.HeaderLength; // Skip marker
                    this.Male = BodyDataBinaryOverlay.BodyDataFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)BodyDataPair_FieldIndex.Male);
                }
                case 0x4D414E46: // FNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)BodyDataPair_FieldIndex.Female) return TryGet<int?>.Failure;
                    stream.Position += _package.Meta.SubConstants.HeaderLength; // Skip marker
                    this.Female = BodyDataBinaryOverlay.BodyDataFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)BodyDataPair_FieldIndex.Female);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

