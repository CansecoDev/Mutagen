/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class BodyData :
        IBodyData,
        ILoquiObjectSetter<BodyData>,
        IEquatable<BodyData>,
        IEqualsMask
    {
        #region Ctor
        public BodyData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Index
        public BodyData.PartIndex Index { get; set; } = default;
        #endregion
        #region Part
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Part;
        public Model? Part
        {
            get => _Part;
            set => _Part = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IBodyDataGetter.Part => this.Part;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            BodyDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IBodyDataGetter rhs)) return false;
            return ((BodyDataCommon)((IBodyDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(BodyData obj)
        {
            return ((BodyDataCommon)((IBodyDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((BodyDataCommon)((IBodyDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => BodyDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((BodyDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static BodyData CreateFromXml(
            XElement node,
            BodyData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static BodyData CreateFromXml(
            XElement node,
            out BodyData.ErrorMask errorMask,
            BodyData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = BodyData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static BodyData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new BodyData();
            ((BodyDataSetterCommon)((IBodyDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static BodyData CreateFromXml(
            string path,
            BodyData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static BodyData CreateFromXml(
            string path,
            out BodyData.ErrorMask errorMask,
            BodyData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static BodyData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            BodyData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static BodyData CreateFromXml(
            Stream stream,
            BodyData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static BodyData CreateFromXml(
            Stream stream,
            out BodyData.ErrorMask errorMask,
            BodyData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static BodyData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            BodyData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Index = initialValue;
                this.Part = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Index,
                TItem Part)
            {
                this.Index = Index;
                this.Part = new MaskItem<TItem, Model.Mask<TItem>?>(Part, new Model.Mask<TItem>(Part));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Index;
            public MaskItem<TItem, Model.Mask<TItem>?>? Part { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.Part, rhs.Part)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Index?.GetHashCode());
                ret = ret.CombineHashCode(this.Part?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Index)) return false;
                if (Part != null)
                {
                    if (!eval(this.Part.Overall)) return false;
                    if (this.Part.Specific != null && !this.Part.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Index)) return true;
                if (Part != null)
                {
                    if (eval(this.Part.Overall)) return true;
                    if (this.Part.Specific != null && this.Part.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BodyData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Index = eval(this.Index);
                obj.Part = this.Part == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Part.Overall), this.Part.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(BodyData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, BodyData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(BodyData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Index ?? true)
                    {
                        fg.AppendItem(Index, "Index");
                    }
                    if (printMask?.Part?.Overall ?? true)
                    {
                        Part?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Index;
            public MaskItem<Exception?, Model.ErrorMask?>? Part;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
                switch (enu)
                {
                    case BodyData_FieldIndex.Index:
                        return Index;
                    case BodyData_FieldIndex.Part:
                        return Part;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
                switch (enu)
                {
                    case BodyData_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case BodyData_FieldIndex.Part:
                        this.Part = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
                switch (enu)
                {
                    case BodyData_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case BodyData_FieldIndex.Part:
                        this.Part = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Index != null) return true;
                if (Part != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Index, "Index");
                Part?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Index = this.Index.Combine(rhs.Index);
                ret.Part = this.Part.Combine(rhs.Part, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Index;
            public MaskItem<bool, Model.TranslationMask?> Part;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Index = defaultOn;
                this.Part = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Index, null));
                ret.Add((Part?.Overall ?? true, Part?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => BodyDataCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BodyDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((BodyDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static BodyData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static BodyData CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new BodyData();
            ((BodyDataSetterCommon)((IBodyDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBodyDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((BodyDataSetterCommon)((IBodyDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BodyData GetNew()
        {
            return new BodyData();
        }

    }
    #endregion

    #region Interface
    public partial interface IBodyData :
        IBodyDataGetter,
        ILoquiObjectSetter<IBodyData>
    {
        new BodyData.PartIndex Index { get; set; }
        new Model? Part { get; set; }
    }

    public partial interface IBodyDataGetter :
        ILoquiObject,
        ILoquiObject<IBodyDataGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        BodyData.PartIndex Index { get; }
        IModelGetter? Part { get; }

    }

    #endregion

    #region Common MixIn
    public static class BodyDataMixIn
    {
        public static void Clear(this IBodyData item)
        {
            ((BodyDataSetterCommon)((IBodyDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BodyData.Mask<bool> GetEqualsMask(
            this IBodyDataGetter item,
            IBodyDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IBodyDataGetter item,
            string? name = null,
            BodyData.Mask<bool>? printMask = null)
        {
            return ((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IBodyDataGetter item,
            FileGeneration fg,
            string? name = null,
            BodyData.Mask<bool>? printMask = null)
        {
            ((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IBodyDataGetter item,
            BodyData.Mask<bool?> checkMask)
        {
            return ((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static BodyData.Mask<bool> GetHasBeenSetMask(this IBodyDataGetter item)
        {
            var ret = new BodyData.Mask<bool>(false);
            ((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IBodyDataGetter item,
            IBodyDataGetter rhs)
        {
            return ((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IBodyData lhs,
            IBodyDataGetter rhs,
            BodyData.TranslationMask? copyMask = null)
        {
            ((BodyDataSetterTranslationCommon)((IBodyDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IBodyData lhs,
            IBodyDataGetter rhs,
            out BodyData.ErrorMask errorMask,
            BodyData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BodyDataSetterTranslationCommon)((IBodyDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = BodyData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBodyData lhs,
            IBodyDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BodyDataSetterTranslationCommon)((IBodyDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static BodyData DeepCopy(
            this IBodyDataGetter item,
            BodyData.TranslationMask? copyMask = null)
        {
            return ((BodyDataSetterTranslationCommon)((IBodyDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BodyData DeepCopy(
            this IBodyDataGetter item,
            out BodyData.ErrorMask errorMask,
            BodyData.TranslationMask? copyMask = null)
        {
            return ((BodyDataSetterTranslationCommon)((IBodyDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BodyData DeepCopy(
            this IBodyDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BodyDataSetterTranslationCommon)((IBodyDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IBodyData item,
            XElement node,
            BodyData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IBodyData item,
            XElement node,
            out BodyData.ErrorMask errorMask,
            BodyData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = BodyData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IBodyData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((BodyDataSetterCommon)((IBodyDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyData item,
            string path,
            BodyData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyData item,
            string path,
            out BodyData.ErrorMask errorMask,
            BodyData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyData item,
            string path,
            ErrorMaskBuilder? errorMask,
            BodyData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IBodyData item,
            Stream stream,
            BodyData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyData item,
            Stream stream,
            out BodyData.ErrorMask errorMask,
            BodyData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            BodyData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IBodyData item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IBodyData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((BodyDataSetterCommon)((IBodyDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum BodyData_FieldIndex
    {
        Index = 0,
        Part = 1,
    }
    #endregion

    #region Registration
    public partial class BodyData_Registration : ILoquiRegistration
    {
        public static readonly BodyData_Registration Instance = new BodyData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 60,
            version: 0);

        public const string GUID = "baeb0edf-c312-4f2b-9a87-b0bc6542773b";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(BodyData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BodyData.ErrorMask);

        public static readonly Type ClassType = typeof(BodyData);

        public static readonly Type GetterType = typeof(IBodyDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBodyData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.BodyData";

        public const string Name = "BodyData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "INDEX":
                    return (ushort)BodyData_FieldIndex.Index;
                case "PART":
                    return (ushort)BodyData_FieldIndex.Part;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Index:
                case BodyData_FieldIndex.Part:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Part:
                    return true;
                case BodyData_FieldIndex.Index:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Index:
                case BodyData_FieldIndex.Part:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Index:
                    return "Index";
                case BodyData_FieldIndex.Part:
                    return "Part";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Index:
                case BodyData_FieldIndex.Part:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Index:
                case BodyData_FieldIndex.Part:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            BodyData_FieldIndex enu = (BodyData_FieldIndex)index;
            switch (enu)
            {
                case BodyData_FieldIndex.Index:
                    return typeof(BodyData.PartIndex);
                case BodyData_FieldIndex.Part:
                    return typeof(Model);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(BodyDataXmlWriteTranslation);
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public const int NumStructFields = 1;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(BodyDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class BodyDataSetterCommon
    {
        public static readonly BodyDataSetterCommon Instance = new BodyDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBodyData item)
        {
            ClearPartial();
            item.Index = default;
            item.Part = null;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IBodyData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    BodyDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IBodyData item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            item.Index = EnumBinaryTranslation<BodyData.PartIndex>.Instance.Parse(frame: frame.SpawnWithLength(4));
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IBodyData item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    item.Part = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)BodyData_FieldIndex.Part);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IBodyData item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class BodyDataCommon
    {
        public static readonly BodyDataCommon Instance = new BodyDataCommon();

        public BodyData.Mask<bool> GetEqualsMask(
            IBodyDataGetter item,
            IBodyDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BodyData.Mask<bool>(false);
            ((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBodyDataGetter item,
            IBodyDataGetter rhs,
            BodyData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Index = item.Index == rhs.Index;
            ret.Part = EqualsMaskHelper.EqualsHelper(
                item.Part,
                rhs.Part,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IBodyDataGetter item,
            string? name = null,
            BodyData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IBodyDataGetter item,
            FileGeneration fg,
            string? name = null,
            BodyData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"BodyData =>");
            }
            else
            {
                fg.AppendLine($"{name} (BodyData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IBodyDataGetter item,
            FileGeneration fg,
            BodyData.Mask<bool>? printMask = null)
        {
            if (printMask?.Index ?? true)
            {
                fg.AppendItem(item.Index, "Index");
            }
            if ((printMask?.Part?.Overall ?? true)
                && item.Part.TryGet(out var PartItem))
            {
                PartItem?.ToString(fg, "Part");
            }
        }
        
        public bool HasBeenSet(
            IBodyDataGetter item,
            BodyData.Mask<bool?> checkMask)
        {
            if (checkMask.Part?.Overall.HasValue ?? false && checkMask.Part.Overall.Value != (item.Part != null)) return false;
            if (checkMask.Part?.Specific != null && (item.Part == null || !item.Part.HasBeenSet(checkMask.Part.Specific))) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IBodyDataGetter item,
            BodyData.Mask<bool> mask)
        {
            mask.Index = true;
            var itemPart = item.Part;
            mask.Part = new MaskItem<bool, Model.Mask<bool>?>(itemPart != null, itemPart?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBodyDataGetter? lhs,
            IBodyDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Index != rhs.Index) return false;
            if (!object.Equals(lhs.Part, rhs.Part)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IBodyDataGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Index).CombineHashCode(ret);
            if (item.Part.TryGet(out var Partitem))
            {
                ret = HashHelper.GetHashCode(Partitem).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return BodyData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IBodyDataGetter obj)
        {
            if (obj.Part != null)
            {
                foreach (var item in obj.Part.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class BodyDataSetterTranslationCommon
    {
        public static readonly BodyDataSetterTranslationCommon Instance = new BodyDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IBodyData item,
            IBodyDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)BodyData_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyData_FieldIndex.Part) ?? true))
            {
                errorMask?.PushIndex((int)BodyData_FieldIndex.Part);
                try
                {
                    if(rhs.Part.TryGet(out var rhsPart))
                    {
                        item.Part = rhsPart.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)BodyData_FieldIndex.Part));
                    }
                    else
                    {
                        item.Part = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public BodyData DeepCopy(
            IBodyDataGetter item,
            BodyData.TranslationMask? copyMask = null)
        {
            BodyData ret = (BodyData)((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public BodyData DeepCopy(
            IBodyDataGetter item,
            out BodyData.ErrorMask errorMask,
            BodyData.TranslationMask? copyMask = null)
        {
            BodyData ret = (BodyData)((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public BodyData DeepCopy(
            IBodyDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BodyData ret = (BodyData)((BodyDataCommon)((IBodyDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class BodyData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BodyData_Registration.Instance;
        public static BodyData_Registration Registration => BodyData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BodyDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BodyDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BodyDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBodyDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBodyDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBodyDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class BodyDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static BodyDataXmlWriteTranslation Instance = new BodyDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IBodyDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)BodyData_FieldIndex.Index) ?? true))
            {
                EnumXmlTranslation<BodyData.PartIndex>.Instance.Write(
                    node: node,
                    name: nameof(item.Index),
                    item: item.Index,
                    fieldIndex: (int)BodyData_FieldIndex.Index,
                    errorMask: errorMask);
            }
            if ((item.Part != null)
                && (translationMask?.GetShouldTranslate((int)BodyData_FieldIndex.Part) ?? true))
            {
                if (item.Part.TryGet(out var PartItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)PartItem).XmlWriteTranslator).Write(
                        item: PartItem,
                        node: node,
                        name: nameof(item.Part),
                        fieldIndex: (int)BodyData_FieldIndex.Part,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)BodyData_FieldIndex.Part));
                }
            }
        }

        public void Write(
            XElement node,
            IBodyDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.BodyData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.BodyData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IBodyDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IBodyDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IBodyDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class BodyDataXmlCreateTranslation
    {
        public readonly static BodyDataXmlCreateTranslation Instance = new BodyDataXmlCreateTranslation();

        public static void FillPublicXml(
            IBodyData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    BodyDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IBodyData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Index":
                    errorMask?.PushIndex((int)BodyData_FieldIndex.Index);
                    try
                    {
                        item.Index = EnumXmlTranslation<BodyData.PartIndex>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Part":
                    errorMask?.PushIndex((int)BodyData_FieldIndex.Part);
                    try
                    {
                        item.Part = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)BodyData_FieldIndex.Part));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class BodyDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IBodyDataGetter item,
            XElement node,
            out BodyData.ErrorMask errorMask,
            BodyData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((BodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = BodyData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            string path,
            out BodyData.ErrorMask errorMask,
            BodyData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            Stream stream,
            out BodyData.ErrorMask errorMask,
            BodyData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((BodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            XElement node,
            string? name = null,
            BodyData.TranslationMask? translationMask = null)
        {
            ((BodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((BodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBodyDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((BodyDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class BodyDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static BodyDataBinaryWriteTranslation Instance = new BodyDataBinaryWriteTranslation();

        public static void Write_Embedded(
            IBodyDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<BodyData.PartIndex>.Instance.Write(
                writer,
                item.Index,
                length: 4);
        }

        public static void Write_RecordTypes(
            IBodyDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            if (item.Part.TryGet(out var PartItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)PartItem).BinaryWriteTranslator).Write(
                    item: PartItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
        }

        public void Write(
            MutagenWriter writer,
            IBodyDataGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
            Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IBodyDataGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class BodyDataBinaryCreateTranslation
    {
        public readonly static BodyDataBinaryCreateTranslation Instance = new BodyDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class BodyDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBodyDataGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            ((BodyDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class BodyDataBinaryOverlay :
        BinaryOverlay,
        IBodyDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BodyData_Registration.Instance;
        public static BodyData_Registration Registration => BodyData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BodyDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BodyDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBodyDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBodyDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBodyDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBodyDataGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => BodyDataCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => BodyDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((BodyDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BodyDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((BodyDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public BodyData.PartIndex Index => (BodyData.PartIndex)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0, 4));
        #region Part
        public IModelGetter? Part { get; private set; }
        public bool Part_IsSet => Part != null;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected BodyDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static BodyDataBinaryOverlay BodyDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new BodyDataBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    this.Part = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)BodyData_FieldIndex.Part);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

