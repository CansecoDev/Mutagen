/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class LocationReferenceType :
        SkyrimMajorRecord,
        ILocationReferenceTypeInternal,
        ILoquiObjectSetter<LocationReferenceType>,
        IEquatable<LocationReferenceType>,
        IEqualsMask
    {
        #region Ctor
        protected LocationReferenceType()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Color
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Color? _Color;
        public Color? Color
        {
            get => this._Color;
            set => this._Color = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? ILocationReferenceTypeGetter.Color => this.Color;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LocationReferenceTypeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILocationReferenceTypeGetter rhs)) return false;
            return ((LocationReferenceTypeCommon)((ILocationReferenceTypeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(LocationReferenceType obj)
        {
            return ((LocationReferenceTypeCommon)((ILocationReferenceTypeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LocationReferenceTypeCommon)((ILocationReferenceTypeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => LocationReferenceTypeXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LocationReferenceTypeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new LocationReferenceType CreateFromXml(
            XElement node,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LocationReferenceType CreateFromXml(
            XElement node,
            out LocationReferenceType.ErrorMask errorMask,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LocationReferenceType.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static LocationReferenceType CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new LocationReferenceType();
            ((LocationReferenceTypeSetterCommon)((ILocationReferenceTypeGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static LocationReferenceType CreateFromXml(
            string path,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LocationReferenceType CreateFromXml(
            string path,
            out LocationReferenceType.ErrorMask errorMask,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LocationReferenceType CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LocationReferenceType CreateFromXml(
            Stream stream,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LocationReferenceType CreateFromXml(
            Stream stream,
            out LocationReferenceType.ErrorMask errorMask,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LocationReferenceType CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            SkyrimMajorRecord.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.Color = initialValue;
            }

            public Mask(
                T MajorRecordFlagsRaw,
                T FormKey,
                T Version,
                T EditorID,
                T SkyrimMajorRecordFlags,
                T FormVersion,
                T Version2,
                T Color)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Color = Color;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T Color;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Color?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<T, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Color)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<T, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Color)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new LocationReferenceType.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Color = eval(this.Color);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LocationReferenceType.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LocationReferenceType.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LocationReferenceType.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Color ?? true)
                    {
                        fg.AppendItem(Color, "Color");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Color;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                LocationReferenceType_FieldIndex enu = (LocationReferenceType_FieldIndex)index;
                switch (enu)
                {
                    case LocationReferenceType_FieldIndex.Color:
                        return Color;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                LocationReferenceType_FieldIndex enu = (LocationReferenceType_FieldIndex)index;
                switch (enu)
                {
                    case LocationReferenceType_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                LocationReferenceType_FieldIndex enu = (LocationReferenceType_FieldIndex)index;
                switch (enu)
                {
                    case LocationReferenceType_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Color != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Color, "Color");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Color = this.Color.Combine(rhs.Color);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Color;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Color = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Color, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LocationReferenceType_Registration.TRIGGERING_RECORD_TYPE;
        public LocationReferenceType(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public LocationReferenceType(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LocationReferenceTypeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((LocationReferenceTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new LocationReferenceType CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static LocationReferenceType CreateFromBinary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new LocationReferenceType();
            ((LocationReferenceTypeSetterCommon)((ILocationReferenceTypeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILocationReferenceTypeGetter)rhs, include);

        void IClearable.Clear()
        {
            ((LocationReferenceTypeSetterCommon)((ILocationReferenceTypeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new LocationReferenceType GetNew()
        {
            return new LocationReferenceType();
        }

    }
    #endregion

    #region Interface
    public partial interface ILocationReferenceType :
        ILocationReferenceTypeGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<ILocationReferenceTypeInternal>
    {
        new Color? Color { get; set; }
    }

    public partial interface ILocationReferenceTypeInternal :
        ISkyrimMajorRecordInternal,
        ILocationReferenceType,
        ILocationReferenceTypeGetter
    {
    }

    public partial interface ILocationReferenceTypeGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<ILocationReferenceTypeGetter>,
        IXmlItem,
        IBinaryItem
    {
        Color? Color { get; }

    }

    #endregion

    #region Common MixIn
    public static class LocationReferenceTypeMixIn
    {
        public static void Clear(this ILocationReferenceTypeInternal item)
        {
            ((LocationReferenceTypeSetterCommon)((ILocationReferenceTypeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LocationReferenceType.Mask<bool> GetEqualsMask(
            this ILocationReferenceTypeGetter item,
            ILocationReferenceTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LocationReferenceTypeCommon)((ILocationReferenceTypeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILocationReferenceTypeGetter item,
            string? name = null,
            LocationReferenceType.Mask<bool>? printMask = null)
        {
            return ((LocationReferenceTypeCommon)((ILocationReferenceTypeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILocationReferenceTypeGetter item,
            FileGeneration fg,
            string? name = null,
            LocationReferenceType.Mask<bool>? printMask = null)
        {
            ((LocationReferenceTypeCommon)((ILocationReferenceTypeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILocationReferenceTypeGetter item,
            LocationReferenceType.Mask<bool?> checkMask)
        {
            return ((LocationReferenceTypeCommon)((ILocationReferenceTypeGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LocationReferenceType.Mask<bool> GetHasBeenSetMask(this ILocationReferenceTypeGetter item)
        {
            var ret = new LocationReferenceType.Mask<bool>(false);
            ((LocationReferenceTypeCommon)((ILocationReferenceTypeGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILocationReferenceTypeGetter item,
            ILocationReferenceTypeGetter rhs)
        {
            return ((LocationReferenceTypeCommon)((ILocationReferenceTypeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILocationReferenceTypeInternal lhs,
            ILocationReferenceTypeGetter rhs,
            out LocationReferenceType.ErrorMask errorMask,
            LocationReferenceType.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LocationReferenceTypeSetterTranslationCommon)((ILocationReferenceTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = LocationReferenceType.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILocationReferenceTypeInternal lhs,
            ILocationReferenceTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LocationReferenceTypeSetterTranslationCommon)((ILocationReferenceTypeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static LocationReferenceType DeepCopy(
            this ILocationReferenceTypeGetter item,
            LocationReferenceType.TranslationMask? copyMask = null)
        {
            return ((LocationReferenceTypeSetterTranslationCommon)((ILocationReferenceTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LocationReferenceType DeepCopy(
            this ILocationReferenceTypeGetter item,
            out LocationReferenceType.ErrorMask errorMask,
            LocationReferenceType.TranslationMask? copyMask = null)
        {
            return ((LocationReferenceTypeSetterTranslationCommon)((ILocationReferenceTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LocationReferenceType DeepCopy(
            this ILocationReferenceTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LocationReferenceTypeSetterTranslationCommon)((ILocationReferenceTypeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILocationReferenceTypeInternal item,
            XElement node,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILocationReferenceTypeInternal item,
            XElement node,
            out LocationReferenceType.ErrorMask errorMask,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LocationReferenceType.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ILocationReferenceTypeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((LocationReferenceTypeSetterCommon)((ILocationReferenceTypeGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILocationReferenceTypeInternal item,
            string path,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILocationReferenceTypeInternal item,
            string path,
            out LocationReferenceType.ErrorMask errorMask,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILocationReferenceTypeInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ILocationReferenceTypeInternal item,
            Stream stream,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILocationReferenceTypeInternal item,
            Stream stream,
            out LocationReferenceType.ErrorMask errorMask,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILocationReferenceTypeInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LocationReferenceType.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILocationReferenceTypeInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ILocationReferenceTypeInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((LocationReferenceTypeSetterCommon)((ILocationReferenceTypeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum LocationReferenceType_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        SkyrimMajorRecordFlags = 4,
        FormVersion = 5,
        Version2 = 6,
        Color = 7,
    }
    #endregion

    #region Registration
    public partial class LocationReferenceType_Registration : ILoquiRegistration
    {
        public static readonly LocationReferenceType_Registration Instance = new LocationReferenceType_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 19,
            version: 0);

        public const string GUID = "a17b8351-47c0-4da3-9676-338a040891ca";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(LocationReferenceType.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LocationReferenceType.ErrorMask);

        public static readonly Type ClassType = typeof(LocationReferenceType);

        public static readonly Type GetterType = typeof(ILocationReferenceTypeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILocationReferenceType);

        public static readonly Type? InternalSetterType = typeof(ILocationReferenceTypeInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.LocationReferenceType";

        public const string Name = "LocationReferenceType";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "COLOR":
                    return (ushort)LocationReferenceType_FieldIndex.Color;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LocationReferenceType_FieldIndex enu = (LocationReferenceType_FieldIndex)index;
            switch (enu)
            {
                case LocationReferenceType_FieldIndex.Color:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LocationReferenceType_FieldIndex enu = (LocationReferenceType_FieldIndex)index;
            switch (enu)
            {
                case LocationReferenceType_FieldIndex.Color:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LocationReferenceType_FieldIndex enu = (LocationReferenceType_FieldIndex)index;
            switch (enu)
            {
                case LocationReferenceType_FieldIndex.Color:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            LocationReferenceType_FieldIndex enu = (LocationReferenceType_FieldIndex)index;
            switch (enu)
            {
                case LocationReferenceType_FieldIndex.Color:
                    return "Color";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LocationReferenceType_FieldIndex enu = (LocationReferenceType_FieldIndex)index;
            switch (enu)
            {
                case LocationReferenceType_FieldIndex.Color:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            LocationReferenceType_FieldIndex enu = (LocationReferenceType_FieldIndex)index;
            switch (enu)
            {
                case LocationReferenceType_FieldIndex.Color:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            LocationReferenceType_FieldIndex enu = (LocationReferenceType_FieldIndex)index;
            switch (enu)
            {
                case LocationReferenceType_FieldIndex.Color:
                    return typeof(Color);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LocationReferenceTypeXmlWriteTranslation);
        public static readonly RecordType LCRT_HEADER = new RecordType("LCRT");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LCRT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(LocationReferenceTypeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LocationReferenceTypeSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly LocationReferenceTypeSetterCommon Instance = new LocationReferenceTypeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILocationReferenceTypeInternal item)
        {
            ClearPartial();
            item.Color = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ILocationReferenceTypeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILocationReferenceTypeInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ILocationReferenceTypeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            ILocationReferenceTypeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    LocationReferenceTypeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => LocationReferenceType_Registration.LCRT_HEADER;
        protected static void FillBinaryStructs(
            ILocationReferenceTypeInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ILocationReferenceTypeInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Color = Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        extraByte: true);
                    return TryGet<int?>.Succeed((int)LocationReferenceType_FieldIndex.Color);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            ILocationReferenceTypeInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<ILocationReferenceTypeInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class LocationReferenceTypeCommon : SkyrimMajorRecordCommon
    {
        public new static readonly LocationReferenceTypeCommon Instance = new LocationReferenceTypeCommon();

        public LocationReferenceType.Mask<bool> GetEqualsMask(
            ILocationReferenceTypeGetter item,
            ILocationReferenceTypeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LocationReferenceType.Mask<bool>(false);
            ((LocationReferenceTypeCommon)((ILocationReferenceTypeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILocationReferenceTypeGetter item,
            ILocationReferenceTypeGetter rhs,
            LocationReferenceType.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILocationReferenceTypeGetter item,
            string? name = null,
            LocationReferenceType.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILocationReferenceTypeGetter item,
            FileGeneration fg,
            string? name = null,
            LocationReferenceType.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LocationReferenceType =>");
            }
            else
            {
                fg.AppendLine($"{name} (LocationReferenceType) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILocationReferenceTypeGetter item,
            FileGeneration fg,
            LocationReferenceType.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Color ?? true)
                && item.Color.TryGet(out var ColorItem))
            {
                fg.AppendItem(ColorItem, "Color");
            }
        }
        
        public bool HasBeenSet(
            ILocationReferenceTypeGetter item,
            LocationReferenceType.Mask<bool?> checkMask)
        {
            if (checkMask.Color.HasValue && checkMask.Color.Value != (item.Color != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ILocationReferenceTypeGetter item,
            LocationReferenceType.Mask<bool> mask)
        {
            mask.Color = (item.Color != null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static LocationReferenceType_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LocationReferenceType_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (LocationReferenceType_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (LocationReferenceType_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (LocationReferenceType_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (LocationReferenceType_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (LocationReferenceType_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (LocationReferenceType_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new LocationReferenceType_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LocationReferenceType_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LocationReferenceType_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (LocationReferenceType_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LocationReferenceType_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILocationReferenceTypeGetter? lhs,
            ILocationReferenceTypeGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILocationReferenceTypeGetter?)lhs,
                rhs: rhs as ILocationReferenceTypeGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILocationReferenceTypeGetter?)lhs,
                rhs: rhs as ILocationReferenceTypeGetter);
        }
        
        public virtual int GetHashCode(ILocationReferenceTypeGetter item)
        {
            int ret = 0;
            if (item.Color.TryGet(out var Coloritem))
            {
                ret = HashHelper.GetHashCode(Coloritem).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ILocationReferenceTypeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILocationReferenceTypeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LocationReferenceType.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ILocationReferenceTypeGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(LocationReferenceType obj, LocationReferenceType rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new LocationReferenceType(getNextFormKey());
            ret.DeepCopyIn((LocationReferenceType)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (LocationReferenceType)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class LocationReferenceTypeSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly LocationReferenceTypeSetterTranslationCommon Instance = new LocationReferenceTypeSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ILocationReferenceTypeInternal item,
            ILocationReferenceTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ILocationReferenceType item,
            ILocationReferenceTypeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)LocationReferenceType_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILocationReferenceTypeInternal)item,
                rhs: (ILocationReferenceTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILocationReferenceType)item,
                rhs: (ILocationReferenceTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILocationReferenceTypeInternal)item,
                rhs: (ILocationReferenceTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILocationReferenceType)item,
                rhs: (ILocationReferenceTypeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public LocationReferenceType DeepCopy(
            ILocationReferenceTypeGetter item,
            LocationReferenceType.TranslationMask? copyMask = null)
        {
            LocationReferenceType ret = (LocationReferenceType)((LocationReferenceTypeCommon)((ILocationReferenceTypeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public LocationReferenceType DeepCopy(
            ILocationReferenceTypeGetter item,
            out LocationReferenceType.ErrorMask errorMask,
            LocationReferenceType.TranslationMask? copyMask = null)
        {
            LocationReferenceType ret = (LocationReferenceType)((LocationReferenceTypeCommon)((ILocationReferenceTypeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public LocationReferenceType DeepCopy(
            ILocationReferenceTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LocationReferenceType ret = (LocationReferenceType)((LocationReferenceTypeCommon)((ILocationReferenceTypeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class LocationReferenceType
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocationReferenceType_Registration.Instance;
        public new static LocationReferenceType_Registration Registration => LocationReferenceType_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LocationReferenceTypeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LocationReferenceTypeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LocationReferenceTypeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class LocationReferenceTypeXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static LocationReferenceTypeXmlWriteTranslation Instance = new LocationReferenceTypeXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILocationReferenceTypeGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Color != null)
                && (translationMask?.GetShouldTranslate((int)LocationReferenceType_FieldIndex.Color) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Color),
                    item: item.Color.Value,
                    fieldIndex: (int)LocationReferenceType_FieldIndex.Color,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ILocationReferenceTypeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.LocationReferenceType");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.LocationReferenceType");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILocationReferenceTypeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILocationReferenceTypeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILocationReferenceTypeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class LocationReferenceTypeXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static LocationReferenceTypeXmlCreateTranslation Instance = new LocationReferenceTypeXmlCreateTranslation();

        public static void FillPublicXml(
            ILocationReferenceTypeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LocationReferenceTypeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILocationReferenceTypeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Color":
                    errorMask?.PushIndex((int)LocationReferenceType_FieldIndex.Color);
                    try
                    {
                        item.Color = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class LocationReferenceTypeXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILocationReferenceTypeGetter item,
            XElement node,
            out LocationReferenceType.ErrorMask errorMask,
            LocationReferenceType.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((LocationReferenceTypeXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LocationReferenceType.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILocationReferenceTypeGetter item,
            string path,
            out LocationReferenceType.ErrorMask errorMask,
            LocationReferenceType.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILocationReferenceTypeGetter item,
            Stream stream,
            out LocationReferenceType.ErrorMask errorMask,
            LocationReferenceType.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class LocationReferenceTypeBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LocationReferenceTypeBinaryWriteTranslation Instance = new LocationReferenceTypeBinaryWriteTranslation();

        public static void Write_RecordTypes(
            ILocationReferenceTypeGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Color,
                header: recordTypeConverter.ConvertToCustom(LocationReferenceType_Registration.CNAM_HEADER),
                extraByte: true);
        }

        public void Write(
            MutagenWriter writer,
            ILocationReferenceTypeGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: LocationReferenceType_Registration.LCRT_HEADER,
                type: ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.Write_Embedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                Write_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ILocationReferenceTypeGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ILocationReferenceTypeGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ILocationReferenceTypeGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LocationReferenceTypeBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static LocationReferenceTypeBinaryCreateTranslation Instance = new LocationReferenceTypeBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class LocationReferenceTypeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class LocationReferenceTypeBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ILocationReferenceTypeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LocationReferenceType_Registration.Instance;
        public new static LocationReferenceType_Registration Registration => LocationReferenceType_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LocationReferenceTypeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LocationReferenceTypeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILocationReferenceTypeGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => LocationReferenceTypeXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LocationReferenceTypeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LocationReferenceTypeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((LocationReferenceTypeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Color
        private int? _ColorLocation;
        public Color? Color => _ColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _ColorLocation.Value, _package.Meta).ReadColor() : default(Color?);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected LocationReferenceTypeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LocationReferenceTypeBinaryOverlay LocationReferenceTypeFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new LocationReferenceTypeBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4D414E43: // CNAM
                {
                    _ColorLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LocationReferenceType_FieldIndex.Color);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

