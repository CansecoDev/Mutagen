/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public abstract partial class SkyrimMajorRecord :
        MajorRecord,
        ISkyrimMajorRecordInternal,
        ILoquiObjectSetter<SkyrimMajorRecord>,
        IEquatable<SkyrimMajorRecord>,
        IEqualsMask
    {
        #region Ctor
        protected SkyrimMajorRecord()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FormVersion
        public UInt16 FormVersion { get; set; } = default;
        #endregion
        #region Version2
        public UInt16 Version2 { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SkyrimMajorRecordMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISkyrimMajorRecordGetter rhs)) return false;
            return ((SkyrimMajorRecordCommon)((ISkyrimMajorRecordGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(SkyrimMajorRecord obj)
        {
            return ((SkyrimMajorRecordCommon)((ISkyrimMajorRecordGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SkyrimMajorRecordCommon)((ISkyrimMajorRecordGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => SkyrimMajorRecordXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SkyrimMajorRecordXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new SkyrimMajorRecord CreateFromXml(
            XElement node,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SkyrimMajorRecord CreateFromXml(
            XElement node,
            out SkyrimMajorRecord.ErrorMask errorMask,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkyrimMajorRecord.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SkyrimMajorRecord CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if (!LoquiXmlTranslation.Instance.TryCreate(node, out SkyrimMajorRecord ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown SkyrimMajorRecord subclass: {node.Name.LocalName}");
            }
            ((SkyrimMajorRecordSetterCommon)((ISkyrimMajorRecordGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SkyrimMajorRecord CreateFromXml(
            string path,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SkyrimMajorRecord CreateFromXml(
            string path,
            out SkyrimMajorRecord.ErrorMask errorMask,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkyrimMajorRecord CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SkyrimMajorRecord CreateFromXml(
            Stream stream,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SkyrimMajorRecord CreateFromXml(
            Stream stream,
            out SkyrimMajorRecord.ErrorMask errorMask,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkyrimMajorRecord CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<T> :
            MajorRecord.Mask<T>,
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            : base(initialValue)
            {
                this.SkyrimMajorRecordFlags = initialValue;
                this.FormVersion = initialValue;
                this.Version2 = initialValue;
            }

            public Mask(
                T MajorRecordFlagsRaw,
                T FormKey,
                T Version,
                T EditorID,
                T SkyrimMajorRecordFlags,
                T FormVersion,
                T Version2)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID)
            {
                this.SkyrimMajorRecordFlags = SkyrimMajorRecordFlags;
                this.FormVersion = FormVersion;
                this.Version2 = Version2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T SkyrimMajorRecordFlags;
            public T FormVersion;
            public T Version2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.SkyrimMajorRecordFlags, rhs.SkyrimMajorRecordFlags)) return false;
                if (!object.Equals(this.FormVersion, rhs.FormVersion)) return false;
                if (!object.Equals(this.Version2, rhs.Version2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.SkyrimMajorRecordFlags?.GetHashCode());
                ret = ret.CombineHashCode(this.FormVersion?.GetHashCode());
                ret = ret.CombineHashCode(this.Version2?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<T, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.SkyrimMajorRecordFlags)) return false;
                if (!eval(this.FormVersion)) return false;
                if (!eval(this.Version2)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<T, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.SkyrimMajorRecordFlags)) return true;
                if (eval(this.FormVersion)) return true;
                if (eval(this.Version2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new SkyrimMajorRecord.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.SkyrimMajorRecordFlags = eval(this.SkyrimMajorRecordFlags);
                obj.FormVersion = eval(this.FormVersion);
                obj.Version2 = eval(this.Version2);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SkyrimMajorRecord.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SkyrimMajorRecord.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SkyrimMajorRecord.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.SkyrimMajorRecordFlags ?? true)
                    {
                        fg.AppendItem(SkyrimMajorRecordFlags, "SkyrimMajorRecordFlags");
                    }
                    if (printMask?.FormVersion ?? true)
                    {
                        fg.AppendItem(FormVersion, "FormVersion");
                    }
                    if (printMask?.Version2 ?? true)
                    {
                        fg.AppendItem(Version2, "Version2");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? SkyrimMajorRecordFlags;
            public Exception? FormVersion;
            public Exception? Version2;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                        return SkyrimMajorRecordFlags;
                    case SkyrimMajorRecord_FieldIndex.FormVersion:
                        return FormVersion;
                    case SkyrimMajorRecord_FieldIndex.Version2:
                        return Version2;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                        this.SkyrimMajorRecordFlags = ex;
                        break;
                    case SkyrimMajorRecord_FieldIndex.FormVersion:
                        this.FormVersion = ex;
                        break;
                    case SkyrimMajorRecord_FieldIndex.Version2:
                        this.Version2 = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                        this.SkyrimMajorRecordFlags = (Exception?)obj;
                        break;
                    case SkyrimMajorRecord_FieldIndex.FormVersion:
                        this.FormVersion = (Exception?)obj;
                        break;
                    case SkyrimMajorRecord_FieldIndex.Version2:
                        this.Version2 = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (SkyrimMajorRecordFlags != null) return true;
                if (FormVersion != null) return true;
                if (Version2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(SkyrimMajorRecordFlags, "SkyrimMajorRecordFlags");
                fg.AppendItem(FormVersion, "FormVersion");
                fg.AppendItem(Version2, "Version2");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.SkyrimMajorRecordFlags = this.SkyrimMajorRecordFlags.Combine(rhs.SkyrimMajorRecordFlags);
                ret.FormVersion = this.FormVersion.Combine(rhs.FormVersion);
                ret.Version2 = this.Version2.Combine(rhs.Version2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool SkyrimMajorRecordFlags;
            public bool FormVersion;
            public bool Version2;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.SkyrimMajorRecordFlags = defaultOn;
                this.FormVersion = defaultOn;
                this.Version2 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((SkyrimMajorRecordFlags, null));
                ret.Add((FormVersion, null));
                ret.Add((Version2, null));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => SkyrimMajorRecordCommon.Instance.GetLinks(this);
        public SkyrimMajorRecord(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public SkyrimMajorRecord(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SkyrimMajorRecordBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((SkyrimMajorRecordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISkyrimMajorRecordGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SkyrimMajorRecordSetterCommon)((ISkyrimMajorRecordGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SkyrimMajorRecord GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    public partial interface ISkyrimMajorRecord :
        ISkyrimMajorRecordGetter,
        IMajorRecord,
        ILoquiObjectSetter<ISkyrimMajorRecordInternal>
    {
        new SkyrimMajorRecord.SkyrimMajorRecordFlag SkyrimMajorRecordFlags { get; set; }
        new UInt16 FormVersion { get; set; }
        new UInt16 Version2 { get; set; }
    }

    public partial interface ISkyrimMajorRecordInternal :
        IMajorRecordInternal,
        ISkyrimMajorRecord,
        ISkyrimMajorRecordGetter
    {
    }

    public partial interface ISkyrimMajorRecordGetter :
        IMajorRecordGetter,
        ILoquiObject<ISkyrimMajorRecordGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        SkyrimMajorRecord.SkyrimMajorRecordFlag SkyrimMajorRecordFlags { get; }
        UInt16 FormVersion { get; }
        UInt16 Version2 { get; }

    }

    #endregion

    #region Common MixIn
    public static class SkyrimMajorRecordMixIn
    {
        public static void Clear(this ISkyrimMajorRecordInternal item)
        {
            ((SkyrimMajorRecordSetterCommon)((ISkyrimMajorRecordGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SkyrimMajorRecord.Mask<bool> GetEqualsMask(
            this ISkyrimMajorRecordGetter item,
            ISkyrimMajorRecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SkyrimMajorRecordCommon)((ISkyrimMajorRecordGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISkyrimMajorRecordGetter item,
            string? name = null,
            SkyrimMajorRecord.Mask<bool>? printMask = null)
        {
            return ((SkyrimMajorRecordCommon)((ISkyrimMajorRecordGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISkyrimMajorRecordGetter item,
            FileGeneration fg,
            string? name = null,
            SkyrimMajorRecord.Mask<bool>? printMask = null)
        {
            ((SkyrimMajorRecordCommon)((ISkyrimMajorRecordGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISkyrimMajorRecordGetter item,
            SkyrimMajorRecord.Mask<bool?> checkMask)
        {
            return ((SkyrimMajorRecordCommon)((ISkyrimMajorRecordGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SkyrimMajorRecord.Mask<bool> GetHasBeenSetMask(this ISkyrimMajorRecordGetter item)
        {
            var ret = new SkyrimMajorRecord.Mask<bool>(false);
            ((SkyrimMajorRecordCommon)((ISkyrimMajorRecordGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISkyrimMajorRecordGetter item,
            ISkyrimMajorRecordGetter rhs)
        {
            return ((SkyrimMajorRecordCommon)((ISkyrimMajorRecordGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISkyrimMajorRecordInternal lhs,
            ISkyrimMajorRecordGetter rhs,
            out SkyrimMajorRecord.ErrorMask errorMask,
            SkyrimMajorRecord.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SkyrimMajorRecordSetterTranslationCommon)((ISkyrimMajorRecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SkyrimMajorRecord.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISkyrimMajorRecordInternal lhs,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SkyrimMajorRecordSetterTranslationCommon)((ISkyrimMajorRecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SkyrimMajorRecord DeepCopy(
            this ISkyrimMajorRecordGetter item,
            SkyrimMajorRecord.TranslationMask? copyMask = null)
        {
            return ((SkyrimMajorRecordSetterTranslationCommon)((ISkyrimMajorRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SkyrimMajorRecord DeepCopy(
            this ISkyrimMajorRecordGetter item,
            out SkyrimMajorRecord.ErrorMask errorMask,
            SkyrimMajorRecord.TranslationMask? copyMask = null)
        {
            return ((SkyrimMajorRecordSetterTranslationCommon)((ISkyrimMajorRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SkyrimMajorRecord DeepCopy(
            this ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SkyrimMajorRecordSetterTranslationCommon)((ISkyrimMajorRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISkyrimMajorRecordInternal item,
            XElement node,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISkyrimMajorRecordInternal item,
            XElement node,
            out SkyrimMajorRecord.ErrorMask errorMask,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkyrimMajorRecord.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((SkyrimMajorRecordSetterCommon)((ISkyrimMajorRecordGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMajorRecordInternal item,
            string path,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMajorRecordInternal item,
            string path,
            out SkyrimMajorRecord.ErrorMask errorMask,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMajorRecordInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISkyrimMajorRecordInternal item,
            Stream stream,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMajorRecordInternal item,
            Stream stream,
            out SkyrimMajorRecord.ErrorMask errorMask,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMajorRecordInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SkyrimMajorRecord.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((SkyrimMajorRecordSetterCommon)((ISkyrimMajorRecordGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum SkyrimMajorRecord_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        SkyrimMajorRecordFlags = 4,
        FormVersion = 5,
        Version2 = 6,
    }
    #endregion

    #region Registration
    public partial class SkyrimMajorRecord_Registration : ILoquiRegistration
    {
        public static readonly SkyrimMajorRecord_Registration Instance = new SkyrimMajorRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 65,
            version: 0);

        public const string GUID = "7fb2c257-4be7-4aaf-a3c8-4e7f76deaa60";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(SkyrimMajorRecord.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkyrimMajorRecord.ErrorMask);

        public static readonly Type ClassType = typeof(SkyrimMajorRecord);

        public static readonly Type GetterType = typeof(ISkyrimMajorRecordGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISkyrimMajorRecord);

        public static readonly Type? InternalSetterType = typeof(ISkyrimMajorRecordInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.SkyrimMajorRecord";

        public const string Name = "SkyrimMajorRecord";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SKYRIMMAJORRECORDFLAGS":
                    return (ushort)SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags;
                case "FORMVERSION":
                    return (ushort)SkyrimMajorRecord_FieldIndex.FormVersion;
                case "VERSION2":
                    return (ushort)SkyrimMajorRecord_FieldIndex.Version2;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return "SkyrimMajorRecordFlags";
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return "FormVersion";
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return "Version2";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return typeof(SkyrimMajorRecord.SkyrimMajorRecordFlag);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return typeof(UInt16);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return typeof(UInt16);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SkyrimMajorRecordXmlWriteTranslation);
        public static readonly RecordType AACT_HEADER = new RecordType("AACT");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType BPTD_HEADER = new RecordType("BPTD");
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType CLFM_HEADER = new RecordType("CLFM");
        public static readonly RecordType EYES_HEADER = new RecordType("EYES");
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType FLST_HEADER = new RecordType("FLST");
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static readonly RecordType HAIR_HEADER = new RecordType("HAIR");
        public static readonly RecordType HDPT_HEADER = new RecordType("HDPT");
        public static readonly RecordType KYWD_HEADER = new RecordType("KYWD");
        public static readonly RecordType LCRT_HEADER = new RecordType("LCRT");
        public static readonly RecordType OTFT_HEADER = new RecordType("OTFT");
        public static readonly RecordType REFR_HEADER = new RecordType("REFR");
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static readonly RecordType TXST_HEADER = new RecordType("TXST");
        public static readonly RecordType VTYP_HEADER = new RecordType("VTYP");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        AACT_HEADER,
                        ARMO_HEADER,
                        BPTD_HEADER,
                        CLAS_HEADER,
                        CLFM_HEADER,
                        EYES_HEADER,
                        FACT_HEADER,
                        FLST_HEADER,
                        GMST_HEADER,
                        GLOB_HEADER,
                        HAIR_HEADER,
                        HDPT_HEADER,
                        KYWD_HEADER,
                        LCRT_HEADER,
                        OTFT_HEADER,
                        REFR_HEADER,
                        RACE_HEADER,
                        SPEL_HEADER,
                        TXST_HEADER,
                        VTYP_HEADER
                    })
            );
        });
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(SkyrimMajorRecordBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SkyrimMajorRecordSetterCommon : MajorRecordSetterCommon
    {
        public new static readonly SkyrimMajorRecordSetterCommon Instance = new SkyrimMajorRecordSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(ISkyrimMajorRecordInternal item)
        {
            ClearPartial();
            item.SkyrimMajorRecordFlags = default;
            item.FormVersion = default;
            item.Version2 = default;
            base.Clear(item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISkyrimMajorRecordInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    MajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => throw new ArgumentException();
        protected static void FillBinaryStructs(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            MajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
            item.FormVersion = frame.ReadUInt16();
            item.Version2 = frame.ReadUInt16();
        }
        
        public void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
        }
        
        #endregion
        
    }
    public partial class SkyrimMajorRecordCommon : MajorRecordCommon
    {
        public new static readonly SkyrimMajorRecordCommon Instance = new SkyrimMajorRecordCommon();

        public SkyrimMajorRecord.Mask<bool> GetEqualsMask(
            ISkyrimMajorRecordGetter item,
            ISkyrimMajorRecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SkyrimMajorRecord.Mask<bool>(false);
            ((SkyrimMajorRecordCommon)((ISkyrimMajorRecordGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISkyrimMajorRecordGetter item,
            ISkyrimMajorRecordGetter rhs,
            SkyrimMajorRecord.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.SkyrimMajorRecordFlags = item.SkyrimMajorRecordFlags == rhs.SkyrimMajorRecordFlags;
            ret.FormVersion = item.FormVersion == rhs.FormVersion;
            ret.Version2 = item.Version2 == rhs.Version2;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ISkyrimMajorRecordGetter item,
            string? name = null,
            SkyrimMajorRecord.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISkyrimMajorRecordGetter item,
            FileGeneration fg,
            string? name = null,
            SkyrimMajorRecord.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SkyrimMajorRecord =>");
            }
            else
            {
                fg.AppendLine($"{name} (SkyrimMajorRecord) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISkyrimMajorRecordGetter item,
            FileGeneration fg,
            SkyrimMajorRecord.Mask<bool>? printMask = null)
        {
            MajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.SkyrimMajorRecordFlags ?? true)
            {
                fg.AppendItem(item.SkyrimMajorRecordFlags, "SkyrimMajorRecordFlags");
            }
            if (printMask?.FormVersion ?? true)
            {
                fg.AppendItem(item.FormVersion, "FormVersion");
            }
            if (printMask?.Version2 ?? true)
            {
                fg.AppendItem(item.Version2, "Version2");
            }
        }
        
        public bool HasBeenSet(
            ISkyrimMajorRecordGetter item,
            SkyrimMajorRecord.Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ISkyrimMajorRecordGetter item,
            SkyrimMajorRecord.Mask<bool> mask)
        {
            mask.SkyrimMajorRecordFlags = true;
            mask.FormVersion = true;
            mask.Version2 = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static SkyrimMajorRecord_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SkyrimMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SkyrimMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (SkyrimMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SkyrimMajorRecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.SkyrimMajorRecordFlags != rhs.SkyrimMajorRecordFlags) return false;
            if (lhs.FormVersion != rhs.FormVersion) return false;
            if (lhs.Version2 != rhs.Version2) return false;
            return true;
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISkyrimMajorRecordGetter?)lhs,
                rhs: rhs as ISkyrimMajorRecordGetter);
        }
        
        public virtual int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.SkyrimMajorRecordFlags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FormVersion).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Version2).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISkyrimMajorRecordGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SkyrimMajorRecord.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ISkyrimMajorRecordGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(SkyrimMajorRecord obj, SkyrimMajorRecord rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            throw new NotImplementedException();
        }
        
        #endregion
        
    }
    public partial class SkyrimMajorRecordSetterTranslationCommon : MajorRecordSetterTranslationCommon
    {
        public new static readonly SkyrimMajorRecordSetterTranslationCommon Instance = new SkyrimMajorRecordSetterTranslationCommon();

        #region Deep Copy Fields From
        public virtual void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public virtual void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags) ?? true))
            {
                item.SkyrimMajorRecordFlags = rhs.SkyrimMajorRecordFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMajorRecord_FieldIndex.FormVersion) ?? true))
            {
                item.FormVersion = rhs.FormVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMajorRecord_FieldIndex.Version2) ?? true))
            {
                item.Version2 = rhs.Version2;
            }
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISkyrimMajorRecordInternal)item,
                rhs: (ISkyrimMajorRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISkyrimMajorRecord)item,
                rhs: (ISkyrimMajorRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public SkyrimMajorRecord DeepCopy(
            ISkyrimMajorRecordGetter item,
            SkyrimMajorRecord.TranslationMask? copyMask = null)
        {
            SkyrimMajorRecord ret = (SkyrimMajorRecord)((SkyrimMajorRecordCommon)((ISkyrimMajorRecordGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SkyrimMajorRecord DeepCopy(
            ISkyrimMajorRecordGetter item,
            out SkyrimMajorRecord.ErrorMask errorMask,
            SkyrimMajorRecord.TranslationMask? copyMask = null)
        {
            SkyrimMajorRecord ret = (SkyrimMajorRecord)((SkyrimMajorRecordCommon)((ISkyrimMajorRecordGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SkyrimMajorRecord DeepCopy(
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SkyrimMajorRecord ret = (SkyrimMajorRecord)((SkyrimMajorRecordCommon)((ISkyrimMajorRecordGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class SkyrimMajorRecord
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkyrimMajorRecord_Registration.Instance;
        public new static SkyrimMajorRecord_Registration Registration => SkyrimMajorRecord_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SkyrimMajorRecordCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SkyrimMajorRecordSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SkyrimMajorRecordSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SkyrimMajorRecordXmlWriteTranslation :
        MajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static SkyrimMajorRecordXmlWriteTranslation Instance = new SkyrimMajorRecordXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISkyrimMajorRecordGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            MajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags) ?? true))
            {
                EnumXmlTranslation<SkyrimMajorRecord.SkyrimMajorRecordFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.SkyrimMajorRecordFlags),
                    item: item.SkyrimMajorRecordFlags,
                    fieldIndex: (int)SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMajorRecord_FieldIndex.FormVersion) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FormVersion),
                    item: item.FormVersion,
                    fieldIndex: (int)SkyrimMajorRecord_FieldIndex.FormVersion,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMajorRecord_FieldIndex.Version2) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Version2),
                    item: item.Version2,
                    fieldIndex: (int)SkyrimMajorRecord_FieldIndex.Version2,
                    errorMask: errorMask);
            }
        }

        public virtual void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.SkyrimMajorRecord");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.SkyrimMajorRecord");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISkyrimMajorRecordGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISkyrimMajorRecordGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class SkyrimMajorRecordXmlCreateTranslation : MajorRecordXmlCreateTranslation
    {
        public new readonly static SkyrimMajorRecordXmlCreateTranslation Instance = new SkyrimMajorRecordXmlCreateTranslation();

        public static void FillPublicXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "SkyrimMajorRecordFlags":
                    errorMask?.PushIndex((int)SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags);
                    try
                    {
                        item.SkyrimMajorRecordFlags = EnumXmlTranslation<SkyrimMajorRecord.SkyrimMajorRecordFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FormVersion":
                    errorMask?.PushIndex((int)SkyrimMajorRecord_FieldIndex.FormVersion);
                    try
                    {
                        item.FormVersion = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Version2":
                    errorMask?.PushIndex((int)SkyrimMajorRecord_FieldIndex.Version2);
                    try
                    {
                        item.Version2 = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class SkyrimMajorRecordXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISkyrimMajorRecordGetter item,
            XElement node,
            out SkyrimMajorRecord.ErrorMask errorMask,
            SkyrimMajorRecord.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((SkyrimMajorRecordXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkyrimMajorRecord.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISkyrimMajorRecordGetter item,
            string path,
            out SkyrimMajorRecord.ErrorMask errorMask,
            SkyrimMajorRecord.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkyrimMajorRecordGetter item,
            Stream stream,
            out SkyrimMajorRecord.ErrorMask errorMask,
            SkyrimMajorRecord.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SkyrimMajorRecordBinaryWriteTranslation :
        MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static SkyrimMajorRecordBinaryWriteTranslation Instance = new SkyrimMajorRecordBinaryWriteTranslation();

        public static void Write_Embedded(
            ISkyrimMajorRecordGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryWriteTranslation.Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
            writer.Write(item.FormVersion);
            writer.Write(item.Version2);
        }

        public virtual void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
            MajorRecordBinaryWriteTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ISkyrimMajorRecordGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ISkyrimMajorRecordGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SkyrimMajorRecordBinaryCreateTranslation : MajorRecordBinaryCreateTranslation
    {
        public new readonly static SkyrimMajorRecordBinaryCreateTranslation Instance = new SkyrimMajorRecordBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class SkyrimMajorRecordBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SkyrimMajorRecordBinaryOverlay :
        MajorRecordBinaryOverlay,
        ISkyrimMajorRecordGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkyrimMajorRecord_Registration.Instance;
        public new static SkyrimMajorRecord_Registration Registration => SkyrimMajorRecord_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SkyrimMajorRecordCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SkyrimMajorRecordSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISkyrimMajorRecordGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => SkyrimMajorRecordCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => SkyrimMajorRecordXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SkyrimMajorRecordXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SkyrimMajorRecordBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((SkyrimMajorRecordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public UInt16 FormVersion => BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(12, 2));
        public UInt16 Version2 => BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(14, 2));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected SkyrimMajorRecordBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

    }

}
#endregion

#endregion

