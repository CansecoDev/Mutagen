/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class BodyTemplate :
        IBodyTemplate,
        ILoquiObjectSetter<BodyTemplate>,
        IEquatable<BodyTemplate>,
        IEqualsMask
    {
        #region Ctor
        public BodyTemplate()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public BodyTemplate.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region FirstPersonFlags
        public BipedObjectFlag FirstPersonFlags { get; set; } = default;
        #endregion
        #region Flags
        public BodyTemplate.Flag Flags { get; set; } = default;
        #endregion
        #region ArmorType
        public ArmorType ArmorType { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            BodyTemplateMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IBodyTemplateGetter rhs)) return false;
            return ((BodyTemplateCommon)((IBodyTemplateGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(BodyTemplate obj)
        {
            return ((BodyTemplateCommon)((IBodyTemplateGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((BodyTemplateCommon)((IBodyTemplateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => BodyTemplateXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((BodyTemplateXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static BodyTemplate CreateFromXml(
            XElement node,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static BodyTemplate CreateFromXml(
            XElement node,
            out BodyTemplate.ErrorMask errorMask,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = BodyTemplate.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static BodyTemplate CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new BodyTemplate();
            ((BodyTemplateSetterCommon)((IBodyTemplateGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static BodyTemplate CreateFromXml(
            string path,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static BodyTemplate CreateFromXml(
            string path,
            out BodyTemplate.ErrorMask errorMask,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static BodyTemplate CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static BodyTemplate CreateFromXml(
            Stream stream,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static BodyTemplate CreateFromXml(
            Stream stream,
            out BodyTemplate.ErrorMask errorMask,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static BodyTemplate CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.FirstPersonFlags = initialValue;
                this.Flags = initialValue;
                this.ArmorType = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem FirstPersonFlags,
                TItem Flags,
                TItem ArmorType)
            {
                this.Versioning = Versioning;
                this.FirstPersonFlags = FirstPersonFlags;
                this.Flags = Flags;
                this.ArmorType = ArmorType;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem FirstPersonFlags;
            public TItem Flags;
            public TItem ArmorType;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.FirstPersonFlags, rhs.FirstPersonFlags)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.ArmorType, rhs.ArmorType)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.FirstPersonFlags);
                hash.Add(this.Flags);
                hash.Add(this.ArmorType);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.FirstPersonFlags)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.ArmorType)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.FirstPersonFlags)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.ArmorType)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BodyTemplate.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.FirstPersonFlags = eval(this.FirstPersonFlags);
                obj.Flags = eval(this.Flags);
                obj.ArmorType = eval(this.ArmorType);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(BodyTemplate.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, BodyTemplate.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(BodyTemplate.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.FirstPersonFlags ?? true)
                    {
                        fg.AppendItem(FirstPersonFlags, "FirstPersonFlags");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.ArmorType ?? true)
                    {
                        fg.AppendItem(ArmorType, "ArmorType");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? FirstPersonFlags;
            public Exception? Flags;
            public Exception? ArmorType;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                BodyTemplate_FieldIndex enu = (BodyTemplate_FieldIndex)index;
                switch (enu)
                {
                    case BodyTemplate_FieldIndex.Versioning:
                        return Versioning;
                    case BodyTemplate_FieldIndex.FirstPersonFlags:
                        return FirstPersonFlags;
                    case BodyTemplate_FieldIndex.Flags:
                        return Flags;
                    case BodyTemplate_FieldIndex.ArmorType:
                        return ArmorType;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                BodyTemplate_FieldIndex enu = (BodyTemplate_FieldIndex)index;
                switch (enu)
                {
                    case BodyTemplate_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case BodyTemplate_FieldIndex.FirstPersonFlags:
                        this.FirstPersonFlags = ex;
                        break;
                    case BodyTemplate_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case BodyTemplate_FieldIndex.ArmorType:
                        this.ArmorType = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                BodyTemplate_FieldIndex enu = (BodyTemplate_FieldIndex)index;
                switch (enu)
                {
                    case BodyTemplate_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case BodyTemplate_FieldIndex.FirstPersonFlags:
                        this.FirstPersonFlags = (Exception?)obj;
                        break;
                    case BodyTemplate_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case BodyTemplate_FieldIndex.ArmorType:
                        this.ArmorType = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (FirstPersonFlags != null) return true;
                if (Flags != null) return true;
                if (ArmorType != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Versioning, "Versioning");
                fg.AppendItem(FirstPersonFlags, "FirstPersonFlags");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(ArmorType, "ArmorType");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.FirstPersonFlags = this.FirstPersonFlags.Combine(rhs.FirstPersonFlags);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.ArmorType = this.ArmorType.Combine(rhs.ArmorType);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Versioning;
            public bool FirstPersonFlags;
            public bool Flags;
            public bool ArmorType;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Versioning = defaultOn;
                this.FirstPersonFlags = defaultOn;
                this.Flags = defaultOn;
                this.ArmorType = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((FirstPersonFlags, null));
                ret.Add((Flags, null));
                ret.Add((ArmorType, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = BodyTemplate_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BodyTemplateBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((BodyTemplateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static BodyTemplate CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static BodyTemplate CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new BodyTemplate();
            ((BodyTemplateSetterCommon)((IBodyTemplateGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBodyTemplateGetter)rhs, include);

        void IClearable.Clear()
        {
            ((BodyTemplateSetterCommon)((IBodyTemplateGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BodyTemplate GetNew()
        {
            return new BodyTemplate();
        }

    }
    #endregion

    #region Interface
    public partial interface IBodyTemplate :
        IBodyTemplateGetter,
        ILoquiObjectSetter<IBodyTemplate>
    {
        new BodyTemplate.VersioningBreaks Versioning { get; set; }
        new BipedObjectFlag FirstPersonFlags { get; set; }
        new BodyTemplate.Flag Flags { get; set; }
        new ArmorType ArmorType { get; set; }
    }

    public partial interface IBodyTemplateGetter :
        ILoquiObject,
        ILoquiObject<IBodyTemplateGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => BodyTemplate_Registration.Instance;
        BodyTemplate.VersioningBreaks Versioning { get; }
        BipedObjectFlag FirstPersonFlags { get; }
        BodyTemplate.Flag Flags { get; }
        ArmorType ArmorType { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BodyTemplateMixIn
    {
        public static void Clear(this IBodyTemplate item)
        {
            ((BodyTemplateSetterCommon)((IBodyTemplateGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BodyTemplate.Mask<bool> GetEqualsMask(
            this IBodyTemplateGetter item,
            IBodyTemplateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BodyTemplateCommon)((IBodyTemplateGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IBodyTemplateGetter item,
            string? name = null,
            BodyTemplate.Mask<bool>? printMask = null)
        {
            return ((BodyTemplateCommon)((IBodyTemplateGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IBodyTemplateGetter item,
            FileGeneration fg,
            string? name = null,
            BodyTemplate.Mask<bool>? printMask = null)
        {
            ((BodyTemplateCommon)((IBodyTemplateGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IBodyTemplateGetter item,
            BodyTemplate.Mask<bool?> checkMask)
        {
            return ((BodyTemplateCommon)((IBodyTemplateGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static BodyTemplate.Mask<bool> GetHasBeenSetMask(this IBodyTemplateGetter item)
        {
            var ret = new BodyTemplate.Mask<bool>(false);
            ((BodyTemplateCommon)((IBodyTemplateGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IBodyTemplateGetter item,
            IBodyTemplateGetter rhs)
        {
            return ((BodyTemplateCommon)((IBodyTemplateGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IBodyTemplate lhs,
            IBodyTemplateGetter rhs)
        {
            ((BodyTemplateSetterTranslationCommon)((IBodyTemplateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IBodyTemplate lhs,
            IBodyTemplateGetter rhs,
            BodyTemplate.TranslationMask? copyMask = null)
        {
            ((BodyTemplateSetterTranslationCommon)((IBodyTemplateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBodyTemplate lhs,
            IBodyTemplateGetter rhs,
            out BodyTemplate.ErrorMask errorMask,
            BodyTemplate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BodyTemplateSetterTranslationCommon)((IBodyTemplateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = BodyTemplate.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBodyTemplate lhs,
            IBodyTemplateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BodyTemplateSetterTranslationCommon)((IBodyTemplateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static BodyTemplate DeepCopy(
            this IBodyTemplateGetter item,
            BodyTemplate.TranslationMask? copyMask = null)
        {
            return ((BodyTemplateSetterTranslationCommon)((IBodyTemplateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BodyTemplate DeepCopy(
            this IBodyTemplateGetter item,
            out BodyTemplate.ErrorMask errorMask,
            BodyTemplate.TranslationMask? copyMask = null)
        {
            return ((BodyTemplateSetterTranslationCommon)((IBodyTemplateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BodyTemplate DeepCopy(
            this IBodyTemplateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BodyTemplateSetterTranslationCommon)((IBodyTemplateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IBodyTemplate item,
            XElement node,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IBodyTemplate item,
            XElement node,
            out BodyTemplate.ErrorMask errorMask,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = BodyTemplate.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IBodyTemplate item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((BodyTemplateSetterCommon)((IBodyTemplateGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyTemplate item,
            string path,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyTemplate item,
            string path,
            out BodyTemplate.ErrorMask errorMask,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyTemplate item,
            string path,
            ErrorMaskBuilder? errorMask,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IBodyTemplate item,
            Stream stream,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyTemplate item,
            Stream stream,
            out BodyTemplate.ErrorMask errorMask,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBodyTemplate item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IBodyTemplate item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IBodyTemplate item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((BodyTemplateSetterCommon)((IBodyTemplateGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum BodyTemplate_FieldIndex
    {
        Versioning = 0,
        FirstPersonFlags = 1,
        Flags = 2,
        ArmorType = 3,
    }
    #endregion

    #region Registration
    public partial class BodyTemplate_Registration : ILoquiRegistration
    {
        public static readonly BodyTemplate_Registration Instance = new BodyTemplate_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 51,
            version: 0);

        public const string GUID = "8f6a5735-ee64-4fe6-b024-fffabb2bd8e4";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(BodyTemplate.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BodyTemplate.ErrorMask);

        public static readonly Type ClassType = typeof(BodyTemplate);

        public static readonly Type GetterType = typeof(IBodyTemplateGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBodyTemplate);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.BodyTemplate";

        public const string Name = "BodyTemplate";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VERSIONING":
                    return (ushort)BodyTemplate_FieldIndex.Versioning;
                case "FIRSTPERSONFLAGS":
                    return (ushort)BodyTemplate_FieldIndex.FirstPersonFlags;
                case "FLAGS":
                    return (ushort)BodyTemplate_FieldIndex.Flags;
                case "ARMORTYPE":
                    return (ushort)BodyTemplate_FieldIndex.ArmorType;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            BodyTemplate_FieldIndex enu = (BodyTemplate_FieldIndex)index;
            switch (enu)
            {
                case BodyTemplate_FieldIndex.Versioning:
                case BodyTemplate_FieldIndex.FirstPersonFlags:
                case BodyTemplate_FieldIndex.Flags:
                case BodyTemplate_FieldIndex.ArmorType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            BodyTemplate_FieldIndex enu = (BodyTemplate_FieldIndex)index;
            switch (enu)
            {
                case BodyTemplate_FieldIndex.Versioning:
                case BodyTemplate_FieldIndex.FirstPersonFlags:
                case BodyTemplate_FieldIndex.Flags:
                case BodyTemplate_FieldIndex.ArmorType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            BodyTemplate_FieldIndex enu = (BodyTemplate_FieldIndex)index;
            switch (enu)
            {
                case BodyTemplate_FieldIndex.Versioning:
                case BodyTemplate_FieldIndex.FirstPersonFlags:
                case BodyTemplate_FieldIndex.Flags:
                case BodyTemplate_FieldIndex.ArmorType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            BodyTemplate_FieldIndex enu = (BodyTemplate_FieldIndex)index;
            switch (enu)
            {
                case BodyTemplate_FieldIndex.Versioning:
                    return "Versioning";
                case BodyTemplate_FieldIndex.FirstPersonFlags:
                    return "FirstPersonFlags";
                case BodyTemplate_FieldIndex.Flags:
                    return "Flags";
                case BodyTemplate_FieldIndex.ArmorType:
                    return "ArmorType";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            BodyTemplate_FieldIndex enu = (BodyTemplate_FieldIndex)index;
            switch (enu)
            {
                case BodyTemplate_FieldIndex.Versioning:
                case BodyTemplate_FieldIndex.FirstPersonFlags:
                case BodyTemplate_FieldIndex.Flags:
                case BodyTemplate_FieldIndex.ArmorType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            BodyTemplate_FieldIndex enu = (BodyTemplate_FieldIndex)index;
            switch (enu)
            {
                case BodyTemplate_FieldIndex.Versioning:
                case BodyTemplate_FieldIndex.FirstPersonFlags:
                case BodyTemplate_FieldIndex.Flags:
                case BodyTemplate_FieldIndex.ArmorType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            BodyTemplate_FieldIndex enu = (BodyTemplate_FieldIndex)index;
            switch (enu)
            {
                case BodyTemplate_FieldIndex.Versioning:
                    return typeof(BodyTemplate.VersioningBreaks);
                case BodyTemplate_FieldIndex.FirstPersonFlags:
                    return typeof(BipedObjectFlag);
                case BodyTemplate_FieldIndex.Flags:
                    return typeof(BodyTemplate.Flag);
                case BodyTemplate_FieldIndex.ArmorType:
                    return typeof(ArmorType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(BodyTemplateXmlWriteTranslation);
        public static readonly RecordType BODT_HEADER = new RecordType("BODT");
        public static readonly RecordType TriggeringRecordType = BODT_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(BodyTemplateBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class BodyTemplateSetterCommon
    {
        public static readonly BodyTemplateSetterCommon Instance = new BodyTemplateSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBodyTemplate item)
        {
            ClearPartial();
            item.Versioning = default;
            item.FirstPersonFlags = default;
            item.Flags = default;
            item.ArmorType = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IBodyTemplate item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    BodyTemplateXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IBodyTemplate item,
            MutagenFrame frame)
        {
            item.FirstPersonFlags = EnumBinaryTranslation<BipedObjectFlag>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.Flags = EnumBinaryTranslation<BodyTemplate.Flag>.Instance.Parse(frame: frame.SpawnWithLength(4));
            if (frame.Complete)
            {
                item.Versioning |= BodyTemplate.VersioningBreaks.Break0;
                return;
            }
            item.ArmorType = EnumBinaryTranslation<ArmorType>.Instance.Parse(frame: frame.SpawnWithLength(4));
        }
        
        public virtual void CopyInFromBinary(
            IBodyTemplate item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(BodyTemplate_Registration.BODT_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class BodyTemplateCommon
    {
        public static readonly BodyTemplateCommon Instance = new BodyTemplateCommon();

        public BodyTemplate.Mask<bool> GetEqualsMask(
            IBodyTemplateGetter item,
            IBodyTemplateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BodyTemplate.Mask<bool>(false);
            ((BodyTemplateCommon)((IBodyTemplateGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBodyTemplateGetter item,
            IBodyTemplateGetter rhs,
            BodyTemplate.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.FirstPersonFlags = item.FirstPersonFlags == rhs.FirstPersonFlags;
            ret.Flags = item.Flags == rhs.Flags;
            ret.ArmorType = item.ArmorType == rhs.ArmorType;
        }
        
        public string ToString(
            IBodyTemplateGetter item,
            string? name = null,
            BodyTemplate.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IBodyTemplateGetter item,
            FileGeneration fg,
            string? name = null,
            BodyTemplate.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"BodyTemplate =>");
            }
            else
            {
                fg.AppendLine($"{name} (BodyTemplate) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IBodyTemplateGetter item,
            FileGeneration fg,
            BodyTemplate.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.FirstPersonFlags ?? true)
            {
                fg.AppendItem(item.FirstPersonFlags, "FirstPersonFlags");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.ArmorType ?? true)
            {
                fg.AppendItem(item.ArmorType, "ArmorType");
            }
        }
        
        public bool HasBeenSet(
            IBodyTemplateGetter item,
            BodyTemplate.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IBodyTemplateGetter item,
            BodyTemplate.Mask<bool> mask)
        {
            mask.Versioning = true;
            mask.FirstPersonFlags = true;
            mask.Flags = true;
            mask.ArmorType = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBodyTemplateGetter? lhs,
            IBodyTemplateGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Versioning != rhs.Versioning) return false;
            if (lhs.FirstPersonFlags != rhs.FirstPersonFlags) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.ArmorType != rhs.ArmorType) return false;
            return true;
        }
        
        public virtual int GetHashCode(IBodyTemplateGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.FirstPersonFlags);
            hash.Add(item.Flags);
            hash.Add(item.ArmorType);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return BodyTemplate.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IBodyTemplateGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IBodyTemplateGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class BodyTemplateSetterTranslationCommon
    {
        public static readonly BodyTemplateSetterTranslationCommon Instance = new BodyTemplateSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IBodyTemplate item,
            IBodyTemplateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)BodyTemplate_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyTemplate_FieldIndex.FirstPersonFlags) ?? true))
            {
                item.FirstPersonFlags = rhs.FirstPersonFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyTemplate_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if (rhs.Versioning.HasFlag(BodyTemplate.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)BodyTemplate_FieldIndex.ArmorType) ?? true))
            {
                item.ArmorType = rhs.ArmorType;
            }
        }
        
        #endregion
        
        public BodyTemplate DeepCopy(
            IBodyTemplateGetter item,
            BodyTemplate.TranslationMask? copyMask = null)
        {
            BodyTemplate ret = (BodyTemplate)((BodyTemplateCommon)((IBodyTemplateGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public BodyTemplate DeepCopy(
            IBodyTemplateGetter item,
            out BodyTemplate.ErrorMask errorMask,
            BodyTemplate.TranslationMask? copyMask = null)
        {
            BodyTemplate ret = (BodyTemplate)((BodyTemplateCommon)((IBodyTemplateGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public BodyTemplate DeepCopy(
            IBodyTemplateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BodyTemplate ret = (BodyTemplate)((BodyTemplateCommon)((IBodyTemplateGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class BodyTemplate
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BodyTemplate_Registration.Instance;
        public static BodyTemplate_Registration Registration => BodyTemplate_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BodyTemplateCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BodyTemplateSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BodyTemplateSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBodyTemplateGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBodyTemplateGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBodyTemplateGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class BodyTemplateXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static BodyTemplateXmlWriteTranslation Instance = new BodyTemplateXmlWriteTranslation();

        public static void WriteToNodeXml(
            IBodyTemplateGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)BodyTemplate_FieldIndex.Versioning) ?? true))
            {
                EnumXmlTranslation<BodyTemplate.VersioningBreaks>.Instance.Write(
                    node: node,
                    name: nameof(item.Versioning),
                    item: item.Versioning,
                    fieldIndex: (int)BodyTemplate_FieldIndex.Versioning,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)BodyTemplate_FieldIndex.FirstPersonFlags) ?? true))
            {
                EnumXmlTranslation<BipedObjectFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.FirstPersonFlags),
                    item: item.FirstPersonFlags,
                    fieldIndex: (int)BodyTemplate_FieldIndex.FirstPersonFlags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)BodyTemplate_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<BodyTemplate.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)BodyTemplate_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)BodyTemplate_FieldIndex.ArmorType) ?? true))
            {
                EnumXmlTranslation<ArmorType>.Instance.Write(
                    node: node,
                    name: nameof(item.ArmorType),
                    item: item.ArmorType,
                    fieldIndex: (int)BodyTemplate_FieldIndex.ArmorType,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IBodyTemplateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.BodyTemplate");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.BodyTemplate");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IBodyTemplateGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IBodyTemplateGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IBodyTemplateGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class BodyTemplateXmlCreateTranslation
    {
        public readonly static BodyTemplateXmlCreateTranslation Instance = new BodyTemplateXmlCreateTranslation();

        public static void FillPublicXml(
            IBodyTemplate item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    BodyTemplateXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IBodyTemplate item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Versioning":
                    errorMask?.PushIndex((int)BodyTemplate_FieldIndex.Versioning);
                    try
                    {
                        item.Versioning = EnumXmlTranslation<BodyTemplate.VersioningBreaks>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FirstPersonFlags":
                    errorMask?.PushIndex((int)BodyTemplate_FieldIndex.FirstPersonFlags);
                    try
                    {
                        item.FirstPersonFlags = EnumXmlTranslation<BipedObjectFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)BodyTemplate_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<BodyTemplate.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ArmorType":
                    errorMask?.PushIndex((int)BodyTemplate_FieldIndex.ArmorType);
                    try
                    {
                        item.ArmorType = EnumXmlTranslation<ArmorType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class BodyTemplateXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IBodyTemplateGetter item,
            XElement node,
            out BodyTemplate.ErrorMask errorMask,
            BodyTemplate.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((BodyTemplateXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = BodyTemplate.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IBodyTemplateGetter item,
            string path,
            out BodyTemplate.ErrorMask errorMask,
            BodyTemplate.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBodyTemplateGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBodyTemplateGetter item,
            Stream stream,
            out BodyTemplate.ErrorMask errorMask,
            BodyTemplate.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IBodyTemplateGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IBodyTemplateGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((BodyTemplateXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IBodyTemplateGetter item,
            XElement node,
            string? name = null,
            BodyTemplate.TranslationMask? translationMask = null)
        {
            ((BodyTemplateXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IBodyTemplateGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((BodyTemplateXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBodyTemplateGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((BodyTemplateXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class BodyTemplateBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static BodyTemplateBinaryWriteTranslation Instance = new BodyTemplateBinaryWriteTranslation();

        public static void WriteEmbedded(
            IBodyTemplateGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<BipedObjectFlag>.Instance.Write(
                writer,
                item.FirstPersonFlags,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<BodyTemplate.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            if (!item.Versioning.HasFlag(BodyTemplate.VersioningBreaks.Break0))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<ArmorType>.Instance.Write(
                    writer,
                    item.ArmorType,
                    length: 4);
            }
        }

        public void Write(
            MutagenWriter writer,
            IBodyTemplateGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(BodyTemplate_Registration.BODT_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IBodyTemplateGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class BodyTemplateBinaryCreateTranslation
    {
        public readonly static BodyTemplateBinaryCreateTranslation Instance = new BodyTemplateBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class BodyTemplateBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBodyTemplateGetter item,
            MutagenWriter writer)
        {
            ((BodyTemplateBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class BodyTemplateBinaryOverlay :
        BinaryOverlay,
        IBodyTemplateGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BodyTemplate_Registration.Instance;
        public static BodyTemplate_Registration Registration => BodyTemplate_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BodyTemplateCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BodyTemplateSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBodyTemplateGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBodyTemplateGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBodyTemplateGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBodyTemplateGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => BodyTemplateXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((BodyTemplateXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BodyTemplateBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((BodyTemplateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public BodyTemplate.VersioningBreaks Versioning { get; private set; }
        public BipedObjectFlag FirstPersonFlags => (BipedObjectFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x0, 0x4));
        public BodyTemplate.Flag Flags => (BodyTemplate.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x4, 0x4));
        public ArmorType ArmorType => (ArmorType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x8, 0x4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected BodyTemplateBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static BodyTemplateBinaryOverlay BodyTemplateFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new BodyTemplateBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            if (ret._data.Length <= 0x8)
            {
                ret.Versioning |= BodyTemplate.VersioningBreaks.Break0;
            }
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static BodyTemplateBinaryOverlay BodyTemplateFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return BodyTemplateFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            BodyTemplateMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

