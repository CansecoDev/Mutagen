/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class ExtraData :
        IExtraData,
        ILoquiObjectSetter<ExtraData>,
        IEquatable<ExtraData>,
        IEqualsMask
    {
        #region Ctor
        public ExtraData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ItemCondition
        public Single ItemCondition { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ExtraDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IExtraDataGetter rhs)) return false;
            return ((ExtraDataCommon)((IExtraDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ExtraData obj)
        {
            return ((ExtraDataCommon)((IExtraDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ExtraDataCommon)((IExtraDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ExtraDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ExtraDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ExtraData CreateFromXml(
            XElement node,
            ExtraData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ExtraData CreateFromXml(
            XElement node,
            out ExtraData.ErrorMask errorMask,
            ExtraData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ExtraData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ExtraData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new ExtraData();
            ((ExtraDataSetterCommon)((IExtraDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ExtraData CreateFromXml(
            string path,
            ExtraData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ExtraData CreateFromXml(
            string path,
            out ExtraData.ErrorMask errorMask,
            ExtraData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ExtraData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            ExtraData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ExtraData CreateFromXml(
            Stream stream,
            ExtraData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ExtraData CreateFromXml(
            Stream stream,
            out ExtraData.ErrorMask errorMask,
            ExtraData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ExtraData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ExtraData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Owner = new MaskItem<TItem, OwnerTarget.Mask<TItem>?>(initialValue, new OwnerTarget.Mask<TItem>(initialValue));
                this.ItemCondition = initialValue;
            }

            public Mask(
                TItem Owner,
                TItem ItemCondition)
            {
                this.Owner = new MaskItem<TItem, OwnerTarget.Mask<TItem>?>(Owner, new OwnerTarget.Mask<TItem>(Owner));
                this.ItemCondition = ItemCondition;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, OwnerTarget.Mask<TItem>?>? Owner { get; set; }
            public TItem ItemCondition;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Owner, rhs.Owner)) return false;
                if (!object.Equals(this.ItemCondition, rhs.ItemCondition)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Owner);
                hash.Add(this.ItemCondition);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (Owner != null)
                {
                    if (!eval(this.Owner.Overall)) return false;
                    if (this.Owner.Specific != null && !this.Owner.Specific.All(eval)) return false;
                }
                if (!eval(this.ItemCondition)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (Owner != null)
                {
                    if (eval(this.Owner.Overall)) return true;
                    if (this.Owner.Specific != null && this.Owner.Specific.Any(eval)) return true;
                }
                if (eval(this.ItemCondition)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ExtraData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Owner = this.Owner == null ? null : new MaskItem<R, OwnerTarget.Mask<R>?>(eval(this.Owner.Overall), this.Owner.Specific?.Translate(eval));
                obj.ItemCondition = eval(this.ItemCondition);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ExtraData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ExtraData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ExtraData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Owner?.Overall ?? true)
                    {
                        Owner?.ToString(fg);
                    }
                    if (printMask?.ItemCondition ?? true)
                    {
                        fg.AppendItem(ItemCondition, "ItemCondition");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, OwnerTarget.ErrorMask?>? Owner;
            public Exception? ItemCondition;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ExtraData_FieldIndex enu = (ExtraData_FieldIndex)index;
                switch (enu)
                {
                    case ExtraData_FieldIndex.Owner:
                        return Owner;
                    case ExtraData_FieldIndex.ItemCondition:
                        return ItemCondition;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ExtraData_FieldIndex enu = (ExtraData_FieldIndex)index;
                switch (enu)
                {
                    case ExtraData_FieldIndex.Owner:
                        this.Owner = new MaskItem<Exception?, OwnerTarget.ErrorMask?>(ex, null);
                        break;
                    case ExtraData_FieldIndex.ItemCondition:
                        this.ItemCondition = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ExtraData_FieldIndex enu = (ExtraData_FieldIndex)index;
                switch (enu)
                {
                    case ExtraData_FieldIndex.Owner:
                        this.Owner = (MaskItem<Exception?, OwnerTarget.ErrorMask?>?)obj;
                        break;
                    case ExtraData_FieldIndex.ItemCondition:
                        this.ItemCondition = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Owner != null) return true;
                if (ItemCondition != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                Owner?.ToString(fg);
                fg.AppendItem(ItemCondition, "ItemCondition");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Owner = this.Owner.Combine(rhs.Owner, (l, r) => l.Combine(r));
                ret.ItemCondition = this.ItemCondition.Combine(rhs.ItemCondition);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public MaskItem<bool, OwnerTarget.TranslationMask?> Owner;
            public bool ItemCondition;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Owner = new MaskItem<bool, OwnerTarget.TranslationMask?>(defaultOn, null);
                this.ItemCondition = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Owner?.Overall ?? true, Owner?.Specific?.GetCrystal()));
                ret.Add((ItemCondition, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = ExtraData_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => ExtraDataCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ExtraDataCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ExtraDataCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ExtraDataCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ExtraDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ExtraDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ExtraData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static ExtraData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ExtraData();
            ((ExtraDataSetterCommon)((IExtraDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IExtraDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ExtraDataSetterCommon)((IExtraDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ExtraData GetNew()
        {
            return new ExtraData();
        }

    }
    #endregion

    #region Interface
    public partial interface IExtraData :
        IExtraDataGetter,
        ILoquiObjectSetter<IExtraData>
    {
        new OwnerTarget Owner { get; set; }
        new Single ItemCondition { get; set; }
    }

    public partial interface IExtraDataGetter :
        ILoquiObject,
        ILoquiObject<IExtraDataGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ExtraData_Registration.Instance;
        IOwnerTargetGetter Owner { get; }
        Single ItemCondition { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ExtraDataMixIn
    {
        public static void Clear(this IExtraData item)
        {
            ((ExtraDataSetterCommon)((IExtraDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ExtraData.Mask<bool> GetEqualsMask(
            this IExtraDataGetter item,
            IExtraDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ExtraDataCommon)((IExtraDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IExtraDataGetter item,
            string? name = null,
            ExtraData.Mask<bool>? printMask = null)
        {
            return ((ExtraDataCommon)((IExtraDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IExtraDataGetter item,
            FileGeneration fg,
            string? name = null,
            ExtraData.Mask<bool>? printMask = null)
        {
            ((ExtraDataCommon)((IExtraDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IExtraDataGetter item,
            ExtraData.Mask<bool?> checkMask)
        {
            return ((ExtraDataCommon)((IExtraDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ExtraData.Mask<bool> GetHasBeenSetMask(this IExtraDataGetter item)
        {
            var ret = new ExtraData.Mask<bool>(false);
            ((ExtraDataCommon)((IExtraDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IExtraDataGetter item,
            IExtraDataGetter rhs)
        {
            return ((ExtraDataCommon)((IExtraDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IExtraData lhs,
            IExtraDataGetter rhs)
        {
            ((ExtraDataSetterTranslationCommon)((IExtraDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IExtraData lhs,
            IExtraDataGetter rhs,
            ExtraData.TranslationMask? copyMask = null)
        {
            ((ExtraDataSetterTranslationCommon)((IExtraDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IExtraData lhs,
            IExtraDataGetter rhs,
            out ExtraData.ErrorMask errorMask,
            ExtraData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ExtraDataSetterTranslationCommon)((IExtraDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ExtraData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IExtraData lhs,
            IExtraDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ExtraDataSetterTranslationCommon)((IExtraDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ExtraData DeepCopy(
            this IExtraDataGetter item,
            ExtraData.TranslationMask? copyMask = null)
        {
            return ((ExtraDataSetterTranslationCommon)((IExtraDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ExtraData DeepCopy(
            this IExtraDataGetter item,
            out ExtraData.ErrorMask errorMask,
            ExtraData.TranslationMask? copyMask = null)
        {
            return ((ExtraDataSetterTranslationCommon)((IExtraDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ExtraData DeepCopy(
            this IExtraDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ExtraDataSetterTranslationCommon)((IExtraDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IExtraData item,
            XElement node,
            ExtraData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IExtraData item,
            XElement node,
            out ExtraData.ErrorMask errorMask,
            ExtraData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ExtraData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IExtraData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ExtraDataSetterCommon)((IExtraDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IExtraData item,
            string path,
            ExtraData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IExtraData item,
            string path,
            out ExtraData.ErrorMask errorMask,
            ExtraData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IExtraData item,
            string path,
            ErrorMaskBuilder? errorMask,
            ExtraData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IExtraData item,
            Stream stream,
            ExtraData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IExtraData item,
            Stream stream,
            out ExtraData.ErrorMask errorMask,
            ExtraData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IExtraData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ExtraData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IExtraData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IExtraData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ExtraDataSetterCommon)((IExtraDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum ExtraData_FieldIndex
    {
        Owner = 0,
        ItemCondition = 1,
    }
    #endregion

    #region Registration
    public partial class ExtraData_Registration : ILoquiRegistration
    {
        public static readonly ExtraData_Registration Instance = new ExtraData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 173,
            version: 0);

        public const string GUID = "ab8e5a24-10e4-44e7-8b6f-a44bda2492f9";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(ExtraData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ExtraData.ErrorMask);

        public static readonly Type ClassType = typeof(ExtraData);

        public static readonly Type GetterType = typeof(IExtraDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IExtraData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.ExtraData";

        public const string Name = "ExtraData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OWNER":
                    return (ushort)ExtraData_FieldIndex.Owner;
                case "ITEMCONDITION":
                    return (ushort)ExtraData_FieldIndex.ItemCondition;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ExtraData_FieldIndex enu = (ExtraData_FieldIndex)index;
            switch (enu)
            {
                case ExtraData_FieldIndex.Owner:
                case ExtraData_FieldIndex.ItemCondition:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ExtraData_FieldIndex enu = (ExtraData_FieldIndex)index;
            switch (enu)
            {
                case ExtraData_FieldIndex.Owner:
                    return true;
                case ExtraData_FieldIndex.ItemCondition:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ExtraData_FieldIndex enu = (ExtraData_FieldIndex)index;
            switch (enu)
            {
                case ExtraData_FieldIndex.Owner:
                case ExtraData_FieldIndex.ItemCondition:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ExtraData_FieldIndex enu = (ExtraData_FieldIndex)index;
            switch (enu)
            {
                case ExtraData_FieldIndex.Owner:
                    return "Owner";
                case ExtraData_FieldIndex.ItemCondition:
                    return "ItemCondition";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ExtraData_FieldIndex enu = (ExtraData_FieldIndex)index;
            switch (enu)
            {
                case ExtraData_FieldIndex.Owner:
                case ExtraData_FieldIndex.ItemCondition:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ExtraData_FieldIndex enu = (ExtraData_FieldIndex)index;
            switch (enu)
            {
                case ExtraData_FieldIndex.Owner:
                case ExtraData_FieldIndex.ItemCondition:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ExtraData_FieldIndex enu = (ExtraData_FieldIndex)index;
            switch (enu)
            {
                case ExtraData_FieldIndex.Owner:
                    return typeof(OwnerTarget);
                case ExtraData_FieldIndex.ItemCondition:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ExtraDataXmlWriteTranslation);
        public static readonly RecordType COED_HEADER = new RecordType("COED");
        public static readonly RecordType TriggeringRecordType = COED_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(ExtraDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ExtraDataSetterCommon
    {
        public static readonly ExtraDataSetterCommon Instance = new ExtraDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IExtraData item)
        {
            ClearPartial();
            item.Owner.Clear();
            item.ItemCondition = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IExtraData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ExtraDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IExtraData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ExtraData_Registration.COED_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ExtraDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class ExtraDataCommon
    {
        public static readonly ExtraDataCommon Instance = new ExtraDataCommon();

        public ExtraData.Mask<bool> GetEqualsMask(
            IExtraDataGetter item,
            IExtraDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ExtraData.Mask<bool>(false);
            ((ExtraDataCommon)((IExtraDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IExtraDataGetter item,
            IExtraDataGetter rhs,
            ExtraData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Owner = MaskItemExt.Factory(item.Owner.GetEqualsMask(rhs.Owner, include), include);
            ret.ItemCondition = item.ItemCondition.EqualsWithin(rhs.ItemCondition);
        }
        
        public string ToString(
            IExtraDataGetter item,
            string? name = null,
            ExtraData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IExtraDataGetter item,
            FileGeneration fg,
            string? name = null,
            ExtraData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ExtraData =>");
            }
            else
            {
                fg.AppendLine($"{name} (ExtraData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IExtraDataGetter item,
            FileGeneration fg,
            ExtraData.Mask<bool>? printMask = null)
        {
            if (printMask?.Owner?.Overall ?? true)
            {
                item.Owner?.ToString(fg, "Owner");
            }
            if (printMask?.ItemCondition ?? true)
            {
                fg.AppendItem(item.ItemCondition, "ItemCondition");
            }
        }
        
        public bool HasBeenSet(
            IExtraDataGetter item,
            ExtraData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IExtraDataGetter item,
            ExtraData.Mask<bool> mask)
        {
            mask.Owner = new MaskItem<bool, OwnerTarget.Mask<bool>?>(true, item.Owner?.GetHasBeenSetMask());
            mask.ItemCondition = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IExtraDataGetter? lhs,
            IExtraDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.Owner, rhs.Owner)) return false;
            if (!lhs.ItemCondition.EqualsWithin(rhs.ItemCondition)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IExtraDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Owner);
            hash.Add(item.ItemCondition);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ExtraData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IExtraDataGetter obj)
        {
            if (obj.Owner is ILinkedFormKeyContainer OwnerlinkCont)
            {
                foreach (var item in OwnerlinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(IExtraDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class ExtraDataSetterTranslationCommon
    {
        public static readonly ExtraDataSetterTranslationCommon Instance = new ExtraDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IExtraData item,
            IExtraDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)ExtraData_FieldIndex.Owner) ?? true))
            {
                errorMask?.PushIndex((int)ExtraData_FieldIndex.Owner);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)ExtraData_FieldIndex.Owner) ?? true))
                    {
                        item.Owner = rhs.Owner.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)ExtraData_FieldIndex.Owner),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ExtraData_FieldIndex.ItemCondition) ?? true))
            {
                item.ItemCondition = rhs.ItemCondition;
            }
        }
        
        #endregion
        
        public ExtraData DeepCopy(
            IExtraDataGetter item,
            ExtraData.TranslationMask? copyMask = null)
        {
            ExtraData ret = (ExtraData)((ExtraDataCommon)((IExtraDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ExtraData DeepCopy(
            IExtraDataGetter item,
            out ExtraData.ErrorMask errorMask,
            ExtraData.TranslationMask? copyMask = null)
        {
            ExtraData ret = (ExtraData)((ExtraDataCommon)((IExtraDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ExtraData DeepCopy(
            IExtraDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ExtraData ret = (ExtraData)((ExtraDataCommon)((IExtraDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class ExtraData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ExtraData_Registration.Instance;
        public static ExtraData_Registration Registration => ExtraData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ExtraDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ExtraDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ExtraDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IExtraDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IExtraDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IExtraDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ExtraDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ExtraDataXmlWriteTranslation Instance = new ExtraDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IExtraDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ExtraData_FieldIndex.Owner) ?? true))
            {
                var OwnerItem = item.Owner;
                ((OwnerTargetXmlWriteTranslation)((IXmlItem)OwnerItem).XmlWriteTranslator).Write(
                    item: OwnerItem,
                    node: node,
                    name: nameof(item.Owner),
                    fieldIndex: (int)ExtraData_FieldIndex.Owner,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ExtraData_FieldIndex.Owner));
            }
            if ((translationMask?.GetShouldTranslate((int)ExtraData_FieldIndex.ItemCondition) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ItemCondition),
                    item: item.ItemCondition,
                    fieldIndex: (int)ExtraData_FieldIndex.ItemCondition,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IExtraDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.ExtraData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.ExtraData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IExtraDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IExtraDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IExtraDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ExtraDataXmlCreateTranslation
    {
        public readonly static ExtraDataXmlCreateTranslation Instance = new ExtraDataXmlCreateTranslation();

        public static void FillPublicXml(
            IExtraData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ExtraDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IExtraData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Owner":
                    errorMask?.PushIndex((int)ExtraData_FieldIndex.Owner);
                    try
                    {
                        item.Owner = LoquiXmlTranslation<OwnerTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ExtraData_FieldIndex.Owner));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ItemCondition":
                    errorMask?.PushIndex((int)ExtraData_FieldIndex.ItemCondition);
                    try
                    {
                        item.ItemCondition = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ExtraDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IExtraDataGetter item,
            XElement node,
            out ExtraData.ErrorMask errorMask,
            ExtraData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ExtraDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ExtraData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IExtraDataGetter item,
            string path,
            out ExtraData.ErrorMask errorMask,
            ExtraData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IExtraDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IExtraDataGetter item,
            Stream stream,
            out ExtraData.ErrorMask errorMask,
            ExtraData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IExtraDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IExtraDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((ExtraDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IExtraDataGetter item,
            XElement node,
            string? name = null,
            ExtraData.TranslationMask? translationMask = null)
        {
            ((ExtraDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IExtraDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ExtraDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IExtraDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ExtraDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ExtraDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ExtraDataBinaryWriteTranslation Instance = new ExtraDataBinaryWriteTranslation();

        static partial void WriteBinaryOwnerCustom(
            MutagenWriter writer,
            IExtraDataGetter item);

        public static void WriteBinaryOwner(
            MutagenWriter writer,
            IExtraDataGetter item)
        {
            WriteBinaryOwnerCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IExtraDataGetter item,
            MutagenWriter writer)
        {
            ExtraDataBinaryWriteTranslation.WriteBinaryOwner(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ItemCondition);
        }

        public void Write(
            MutagenWriter writer,
            IExtraDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(ExtraData_Registration.COED_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IExtraDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ExtraDataBinaryCreateTranslation
    {
        public readonly static ExtraDataBinaryCreateTranslation Instance = new ExtraDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IExtraData item,
            MutagenFrame frame)
        {
            ExtraDataBinaryCreateTranslation.FillBinaryOwnerCustomPublic(
                frame: frame,
                item: item);
            item.ItemCondition = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }

        static partial void FillBinaryOwnerCustom(
            MutagenFrame frame,
            IExtraData item);

        public static void FillBinaryOwnerCustomPublic(
            MutagenFrame frame,
            IExtraData item)
        {
            FillBinaryOwnerCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ExtraDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IExtraDataGetter item,
            MutagenWriter writer)
        {
            ((ExtraDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ExtraDataBinaryOverlay :
        BinaryOverlay,
        IExtraDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ExtraData_Registration.Instance;
        public static ExtraData_Registration Registration => ExtraData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ExtraDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ExtraDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IExtraDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IExtraDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IExtraDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IExtraDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => ExtraDataCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ExtraDataCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ExtraDataCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ExtraDataCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ExtraDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ExtraDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ExtraDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ExtraDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public IOwnerTargetGetter Owner => GetOwnerCustom(location: 0x0);
        public Single ItemCondition => SpanExt.GetFloat(_data.Slice(0x8, 0x4));
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        protected ExtraDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ExtraDataBinaryOverlay ExtraDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ExtraDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ExtraDataBinaryOverlay ExtraDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ExtraDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ExtraDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

