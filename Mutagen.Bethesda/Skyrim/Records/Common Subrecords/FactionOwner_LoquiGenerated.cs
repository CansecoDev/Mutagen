/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class FactionOwner :
        OwnerTarget,
        IFactionOwner,
        ILoquiObjectSetter<FactionOwner>,
        IEquatable<FactionOwner>,
        IEqualsMask
    {
        #region Ctor
        public FactionOwner()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Faction
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<Faction> _Faction = new FormLink<Faction>();
        public IFormLink<Faction> Faction => this._Faction;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IFactionGetter> IFactionOwnerGetter.Faction => this.Faction;
        #endregion
        #region RequiredRank
        public Int32 RequiredRank { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FactionOwnerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFactionOwnerGetter rhs)) return false;
            return ((FactionOwnerCommon)((IFactionOwnerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(FactionOwner obj)
        {
            return ((FactionOwnerCommon)((IFactionOwnerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FactionOwnerCommon)((IFactionOwnerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => FactionOwnerXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FactionOwnerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new FactionOwner CreateFromXml(
            XElement node,
            FactionOwner.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static FactionOwner CreateFromXml(
            XElement node,
            out FactionOwner.ErrorMask errorMask,
            FactionOwner.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FactionOwner.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static FactionOwner CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new FactionOwner();
            ((FactionOwnerSetterCommon)((IFactionOwnerGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static FactionOwner CreateFromXml(
            string path,
            FactionOwner.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static FactionOwner CreateFromXml(
            string path,
            out FactionOwner.ErrorMask errorMask,
            FactionOwner.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FactionOwner CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            FactionOwner.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static FactionOwner CreateFromXml(
            Stream stream,
            FactionOwner.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static FactionOwner CreateFromXml(
            Stream stream,
            out FactionOwner.ErrorMask errorMask,
            FactionOwner.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FactionOwner CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            FactionOwner.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OwnerTarget.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Faction = initialValue;
                this.RequiredRank = initialValue;
            }

            public Mask(
                TItem Faction,
                TItem RequiredRank)
            : base()
            {
                this.Faction = Faction;
                this.RequiredRank = RequiredRank;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Faction;
            public TItem RequiredRank;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Faction, rhs.Faction)) return false;
                if (!object.Equals(this.RequiredRank, rhs.RequiredRank)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Faction);
                hash.Add(this.RequiredRank);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Faction)) return false;
                if (!eval(this.RequiredRank)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Faction)) return true;
                if (eval(this.RequiredRank)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FactionOwner.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Faction = eval(this.Faction);
                obj.RequiredRank = eval(this.RequiredRank);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(FactionOwner.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, FactionOwner.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(FactionOwner.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Faction ?? true)
                    {
                        fg.AppendItem(Faction, "Faction");
                    }
                    if (printMask?.RequiredRank ?? true)
                    {
                        fg.AppendItem(RequiredRank, "RequiredRank");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OwnerTarget.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Faction;
            public Exception? RequiredRank;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                FactionOwner_FieldIndex enu = (FactionOwner_FieldIndex)index;
                switch (enu)
                {
                    case FactionOwner_FieldIndex.Faction:
                        return Faction;
                    case FactionOwner_FieldIndex.RequiredRank:
                        return RequiredRank;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                FactionOwner_FieldIndex enu = (FactionOwner_FieldIndex)index;
                switch (enu)
                {
                    case FactionOwner_FieldIndex.Faction:
                        this.Faction = ex;
                        break;
                    case FactionOwner_FieldIndex.RequiredRank:
                        this.RequiredRank = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                FactionOwner_FieldIndex enu = (FactionOwner_FieldIndex)index;
                switch (enu)
                {
                    case FactionOwner_FieldIndex.Faction:
                        this.Faction = (Exception?)obj;
                        break;
                    case FactionOwner_FieldIndex.RequiredRank:
                        this.RequiredRank = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Faction != null) return true;
                if (RequiredRank != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Faction, "Faction");
                fg.AppendItem(RequiredRank, "RequiredRank");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Faction = this.Faction.Combine(rhs.Faction);
                ret.RequiredRank = this.RequiredRank.Combine(rhs.RequiredRank);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OwnerTarget.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Faction;
            public bool RequiredRank;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Faction = defaultOn;
                this.RequiredRank = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Faction, null));
                ret.Add((RequiredRank, null));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => FactionOwnerCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FactionOwnerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FactionOwnerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new FactionOwner CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static FactionOwner CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new FactionOwner();
            ((FactionOwnerSetterCommon)((IFactionOwnerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFactionOwnerGetter)rhs, include);

        void IClearable.Clear()
        {
            ((FactionOwnerSetterCommon)((IFactionOwnerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new FactionOwner GetNew()
        {
            return new FactionOwner();
        }

    }
    #endregion

    #region Interface
    public partial interface IFactionOwner :
        IFactionOwnerGetter,
        IOwnerTarget,
        ILoquiObjectSetter<IFactionOwner>
    {
        new IFormLink<Faction> Faction { get; }
        new Int32 RequiredRank { get; set; }
    }

    public partial interface IFactionOwnerGetter :
        IOwnerTargetGetter,
        ILoquiObject<IFactionOwnerGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => FactionOwner_Registration.Instance;
        IFormLinkGetter<IFactionGetter> Faction { get; }
        Int32 RequiredRank { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FactionOwnerMixIn
    {
        public static void Clear(this IFactionOwner item)
        {
            ((FactionOwnerSetterCommon)((IFactionOwnerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FactionOwner.Mask<bool> GetEqualsMask(
            this IFactionOwnerGetter item,
            IFactionOwnerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FactionOwnerCommon)((IFactionOwnerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFactionOwnerGetter item,
            string? name = null,
            FactionOwner.Mask<bool>? printMask = null)
        {
            return ((FactionOwnerCommon)((IFactionOwnerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFactionOwnerGetter item,
            FileGeneration fg,
            string? name = null,
            FactionOwner.Mask<bool>? printMask = null)
        {
            ((FactionOwnerCommon)((IFactionOwnerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFactionOwnerGetter item,
            FactionOwner.Mask<bool?> checkMask)
        {
            return ((FactionOwnerCommon)((IFactionOwnerGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static FactionOwner.Mask<bool> GetHasBeenSetMask(this IFactionOwnerGetter item)
        {
            var ret = new FactionOwner.Mask<bool>(false);
            ((FactionOwnerCommon)((IFactionOwnerGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFactionOwnerGetter item,
            IFactionOwnerGetter rhs)
        {
            return ((FactionOwnerCommon)((IFactionOwnerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IFactionOwner lhs,
            IFactionOwnerGetter rhs,
            out FactionOwner.ErrorMask errorMask,
            FactionOwner.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FactionOwnerSetterTranslationCommon)((IFactionOwnerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = FactionOwner.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFactionOwner lhs,
            IFactionOwnerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FactionOwnerSetterTranslationCommon)((IFactionOwnerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static FactionOwner DeepCopy(
            this IFactionOwnerGetter item,
            FactionOwner.TranslationMask? copyMask = null)
        {
            return ((FactionOwnerSetterTranslationCommon)((IFactionOwnerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FactionOwner DeepCopy(
            this IFactionOwnerGetter item,
            out FactionOwner.ErrorMask errorMask,
            FactionOwner.TranslationMask? copyMask = null)
        {
            return ((FactionOwnerSetterTranslationCommon)((IFactionOwnerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FactionOwner DeepCopy(
            this IFactionOwnerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FactionOwnerSetterTranslationCommon)((IFactionOwnerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFactionOwner item,
            XElement node,
            FactionOwner.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFactionOwner item,
            XElement node,
            out FactionOwner.ErrorMask errorMask,
            FactionOwner.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FactionOwner.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IFactionOwner item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((FactionOwnerSetterCommon)((IFactionOwnerGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionOwner item,
            string path,
            FactionOwner.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionOwner item,
            string path,
            out FactionOwner.ErrorMask errorMask,
            FactionOwner.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionOwner item,
            string path,
            ErrorMaskBuilder? errorMask,
            FactionOwner.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFactionOwner item,
            Stream stream,
            FactionOwner.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionOwner item,
            Stream stream,
            out FactionOwner.ErrorMask errorMask,
            FactionOwner.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionOwner item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            FactionOwner.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFactionOwner item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IFactionOwner item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FactionOwnerSetterCommon)((IFactionOwnerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum FactionOwner_FieldIndex
    {
        Faction = 0,
        RequiredRank = 1,
    }
    #endregion

    #region Registration
    public partial class FactionOwner_Registration : ILoquiRegistration
    {
        public static readonly FactionOwner_Registration Instance = new FactionOwner_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 176,
            version: 0);

        public const string GUID = "fdde0270-8e6d-45ef-bd80-78e8f4bc4673";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(FactionOwner.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FactionOwner.ErrorMask);

        public static readonly Type ClassType = typeof(FactionOwner);

        public static readonly Type GetterType = typeof(IFactionOwnerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFactionOwner);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.FactionOwner";

        public const string Name = "FactionOwner";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FACTION":
                    return (ushort)FactionOwner_FieldIndex.Faction;
                case "REQUIREDRANK":
                    return (ushort)FactionOwner_FieldIndex.RequiredRank;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            FactionOwner_FieldIndex enu = (FactionOwner_FieldIndex)index;
            switch (enu)
            {
                case FactionOwner_FieldIndex.Faction:
                case FactionOwner_FieldIndex.RequiredRank:
                    return false;
                default:
                    return OwnerTarget_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            FactionOwner_FieldIndex enu = (FactionOwner_FieldIndex)index;
            switch (enu)
            {
                case FactionOwner_FieldIndex.Faction:
                case FactionOwner_FieldIndex.RequiredRank:
                    return false;
                default:
                    return OwnerTarget_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            FactionOwner_FieldIndex enu = (FactionOwner_FieldIndex)index;
            switch (enu)
            {
                case FactionOwner_FieldIndex.Faction:
                case FactionOwner_FieldIndex.RequiredRank:
                    return false;
                default:
                    return OwnerTarget_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            FactionOwner_FieldIndex enu = (FactionOwner_FieldIndex)index;
            switch (enu)
            {
                case FactionOwner_FieldIndex.Faction:
                    return "Faction";
                case FactionOwner_FieldIndex.RequiredRank:
                    return "RequiredRank";
                default:
                    return OwnerTarget_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            FactionOwner_FieldIndex enu = (FactionOwner_FieldIndex)index;
            switch (enu)
            {
                case FactionOwner_FieldIndex.Faction:
                case FactionOwner_FieldIndex.RequiredRank:
                    return false;
                default:
                    return OwnerTarget_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            FactionOwner_FieldIndex enu = (FactionOwner_FieldIndex)index;
            switch (enu)
            {
                case FactionOwner_FieldIndex.Faction:
                case FactionOwner_FieldIndex.RequiredRank:
                    return false;
                default:
                    return OwnerTarget_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            FactionOwner_FieldIndex enu = (FactionOwner_FieldIndex)index;
            switch (enu)
            {
                case FactionOwner_FieldIndex.Faction:
                    return typeof(IFormLink<Faction>);
                case FactionOwner_FieldIndex.RequiredRank:
                    return typeof(Int32);
                default:
                    return OwnerTarget_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FactionOwnerXmlWriteTranslation);
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(FactionOwnerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FactionOwnerSetterCommon : OwnerTargetSetterCommon
    {
        public new static readonly FactionOwnerSetterCommon Instance = new FactionOwnerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFactionOwner item)
        {
            ClearPartial();
            item.Faction.FormKey = FormKey.Null;
            item.RequiredRank = default;
            base.Clear(item);
        }
        
        public override void Clear(IOwnerTarget item)
        {
            Clear(item: (IFactionOwner)item);
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IFactionOwner item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FactionOwnerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IOwnerTarget item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (FactionOwner)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IFactionOwner item,
            MutagenFrame frame)
        {
            item.Faction.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            item.RequiredRank = frame.ReadInt32();
        }
        
        public virtual void CopyInFromBinary(
            IFactionOwner item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IOwnerTarget item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (FactionOwner)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class FactionOwnerCommon : OwnerTargetCommon
    {
        public new static readonly FactionOwnerCommon Instance = new FactionOwnerCommon();

        public FactionOwner.Mask<bool> GetEqualsMask(
            IFactionOwnerGetter item,
            IFactionOwnerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FactionOwner.Mask<bool>(false);
            ((FactionOwnerCommon)((IFactionOwnerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFactionOwnerGetter item,
            IFactionOwnerGetter rhs,
            FactionOwner.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Faction = object.Equals(item.Faction, rhs.Faction);
            ret.RequiredRank = item.RequiredRank == rhs.RequiredRank;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IFactionOwnerGetter item,
            string? name = null,
            FactionOwner.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFactionOwnerGetter item,
            FileGeneration fg,
            string? name = null,
            FactionOwner.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"FactionOwner =>");
            }
            else
            {
                fg.AppendLine($"{name} (FactionOwner) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFactionOwnerGetter item,
            FileGeneration fg,
            FactionOwner.Mask<bool>? printMask = null)
        {
            OwnerTargetCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Faction ?? true)
            {
                fg.AppendItem(item.Faction, "Faction");
            }
            if (printMask?.RequiredRank ?? true)
            {
                fg.AppendItem(item.RequiredRank, "RequiredRank");
            }
        }
        
        public bool HasBeenSet(
            IFactionOwnerGetter item,
            FactionOwner.Mask<bool?> checkMask)
        {
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IFactionOwnerGetter item,
            FactionOwner.Mask<bool> mask)
        {
            mask.Faction = true;
            mask.RequiredRank = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static FactionOwner_FieldIndex ConvertFieldIndex(OwnerTarget_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFactionOwnerGetter? lhs,
            IFactionOwnerGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.Faction.Equals(rhs.Faction)) return false;
            if (lhs.RequiredRank != rhs.RequiredRank) return false;
            return true;
        }
        
        public override bool Equals(
            IOwnerTargetGetter? lhs,
            IOwnerTargetGetter? rhs)
        {
            return Equals(
                lhs: (IFactionOwnerGetter?)lhs,
                rhs: rhs as IFactionOwnerGetter);
        }
        
        public virtual int GetHashCode(IFactionOwnerGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Faction);
            hash.Add(item.RequiredRank);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOwnerTargetGetter item)
        {
            return GetHashCode(item: (IFactionOwnerGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return FactionOwner.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IFactionOwnerGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Faction;
            yield break;
        }
        
        #endregion
        
    }
    public partial class FactionOwnerSetterTranslationCommon : OwnerTargetSetterTranslationCommon
    {
        public new static readonly FactionOwnerSetterTranslationCommon Instance = new FactionOwnerSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IFactionOwner item,
            IFactionOwnerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)FactionOwner_FieldIndex.Faction) ?? true))
            {
                item.Faction.FormKey = rhs.Faction.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)FactionOwner_FieldIndex.RequiredRank) ?? true))
            {
                item.RequiredRank = rhs.RequiredRank;
            }
        }
        
        
        public override void DeepCopyIn(
            IOwnerTarget item,
            IOwnerTargetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFactionOwner)item,
                rhs: (IFactionOwnerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public FactionOwner DeepCopy(
            IFactionOwnerGetter item,
            FactionOwner.TranslationMask? copyMask = null)
        {
            FactionOwner ret = (FactionOwner)((FactionOwnerCommon)((IFactionOwnerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public FactionOwner DeepCopy(
            IFactionOwnerGetter item,
            out FactionOwner.ErrorMask errorMask,
            FactionOwner.TranslationMask? copyMask = null)
        {
            FactionOwner ret = (FactionOwner)((FactionOwnerCommon)((IFactionOwnerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public FactionOwner DeepCopy(
            IFactionOwnerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FactionOwner ret = (FactionOwner)((FactionOwnerCommon)((IFactionOwnerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class FactionOwner
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FactionOwner_Registration.Instance;
        public new static FactionOwner_Registration Registration => FactionOwner_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FactionOwnerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FactionOwnerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FactionOwnerSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FactionOwnerXmlWriteTranslation :
        OwnerTargetXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static FactionOwnerXmlWriteTranslation Instance = new FactionOwnerXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFactionOwnerGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OwnerTargetXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)FactionOwner_FieldIndex.Faction) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Faction),
                    item: item.Faction.FormKey,
                    fieldIndex: (int)FactionOwner_FieldIndex.Faction,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)FactionOwner_FieldIndex.RequiredRank) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RequiredRank),
                    item: item.RequiredRank,
                    fieldIndex: (int)FactionOwner_FieldIndex.RequiredRank,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IFactionOwnerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.FactionOwner");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.FactionOwner");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFactionOwnerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOwnerTargetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFactionOwnerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class FactionOwnerXmlCreateTranslation : OwnerTargetXmlCreateTranslation
    {
        public new readonly static FactionOwnerXmlCreateTranslation Instance = new FactionOwnerXmlCreateTranslation();

        public static void FillPublicXml(
            IFactionOwner item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FactionOwnerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFactionOwner item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Faction":
                    errorMask?.PushIndex((int)FactionOwner_FieldIndex.Faction);
                    try
                    {
                        item.Faction.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RequiredRank":
                    errorMask?.PushIndex((int)FactionOwner_FieldIndex.RequiredRank);
                    try
                    {
                        item.RequiredRank = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OwnerTargetXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class FactionOwnerXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFactionOwnerGetter item,
            XElement node,
            out FactionOwner.ErrorMask errorMask,
            FactionOwner.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((FactionOwnerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FactionOwner.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFactionOwnerGetter item,
            string path,
            out FactionOwner.ErrorMask errorMask,
            FactionOwner.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFactionOwnerGetter item,
            Stream stream,
            out FactionOwner.ErrorMask errorMask,
            FactionOwner.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FactionOwnerBinaryWriteTranslation :
        OwnerTargetBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static FactionOwnerBinaryWriteTranslation Instance = new FactionOwnerBinaryWriteTranslation();

        public static void WriteEmbedded(
            IFactionOwnerGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Faction);
            writer.Write(item.RequiredRank);
        }

        public void Write(
            MutagenWriter writer,
            IFactionOwnerGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFactionOwnerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOwnerTargetGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFactionOwnerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class FactionOwnerBinaryCreateTranslation : OwnerTargetBinaryCreateTranslation
    {
        public new readonly static FactionOwnerBinaryCreateTranslation Instance = new FactionOwnerBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class FactionOwnerBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FactionOwnerBinaryOverlay :
        OwnerTargetBinaryOverlay,
        IFactionOwnerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FactionOwner_Registration.Instance;
        public new static FactionOwner_Registration Registration => FactionOwner_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FactionOwnerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FactionOwnerSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFactionOwnerGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => FactionOwnerCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => FactionOwnerXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FactionOwnerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FactionOwnerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FactionOwnerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public IFormLinkGetter<IFactionGetter> Faction => new FormLink<IFactionGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x0, 0x4))));
        public Int32 RequiredRank => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x4, 0x4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected FactionOwnerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static FactionOwnerBinaryOverlay FactionOwnerFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new FactionOwnerBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 0x8),
                package: package);
            int offset = stream.Position;
            stream.Position += 0x8;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static FactionOwnerBinaryOverlay FactionOwnerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return FactionOwnerFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FactionOwnerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

