/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Icons :
        IIcons,
        ILoquiObjectSetter<Icons>,
        IEquatable<Icons>,
        IEqualsMask
    {
        #region Ctor
        public Icons()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region LargeIconFilename
        public String LargeIconFilename { get; set; } = string.Empty;
        #endregion
        #region SmallIconFilename
        public String? SmallIconFilename { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IIconsGetter.SmallIconFilename => this.SmallIconFilename;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            IconsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IIconsGetter rhs)) return false;
            return ((IconsCommon)((IIconsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Icons obj)
        {
            return ((IconsCommon)((IIconsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((IconsCommon)((IIconsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => IconsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((IconsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Icons CreateFromXml(
            XElement node,
            Icons.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Icons CreateFromXml(
            XElement node,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Icons.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Icons CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Icons();
            ((IconsSetterCommon)((IIconsGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Icons CreateFromXml(
            string path,
            Icons.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Icons CreateFromXml(
            string path,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Icons CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Icons.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Icons CreateFromXml(
            Stream stream,
            Icons.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Icons CreateFromXml(
            Stream stream,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Icons CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Icons.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.LargeIconFilename = initialValue;
                this.SmallIconFilename = initialValue;
            }

            public Mask(
                TItem LargeIconFilename,
                TItem SmallIconFilename)
            {
                this.LargeIconFilename = LargeIconFilename;
                this.SmallIconFilename = SmallIconFilename;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem LargeIconFilename;
            public TItem SmallIconFilename;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.LargeIconFilename, rhs.LargeIconFilename)) return false;
                if (!object.Equals(this.SmallIconFilename, rhs.SmallIconFilename)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.LargeIconFilename);
                hash.Add(this.SmallIconFilename);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.LargeIconFilename)) return false;
                if (!eval(this.SmallIconFilename)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.LargeIconFilename)) return true;
                if (eval(this.SmallIconFilename)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Icons.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.LargeIconFilename = eval(this.LargeIconFilename);
                obj.SmallIconFilename = eval(this.SmallIconFilename);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Icons.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Icons.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Icons.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.LargeIconFilename ?? true)
                    {
                        fg.AppendItem(LargeIconFilename, "LargeIconFilename");
                    }
                    if (printMask?.SmallIconFilename ?? true)
                    {
                        fg.AppendItem(SmallIconFilename, "SmallIconFilename");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? LargeIconFilename;
            public Exception? SmallIconFilename;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Icons_FieldIndex enu = (Icons_FieldIndex)index;
                switch (enu)
                {
                    case Icons_FieldIndex.LargeIconFilename:
                        return LargeIconFilename;
                    case Icons_FieldIndex.SmallIconFilename:
                        return SmallIconFilename;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Icons_FieldIndex enu = (Icons_FieldIndex)index;
                switch (enu)
                {
                    case Icons_FieldIndex.LargeIconFilename:
                        this.LargeIconFilename = ex;
                        break;
                    case Icons_FieldIndex.SmallIconFilename:
                        this.SmallIconFilename = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Icons_FieldIndex enu = (Icons_FieldIndex)index;
                switch (enu)
                {
                    case Icons_FieldIndex.LargeIconFilename:
                        this.LargeIconFilename = (Exception?)obj;
                        break;
                    case Icons_FieldIndex.SmallIconFilename:
                        this.SmallIconFilename = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (LargeIconFilename != null) return true;
                if (SmallIconFilename != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(LargeIconFilename, "LargeIconFilename");
                fg.AppendItem(SmallIconFilename, "SmallIconFilename");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.LargeIconFilename = this.LargeIconFilename.Combine(rhs.LargeIconFilename);
                ret.SmallIconFilename = this.SmallIconFilename.Combine(rhs.SmallIconFilename);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool LargeIconFilename;
            public bool SmallIconFilename;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.LargeIconFilename = defaultOn;
                this.SmallIconFilename = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((LargeIconFilename, null));
                ret.Add((SmallIconFilename, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Icons_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => IconsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IconsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Icons CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static Icons CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Icons();
            ((IconsSetterCommon)((IIconsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IIconsGetter)rhs, include);

        void IClearable.Clear()
        {
            ((IconsSetterCommon)((IIconsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Icons GetNew()
        {
            return new Icons();
        }

    }
    #endregion

    #region Interface
    public partial interface IIcons :
        IIconsGetter,
        ILoquiObjectSetter<IIcons>
    {
        new String LargeIconFilename { get; set; }
        new String? SmallIconFilename { get; set; }
    }

    public partial interface IIconsGetter :
        ILoquiObject,
        ILoquiObject<IIconsGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => Icons_Registration.Instance;
        String LargeIconFilename { get; }
        String? SmallIconFilename { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class IconsMixIn
    {
        public static void Clear(this IIcons item)
        {
            ((IconsSetterCommon)((IIconsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Icons.Mask<bool> GetEqualsMask(
            this IIconsGetter item,
            IIconsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((IconsCommon)((IIconsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IIconsGetter item,
            string? name = null,
            Icons.Mask<bool>? printMask = null)
        {
            return ((IconsCommon)((IIconsGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IIconsGetter item,
            FileGeneration fg,
            string? name = null,
            Icons.Mask<bool>? printMask = null)
        {
            ((IconsCommon)((IIconsGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IIconsGetter item,
            Icons.Mask<bool?> checkMask)
        {
            return ((IconsCommon)((IIconsGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Icons.Mask<bool> GetHasBeenSetMask(this IIconsGetter item)
        {
            var ret = new Icons.Mask<bool>(false);
            ((IconsCommon)((IIconsGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IIconsGetter item,
            IIconsGetter rhs)
        {
            return ((IconsCommon)((IIconsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IIcons lhs,
            IIconsGetter rhs)
        {
            ((IconsSetterTranslationCommon)((IIconsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IIcons lhs,
            IIconsGetter rhs,
            Icons.TranslationMask? copyMask = null)
        {
            ((IconsSetterTranslationCommon)((IIconsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IIcons lhs,
            IIconsGetter rhs,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((IconsSetterTranslationCommon)((IIconsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Icons.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IIcons lhs,
            IIconsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((IconsSetterTranslationCommon)((IIconsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Icons DeepCopy(
            this IIconsGetter item,
            Icons.TranslationMask? copyMask = null)
        {
            return ((IconsSetterTranslationCommon)((IIconsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Icons DeepCopy(
            this IIconsGetter item,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? copyMask = null)
        {
            return ((IconsSetterTranslationCommon)((IIconsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Icons DeepCopy(
            this IIconsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((IconsSetterTranslationCommon)((IIconsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IIcons item,
            XElement node,
            Icons.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IIcons item,
            XElement node,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Icons.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IIcons item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((IconsSetterCommon)((IIconsGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIcons item,
            string path,
            Icons.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIcons item,
            string path,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIcons item,
            string path,
            ErrorMaskBuilder? errorMask,
            Icons.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IIcons item,
            Stream stream,
            Icons.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIcons item,
            Stream stream,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIcons item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Icons.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IIcons item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IIcons item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IconsSetterCommon)((IIconsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Icons_FieldIndex
    {
        LargeIconFilename = 0,
        SmallIconFilename = 1,
    }
    #endregion

    #region Registration
    public partial class Icons_Registration : ILoquiRegistration
    {
        public static readonly Icons_Registration Instance = new Icons_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 234,
            version: 0);

        public const string GUID = "41d61c12-3813-4952-9eac-00eb6f924e5f";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(Icons.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Icons.ErrorMask);

        public static readonly Type ClassType = typeof(Icons);

        public static readonly Type GetterType = typeof(IIconsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IIcons);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Icons";

        public const string Name = "Icons";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "LARGEICONFILENAME":
                    return (ushort)Icons_FieldIndex.LargeIconFilename;
                case "SMALLICONFILENAME":
                    return (ushort)Icons_FieldIndex.SmallIconFilename;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Icons_FieldIndex enu = (Icons_FieldIndex)index;
            switch (enu)
            {
                case Icons_FieldIndex.LargeIconFilename:
                case Icons_FieldIndex.SmallIconFilename:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Icons_FieldIndex enu = (Icons_FieldIndex)index;
            switch (enu)
            {
                case Icons_FieldIndex.LargeIconFilename:
                case Icons_FieldIndex.SmallIconFilename:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Icons_FieldIndex enu = (Icons_FieldIndex)index;
            switch (enu)
            {
                case Icons_FieldIndex.LargeIconFilename:
                case Icons_FieldIndex.SmallIconFilename:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Icons_FieldIndex enu = (Icons_FieldIndex)index;
            switch (enu)
            {
                case Icons_FieldIndex.LargeIconFilename:
                    return "LargeIconFilename";
                case Icons_FieldIndex.SmallIconFilename:
                    return "SmallIconFilename";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Icons_FieldIndex enu = (Icons_FieldIndex)index;
            switch (enu)
            {
                case Icons_FieldIndex.LargeIconFilename:
                case Icons_FieldIndex.SmallIconFilename:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Icons_FieldIndex enu = (Icons_FieldIndex)index;
            switch (enu)
            {
                case Icons_FieldIndex.LargeIconFilename:
                case Icons_FieldIndex.SmallIconFilename:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Icons_FieldIndex enu = (Icons_FieldIndex)index;
            switch (enu)
            {
                case Icons_FieldIndex.LargeIconFilename:
                    return typeof(String);
                case Icons_FieldIndex.SmallIconFilename:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(IconsXmlWriteTranslation);
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType MICO_HEADER = new RecordType("MICO");
        public static readonly RecordType TriggeringRecordType = ICON_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(IconsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class IconsSetterCommon
    {
        public static readonly IconsSetterCommon Instance = new IconsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IIcons item)
        {
            ClearPartial();
            item.LargeIconFilename = string.Empty;
            item.SmallIconFilename = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IIcons item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    IconsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IIcons item,
            MutagenFrame frame)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IIcons item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Icons_FieldIndex.LargeIconFilename) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.LargeIconFilename = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Icons_FieldIndex.LargeIconFilename);
                }
                case 0x4F43494D: // MICO
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.SmallIconFilename = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Icons_FieldIndex.SmallIconFilename);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public virtual void CopyInFromBinary(
            IIcons item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class IconsCommon
    {
        public static readonly IconsCommon Instance = new IconsCommon();

        public Icons.Mask<bool> GetEqualsMask(
            IIconsGetter item,
            IIconsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Icons.Mask<bool>(false);
            ((IconsCommon)((IIconsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IIconsGetter item,
            IIconsGetter rhs,
            Icons.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.LargeIconFilename = string.Equals(item.LargeIconFilename, rhs.LargeIconFilename);
            ret.SmallIconFilename = string.Equals(item.SmallIconFilename, rhs.SmallIconFilename);
        }
        
        public string ToString(
            IIconsGetter item,
            string? name = null,
            Icons.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IIconsGetter item,
            FileGeneration fg,
            string? name = null,
            Icons.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Icons =>");
            }
            else
            {
                fg.AppendLine($"{name} (Icons) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IIconsGetter item,
            FileGeneration fg,
            Icons.Mask<bool>? printMask = null)
        {
            if (printMask?.LargeIconFilename ?? true)
            {
                fg.AppendItem(item.LargeIconFilename, "LargeIconFilename");
            }
            if ((printMask?.SmallIconFilename ?? true)
                && item.SmallIconFilename.TryGet(out var SmallIconFilenameItem))
            {
                fg.AppendItem(SmallIconFilenameItem, "SmallIconFilename");
            }
        }
        
        public bool HasBeenSet(
            IIconsGetter item,
            Icons.Mask<bool?> checkMask)
        {
            if (checkMask.SmallIconFilename.HasValue && checkMask.SmallIconFilename.Value != (item.SmallIconFilename != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IIconsGetter item,
            Icons.Mask<bool> mask)
        {
            mask.LargeIconFilename = true;
            mask.SmallIconFilename = (item.SmallIconFilename != null);
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IIconsGetter? lhs,
            IIconsGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!string.Equals(lhs.LargeIconFilename, rhs.LargeIconFilename)) return false;
            if (!string.Equals(lhs.SmallIconFilename, rhs.SmallIconFilename)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IIconsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.LargeIconFilename);
            if (item.SmallIconFilename.TryGet(out var SmallIconFilenameitem))
            {
                hash.Add(SmallIconFilenameitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Icons.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IIconsGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IIconsGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class IconsSetterTranslationCommon
    {
        public static readonly IconsSetterTranslationCommon Instance = new IconsSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IIcons item,
            IIconsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)Icons_FieldIndex.LargeIconFilename) ?? true))
            {
                item.LargeIconFilename = rhs.LargeIconFilename;
            }
            if ((copyMask?.GetShouldTranslate((int)Icons_FieldIndex.SmallIconFilename) ?? true))
            {
                item.SmallIconFilename = rhs.SmallIconFilename;
            }
        }
        
        #endregion
        
        public Icons DeepCopy(
            IIconsGetter item,
            Icons.TranslationMask? copyMask = null)
        {
            Icons ret = (Icons)((IconsCommon)((IIconsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Icons DeepCopy(
            IIconsGetter item,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? copyMask = null)
        {
            Icons ret = (Icons)((IconsCommon)((IIconsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Icons DeepCopy(
            IIconsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Icons ret = (Icons)((IconsCommon)((IIconsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Icons
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Icons_Registration.Instance;
        public static Icons_Registration Registration => Icons_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => IconsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return IconsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => IconsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IIconsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IIconsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IIconsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class IconsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static IconsXmlWriteTranslation Instance = new IconsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IIconsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Icons_FieldIndex.LargeIconFilename) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LargeIconFilename),
                    item: item.LargeIconFilename,
                    fieldIndex: (int)Icons_FieldIndex.LargeIconFilename,
                    errorMask: errorMask);
            }
            if ((item.SmallIconFilename != null)
                && (translationMask?.GetShouldTranslate((int)Icons_FieldIndex.SmallIconFilename) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SmallIconFilename),
                    item: item.SmallIconFilename,
                    fieldIndex: (int)Icons_FieldIndex.SmallIconFilename,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IIconsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Icons");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Icons");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IIconsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IIconsGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IIconsGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class IconsXmlCreateTranslation
    {
        public readonly static IconsXmlCreateTranslation Instance = new IconsXmlCreateTranslation();

        public static void FillPublicXml(
            IIcons item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    IconsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IIcons item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "LargeIconFilename":
                    errorMask?.PushIndex((int)Icons_FieldIndex.LargeIconFilename);
                    try
                    {
                        item.LargeIconFilename = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SmallIconFilename":
                    errorMask?.PushIndex((int)Icons_FieldIndex.SmallIconFilename);
                    try
                    {
                        item.SmallIconFilename = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class IconsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IIconsGetter item,
            XElement node,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((IconsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Icons.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IIconsGetter item,
            string path,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IIconsGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IIconsGetter item,
            Stream stream,
            out Icons.ErrorMask errorMask,
            Icons.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IIconsGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IIconsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((IconsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IIconsGetter item,
            XElement node,
            string? name = null,
            Icons.TranslationMask? translationMask = null)
        {
            ((IconsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IIconsGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((IconsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IIconsGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((IconsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class IconsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static IconsBinaryWriteTranslation Instance = new IconsBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IIconsGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LargeIconFilename,
                header: recordTypeConverter.ConvertToCustom(Icons_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SmallIconFilename,
                header: recordTypeConverter.ConvertToCustom(Icons_Registration.MICO_HEADER),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IIconsGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IIconsGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class IconsBinaryCreateTranslation
    {
        public readonly static IconsBinaryCreateTranslation Instance = new IconsBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class IconsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IIconsGetter item,
            MutagenWriter writer)
        {
            ((IconsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class IconsBinaryOverlay :
        BinaryOverlay,
        IIconsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Icons_Registration.Instance;
        public static Icons_Registration Registration => Icons_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => IconsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => IconsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IIconsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IIconsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IIconsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IIconsGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => IconsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((IconsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => IconsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IconsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region LargeIconFilename
        private int? _LargeIconFilenameLocation;
        public String LargeIconFilename => _LargeIconFilenameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _LargeIconFilenameLocation.Value, _package.Meta)) : string.Empty;
        #endregion
        #region SmallIconFilename
        private int? _SmallIconFilenameLocation;
        public String? SmallIconFilename => _SmallIconFilenameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _SmallIconFilenameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected IconsBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static IconsBinaryOverlay IconsFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new IconsBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IconsBinaryOverlay IconsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return IconsFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Icons_FieldIndex.LargeIconFilename) return TryGet<int?>.Failure;
                    _LargeIconFilenameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Icons_FieldIndex.LargeIconFilename);
                }
                case 0x4F43494D: // MICO
                {
                    _SmallIconFilenameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Icons_FieldIndex.SmallIconFilename);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            IconsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

