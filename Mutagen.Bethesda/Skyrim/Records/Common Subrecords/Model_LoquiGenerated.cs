/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Model :
        IModel,
        ILoquiObjectSetter<Model>,
        IEquatable<Model>,
        IEqualsMask
    {
        #region Ctor
        public Model()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region File
        public String File { get; set; } = string.Empty;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _Data;
        public Byte[]? Data
        {
            get => this._Data;
            set => this._Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IModelGetter.Data => this.Data;
        #endregion
        #region AlternateTextures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AlternateTexture>? _AlternateTextures;
        public ExtendedList<AlternateTexture>? AlternateTextures
        {
            get => this._AlternateTextures;
            set => this._AlternateTextures = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAlternateTextureGetter>? IModelGetter.AlternateTextures => _AlternateTextures;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ModelMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IModelGetter rhs)) return false;
            return ((ModelCommon)((IModelGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Model obj)
        {
            return ((ModelCommon)((IModelGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ModelCommon)((IModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ModelXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ModelXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Model CreateFromXml(
            XElement node,
            Model.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Model CreateFromXml(
            XElement node,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Model.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Model CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Model();
            ((ModelSetterCommon)((IModelGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Model CreateFromXml(
            string path,
            Model.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Model CreateFromXml(
            string path,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Model CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Model.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Model CreateFromXml(
            Stream stream,
            Model.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Model CreateFromXml(
            Stream stream,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Model CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Model.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.File = initialValue;
                this.Data = initialValue;
                this.AlternateTextures = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AlternateTexture.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AlternateTexture.Mask<TItem>?>>());
            }

            public Mask(
                TItem File,
                TItem Data,
                TItem AlternateTextures)
            {
                this.File = File;
                this.Data = Data;
                this.AlternateTextures = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AlternateTexture.Mask<TItem>?>>?>(AlternateTextures, Enumerable.Empty<MaskItemIndexed<TItem, AlternateTexture.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem File;
            public TItem Data;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AlternateTexture.Mask<TItem>?>>?>? AlternateTextures;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.File, rhs.File)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.AlternateTextures, rhs.AlternateTextures)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.File?.GetHashCode());
                ret = ret.CombineHashCode(this.Data?.GetHashCode());
                ret = ret.CombineHashCode(this.AlternateTextures?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.File)) return false;
                if (!eval(this.Data)) return false;
                if (this.AlternateTextures != null)
                {
                    if (!eval(this.AlternateTextures.Overall)) return false;
                    if (this.AlternateTextures.Specific != null)
                    {
                        foreach (var item in this.AlternateTextures.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.File)) return true;
                if (eval(this.Data)) return true;
                if (this.AlternateTextures != null)
                {
                    if (eval(this.AlternateTextures.Overall)) return true;
                    if (this.AlternateTextures.Specific != null)
                    {
                        foreach (var item in this.AlternateTextures.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Model.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.File = eval(this.File);
                obj.Data = eval(this.Data);
                if (AlternateTextures != null)
                {
                    obj.AlternateTextures = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AlternateTexture.Mask<R>?>>?>(eval(this.AlternateTextures.Overall), Enumerable.Empty<MaskItemIndexed<R, AlternateTexture.Mask<R>?>>());
                    if (AlternateTextures.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AlternateTexture.Mask<R>?>>();
                        obj.AlternateTextures.Specific = l;
                        foreach (var item in AlternateTextures.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, AlternateTexture.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, AlternateTexture.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Model.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Model.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Model.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.File ?? true)
                    {
                        fg.AppendItem(File, "File");
                    }
                    if (printMask?.Data ?? true)
                    {
                        fg.AppendItem(Data, "Data");
                    }
                    if ((printMask?.AlternateTextures?.Overall ?? true)
                        && AlternateTextures.TryGet(out var AlternateTexturesItem))
                    {
                        fg.AppendLine("AlternateTextures =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AlternateTexturesItem.Overall);
                            if (AlternateTexturesItem.Specific != null)
                            {
                                foreach (var subItem in AlternateTexturesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? File;
            public Exception? Data;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AlternateTexture.ErrorMask?>>?>? AlternateTextures;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Model_FieldIndex enu = (Model_FieldIndex)index;
                switch (enu)
                {
                    case Model_FieldIndex.File:
                        return File;
                    case Model_FieldIndex.Data:
                        return Data;
                    case Model_FieldIndex.AlternateTextures:
                        return AlternateTextures;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Model_FieldIndex enu = (Model_FieldIndex)index;
                switch (enu)
                {
                    case Model_FieldIndex.File:
                        this.File = ex;
                        break;
                    case Model_FieldIndex.Data:
                        this.Data = ex;
                        break;
                    case Model_FieldIndex.AlternateTextures:
                        this.AlternateTextures = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AlternateTexture.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Model_FieldIndex enu = (Model_FieldIndex)index;
                switch (enu)
                {
                    case Model_FieldIndex.File:
                        this.File = (Exception?)obj;
                        break;
                    case Model_FieldIndex.Data:
                        this.Data = (Exception?)obj;
                        break;
                    case Model_FieldIndex.AlternateTextures:
                        this.AlternateTextures = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AlternateTexture.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (File != null) return true;
                if (Data != null) return true;
                if (AlternateTextures != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(File, "File");
                fg.AppendItem(Data, "Data");
                if (AlternateTextures.TryGet(out var AlternateTexturesItem))
                {
                    fg.AppendLine("AlternateTextures =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AlternateTexturesItem.Overall);
                        if (AlternateTexturesItem.Specific != null)
                        {
                            foreach (var subItem in AlternateTexturesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.File = this.File.Combine(rhs.File);
                ret.Data = this.Data.Combine(rhs.Data);
                ret.AlternateTextures = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AlternateTexture.ErrorMask?>>?>(ExceptionExt.Combine(this.AlternateTextures?.Overall, rhs.AlternateTextures?.Overall), ExceptionExt.Combine(this.AlternateTextures?.Specific, rhs.AlternateTextures?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool File;
            public bool Data;
            public MaskItem<bool, AlternateTexture.TranslationMask?> AlternateTextures;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.File = defaultOn;
                this.Data = defaultOn;
                this.AlternateTextures = new MaskItem<bool, AlternateTexture.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((File, null));
                ret.Add((Data, null));
                ret.Add((AlternateTextures?.Overall ?? true, AlternateTextures?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Model_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => ModelCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Model CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static Model CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Model();
            ((ModelSetterCommon)((IModelGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IModelGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ModelSetterCommon)((IModelGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Model GetNew()
        {
            return new Model();
        }

    }
    #endregion

    #region Interface
    public partial interface IModel :
        IModelGetter,
        ILoquiObjectSetter<IModel>
    {
        new String File { get; set; }
        new Byte[]? Data { get; set; }
        new ExtendedList<AlternateTexture>? AlternateTextures { get; set; }
    }

    public partial interface IModelGetter :
        ILoquiObject,
        ILoquiObject<IModelGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        String File { get; }
        ReadOnlyMemorySlice<Byte>? Data { get; }
        IReadOnlyList<IAlternateTextureGetter>? AlternateTextures { get; }

    }

    #endregion

    #region Common MixIn
    public static class ModelMixIn
    {
        public static void Clear(this IModel item)
        {
            ((ModelSetterCommon)((IModelGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Model.Mask<bool> GetEqualsMask(
            this IModelGetter item,
            IModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ModelCommon)((IModelGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IModelGetter item,
            string? name = null,
            Model.Mask<bool>? printMask = null)
        {
            return ((ModelCommon)((IModelGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IModelGetter item,
            FileGeneration fg,
            string? name = null,
            Model.Mask<bool>? printMask = null)
        {
            ((ModelCommon)((IModelGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IModelGetter item,
            Model.Mask<bool?> checkMask)
        {
            return ((ModelCommon)((IModelGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Model.Mask<bool> GetHasBeenSetMask(this IModelGetter item)
        {
            var ret = new Model.Mask<bool>(false);
            ((ModelCommon)((IModelGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IModelGetter item,
            IModelGetter rhs)
        {
            return ((ModelCommon)((IModelGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IModel lhs,
            IModelGetter rhs,
            Model.TranslationMask? copyMask = null)
        {
            ((ModelSetterTranslationCommon)((IModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IModel lhs,
            IModelGetter rhs,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ModelSetterTranslationCommon)((IModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Model.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IModel lhs,
            IModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ModelSetterTranslationCommon)((IModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Model DeepCopy(
            this IModelGetter item,
            Model.TranslationMask? copyMask = null)
        {
            return ((ModelSetterTranslationCommon)((IModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Model DeepCopy(
            this IModelGetter item,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? copyMask = null)
        {
            return ((ModelSetterTranslationCommon)((IModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Model DeepCopy(
            this IModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ModelSetterTranslationCommon)((IModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IModel item,
            XElement node,
            Model.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IModel item,
            XElement node,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Model.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IModel item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ModelSetterCommon)((IModelGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModel item,
            string path,
            Model.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModel item,
            string path,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModel item,
            string path,
            ErrorMaskBuilder? errorMask,
            Model.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IModel item,
            Stream stream,
            Model.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModel item,
            Stream stream,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModel item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Model.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IModel item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IModel item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ModelSetterCommon)((IModelGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Model_FieldIndex
    {
        File = 0,
        Data = 1,
        AlternateTextures = 2,
    }
    #endregion

    #region Registration
    public partial class Model_Registration : ILoquiRegistration
    {
        public static readonly Model_Registration Instance = new Model_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 42,
            version: 0);

        public const string GUID = "b5deaeea-11c5-4c34-94e4-3db4c24be832";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Model.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Model.ErrorMask);

        public static readonly Type ClassType = typeof(Model);

        public static readonly Type GetterType = typeof(IModelGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IModel);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Model";

        public const string Name = "Model";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FILE":
                    return (ushort)Model_FieldIndex.File;
                case "DATA":
                    return (ushort)Model_FieldIndex.Data;
                case "ALTERNATETEXTURES":
                    return (ushort)Model_FieldIndex.AlternateTextures;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.AlternateTextures:
                    return true;
                case Model_FieldIndex.File:
                case Model_FieldIndex.Data:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.AlternateTextures:
                    return true;
                case Model_FieldIndex.File:
                case Model_FieldIndex.Data:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.Data:
                case Model_FieldIndex.AlternateTextures:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    return "File";
                case Model_FieldIndex.Data:
                    return "Data";
                case Model_FieldIndex.AlternateTextures:
                    return "AlternateTextures";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.Data:
                case Model_FieldIndex.AlternateTextures:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                case Model_FieldIndex.Data:
                case Model_FieldIndex.AlternateTextures:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Model_FieldIndex enu = (Model_FieldIndex)index;
            switch (enu)
            {
                case Model_FieldIndex.File:
                    return typeof(String);
                case Model_FieldIndex.Data:
                    return typeof(Byte[]);
                case Model_FieldIndex.AlternateTextures:
                    return typeof(ExtendedList<AlternateTexture>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ModelXmlWriteTranslation);
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType MODT_HEADER = new RecordType("MODT");
        public static readonly RecordType MODS_HEADER = new RecordType("MODS");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = MODL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(ModelBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ModelSetterCommon
    {
        public static readonly ModelSetterCommon Instance = new ModelSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IModel item)
        {
            ClearPartial();
            item.File = string.Empty;
            item.Data = default;
            item.AlternateTextures = null;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IModel item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModelXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IModel item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IModel item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Model_FieldIndex.File) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.File = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.File);
                }
                case 0x54444F4D: // MODT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Data = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.Data);
                }
                case 0x53444F4D: // MODS
                {
                    item.AlternateTextures = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<AlternateTexture>.Instance.ParseRepeatedItem(
                            amount: frame.ReadInt32(),
                            frame: frame,
                            masterReferences: masterReferences,
                            transl: (MutagenFrame r, out AlternateTexture listSubItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<AlternateTexture>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem,
                                    masterReferences: m);
                            })
                        .ToExtendedList<AlternateTexture>();
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.AlternateTextures);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IModel item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ModelCommon
    {
        public static readonly ModelCommon Instance = new ModelCommon();

        public Model.Mask<bool> GetEqualsMask(
            IModelGetter item,
            IModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Model.Mask<bool>(false);
            ((ModelCommon)((IModelGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IModelGetter item,
            IModelGetter rhs,
            Model.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.File = string.Equals(item.File, rhs.File);
            ret.Data = MemorySliceExt.Equal(item.Data, rhs.Data);
            ret.AlternateTextures = item.AlternateTextures.CollectionEqualsHelper(
                rhs.AlternateTextures,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IModelGetter item,
            string? name = null,
            Model.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IModelGetter item,
            FileGeneration fg,
            string? name = null,
            Model.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Model =>");
            }
            else
            {
                fg.AppendLine($"{name} (Model) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IModelGetter item,
            FileGeneration fg,
            Model.Mask<bool>? printMask = null)
        {
            if (printMask?.File ?? true)
            {
                fg.AppendItem(item.File, "File");
            }
            if ((printMask?.Data ?? true)
                && item.Data.TryGet(out var DataItem))
            {
                fg.AppendLine($"Data => {SpanExt.ToHexString(DataItem)}");
            }
            if ((printMask?.AlternateTextures?.Overall ?? true)
                && item.AlternateTextures.TryGet(out var AlternateTexturesItem))
            {
                fg.AppendLine("AlternateTextures =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in AlternateTexturesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IModelGetter item,
            Model.Mask<bool?> checkMask)
        {
            if (checkMask.Data.HasValue && checkMask.Data.Value != (item.Data != null)) return false;
            if (checkMask.AlternateTextures?.Overall.HasValue ?? false && checkMask.AlternateTextures!.Overall.Value != (item.AlternateTextures != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IModelGetter item,
            Model.Mask<bool> mask)
        {
            mask.File = true;
            mask.Data = (item.Data != null);
            if (item.AlternateTextures.TryGet(out var AlternateTexturesItem))
            {
                mask.AlternateTextures = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, AlternateTexture.Mask<bool>?>>?>(true, AlternateTexturesItem.WithIndex().Select((i) => new MaskItemIndexed<bool, AlternateTexture.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IModelGetter? lhs,
            IModelGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!string.Equals(lhs.File, rhs.File)) return false;
            if (!MemorySliceExt.Equal(lhs.Data, rhs.Data)) return false;
            if (!lhs.AlternateTextures.SequenceEqual(rhs.AlternateTextures)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IModelGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.File).CombineHashCode(ret);
            if (item.Data.TryGet(out var DataItem))
            {
                ret = HashHelper.GetHashCode(DataItem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.AlternateTextures).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Model.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IModelGetter obj)
        {
            if (obj.AlternateTextures != null)
            {
                foreach (var item in obj.AlternateTextures.SelectMany(f => f.Links))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class ModelSetterTranslationCommon
    {
        public static readonly ModelSetterTranslationCommon Instance = new ModelSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IModel item,
            IModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.File) ?? true))
            {
                item.File = rhs.File;
            }
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.Data) ?? true))
            {
                if(rhs.Data.TryGet(out var Datarhs))
                {
                    item.Data = Datarhs.ToArray();
                }
                else
                {
                    item.Data = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Model_FieldIndex.AlternateTextures) ?? true))
            {
                errorMask?.PushIndex((int)Model_FieldIndex.AlternateTextures);
                try
                {
                    if ((rhs.AlternateTextures != null))
                    {
                        item.AlternateTextures = 
                            rhs.AlternateTextures
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<AlternateTexture>();
                    }
                    else
                    {
                        item.AlternateTextures = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public Model DeepCopy(
            IModelGetter item,
            Model.TranslationMask? copyMask = null)
        {
            Model ret = (Model)((ModelCommon)((IModelGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Model DeepCopy(
            IModelGetter item,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? copyMask = null)
        {
            Model ret = (Model)((ModelCommon)((IModelGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Model DeepCopy(
            IModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Model ret = (Model)((ModelCommon)((IModelGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Model
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Model_Registration.Instance;
        public static Model_Registration Registration => Model_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ModelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ModelSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IModelGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ModelXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ModelXmlWriteTranslation Instance = new ModelXmlWriteTranslation();

        public static void WriteToNodeXml(
            IModelGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Model_FieldIndex.File) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.File),
                    item: item.File,
                    fieldIndex: (int)Model_FieldIndex.File,
                    errorMask: errorMask);
            }
            if ((item.Data != null)
                && (translationMask?.GetShouldTranslate((int)Model_FieldIndex.Data) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Data),
                    item: item.Data.Value,
                    fieldIndex: (int)Model_FieldIndex.Data,
                    errorMask: errorMask);
            }
            if ((item.AlternateTextures != null)
                && (translationMask?.GetShouldTranslate((int)Model_FieldIndex.AlternateTextures) ?? true))
            {
                ListXmlTranslation<IAlternateTextureGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.AlternateTextures),
                    item: item.AlternateTextures,
                    fieldIndex: (int)Model_FieldIndex.AlternateTextures,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Model_FieldIndex.AlternateTextures),
                    transl: (XElement subNode, IAlternateTextureGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((AlternateTextureXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Model");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Model");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IModelGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IModelGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IModelGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ModelXmlCreateTranslation
    {
        public readonly static ModelXmlCreateTranslation Instance = new ModelXmlCreateTranslation();

        public static void FillPublicXml(
            IModel item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModelXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IModel item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "File":
                    errorMask?.PushIndex((int)Model_FieldIndex.File);
                    try
                    {
                        item.File = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Data":
                    errorMask?.PushIndex((int)Model_FieldIndex.Data);
                    try
                    {
                        item.Data = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AlternateTextures":
                    errorMask?.PushIndex((int)Model_FieldIndex.AlternateTextures);
                    try
                    {
                        if (ListXmlTranslation<AlternateTexture>.Instance.Parse(
                            node: node,
                            enumer: out var AlternateTexturesItem,
                            transl: LoquiXmlTranslation<AlternateTexture>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.AlternateTextures = AlternateTexturesItem.ToExtendedList();
                        }
                        else
                        {
                            item.AlternateTextures = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ModelXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IModelGetter item,
            XElement node,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Model.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IModelGetter item,
            string path,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModelGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModelGetter item,
            Stream stream,
            out Model.ErrorMask errorMask,
            Model.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IModelGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IModelGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((ModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IModelGetter item,
            XElement node,
            string? name = null,
            Model.TranslationMask? translationMask = null)
        {
            ((ModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IModelGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModelGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ModelXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ModelBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ModelBinaryWriteTranslation Instance = new ModelBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IModelGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferenceReader masterReferences)
        {
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.File,
                header: recordTypeConverter.ConvertToCustom(Model_Registration.MODL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Data,
                header: recordTypeConverter.ConvertToCustom(Model_Registration.MODT_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IAlternateTextureGetter>.Instance.Write(
                writer: writer,
                items: item.AlternateTextures,
                masterReferences: masterReferences,
                transl: (MutagenWriter subWriter, IAlternateTextureGetter subItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((AlternateTextureBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        masterReferences: m);
                });
        }

        public void Write(
            MutagenWriter writer,
            IModelGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IModelGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ModelBinaryCreateTranslation
    {
        public readonly static ModelBinaryCreateTranslation Instance = new ModelBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ModelBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IModelGetter item,
            MutagenWriter writer,
            MasterReferenceReader masterReferences)
        {
            ((ModelBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ModelBinaryOverlay :
        BinaryOverlay,
        IModelGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Model_Registration.Instance;
        public static Model_Registration Registration => Model_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ModelCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ModelSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IModelGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IModelGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IModelGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IModelGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => ModelCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ModelXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ModelXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ModelBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region File
        private int? _FileLocation;
        public String File => _FileLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _FileLocation.Value, _package.Meta)) : string.Empty;
        #endregion
        #region Data
        private int? _DataLocation;
        public ReadOnlyMemorySlice<Byte>? Data => _DataLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _DataLocation.Value, _package.Meta).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IReadOnlyList<IAlternateTextureGetter>? AlternateTextures { get; private set; }
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ModelBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ModelBinaryOverlay ModelFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ModelBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Model_FieldIndex.File) return TryGet<int?>.Failure;
                    _FileLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.File);
                }
                case 0x54444F4D: // MODT
                {
                    _DataLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.Data);
                }
                case 0x53444F4D: // MODS
                {
                    throw new NotImplementedException();
                    return TryGet<int?>.Succeed((int)Model_FieldIndex.AlternateTextures);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

