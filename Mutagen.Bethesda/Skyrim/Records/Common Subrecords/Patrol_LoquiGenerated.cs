/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Patrol :
        IPatrol,
        ILoquiObjectSetter<Patrol>,
        IEquatable<Patrol>,
        IEqualsMask
    {
        #region Ctor
        public Patrol()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region IdleTime
        public Single IdleTime { get; set; } = default;
        #endregion
        #region Idle
        public FormLink<IdleAnimation> Idle { get; set; } = new FormLink<IdleAnimation>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<IIdleAnimationGetter> IPatrolGetter.Idle => this.Idle;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _Unknown;
        public Byte[]? Unknown
        {
            get => this._Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPatrolGetter.Unknown => this.Unknown;
        #endregion
        #region Unknown2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _Unknown2;
        public Byte[]? Unknown2
        {
            get => this._Unknown2;
            set => this._Unknown2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPatrolGetter.Unknown2 => this.Unknown2;
        #endregion
        #region Topics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ATopicReference> _Topics = new ExtendedList<ATopicReference>();
        public ExtendedList<ATopicReference> Topics
        {
            get => this._Topics;
            protected set => this._Topics = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IATopicReferenceGetter> IPatrolGetter.Topics => _Topics;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PatrolMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPatrolGetter rhs)) return false;
            return ((PatrolCommon)((IPatrolGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Patrol obj)
        {
            return ((PatrolCommon)((IPatrolGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PatrolCommon)((IPatrolGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => PatrolXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PatrolXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Patrol CreateFromXml(
            XElement node,
            Patrol.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Patrol CreateFromXml(
            XElement node,
            out Patrol.ErrorMask errorMask,
            Patrol.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Patrol.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Patrol CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Patrol();
            ((PatrolSetterCommon)((IPatrolGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Patrol CreateFromXml(
            string path,
            Patrol.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Patrol CreateFromXml(
            string path,
            out Patrol.ErrorMask errorMask,
            Patrol.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Patrol CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Patrol.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Patrol CreateFromXml(
            Stream stream,
            Patrol.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Patrol CreateFromXml(
            Stream stream,
            out Patrol.ErrorMask errorMask,
            Patrol.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Patrol CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Patrol.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.IdleTime = initialValue;
                this.Idle = initialValue;
                this.Unknown = initialValue;
                this.Unknown2 = initialValue;
                this.Topics = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>());
            }

            public Mask(
                TItem IdleTime,
                TItem Idle,
                TItem Unknown,
                TItem Unknown2,
                TItem Topics)
            {
                this.IdleTime = IdleTime;
                this.Idle = Idle;
                this.Unknown = Unknown;
                this.Unknown2 = Unknown2;
                this.Topics = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>?>(Topics, Enumerable.Empty<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem IdleTime;
            public TItem Idle;
            public TItem Unknown;
            public TItem Unknown2;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ATopicReference.Mask<TItem>?>>?>? Topics;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.IdleTime, rhs.IdleTime)) return false;
                if (!object.Equals(this.Idle, rhs.Idle)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.Topics, rhs.Topics)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.IdleTime);
                hash.Add(this.Idle);
                hash.Add(this.Unknown);
                hash.Add(this.Unknown2);
                hash.Add(this.Topics);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.IdleTime)) return false;
                if (!eval(this.Idle)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Unknown2)) return false;
                if (this.Topics != null)
                {
                    if (!eval(this.Topics.Overall)) return false;
                    if (this.Topics.Specific != null)
                    {
                        foreach (var item in this.Topics.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.IdleTime)) return true;
                if (eval(this.Idle)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Unknown2)) return true;
                if (this.Topics != null)
                {
                    if (eval(this.Topics.Overall)) return true;
                    if (this.Topics.Specific != null)
                    {
                        foreach (var item in this.Topics.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Patrol.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.IdleTime = eval(this.IdleTime);
                obj.Idle = eval(this.Idle);
                obj.Unknown = eval(this.Unknown);
                obj.Unknown2 = eval(this.Unknown2);
                if (Topics != null)
                {
                    obj.Topics = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ATopicReference.Mask<R>?>>?>(eval(this.Topics.Overall), Enumerable.Empty<MaskItemIndexed<R, ATopicReference.Mask<R>?>>());
                    if (Topics.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ATopicReference.Mask<R>?>>();
                        obj.Topics.Specific = l;
                        foreach (var item in Topics.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ATopicReference.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ATopicReference.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Patrol.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Patrol.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Patrol.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.IdleTime ?? true)
                    {
                        fg.AppendItem(IdleTime, "IdleTime");
                    }
                    if (printMask?.Idle ?? true)
                    {
                        fg.AppendItem(Idle, "Idle");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                    if ((printMask?.Topics?.Overall ?? true)
                        && Topics.TryGet(out var TopicsItem))
                    {
                        fg.AppendLine("Topics =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TopicsItem.Overall);
                            if (TopicsItem.Specific != null)
                            {
                                foreach (var subItem in TopicsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? IdleTime;
            public Exception? Idle;
            public Exception? Unknown;
            public Exception? Unknown2;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ATopicReference.ErrorMask?>>?>? Topics;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Patrol_FieldIndex enu = (Patrol_FieldIndex)index;
                switch (enu)
                {
                    case Patrol_FieldIndex.IdleTime:
                        return IdleTime;
                    case Patrol_FieldIndex.Idle:
                        return Idle;
                    case Patrol_FieldIndex.Unknown:
                        return Unknown;
                    case Patrol_FieldIndex.Unknown2:
                        return Unknown2;
                    case Patrol_FieldIndex.Topics:
                        return Topics;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Patrol_FieldIndex enu = (Patrol_FieldIndex)index;
                switch (enu)
                {
                    case Patrol_FieldIndex.IdleTime:
                        this.IdleTime = ex;
                        break;
                    case Patrol_FieldIndex.Idle:
                        this.Idle = ex;
                        break;
                    case Patrol_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Patrol_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case Patrol_FieldIndex.Topics:
                        this.Topics = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ATopicReference.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Patrol_FieldIndex enu = (Patrol_FieldIndex)index;
                switch (enu)
                {
                    case Patrol_FieldIndex.IdleTime:
                        this.IdleTime = (Exception?)obj;
                        break;
                    case Patrol_FieldIndex.Idle:
                        this.Idle = (Exception?)obj;
                        break;
                    case Patrol_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Patrol_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case Patrol_FieldIndex.Topics:
                        this.Topics = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ATopicReference.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (IdleTime != null) return true;
                if (Idle != null) return true;
                if (Unknown != null) return true;
                if (Unknown2 != null) return true;
                if (Topics != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(IdleTime, "IdleTime");
                fg.AppendItem(Idle, "Idle");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(Unknown2, "Unknown2");
                if (Topics.TryGet(out var TopicsItem))
                {
                    fg.AppendLine("Topics =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TopicsItem.Overall);
                        if (TopicsItem.Specific != null)
                        {
                            foreach (var subItem in TopicsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.IdleTime = this.IdleTime.Combine(rhs.IdleTime);
                ret.Idle = this.Idle.Combine(rhs.Idle);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.Topics = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ATopicReference.ErrorMask?>>?>(ExceptionExt.Combine(this.Topics?.Overall, rhs.Topics?.Overall), ExceptionExt.Combine(this.Topics?.Specific, rhs.Topics?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool IdleTime;
            public bool Idle;
            public bool Unknown;
            public bool Unknown2;
            public MaskItem<bool, ATopicReference.TranslationMask?> Topics;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.IdleTime = defaultOn;
                this.Idle = defaultOn;
                this.Unknown = defaultOn;
                this.Unknown2 = defaultOn;
                this.Topics = new MaskItem<bool, ATopicReference.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((IdleTime, null));
                ret.Add((Idle, null));
                ret.Add((Unknown, null));
                ret.Add((Unknown2, null));
                ret.Add((Topics?.Overall ?? true, Topics?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Patrol_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => PatrolCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => PatrolCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PatrolCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PatrolCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PatrolBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PatrolBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Patrol CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static Patrol CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Patrol();
            ((PatrolSetterCommon)((IPatrolGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPatrolGetter)rhs, include);

        void IClearable.Clear()
        {
            ((PatrolSetterCommon)((IPatrolGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Patrol GetNew()
        {
            return new Patrol();
        }

    }
    #endregion

    #region Interface
    public partial interface IPatrol :
        IPatrolGetter,
        ILoquiObjectSetter<IPatrol>
    {
        new Single IdleTime { get; set; }
        new FormLink<IdleAnimation> Idle { get; set; }
        new Byte[]? Unknown { get; set; }
        new Byte[]? Unknown2 { get; set; }
        new ExtendedList<ATopicReference> Topics { get; }
    }

    public partial interface IPatrolGetter :
        ILoquiObject,
        ILoquiObject<IPatrolGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => Patrol_Registration.Instance;
        Single IdleTime { get; }
        IFormLink<IIdleAnimationGetter> Idle { get; }
        ReadOnlyMemorySlice<Byte>? Unknown { get; }
        ReadOnlyMemorySlice<Byte>? Unknown2 { get; }
        IReadOnlyList<IATopicReferenceGetter> Topics { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PatrolMixIn
    {
        public static void Clear(this IPatrol item)
        {
            ((PatrolSetterCommon)((IPatrolGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Patrol.Mask<bool> GetEqualsMask(
            this IPatrolGetter item,
            IPatrolGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PatrolCommon)((IPatrolGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPatrolGetter item,
            string? name = null,
            Patrol.Mask<bool>? printMask = null)
        {
            return ((PatrolCommon)((IPatrolGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPatrolGetter item,
            FileGeneration fg,
            string? name = null,
            Patrol.Mask<bool>? printMask = null)
        {
            ((PatrolCommon)((IPatrolGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPatrolGetter item,
            Patrol.Mask<bool?> checkMask)
        {
            return ((PatrolCommon)((IPatrolGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Patrol.Mask<bool> GetHasBeenSetMask(this IPatrolGetter item)
        {
            var ret = new Patrol.Mask<bool>(false);
            ((PatrolCommon)((IPatrolGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPatrolGetter item,
            IPatrolGetter rhs)
        {
            return ((PatrolCommon)((IPatrolGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPatrol lhs,
            IPatrolGetter rhs)
        {
            ((PatrolSetterTranslationCommon)((IPatrolGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IPatrol lhs,
            IPatrolGetter rhs,
            Patrol.TranslationMask? copyMask = null)
        {
            ((PatrolSetterTranslationCommon)((IPatrolGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPatrol lhs,
            IPatrolGetter rhs,
            out Patrol.ErrorMask errorMask,
            Patrol.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PatrolSetterTranslationCommon)((IPatrolGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Patrol.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPatrol lhs,
            IPatrolGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PatrolSetterTranslationCommon)((IPatrolGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Patrol DeepCopy(
            this IPatrolGetter item,
            Patrol.TranslationMask? copyMask = null)
        {
            return ((PatrolSetterTranslationCommon)((IPatrolGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Patrol DeepCopy(
            this IPatrolGetter item,
            out Patrol.ErrorMask errorMask,
            Patrol.TranslationMask? copyMask = null)
        {
            return ((PatrolSetterTranslationCommon)((IPatrolGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Patrol DeepCopy(
            this IPatrolGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PatrolSetterTranslationCommon)((IPatrolGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPatrol item,
            XElement node,
            Patrol.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPatrol item,
            XElement node,
            out Patrol.ErrorMask errorMask,
            Patrol.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Patrol.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IPatrol item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((PatrolSetterCommon)((IPatrolGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPatrol item,
            string path,
            Patrol.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPatrol item,
            string path,
            out Patrol.ErrorMask errorMask,
            Patrol.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPatrol item,
            string path,
            ErrorMaskBuilder? errorMask,
            Patrol.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IPatrol item,
            Stream stream,
            Patrol.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPatrol item,
            Stream stream,
            out Patrol.ErrorMask errorMask,
            Patrol.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPatrol item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Patrol.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IPatrol item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IPatrol item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PatrolSetterCommon)((IPatrolGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Patrol_FieldIndex
    {
        IdleTime = 0,
        Idle = 1,
        Unknown = 2,
        Unknown2 = 3,
        Topics = 4,
    }
    #endregion

    #region Registration
    public partial class Patrol_Registration : ILoquiRegistration
    {
        public static readonly Patrol_Registration Instance = new Patrol_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 315,
            version: 0);

        public const string GUID = "45767f39-c2cf-4ba6-98b0-f63df2d4ff70";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(Patrol.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Patrol.ErrorMask);

        public static readonly Type ClassType = typeof(Patrol);

        public static readonly Type GetterType = typeof(IPatrolGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPatrol);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Patrol";

        public const string Name = "Patrol";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "IDLETIME":
                    return (ushort)Patrol_FieldIndex.IdleTime;
                case "IDLE":
                    return (ushort)Patrol_FieldIndex.Idle;
                case "UNKNOWN":
                    return (ushort)Patrol_FieldIndex.Unknown;
                case "UNKNOWN2":
                    return (ushort)Patrol_FieldIndex.Unknown2;
                case "TOPICS":
                    return (ushort)Patrol_FieldIndex.Topics;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Patrol_FieldIndex enu = (Patrol_FieldIndex)index;
            switch (enu)
            {
                case Patrol_FieldIndex.Topics:
                    return true;
                case Patrol_FieldIndex.IdleTime:
                case Patrol_FieldIndex.Idle:
                case Patrol_FieldIndex.Unknown:
                case Patrol_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Patrol_FieldIndex enu = (Patrol_FieldIndex)index;
            switch (enu)
            {
                case Patrol_FieldIndex.Topics:
                    return true;
                case Patrol_FieldIndex.IdleTime:
                case Patrol_FieldIndex.Idle:
                case Patrol_FieldIndex.Unknown:
                case Patrol_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Patrol_FieldIndex enu = (Patrol_FieldIndex)index;
            switch (enu)
            {
                case Patrol_FieldIndex.IdleTime:
                case Patrol_FieldIndex.Idle:
                case Patrol_FieldIndex.Unknown:
                case Patrol_FieldIndex.Unknown2:
                case Patrol_FieldIndex.Topics:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Patrol_FieldIndex enu = (Patrol_FieldIndex)index;
            switch (enu)
            {
                case Patrol_FieldIndex.IdleTime:
                    return "IdleTime";
                case Patrol_FieldIndex.Idle:
                    return "Idle";
                case Patrol_FieldIndex.Unknown:
                    return "Unknown";
                case Patrol_FieldIndex.Unknown2:
                    return "Unknown2";
                case Patrol_FieldIndex.Topics:
                    return "Topics";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Patrol_FieldIndex enu = (Patrol_FieldIndex)index;
            switch (enu)
            {
                case Patrol_FieldIndex.IdleTime:
                case Patrol_FieldIndex.Idle:
                case Patrol_FieldIndex.Unknown:
                case Patrol_FieldIndex.Unknown2:
                case Patrol_FieldIndex.Topics:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Patrol_FieldIndex enu = (Patrol_FieldIndex)index;
            switch (enu)
            {
                case Patrol_FieldIndex.IdleTime:
                case Patrol_FieldIndex.Idle:
                case Patrol_FieldIndex.Unknown:
                case Patrol_FieldIndex.Unknown2:
                case Patrol_FieldIndex.Topics:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Patrol_FieldIndex enu = (Patrol_FieldIndex)index;
            switch (enu)
            {
                case Patrol_FieldIndex.IdleTime:
                    return typeof(Single);
                case Patrol_FieldIndex.Idle:
                    return typeof(FormLink<IdleAnimation>);
                case Patrol_FieldIndex.Unknown:
                    return typeof(Byte[]);
                case Patrol_FieldIndex.Unknown2:
                    return typeof(Byte[]);
                case Patrol_FieldIndex.Topics:
                    return typeof(ExtendedList<ATopicReference>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PatrolXmlWriteTranslation);
        public static readonly RecordType XPRD_HEADER = new RecordType("XPRD");
        public static readonly RecordType XPPA_HEADER = new RecordType("XPPA");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType SCTX_HEADER = new RecordType("SCTX");
        public static readonly RecordType PDTO_HEADER = new RecordType("PDTO");
        public static readonly RecordType TriggeringRecordType = XPRD_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        public static readonly Type BinaryWriteTranslation = typeof(PatrolBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PatrolSetterCommon
    {
        public static readonly PatrolSetterCommon Instance = new PatrolSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPatrol item)
        {
            ClearPartial();
            item.IdleTime = default;
            item.Idle = FormLink<IdleAnimation>.Null;
            item.Unknown = default;
            item.Unknown2 = default;
            item.Topics.Clear();
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IPatrol item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PatrolXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPatrol item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: PatrolBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PatrolBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class PatrolCommon
    {
        public static readonly PatrolCommon Instance = new PatrolCommon();

        public Patrol.Mask<bool> GetEqualsMask(
            IPatrolGetter item,
            IPatrolGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Patrol.Mask<bool>(false);
            ((PatrolCommon)((IPatrolGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPatrolGetter item,
            IPatrolGetter rhs,
            Patrol.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.IdleTime = item.IdleTime.EqualsWithin(rhs.IdleTime);
            ret.Idle = object.Equals(item.Idle, rhs.Idle);
            ret.Unknown = MemorySliceExt.Equal(item.Unknown, rhs.Unknown);
            ret.Unknown2 = MemorySliceExt.Equal(item.Unknown2, rhs.Unknown2);
            ret.Topics = item.Topics.CollectionEqualsHelper(
                rhs.Topics,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IPatrolGetter item,
            string? name = null,
            Patrol.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPatrolGetter item,
            FileGeneration fg,
            string? name = null,
            Patrol.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Patrol =>");
            }
            else
            {
                fg.AppendLine($"{name} (Patrol) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPatrolGetter item,
            FileGeneration fg,
            Patrol.Mask<bool>? printMask = null)
        {
            if (printMask?.IdleTime ?? true)
            {
                fg.AppendItem(item.IdleTime, "IdleTime");
            }
            if (printMask?.Idle ?? true)
            {
                fg.AppendItem(item.Idle, "Idle");
            }
            if ((printMask?.Unknown ?? true)
                && item.Unknown.TryGet(out var UnknownItem))
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(UnknownItem)}");
            }
            if ((printMask?.Unknown2 ?? true)
                && item.Unknown2.TryGet(out var Unknown2Item))
            {
                fg.AppendLine($"Unknown2 => {SpanExt.ToHexString(Unknown2Item)}");
            }
            if (printMask?.Topics?.Overall ?? true)
            {
                fg.AppendLine("Topics =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Topics)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IPatrolGetter item,
            Patrol.Mask<bool?> checkMask)
        {
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != (item.Unknown != null)) return false;
            if (checkMask.Unknown2.HasValue && checkMask.Unknown2.Value != (item.Unknown2 != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IPatrolGetter item,
            Patrol.Mask<bool> mask)
        {
            mask.IdleTime = true;
            mask.Idle = true;
            mask.Unknown = (item.Unknown != null);
            mask.Unknown2 = (item.Unknown2 != null);
            var TopicsItem = item.Topics;
            mask.Topics = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, ATopicReference.Mask<bool>?>>?>(true, TopicsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, ATopicReference.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPatrolGetter? lhs,
            IPatrolGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.IdleTime.EqualsWithin(rhs.IdleTime)) return false;
            if (!lhs.Idle.Equals(rhs.Idle)) return false;
            if (!MemorySliceExt.Equal(lhs.Unknown, rhs.Unknown)) return false;
            if (!MemorySliceExt.Equal(lhs.Unknown2, rhs.Unknown2)) return false;
            if (!lhs.Topics.SequenceEqual(rhs.Topics)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IPatrolGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.IdleTime);
            hash.Add(item.Idle);
            if (item.Unknown.TryGet(out var UnknownItem))
            {
                hash.Add(UnknownItem);
            }
            if (item.Unknown2.TryGet(out var Unknown2Item))
            {
                hash.Add(Unknown2Item);
            }
            hash.Add(item.Topics);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Patrol.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IPatrolGetter obj)
        {
            yield return obj.Idle.FormKey;
            foreach (var item in obj.Topics.WhereCastable<IATopicReferenceGetter, ILinkedFormKeyContainer> ()
                .SelectMany((f) => f.LinkFormKeys))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IPatrolGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class PatrolSetterTranslationCommon
    {
        public static readonly PatrolSetterTranslationCommon Instance = new PatrolSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IPatrol item,
            IPatrolGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)Patrol_FieldIndex.IdleTime) ?? true))
            {
                item.IdleTime = rhs.IdleTime;
            }
            if ((copyMask?.GetShouldTranslate((int)Patrol_FieldIndex.Idle) ?? true))
            {
                item.Idle = rhs.Idle.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Patrol_FieldIndex.Unknown) ?? true))
            {
                if(rhs.Unknown.TryGet(out var Unknownrhs))
                {
                    item.Unknown = Unknownrhs.ToArray();
                }
                else
                {
                    item.Unknown = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Patrol_FieldIndex.Unknown2) ?? true))
            {
                if(rhs.Unknown2.TryGet(out var Unknown2rhs))
                {
                    item.Unknown2 = Unknown2rhs.ToArray();
                }
                else
                {
                    item.Unknown2 = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Patrol_FieldIndex.Topics) ?? true))
            {
                errorMask?.PushIndex((int)Patrol_FieldIndex.Topics);
                try
                {
                    item.Topics.SetTo(
                        rhs.Topics
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public Patrol DeepCopy(
            IPatrolGetter item,
            Patrol.TranslationMask? copyMask = null)
        {
            Patrol ret = (Patrol)((PatrolCommon)((IPatrolGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Patrol DeepCopy(
            IPatrolGetter item,
            out Patrol.ErrorMask errorMask,
            Patrol.TranslationMask? copyMask = null)
        {
            Patrol ret = (Patrol)((PatrolCommon)((IPatrolGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Patrol DeepCopy(
            IPatrolGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Patrol ret = (Patrol)((PatrolCommon)((IPatrolGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Patrol
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Patrol_Registration.Instance;
        public static Patrol_Registration Registration => Patrol_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PatrolCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PatrolSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PatrolSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPatrolGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPatrolGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPatrolGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PatrolXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static PatrolXmlWriteTranslation Instance = new PatrolXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPatrolGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Patrol_FieldIndex.IdleTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.IdleTime),
                    item: item.IdleTime,
                    fieldIndex: (int)Patrol_FieldIndex.IdleTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Patrol_FieldIndex.Idle) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Idle),
                    item: item.Idle.FormKey,
                    fieldIndex: (int)Patrol_FieldIndex.Idle,
                    errorMask: errorMask);
            }
            if ((item.Unknown != null)
                && (translationMask?.GetShouldTranslate((int)Patrol_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown.Value,
                    fieldIndex: (int)Patrol_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((item.Unknown2 != null)
                && (translationMask?.GetShouldTranslate((int)Patrol_FieldIndex.Unknown2) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown2),
                    item: item.Unknown2.Value,
                    fieldIndex: (int)Patrol_FieldIndex.Unknown2,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Patrol_FieldIndex.Topics) ?? true))
            {
                ListXmlTranslation<IATopicReferenceGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Topics),
                    item: item.Topics,
                    fieldIndex: (int)Patrol_FieldIndex.Topics,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Patrol_FieldIndex.Topics),
                    transl: (XElement subNode, IATopicReferenceGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((ATopicReferenceXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IPatrolGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Patrol");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Patrol");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPatrolGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IPatrolGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IPatrolGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class PatrolXmlCreateTranslation
    {
        public readonly static PatrolXmlCreateTranslation Instance = new PatrolXmlCreateTranslation();

        public static void FillPublicXml(
            IPatrol item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PatrolXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPatrol item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "IdleTime":
                    errorMask?.PushIndex((int)Patrol_FieldIndex.IdleTime);
                    try
                    {
                        item.IdleTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Idle":
                    errorMask?.PushIndex((int)Patrol_FieldIndex.Idle);
                    try
                    {
                        item.Idle = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)Patrol_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown2":
                    errorMask?.PushIndex((int)Patrol_FieldIndex.Unknown2);
                    try
                    {
                        item.Unknown2 = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Topics":
                    errorMask?.PushIndex((int)Patrol_FieldIndex.Topics);
                    try
                    {
                        if (ListXmlTranslation<ATopicReference>.Instance.Parse(
                            node: node,
                            enumer: out var TopicsItem,
                            transl: LoquiXmlTranslation<ATopicReference>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Topics.SetTo(TopicsItem);
                        }
                        else
                        {
                            item.Topics.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class PatrolXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPatrolGetter item,
            XElement node,
            out Patrol.ErrorMask errorMask,
            Patrol.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((PatrolXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Patrol.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPatrolGetter item,
            string path,
            out Patrol.ErrorMask errorMask,
            Patrol.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPatrolGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPatrolGetter item,
            Stream stream,
            out Patrol.ErrorMask errorMask,
            Patrol.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPatrolGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPatrolGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((PatrolXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IPatrolGetter item,
            XElement node,
            string? name = null,
            Patrol.TranslationMask? translationMask = null)
        {
            ((PatrolXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IPatrolGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((PatrolXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPatrolGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((PatrolXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PatrolBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static PatrolBinaryWriteTranslation Instance = new PatrolBinaryWriteTranslation();

        static partial void WriteBinaryPatrolScriptMarkerCustom(
            MutagenWriter writer,
            IPatrolGetter item);

        public static void WriteBinaryPatrolScriptMarker(
            MutagenWriter writer,
            IPatrolGetter item)
        {
            WriteBinaryPatrolScriptMarkerCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryTopicsCustom(
            MutagenWriter writer,
            IPatrolGetter item);

        public static void WriteBinaryTopics(
            MutagenWriter writer,
            IPatrolGetter item)
        {
            WriteBinaryTopicsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IPatrolGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.IdleTime,
                header: recordTypeConverter.ConvertToCustom(Patrol_Registration.XPRD_HEADER));
            PatrolBinaryWriteTranslation.WriteBinaryPatrolScriptMarker(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Idle,
                header: recordTypeConverter.ConvertToCustom(Patrol_Registration.INAM_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown,
                header: recordTypeConverter.ConvertToCustom(Patrol_Registration.SCHR_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown2,
                header: recordTypeConverter.ConvertToCustom(Patrol_Registration.SCTX_HEADER));
            PatrolBinaryWriteTranslation.WriteBinaryTopics(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IPatrolGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPatrolGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PatrolBinaryCreateTranslation
    {
        public readonly static PatrolBinaryCreateTranslation Instance = new PatrolBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPatrol item,
            MutagenFrame frame)
        {
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IPatrol item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x44525058: // XPRD
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Patrol_FieldIndex.IdleTime) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.IdleTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Patrol_FieldIndex.IdleTime);
                }
                case 0x41505058: // XPPA
                {
                    PatrolBinaryCreateTranslation.FillBinaryPatrolScriptMarkerCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed(lastParsed);
                }
                case 0x4D414E49: // INAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Idle = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Patrol_FieldIndex.Idle);
                }
                case 0x52484353: // SCHR
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Unknown = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Patrol_FieldIndex.Unknown);
                }
                case 0x58544353: // SCTX
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Unknown2 = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Patrol_FieldIndex.Unknown2);
                }
                case 0x4F544450: // PDTO
                {
                    PatrolBinaryCreateTranslation.FillBinaryTopicsCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)Patrol_FieldIndex.Topics);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

        static partial void FillBinaryPatrolScriptMarkerCustom(
            MutagenFrame frame,
            IPatrol item);

        public static void FillBinaryPatrolScriptMarkerCustomPublic(
            MutagenFrame frame,
            IPatrol item)
        {
            FillBinaryPatrolScriptMarkerCustom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryTopicsCustom(
            MutagenFrame frame,
            IPatrol item);

        public static void FillBinaryTopicsCustomPublic(
            MutagenFrame frame,
            IPatrol item)
        {
            FillBinaryTopicsCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class PatrolBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPatrolGetter item,
            MutagenWriter writer)
        {
            ((PatrolBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PatrolBinaryOverlay :
        BinaryOverlay,
        IPatrolGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Patrol_Registration.Instance;
        public static Patrol_Registration Registration => Patrol_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PatrolCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PatrolSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPatrolGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPatrolGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPatrolGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPatrolGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => PatrolCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => PatrolCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PatrolCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PatrolCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => PatrolXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PatrolXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PatrolBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PatrolBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region IdleTime
        private int? _IdleTimeLocation;
        public Single IdleTime => _IdleTimeLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _IdleTimeLocation.Value, _package.MetaData.Constants)) : default;
        #endregion
        #region PatrolScriptMarker
        partial void PatrolScriptMarkerCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region Idle
        private int? _IdleLocation;
        public bool Idle_IsSet => _IdleLocation.HasValue;
        public IFormLink<IIdleAnimationGetter> Idle => _IdleLocation.HasValue ? new FormLink<IIdleAnimationGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _IdleLocation.Value, _package.MetaData.Constants)))) : FormLink<IIdleAnimationGetter>.Null;
        #endregion
        #region Unknown
        private int? _UnknownLocation;
        public ReadOnlyMemorySlice<Byte>? Unknown => _UnknownLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _UnknownLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Unknown2
        private int? _Unknown2Location;
        public ReadOnlyMemorySlice<Byte>? Unknown2 => _Unknown2Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _Unknown2Location.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Topics
        partial void TopicsCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        protected PatrolBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static PatrolBinaryOverlay PatrolFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PatrolBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static PatrolBinaryOverlay PatrolFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return PatrolFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x44525058: // XPRD
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Patrol_FieldIndex.IdleTime) return TryGet<int?>.Failure;
                    _IdleTimeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Patrol_FieldIndex.IdleTime);
                }
                case 0x41505058: // XPPA
                {
                    PatrolScriptMarkerCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(lastParsed);
                }
                case 0x4D414E49: // INAM
                {
                    _IdleLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Patrol_FieldIndex.Idle);
                }
                case 0x52484353: // SCHR
                {
                    _UnknownLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Patrol_FieldIndex.Unknown);
                }
                case 0x58544353: // SCTX
                {
                    _Unknown2Location = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Patrol_FieldIndex.Unknown2);
                }
                case 0x4F544450: // PDTO
                {
                    TopicsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return TryGet<int?>.Succeed((int)Patrol_FieldIndex.Topics);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PatrolMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

