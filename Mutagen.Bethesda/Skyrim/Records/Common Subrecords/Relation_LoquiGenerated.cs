/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Relation :
        IRelation,
        ILoquiObjectSetter<Relation>,
        IEquatable<Relation>,
        IEqualsMask
    {
        #region Ctor
        public Relation()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Faction
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<Faction> _Faction = new FormLink<Faction>();
        public IFormLink<Faction> Faction => this._Faction;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IFactionGetter> IRelationGetter.Faction => this.Faction;
        #endregion
        #region Modifier
        public Int32 Modifier { get; set; } = default;
        #endregion
        #region GroupCombatReaction
        public Combat GroupCombatReaction { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RelationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRelationGetter rhs)) return false;
            return ((RelationCommon)((IRelationGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Relation obj)
        {
            return ((RelationCommon)((IRelationGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RelationCommon)((IRelationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => RelationXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RelationXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Relation CreateFromXml(
            XElement node,
            Relation.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Relation CreateFromXml(
            XElement node,
            out Relation.ErrorMask errorMask,
            Relation.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Relation.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Relation CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Relation();
            ((RelationSetterCommon)((IRelationGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Relation CreateFromXml(
            string path,
            Relation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Relation CreateFromXml(
            string path,
            out Relation.ErrorMask errorMask,
            Relation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Relation CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Relation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Relation CreateFromXml(
            Stream stream,
            Relation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Relation CreateFromXml(
            Stream stream,
            out Relation.ErrorMask errorMask,
            Relation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Relation CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Relation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Faction = initialValue;
                this.Modifier = initialValue;
                this.GroupCombatReaction = initialValue;
            }

            public Mask(
                TItem Faction,
                TItem Modifier,
                TItem GroupCombatReaction)
            {
                this.Faction = Faction;
                this.Modifier = Modifier;
                this.GroupCombatReaction = GroupCombatReaction;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Faction;
            public TItem Modifier;
            public TItem GroupCombatReaction;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Faction, rhs.Faction)) return false;
                if (!object.Equals(this.Modifier, rhs.Modifier)) return false;
                if (!object.Equals(this.GroupCombatReaction, rhs.GroupCombatReaction)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Faction?.GetHashCode());
                ret = ret.CombineHashCode(this.Modifier?.GetHashCode());
                ret = ret.CombineHashCode(this.GroupCombatReaction?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Faction)) return false;
                if (!eval(this.Modifier)) return false;
                if (!eval(this.GroupCombatReaction)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Faction)) return true;
                if (eval(this.Modifier)) return true;
                if (eval(this.GroupCombatReaction)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Relation.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Faction = eval(this.Faction);
                obj.Modifier = eval(this.Modifier);
                obj.GroupCombatReaction = eval(this.GroupCombatReaction);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Relation.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Relation.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Relation.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Faction ?? true)
                    {
                        fg.AppendItem(Faction, "Faction");
                    }
                    if (printMask?.Modifier ?? true)
                    {
                        fg.AppendItem(Modifier, "Modifier");
                    }
                    if (printMask?.GroupCombatReaction ?? true)
                    {
                        fg.AppendItem(GroupCombatReaction, "GroupCombatReaction");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Faction;
            public Exception? Modifier;
            public Exception? GroupCombatReaction;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Relation_FieldIndex enu = (Relation_FieldIndex)index;
                switch (enu)
                {
                    case Relation_FieldIndex.Faction:
                        return Faction;
                    case Relation_FieldIndex.Modifier:
                        return Modifier;
                    case Relation_FieldIndex.GroupCombatReaction:
                        return GroupCombatReaction;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Relation_FieldIndex enu = (Relation_FieldIndex)index;
                switch (enu)
                {
                    case Relation_FieldIndex.Faction:
                        this.Faction = ex;
                        break;
                    case Relation_FieldIndex.Modifier:
                        this.Modifier = ex;
                        break;
                    case Relation_FieldIndex.GroupCombatReaction:
                        this.GroupCombatReaction = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Relation_FieldIndex enu = (Relation_FieldIndex)index;
                switch (enu)
                {
                    case Relation_FieldIndex.Faction:
                        this.Faction = (Exception?)obj;
                        break;
                    case Relation_FieldIndex.Modifier:
                        this.Modifier = (Exception?)obj;
                        break;
                    case Relation_FieldIndex.GroupCombatReaction:
                        this.GroupCombatReaction = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Faction != null) return true;
                if (Modifier != null) return true;
                if (GroupCombatReaction != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Faction, "Faction");
                fg.AppendItem(Modifier, "Modifier");
                fg.AppendItem(GroupCombatReaction, "GroupCombatReaction");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Faction = this.Faction.Combine(rhs.Faction);
                ret.Modifier = this.Modifier.Combine(rhs.Modifier);
                ret.GroupCombatReaction = this.GroupCombatReaction.Combine(rhs.GroupCombatReaction);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Faction;
            public bool Modifier;
            public bool GroupCombatReaction;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Faction = defaultOn;
                this.Modifier = defaultOn;
                this.GroupCombatReaction = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Faction, null));
                ret.Add((Modifier, null));
                ret.Add((GroupCombatReaction, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Relation_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => RelationCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RelationBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RelationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Relation CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static Relation CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Relation();
            ((RelationSetterCommon)((IRelationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRelationGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RelationSetterCommon)((IRelationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Relation GetNew()
        {
            return new Relation();
        }

    }
    #endregion

    #region Interface
    public partial interface IRelation :
        IRelationGetter,
        ILoquiObjectSetter<IRelation>
    {
        new IFormLink<Faction> Faction { get; }
        new Int32 Modifier { get; set; }
        new Combat GroupCombatReaction { get; set; }
    }

    public partial interface IRelationGetter :
        ILoquiObject,
        ILoquiObject<IRelationGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        IFormLinkGetter<IFactionGetter> Faction { get; }
        Int32 Modifier { get; }
        Combat GroupCombatReaction { get; }

    }

    #endregion

    #region Common MixIn
    public static class RelationMixIn
    {
        public static void Clear(this IRelation item)
        {
            ((RelationSetterCommon)((IRelationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Relation.Mask<bool> GetEqualsMask(
            this IRelationGetter item,
            IRelationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RelationCommon)((IRelationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRelationGetter item,
            string? name = null,
            Relation.Mask<bool>? printMask = null)
        {
            return ((RelationCommon)((IRelationGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRelationGetter item,
            FileGeneration fg,
            string? name = null,
            Relation.Mask<bool>? printMask = null)
        {
            ((RelationCommon)((IRelationGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRelationGetter item,
            Relation.Mask<bool?> checkMask)
        {
            return ((RelationCommon)((IRelationGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Relation.Mask<bool> GetHasBeenSetMask(this IRelationGetter item)
        {
            var ret = new Relation.Mask<bool>(false);
            ((RelationCommon)((IRelationGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRelationGetter item,
            IRelationGetter rhs)
        {
            return ((RelationCommon)((IRelationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRelation lhs,
            IRelationGetter rhs,
            Relation.TranslationMask? copyMask = null)
        {
            ((RelationSetterTranslationCommon)((IRelationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IRelation lhs,
            IRelationGetter rhs,
            out Relation.ErrorMask errorMask,
            Relation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RelationSetterTranslationCommon)((IRelationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Relation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRelation lhs,
            IRelationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RelationSetterTranslationCommon)((IRelationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Relation DeepCopy(
            this IRelationGetter item,
            Relation.TranslationMask? copyMask = null)
        {
            return ((RelationSetterTranslationCommon)((IRelationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Relation DeepCopy(
            this IRelationGetter item,
            out Relation.ErrorMask errorMask,
            Relation.TranslationMask? copyMask = null)
        {
            return ((RelationSetterTranslationCommon)((IRelationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Relation DeepCopy(
            this IRelationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RelationSetterTranslationCommon)((IRelationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRelation item,
            XElement node,
            Relation.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRelation item,
            XElement node,
            out Relation.ErrorMask errorMask,
            Relation.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Relation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRelation item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((RelationSetterCommon)((IRelationGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelation item,
            string path,
            Relation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelation item,
            string path,
            out Relation.ErrorMask errorMask,
            Relation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelation item,
            string path,
            ErrorMaskBuilder? errorMask,
            Relation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRelation item,
            Stream stream,
            Relation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelation item,
            Stream stream,
            out Relation.ErrorMask errorMask,
            Relation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRelation item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Relation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRelation item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRelation item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RelationSetterCommon)((IRelationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Relation_FieldIndex
    {
        Faction = 0,
        Modifier = 1,
        GroupCombatReaction = 2,
    }
    #endregion

    #region Registration
    public partial class Relation_Registration : ILoquiRegistration
    {
        public static readonly Relation_Registration Instance = new Relation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 26,
            version: 0);

        public const string GUID = "f0ff3ef2-8eb7-4ed0-b2b7-95d96e4e7994";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Relation.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Relation.ErrorMask);

        public static readonly Type ClassType = typeof(Relation);

        public static readonly Type GetterType = typeof(IRelationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRelation);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Relation";

        public const string Name = "Relation";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FACTION":
                    return (ushort)Relation_FieldIndex.Faction;
                case "MODIFIER":
                    return (ushort)Relation_FieldIndex.Modifier;
                case "GROUPCOMBATREACTION":
                    return (ushort)Relation_FieldIndex.GroupCombatReaction;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                case Relation_FieldIndex.Modifier:
                case Relation_FieldIndex.GroupCombatReaction:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                case Relation_FieldIndex.Modifier:
                case Relation_FieldIndex.GroupCombatReaction:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                case Relation_FieldIndex.Modifier:
                case Relation_FieldIndex.GroupCombatReaction:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                    return "Faction";
                case Relation_FieldIndex.Modifier:
                    return "Modifier";
                case Relation_FieldIndex.GroupCombatReaction:
                    return "GroupCombatReaction";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                case Relation_FieldIndex.Modifier:
                case Relation_FieldIndex.GroupCombatReaction:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                case Relation_FieldIndex.Modifier:
                case Relation_FieldIndex.GroupCombatReaction:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Relation_FieldIndex enu = (Relation_FieldIndex)index;
            switch (enu)
            {
                case Relation_FieldIndex.Faction:
                    return typeof(IFormLink<Faction>);
                case Relation_FieldIndex.Modifier:
                    return typeof(Int32);
                case Relation_FieldIndex.GroupCombatReaction:
                    return typeof(Combat);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RelationXmlWriteTranslation);
        public static readonly RecordType XNAM_HEADER = new RecordType("XNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = XNAM_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(RelationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RelationSetterCommon
    {
        public static readonly RelationSetterCommon Instance = new RelationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRelation item)
        {
            ClearPartial();
            item.Faction.FormKey = FormKey.Null;
            item.Modifier = default;
            item.GroupCombatReaction = default;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IRelation item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RelationXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IRelation item,
            MutagenFrame frame)
        {
            item.Faction.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            item.Modifier = frame.ReadInt32();
            item.GroupCombatReaction = EnumBinaryTranslation<Combat>.Instance.Parse(frame: frame.SpawnWithLength(4));
        }
        
        public void CopyInFromBinary(
            IRelation item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(Relation_Registration.XNAM_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class RelationCommon
    {
        public static readonly RelationCommon Instance = new RelationCommon();

        public Relation.Mask<bool> GetEqualsMask(
            IRelationGetter item,
            IRelationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Relation.Mask<bool>(false);
            ((RelationCommon)((IRelationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRelationGetter item,
            IRelationGetter rhs,
            Relation.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Faction = object.Equals(item.Faction, rhs.Faction);
            ret.Modifier = item.Modifier == rhs.Modifier;
            ret.GroupCombatReaction = item.GroupCombatReaction == rhs.GroupCombatReaction;
        }
        
        public string ToString(
            IRelationGetter item,
            string? name = null,
            Relation.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRelationGetter item,
            FileGeneration fg,
            string? name = null,
            Relation.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Relation =>");
            }
            else
            {
                fg.AppendLine($"{name} (Relation) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRelationGetter item,
            FileGeneration fg,
            Relation.Mask<bool>? printMask = null)
        {
            if (printMask?.Faction ?? true)
            {
                fg.AppendItem(item.Faction, "Faction");
            }
            if (printMask?.Modifier ?? true)
            {
                fg.AppendItem(item.Modifier, "Modifier");
            }
            if (printMask?.GroupCombatReaction ?? true)
            {
                fg.AppendItem(item.GroupCombatReaction, "GroupCombatReaction");
            }
        }
        
        public bool HasBeenSet(
            IRelationGetter item,
            Relation.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IRelationGetter item,
            Relation.Mask<bool> mask)
        {
            mask.Faction = true;
            mask.Modifier = true;
            mask.GroupCombatReaction = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRelationGetter? lhs,
            IRelationGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Faction.Equals(rhs.Faction)) return false;
            if (lhs.Modifier != rhs.Modifier) return false;
            if (lhs.GroupCombatReaction != rhs.GroupCombatReaction) return false;
            return true;
        }
        
        public virtual int GetHashCode(IRelationGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Faction).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Modifier).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.GroupCombatReaction).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Relation.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IRelationGetter obj)
        {
            yield return obj.Faction;
            yield break;
        }
        
        #endregion
        
    }
    public partial class RelationSetterTranslationCommon
    {
        public static readonly RelationSetterTranslationCommon Instance = new RelationSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IRelation item,
            IRelationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)Relation_FieldIndex.Faction) ?? true))
            {
                item.Faction.FormKey = rhs.Faction.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Relation_FieldIndex.Modifier) ?? true))
            {
                item.Modifier = rhs.Modifier;
            }
            if ((copyMask?.GetShouldTranslate((int)Relation_FieldIndex.GroupCombatReaction) ?? true))
            {
                item.GroupCombatReaction = rhs.GroupCombatReaction;
            }
        }
        
        #endregion
        
        public Relation DeepCopy(
            IRelationGetter item,
            Relation.TranslationMask? copyMask = null)
        {
            Relation ret = (Relation)((RelationCommon)((IRelationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Relation DeepCopy(
            IRelationGetter item,
            out Relation.ErrorMask errorMask,
            Relation.TranslationMask? copyMask = null)
        {
            Relation ret = (Relation)((RelationCommon)((IRelationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Relation DeepCopy(
            IRelationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Relation ret = (Relation)((RelationCommon)((IRelationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Relation
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Relation_Registration.Instance;
        public static Relation_Registration Registration => Relation_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RelationCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return RelationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RelationSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRelationGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRelationGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRelationGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RelationXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RelationXmlWriteTranslation Instance = new RelationXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRelationGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Relation_FieldIndex.Faction) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Faction),
                    item: item.Faction.FormKey,
                    fieldIndex: (int)Relation_FieldIndex.Faction,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Relation_FieldIndex.Modifier) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Modifier),
                    item: item.Modifier,
                    fieldIndex: (int)Relation_FieldIndex.Modifier,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Relation_FieldIndex.GroupCombatReaction) ?? true))
            {
                EnumXmlTranslation<Combat>.Instance.Write(
                    node: node,
                    name: nameof(item.GroupCombatReaction),
                    item: item.GroupCombatReaction,
                    fieldIndex: (int)Relation_FieldIndex.GroupCombatReaction,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRelationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Relation");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Relation");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRelationGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRelationGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IRelationGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RelationXmlCreateTranslation
    {
        public readonly static RelationXmlCreateTranslation Instance = new RelationXmlCreateTranslation();

        public static void FillPublicXml(
            IRelation item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RelationXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRelation item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Faction":
                    errorMask?.PushIndex((int)Relation_FieldIndex.Faction);
                    try
                    {
                        item.Faction.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Modifier":
                    errorMask?.PushIndex((int)Relation_FieldIndex.Modifier);
                    try
                    {
                        item.Modifier = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GroupCombatReaction":
                    errorMask?.PushIndex((int)Relation_FieldIndex.GroupCombatReaction);
                    try
                    {
                        item.GroupCombatReaction = EnumXmlTranslation<Combat>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class RelationXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRelationGetter item,
            XElement node,
            out Relation.ErrorMask errorMask,
            Relation.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RelationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Relation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRelationGetter item,
            string path,
            out Relation.ErrorMask errorMask,
            Relation.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRelationGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRelationGetter item,
            Stream stream,
            out Relation.ErrorMask errorMask,
            Relation.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRelationGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRelationGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((RelationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRelationGetter item,
            XElement node,
            string? name = null,
            Relation.TranslationMask? translationMask = null)
        {
            ((RelationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IRelationGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((RelationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRelationGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((RelationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RelationBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RelationBinaryWriteTranslation Instance = new RelationBinaryWriteTranslation();

        public static void WriteEmbedded(
            IRelationGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Faction);
            writer.Write(item.Modifier);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Combat>.Instance.Write(
                writer,
                item.GroupCombatReaction,
                length: 4);
        }

        public void Write(
            MutagenWriter writer,
            IRelationGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Relation_Registration.XNAM_HEADER,
                type: ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRelationGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RelationBinaryCreateTranslation
    {
        public readonly static RelationBinaryCreateTranslation Instance = new RelationBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class RelationBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRelationGetter item,
            MutagenWriter writer)
        {
            ((RelationBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RelationBinaryOverlay :
        BinaryOverlay,
        IRelationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Relation_Registration.Instance;
        public static Relation_Registration Registration => Relation_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RelationCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RelationSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRelationGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRelationGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRelationGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRelationGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => RelationCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => RelationXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RelationXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RelationBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RelationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        public IFormLinkGetter<IFactionGetter> Faction => new FormLink<IFactionGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0, 4))));
        public Int32 Modifier => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(4, 4));
        public Combat GroupCombatReaction => (Combat)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(8, 4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RelationBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RelationBinaryOverlay RelationFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RelationBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

