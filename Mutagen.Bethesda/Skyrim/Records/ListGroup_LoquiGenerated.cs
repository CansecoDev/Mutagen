/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class ListGroup<T> :
        IListGroup<T>,
        ILoquiObjectSetter<ListGroup<T>>,
        IEquatable<ListGroup<T>>,
        IEqualsMask
        where T : class, ICellBlock, IXmlItem, IBinaryItem
    {
        #region Ctor
        public ListGroup()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        static ListGroup()
        {
            T_RecordType = UtilityTranslation.GetRecordType<T>();
        }

        #region GroupType
        public GroupTypeEnum GroupType { get; set; } = default;
        #endregion
        #region LastModified
        public Int32 LastModified { get; set; } = default;
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default;
        #endregion
        #region Records
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<T> _Records = new ExtendedList<T>();
        public ExtendedList<T> Records
        {
            get => this._Records;
            protected set => this._Records = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<T> IListGroupGetter<T>.Records => _Records;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ListGroupMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IListGroupGetter<T> rhs)) return false;
            return ((ListGroupCommon<T>)((IListGroupGetter<T>)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ListGroup<T> obj)
        {
            return ((ListGroupCommon<T>)((IListGroupGetter<T>)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ListGroupCommon<T>)((IListGroupGetter<T>)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ListGroupXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ListGroupXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ListGroup<T> CreateFromXml<T_TranslMask>(
            XElement node,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ListGroup<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            XElement node,
            out ListGroup.ErrorMask<T_ErrMask> errorMask,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ListGroup.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
            return ret;
        }

        public static ListGroup<T> CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new ListGroup<T>();
            ((ListGroupSetterCommon<T>)((IListGroupGetter<T>)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ListGroup<T> CreateFromXml<T_TranslMask>(
            string path,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ListGroup<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            string path,
            out ListGroup.ErrorMask<T_ErrMask> errorMask,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ListGroup<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            string path,
            ErrorMaskBuilder? errorMask,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ListGroup<T> CreateFromXml<T_TranslMask>(
            Stream stream,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ListGroup<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            Stream stream,
            out ListGroup.ErrorMask<T_ErrMask> errorMask,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ListGroup<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public static readonly RecordType T_RecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => ListGroupCommon<T>.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ListGroupCommon<T>.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ListGroupCommon<T>.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ListGroupCommon<T>.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<T, TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<T, TMajor>();
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ListGroupBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ListGroupBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ListGroup<T> CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static ListGroup<T> CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ListGroup<T>();
            ((ListGroupSetterCommon<T>)((IListGroupGetter<T>)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IListGroupGetter<T>)rhs, include);

        void IClearable.Clear()
        {
            ((ListGroupSetterCommon<T>)((IListGroupGetter<T>)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ListGroup<T> GetNew()
        {
            return new ListGroup<T>();
        }

    }
    #endregion

    #region Interface
    public partial interface IListGroup<T> :
        IListGroupGetter<T>,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<IListGroup<T>>
        where T : class, ICellBlock, IXmlItem, IBinaryItem
    {
        new GroupTypeEnum GroupType { get; set; }
        new Int32 LastModified { get; set; }
        new Int32 Unknown { get; set; }
        new ExtendedList<T> Records { get; }
    }

    public partial interface IListGroupGetter<out T> :
        ILoquiObject,
        IMajorRecordGetterEnumerable,
        ILoquiObject<IListGroupGetter<T>>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
        where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ListGroup_Registration.Instance;
        GroupTypeEnum GroupType { get; }
        Int32 LastModified { get; }
        Int32 Unknown { get; }
        IReadOnlyList<T> Records { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ListGroupMixIn
    {
        public static void Clear<T>(this IListGroup<T> item)
            where T : class, ICellBlock, IXmlItem, IBinaryItem
        {
            ((ListGroupSetterCommon<T>)((IListGroupGetter<T>)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ListGroup.Mask<bool> GetEqualsMask<T>(
            this IListGroupGetter<T> item,
            IListGroupGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            return ((ListGroupCommon<T>)((IListGroupGetter<T>)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString<T>(
            this IListGroupGetter<T> item,
            string? name = null,
            ListGroup.Mask<bool>? printMask = null)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            return ((ListGroupCommon<T>)((IListGroupGetter<T>)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString<T>(
            this IListGroupGetter<T> item,
            FileGeneration fg,
            string? name = null,
            ListGroup.Mask<bool>? printMask = null)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            ((ListGroupCommon<T>)((IListGroupGetter<T>)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet<T>(
            this IListGroupGetter<T> item,
            ListGroup.Mask<bool?> checkMask)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            return ((ListGroupCommon<T>)((IListGroupGetter<T>)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ListGroup.Mask<bool> GetHasBeenSetMask<T>(this IListGroupGetter<T> item)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            var ret = new ListGroup.Mask<bool>(false);
            ((ListGroupCommon<T>)((IListGroupGetter<T>)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals<T>(
            this IListGroupGetter<T> item,
            IListGroupGetter<T> rhs)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            return ((ListGroupCommon<T>)((IListGroupGetter<T>)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn<T, TGetter>(
            this IListGroup<T> lhs,
            IListGroupGetter<TGetter> rhs)
            where T : class, ICellBlock, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            ((ListGroupSetterTranslationCommon)((IListGroupGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn<T, TGetter, T_TranslMask>(
            this IListGroup<T> lhs,
            IListGroupGetter<TGetter> rhs,
            ListGroup.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ICellBlock, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ICellBlockGetter, IXmlItem, IBinaryItem
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            ((ListGroupSetterTranslationCommon)((IListGroupGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn<T, TGetter, T_ErrMask, T_TranslMask>(
            this IListGroup<T> lhs,
            IListGroupGetter<TGetter> rhs,
            out ListGroup.ErrorMask<T_ErrMask> errorMask,
            ListGroup.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ICellBlock, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ICellBlockGetter, IXmlItem, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ListGroupSetterTranslationCommon)((IListGroupGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ListGroup.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn<T, TGetter>(
            this IListGroup<T> lhs,
            IListGroupGetter<TGetter> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
            where T : class, ICellBlock, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            ((ListGroupSetterTranslationCommon)((IListGroupGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ListGroup<T> DeepCopy<T, TGetter, T_TranslMask>(
            this IListGroupGetter<TGetter> item,
            ListGroup.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ICellBlock, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ICellBlockGetter, IXmlItem, IBinaryItem
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            return ((ListGroupSetterTranslationCommon)((IListGroupGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter, T_TranslMask>(
                item: item,
                copyMask: copyMask);
        }

        public static ListGroup<T> DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
            this IListGroupGetter<TGetter> item,
            out ListGroup.ErrorMask<T_ErrMask> errorMask,
            ListGroup.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ICellBlock, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ICellBlockGetter, IXmlItem, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            return ((ListGroupSetterTranslationCommon)((IListGroupGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ListGroup<T> DeepCopy<T, TGetter>(
            this IListGroupGetter<TGetter> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : class, ICellBlock, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            return ((ListGroupSetterTranslationCommon)((IListGroupGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter>(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml<T, T_TranslMask>(
            this IListGroup<T> item,
            XElement node,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T : CellBlock, IXmlItem, IBinaryItem
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IListGroup<T> item,
            XElement node,
            out ListGroup.ErrorMask<T_ErrMask> errorMask,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T : CellBlock, IXmlItem, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ListGroup.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml<T>(
            this IListGroup<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
            where T : class, ICellBlock, IXmlItem, IBinaryItem
        {
            ((ListGroupSetterCommon<T>)((IListGroupGetter<T>)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_TranslMask>(
            this IListGroup<T> item,
            string path,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T : CellBlock, IXmlItem, IBinaryItem
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IListGroup<T> item,
            string path,
            out ListGroup.ErrorMask<T_ErrMask> errorMask,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T : CellBlock, IXmlItem, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IListGroup<T> item,
            string path,
            ErrorMaskBuilder? errorMask,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T : CellBlock, IXmlItem, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml<T, T_TranslMask>(
            this IListGroup<T> item,
            Stream stream,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T : CellBlock, IXmlItem, IBinaryItem
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IListGroup<T> item,
            Stream stream,
            out ListGroup.ErrorMask<T_ErrMask> errorMask,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T : CellBlock, IXmlItem, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IListGroup<T> item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T : CellBlock, IXmlItem, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords<T>(this IListGroupGetter<T> obj)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            return ((ListGroupCommon<T>)((IListGroupGetter<T>)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<T, TMajor>(this IListGroupGetter<T> obj)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((ListGroupCommon<T>)((IListGroupGetter<T>)obj).CommonInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords<T>(this IListGroup<T> obj)
            where T : class, ICellBlock, IXmlItem, IBinaryItem
        {
            return ((ListGroupSetterCommon<T>)((IListGroupGetter<T>)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<T, TMajor>(this IListGroup<T> obj)
            where T : class, ICellBlock, IXmlItem, IBinaryItem
            where TMajor : class, IMajorRecordCommon
        {
            return ((ListGroupSetterCommon<T>)((IListGroupGetter<T>)obj).CommonSetterInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary<T>(
            this IListGroup<T> item,
            MutagenFrame frame)
            where T : CellBlock, IXmlItem, IBinaryItem
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary<T>(
            this IListGroup<T> item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
            where T : class, ICellBlock, IXmlItem, IBinaryItem
        {
            ((ListGroupSetterCommon<T>)((IListGroupGetter<T>)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum ListGroup_FieldIndex
    {
        GroupType = 0,
        LastModified = 1,
        Unknown = 2,
        Records = 3,
    }
    #endregion

    #region Registration
    public partial class ListGroup_Registration : ILoquiRegistration
    {
        public static readonly ListGroup_Registration Instance = new ListGroup_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 293,
            version: 0);

        public const string GUID = "bf438bf8-1824-4739-b117-5b149190176b";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(ListGroup.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ListGroup.ErrorMask<>);

        public static readonly Type ClassType = typeof(ListGroup<>);

        public static readonly Type GetterType = typeof(IListGroupGetter<>);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IListGroup<>);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.ListGroup";

        public const string Name = "ListGroup";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 1;

        public static readonly Type? GenericRegistrationType = typeof(ListGroup_Registration<>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "GROUPTYPE":
                    return (ushort)ListGroup_FieldIndex.GroupType;
                case "LASTMODIFIED":
                    return (ushort)ListGroup_FieldIndex.LastModified;
                case "UNKNOWN":
                    return (ushort)ListGroup_FieldIndex.Unknown;
                case "RECORDS":
                    return (ushort)ListGroup_FieldIndex.Records;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.Records:
                    return true;
                case ListGroup_FieldIndex.GroupType:
                case ListGroup_FieldIndex.LastModified:
                case ListGroup_FieldIndex.Unknown:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.Records:
                    return true;
                case ListGroup_FieldIndex.GroupType:
                case ListGroup_FieldIndex.LastModified:
                case ListGroup_FieldIndex.Unknown:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                case ListGroup_FieldIndex.LastModified:
                case ListGroup_FieldIndex.Unknown:
                case ListGroup_FieldIndex.Records:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                    return "GroupType";
                case ListGroup_FieldIndex.LastModified:
                    return "LastModified";
                case ListGroup_FieldIndex.Unknown:
                    return "Unknown";
                case ListGroup_FieldIndex.Records:
                    return "Records";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                case ListGroup_FieldIndex.LastModified:
                case ListGroup_FieldIndex.Unknown:
                case ListGroup_FieldIndex.Records:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                case ListGroup_FieldIndex.LastModified:
                case ListGroup_FieldIndex.Unknown:
                case ListGroup_FieldIndex.Records:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        public static readonly Type XmlWriteTranslation = typeof(ListGroupXmlWriteTranslation);
        public static readonly RecordType GRUP_HEADER = new RecordType("GRUP");
        public static readonly RecordType TriggeringRecordType = GRUP_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(ListGroupBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class ListGroup_Registration<T> : ListGroup_Registration
        where T : CellBlock, IXmlItem, IBinaryItem
    {
        public static readonly ListGroup_Registration<T> GenericInstance = new ListGroup_Registration<T>();

        public new static Type GetNthType(ushort index)
        {
            ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
            switch (enu)
            {
                case ListGroup_FieldIndex.GroupType:
                    return typeof(GroupTypeEnum);
                case ListGroup_FieldIndex.LastModified:
                    return typeof(Int32);
                case ListGroup_FieldIndex.Unknown:
                    return typeof(Int32);
                case ListGroup_FieldIndex.Records:
                    return typeof(ExtendedList<T>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    #endregion

    #region Common
    public partial class ListGroupSetterCommon<T>
        where T : class, ICellBlock, IXmlItem, IBinaryItem
    {
        public static readonly ListGroupSetterCommon<T> Instance = new ListGroupSetterCommon<T>();

        partial void ClearPartial();
        
        public void Clear(IListGroup<T> item)
        {
            ClearPartial();
            item.GroupType = default;
            item.LastModified = default;
            item.Unknown = default;
            item.Records.Clear();
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IListGroup<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ListGroupXmlCreateTranslation<T>.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(IListGroup<T> obj)
        {
            foreach (var item in ListGroupCommon<T>.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IListGroup<T> obj)
            where TMajor : class, IMajorRecordCommon
        {
            foreach (var item in ListGroupCommon<T>.Instance.EnumerateMajorRecords<TMajor>(obj))
            {
                yield return (item as TMajor)!;
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IListGroup<T> item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.GroupParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ListGroupBinaryCreateTranslation<T>.FillBinaryStructs,
                fillTyped: ListGroupBinaryCreateTranslation<T>.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ListGroupCommon<T>
        where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
    {
        public static readonly ListGroupCommon<T> Instance = new ListGroupCommon<T>();

        public ListGroup.Mask<bool> GetEqualsMask(
            IListGroupGetter<T> item,
            IListGroupGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ListGroup.Mask<bool>(false);
            ((ListGroupCommon<T>)((IListGroupGetter<T>)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IListGroupGetter<T> item,
            IListGroupGetter<T> rhs,
            ListGroup.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.GroupType = item.GroupType == rhs.GroupType;
            ret.LastModified = item.LastModified == rhs.LastModified;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Records = item.Records.CollectionEqualsHelper(
                rhs.Records,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IListGroupGetter<T> item,
            string? name = null,
            ListGroup.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IListGroupGetter<T> item,
            FileGeneration fg,
            string? name = null,
            ListGroup.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ListGroup<{typeof(T).Name}> =>");
            }
            else
            {
                fg.AppendLine($"{name} (ListGroup<{typeof(T).Name}>) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IListGroupGetter<T> item,
            FileGeneration fg,
            ListGroup.Mask<bool>? printMask = null)
        {
            if (printMask?.GroupType ?? true)
            {
                fg.AppendItem(item.GroupType, "GroupType");
            }
            if (printMask?.LastModified ?? true)
            {
                fg.AppendItem(item.LastModified, "LastModified");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Records?.Overall ?? true)
            {
                fg.AppendLine("Records =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Records)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IListGroupGetter<T> item,
            ListGroup.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IListGroupGetter<T> item,
            ListGroup.Mask<bool> mask)
        {
            mask.GroupType = true;
            mask.LastModified = true;
            mask.Unknown = true;
            var RecordsItem = item.Records;
            mask.Records = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, CellBlock.Mask<bool>?>>?>(true, RecordsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, CellBlock.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IListGroupGetter<T>? lhs,
            IListGroupGetter<T>? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.GroupType != rhs.GroupType) return false;
            if (lhs.LastModified != rhs.LastModified) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (!lhs.Records.SequenceEqual(rhs.Records)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IListGroupGetter<T> item)
        {
            var hash = new HashCode();
            hash.Add(item.GroupType);
            hash.Add(item.LastModified);
            hash.Add(item.Unknown);
            hash.Add(item.Records);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew<T_Setter>()
            where T_Setter : class, ICellBlock, IXmlItem, IBinaryItem
        {
            return ListGroup<T_Setter>.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IListGroupGetter<T> obj)
        {
            foreach (var item in obj.Records.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IListGroupGetter<T> obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(IListGroupGetter<T> obj)
        {
            foreach (var subItem in obj.Records)
            {
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IListGroupGetter<T> obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            switch (typeof(TMajor).Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecordCommonGetter":
                case "MajorRecord":
                case "ISkyrimMajorRecord":
                case "ISkyrimMajorRecordGetter":
                case "SkyrimMajorRecord":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return (item as TMajor)!;
                    }
                    yield break;
                default:
                    if(typeof(TMajor).IsAssignableFrom(typeof(T)))
                    {
                        foreach (var item in obj.Records)
                        {
                            yield return (item as TMajor)!;
                        }
                    }
                    yield break;
            }
        }
        
        #endregion
        
    }
    public partial class ListGroupSetterTranslationCommon
    {
        public static readonly ListGroupSetterTranslationCommon Instance = new ListGroupSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn<T, TGetter>(
            IListGroup<T> item,
            IListGroupGetter<TGetter> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
            where T : class, ICellBlock, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            if ((copyMask?.GetShouldTranslate((int)ListGroup_FieldIndex.GroupType) ?? true))
            {
                item.GroupType = rhs.GroupType;
            }
            if ((copyMask?.GetShouldTranslate((int)ListGroup_FieldIndex.LastModified) ?? true))
            {
                item.LastModified = rhs.LastModified;
            }
            if ((copyMask?.GetShouldTranslate((int)ListGroup_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)ListGroup_FieldIndex.Records) ?? true))
            {
                errorMask?.PushIndex((int)ListGroup_FieldIndex.Records);
                try
                {
                    item.Records.SetTo(
                        rhs.Records
                        .Select(r =>
                        {
                            return (r.DeepCopy() as T)!;
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public ListGroup<T> DeepCopy<T, TGetter, T_TranslMask>(
            IListGroupGetter<TGetter> item,
            ListGroup.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ICellBlock, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ICellBlockGetter, IXmlItem, IBinaryItem
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            ListGroup<T> ret = (ListGroup<T>)((ListGroupCommon<TGetter>)((IListGroupGetter<TGetter>)item).CommonInstance()!).GetNew<T>();
            ret.DeepCopyIn<T, TGetter, T_TranslMask>(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ListGroup<T> DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
            IListGroupGetter<TGetter> item,
            out ListGroup.ErrorMask<T_ErrMask> errorMask,
            ListGroup.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ICellBlock, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ICellBlockGetter, IXmlItem, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            ListGroup<T> ret = (ListGroup<T>)((ListGroupCommon<TGetter>)((IListGroupGetter<TGetter>)item).CommonInstance()!).GetNew<T>();
            ret.DeepCopyIn<T, TGetter, T_ErrMask, T_TranslMask>(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ListGroup<T> DeepCopy<T, TGetter>(
            IListGroupGetter<TGetter> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : class, ICellBlock, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            ListGroup<T> ret = (ListGroup<T>)((ListGroupCommon<TGetter>)((IListGroupGetter<TGetter>)item).CommonInstance()!).GetNew<T>();
            ret.DeepCopyIn<T, TGetter>(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class ListGroup<T>
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ListGroup_Registration.Instance;
        public static ListGroup_Registration Registration => ListGroup_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ListGroupCommon<T>.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ListGroupSetterCommon<T>.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ListGroupSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IListGroupGetter<T>.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IListGroupGetter<T>.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IListGroupGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ListGroupXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ListGroupXmlWriteTranslation Instance = new ListGroupXmlWriteTranslation();

        public static void WriteToNodeXml<T>(
            IListGroupGetter<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            if ((translationMask?.GetShouldTranslate((int)ListGroup_FieldIndex.GroupType) ?? true))
            {
                EnumXmlTranslation<GroupTypeEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.GroupType),
                    item: item.GroupType,
                    fieldIndex: (int)ListGroup_FieldIndex.GroupType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ListGroup_FieldIndex.LastModified) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LastModified),
                    item: item.LastModified,
                    fieldIndex: (int)ListGroup_FieldIndex.LastModified,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ListGroup_FieldIndex.Unknown) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)ListGroup_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ListGroup_FieldIndex.Records) ?? true))
            {
                ListXmlTranslation<T>.Instance.Write(
                    node: node,
                    name: nameof(item.Records),
                    item: item.Records,
                    fieldIndex: (int)ListGroup_FieldIndex.Records,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ListGroup_FieldIndex.Records),
                    transl: (XElement subNode, T subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((CellBlockXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write<T>(
            XElement node,
            IListGroupGetter<T> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.ListGroup");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.ListGroup");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            throw new NotImplementedException();
        }

        public void Write<T>(
            XElement node,
            IListGroupGetter<T> item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IListGroupGetter<T>)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ListGroupXmlCreateTranslation<T>
        where T : class, ICellBlock, IXmlItem, IBinaryItem
    {
        public readonly static ListGroupXmlCreateTranslation<T> Instance = new ListGroupXmlCreateTranslation<T>();

        public static void FillPublicXml(
            IListGroup<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ListGroupXmlCreateTranslation<T>.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IListGroup<T> item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "GroupType":
                    errorMask?.PushIndex((int)ListGroup_FieldIndex.GroupType);
                    try
                    {
                        item.GroupType = EnumXmlTranslation<GroupTypeEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LastModified":
                    errorMask?.PushIndex((int)ListGroup_FieldIndex.LastModified);
                    try
                    {
                        item.LastModified = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)ListGroup_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Records":
                    errorMask?.PushIndex((int)ListGroup_FieldIndex.Records);
                    try
                    {
                        if (ListXmlTranslation<T>.Instance.Parse(
                            node: node,
                            enumer: out var RecordsItem,
                            transl: LoquiXmlTranslation<T>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Records.SetTo(RecordsItem);
                        }
                        else
                        {
                            item.Records.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ListGroupXmlTranslationMixIn
    {
        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IListGroupGetter<T> item,
            XElement node,
            out ListGroup.ErrorMask<T_ErrMask> errorMask,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null,
            string? name = null)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ListGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ListGroup.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IListGroupGetter<T> item,
            string path,
            out ListGroup.ErrorMask<T_ErrMask> errorMask,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null,
            string? name = null)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T>(
            this IListGroupGetter<T> item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            var node = new XElement("topnode");
            WriteToXml<T>(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IListGroupGetter<T> item,
            Stream stream,
            out ListGroup.ErrorMask<T_ErrMask> errorMask,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null,
            string? name = null)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml<T>(
            this IListGroupGetter<T> item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            var node = new XElement("topnode");
            WriteToXml<T>(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml<T>(
            this IListGroupGetter<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            ((ListGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IListGroupGetter<T> item,
            XElement node,
            string? name = null,
            ListGroup.TranslationMask<T_TranslMask>? translationMask = null)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            ((ListGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml<T, T_TranslMask>(
            this IListGroupGetter<T> item,
            string path,
            string? name = null)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = new XElement("topnode");
            ((ListGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T, T_TranslMask>(
            this IListGroupGetter<T> item,
            Stream stream,
            string? name = null)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var node = new XElement("topnode");
            ((ListGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ListGroupBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ListGroupBinaryWriteTranslation Instance = new ListGroupBinaryWriteTranslation();

        static partial void WriteBinaryContainedRecordTypeCustom<T>(
            MutagenWriter writer,
            IListGroupGetter<T> item)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem;

        public static void WriteBinaryContainedRecordType<T>(
            MutagenWriter writer,
            IListGroupGetter<T> item)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            WriteBinaryContainedRecordTypeCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded<T>(
            IListGroupGetter<T> item,
            MutagenWriter writer)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            ListGroupBinaryWriteTranslation.WriteBinaryContainedRecordType(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<GroupTypeEnum>.Instance.Write(
                writer,
                item.GroupType,
                length: 4);
            writer.Write(item.LastModified);
            writer.Write(item.Unknown);
        }

        public static void WriteRecordTypes<T>(
            IListGroupGetter<T> item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            Mutagen.Bethesda.Binary.ListBinaryTranslation<T>.Instance.Write(
                writer: writer,
                items: item.Records,
                transl: (MutagenWriter subWriter, T subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((CellBlockBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write<T>(
            MutagenWriter writer,
            IListGroupGetter<T> item,
            RecordTypeConverter? recordTypeConverter = null)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(ListGroup_Registration.GRUP_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Group))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            throw new NotImplementedException();
        }

    }

    public partial class ListGroupBinaryCreateTranslation<T>
        where T : class, ICellBlock, IXmlItem, IBinaryItem
    {
        public readonly static ListGroupBinaryCreateTranslation<T> Instance = new ListGroupBinaryCreateTranslation<T>();

        public static void FillBinaryStructs(
            IListGroup<T> item,
            MutagenFrame frame)
        {
            ListGroupBinaryCreateTranslation<T>.FillBinaryContainedRecordTypeCustomPublic(
                frame: frame,
                item: item);
            item.GroupType = EnumBinaryTranslation<GroupTypeEnum>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.LastModified = frame.ReadInt32();
            item.Unknown = frame.ReadInt32();
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IListGroup<T> item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                default:
                    if (nextRecordType.Equals(ListGroup<T>.T_RecordType))
                    {
                        item.Records.SetTo(
                            Mutagen.Bethesda.Binary.ListBinaryTranslation<T>.Instance.Parse(
                                frame: frame,
                                triggeringRecord: ListGroup<T>.T_RecordType,
                                thread: frame.MetaData.Parallel,
                                recordTypeConverter: recordTypeConverter,
                                transl: (MutagenFrame r, out T listSubItem, RecordTypeConverter? conv) =>
                                {
                                    return LoquiBinaryTranslation<T>.Instance.Parse(
                                        frame: r,
                                        item: out listSubItem!,
                                        recordTypeConverter: conv);
                                }));
                        return TryGet<int?>.Failure;
                    }
                    frame.Position += contentLength + frame.MetaData.Constants.MajorConstants.HeaderLength;
                    return TryGet<int?>.Succeed(null);
            }
        }

        static partial void FillBinaryContainedRecordTypeCustom(
            MutagenFrame frame,
            IListGroup<T> item);

        public static void FillBinaryContainedRecordTypeCustomPublic(
            MutagenFrame frame,
            IListGroup<T> item)
        {
            FillBinaryContainedRecordTypeCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ListGroupBinaryTranslationMixIn
    {
        public static void WriteToBinary<T, T_ErrMask>(
            this IListGroupGetter<T> item,
            MutagenWriter writer)
            where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
        {
            ((ListGroupBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ListGroupBinaryOverlay<T> :
        BinaryOverlay,
        IListGroupGetter<T>
        where T : class, ICellBlockGetter, IXmlItem, IBinaryItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ListGroup_Registration.Instance;
        public static ListGroup_Registration Registration => ListGroup_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ListGroupCommon<T>.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ListGroupSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IListGroupGetter<T>.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IListGroupGetter<T>.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IListGroupGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IListGroupGetter<T>)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => ListGroupCommon<T>.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ListGroupCommon<T>.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ListGroupCommon<T>.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ListGroupCommon<T>.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<T, TMajor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ListGroupXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ListGroupXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ListGroupBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ListGroupBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ContainedRecordType
        partial void ContainedRecordTypeCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        public GroupTypeEnum GroupType => (GroupTypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x4, 0x4));
        public Int32 LastModified => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x8, 0x4));
        public Int32 Unknown => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0xC, 0x4));
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        protected ListGroupBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ListGroupBinaryOverlay<T> ListGroupFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ListGroupBinaryOverlay<T>(
                bytes: HeaderTranslation.ExtractGroupMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Group(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.GroupConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.GroupConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillGroupRecordsForWrapper(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ListGroupBinaryOverlay<T> ListGroupFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ListGroupFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                default:
                    return TryGet<int?>.Succeed(null);
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ListGroupMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

namespace Mutagen.Bethesda.Skyrim
{
    public static class ListGroup
    {
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.GroupType = initialValue;
                this.LastModified = initialValue;
                this.Unknown = initialValue;
                this.Records = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellBlock.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, CellBlock.Mask<TItem>?>>());
            }
        
            public Mask(
                TItem GroupType,
                TItem LastModified,
                TItem Unknown,
                TItem Records)
            {
                this.GroupType = GroupType;
                this.LastModified = LastModified;
                this.Unknown = Unknown;
                this.Records = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellBlock.Mask<TItem>?>>?>(Records, Enumerable.Empty<MaskItemIndexed<TItem, CellBlock.Mask<TItem>?>>());
            }
        
            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618
        
            #endregion
        
            #region Members
            public TItem GroupType;
            public TItem LastModified;
            public TItem Unknown;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellBlock.Mask<TItem>?>>?>? Records;
            #endregion
        
            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }
        
            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.GroupType, rhs.GroupType)) return false;
                if (!object.Equals(this.LastModified, rhs.LastModified)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Records, rhs.Records)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.GroupType);
                hash.Add(this.LastModified);
                hash.Add(this.Unknown);
                hash.Add(this.Records);
                return hash.ToHashCode();
            }
        
            #endregion
        
            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.GroupType)) return false;
                if (!eval(this.LastModified)) return false;
                if (!eval(this.Unknown)) return false;
                if (this.Records != null)
                {
                    if (!eval(this.Records.Overall)) return false;
                    if (this.Records.Specific != null)
                    {
                        foreach (var item in this.Records.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion
        
            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.GroupType)) return true;
                if (eval(this.LastModified)) return true;
                if (eval(this.Unknown)) return true;
                if (this.Records != null)
                {
                    if (eval(this.Records.Overall)) return true;
                    if (this.Records.Specific != null)
                    {
                        foreach (var item in this.Records.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion
        
            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ListGroup.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }
        
            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.GroupType = eval(this.GroupType);
                obj.LastModified = eval(this.LastModified);
                obj.Unknown = eval(this.Unknown);
                if (Records != null)
                {
                    obj.Records = new MaskItem<R, IEnumerable<MaskItemIndexed<R, CellBlock.Mask<R>?>>?>(eval(this.Records.Overall), Enumerable.Empty<MaskItemIndexed<R, CellBlock.Mask<R>?>>());
                    if (Records.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, CellBlock.Mask<R>?>>();
                        obj.Records.Specific = l;
                        foreach (var item in Records.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, CellBlock.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, CellBlock.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion
        
            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }
        
            public string ToString(ListGroup.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }
        
            public void ToString(FileGeneration fg, ListGroup.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ListGroup.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.GroupType ?? true)
                    {
                        fg.AppendItem(GroupType, "GroupType");
                    }
                    if (printMask?.LastModified ?? true)
                    {
                        fg.AppendItem(LastModified, "LastModified");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if ((printMask?.Records?.Overall ?? true)
                        && Records.TryGet(out var RecordsItem))
                    {
                        fg.AppendLine("Records =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RecordsItem.Overall);
                            if (RecordsItem.Specific != null)
                            {
                                foreach (var subItem in RecordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion
        
        }
        
        public class ErrorMask<T_ErrMask> :
            IErrorMask,
            IErrorMask<ErrorMask<T_ErrMask>>
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? GroupType;
            public Exception? LastModified;
            public Exception? Unknown;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, T_ErrMask?>>?>? Records;
            #endregion
        
            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
                switch (enu)
                {
                    case ListGroup_FieldIndex.GroupType:
                        return GroupType;
                    case ListGroup_FieldIndex.LastModified:
                        return LastModified;
                    case ListGroup_FieldIndex.Unknown:
                        return Unknown;
                    case ListGroup_FieldIndex.Records:
                        return Records;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public void SetNthException(int index, Exception ex)
            {
                ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
                switch (enu)
                {
                    case ListGroup_FieldIndex.GroupType:
                        this.GroupType = ex;
                        break;
                    case ListGroup_FieldIndex.LastModified:
                        this.LastModified = ex;
                        break;
                    case ListGroup_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case ListGroup_FieldIndex.Records:
                        this.Records = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, T_ErrMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public void SetNthMask(int index, object obj)
            {
                ListGroup_FieldIndex enu = (ListGroup_FieldIndex)index;
                switch (enu)
                {
                    case ListGroup_FieldIndex.GroupType:
                        this.GroupType = (Exception?)obj;
                        break;
                    case ListGroup_FieldIndex.LastModified:
                        this.LastModified = (Exception?)obj;
                        break;
                    case ListGroup_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case ListGroup_FieldIndex.Records:
                        this.Records = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, T_ErrMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public bool IsInError()
            {
                if (Overall != null) return true;
                if (GroupType != null) return true;
                if (LastModified != null) return true;
                if (Unknown != null) return true;
                if (Records != null) return true;
                return false;
            }
            #endregion
        
            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }
        
            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(GroupType, "GroupType");
                fg.AppendItem(LastModified, "LastModified");
                fg.AppendItem(Unknown, "Unknown");
                if (Records.TryGet(out var RecordsItem))
                {
                    fg.AppendLine("Records =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RecordsItem.Overall);
                        if (RecordsItem.Specific != null)
                        {
                            foreach (var subItem in RecordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion
        
            #region Combine
            public ErrorMask<T_ErrMask> Combine(ErrorMask<T_ErrMask>? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask<T_ErrMask>();
                ret.GroupType = this.GroupType.Combine(rhs.GroupType);
                ret.LastModified = this.LastModified.Combine(rhs.LastModified);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Records = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, T_ErrMask?>>?>(ExceptionExt.Combine(this.Records?.Overall, rhs.Records?.Overall), ExceptionExt.Combine(this.Records?.Specific, rhs.Records?.Specific));
                return ret;
            }
            public static ErrorMask<T_ErrMask>? Combine(ErrorMask<T_ErrMask>? lhs, ErrorMask<T_ErrMask>? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion
        
            #region Factory
            public static ErrorMask<T_ErrMask> Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask<T_ErrMask>();
            }
            #endregion
        
        }
        public class TranslationMask<T_TranslMask> : ITranslationMask
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool GroupType;
            public bool LastModified;
            public bool Unknown;
            public MaskItem<bool, T_TranslMask?> Records;
            #endregion
        
            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.GroupType = defaultOn;
                this.LastModified = defaultOn;
                this.Unknown = defaultOn;
                this.Records = new MaskItem<bool, T_TranslMask?>(defaultOn, null);
            }
        
            #endregion
        
            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }
        
            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((GroupType, null));
                ret.Add((LastModified, null));
                ret.Add((Unknown, null));
                ret.Add((Records?.Overall ?? true, Records?.Specific?.GetCrystal()));
            }
        }
    }
}
