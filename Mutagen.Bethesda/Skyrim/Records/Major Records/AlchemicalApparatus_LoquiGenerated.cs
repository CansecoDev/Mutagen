/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class AlchemicalApparatus :
        SkyrimMajorRecord,
        IAlchemicalApparatusInternal,
        ILoquiObjectSetter<AlchemicalApparatus>,
        IEquatable<AlchemicalApparatus>,
        IEqualsMask
    {
        #region Ctor
        protected AlchemicalApparatus()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IAlchemicalApparatusGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectBounds _ObjectBounds = new ObjectBounds();
        public ObjectBounds ObjectBounds
        {
            get => _ObjectBounds;
            set => _ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IAlchemicalApparatusGetter.ObjectBounds => _ObjectBounds;
        #endregion
        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IAlchemicalApparatusGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IAlchemicalApparatusGetter.Model => this.Model;
        #endregion
        #region Icons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Icons? _Icons;
        public Icons? Icons
        {
            get => _Icons;
            set => _Icons = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IIconsGetter? IAlchemicalApparatusGetter.Icons => this.Icons;
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IAlchemicalApparatusGetter.Destructible => this.Destructible;
        #endregion
        #region PickUpSound
        public FormLinkNullable<SoundDescriptor> PickUpSound { get; set; } = new FormLinkNullable<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IAlchemicalApparatusGetter.PickUpSound => this.PickUpSound;
        #endregion
        #region PutDownSound
        public FormLinkNullable<SoundDescriptor> PutDownSound { get; set; } = new FormLinkNullable<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IAlchemicalApparatusGetter.PutDownSound => this.PutDownSound;
        #endregion
        #region Quality
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AlchemicalApparatus.QualityLevel? _Quality;
        public AlchemicalApparatus.QualityLevel? Quality
        {
            get => this._Quality;
            set => this._Quality = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AlchemicalApparatus.QualityLevel? IAlchemicalApparatusGetter.Quality => this.Quality;
        #endregion
        #region Description
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Description;
        public String? Description
        {
            get => this._Description;
            set => this._Description = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IAlchemicalApparatusGetter.Description => this.Description;
        #endregion
        #region WeightValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WeightValue? _WeightValue;
        public WeightValue? WeightValue
        {
            get => _WeightValue;
            set => _WeightValue = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeightValueGetter? IAlchemicalApparatusGetter.WeightValue => this.WeightValue;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AlchemicalApparatusMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAlchemicalApparatusGetter rhs)) return false;
            return ((AlchemicalApparatusCommon)((IAlchemicalApparatusGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(AlchemicalApparatus obj)
        {
            return ((AlchemicalApparatusCommon)((IAlchemicalApparatusGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AlchemicalApparatusCommon)((IAlchemicalApparatusGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => AlchemicalApparatusXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((AlchemicalApparatusXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new AlchemicalApparatus CreateFromXml(
            XElement node,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AlchemicalApparatus CreateFromXml(
            XElement node,
            out AlchemicalApparatus.ErrorMask errorMask,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AlchemicalApparatus.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static AlchemicalApparatus CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new AlchemicalApparatus();
            ((AlchemicalApparatusSetterCommon)((IAlchemicalApparatusGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static AlchemicalApparatus CreateFromXml(
            string path,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static AlchemicalApparatus CreateFromXml(
            string path,
            out AlchemicalApparatus.ErrorMask errorMask,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AlchemicalApparatus CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static AlchemicalApparatus CreateFromXml(
            Stream stream,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static AlchemicalApparatus CreateFromXml(
            Stream stream,
            out AlchemicalApparatus.ErrorMask errorMask,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AlchemicalApparatus CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(initialValue, new Icons.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.PickUpSound = initialValue;
                this.PutDownSound = initialValue;
                this.Quality = initialValue;
                this.Description = initialValue;
                this.WeightValue = new MaskItem<TItem, WeightValue.Mask<TItem>?>(initialValue, new WeightValue.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Name,
                TItem Model,
                TItem Icons,
                TItem Destructible,
                TItem PickUpSound,
                TItem PutDownSound,
                TItem Quality,
                TItem Description,
                TItem WeightValue)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(Icons, new Icons.Mask<TItem>(Icons));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.PickUpSound = PickUpSound;
                this.PutDownSound = PutDownSound;
                this.Quality = Quality;
                this.Description = Description;
                this.WeightValue = new MaskItem<TItem, WeightValue.Mask<TItem>?>(WeightValue, new WeightValue.Mask<TItem>(WeightValue));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Icons.Mask<TItem>?>? Icons { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem PickUpSound;
            public TItem PutDownSound;
            public TItem Quality;
            public TItem Description;
            public MaskItem<TItem, WeightValue.Mask<TItem>?>? WeightValue { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Icons, rhs.Icons)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.PickUpSound, rhs.PickUpSound)) return false;
                if (!object.Equals(this.PutDownSound, rhs.PutDownSound)) return false;
                if (!object.Equals(this.Quality, rhs.Quality)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.WeightValue, rhs.WeightValue)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Icons);
                hash.Add(this.Destructible);
                hash.Add(this.PickUpSound);
                hash.Add(this.PutDownSound);
                hash.Add(this.Quality);
                hash.Add(this.Description);
                hash.Add(this.WeightValue);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Icons != null)
                {
                    if (!eval(this.Icons.Overall)) return false;
                    if (this.Icons.Specific != null && !this.Icons.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.PickUpSound)) return false;
                if (!eval(this.PutDownSound)) return false;
                if (!eval(this.Quality)) return false;
                if (!eval(this.Description)) return false;
                if (WeightValue != null)
                {
                    if (!eval(this.WeightValue.Overall)) return false;
                    if (this.WeightValue.Specific != null && !this.WeightValue.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Icons != null)
                {
                    if (eval(this.Icons.Overall)) return true;
                    if (this.Icons.Specific != null && this.Icons.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.PickUpSound)) return true;
                if (eval(this.PutDownSound)) return true;
                if (eval(this.Quality)) return true;
                if (eval(this.Description)) return true;
                if (WeightValue != null)
                {
                    if (eval(this.WeightValue.Overall)) return true;
                    if (this.WeightValue.Specific != null && this.WeightValue.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AlchemicalApparatus.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Icons = this.Icons == null ? null : new MaskItem<R, Icons.Mask<R>?>(eval(this.Icons.Overall), this.Icons.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.PickUpSound = eval(this.PickUpSound);
                obj.PutDownSound = eval(this.PutDownSound);
                obj.Quality = eval(this.Quality);
                obj.Description = eval(this.Description);
                obj.WeightValue = this.WeightValue == null ? null : new MaskItem<R, WeightValue.Mask<R>?>(eval(this.WeightValue.Overall), this.WeightValue.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AlchemicalApparatus.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AlchemicalApparatus.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AlchemicalApparatus.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Icons?.Overall ?? true)
                    {
                        Icons?.ToString(fg);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if (printMask?.PickUpSound ?? true)
                    {
                        fg.AppendItem(PickUpSound, "PickUpSound");
                    }
                    if (printMask?.PutDownSound ?? true)
                    {
                        fg.AppendItem(PutDownSound, "PutDownSound");
                    }
                    if (printMask?.Quality ?? true)
                    {
                        fg.AppendItem(Quality, "Quality");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if (printMask?.WeightValue?.Overall ?? true)
                    {
                        WeightValue?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Icons.ErrorMask?>? Icons;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? PickUpSound;
            public Exception? PutDownSound;
            public Exception? Quality;
            public Exception? Description;
            public MaskItem<Exception?, WeightValue.ErrorMask?>? WeightValue;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
                switch (enu)
                {
                    case AlchemicalApparatus_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case AlchemicalApparatus_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case AlchemicalApparatus_FieldIndex.Name:
                        return Name;
                    case AlchemicalApparatus_FieldIndex.Model:
                        return Model;
                    case AlchemicalApparatus_FieldIndex.Icons:
                        return Icons;
                    case AlchemicalApparatus_FieldIndex.Destructible:
                        return Destructible;
                    case AlchemicalApparatus_FieldIndex.PickUpSound:
                        return PickUpSound;
                    case AlchemicalApparatus_FieldIndex.PutDownSound:
                        return PutDownSound;
                    case AlchemicalApparatus_FieldIndex.Quality:
                        return Quality;
                    case AlchemicalApparatus_FieldIndex.Description:
                        return Description;
                    case AlchemicalApparatus_FieldIndex.WeightValue:
                        return WeightValue;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
                switch (enu)
                {
                    case AlchemicalApparatus_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case AlchemicalApparatus_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case AlchemicalApparatus_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case AlchemicalApparatus_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case AlchemicalApparatus_FieldIndex.Icons:
                        this.Icons = new MaskItem<Exception?, Icons.ErrorMask?>(ex, null);
                        break;
                    case AlchemicalApparatus_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case AlchemicalApparatus_FieldIndex.PickUpSound:
                        this.PickUpSound = ex;
                        break;
                    case AlchemicalApparatus_FieldIndex.PutDownSound:
                        this.PutDownSound = ex;
                        break;
                    case AlchemicalApparatus_FieldIndex.Quality:
                        this.Quality = ex;
                        break;
                    case AlchemicalApparatus_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case AlchemicalApparatus_FieldIndex.WeightValue:
                        this.WeightValue = new MaskItem<Exception?, WeightValue.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
                switch (enu)
                {
                    case AlchemicalApparatus_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case AlchemicalApparatus_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case AlchemicalApparatus_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case AlchemicalApparatus_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case AlchemicalApparatus_FieldIndex.Icons:
                        this.Icons = (MaskItem<Exception?, Icons.ErrorMask?>?)obj;
                        break;
                    case AlchemicalApparatus_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case AlchemicalApparatus_FieldIndex.PickUpSound:
                        this.PickUpSound = (Exception?)obj;
                        break;
                    case AlchemicalApparatus_FieldIndex.PutDownSound:
                        this.PutDownSound = (Exception?)obj;
                        break;
                    case AlchemicalApparatus_FieldIndex.Quality:
                        this.Quality = (Exception?)obj;
                        break;
                    case AlchemicalApparatus_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case AlchemicalApparatus_FieldIndex.WeightValue:
                        this.WeightValue = (MaskItem<Exception?, WeightValue.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Icons != null) return true;
                if (Destructible != null) return true;
                if (PickUpSound != null) return true;
                if (PutDownSound != null) return true;
                if (Quality != null) return true;
                if (Description != null) return true;
                if (WeightValue != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                Icons?.ToString(fg);
                Destructible?.ToString(fg);
                fg.AppendItem(PickUpSound, "PickUpSound");
                fg.AppendItem(PutDownSound, "PutDownSound");
                fg.AppendItem(Quality, "Quality");
                fg.AppendItem(Description, "Description");
                WeightValue?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Icons = this.Icons.Combine(rhs.Icons, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.PickUpSound = this.PickUpSound.Combine(rhs.PickUpSound);
                ret.PutDownSound = this.PutDownSound.Combine(rhs.PutDownSound);
                ret.Quality = this.Quality.Combine(rhs.Quality);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.WeightValue = this.WeightValue.Combine(rhs.WeightValue, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, VirtualMachineAdapter.TranslationMask?> VirtualMachineAdapter;
            public MaskItem<bool, ObjectBounds.TranslationMask?> ObjectBounds;
            public bool Name;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public MaskItem<bool, Icons.TranslationMask?> Icons;
            public MaskItem<bool, Destructible.TranslationMask?> Destructible;
            public bool PickUpSound;
            public bool PutDownSound;
            public bool Quality;
            public bool Description;
            public MaskItem<bool, WeightValue.TranslationMask?> WeightValue;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.VirtualMachineAdapter = new MaskItem<bool, VirtualMachineAdapter.TranslationMask?>(defaultOn, null);
                this.ObjectBounds = new MaskItem<bool, ObjectBounds.TranslationMask?>(defaultOn, null);
                this.Name = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Icons = new MaskItem<bool, Icons.TranslationMask?>(defaultOn, null);
                this.Destructible = new MaskItem<bool, Destructible.TranslationMask?>(defaultOn, null);
                this.PickUpSound = defaultOn;
                this.PutDownSound = defaultOn;
                this.Quality = defaultOn;
                this.Description = defaultOn;
                this.WeightValue = new MaskItem<bool, WeightValue.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter?.Overall ?? true, VirtualMachineAdapter?.Specific?.GetCrystal()));
                ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Icons?.Overall ?? true, Icons?.Specific?.GetCrystal()));
                ret.Add((Destructible?.Overall ?? true, Destructible?.Specific?.GetCrystal()));
                ret.Add((PickUpSound, null));
                ret.Add((PutDownSound, null));
                ret.Add((Quality, null));
                ret.Add((Description, null));
                ret.Add((WeightValue?.Overall ?? true, WeightValue?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = AlchemicalApparatus_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => AlchemicalApparatusCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => AlchemicalApparatusCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AlchemicalApparatusCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AlchemicalApparatusCommon.Instance.RemapLinks(this, mapping);
        public AlchemicalApparatus(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public AlchemicalApparatus(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public AlchemicalApparatus(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AlchemicalApparatusBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AlchemicalApparatusBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new AlchemicalApparatus CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static AlchemicalApparatus CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new AlchemicalApparatus();
            ((AlchemicalApparatusSetterCommon)((IAlchemicalApparatusGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAlchemicalApparatusGetter)rhs, include);

        void IClearable.Clear()
        {
            ((AlchemicalApparatusSetterCommon)((IAlchemicalApparatusGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AlchemicalApparatus GetNew()
        {
            return new AlchemicalApparatus();
        }

    }
    #endregion

    #region Interface
    public partial interface IAlchemicalApparatus :
        IAlchemicalApparatusGetter,
        ISkyrimMajorRecord,
        INamed,
        IItem,
        IHasIcons,
        IModeled,
        IObjectBounded,
        ILoquiObjectSetter<IAlchemicalApparatusInternal>
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new ObjectBounds ObjectBounds { get; set; }
        new String? Name { get; set; }
        new Model? Model { get; set; }
        new Icons? Icons { get; set; }
        new Destructible? Destructible { get; set; }
        new FormLinkNullable<SoundDescriptor> PickUpSound { get; set; }
        new FormLinkNullable<SoundDescriptor> PutDownSound { get; set; }
        new AlchemicalApparatus.QualityLevel? Quality { get; set; }
        new String? Description { get; set; }
        new WeightValue? WeightValue { get; set; }
    }

    public partial interface IAlchemicalApparatusInternal :
        ISkyrimMajorRecordInternal,
        IAlchemicalApparatus,
        IAlchemicalApparatusGetter
    {
    }

    public partial interface IAlchemicalApparatusGetter :
        ISkyrimMajorRecordGetter,
        INamedGetter,
        IItemGetter,
        IHasIconsGetter,
        IModeledGetter,
        IObjectBoundedGetter,
        ILoquiObject<IAlchemicalApparatusGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => AlchemicalApparatus_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        IObjectBoundsGetter ObjectBounds { get; }
        String? Name { get; }
        IModelGetter? Model { get; }
        IIconsGetter? Icons { get; }
        IDestructibleGetter? Destructible { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> PickUpSound { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> PutDownSound { get; }
        AlchemicalApparatus.QualityLevel? Quality { get; }
        String? Description { get; }
        IWeightValueGetter? WeightValue { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AlchemicalApparatusMixIn
    {
        public static void Clear(this IAlchemicalApparatusInternal item)
        {
            ((AlchemicalApparatusSetterCommon)((IAlchemicalApparatusGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AlchemicalApparatus.Mask<bool> GetEqualsMask(
            this IAlchemicalApparatusGetter item,
            IAlchemicalApparatusGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AlchemicalApparatusCommon)((IAlchemicalApparatusGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAlchemicalApparatusGetter item,
            string? name = null,
            AlchemicalApparatus.Mask<bool>? printMask = null)
        {
            return ((AlchemicalApparatusCommon)((IAlchemicalApparatusGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAlchemicalApparatusGetter item,
            FileGeneration fg,
            string? name = null,
            AlchemicalApparatus.Mask<bool>? printMask = null)
        {
            ((AlchemicalApparatusCommon)((IAlchemicalApparatusGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IAlchemicalApparatusGetter item,
            AlchemicalApparatus.Mask<bool?> checkMask)
        {
            return ((AlchemicalApparatusCommon)((IAlchemicalApparatusGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static AlchemicalApparatus.Mask<bool> GetHasBeenSetMask(this IAlchemicalApparatusGetter item)
        {
            var ret = new AlchemicalApparatus.Mask<bool>(false);
            ((AlchemicalApparatusCommon)((IAlchemicalApparatusGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IAlchemicalApparatusGetter item,
            IAlchemicalApparatusGetter rhs)
        {
            return ((AlchemicalApparatusCommon)((IAlchemicalApparatusGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAlchemicalApparatusInternal lhs,
            IAlchemicalApparatusGetter rhs,
            out AlchemicalApparatus.ErrorMask errorMask,
            AlchemicalApparatus.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AlchemicalApparatusSetterTranslationCommon)((IAlchemicalApparatusGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = AlchemicalApparatus.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAlchemicalApparatusInternal lhs,
            IAlchemicalApparatusGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AlchemicalApparatusSetterTranslationCommon)((IAlchemicalApparatusGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static AlchemicalApparatus DeepCopy(
            this IAlchemicalApparatusGetter item,
            AlchemicalApparatus.TranslationMask? copyMask = null)
        {
            return ((AlchemicalApparatusSetterTranslationCommon)((IAlchemicalApparatusGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AlchemicalApparatus DeepCopy(
            this IAlchemicalApparatusGetter item,
            out AlchemicalApparatus.ErrorMask errorMask,
            AlchemicalApparatus.TranslationMask? copyMask = null)
        {
            return ((AlchemicalApparatusSetterTranslationCommon)((IAlchemicalApparatusGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AlchemicalApparatus DeepCopy(
            this IAlchemicalApparatusGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AlchemicalApparatusSetterTranslationCommon)((IAlchemicalApparatusGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAlchemicalApparatusInternal item,
            XElement node,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAlchemicalApparatusInternal item,
            XElement node,
            out AlchemicalApparatus.ErrorMask errorMask,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AlchemicalApparatus.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IAlchemicalApparatusInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((AlchemicalApparatusSetterCommon)((IAlchemicalApparatusGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlchemicalApparatusInternal item,
            string path,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlchemicalApparatusInternal item,
            string path,
            out AlchemicalApparatus.ErrorMask errorMask,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlchemicalApparatusInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IAlchemicalApparatusInternal item,
            Stream stream,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlchemicalApparatusInternal item,
            Stream stream,
            out AlchemicalApparatus.ErrorMask errorMask,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlchemicalApparatusInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            AlchemicalApparatus.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IAlchemicalApparatusInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IAlchemicalApparatusInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AlchemicalApparatusSetterCommon)((IAlchemicalApparatusGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum AlchemicalApparatus_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        Name = 8,
        Model = 9,
        Icons = 10,
        Destructible = 11,
        PickUpSound = 12,
        PutDownSound = 13,
        Quality = 14,
        Description = 15,
        WeightValue = 16,
    }
    #endregion

    #region Registration
    public partial class AlchemicalApparatus_Registration : ILoquiRegistration
    {
        public static readonly AlchemicalApparatus_Registration Instance = new AlchemicalApparatus_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 161,
            version: 0);

        public const string GUID = "5ca84371-e6e9-4890-a8c8-930cc1633a36";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(AlchemicalApparatus.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AlchemicalApparatus.ErrorMask);

        public static readonly Type ClassType = typeof(AlchemicalApparatus);

        public static readonly Type GetterType = typeof(IAlchemicalApparatusGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAlchemicalApparatus);

        public static readonly Type? InternalSetterType = typeof(IAlchemicalApparatusInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.AlchemicalApparatus";

        public const string Name = "AlchemicalApparatus";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VIRTUALMACHINEADAPTER":
                    return (ushort)AlchemicalApparatus_FieldIndex.VirtualMachineAdapter;
                case "OBJECTBOUNDS":
                    return (ushort)AlchemicalApparatus_FieldIndex.ObjectBounds;
                case "NAME":
                    return (ushort)AlchemicalApparatus_FieldIndex.Name;
                case "MODEL":
                    return (ushort)AlchemicalApparatus_FieldIndex.Model;
                case "ICONS":
                    return (ushort)AlchemicalApparatus_FieldIndex.Icons;
                case "DESTRUCTIBLE":
                    return (ushort)AlchemicalApparatus_FieldIndex.Destructible;
                case "PICKUPSOUND":
                    return (ushort)AlchemicalApparatus_FieldIndex.PickUpSound;
                case "PUTDOWNSOUND":
                    return (ushort)AlchemicalApparatus_FieldIndex.PutDownSound;
                case "QUALITY":
                    return (ushort)AlchemicalApparatus_FieldIndex.Quality;
                case "DESCRIPTION":
                    return (ushort)AlchemicalApparatus_FieldIndex.Description;
                case "WEIGHTVALUE":
                    return (ushort)AlchemicalApparatus_FieldIndex.WeightValue;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.VirtualMachineAdapter:
                case AlchemicalApparatus_FieldIndex.ObjectBounds:
                case AlchemicalApparatus_FieldIndex.Name:
                case AlchemicalApparatus_FieldIndex.Model:
                case AlchemicalApparatus_FieldIndex.Icons:
                case AlchemicalApparatus_FieldIndex.Destructible:
                case AlchemicalApparatus_FieldIndex.PickUpSound:
                case AlchemicalApparatus_FieldIndex.PutDownSound:
                case AlchemicalApparatus_FieldIndex.Quality:
                case AlchemicalApparatus_FieldIndex.Description:
                case AlchemicalApparatus_FieldIndex.WeightValue:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.VirtualMachineAdapter:
                case AlchemicalApparatus_FieldIndex.ObjectBounds:
                case AlchemicalApparatus_FieldIndex.Model:
                case AlchemicalApparatus_FieldIndex.Icons:
                case AlchemicalApparatus_FieldIndex.Destructible:
                case AlchemicalApparatus_FieldIndex.WeightValue:
                    return true;
                case AlchemicalApparatus_FieldIndex.Name:
                case AlchemicalApparatus_FieldIndex.PickUpSound:
                case AlchemicalApparatus_FieldIndex.PutDownSound:
                case AlchemicalApparatus_FieldIndex.Quality:
                case AlchemicalApparatus_FieldIndex.Description:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.VirtualMachineAdapter:
                case AlchemicalApparatus_FieldIndex.ObjectBounds:
                case AlchemicalApparatus_FieldIndex.Name:
                case AlchemicalApparatus_FieldIndex.Model:
                case AlchemicalApparatus_FieldIndex.Icons:
                case AlchemicalApparatus_FieldIndex.Destructible:
                case AlchemicalApparatus_FieldIndex.PickUpSound:
                case AlchemicalApparatus_FieldIndex.PutDownSound:
                case AlchemicalApparatus_FieldIndex.Quality:
                case AlchemicalApparatus_FieldIndex.Description:
                case AlchemicalApparatus_FieldIndex.WeightValue:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.VirtualMachineAdapter:
                    return "VirtualMachineAdapter";
                case AlchemicalApparatus_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case AlchemicalApparatus_FieldIndex.Name:
                    return "Name";
                case AlchemicalApparatus_FieldIndex.Model:
                    return "Model";
                case AlchemicalApparatus_FieldIndex.Icons:
                    return "Icons";
                case AlchemicalApparatus_FieldIndex.Destructible:
                    return "Destructible";
                case AlchemicalApparatus_FieldIndex.PickUpSound:
                    return "PickUpSound";
                case AlchemicalApparatus_FieldIndex.PutDownSound:
                    return "PutDownSound";
                case AlchemicalApparatus_FieldIndex.Quality:
                    return "Quality";
                case AlchemicalApparatus_FieldIndex.Description:
                    return "Description";
                case AlchemicalApparatus_FieldIndex.WeightValue:
                    return "WeightValue";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.VirtualMachineAdapter:
                case AlchemicalApparatus_FieldIndex.ObjectBounds:
                case AlchemicalApparatus_FieldIndex.Name:
                case AlchemicalApparatus_FieldIndex.Model:
                case AlchemicalApparatus_FieldIndex.Icons:
                case AlchemicalApparatus_FieldIndex.Destructible:
                case AlchemicalApparatus_FieldIndex.PickUpSound:
                case AlchemicalApparatus_FieldIndex.PutDownSound:
                case AlchemicalApparatus_FieldIndex.Quality:
                case AlchemicalApparatus_FieldIndex.Description:
                case AlchemicalApparatus_FieldIndex.WeightValue:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.VirtualMachineAdapter:
                case AlchemicalApparatus_FieldIndex.ObjectBounds:
                case AlchemicalApparatus_FieldIndex.Name:
                case AlchemicalApparatus_FieldIndex.Model:
                case AlchemicalApparatus_FieldIndex.Icons:
                case AlchemicalApparatus_FieldIndex.Destructible:
                case AlchemicalApparatus_FieldIndex.PickUpSound:
                case AlchemicalApparatus_FieldIndex.PutDownSound:
                case AlchemicalApparatus_FieldIndex.Quality:
                case AlchemicalApparatus_FieldIndex.Description:
                case AlchemicalApparatus_FieldIndex.WeightValue:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            AlchemicalApparatus_FieldIndex enu = (AlchemicalApparatus_FieldIndex)index;
            switch (enu)
            {
                case AlchemicalApparatus_FieldIndex.VirtualMachineAdapter:
                    return typeof(VirtualMachineAdapter);
                case AlchemicalApparatus_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case AlchemicalApparatus_FieldIndex.Name:
                    return typeof(String);
                case AlchemicalApparatus_FieldIndex.Model:
                    return typeof(Model);
                case AlchemicalApparatus_FieldIndex.Icons:
                    return typeof(Icons);
                case AlchemicalApparatus_FieldIndex.Destructible:
                    return typeof(Destructible);
                case AlchemicalApparatus_FieldIndex.PickUpSound:
                    return typeof(FormLinkNullable<SoundDescriptor>);
                case AlchemicalApparatus_FieldIndex.PutDownSound:
                    return typeof(FormLinkNullable<SoundDescriptor>);
                case AlchemicalApparatus_FieldIndex.Quality:
                    return typeof(AlchemicalApparatus.QualityLevel);
                case AlchemicalApparatus_FieldIndex.Description:
                    return typeof(String);
                case AlchemicalApparatus_FieldIndex.WeightValue:
                    return typeof(WeightValue);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(AlchemicalApparatusXmlWriteTranslation);
        public static readonly RecordType APPA_HEADER = new RecordType("APPA");
        public static readonly RecordType VMAD_HEADER = new RecordType("VMAD");
        public static readonly RecordType OBND_HEADER = new RecordType("OBND");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DEST_HEADER = new RecordType("DEST");
        public static readonly RecordType DSTD_HEADER = new RecordType("DSTD");
        public static readonly RecordType DMDL_HEADER = new RecordType("DMDL");
        public static readonly RecordType YNAM_HEADER = new RecordType("YNAM");
        public static readonly RecordType ZNAM_HEADER = new RecordType("ZNAM");
        public static readonly RecordType QUAL_HEADER = new RecordType("QUAL");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = APPA_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 11;
        public static readonly Type BinaryWriteTranslation = typeof(AlchemicalApparatusBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class AlchemicalApparatusSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly AlchemicalApparatusSetterCommon Instance = new AlchemicalApparatusSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAlchemicalApparatusInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds = new ObjectBounds();
            item.Name = default;
            item.Model = null;
            item.Icons = null;
            item.Destructible = null;
            item.PickUpSound = null;
            item.PutDownSound = null;
            item.Quality = default;
            item.Description = default;
            item.WeightValue = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IAlchemicalApparatusInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAlchemicalApparatusInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IAlchemicalApparatusInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IAlchemicalApparatusInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    AlchemicalApparatusXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (AlchemicalApparatus)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (AlchemicalApparatus)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => AlchemicalApparatus_Registration.APPA_HEADER;
        protected static void FillBinaryStructs(
            IAlchemicalApparatusInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IAlchemicalApparatusInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x44414D56: // VMAD
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.VirtualMachineAdapter);
                }
                case 0x444E424F: // OBND
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.ObjectBounds);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    item.Icons = Mutagen.Bethesda.Skyrim.Icons.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.Icons);
                }
                case 0x54534544: // DEST
                case 0x44545344: // DSTD
                case 0x4C444D44: // DMDL
                {
                    item.Destructible = Mutagen.Bethesda.Skyrim.Destructible.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.Destructible);
                }
                case 0x4D414E59: // YNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.PickUpSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.PickUpSound);
                }
                case 0x4D414E5A: // ZNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.PutDownSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.PutDownSound);
                }
                case 0x4C415551: // QUAL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Quality = EnumBinaryTranslation<AlchemicalApparatus.QualityLevel>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.Quality);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.Description);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength; // Skip header
                    item.WeightValue = Mutagen.Bethesda.Skyrim.WeightValue.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.WeightValue);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            IAlchemicalApparatusInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IAlchemicalApparatusInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (AlchemicalApparatus)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (AlchemicalApparatus)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class AlchemicalApparatusCommon : SkyrimMajorRecordCommon
    {
        public new static readonly AlchemicalApparatusCommon Instance = new AlchemicalApparatusCommon();

        public AlchemicalApparatus.Mask<bool> GetEqualsMask(
            IAlchemicalApparatusGetter item,
            IAlchemicalApparatusGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AlchemicalApparatus.Mask<bool>(false);
            ((AlchemicalApparatusCommon)((IAlchemicalApparatusGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAlchemicalApparatusGetter item,
            IAlchemicalApparatusGetter rhs,
            AlchemicalApparatus.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Icons = EqualsMaskHelper.EqualsHelper(
                item.Icons,
                rhs.Icons,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PickUpSound = object.Equals(item.PickUpSound, rhs.PickUpSound);
            ret.PutDownSound = object.Equals(item.PutDownSound, rhs.PutDownSound);
            ret.Quality = item.Quality == rhs.Quality;
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.WeightValue = EqualsMaskHelper.EqualsHelper(
                item.WeightValue,
                rhs.WeightValue,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAlchemicalApparatusGetter item,
            string? name = null,
            AlchemicalApparatus.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAlchemicalApparatusGetter item,
            FileGeneration fg,
            string? name = null,
            AlchemicalApparatus.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AlchemicalApparatus =>");
            }
            else
            {
                fg.AppendLine($"{name} (AlchemicalApparatus) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAlchemicalApparatusGetter item,
            FileGeneration fg,
            AlchemicalApparatus.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Icons?.Overall ?? true)
                && item.Icons.TryGet(out var IconsItem))
            {
                IconsItem?.ToString(fg, "Icons");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible.TryGet(out var DestructibleItem))
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if ((printMask?.PickUpSound ?? true)
                && item.PickUpSound.TryGet(out var PickUpSoundItem))
            {
                fg.AppendItem(PickUpSoundItem, "PickUpSound");
            }
            if ((printMask?.PutDownSound ?? true)
                && item.PutDownSound.TryGet(out var PutDownSoundItem))
            {
                fg.AppendItem(PutDownSoundItem, "PutDownSound");
            }
            if ((printMask?.Quality ?? true)
                && item.Quality.TryGet(out var QualityItem))
            {
                fg.AppendItem(QualityItem, "Quality");
            }
            if ((printMask?.Description ?? true)
                && item.Description.TryGet(out var DescriptionItem))
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if ((printMask?.WeightValue?.Overall ?? true)
                && item.WeightValue.TryGet(out var WeightValueItem))
            {
                WeightValueItem?.ToString(fg, "WeightValue");
            }
        }
        
        public bool HasBeenSet(
            IAlchemicalApparatusGetter item,
            AlchemicalApparatus.Mask<bool?> checkMask)
        {
            if (checkMask.VirtualMachineAdapter?.Overall.HasValue ?? false && checkMask.VirtualMachineAdapter.Overall.Value != (item.VirtualMachineAdapter != null)) return false;
            if (checkMask.VirtualMachineAdapter?.Specific != null && (item.VirtualMachineAdapter == null || !item.VirtualMachineAdapter.HasBeenSet(checkMask.VirtualMachineAdapter.Specific))) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icons?.Overall.HasValue ?? false && checkMask.Icons.Overall.Value != (item.Icons != null)) return false;
            if (checkMask.Icons?.Specific != null && (item.Icons == null || !item.Icons.HasBeenSet(checkMask.Icons.Specific))) return false;
            if (checkMask.Destructible?.Overall.HasValue ?? false && checkMask.Destructible.Overall.Value != (item.Destructible != null)) return false;
            if (checkMask.Destructible?.Specific != null && (item.Destructible == null || !item.Destructible.HasBeenSet(checkMask.Destructible.Specific))) return false;
            if (checkMask.PickUpSound.HasValue && checkMask.PickUpSound.Value != (item.PickUpSound.FormKey != null)) return false;
            if (checkMask.PutDownSound.HasValue && checkMask.PutDownSound.Value != (item.PutDownSound.FormKey != null)) return false;
            if (checkMask.Quality.HasValue && checkMask.Quality.Value != (item.Quality != null)) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != (item.Description != null)) return false;
            if (checkMask.WeightValue?.Overall.HasValue ?? false && checkMask.WeightValue.Overall.Value != (item.WeightValue != null)) return false;
            if (checkMask.WeightValue?.Specific != null && (item.WeightValue == null || !item.WeightValue.HasBeenSet(checkMask.WeightValue.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IAlchemicalApparatusGetter item,
            AlchemicalApparatus.Mask<bool> mask)
        {
            var itemVirtualMachineAdapter = item.VirtualMachineAdapter;
            mask.VirtualMachineAdapter = new MaskItem<bool, VirtualMachineAdapter.Mask<bool>?>(itemVirtualMachineAdapter != null, itemVirtualMachineAdapter?.GetHasBeenSetMask());
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds.Mask<bool>?>(true, item.ObjectBounds?.GetHasBeenSetMask());
            mask.Name = (item.Name != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            var itemIcons = item.Icons;
            mask.Icons = new MaskItem<bool, Icons.Mask<bool>?>(itemIcons != null, itemIcons?.GetHasBeenSetMask());
            var itemDestructible = item.Destructible;
            mask.Destructible = new MaskItem<bool, Destructible.Mask<bool>?>(itemDestructible != null, itemDestructible?.GetHasBeenSetMask());
            mask.PickUpSound = (item.PickUpSound.FormKey != null);
            mask.PutDownSound = (item.PutDownSound.FormKey != null);
            mask.Quality = (item.Quality != null);
            mask.Description = (item.Description != null);
            var itemWeightValue = item.WeightValue;
            mask.WeightValue = new MaskItem<bool, WeightValue.Mask<bool>?>(itemWeightValue != null, itemWeightValue?.GetHasBeenSetMask());
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static AlchemicalApparatus_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new AlchemicalApparatus_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AlchemicalApparatus_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAlchemicalApparatusGetter? lhs,
            IAlchemicalApparatusGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!object.Equals(lhs.Icons, rhs.Icons)) return false;
            if (!object.Equals(lhs.Destructible, rhs.Destructible)) return false;
            if (!lhs.PickUpSound.Equals(rhs.PickUpSound)) return false;
            if (!lhs.PutDownSound.Equals(rhs.PutDownSound)) return false;
            if (lhs.Quality != rhs.Quality) return false;
            if (!string.Equals(lhs.Description, rhs.Description)) return false;
            if (!object.Equals(lhs.WeightValue, rhs.WeightValue)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAlchemicalApparatusGetter?)lhs,
                rhs: rhs as IAlchemicalApparatusGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAlchemicalApparatusGetter?)lhs,
                rhs: rhs as IAlchemicalApparatusGetter);
        }
        
        public virtual int GetHashCode(IAlchemicalApparatusGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Icons.TryGet(out var Iconsitem))
            {
                hash.Add(Iconsitem);
            }
            if (item.Destructible.TryGet(out var Destructibleitem))
            {
                hash.Add(Destructibleitem);
            }
            if (item.PickUpSound.TryGet(out var PickUpSounditem))
            {
                hash.Add(PickUpSounditem);
            }
            if (item.PutDownSound.TryGet(out var PutDownSounditem))
            {
                hash.Add(PutDownSounditem);
            }
            if (item.Quality.TryGet(out var Qualityitem))
            {
                hash.Add(Qualityitem);
            }
            if (item.Description.TryGet(out var Descriptionitem))
            {
                hash.Add(Descriptionitem);
            }
            if (item.WeightValue.TryGet(out var WeightValueitem))
            {
                hash.Add(WeightValueitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IAlchemicalApparatusGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAlchemicalApparatusGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AlchemicalApparatus.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IAlchemicalApparatusGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is ILinkedFormKeyContainer VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Destructible.TryGet(out var DestructibleItems))
            {
                foreach (var item in DestructibleItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.PickUpSound.FormKey.TryGet(out var PickUpSoundKey))
            {
                yield return PickUpSoundKey;
            }
            if (obj.PutDownSound.FormKey.TryGet(out var PutDownSoundKey))
            {
                yield return PutDownSoundKey;
            }
            yield break;
        }
        
        public void RemapLinks(IAlchemicalApparatusGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(AlchemicalApparatus obj, AlchemicalApparatus rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new AlchemicalApparatus(getNextFormKey());
            ret.DeepCopyIn((AlchemicalApparatus)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (AlchemicalApparatus)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class AlchemicalApparatusSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly AlchemicalApparatusSetterTranslationCommon Instance = new AlchemicalApparatusSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IAlchemicalApparatusInternal item,
            IAlchemicalApparatusGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IAlchemicalApparatus item,
            IAlchemicalApparatusGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.Icons) ?? true))
            {
                errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.Icons);
                try
                {
                    if(rhs.Icons.TryGet(out var rhsIcons))
                    {
                        item.Icons = rhsIcons.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.Icons));
                    }
                    else
                    {
                        item.Icons = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible.TryGet(out var rhsDestructible))
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.PickUpSound) ?? true))
            {
                item.PickUpSound = rhs.PickUpSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.PutDownSound) ?? true))
            {
                item.PutDownSound = rhs.PutDownSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.Quality) ?? true))
            {
                item.Quality = rhs.Quality;
            }
            if ((copyMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.WeightValue) ?? true))
            {
                errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.WeightValue);
                try
                {
                    if(rhs.WeightValue.TryGet(out var rhsWeightValue))
                    {
                        item.WeightValue = rhsWeightValue.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.WeightValue));
                    }
                    else
                    {
                        item.WeightValue = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAlchemicalApparatusInternal)item,
                rhs: (IAlchemicalApparatusGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAlchemicalApparatus)item,
                rhs: (IAlchemicalApparatusGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAlchemicalApparatusInternal)item,
                rhs: (IAlchemicalApparatusGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAlchemicalApparatus)item,
                rhs: (IAlchemicalApparatusGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public AlchemicalApparatus DeepCopy(
            IAlchemicalApparatusGetter item,
            AlchemicalApparatus.TranslationMask? copyMask = null)
        {
            AlchemicalApparatus ret = (AlchemicalApparatus)((AlchemicalApparatusCommon)((IAlchemicalApparatusGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public AlchemicalApparatus DeepCopy(
            IAlchemicalApparatusGetter item,
            out AlchemicalApparatus.ErrorMask errorMask,
            AlchemicalApparatus.TranslationMask? copyMask = null)
        {
            AlchemicalApparatus ret = (AlchemicalApparatus)((AlchemicalApparatusCommon)((IAlchemicalApparatusGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public AlchemicalApparatus DeepCopy(
            IAlchemicalApparatusGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AlchemicalApparatus ret = (AlchemicalApparatus)((AlchemicalApparatusCommon)((IAlchemicalApparatusGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class AlchemicalApparatus
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AlchemicalApparatus_Registration.Instance;
        public new static AlchemicalApparatus_Registration Registration => AlchemicalApparatus_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AlchemicalApparatusCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AlchemicalApparatusSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AlchemicalApparatusSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AlchemicalApparatusXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static AlchemicalApparatusXmlWriteTranslation Instance = new AlchemicalApparatusXmlWriteTranslation();

        public static void WriteToNodeXml(
            IAlchemicalApparatusGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.VirtualMachineAdapter != null)
                && (translationMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
                {
                    ((VirtualMachineAdapterXmlWriteTranslation)((IXmlItem)VirtualMachineAdapterItem).XmlWriteTranslator).Write(
                        item: VirtualMachineAdapterItem,
                        node: node,
                        name: nameof(item.VirtualMachineAdapter),
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.VirtualMachineAdapter,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.VirtualMachineAdapter));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.ObjectBounds) ?? true))
            {
                var ObjectBoundsItem = item.ObjectBounds;
                ((ObjectBoundsXmlWriteTranslation)((IXmlItem)ObjectBoundsItem).XmlWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    node: node,
                    name: nameof(item.ObjectBounds),
                    fieldIndex: (int)AlchemicalApparatus_FieldIndex.ObjectBounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.ObjectBounds));
            }
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)AlchemicalApparatus_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.Model));
                }
            }
            if ((item.Icons != null)
                && (translationMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.Icons) ?? true))
            {
                if (item.Icons.TryGet(out var IconsItem))
                {
                    ((IconsXmlWriteTranslation)((IXmlItem)IconsItem).XmlWriteTranslator).Write(
                        item: IconsItem,
                        node: node,
                        name: nameof(item.Icons),
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Icons,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.Icons));
                }
            }
            if ((item.Destructible != null)
                && (translationMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.Destructible) ?? true))
            {
                if (item.Destructible.TryGet(out var DestructibleItem))
                {
                    ((DestructibleXmlWriteTranslation)((IXmlItem)DestructibleItem).XmlWriteTranslator).Write(
                        item: DestructibleItem,
                        node: node,
                        name: nameof(item.Destructible),
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.Destructible,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.Destructible));
                }
            }
            if ((item.PickUpSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.PickUpSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PickUpSound),
                    item: item.PickUpSound.FormKey.Value,
                    fieldIndex: (int)AlchemicalApparatus_FieldIndex.PickUpSound,
                    errorMask: errorMask);
            }
            if ((item.PutDownSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.PutDownSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PutDownSound),
                    item: item.PutDownSound.FormKey.Value,
                    fieldIndex: (int)AlchemicalApparatus_FieldIndex.PutDownSound,
                    errorMask: errorMask);
            }
            if ((item.Quality != null)
                && (translationMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.Quality) ?? true))
            {
                EnumXmlTranslation<AlchemicalApparatus.QualityLevel>.Instance.Write(
                    node: node,
                    name: nameof(item.Quality),
                    item: item.Quality,
                    fieldIndex: (int)AlchemicalApparatus_FieldIndex.Quality,
                    errorMask: errorMask);
            }
            if ((item.Description != null)
                && (translationMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)AlchemicalApparatus_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if ((item.WeightValue != null)
                && (translationMask?.GetShouldTranslate((int)AlchemicalApparatus_FieldIndex.WeightValue) ?? true))
            {
                if (item.WeightValue.TryGet(out var WeightValueItem))
                {
                    ((WeightValueXmlWriteTranslation)((IXmlItem)WeightValueItem).XmlWriteTranslator).Write(
                        item: WeightValueItem,
                        node: node,
                        name: nameof(item.WeightValue),
                        fieldIndex: (int)AlchemicalApparatus_FieldIndex.WeightValue,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.WeightValue));
                }
            }
        }

        public void Write(
            XElement node,
            IAlchemicalApparatusGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.AlchemicalApparatus");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.AlchemicalApparatus");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAlchemicalApparatusGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAlchemicalApparatusGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAlchemicalApparatusGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class AlchemicalApparatusXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static AlchemicalApparatusXmlCreateTranslation Instance = new AlchemicalApparatusXmlCreateTranslation();

        public static void FillPublicXml(
            IAlchemicalApparatusInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AlchemicalApparatusXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IAlchemicalApparatusInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "VirtualMachineAdapter":
                    errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.VirtualMachineAdapter);
                    try
                    {
                        item.VirtualMachineAdapter = LoquiXmlTranslation<VirtualMachineAdapter>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.VirtualMachineAdapter));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ObjectBounds":
                    errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.ObjectBounds);
                    try
                    {
                        item.ObjectBounds = LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.ObjectBounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icons":
                    errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.Icons);
                    try
                    {
                        item.Icons = LoquiXmlTranslation<Icons>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.Icons));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Destructible":
                    errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.Destructible);
                    try
                    {
                        item.Destructible = LoquiXmlTranslation<Destructible>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.Destructible));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PickUpSound":
                    errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.PickUpSound);
                    try
                    {
                        item.PickUpSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PutDownSound":
                    errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.PutDownSound);
                    try
                    {
                        item.PutDownSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Quality":
                    errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.Quality);
                    try
                    {
                        item.Quality = EnumXmlTranslation<AlchemicalApparatus.QualityLevel>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.Description);
                    try
                    {
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WeightValue":
                    errorMask?.PushIndex((int)AlchemicalApparatus_FieldIndex.WeightValue);
                    try
                    {
                        item.WeightValue = LoquiXmlTranslation<WeightValue>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AlchemicalApparatus_FieldIndex.WeightValue));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class AlchemicalApparatusXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IAlchemicalApparatusGetter item,
            XElement node,
            out AlchemicalApparatus.ErrorMask errorMask,
            AlchemicalApparatus.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((AlchemicalApparatusXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AlchemicalApparatus.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IAlchemicalApparatusGetter item,
            string path,
            out AlchemicalApparatus.ErrorMask errorMask,
            AlchemicalApparatus.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAlchemicalApparatusGetter item,
            Stream stream,
            out AlchemicalApparatus.ErrorMask errorMask,
            AlchemicalApparatus.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AlchemicalApparatusBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static AlchemicalApparatusBinaryWriteTranslation Instance = new AlchemicalApparatusBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IAlchemicalApparatusGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(AlchemicalApparatus_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Icons.TryGet(out var IconsItem))
            {
                ((IconsBinaryWriteTranslation)((IBinaryItem)IconsItem).BinaryWriteTranslator).Write(
                    item: IconsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Destructible.TryGet(out var DestructibleItem))
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PickUpSound,
                header: recordTypeConverter.ConvertToCustom(AlchemicalApparatus_Registration.YNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PutDownSound,
                header: recordTypeConverter.ConvertToCustom(AlchemicalApparatus_Registration.ZNAM_HEADER));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<AlchemicalApparatus.QualityLevel>.Instance.WriteNullable(
                writer,
                item.Quality,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(AlchemicalApparatus_Registration.QUAL_HEADER));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(AlchemicalApparatus_Registration.DESC_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.WeightValue.TryGet(out var WeightValueItem))
            {
                using (HeaderExport.ExportHeader(writer, AlchemicalApparatus_Registration.DATA_HEADER, Mutagen.Bethesda.Binary.ObjectType.Subrecord))
                {
                    ((WeightValueBinaryWriteTranslation)((IBinaryItem)WeightValueItem).BinaryWriteTranslator).Write(
                        item: WeightValueItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IAlchemicalApparatusGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(AlchemicalApparatus_Registration.APPA_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAlchemicalApparatusGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAlchemicalApparatusGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAlchemicalApparatusGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class AlchemicalApparatusBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static AlchemicalApparatusBinaryCreateTranslation Instance = new AlchemicalApparatusBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class AlchemicalApparatusBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AlchemicalApparatusBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IAlchemicalApparatusGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AlchemicalApparatus_Registration.Instance;
        public new static AlchemicalApparatus_Registration Registration => AlchemicalApparatus_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AlchemicalApparatusCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AlchemicalApparatusSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAlchemicalApparatusGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => AlchemicalApparatusCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => AlchemicalApparatusCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AlchemicalApparatusCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AlchemicalApparatusCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => AlchemicalApparatusXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((AlchemicalApparatusXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AlchemicalApparatusBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AlchemicalApparatusBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new BinaryMemoryReadStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool VirtualMachineAdapter_IsSet => _VirtualMachineAdapterLocation.HasValue;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new BinaryMemoryReadStream(_data.Slice(_ObjectBoundsLocation!.Value.Min)), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        public IModelGetter? Model { get; private set; }
        public IIconsGetter? Icons { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        #region PickUpSound
        private int? _PickUpSoundLocation;
        public bool PickUpSound_IsSet => _PickUpSoundLocation.HasValue;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> PickUpSound => _PickUpSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PickUpSoundLocation.Value, _package.Meta)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region PutDownSound
        private int? _PutDownSoundLocation;
        public bool PutDownSound_IsSet => _PutDownSoundLocation.HasValue;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> PutDownSound => _PutDownSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PutDownSoundLocation.Value, _package.Meta)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region Quality
        private int? _QualityLocation;
        public AlchemicalApparatus.QualityLevel? Quality => _QualityLocation.HasValue ? (AlchemicalApparatus.QualityLevel)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _QualityLocation!.Value, _package.Meta)) : default(AlchemicalApparatus.QualityLevel?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.Meta)) : default(string?);
        #endregion
        public IWeightValueGetter? WeightValue { get; private set; }
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected AlchemicalApparatusBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static AlchemicalApparatusBinaryOverlay AlchemicalApparatusFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new AlchemicalApparatusBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static AlchemicalApparatusBinaryOverlay AlchemicalApparatusFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return AlchemicalApparatusFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x44414D56: // VMAD
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.VirtualMachineAdapter);
                }
                case 0x444E424F: // OBND
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.ObjectBounds);
                }
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    this.Icons = IconsBinaryOverlay.IconsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.Icons);
                }
                case 0x54534544: // DEST
                case 0x44545344: // DSTD
                case 0x4C444D44: // DMDL
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.Destructible);
                }
                case 0x4D414E59: // YNAM
                {
                    _PickUpSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.PickUpSound);
                }
                case 0x4D414E5A: // ZNAM
                {
                    _PutDownSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.PutDownSound);
                }
                case 0x4C415551: // QUAL
                {
                    _QualityLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.Quality);
                }
                case 0x43534544: // DESC
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.Description);
                }
                case 0x41544144: // DATA
                {
                    stream.Position += _package.Meta.SubConstants.HeaderLength;
                    this.WeightValue = WeightValueBinaryOverlay.WeightValueFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)AlchemicalApparatus_FieldIndex.WeightValue);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AlchemicalApparatusMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

