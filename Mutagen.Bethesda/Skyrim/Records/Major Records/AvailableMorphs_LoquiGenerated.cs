/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class AvailableMorphs :
        IAvailableMorphs,
        ILoquiObjectSetter<AvailableMorphs>,
        IEquatable<AvailableMorphs>,
        IEqualsMask
    {
        #region Ctor
        public AvailableMorphs()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Nose
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Morph? _Nose;
        public Morph? Nose
        {
            get => _Nose;
            set => _Nose = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMorphGetter? IAvailableMorphsGetter.Nose => this.Nose;
        #endregion
        #region Brow
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Morph? _Brow;
        public Morph? Brow
        {
            get => _Brow;
            set => _Brow = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMorphGetter? IAvailableMorphsGetter.Brow => this.Brow;
        #endregion
        #region Eye
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Morph? _Eye;
        public Morph? Eye
        {
            get => _Eye;
            set => _Eye = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMorphGetter? IAvailableMorphsGetter.Eye => this.Eye;
        #endregion
        #region Lip
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Morph? _Lip;
        public Morph? Lip
        {
            get => _Lip;
            set => _Lip = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMorphGetter? IAvailableMorphsGetter.Lip => this.Lip;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AvailableMorphsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAvailableMorphsGetter rhs)) return false;
            return ((AvailableMorphsCommon)((IAvailableMorphsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(AvailableMorphs obj)
        {
            return ((AvailableMorphsCommon)((IAvailableMorphsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AvailableMorphsCommon)((IAvailableMorphsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => AvailableMorphsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((AvailableMorphsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static AvailableMorphs CreateFromXml(
            XElement node,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AvailableMorphs CreateFromXml(
            XElement node,
            out AvailableMorphs.ErrorMask errorMask,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AvailableMorphs.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AvailableMorphs CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new AvailableMorphs();
            ((AvailableMorphsSetterCommon)((IAvailableMorphsGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static AvailableMorphs CreateFromXml(
            string path,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static AvailableMorphs CreateFromXml(
            string path,
            out AvailableMorphs.ErrorMask errorMask,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AvailableMorphs CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static AvailableMorphs CreateFromXml(
            Stream stream,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static AvailableMorphs CreateFromXml(
            Stream stream,
            out AvailableMorphs.ErrorMask errorMask,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AvailableMorphs CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Nose = new MaskItem<TItem, Morph.Mask<TItem>?>(initialValue, new Morph.Mask<TItem>(initialValue));
                this.Brow = new MaskItem<TItem, Morph.Mask<TItem>?>(initialValue, new Morph.Mask<TItem>(initialValue));
                this.Eye = new MaskItem<TItem, Morph.Mask<TItem>?>(initialValue, new Morph.Mask<TItem>(initialValue));
                this.Lip = new MaskItem<TItem, Morph.Mask<TItem>?>(initialValue, new Morph.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Nose,
                TItem Brow,
                TItem Eye,
                TItem Lip)
            {
                this.Nose = new MaskItem<TItem, Morph.Mask<TItem>?>(Nose, new Morph.Mask<TItem>(Nose));
                this.Brow = new MaskItem<TItem, Morph.Mask<TItem>?>(Brow, new Morph.Mask<TItem>(Brow));
                this.Eye = new MaskItem<TItem, Morph.Mask<TItem>?>(Eye, new Morph.Mask<TItem>(Eye));
                this.Lip = new MaskItem<TItem, Morph.Mask<TItem>?>(Lip, new Morph.Mask<TItem>(Lip));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Morph.Mask<TItem>?>? Nose { get; set; }
            public MaskItem<TItem, Morph.Mask<TItem>?>? Brow { get; set; }
            public MaskItem<TItem, Morph.Mask<TItem>?>? Eye { get; set; }
            public MaskItem<TItem, Morph.Mask<TItem>?>? Lip { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Nose, rhs.Nose)) return false;
                if (!object.Equals(this.Brow, rhs.Brow)) return false;
                if (!object.Equals(this.Eye, rhs.Eye)) return false;
                if (!object.Equals(this.Lip, rhs.Lip)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Nose);
                hash.Add(this.Brow);
                hash.Add(this.Eye);
                hash.Add(this.Lip);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (Nose != null)
                {
                    if (!eval(this.Nose.Overall)) return false;
                    if (this.Nose.Specific != null && !this.Nose.Specific.All(eval)) return false;
                }
                if (Brow != null)
                {
                    if (!eval(this.Brow.Overall)) return false;
                    if (this.Brow.Specific != null && !this.Brow.Specific.All(eval)) return false;
                }
                if (Eye != null)
                {
                    if (!eval(this.Eye.Overall)) return false;
                    if (this.Eye.Specific != null && !this.Eye.Specific.All(eval)) return false;
                }
                if (Lip != null)
                {
                    if (!eval(this.Lip.Overall)) return false;
                    if (this.Lip.Specific != null && !this.Lip.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (Nose != null)
                {
                    if (eval(this.Nose.Overall)) return true;
                    if (this.Nose.Specific != null && this.Nose.Specific.Any(eval)) return true;
                }
                if (Brow != null)
                {
                    if (eval(this.Brow.Overall)) return true;
                    if (this.Brow.Specific != null && this.Brow.Specific.Any(eval)) return true;
                }
                if (Eye != null)
                {
                    if (eval(this.Eye.Overall)) return true;
                    if (this.Eye.Specific != null && this.Eye.Specific.Any(eval)) return true;
                }
                if (Lip != null)
                {
                    if (eval(this.Lip.Overall)) return true;
                    if (this.Lip.Specific != null && this.Lip.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AvailableMorphs.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Nose = this.Nose == null ? null : new MaskItem<R, Morph.Mask<R>?>(eval(this.Nose.Overall), this.Nose.Specific?.Translate(eval));
                obj.Brow = this.Brow == null ? null : new MaskItem<R, Morph.Mask<R>?>(eval(this.Brow.Overall), this.Brow.Specific?.Translate(eval));
                obj.Eye = this.Eye == null ? null : new MaskItem<R, Morph.Mask<R>?>(eval(this.Eye.Overall), this.Eye.Specific?.Translate(eval));
                obj.Lip = this.Lip == null ? null : new MaskItem<R, Morph.Mask<R>?>(eval(this.Lip.Overall), this.Lip.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AvailableMorphs.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AvailableMorphs.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AvailableMorphs.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Nose?.Overall ?? true)
                    {
                        Nose?.ToString(fg);
                    }
                    if (printMask?.Brow?.Overall ?? true)
                    {
                        Brow?.ToString(fg);
                    }
                    if (printMask?.Eye?.Overall ?? true)
                    {
                        Eye?.ToString(fg);
                    }
                    if (printMask?.Lip?.Overall ?? true)
                    {
                        Lip?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, Morph.ErrorMask?>? Nose;
            public MaskItem<Exception?, Morph.ErrorMask?>? Brow;
            public MaskItem<Exception?, Morph.ErrorMask?>? Eye;
            public MaskItem<Exception?, Morph.ErrorMask?>? Lip;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                AvailableMorphs_FieldIndex enu = (AvailableMorphs_FieldIndex)index;
                switch (enu)
                {
                    case AvailableMorphs_FieldIndex.Nose:
                        return Nose;
                    case AvailableMorphs_FieldIndex.Brow:
                        return Brow;
                    case AvailableMorphs_FieldIndex.Eye:
                        return Eye;
                    case AvailableMorphs_FieldIndex.Lip:
                        return Lip;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                AvailableMorphs_FieldIndex enu = (AvailableMorphs_FieldIndex)index;
                switch (enu)
                {
                    case AvailableMorphs_FieldIndex.Nose:
                        this.Nose = new MaskItem<Exception?, Morph.ErrorMask?>(ex, null);
                        break;
                    case AvailableMorphs_FieldIndex.Brow:
                        this.Brow = new MaskItem<Exception?, Morph.ErrorMask?>(ex, null);
                        break;
                    case AvailableMorphs_FieldIndex.Eye:
                        this.Eye = new MaskItem<Exception?, Morph.ErrorMask?>(ex, null);
                        break;
                    case AvailableMorphs_FieldIndex.Lip:
                        this.Lip = new MaskItem<Exception?, Morph.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                AvailableMorphs_FieldIndex enu = (AvailableMorphs_FieldIndex)index;
                switch (enu)
                {
                    case AvailableMorphs_FieldIndex.Nose:
                        this.Nose = (MaskItem<Exception?, Morph.ErrorMask?>?)obj;
                        break;
                    case AvailableMorphs_FieldIndex.Brow:
                        this.Brow = (MaskItem<Exception?, Morph.ErrorMask?>?)obj;
                        break;
                    case AvailableMorphs_FieldIndex.Eye:
                        this.Eye = (MaskItem<Exception?, Morph.ErrorMask?>?)obj;
                        break;
                    case AvailableMorphs_FieldIndex.Lip:
                        this.Lip = (MaskItem<Exception?, Morph.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Nose != null) return true;
                if (Brow != null) return true;
                if (Eye != null) return true;
                if (Lip != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                Nose?.ToString(fg);
                Brow?.ToString(fg);
                Eye?.ToString(fg);
                Lip?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Nose = this.Nose.Combine(rhs.Nose, (l, r) => l.Combine(r));
                ret.Brow = this.Brow.Combine(rhs.Brow, (l, r) => l.Combine(r));
                ret.Eye = this.Eye.Combine(rhs.Eye, (l, r) => l.Combine(r));
                ret.Lip = this.Lip.Combine(rhs.Lip, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public MaskItem<bool, Morph.TranslationMask?> Nose;
            public MaskItem<bool, Morph.TranslationMask?> Brow;
            public MaskItem<bool, Morph.TranslationMask?> Eye;
            public MaskItem<bool, Morph.TranslationMask?> Lip;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Nose = new MaskItem<bool, Morph.TranslationMask?>(defaultOn, null);
                this.Brow = new MaskItem<bool, Morph.TranslationMask?>(defaultOn, null);
                this.Eye = new MaskItem<bool, Morph.TranslationMask?>(defaultOn, null);
                this.Lip = new MaskItem<bool, Morph.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Nose?.Overall ?? true, Nose?.Specific?.GetCrystal()));
                ret.Add((Brow?.Overall ?? true, Brow?.Specific?.GetCrystal()));
                ret.Add((Eye?.Overall ?? true, Eye?.Specific?.GetCrystal()));
                ret.Add((Lip?.Overall ?? true, Lip?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = AvailableMorphs_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AvailableMorphsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AvailableMorphsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static AvailableMorphs CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static AvailableMorphs CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new AvailableMorphs();
            ((AvailableMorphsSetterCommon)((IAvailableMorphsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAvailableMorphsGetter)rhs, include);

        void IClearable.Clear()
        {
            ((AvailableMorphsSetterCommon)((IAvailableMorphsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static AvailableMorphs GetNew()
        {
            return new AvailableMorphs();
        }

    }
    #endregion

    #region Interface
    public partial interface IAvailableMorphs :
        IAvailableMorphsGetter,
        ILoquiObjectSetter<IAvailableMorphs>
    {
        new Morph? Nose { get; set; }
        new Morph? Brow { get; set; }
        new Morph? Eye { get; set; }
        new Morph? Lip { get; set; }
    }

    public partial interface IAvailableMorphsGetter :
        ILoquiObject,
        ILoquiObject<IAvailableMorphsGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        IMorphGetter? Nose { get; }
        IMorphGetter? Brow { get; }
        IMorphGetter? Eye { get; }
        IMorphGetter? Lip { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AvailableMorphsMixIn
    {
        public static void Clear(this IAvailableMorphs item)
        {
            ((AvailableMorphsSetterCommon)((IAvailableMorphsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AvailableMorphs.Mask<bool> GetEqualsMask(
            this IAvailableMorphsGetter item,
            IAvailableMorphsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AvailableMorphsCommon)((IAvailableMorphsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAvailableMorphsGetter item,
            string? name = null,
            AvailableMorphs.Mask<bool>? printMask = null)
        {
            return ((AvailableMorphsCommon)((IAvailableMorphsGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAvailableMorphsGetter item,
            FileGeneration fg,
            string? name = null,
            AvailableMorphs.Mask<bool>? printMask = null)
        {
            ((AvailableMorphsCommon)((IAvailableMorphsGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IAvailableMorphsGetter item,
            AvailableMorphs.Mask<bool?> checkMask)
        {
            return ((AvailableMorphsCommon)((IAvailableMorphsGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static AvailableMorphs.Mask<bool> GetHasBeenSetMask(this IAvailableMorphsGetter item)
        {
            var ret = new AvailableMorphs.Mask<bool>(false);
            ((AvailableMorphsCommon)((IAvailableMorphsGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IAvailableMorphsGetter item,
            IAvailableMorphsGetter rhs)
        {
            return ((AvailableMorphsCommon)((IAvailableMorphsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAvailableMorphs lhs,
            IAvailableMorphsGetter rhs,
            AvailableMorphs.TranslationMask? copyMask = null)
        {
            ((AvailableMorphsSetterTranslationCommon)((IAvailableMorphsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IAvailableMorphs lhs,
            IAvailableMorphsGetter rhs,
            out AvailableMorphs.ErrorMask errorMask,
            AvailableMorphs.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AvailableMorphsSetterTranslationCommon)((IAvailableMorphsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = AvailableMorphs.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAvailableMorphs lhs,
            IAvailableMorphsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AvailableMorphsSetterTranslationCommon)((IAvailableMorphsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static AvailableMorphs DeepCopy(
            this IAvailableMorphsGetter item,
            AvailableMorphs.TranslationMask? copyMask = null)
        {
            return ((AvailableMorphsSetterTranslationCommon)((IAvailableMorphsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AvailableMorphs DeepCopy(
            this IAvailableMorphsGetter item,
            out AvailableMorphs.ErrorMask errorMask,
            AvailableMorphs.TranslationMask? copyMask = null)
        {
            return ((AvailableMorphsSetterTranslationCommon)((IAvailableMorphsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AvailableMorphs DeepCopy(
            this IAvailableMorphsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AvailableMorphsSetterTranslationCommon)((IAvailableMorphsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAvailableMorphs item,
            XElement node,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAvailableMorphs item,
            XElement node,
            out AvailableMorphs.ErrorMask errorMask,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AvailableMorphs.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IAvailableMorphs item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((AvailableMorphsSetterCommon)((IAvailableMorphsGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAvailableMorphs item,
            string path,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAvailableMorphs item,
            string path,
            out AvailableMorphs.ErrorMask errorMask,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAvailableMorphs item,
            string path,
            ErrorMaskBuilder? errorMask,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IAvailableMorphs item,
            Stream stream,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAvailableMorphs item,
            Stream stream,
            out AvailableMorphs.ErrorMask errorMask,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAvailableMorphs item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IAvailableMorphs item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IAvailableMorphs item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AvailableMorphsSetterCommon)((IAvailableMorphsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum AvailableMorphs_FieldIndex
    {
        Nose = 0,
        Brow = 1,
        Eye = 2,
        Lip = 3,
    }
    #endregion

    #region Registration
    public partial class AvailableMorphs_Registration : ILoquiRegistration
    {
        public static readonly AvailableMorphs_Registration Instance = new AvailableMorphs_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 74,
            version: 0);

        public const string GUID = "43c181c2-3ab3-4a0c-82ce-3eb86e48d09b";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(AvailableMorphs.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AvailableMorphs.ErrorMask);

        public static readonly Type ClassType = typeof(AvailableMorphs);

        public static readonly Type GetterType = typeof(IAvailableMorphsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAvailableMorphs);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.AvailableMorphs";

        public const string Name = "AvailableMorphs";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NOSE":
                    return (ushort)AvailableMorphs_FieldIndex.Nose;
                case "BROW":
                    return (ushort)AvailableMorphs_FieldIndex.Brow;
                case "EYE":
                    return (ushort)AvailableMorphs_FieldIndex.Eye;
                case "LIP":
                    return (ushort)AvailableMorphs_FieldIndex.Lip;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AvailableMorphs_FieldIndex enu = (AvailableMorphs_FieldIndex)index;
            switch (enu)
            {
                case AvailableMorphs_FieldIndex.Nose:
                case AvailableMorphs_FieldIndex.Brow:
                case AvailableMorphs_FieldIndex.Eye:
                case AvailableMorphs_FieldIndex.Lip:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AvailableMorphs_FieldIndex enu = (AvailableMorphs_FieldIndex)index;
            switch (enu)
            {
                case AvailableMorphs_FieldIndex.Nose:
                case AvailableMorphs_FieldIndex.Brow:
                case AvailableMorphs_FieldIndex.Eye:
                case AvailableMorphs_FieldIndex.Lip:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AvailableMorphs_FieldIndex enu = (AvailableMorphs_FieldIndex)index;
            switch (enu)
            {
                case AvailableMorphs_FieldIndex.Nose:
                case AvailableMorphs_FieldIndex.Brow:
                case AvailableMorphs_FieldIndex.Eye:
                case AvailableMorphs_FieldIndex.Lip:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            AvailableMorphs_FieldIndex enu = (AvailableMorphs_FieldIndex)index;
            switch (enu)
            {
                case AvailableMorphs_FieldIndex.Nose:
                    return "Nose";
                case AvailableMorphs_FieldIndex.Brow:
                    return "Brow";
                case AvailableMorphs_FieldIndex.Eye:
                    return "Eye";
                case AvailableMorphs_FieldIndex.Lip:
                    return "Lip";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AvailableMorphs_FieldIndex enu = (AvailableMorphs_FieldIndex)index;
            switch (enu)
            {
                case AvailableMorphs_FieldIndex.Nose:
                case AvailableMorphs_FieldIndex.Brow:
                case AvailableMorphs_FieldIndex.Eye:
                case AvailableMorphs_FieldIndex.Lip:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            AvailableMorphs_FieldIndex enu = (AvailableMorphs_FieldIndex)index;
            switch (enu)
            {
                case AvailableMorphs_FieldIndex.Nose:
                case AvailableMorphs_FieldIndex.Brow:
                case AvailableMorphs_FieldIndex.Eye:
                case AvailableMorphs_FieldIndex.Lip:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            AvailableMorphs_FieldIndex enu = (AvailableMorphs_FieldIndex)index;
            switch (enu)
            {
                case AvailableMorphs_FieldIndex.Nose:
                    return typeof(Morph);
                case AvailableMorphs_FieldIndex.Brow:
                    return typeof(Morph);
                case AvailableMorphs_FieldIndex.Eye:
                    return typeof(Morph);
                case AvailableMorphs_FieldIndex.Lip:
                    return typeof(Morph);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(AvailableMorphsXmlWriteTranslation);
        public static readonly RecordType MPAI_HEADER = new RecordType("MPAI");
        public static readonly RecordType TriggeringRecordType = MPAI_HEADER;
        public const int NumStructFields = 4;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(AvailableMorphsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class AvailableMorphsSetterCommon
    {
        public static readonly AvailableMorphsSetterCommon Instance = new AvailableMorphsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAvailableMorphs item)
        {
            ClearPartial();
            item.Nose = null;
            item.Brow = null;
            item.Eye = null;
            item.Lip = null;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IAvailableMorphs item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AvailableMorphsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IAvailableMorphs item,
            MutagenFrame frame)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IAvailableMorphs item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4941504D: // MPAI
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)AvailableMorphs_FieldIndex.Nose) return TryGet<int?>.Failure;
                    AvailableMorphsBinaryCreateTranslation.FillBinaryParseCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed(lastParsed);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IAvailableMorphs item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class AvailableMorphsCommon
    {
        public static readonly AvailableMorphsCommon Instance = new AvailableMorphsCommon();

        public AvailableMorphs.Mask<bool> GetEqualsMask(
            IAvailableMorphsGetter item,
            IAvailableMorphsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AvailableMorphs.Mask<bool>(false);
            ((AvailableMorphsCommon)((IAvailableMorphsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAvailableMorphsGetter item,
            IAvailableMorphsGetter rhs,
            AvailableMorphs.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Nose = EqualsMaskHelper.EqualsHelper(
                item.Nose,
                rhs.Nose,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Brow = EqualsMaskHelper.EqualsHelper(
                item.Brow,
                rhs.Brow,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Eye = EqualsMaskHelper.EqualsHelper(
                item.Eye,
                rhs.Eye,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Lip = EqualsMaskHelper.EqualsHelper(
                item.Lip,
                rhs.Lip,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IAvailableMorphsGetter item,
            string? name = null,
            AvailableMorphs.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAvailableMorphsGetter item,
            FileGeneration fg,
            string? name = null,
            AvailableMorphs.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AvailableMorphs =>");
            }
            else
            {
                fg.AppendLine($"{name} (AvailableMorphs) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAvailableMorphsGetter item,
            FileGeneration fg,
            AvailableMorphs.Mask<bool>? printMask = null)
        {
            if ((printMask?.Nose?.Overall ?? true)
                && item.Nose.TryGet(out var NoseItem))
            {
                NoseItem?.ToString(fg, "Nose");
            }
            if ((printMask?.Brow?.Overall ?? true)
                && item.Brow.TryGet(out var BrowItem))
            {
                BrowItem?.ToString(fg, "Brow");
            }
            if ((printMask?.Eye?.Overall ?? true)
                && item.Eye.TryGet(out var EyeItem))
            {
                EyeItem?.ToString(fg, "Eye");
            }
            if ((printMask?.Lip?.Overall ?? true)
                && item.Lip.TryGet(out var LipItem))
            {
                LipItem?.ToString(fg, "Lip");
            }
        }
        
        public bool HasBeenSet(
            IAvailableMorphsGetter item,
            AvailableMorphs.Mask<bool?> checkMask)
        {
            if (checkMask.Nose?.Overall.HasValue ?? false && checkMask.Nose.Overall.Value != (item.Nose != null)) return false;
            if (checkMask.Nose?.Specific != null && (item.Nose == null || !item.Nose.HasBeenSet(checkMask.Nose.Specific))) return false;
            if (checkMask.Brow?.Overall.HasValue ?? false && checkMask.Brow.Overall.Value != (item.Brow != null)) return false;
            if (checkMask.Brow?.Specific != null && (item.Brow == null || !item.Brow.HasBeenSet(checkMask.Brow.Specific))) return false;
            if (checkMask.Eye?.Overall.HasValue ?? false && checkMask.Eye.Overall.Value != (item.Eye != null)) return false;
            if (checkMask.Eye?.Specific != null && (item.Eye == null || !item.Eye.HasBeenSet(checkMask.Eye.Specific))) return false;
            if (checkMask.Lip?.Overall.HasValue ?? false && checkMask.Lip.Overall.Value != (item.Lip != null)) return false;
            if (checkMask.Lip?.Specific != null && (item.Lip == null || !item.Lip.HasBeenSet(checkMask.Lip.Specific))) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IAvailableMorphsGetter item,
            AvailableMorphs.Mask<bool> mask)
        {
            var itemNose = item.Nose;
            mask.Nose = new MaskItem<bool, Morph.Mask<bool>?>(itemNose != null, itemNose?.GetHasBeenSetMask());
            var itemBrow = item.Brow;
            mask.Brow = new MaskItem<bool, Morph.Mask<bool>?>(itemBrow != null, itemBrow?.GetHasBeenSetMask());
            var itemEye = item.Eye;
            mask.Eye = new MaskItem<bool, Morph.Mask<bool>?>(itemEye != null, itemEye?.GetHasBeenSetMask());
            var itemLip = item.Lip;
            mask.Lip = new MaskItem<bool, Morph.Mask<bool>?>(itemLip != null, itemLip?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAvailableMorphsGetter? lhs,
            IAvailableMorphsGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.Nose, rhs.Nose)) return false;
            if (!object.Equals(lhs.Brow, rhs.Brow)) return false;
            if (!object.Equals(lhs.Eye, rhs.Eye)) return false;
            if (!object.Equals(lhs.Lip, rhs.Lip)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IAvailableMorphsGetter item)
        {
            var hash = new HashCode();
            if (item.Nose.TryGet(out var Noseitem))
            {
                hash.Add(Noseitem);
            }
            if (item.Brow.TryGet(out var Browitem))
            {
                hash.Add(Browitem);
            }
            if (item.Eye.TryGet(out var Eyeitem))
            {
                hash.Add(Eyeitem);
            }
            if (item.Lip.TryGet(out var Lipitem))
            {
                hash.Add(Lipitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return AvailableMorphs.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IAvailableMorphsGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class AvailableMorphsSetterTranslationCommon
    {
        public static readonly AvailableMorphsSetterTranslationCommon Instance = new AvailableMorphsSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IAvailableMorphs item,
            IAvailableMorphsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)AvailableMorphs_FieldIndex.Nose) ?? true))
            {
                errorMask?.PushIndex((int)AvailableMorphs_FieldIndex.Nose);
                try
                {
                    if(rhs.Nose.TryGet(out var rhsNose))
                    {
                        item.Nose = rhsNose.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AvailableMorphs_FieldIndex.Nose));
                    }
                    else
                    {
                        item.Nose = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AvailableMorphs_FieldIndex.Brow) ?? true))
            {
                errorMask?.PushIndex((int)AvailableMorphs_FieldIndex.Brow);
                try
                {
                    if(rhs.Brow.TryGet(out var rhsBrow))
                    {
                        item.Brow = rhsBrow.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AvailableMorphs_FieldIndex.Brow));
                    }
                    else
                    {
                        item.Brow = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AvailableMorphs_FieldIndex.Eye) ?? true))
            {
                errorMask?.PushIndex((int)AvailableMorphs_FieldIndex.Eye);
                try
                {
                    if(rhs.Eye.TryGet(out var rhsEye))
                    {
                        item.Eye = rhsEye.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AvailableMorphs_FieldIndex.Eye));
                    }
                    else
                    {
                        item.Eye = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AvailableMorphs_FieldIndex.Lip) ?? true))
            {
                errorMask?.PushIndex((int)AvailableMorphs_FieldIndex.Lip);
                try
                {
                    if(rhs.Lip.TryGet(out var rhsLip))
                    {
                        item.Lip = rhsLip.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AvailableMorphs_FieldIndex.Lip));
                    }
                    else
                    {
                        item.Lip = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public AvailableMorphs DeepCopy(
            IAvailableMorphsGetter item,
            AvailableMorphs.TranslationMask? copyMask = null)
        {
            AvailableMorphs ret = (AvailableMorphs)((AvailableMorphsCommon)((IAvailableMorphsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public AvailableMorphs DeepCopy(
            IAvailableMorphsGetter item,
            out AvailableMorphs.ErrorMask errorMask,
            AvailableMorphs.TranslationMask? copyMask = null)
        {
            AvailableMorphs ret = (AvailableMorphs)((AvailableMorphsCommon)((IAvailableMorphsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public AvailableMorphs DeepCopy(
            IAvailableMorphsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AvailableMorphs ret = (AvailableMorphs)((AvailableMorphsCommon)((IAvailableMorphsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class AvailableMorphs
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AvailableMorphs_Registration.Instance;
        public static AvailableMorphs_Registration Registration => AvailableMorphs_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AvailableMorphsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return AvailableMorphsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AvailableMorphsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAvailableMorphsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAvailableMorphsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IAvailableMorphsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AvailableMorphsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static AvailableMorphsXmlWriteTranslation Instance = new AvailableMorphsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IAvailableMorphsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((item.Nose != null)
                && (translationMask?.GetShouldTranslate((int)AvailableMorphs_FieldIndex.Nose) ?? true))
            {
                if (item.Nose.TryGet(out var NoseItem))
                {
                    ((MorphXmlWriteTranslation)((IXmlItem)NoseItem).XmlWriteTranslator).Write(
                        item: NoseItem,
                        node: node,
                        name: nameof(item.Nose),
                        fieldIndex: (int)AvailableMorphs_FieldIndex.Nose,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AvailableMorphs_FieldIndex.Nose));
                }
            }
            if ((item.Brow != null)
                && (translationMask?.GetShouldTranslate((int)AvailableMorphs_FieldIndex.Brow) ?? true))
            {
                if (item.Brow.TryGet(out var BrowItem))
                {
                    ((MorphXmlWriteTranslation)((IXmlItem)BrowItem).XmlWriteTranslator).Write(
                        item: BrowItem,
                        node: node,
                        name: nameof(item.Brow),
                        fieldIndex: (int)AvailableMorphs_FieldIndex.Brow,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AvailableMorphs_FieldIndex.Brow));
                }
            }
            if ((item.Eye != null)
                && (translationMask?.GetShouldTranslate((int)AvailableMorphs_FieldIndex.Eye) ?? true))
            {
                if (item.Eye.TryGet(out var EyeItem))
                {
                    ((MorphXmlWriteTranslation)((IXmlItem)EyeItem).XmlWriteTranslator).Write(
                        item: EyeItem,
                        node: node,
                        name: nameof(item.Eye),
                        fieldIndex: (int)AvailableMorphs_FieldIndex.Eye,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AvailableMorphs_FieldIndex.Eye));
                }
            }
            if ((item.Lip != null)
                && (translationMask?.GetShouldTranslate((int)AvailableMorphs_FieldIndex.Lip) ?? true))
            {
                if (item.Lip.TryGet(out var LipItem))
                {
                    ((MorphXmlWriteTranslation)((IXmlItem)LipItem).XmlWriteTranslator).Write(
                        item: LipItem,
                        node: node,
                        name: nameof(item.Lip),
                        fieldIndex: (int)AvailableMorphs_FieldIndex.Lip,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AvailableMorphs_FieldIndex.Lip));
                }
            }
        }

        public void Write(
            XElement node,
            IAvailableMorphsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.AvailableMorphs");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.AvailableMorphs");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAvailableMorphsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IAvailableMorphsGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IAvailableMorphsGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class AvailableMorphsXmlCreateTranslation
    {
        public readonly static AvailableMorphsXmlCreateTranslation Instance = new AvailableMorphsXmlCreateTranslation();

        public static void FillPublicXml(
            IAvailableMorphs item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AvailableMorphsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IAvailableMorphs item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Nose":
                    errorMask?.PushIndex((int)AvailableMorphs_FieldIndex.Nose);
                    try
                    {
                        item.Nose = LoquiXmlTranslation<Morph>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AvailableMorphs_FieldIndex.Nose));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Brow":
                    errorMask?.PushIndex((int)AvailableMorphs_FieldIndex.Brow);
                    try
                    {
                        item.Brow = LoquiXmlTranslation<Morph>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AvailableMorphs_FieldIndex.Brow));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eye":
                    errorMask?.PushIndex((int)AvailableMorphs_FieldIndex.Eye);
                    try
                    {
                        item.Eye = LoquiXmlTranslation<Morph>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AvailableMorphs_FieldIndex.Eye));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lip":
                    errorMask?.PushIndex((int)AvailableMorphs_FieldIndex.Lip);
                    try
                    {
                        item.Lip = LoquiXmlTranslation<Morph>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AvailableMorphs_FieldIndex.Lip));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class AvailableMorphsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IAvailableMorphsGetter item,
            XElement node,
            out AvailableMorphs.ErrorMask errorMask,
            AvailableMorphs.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((AvailableMorphsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AvailableMorphs.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IAvailableMorphsGetter item,
            string path,
            out AvailableMorphs.ErrorMask errorMask,
            AvailableMorphs.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAvailableMorphsGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAvailableMorphsGetter item,
            Stream stream,
            out AvailableMorphs.ErrorMask errorMask,
            AvailableMorphs.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IAvailableMorphsGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IAvailableMorphsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((AvailableMorphsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IAvailableMorphsGetter item,
            XElement node,
            string? name = null,
            AvailableMorphs.TranslationMask? translationMask = null)
        {
            ((AvailableMorphsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IAvailableMorphsGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((AvailableMorphsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAvailableMorphsGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((AvailableMorphsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AvailableMorphsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static AvailableMorphsBinaryWriteTranslation Instance = new AvailableMorphsBinaryWriteTranslation();

        static partial void WriteBinaryParseCustom(
            MutagenWriter writer,
            IAvailableMorphsGetter item);

        public static void WriteBinaryParse(
            MutagenWriter writer,
            IAvailableMorphsGetter item)
        {
            WriteBinaryParseCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IAvailableMorphsGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            IAvailableMorphsGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            AvailableMorphsBinaryWriteTranslation.WriteBinaryParse(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IAvailableMorphsGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAvailableMorphsGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class AvailableMorphsBinaryCreateTranslation
    {
        public readonly static AvailableMorphsBinaryCreateTranslation Instance = new AvailableMorphsBinaryCreateTranslation();

        static partial void FillBinaryParseCustom(
            MutagenFrame frame,
            IAvailableMorphs item);

        public static void FillBinaryParseCustomPublic(
            MutagenFrame frame,
            IAvailableMorphs item)
        {
            FillBinaryParseCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class AvailableMorphsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAvailableMorphsGetter item,
            MutagenWriter writer)
        {
            ((AvailableMorphsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class AvailableMorphsBinaryOverlay :
        BinaryOverlay,
        IAvailableMorphsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AvailableMorphs_Registration.Instance;
        public static AvailableMorphs_Registration Registration => AvailableMorphs_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AvailableMorphsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AvailableMorphsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAvailableMorphsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IAvailableMorphsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IAvailableMorphsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAvailableMorphsGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => AvailableMorphsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((AvailableMorphsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AvailableMorphsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AvailableMorphsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Parse
        partial void ParseCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected AvailableMorphsBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static AvailableMorphsBinaryOverlay AvailableMorphsFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new AvailableMorphsBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4941504D: // MPAI
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)AvailableMorphs_FieldIndex.Nose) return TryGet<int?>.Failure;
                    ParseCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(lastParsed);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

