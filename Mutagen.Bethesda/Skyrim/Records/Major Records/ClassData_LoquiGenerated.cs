/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class ClassData :
        IClassData,
        ILoquiObjectSetter<ClassData>,
        IEquatable<ClassData>,
        IEqualsMask
    {
        #region Ctor
        public ClassData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Unknown
        public Int32 Unknown { get; set; } = default;
        #endregion
        #region Teaches
        public Skill Teaches { get; set; } = default;
        #endregion
        #region MaxTrainingLevel
        public Byte MaxTrainingLevel { get; set; } = default;
        #endregion
        #region OneHandedWeight
        public Byte OneHandedWeight { get; set; } = default;
        #endregion
        #region TwoHandedWeight
        public Byte TwoHandedWeight { get; set; } = default;
        #endregion
        #region MarksmanWeight
        public Byte MarksmanWeight { get; set; } = default;
        #endregion
        #region BlockWeight
        public Byte BlockWeight { get; set; } = default;
        #endregion
        #region SmithingWeight
        public Byte SmithingWeight { get; set; } = default;
        #endregion
        #region HeavyArmorWeight
        public Byte HeavyArmorWeight { get; set; } = default;
        #endregion
        #region LightArmorWeight
        public Byte LightArmorWeight { get; set; } = default;
        #endregion
        #region PickpocketWeight
        public Byte PickpocketWeight { get; set; } = default;
        #endregion
        #region LockpickingWeight
        public Byte LockpickingWeight { get; set; } = default;
        #endregion
        #region SneakWeight
        public Byte SneakWeight { get; set; } = default;
        #endregion
        #region AlchemyWeight
        public Byte AlchemyWeight { get; set; } = default;
        #endregion
        #region SpeechcraftWeight
        public Byte SpeechcraftWeight { get; set; } = default;
        #endregion
        #region AlterationWeight
        public Byte AlterationWeight { get; set; } = default;
        #endregion
        #region ConjurationWeight
        public Byte ConjurationWeight { get; set; } = default;
        #endregion
        #region DestructionWeight
        public Byte DestructionWeight { get; set; } = default;
        #endregion
        #region IllusionWeight
        public Byte IllusionWeight { get; set; } = default;
        #endregion
        #region RestorationWeight
        public Byte RestorationWeight { get; set; } = default;
        #endregion
        #region EnchantingWeight
        public Byte EnchantingWeight { get; set; } = default;
        #endregion
        #region BleedoutDefault
        public Single BleedoutDefault { get; set; } = default;
        #endregion
        #region VoicePoints
        public UInt32 VoicePoints { get; set; } = default;
        #endregion
        #region HealthWeight
        public Byte HealthWeight { get; set; } = default;
        #endregion
        #region MagickaWeight
        public Byte MagickaWeight { get; set; } = default;
        #endregion
        #region StaminaWeight
        public Byte StaminaWeight { get; set; } = default;
        #endregion
        #region Unknown2
        public Byte Unknown2 { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClassDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IClassDataGetter rhs)) return false;
            return ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ClassData obj)
        {
            return ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ClassDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClassDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ClassData CreateFromXml(
            XElement node,
            ClassData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ClassData CreateFromXml(
            XElement node,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ClassData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ClassData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new ClassData();
            ((ClassDataSetterCommon)((IClassDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ClassData CreateFromXml(
            string path,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ClassData CreateFromXml(
            string path,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ClassData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ClassData CreateFromXml(
            Stream stream,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ClassData CreateFromXml(
            Stream stream,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ClassData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Unknown = initialValue;
                this.Teaches = initialValue;
                this.MaxTrainingLevel = initialValue;
                this.OneHandedWeight = initialValue;
                this.TwoHandedWeight = initialValue;
                this.MarksmanWeight = initialValue;
                this.BlockWeight = initialValue;
                this.SmithingWeight = initialValue;
                this.HeavyArmorWeight = initialValue;
                this.LightArmorWeight = initialValue;
                this.PickpocketWeight = initialValue;
                this.LockpickingWeight = initialValue;
                this.SneakWeight = initialValue;
                this.AlchemyWeight = initialValue;
                this.SpeechcraftWeight = initialValue;
                this.AlterationWeight = initialValue;
                this.ConjurationWeight = initialValue;
                this.DestructionWeight = initialValue;
                this.IllusionWeight = initialValue;
                this.RestorationWeight = initialValue;
                this.EnchantingWeight = initialValue;
                this.BleedoutDefault = initialValue;
                this.VoicePoints = initialValue;
                this.HealthWeight = initialValue;
                this.MagickaWeight = initialValue;
                this.StaminaWeight = initialValue;
                this.Unknown2 = initialValue;
            }

            public Mask(
                TItem Unknown,
                TItem Teaches,
                TItem MaxTrainingLevel,
                TItem OneHandedWeight,
                TItem TwoHandedWeight,
                TItem MarksmanWeight,
                TItem BlockWeight,
                TItem SmithingWeight,
                TItem HeavyArmorWeight,
                TItem LightArmorWeight,
                TItem PickpocketWeight,
                TItem LockpickingWeight,
                TItem SneakWeight,
                TItem AlchemyWeight,
                TItem SpeechcraftWeight,
                TItem AlterationWeight,
                TItem ConjurationWeight,
                TItem DestructionWeight,
                TItem IllusionWeight,
                TItem RestorationWeight,
                TItem EnchantingWeight,
                TItem BleedoutDefault,
                TItem VoicePoints,
                TItem HealthWeight,
                TItem MagickaWeight,
                TItem StaminaWeight,
                TItem Unknown2)
            {
                this.Unknown = Unknown;
                this.Teaches = Teaches;
                this.MaxTrainingLevel = MaxTrainingLevel;
                this.OneHandedWeight = OneHandedWeight;
                this.TwoHandedWeight = TwoHandedWeight;
                this.MarksmanWeight = MarksmanWeight;
                this.BlockWeight = BlockWeight;
                this.SmithingWeight = SmithingWeight;
                this.HeavyArmorWeight = HeavyArmorWeight;
                this.LightArmorWeight = LightArmorWeight;
                this.PickpocketWeight = PickpocketWeight;
                this.LockpickingWeight = LockpickingWeight;
                this.SneakWeight = SneakWeight;
                this.AlchemyWeight = AlchemyWeight;
                this.SpeechcraftWeight = SpeechcraftWeight;
                this.AlterationWeight = AlterationWeight;
                this.ConjurationWeight = ConjurationWeight;
                this.DestructionWeight = DestructionWeight;
                this.IllusionWeight = IllusionWeight;
                this.RestorationWeight = RestorationWeight;
                this.EnchantingWeight = EnchantingWeight;
                this.BleedoutDefault = BleedoutDefault;
                this.VoicePoints = VoicePoints;
                this.HealthWeight = HealthWeight;
                this.MagickaWeight = MagickaWeight;
                this.StaminaWeight = StaminaWeight;
                this.Unknown2 = Unknown2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Unknown;
            public TItem Teaches;
            public TItem MaxTrainingLevel;
            public TItem OneHandedWeight;
            public TItem TwoHandedWeight;
            public TItem MarksmanWeight;
            public TItem BlockWeight;
            public TItem SmithingWeight;
            public TItem HeavyArmorWeight;
            public TItem LightArmorWeight;
            public TItem PickpocketWeight;
            public TItem LockpickingWeight;
            public TItem SneakWeight;
            public TItem AlchemyWeight;
            public TItem SpeechcraftWeight;
            public TItem AlterationWeight;
            public TItem ConjurationWeight;
            public TItem DestructionWeight;
            public TItem IllusionWeight;
            public TItem RestorationWeight;
            public TItem EnchantingWeight;
            public TItem BleedoutDefault;
            public TItem VoicePoints;
            public TItem HealthWeight;
            public TItem MagickaWeight;
            public TItem StaminaWeight;
            public TItem Unknown2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
                if (!object.Equals(this.MaxTrainingLevel, rhs.MaxTrainingLevel)) return false;
                if (!object.Equals(this.OneHandedWeight, rhs.OneHandedWeight)) return false;
                if (!object.Equals(this.TwoHandedWeight, rhs.TwoHandedWeight)) return false;
                if (!object.Equals(this.MarksmanWeight, rhs.MarksmanWeight)) return false;
                if (!object.Equals(this.BlockWeight, rhs.BlockWeight)) return false;
                if (!object.Equals(this.SmithingWeight, rhs.SmithingWeight)) return false;
                if (!object.Equals(this.HeavyArmorWeight, rhs.HeavyArmorWeight)) return false;
                if (!object.Equals(this.LightArmorWeight, rhs.LightArmorWeight)) return false;
                if (!object.Equals(this.PickpocketWeight, rhs.PickpocketWeight)) return false;
                if (!object.Equals(this.LockpickingWeight, rhs.LockpickingWeight)) return false;
                if (!object.Equals(this.SneakWeight, rhs.SneakWeight)) return false;
                if (!object.Equals(this.AlchemyWeight, rhs.AlchemyWeight)) return false;
                if (!object.Equals(this.SpeechcraftWeight, rhs.SpeechcraftWeight)) return false;
                if (!object.Equals(this.AlterationWeight, rhs.AlterationWeight)) return false;
                if (!object.Equals(this.ConjurationWeight, rhs.ConjurationWeight)) return false;
                if (!object.Equals(this.DestructionWeight, rhs.DestructionWeight)) return false;
                if (!object.Equals(this.IllusionWeight, rhs.IllusionWeight)) return false;
                if (!object.Equals(this.RestorationWeight, rhs.RestorationWeight)) return false;
                if (!object.Equals(this.EnchantingWeight, rhs.EnchantingWeight)) return false;
                if (!object.Equals(this.BleedoutDefault, rhs.BleedoutDefault)) return false;
                if (!object.Equals(this.VoicePoints, rhs.VoicePoints)) return false;
                if (!object.Equals(this.HealthWeight, rhs.HealthWeight)) return false;
                if (!object.Equals(this.MagickaWeight, rhs.MagickaWeight)) return false;
                if (!object.Equals(this.StaminaWeight, rhs.StaminaWeight)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Unknown);
                hash.Add(this.Teaches);
                hash.Add(this.MaxTrainingLevel);
                hash.Add(this.OneHandedWeight);
                hash.Add(this.TwoHandedWeight);
                hash.Add(this.MarksmanWeight);
                hash.Add(this.BlockWeight);
                hash.Add(this.SmithingWeight);
                hash.Add(this.HeavyArmorWeight);
                hash.Add(this.LightArmorWeight);
                hash.Add(this.PickpocketWeight);
                hash.Add(this.LockpickingWeight);
                hash.Add(this.SneakWeight);
                hash.Add(this.AlchemyWeight);
                hash.Add(this.SpeechcraftWeight);
                hash.Add(this.AlterationWeight);
                hash.Add(this.ConjurationWeight);
                hash.Add(this.DestructionWeight);
                hash.Add(this.IllusionWeight);
                hash.Add(this.RestorationWeight);
                hash.Add(this.EnchantingWeight);
                hash.Add(this.BleedoutDefault);
                hash.Add(this.VoicePoints);
                hash.Add(this.HealthWeight);
                hash.Add(this.MagickaWeight);
                hash.Add(this.StaminaWeight);
                hash.Add(this.Unknown2);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Teaches)) return false;
                if (!eval(this.MaxTrainingLevel)) return false;
                if (!eval(this.OneHandedWeight)) return false;
                if (!eval(this.TwoHandedWeight)) return false;
                if (!eval(this.MarksmanWeight)) return false;
                if (!eval(this.BlockWeight)) return false;
                if (!eval(this.SmithingWeight)) return false;
                if (!eval(this.HeavyArmorWeight)) return false;
                if (!eval(this.LightArmorWeight)) return false;
                if (!eval(this.PickpocketWeight)) return false;
                if (!eval(this.LockpickingWeight)) return false;
                if (!eval(this.SneakWeight)) return false;
                if (!eval(this.AlchemyWeight)) return false;
                if (!eval(this.SpeechcraftWeight)) return false;
                if (!eval(this.AlterationWeight)) return false;
                if (!eval(this.ConjurationWeight)) return false;
                if (!eval(this.DestructionWeight)) return false;
                if (!eval(this.IllusionWeight)) return false;
                if (!eval(this.RestorationWeight)) return false;
                if (!eval(this.EnchantingWeight)) return false;
                if (!eval(this.BleedoutDefault)) return false;
                if (!eval(this.VoicePoints)) return false;
                if (!eval(this.HealthWeight)) return false;
                if (!eval(this.MagickaWeight)) return false;
                if (!eval(this.StaminaWeight)) return false;
                if (!eval(this.Unknown2)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Unknown)) return true;
                if (eval(this.Teaches)) return true;
                if (eval(this.MaxTrainingLevel)) return true;
                if (eval(this.OneHandedWeight)) return true;
                if (eval(this.TwoHandedWeight)) return true;
                if (eval(this.MarksmanWeight)) return true;
                if (eval(this.BlockWeight)) return true;
                if (eval(this.SmithingWeight)) return true;
                if (eval(this.HeavyArmorWeight)) return true;
                if (eval(this.LightArmorWeight)) return true;
                if (eval(this.PickpocketWeight)) return true;
                if (eval(this.LockpickingWeight)) return true;
                if (eval(this.SneakWeight)) return true;
                if (eval(this.AlchemyWeight)) return true;
                if (eval(this.SpeechcraftWeight)) return true;
                if (eval(this.AlterationWeight)) return true;
                if (eval(this.ConjurationWeight)) return true;
                if (eval(this.DestructionWeight)) return true;
                if (eval(this.IllusionWeight)) return true;
                if (eval(this.RestorationWeight)) return true;
                if (eval(this.EnchantingWeight)) return true;
                if (eval(this.BleedoutDefault)) return true;
                if (eval(this.VoicePoints)) return true;
                if (eval(this.HealthWeight)) return true;
                if (eval(this.MagickaWeight)) return true;
                if (eval(this.StaminaWeight)) return true;
                if (eval(this.Unknown2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ClassData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Unknown = eval(this.Unknown);
                obj.Teaches = eval(this.Teaches);
                obj.MaxTrainingLevel = eval(this.MaxTrainingLevel);
                obj.OneHandedWeight = eval(this.OneHandedWeight);
                obj.TwoHandedWeight = eval(this.TwoHandedWeight);
                obj.MarksmanWeight = eval(this.MarksmanWeight);
                obj.BlockWeight = eval(this.BlockWeight);
                obj.SmithingWeight = eval(this.SmithingWeight);
                obj.HeavyArmorWeight = eval(this.HeavyArmorWeight);
                obj.LightArmorWeight = eval(this.LightArmorWeight);
                obj.PickpocketWeight = eval(this.PickpocketWeight);
                obj.LockpickingWeight = eval(this.LockpickingWeight);
                obj.SneakWeight = eval(this.SneakWeight);
                obj.AlchemyWeight = eval(this.AlchemyWeight);
                obj.SpeechcraftWeight = eval(this.SpeechcraftWeight);
                obj.AlterationWeight = eval(this.AlterationWeight);
                obj.ConjurationWeight = eval(this.ConjurationWeight);
                obj.DestructionWeight = eval(this.DestructionWeight);
                obj.IllusionWeight = eval(this.IllusionWeight);
                obj.RestorationWeight = eval(this.RestorationWeight);
                obj.EnchantingWeight = eval(this.EnchantingWeight);
                obj.BleedoutDefault = eval(this.BleedoutDefault);
                obj.VoicePoints = eval(this.VoicePoints);
                obj.HealthWeight = eval(this.HealthWeight);
                obj.MagickaWeight = eval(this.MagickaWeight);
                obj.StaminaWeight = eval(this.StaminaWeight);
                obj.Unknown2 = eval(this.Unknown2);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ClassData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ClassData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ClassData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Teaches ?? true)
                    {
                        fg.AppendItem(Teaches, "Teaches");
                    }
                    if (printMask?.MaxTrainingLevel ?? true)
                    {
                        fg.AppendItem(MaxTrainingLevel, "MaxTrainingLevel");
                    }
                    if (printMask?.OneHandedWeight ?? true)
                    {
                        fg.AppendItem(OneHandedWeight, "OneHandedWeight");
                    }
                    if (printMask?.TwoHandedWeight ?? true)
                    {
                        fg.AppendItem(TwoHandedWeight, "TwoHandedWeight");
                    }
                    if (printMask?.MarksmanWeight ?? true)
                    {
                        fg.AppendItem(MarksmanWeight, "MarksmanWeight");
                    }
                    if (printMask?.BlockWeight ?? true)
                    {
                        fg.AppendItem(BlockWeight, "BlockWeight");
                    }
                    if (printMask?.SmithingWeight ?? true)
                    {
                        fg.AppendItem(SmithingWeight, "SmithingWeight");
                    }
                    if (printMask?.HeavyArmorWeight ?? true)
                    {
                        fg.AppendItem(HeavyArmorWeight, "HeavyArmorWeight");
                    }
                    if (printMask?.LightArmorWeight ?? true)
                    {
                        fg.AppendItem(LightArmorWeight, "LightArmorWeight");
                    }
                    if (printMask?.PickpocketWeight ?? true)
                    {
                        fg.AppendItem(PickpocketWeight, "PickpocketWeight");
                    }
                    if (printMask?.LockpickingWeight ?? true)
                    {
                        fg.AppendItem(LockpickingWeight, "LockpickingWeight");
                    }
                    if (printMask?.SneakWeight ?? true)
                    {
                        fg.AppendItem(SneakWeight, "SneakWeight");
                    }
                    if (printMask?.AlchemyWeight ?? true)
                    {
                        fg.AppendItem(AlchemyWeight, "AlchemyWeight");
                    }
                    if (printMask?.SpeechcraftWeight ?? true)
                    {
                        fg.AppendItem(SpeechcraftWeight, "SpeechcraftWeight");
                    }
                    if (printMask?.AlterationWeight ?? true)
                    {
                        fg.AppendItem(AlterationWeight, "AlterationWeight");
                    }
                    if (printMask?.ConjurationWeight ?? true)
                    {
                        fg.AppendItem(ConjurationWeight, "ConjurationWeight");
                    }
                    if (printMask?.DestructionWeight ?? true)
                    {
                        fg.AppendItem(DestructionWeight, "DestructionWeight");
                    }
                    if (printMask?.IllusionWeight ?? true)
                    {
                        fg.AppendItem(IllusionWeight, "IllusionWeight");
                    }
                    if (printMask?.RestorationWeight ?? true)
                    {
                        fg.AppendItem(RestorationWeight, "RestorationWeight");
                    }
                    if (printMask?.EnchantingWeight ?? true)
                    {
                        fg.AppendItem(EnchantingWeight, "EnchantingWeight");
                    }
                    if (printMask?.BleedoutDefault ?? true)
                    {
                        fg.AppendItem(BleedoutDefault, "BleedoutDefault");
                    }
                    if (printMask?.VoicePoints ?? true)
                    {
                        fg.AppendItem(VoicePoints, "VoicePoints");
                    }
                    if (printMask?.HealthWeight ?? true)
                    {
                        fg.AppendItem(HealthWeight, "HealthWeight");
                    }
                    if (printMask?.MagickaWeight ?? true)
                    {
                        fg.AppendItem(MagickaWeight, "MagickaWeight");
                    }
                    if (printMask?.StaminaWeight ?? true)
                    {
                        fg.AppendItem(StaminaWeight, "StaminaWeight");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Unknown;
            public Exception? Teaches;
            public Exception? MaxTrainingLevel;
            public Exception? OneHandedWeight;
            public Exception? TwoHandedWeight;
            public Exception? MarksmanWeight;
            public Exception? BlockWeight;
            public Exception? SmithingWeight;
            public Exception? HeavyArmorWeight;
            public Exception? LightArmorWeight;
            public Exception? PickpocketWeight;
            public Exception? LockpickingWeight;
            public Exception? SneakWeight;
            public Exception? AlchemyWeight;
            public Exception? SpeechcraftWeight;
            public Exception? AlterationWeight;
            public Exception? ConjurationWeight;
            public Exception? DestructionWeight;
            public Exception? IllusionWeight;
            public Exception? RestorationWeight;
            public Exception? EnchantingWeight;
            public Exception? BleedoutDefault;
            public Exception? VoicePoints;
            public Exception? HealthWeight;
            public Exception? MagickaWeight;
            public Exception? StaminaWeight;
            public Exception? Unknown2;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
                switch (enu)
                {
                    case ClassData_FieldIndex.Unknown:
                        return Unknown;
                    case ClassData_FieldIndex.Teaches:
                        return Teaches;
                    case ClassData_FieldIndex.MaxTrainingLevel:
                        return MaxTrainingLevel;
                    case ClassData_FieldIndex.OneHandedWeight:
                        return OneHandedWeight;
                    case ClassData_FieldIndex.TwoHandedWeight:
                        return TwoHandedWeight;
                    case ClassData_FieldIndex.MarksmanWeight:
                        return MarksmanWeight;
                    case ClassData_FieldIndex.BlockWeight:
                        return BlockWeight;
                    case ClassData_FieldIndex.SmithingWeight:
                        return SmithingWeight;
                    case ClassData_FieldIndex.HeavyArmorWeight:
                        return HeavyArmorWeight;
                    case ClassData_FieldIndex.LightArmorWeight:
                        return LightArmorWeight;
                    case ClassData_FieldIndex.PickpocketWeight:
                        return PickpocketWeight;
                    case ClassData_FieldIndex.LockpickingWeight:
                        return LockpickingWeight;
                    case ClassData_FieldIndex.SneakWeight:
                        return SneakWeight;
                    case ClassData_FieldIndex.AlchemyWeight:
                        return AlchemyWeight;
                    case ClassData_FieldIndex.SpeechcraftWeight:
                        return SpeechcraftWeight;
                    case ClassData_FieldIndex.AlterationWeight:
                        return AlterationWeight;
                    case ClassData_FieldIndex.ConjurationWeight:
                        return ConjurationWeight;
                    case ClassData_FieldIndex.DestructionWeight:
                        return DestructionWeight;
                    case ClassData_FieldIndex.IllusionWeight:
                        return IllusionWeight;
                    case ClassData_FieldIndex.RestorationWeight:
                        return RestorationWeight;
                    case ClassData_FieldIndex.EnchantingWeight:
                        return EnchantingWeight;
                    case ClassData_FieldIndex.BleedoutDefault:
                        return BleedoutDefault;
                    case ClassData_FieldIndex.VoicePoints:
                        return VoicePoints;
                    case ClassData_FieldIndex.HealthWeight:
                        return HealthWeight;
                    case ClassData_FieldIndex.MagickaWeight:
                        return MagickaWeight;
                    case ClassData_FieldIndex.StaminaWeight:
                        return StaminaWeight;
                    case ClassData_FieldIndex.Unknown2:
                        return Unknown2;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
                switch (enu)
                {
                    case ClassData_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case ClassData_FieldIndex.Teaches:
                        this.Teaches = ex;
                        break;
                    case ClassData_FieldIndex.MaxTrainingLevel:
                        this.MaxTrainingLevel = ex;
                        break;
                    case ClassData_FieldIndex.OneHandedWeight:
                        this.OneHandedWeight = ex;
                        break;
                    case ClassData_FieldIndex.TwoHandedWeight:
                        this.TwoHandedWeight = ex;
                        break;
                    case ClassData_FieldIndex.MarksmanWeight:
                        this.MarksmanWeight = ex;
                        break;
                    case ClassData_FieldIndex.BlockWeight:
                        this.BlockWeight = ex;
                        break;
                    case ClassData_FieldIndex.SmithingWeight:
                        this.SmithingWeight = ex;
                        break;
                    case ClassData_FieldIndex.HeavyArmorWeight:
                        this.HeavyArmorWeight = ex;
                        break;
                    case ClassData_FieldIndex.LightArmorWeight:
                        this.LightArmorWeight = ex;
                        break;
                    case ClassData_FieldIndex.PickpocketWeight:
                        this.PickpocketWeight = ex;
                        break;
                    case ClassData_FieldIndex.LockpickingWeight:
                        this.LockpickingWeight = ex;
                        break;
                    case ClassData_FieldIndex.SneakWeight:
                        this.SneakWeight = ex;
                        break;
                    case ClassData_FieldIndex.AlchemyWeight:
                        this.AlchemyWeight = ex;
                        break;
                    case ClassData_FieldIndex.SpeechcraftWeight:
                        this.SpeechcraftWeight = ex;
                        break;
                    case ClassData_FieldIndex.AlterationWeight:
                        this.AlterationWeight = ex;
                        break;
                    case ClassData_FieldIndex.ConjurationWeight:
                        this.ConjurationWeight = ex;
                        break;
                    case ClassData_FieldIndex.DestructionWeight:
                        this.DestructionWeight = ex;
                        break;
                    case ClassData_FieldIndex.IllusionWeight:
                        this.IllusionWeight = ex;
                        break;
                    case ClassData_FieldIndex.RestorationWeight:
                        this.RestorationWeight = ex;
                        break;
                    case ClassData_FieldIndex.EnchantingWeight:
                        this.EnchantingWeight = ex;
                        break;
                    case ClassData_FieldIndex.BleedoutDefault:
                        this.BleedoutDefault = ex;
                        break;
                    case ClassData_FieldIndex.VoicePoints:
                        this.VoicePoints = ex;
                        break;
                    case ClassData_FieldIndex.HealthWeight:
                        this.HealthWeight = ex;
                        break;
                    case ClassData_FieldIndex.MagickaWeight:
                        this.MagickaWeight = ex;
                        break;
                    case ClassData_FieldIndex.StaminaWeight:
                        this.StaminaWeight = ex;
                        break;
                    case ClassData_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
                switch (enu)
                {
                    case ClassData_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.Teaches:
                        this.Teaches = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.MaxTrainingLevel:
                        this.MaxTrainingLevel = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.OneHandedWeight:
                        this.OneHandedWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.TwoHandedWeight:
                        this.TwoHandedWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.MarksmanWeight:
                        this.MarksmanWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.BlockWeight:
                        this.BlockWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.SmithingWeight:
                        this.SmithingWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.HeavyArmorWeight:
                        this.HeavyArmorWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.LightArmorWeight:
                        this.LightArmorWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.PickpocketWeight:
                        this.PickpocketWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.LockpickingWeight:
                        this.LockpickingWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.SneakWeight:
                        this.SneakWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.AlchemyWeight:
                        this.AlchemyWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.SpeechcraftWeight:
                        this.SpeechcraftWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.AlterationWeight:
                        this.AlterationWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.ConjurationWeight:
                        this.ConjurationWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.DestructionWeight:
                        this.DestructionWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.IllusionWeight:
                        this.IllusionWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.RestorationWeight:
                        this.RestorationWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.EnchantingWeight:
                        this.EnchantingWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.BleedoutDefault:
                        this.BleedoutDefault = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.VoicePoints:
                        this.VoicePoints = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.HealthWeight:
                        this.HealthWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.MagickaWeight:
                        this.MagickaWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.StaminaWeight:
                        this.StaminaWeight = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Unknown != null) return true;
                if (Teaches != null) return true;
                if (MaxTrainingLevel != null) return true;
                if (OneHandedWeight != null) return true;
                if (TwoHandedWeight != null) return true;
                if (MarksmanWeight != null) return true;
                if (BlockWeight != null) return true;
                if (SmithingWeight != null) return true;
                if (HeavyArmorWeight != null) return true;
                if (LightArmorWeight != null) return true;
                if (PickpocketWeight != null) return true;
                if (LockpickingWeight != null) return true;
                if (SneakWeight != null) return true;
                if (AlchemyWeight != null) return true;
                if (SpeechcraftWeight != null) return true;
                if (AlterationWeight != null) return true;
                if (ConjurationWeight != null) return true;
                if (DestructionWeight != null) return true;
                if (IllusionWeight != null) return true;
                if (RestorationWeight != null) return true;
                if (EnchantingWeight != null) return true;
                if (BleedoutDefault != null) return true;
                if (VoicePoints != null) return true;
                if (HealthWeight != null) return true;
                if (MagickaWeight != null) return true;
                if (StaminaWeight != null) return true;
                if (Unknown2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(Teaches, "Teaches");
                fg.AppendItem(MaxTrainingLevel, "MaxTrainingLevel");
                fg.AppendItem(OneHandedWeight, "OneHandedWeight");
                fg.AppendItem(TwoHandedWeight, "TwoHandedWeight");
                fg.AppendItem(MarksmanWeight, "MarksmanWeight");
                fg.AppendItem(BlockWeight, "BlockWeight");
                fg.AppendItem(SmithingWeight, "SmithingWeight");
                fg.AppendItem(HeavyArmorWeight, "HeavyArmorWeight");
                fg.AppendItem(LightArmorWeight, "LightArmorWeight");
                fg.AppendItem(PickpocketWeight, "PickpocketWeight");
                fg.AppendItem(LockpickingWeight, "LockpickingWeight");
                fg.AppendItem(SneakWeight, "SneakWeight");
                fg.AppendItem(AlchemyWeight, "AlchemyWeight");
                fg.AppendItem(SpeechcraftWeight, "SpeechcraftWeight");
                fg.AppendItem(AlterationWeight, "AlterationWeight");
                fg.AppendItem(ConjurationWeight, "ConjurationWeight");
                fg.AppendItem(DestructionWeight, "DestructionWeight");
                fg.AppendItem(IllusionWeight, "IllusionWeight");
                fg.AppendItem(RestorationWeight, "RestorationWeight");
                fg.AppendItem(EnchantingWeight, "EnchantingWeight");
                fg.AppendItem(BleedoutDefault, "BleedoutDefault");
                fg.AppendItem(VoicePoints, "VoicePoints");
                fg.AppendItem(HealthWeight, "HealthWeight");
                fg.AppendItem(MagickaWeight, "MagickaWeight");
                fg.AppendItem(StaminaWeight, "StaminaWeight");
                fg.AppendItem(Unknown2, "Unknown2");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Teaches = this.Teaches.Combine(rhs.Teaches);
                ret.MaxTrainingLevel = this.MaxTrainingLevel.Combine(rhs.MaxTrainingLevel);
                ret.OneHandedWeight = this.OneHandedWeight.Combine(rhs.OneHandedWeight);
                ret.TwoHandedWeight = this.TwoHandedWeight.Combine(rhs.TwoHandedWeight);
                ret.MarksmanWeight = this.MarksmanWeight.Combine(rhs.MarksmanWeight);
                ret.BlockWeight = this.BlockWeight.Combine(rhs.BlockWeight);
                ret.SmithingWeight = this.SmithingWeight.Combine(rhs.SmithingWeight);
                ret.HeavyArmorWeight = this.HeavyArmorWeight.Combine(rhs.HeavyArmorWeight);
                ret.LightArmorWeight = this.LightArmorWeight.Combine(rhs.LightArmorWeight);
                ret.PickpocketWeight = this.PickpocketWeight.Combine(rhs.PickpocketWeight);
                ret.LockpickingWeight = this.LockpickingWeight.Combine(rhs.LockpickingWeight);
                ret.SneakWeight = this.SneakWeight.Combine(rhs.SneakWeight);
                ret.AlchemyWeight = this.AlchemyWeight.Combine(rhs.AlchemyWeight);
                ret.SpeechcraftWeight = this.SpeechcraftWeight.Combine(rhs.SpeechcraftWeight);
                ret.AlterationWeight = this.AlterationWeight.Combine(rhs.AlterationWeight);
                ret.ConjurationWeight = this.ConjurationWeight.Combine(rhs.ConjurationWeight);
                ret.DestructionWeight = this.DestructionWeight.Combine(rhs.DestructionWeight);
                ret.IllusionWeight = this.IllusionWeight.Combine(rhs.IllusionWeight);
                ret.RestorationWeight = this.RestorationWeight.Combine(rhs.RestorationWeight);
                ret.EnchantingWeight = this.EnchantingWeight.Combine(rhs.EnchantingWeight);
                ret.BleedoutDefault = this.BleedoutDefault.Combine(rhs.BleedoutDefault);
                ret.VoicePoints = this.VoicePoints.Combine(rhs.VoicePoints);
                ret.HealthWeight = this.HealthWeight.Combine(rhs.HealthWeight);
                ret.MagickaWeight = this.MagickaWeight.Combine(rhs.MagickaWeight);
                ret.StaminaWeight = this.StaminaWeight.Combine(rhs.StaminaWeight);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Unknown;
            public bool Teaches;
            public bool MaxTrainingLevel;
            public bool OneHandedWeight;
            public bool TwoHandedWeight;
            public bool MarksmanWeight;
            public bool BlockWeight;
            public bool SmithingWeight;
            public bool HeavyArmorWeight;
            public bool LightArmorWeight;
            public bool PickpocketWeight;
            public bool LockpickingWeight;
            public bool SneakWeight;
            public bool AlchemyWeight;
            public bool SpeechcraftWeight;
            public bool AlterationWeight;
            public bool ConjurationWeight;
            public bool DestructionWeight;
            public bool IllusionWeight;
            public bool RestorationWeight;
            public bool EnchantingWeight;
            public bool BleedoutDefault;
            public bool VoicePoints;
            public bool HealthWeight;
            public bool MagickaWeight;
            public bool StaminaWeight;
            public bool Unknown2;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Unknown = defaultOn;
                this.Teaches = defaultOn;
                this.MaxTrainingLevel = defaultOn;
                this.OneHandedWeight = defaultOn;
                this.TwoHandedWeight = defaultOn;
                this.MarksmanWeight = defaultOn;
                this.BlockWeight = defaultOn;
                this.SmithingWeight = defaultOn;
                this.HeavyArmorWeight = defaultOn;
                this.LightArmorWeight = defaultOn;
                this.PickpocketWeight = defaultOn;
                this.LockpickingWeight = defaultOn;
                this.SneakWeight = defaultOn;
                this.AlchemyWeight = defaultOn;
                this.SpeechcraftWeight = defaultOn;
                this.AlterationWeight = defaultOn;
                this.ConjurationWeight = defaultOn;
                this.DestructionWeight = defaultOn;
                this.IllusionWeight = defaultOn;
                this.RestorationWeight = defaultOn;
                this.EnchantingWeight = defaultOn;
                this.BleedoutDefault = defaultOn;
                this.VoicePoints = defaultOn;
                this.HealthWeight = defaultOn;
                this.MagickaWeight = defaultOn;
                this.StaminaWeight = defaultOn;
                this.Unknown2 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Unknown, null));
                ret.Add((Teaches, null));
                ret.Add((MaxTrainingLevel, null));
                ret.Add((OneHandedWeight, null));
                ret.Add((TwoHandedWeight, null));
                ret.Add((MarksmanWeight, null));
                ret.Add((BlockWeight, null));
                ret.Add((SmithingWeight, null));
                ret.Add((HeavyArmorWeight, null));
                ret.Add((LightArmorWeight, null));
                ret.Add((PickpocketWeight, null));
                ret.Add((LockpickingWeight, null));
                ret.Add((SneakWeight, null));
                ret.Add((AlchemyWeight, null));
                ret.Add((SpeechcraftWeight, null));
                ret.Add((AlterationWeight, null));
                ret.Add((ConjurationWeight, null));
                ret.Add((DestructionWeight, null));
                ret.Add((IllusionWeight, null));
                ret.Add((RestorationWeight, null));
                ret.Add((EnchantingWeight, null));
                ret.Add((BleedoutDefault, null));
                ret.Add((VoicePoints, null));
                ret.Add((HealthWeight, null));
                ret.Add((MagickaWeight, null));
                ret.Add((StaminaWeight, null));
                ret.Add((Unknown2, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = ClassData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ClassDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ClassData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static ClassData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ClassData();
            ((ClassDataSetterCommon)((IClassDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ClassDataSetterCommon)((IClassDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ClassData GetNew()
        {
            return new ClassData();
        }

    }
    #endregion

    #region Interface
    public partial interface IClassData :
        IClassDataGetter,
        ILoquiObjectSetter<IClassData>
    {
        new Int32 Unknown { get; set; }
        new Skill Teaches { get; set; }
        new Byte MaxTrainingLevel { get; set; }
        new Byte OneHandedWeight { get; set; }
        new Byte TwoHandedWeight { get; set; }
        new Byte MarksmanWeight { get; set; }
        new Byte BlockWeight { get; set; }
        new Byte SmithingWeight { get; set; }
        new Byte HeavyArmorWeight { get; set; }
        new Byte LightArmorWeight { get; set; }
        new Byte PickpocketWeight { get; set; }
        new Byte LockpickingWeight { get; set; }
        new Byte SneakWeight { get; set; }
        new Byte AlchemyWeight { get; set; }
        new Byte SpeechcraftWeight { get; set; }
        new Byte AlterationWeight { get; set; }
        new Byte ConjurationWeight { get; set; }
        new Byte DestructionWeight { get; set; }
        new Byte IllusionWeight { get; set; }
        new Byte RestorationWeight { get; set; }
        new Byte EnchantingWeight { get; set; }
        new Single BleedoutDefault { get; set; }
        new UInt32 VoicePoints { get; set; }
        new Byte HealthWeight { get; set; }
        new Byte MagickaWeight { get; set; }
        new Byte StaminaWeight { get; set; }
        new Byte Unknown2 { get; set; }
    }

    public partial interface IClassDataGetter :
        ILoquiObject,
        ILoquiObject<IClassDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        Int32 Unknown { get; }
        Skill Teaches { get; }
        Byte MaxTrainingLevel { get; }
        Byte OneHandedWeight { get; }
        Byte TwoHandedWeight { get; }
        Byte MarksmanWeight { get; }
        Byte BlockWeight { get; }
        Byte SmithingWeight { get; }
        Byte HeavyArmorWeight { get; }
        Byte LightArmorWeight { get; }
        Byte PickpocketWeight { get; }
        Byte LockpickingWeight { get; }
        Byte SneakWeight { get; }
        Byte AlchemyWeight { get; }
        Byte SpeechcraftWeight { get; }
        Byte AlterationWeight { get; }
        Byte ConjurationWeight { get; }
        Byte DestructionWeight { get; }
        Byte IllusionWeight { get; }
        Byte RestorationWeight { get; }
        Byte EnchantingWeight { get; }
        Single BleedoutDefault { get; }
        UInt32 VoicePoints { get; }
        Byte HealthWeight { get; }
        Byte MagickaWeight { get; }
        Byte StaminaWeight { get; }
        Byte Unknown2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ClassDataMixIn
    {
        public static void Clear(this IClassData item)
        {
            ((ClassDataSetterCommon)((IClassDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ClassData.Mask<bool> GetEqualsMask(
            this IClassDataGetter item,
            IClassDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IClassDataGetter item,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClassDataGetter item,
            FileGeneration fg,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IClassDataGetter item,
            ClassData.Mask<bool?> checkMask)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ClassData.Mask<bool> GetHasBeenSetMask(this IClassDataGetter item)
        {
            var ret = new ClassData.Mask<bool>(false);
            ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IClassDataGetter item,
            IClassDataGetter rhs)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs,
            ClassData.TranslationMask? copyMask = null)
        {
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ClassData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ClassData DeepCopy(
            this IClassDataGetter item,
            ClassData.TranslationMask? copyMask = null)
        {
            return ((ClassDataSetterTranslationCommon)((IClassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ClassData DeepCopy(
            this IClassDataGetter item,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? copyMask = null)
        {
            return ((ClassDataSetterTranslationCommon)((IClassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ClassData DeepCopy(
            this IClassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClassDataSetterTranslationCommon)((IClassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClassData item,
            XElement node,
            ClassData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClassData item,
            XElement node,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ClassData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IClassData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ClassDataSetterCommon)((IClassDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            string path,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            string path,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            string path,
            ErrorMaskBuilder? errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IClassData item,
            Stream stream,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            Stream stream,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IClassData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IClassData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassDataSetterCommon)((IClassDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum ClassData_FieldIndex
    {
        Unknown = 0,
        Teaches = 1,
        MaxTrainingLevel = 2,
        OneHandedWeight = 3,
        TwoHandedWeight = 4,
        MarksmanWeight = 5,
        BlockWeight = 6,
        SmithingWeight = 7,
        HeavyArmorWeight = 8,
        LightArmorWeight = 9,
        PickpocketWeight = 10,
        LockpickingWeight = 11,
        SneakWeight = 12,
        AlchemyWeight = 13,
        SpeechcraftWeight = 14,
        AlterationWeight = 15,
        ConjurationWeight = 16,
        DestructionWeight = 17,
        IllusionWeight = 18,
        RestorationWeight = 19,
        EnchantingWeight = 20,
        BleedoutDefault = 21,
        VoicePoints = 22,
        HealthWeight = 23,
        MagickaWeight = 24,
        StaminaWeight = 25,
        Unknown2 = 26,
    }
    #endregion

    #region Registration
    public partial class ClassData_Registration : ILoquiRegistration
    {
        public static readonly ClassData_Registration Instance = new ClassData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 133,
            version: 0);

        public const string GUID = "34be387d-c309-4620-be5f-49b0e7037fc4";

        public const ushort AdditionalFieldCount = 27;

        public const ushort FieldCount = 27;

        public static readonly Type MaskType = typeof(ClassData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ClassData.ErrorMask);

        public static readonly Type ClassType = typeof(ClassData);

        public static readonly Type GetterType = typeof(IClassDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClassData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.ClassData";

        public const string Name = "ClassData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "UNKNOWN":
                    return (ushort)ClassData_FieldIndex.Unknown;
                case "TEACHES":
                    return (ushort)ClassData_FieldIndex.Teaches;
                case "MAXTRAININGLEVEL":
                    return (ushort)ClassData_FieldIndex.MaxTrainingLevel;
                case "ONEHANDEDWEIGHT":
                    return (ushort)ClassData_FieldIndex.OneHandedWeight;
                case "TWOHANDEDWEIGHT":
                    return (ushort)ClassData_FieldIndex.TwoHandedWeight;
                case "MARKSMANWEIGHT":
                    return (ushort)ClassData_FieldIndex.MarksmanWeight;
                case "BLOCKWEIGHT":
                    return (ushort)ClassData_FieldIndex.BlockWeight;
                case "SMITHINGWEIGHT":
                    return (ushort)ClassData_FieldIndex.SmithingWeight;
                case "HEAVYARMORWEIGHT":
                    return (ushort)ClassData_FieldIndex.HeavyArmorWeight;
                case "LIGHTARMORWEIGHT":
                    return (ushort)ClassData_FieldIndex.LightArmorWeight;
                case "PICKPOCKETWEIGHT":
                    return (ushort)ClassData_FieldIndex.PickpocketWeight;
                case "LOCKPICKINGWEIGHT":
                    return (ushort)ClassData_FieldIndex.LockpickingWeight;
                case "SNEAKWEIGHT":
                    return (ushort)ClassData_FieldIndex.SneakWeight;
                case "ALCHEMYWEIGHT":
                    return (ushort)ClassData_FieldIndex.AlchemyWeight;
                case "SPEECHCRAFTWEIGHT":
                    return (ushort)ClassData_FieldIndex.SpeechcraftWeight;
                case "ALTERATIONWEIGHT":
                    return (ushort)ClassData_FieldIndex.AlterationWeight;
                case "CONJURATIONWEIGHT":
                    return (ushort)ClassData_FieldIndex.ConjurationWeight;
                case "DESTRUCTIONWEIGHT":
                    return (ushort)ClassData_FieldIndex.DestructionWeight;
                case "ILLUSIONWEIGHT":
                    return (ushort)ClassData_FieldIndex.IllusionWeight;
                case "RESTORATIONWEIGHT":
                    return (ushort)ClassData_FieldIndex.RestorationWeight;
                case "ENCHANTINGWEIGHT":
                    return (ushort)ClassData_FieldIndex.EnchantingWeight;
                case "BLEEDOUTDEFAULT":
                    return (ushort)ClassData_FieldIndex.BleedoutDefault;
                case "VOICEPOINTS":
                    return (ushort)ClassData_FieldIndex.VoicePoints;
                case "HEALTHWEIGHT":
                    return (ushort)ClassData_FieldIndex.HealthWeight;
                case "MAGICKAWEIGHT":
                    return (ushort)ClassData_FieldIndex.MagickaWeight;
                case "STAMINAWEIGHT":
                    return (ushort)ClassData_FieldIndex.StaminaWeight;
                case "UNKNOWN2":
                    return (ushort)ClassData_FieldIndex.Unknown2;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Unknown:
                case ClassData_FieldIndex.Teaches:
                case ClassData_FieldIndex.MaxTrainingLevel:
                case ClassData_FieldIndex.OneHandedWeight:
                case ClassData_FieldIndex.TwoHandedWeight:
                case ClassData_FieldIndex.MarksmanWeight:
                case ClassData_FieldIndex.BlockWeight:
                case ClassData_FieldIndex.SmithingWeight:
                case ClassData_FieldIndex.HeavyArmorWeight:
                case ClassData_FieldIndex.LightArmorWeight:
                case ClassData_FieldIndex.PickpocketWeight:
                case ClassData_FieldIndex.LockpickingWeight:
                case ClassData_FieldIndex.SneakWeight:
                case ClassData_FieldIndex.AlchemyWeight:
                case ClassData_FieldIndex.SpeechcraftWeight:
                case ClassData_FieldIndex.AlterationWeight:
                case ClassData_FieldIndex.ConjurationWeight:
                case ClassData_FieldIndex.DestructionWeight:
                case ClassData_FieldIndex.IllusionWeight:
                case ClassData_FieldIndex.RestorationWeight:
                case ClassData_FieldIndex.EnchantingWeight:
                case ClassData_FieldIndex.BleedoutDefault:
                case ClassData_FieldIndex.VoicePoints:
                case ClassData_FieldIndex.HealthWeight:
                case ClassData_FieldIndex.MagickaWeight:
                case ClassData_FieldIndex.StaminaWeight:
                case ClassData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Unknown:
                case ClassData_FieldIndex.Teaches:
                case ClassData_FieldIndex.MaxTrainingLevel:
                case ClassData_FieldIndex.OneHandedWeight:
                case ClassData_FieldIndex.TwoHandedWeight:
                case ClassData_FieldIndex.MarksmanWeight:
                case ClassData_FieldIndex.BlockWeight:
                case ClassData_FieldIndex.SmithingWeight:
                case ClassData_FieldIndex.HeavyArmorWeight:
                case ClassData_FieldIndex.LightArmorWeight:
                case ClassData_FieldIndex.PickpocketWeight:
                case ClassData_FieldIndex.LockpickingWeight:
                case ClassData_FieldIndex.SneakWeight:
                case ClassData_FieldIndex.AlchemyWeight:
                case ClassData_FieldIndex.SpeechcraftWeight:
                case ClassData_FieldIndex.AlterationWeight:
                case ClassData_FieldIndex.ConjurationWeight:
                case ClassData_FieldIndex.DestructionWeight:
                case ClassData_FieldIndex.IllusionWeight:
                case ClassData_FieldIndex.RestorationWeight:
                case ClassData_FieldIndex.EnchantingWeight:
                case ClassData_FieldIndex.BleedoutDefault:
                case ClassData_FieldIndex.VoicePoints:
                case ClassData_FieldIndex.HealthWeight:
                case ClassData_FieldIndex.MagickaWeight:
                case ClassData_FieldIndex.StaminaWeight:
                case ClassData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Unknown:
                case ClassData_FieldIndex.Teaches:
                case ClassData_FieldIndex.MaxTrainingLevel:
                case ClassData_FieldIndex.OneHandedWeight:
                case ClassData_FieldIndex.TwoHandedWeight:
                case ClassData_FieldIndex.MarksmanWeight:
                case ClassData_FieldIndex.BlockWeight:
                case ClassData_FieldIndex.SmithingWeight:
                case ClassData_FieldIndex.HeavyArmorWeight:
                case ClassData_FieldIndex.LightArmorWeight:
                case ClassData_FieldIndex.PickpocketWeight:
                case ClassData_FieldIndex.LockpickingWeight:
                case ClassData_FieldIndex.SneakWeight:
                case ClassData_FieldIndex.AlchemyWeight:
                case ClassData_FieldIndex.SpeechcraftWeight:
                case ClassData_FieldIndex.AlterationWeight:
                case ClassData_FieldIndex.ConjurationWeight:
                case ClassData_FieldIndex.DestructionWeight:
                case ClassData_FieldIndex.IllusionWeight:
                case ClassData_FieldIndex.RestorationWeight:
                case ClassData_FieldIndex.EnchantingWeight:
                case ClassData_FieldIndex.BleedoutDefault:
                case ClassData_FieldIndex.VoicePoints:
                case ClassData_FieldIndex.HealthWeight:
                case ClassData_FieldIndex.MagickaWeight:
                case ClassData_FieldIndex.StaminaWeight:
                case ClassData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Unknown:
                    return "Unknown";
                case ClassData_FieldIndex.Teaches:
                    return "Teaches";
                case ClassData_FieldIndex.MaxTrainingLevel:
                    return "MaxTrainingLevel";
                case ClassData_FieldIndex.OneHandedWeight:
                    return "OneHandedWeight";
                case ClassData_FieldIndex.TwoHandedWeight:
                    return "TwoHandedWeight";
                case ClassData_FieldIndex.MarksmanWeight:
                    return "MarksmanWeight";
                case ClassData_FieldIndex.BlockWeight:
                    return "BlockWeight";
                case ClassData_FieldIndex.SmithingWeight:
                    return "SmithingWeight";
                case ClassData_FieldIndex.HeavyArmorWeight:
                    return "HeavyArmorWeight";
                case ClassData_FieldIndex.LightArmorWeight:
                    return "LightArmorWeight";
                case ClassData_FieldIndex.PickpocketWeight:
                    return "PickpocketWeight";
                case ClassData_FieldIndex.LockpickingWeight:
                    return "LockpickingWeight";
                case ClassData_FieldIndex.SneakWeight:
                    return "SneakWeight";
                case ClassData_FieldIndex.AlchemyWeight:
                    return "AlchemyWeight";
                case ClassData_FieldIndex.SpeechcraftWeight:
                    return "SpeechcraftWeight";
                case ClassData_FieldIndex.AlterationWeight:
                    return "AlterationWeight";
                case ClassData_FieldIndex.ConjurationWeight:
                    return "ConjurationWeight";
                case ClassData_FieldIndex.DestructionWeight:
                    return "DestructionWeight";
                case ClassData_FieldIndex.IllusionWeight:
                    return "IllusionWeight";
                case ClassData_FieldIndex.RestorationWeight:
                    return "RestorationWeight";
                case ClassData_FieldIndex.EnchantingWeight:
                    return "EnchantingWeight";
                case ClassData_FieldIndex.BleedoutDefault:
                    return "BleedoutDefault";
                case ClassData_FieldIndex.VoicePoints:
                    return "VoicePoints";
                case ClassData_FieldIndex.HealthWeight:
                    return "HealthWeight";
                case ClassData_FieldIndex.MagickaWeight:
                    return "MagickaWeight";
                case ClassData_FieldIndex.StaminaWeight:
                    return "StaminaWeight";
                case ClassData_FieldIndex.Unknown2:
                    return "Unknown2";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Unknown:
                case ClassData_FieldIndex.Teaches:
                case ClassData_FieldIndex.MaxTrainingLevel:
                case ClassData_FieldIndex.OneHandedWeight:
                case ClassData_FieldIndex.TwoHandedWeight:
                case ClassData_FieldIndex.MarksmanWeight:
                case ClassData_FieldIndex.BlockWeight:
                case ClassData_FieldIndex.SmithingWeight:
                case ClassData_FieldIndex.HeavyArmorWeight:
                case ClassData_FieldIndex.LightArmorWeight:
                case ClassData_FieldIndex.PickpocketWeight:
                case ClassData_FieldIndex.LockpickingWeight:
                case ClassData_FieldIndex.SneakWeight:
                case ClassData_FieldIndex.AlchemyWeight:
                case ClassData_FieldIndex.SpeechcraftWeight:
                case ClassData_FieldIndex.AlterationWeight:
                case ClassData_FieldIndex.ConjurationWeight:
                case ClassData_FieldIndex.DestructionWeight:
                case ClassData_FieldIndex.IllusionWeight:
                case ClassData_FieldIndex.RestorationWeight:
                case ClassData_FieldIndex.EnchantingWeight:
                case ClassData_FieldIndex.BleedoutDefault:
                case ClassData_FieldIndex.VoicePoints:
                case ClassData_FieldIndex.HealthWeight:
                case ClassData_FieldIndex.MagickaWeight:
                case ClassData_FieldIndex.StaminaWeight:
                case ClassData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Unknown:
                case ClassData_FieldIndex.Teaches:
                case ClassData_FieldIndex.MaxTrainingLevel:
                case ClassData_FieldIndex.OneHandedWeight:
                case ClassData_FieldIndex.TwoHandedWeight:
                case ClassData_FieldIndex.MarksmanWeight:
                case ClassData_FieldIndex.BlockWeight:
                case ClassData_FieldIndex.SmithingWeight:
                case ClassData_FieldIndex.HeavyArmorWeight:
                case ClassData_FieldIndex.LightArmorWeight:
                case ClassData_FieldIndex.PickpocketWeight:
                case ClassData_FieldIndex.LockpickingWeight:
                case ClassData_FieldIndex.SneakWeight:
                case ClassData_FieldIndex.AlchemyWeight:
                case ClassData_FieldIndex.SpeechcraftWeight:
                case ClassData_FieldIndex.AlterationWeight:
                case ClassData_FieldIndex.ConjurationWeight:
                case ClassData_FieldIndex.DestructionWeight:
                case ClassData_FieldIndex.IllusionWeight:
                case ClassData_FieldIndex.RestorationWeight:
                case ClassData_FieldIndex.EnchantingWeight:
                case ClassData_FieldIndex.BleedoutDefault:
                case ClassData_FieldIndex.VoicePoints:
                case ClassData_FieldIndex.HealthWeight:
                case ClassData_FieldIndex.MagickaWeight:
                case ClassData_FieldIndex.StaminaWeight:
                case ClassData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Unknown:
                    return typeof(Int32);
                case ClassData_FieldIndex.Teaches:
                    return typeof(Skill);
                case ClassData_FieldIndex.MaxTrainingLevel:
                    return typeof(Byte);
                case ClassData_FieldIndex.OneHandedWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.TwoHandedWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.MarksmanWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.BlockWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.SmithingWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.HeavyArmorWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.LightArmorWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.PickpocketWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.LockpickingWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.SneakWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.AlchemyWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.SpeechcraftWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.AlterationWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.ConjurationWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.DestructionWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.IllusionWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.RestorationWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.EnchantingWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.BleedoutDefault:
                    return typeof(Single);
                case ClassData_FieldIndex.VoicePoints:
                    return typeof(UInt32);
                case ClassData_FieldIndex.HealthWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.MagickaWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.StaminaWeight:
                    return typeof(Byte);
                case ClassData_FieldIndex.Unknown2:
                    return typeof(Byte);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ClassDataXmlWriteTranslation);
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = DATA_HEADER;
        public const int NumStructFields = 27;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(ClassDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ClassDataSetterCommon
    {
        public static readonly ClassDataSetterCommon Instance = new ClassDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClassData item)
        {
            ClearPartial();
            item.Unknown = default;
            item.Teaches = default;
            item.MaxTrainingLevel = default;
            item.OneHandedWeight = default;
            item.TwoHandedWeight = default;
            item.MarksmanWeight = default;
            item.BlockWeight = default;
            item.SmithingWeight = default;
            item.HeavyArmorWeight = default;
            item.LightArmorWeight = default;
            item.PickpocketWeight = default;
            item.LockpickingWeight = default;
            item.SneakWeight = default;
            item.AlchemyWeight = default;
            item.SpeechcraftWeight = default;
            item.AlterationWeight = default;
            item.ConjurationWeight = default;
            item.DestructionWeight = default;
            item.IllusionWeight = default;
            item.RestorationWeight = default;
            item.EnchantingWeight = default;
            item.BleedoutDefault = default;
            item.VoicePoints = default;
            item.HealthWeight = default;
            item.MagickaWeight = default;
            item.StaminaWeight = default;
            item.Unknown2 = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IClassData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClassDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IClassData item,
            MutagenFrame frame)
        {
            item.Unknown = frame.ReadInt32();
            item.Teaches = EnumBinaryTranslation<Skill>.Instance.Parse(frame: frame.SpawnWithLength(1));
            item.MaxTrainingLevel = frame.ReadUInt8();
            item.OneHandedWeight = frame.ReadUInt8();
            item.TwoHandedWeight = frame.ReadUInt8();
            item.MarksmanWeight = frame.ReadUInt8();
            item.BlockWeight = frame.ReadUInt8();
            item.SmithingWeight = frame.ReadUInt8();
            item.HeavyArmorWeight = frame.ReadUInt8();
            item.LightArmorWeight = frame.ReadUInt8();
            item.PickpocketWeight = frame.ReadUInt8();
            item.LockpickingWeight = frame.ReadUInt8();
            item.SneakWeight = frame.ReadUInt8();
            item.AlchemyWeight = frame.ReadUInt8();
            item.SpeechcraftWeight = frame.ReadUInt8();
            item.AlterationWeight = frame.ReadUInt8();
            item.ConjurationWeight = frame.ReadUInt8();
            item.DestructionWeight = frame.ReadUInt8();
            item.IllusionWeight = frame.ReadUInt8();
            item.RestorationWeight = frame.ReadUInt8();
            item.EnchantingWeight = frame.ReadUInt8();
            item.BleedoutDefault = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.VoicePoints = frame.ReadUInt32();
            item.HealthWeight = frame.ReadUInt8();
            item.MagickaWeight = frame.ReadUInt8();
            item.StaminaWeight = frame.ReadUInt8();
            item.Unknown2 = frame.ReadUInt8();
        }
        
        public virtual void CopyInFromBinary(
            IClassData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ClassData_Registration.DATA_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class ClassDataCommon
    {
        public static readonly ClassDataCommon Instance = new ClassDataCommon();

        public ClassData.Mask<bool> GetEqualsMask(
            IClassDataGetter item,
            IClassDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ClassData.Mask<bool>(false);
            ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClassDataGetter item,
            IClassDataGetter rhs,
            ClassData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.MaxTrainingLevel = item.MaxTrainingLevel == rhs.MaxTrainingLevel;
            ret.OneHandedWeight = item.OneHandedWeight == rhs.OneHandedWeight;
            ret.TwoHandedWeight = item.TwoHandedWeight == rhs.TwoHandedWeight;
            ret.MarksmanWeight = item.MarksmanWeight == rhs.MarksmanWeight;
            ret.BlockWeight = item.BlockWeight == rhs.BlockWeight;
            ret.SmithingWeight = item.SmithingWeight == rhs.SmithingWeight;
            ret.HeavyArmorWeight = item.HeavyArmorWeight == rhs.HeavyArmorWeight;
            ret.LightArmorWeight = item.LightArmorWeight == rhs.LightArmorWeight;
            ret.PickpocketWeight = item.PickpocketWeight == rhs.PickpocketWeight;
            ret.LockpickingWeight = item.LockpickingWeight == rhs.LockpickingWeight;
            ret.SneakWeight = item.SneakWeight == rhs.SneakWeight;
            ret.AlchemyWeight = item.AlchemyWeight == rhs.AlchemyWeight;
            ret.SpeechcraftWeight = item.SpeechcraftWeight == rhs.SpeechcraftWeight;
            ret.AlterationWeight = item.AlterationWeight == rhs.AlterationWeight;
            ret.ConjurationWeight = item.ConjurationWeight == rhs.ConjurationWeight;
            ret.DestructionWeight = item.DestructionWeight == rhs.DestructionWeight;
            ret.IllusionWeight = item.IllusionWeight == rhs.IllusionWeight;
            ret.RestorationWeight = item.RestorationWeight == rhs.RestorationWeight;
            ret.EnchantingWeight = item.EnchantingWeight == rhs.EnchantingWeight;
            ret.BleedoutDefault = item.BleedoutDefault.EqualsWithin(rhs.BleedoutDefault);
            ret.VoicePoints = item.VoicePoints == rhs.VoicePoints;
            ret.HealthWeight = item.HealthWeight == rhs.HealthWeight;
            ret.MagickaWeight = item.MagickaWeight == rhs.MagickaWeight;
            ret.StaminaWeight = item.StaminaWeight == rhs.StaminaWeight;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
        }
        
        public string ToString(
            IClassDataGetter item,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IClassDataGetter item,
            FileGeneration fg,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ClassData =>");
            }
            else
            {
                fg.AppendLine($"{name} (ClassData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IClassDataGetter item,
            FileGeneration fg,
            ClassData.Mask<bool>? printMask = null)
        {
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Teaches ?? true)
            {
                fg.AppendItem(item.Teaches, "Teaches");
            }
            if (printMask?.MaxTrainingLevel ?? true)
            {
                fg.AppendItem(item.MaxTrainingLevel, "MaxTrainingLevel");
            }
            if (printMask?.OneHandedWeight ?? true)
            {
                fg.AppendItem(item.OneHandedWeight, "OneHandedWeight");
            }
            if (printMask?.TwoHandedWeight ?? true)
            {
                fg.AppendItem(item.TwoHandedWeight, "TwoHandedWeight");
            }
            if (printMask?.MarksmanWeight ?? true)
            {
                fg.AppendItem(item.MarksmanWeight, "MarksmanWeight");
            }
            if (printMask?.BlockWeight ?? true)
            {
                fg.AppendItem(item.BlockWeight, "BlockWeight");
            }
            if (printMask?.SmithingWeight ?? true)
            {
                fg.AppendItem(item.SmithingWeight, "SmithingWeight");
            }
            if (printMask?.HeavyArmorWeight ?? true)
            {
                fg.AppendItem(item.HeavyArmorWeight, "HeavyArmorWeight");
            }
            if (printMask?.LightArmorWeight ?? true)
            {
                fg.AppendItem(item.LightArmorWeight, "LightArmorWeight");
            }
            if (printMask?.PickpocketWeight ?? true)
            {
                fg.AppendItem(item.PickpocketWeight, "PickpocketWeight");
            }
            if (printMask?.LockpickingWeight ?? true)
            {
                fg.AppendItem(item.LockpickingWeight, "LockpickingWeight");
            }
            if (printMask?.SneakWeight ?? true)
            {
                fg.AppendItem(item.SneakWeight, "SneakWeight");
            }
            if (printMask?.AlchemyWeight ?? true)
            {
                fg.AppendItem(item.AlchemyWeight, "AlchemyWeight");
            }
            if (printMask?.SpeechcraftWeight ?? true)
            {
                fg.AppendItem(item.SpeechcraftWeight, "SpeechcraftWeight");
            }
            if (printMask?.AlterationWeight ?? true)
            {
                fg.AppendItem(item.AlterationWeight, "AlterationWeight");
            }
            if (printMask?.ConjurationWeight ?? true)
            {
                fg.AppendItem(item.ConjurationWeight, "ConjurationWeight");
            }
            if (printMask?.DestructionWeight ?? true)
            {
                fg.AppendItem(item.DestructionWeight, "DestructionWeight");
            }
            if (printMask?.IllusionWeight ?? true)
            {
                fg.AppendItem(item.IllusionWeight, "IllusionWeight");
            }
            if (printMask?.RestorationWeight ?? true)
            {
                fg.AppendItem(item.RestorationWeight, "RestorationWeight");
            }
            if (printMask?.EnchantingWeight ?? true)
            {
                fg.AppendItem(item.EnchantingWeight, "EnchantingWeight");
            }
            if (printMask?.BleedoutDefault ?? true)
            {
                fg.AppendItem(item.BleedoutDefault, "BleedoutDefault");
            }
            if (printMask?.VoicePoints ?? true)
            {
                fg.AppendItem(item.VoicePoints, "VoicePoints");
            }
            if (printMask?.HealthWeight ?? true)
            {
                fg.AppendItem(item.HealthWeight, "HealthWeight");
            }
            if (printMask?.MagickaWeight ?? true)
            {
                fg.AppendItem(item.MagickaWeight, "MagickaWeight");
            }
            if (printMask?.StaminaWeight ?? true)
            {
                fg.AppendItem(item.StaminaWeight, "StaminaWeight");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendItem(item.Unknown2, "Unknown2");
            }
        }
        
        public bool HasBeenSet(
            IClassDataGetter item,
            ClassData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IClassDataGetter item,
            ClassData.Mask<bool> mask)
        {
            mask.Unknown = true;
            mask.Teaches = true;
            mask.MaxTrainingLevel = true;
            mask.OneHandedWeight = true;
            mask.TwoHandedWeight = true;
            mask.MarksmanWeight = true;
            mask.BlockWeight = true;
            mask.SmithingWeight = true;
            mask.HeavyArmorWeight = true;
            mask.LightArmorWeight = true;
            mask.PickpocketWeight = true;
            mask.LockpickingWeight = true;
            mask.SneakWeight = true;
            mask.AlchemyWeight = true;
            mask.SpeechcraftWeight = true;
            mask.AlterationWeight = true;
            mask.ConjurationWeight = true;
            mask.DestructionWeight = true;
            mask.IllusionWeight = true;
            mask.RestorationWeight = true;
            mask.EnchantingWeight = true;
            mask.BleedoutDefault = true;
            mask.VoicePoints = true;
            mask.HealthWeight = true;
            mask.MagickaWeight = true;
            mask.StaminaWeight = true;
            mask.Unknown2 = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClassDataGetter? lhs,
            IClassDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.Teaches != rhs.Teaches) return false;
            if (lhs.MaxTrainingLevel != rhs.MaxTrainingLevel) return false;
            if (lhs.OneHandedWeight != rhs.OneHandedWeight) return false;
            if (lhs.TwoHandedWeight != rhs.TwoHandedWeight) return false;
            if (lhs.MarksmanWeight != rhs.MarksmanWeight) return false;
            if (lhs.BlockWeight != rhs.BlockWeight) return false;
            if (lhs.SmithingWeight != rhs.SmithingWeight) return false;
            if (lhs.HeavyArmorWeight != rhs.HeavyArmorWeight) return false;
            if (lhs.LightArmorWeight != rhs.LightArmorWeight) return false;
            if (lhs.PickpocketWeight != rhs.PickpocketWeight) return false;
            if (lhs.LockpickingWeight != rhs.LockpickingWeight) return false;
            if (lhs.SneakWeight != rhs.SneakWeight) return false;
            if (lhs.AlchemyWeight != rhs.AlchemyWeight) return false;
            if (lhs.SpeechcraftWeight != rhs.SpeechcraftWeight) return false;
            if (lhs.AlterationWeight != rhs.AlterationWeight) return false;
            if (lhs.ConjurationWeight != rhs.ConjurationWeight) return false;
            if (lhs.DestructionWeight != rhs.DestructionWeight) return false;
            if (lhs.IllusionWeight != rhs.IllusionWeight) return false;
            if (lhs.RestorationWeight != rhs.RestorationWeight) return false;
            if (lhs.EnchantingWeight != rhs.EnchantingWeight) return false;
            if (!lhs.BleedoutDefault.EqualsWithin(rhs.BleedoutDefault)) return false;
            if (lhs.VoicePoints != rhs.VoicePoints) return false;
            if (lhs.HealthWeight != rhs.HealthWeight) return false;
            if (lhs.MagickaWeight != rhs.MagickaWeight) return false;
            if (lhs.StaminaWeight != rhs.StaminaWeight) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            return true;
        }
        
        public virtual int GetHashCode(IClassDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Unknown);
            hash.Add(item.Teaches);
            hash.Add(item.MaxTrainingLevel);
            hash.Add(item.OneHandedWeight);
            hash.Add(item.TwoHandedWeight);
            hash.Add(item.MarksmanWeight);
            hash.Add(item.BlockWeight);
            hash.Add(item.SmithingWeight);
            hash.Add(item.HeavyArmorWeight);
            hash.Add(item.LightArmorWeight);
            hash.Add(item.PickpocketWeight);
            hash.Add(item.LockpickingWeight);
            hash.Add(item.SneakWeight);
            hash.Add(item.AlchemyWeight);
            hash.Add(item.SpeechcraftWeight);
            hash.Add(item.AlterationWeight);
            hash.Add(item.ConjurationWeight);
            hash.Add(item.DestructionWeight);
            hash.Add(item.IllusionWeight);
            hash.Add(item.RestorationWeight);
            hash.Add(item.EnchantingWeight);
            hash.Add(item.BleedoutDefault);
            hash.Add(item.VoicePoints);
            hash.Add(item.HealthWeight);
            hash.Add(item.MagickaWeight);
            hash.Add(item.StaminaWeight);
            hash.Add(item.Unknown2);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ClassData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IClassDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class ClassDataSetterTranslationCommon
    {
        public static readonly ClassDataSetterTranslationCommon Instance = new ClassDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IClassData item,
            IClassDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Teaches) ?? true))
            {
                item.Teaches = rhs.Teaches;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.MaxTrainingLevel) ?? true))
            {
                item.MaxTrainingLevel = rhs.MaxTrainingLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.OneHandedWeight) ?? true))
            {
                item.OneHandedWeight = rhs.OneHandedWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.TwoHandedWeight) ?? true))
            {
                item.TwoHandedWeight = rhs.TwoHandedWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.MarksmanWeight) ?? true))
            {
                item.MarksmanWeight = rhs.MarksmanWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.BlockWeight) ?? true))
            {
                item.BlockWeight = rhs.BlockWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.SmithingWeight) ?? true))
            {
                item.SmithingWeight = rhs.SmithingWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.HeavyArmorWeight) ?? true))
            {
                item.HeavyArmorWeight = rhs.HeavyArmorWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.LightArmorWeight) ?? true))
            {
                item.LightArmorWeight = rhs.LightArmorWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.PickpocketWeight) ?? true))
            {
                item.PickpocketWeight = rhs.PickpocketWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.LockpickingWeight) ?? true))
            {
                item.LockpickingWeight = rhs.LockpickingWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.SneakWeight) ?? true))
            {
                item.SneakWeight = rhs.SneakWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.AlchemyWeight) ?? true))
            {
                item.AlchemyWeight = rhs.AlchemyWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.SpeechcraftWeight) ?? true))
            {
                item.SpeechcraftWeight = rhs.SpeechcraftWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.AlterationWeight) ?? true))
            {
                item.AlterationWeight = rhs.AlterationWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.ConjurationWeight) ?? true))
            {
                item.ConjurationWeight = rhs.ConjurationWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.DestructionWeight) ?? true))
            {
                item.DestructionWeight = rhs.DestructionWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.IllusionWeight) ?? true))
            {
                item.IllusionWeight = rhs.IllusionWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.RestorationWeight) ?? true))
            {
                item.RestorationWeight = rhs.RestorationWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.EnchantingWeight) ?? true))
            {
                item.EnchantingWeight = rhs.EnchantingWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.BleedoutDefault) ?? true))
            {
                item.BleedoutDefault = rhs.BleedoutDefault;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.VoicePoints) ?? true))
            {
                item.VoicePoints = rhs.VoicePoints;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.HealthWeight) ?? true))
            {
                item.HealthWeight = rhs.HealthWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.MagickaWeight) ?? true))
            {
                item.MagickaWeight = rhs.MagickaWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.StaminaWeight) ?? true))
            {
                item.StaminaWeight = rhs.StaminaWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
        }
        
        #endregion
        
        public ClassData DeepCopy(
            IClassDataGetter item,
            ClassData.TranslationMask? copyMask = null)
        {
            ClassData ret = (ClassData)((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ClassData DeepCopy(
            IClassDataGetter item,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? copyMask = null)
        {
            ClassData ret = (ClassData)((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ClassData DeepCopy(
            IClassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ClassData ret = (ClassData)((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class ClassData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClassData_Registration.Instance;
        public static ClassData_Registration Registration => ClassData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ClassDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ClassDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ClassDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IClassDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IClassDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IClassDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ClassDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ClassDataXmlWriteTranslation Instance = new ClassDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IClassDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.Unknown) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)ClassData_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.Teaches) ?? true))
            {
                EnumXmlTranslation<Skill>.Instance.Write(
                    node: node,
                    name: nameof(item.Teaches),
                    item: item.Teaches,
                    fieldIndex: (int)ClassData_FieldIndex.Teaches,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.MaxTrainingLevel) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaxTrainingLevel),
                    item: item.MaxTrainingLevel,
                    fieldIndex: (int)ClassData_FieldIndex.MaxTrainingLevel,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.OneHandedWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.OneHandedWeight),
                    item: item.OneHandedWeight,
                    fieldIndex: (int)ClassData_FieldIndex.OneHandedWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.TwoHandedWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TwoHandedWeight),
                    item: item.TwoHandedWeight,
                    fieldIndex: (int)ClassData_FieldIndex.TwoHandedWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.MarksmanWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MarksmanWeight),
                    item: item.MarksmanWeight,
                    fieldIndex: (int)ClassData_FieldIndex.MarksmanWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.BlockWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BlockWeight),
                    item: item.BlockWeight,
                    fieldIndex: (int)ClassData_FieldIndex.BlockWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.SmithingWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SmithingWeight),
                    item: item.SmithingWeight,
                    fieldIndex: (int)ClassData_FieldIndex.SmithingWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.HeavyArmorWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HeavyArmorWeight),
                    item: item.HeavyArmorWeight,
                    fieldIndex: (int)ClassData_FieldIndex.HeavyArmorWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.LightArmorWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LightArmorWeight),
                    item: item.LightArmorWeight,
                    fieldIndex: (int)ClassData_FieldIndex.LightArmorWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.PickpocketWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PickpocketWeight),
                    item: item.PickpocketWeight,
                    fieldIndex: (int)ClassData_FieldIndex.PickpocketWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.LockpickingWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LockpickingWeight),
                    item: item.LockpickingWeight,
                    fieldIndex: (int)ClassData_FieldIndex.LockpickingWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.SneakWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SneakWeight),
                    item: item.SneakWeight,
                    fieldIndex: (int)ClassData_FieldIndex.SneakWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.AlchemyWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AlchemyWeight),
                    item: item.AlchemyWeight,
                    fieldIndex: (int)ClassData_FieldIndex.AlchemyWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.SpeechcraftWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SpeechcraftWeight),
                    item: item.SpeechcraftWeight,
                    fieldIndex: (int)ClassData_FieldIndex.SpeechcraftWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.AlterationWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AlterationWeight),
                    item: item.AlterationWeight,
                    fieldIndex: (int)ClassData_FieldIndex.AlterationWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.ConjurationWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ConjurationWeight),
                    item: item.ConjurationWeight,
                    fieldIndex: (int)ClassData_FieldIndex.ConjurationWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.DestructionWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DestructionWeight),
                    item: item.DestructionWeight,
                    fieldIndex: (int)ClassData_FieldIndex.DestructionWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.IllusionWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.IllusionWeight),
                    item: item.IllusionWeight,
                    fieldIndex: (int)ClassData_FieldIndex.IllusionWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.RestorationWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RestorationWeight),
                    item: item.RestorationWeight,
                    fieldIndex: (int)ClassData_FieldIndex.RestorationWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.EnchantingWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EnchantingWeight),
                    item: item.EnchantingWeight,
                    fieldIndex: (int)ClassData_FieldIndex.EnchantingWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.BleedoutDefault) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BleedoutDefault),
                    item: item.BleedoutDefault,
                    fieldIndex: (int)ClassData_FieldIndex.BleedoutDefault,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.VoicePoints) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VoicePoints),
                    item: item.VoicePoints,
                    fieldIndex: (int)ClassData_FieldIndex.VoicePoints,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.HealthWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HealthWeight),
                    item: item.HealthWeight,
                    fieldIndex: (int)ClassData_FieldIndex.HealthWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.MagickaWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MagickaWeight),
                    item: item.MagickaWeight,
                    fieldIndex: (int)ClassData_FieldIndex.MagickaWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.StaminaWeight) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StaminaWeight),
                    item: item.StaminaWeight,
                    fieldIndex: (int)ClassData_FieldIndex.StaminaWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.Unknown2) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown2),
                    item: item.Unknown2,
                    fieldIndex: (int)ClassData_FieldIndex.Unknown2,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IClassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.ClassData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.ClassData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClassDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IClassDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IClassDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ClassDataXmlCreateTranslation
    {
        public readonly static ClassDataXmlCreateTranslation Instance = new ClassDataXmlCreateTranslation();

        public static void FillPublicXml(
            IClassData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClassDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IClassData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Unknown":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Teaches":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.Teaches);
                    try
                    {
                        item.Teaches = EnumXmlTranslation<Skill>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxTrainingLevel":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.MaxTrainingLevel);
                    try
                    {
                        item.MaxTrainingLevel = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OneHandedWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.OneHandedWeight);
                    try
                    {
                        item.OneHandedWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TwoHandedWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.TwoHandedWeight);
                    try
                    {
                        item.TwoHandedWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MarksmanWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.MarksmanWeight);
                    try
                    {
                        item.MarksmanWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BlockWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.BlockWeight);
                    try
                    {
                        item.BlockWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SmithingWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.SmithingWeight);
                    try
                    {
                        item.SmithingWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HeavyArmorWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.HeavyArmorWeight);
                    try
                    {
                        item.HeavyArmorWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LightArmorWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.LightArmorWeight);
                    try
                    {
                        item.LightArmorWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PickpocketWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.PickpocketWeight);
                    try
                    {
                        item.PickpocketWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LockpickingWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.LockpickingWeight);
                    try
                    {
                        item.LockpickingWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SneakWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.SneakWeight);
                    try
                    {
                        item.SneakWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AlchemyWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.AlchemyWeight);
                    try
                    {
                        item.AlchemyWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SpeechcraftWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.SpeechcraftWeight);
                    try
                    {
                        item.SpeechcraftWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AlterationWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.AlterationWeight);
                    try
                    {
                        item.AlterationWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ConjurationWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.ConjurationWeight);
                    try
                    {
                        item.ConjurationWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DestructionWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.DestructionWeight);
                    try
                    {
                        item.DestructionWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IllusionWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.IllusionWeight);
                    try
                    {
                        item.IllusionWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RestorationWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.RestorationWeight);
                    try
                    {
                        item.RestorationWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnchantingWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.EnchantingWeight);
                    try
                    {
                        item.EnchantingWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BleedoutDefault":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.BleedoutDefault);
                    try
                    {
                        item.BleedoutDefault = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VoicePoints":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.VoicePoints);
                    try
                    {
                        item.VoicePoints = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HealthWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.HealthWeight);
                    try
                    {
                        item.HealthWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagickaWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.MagickaWeight);
                    try
                    {
                        item.MagickaWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StaminaWeight":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.StaminaWeight);
                    try
                    {
                        item.StaminaWeight = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown2":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.Unknown2);
                    try
                    {
                        item.Unknown2 = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ClassDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IClassDataGetter item,
            XElement node,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ClassData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            string path,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            Stream stream,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            XElement node,
            string? name = null,
            ClassData.TranslationMask? translationMask = null)
        {
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ClassDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ClassDataBinaryWriteTranslation Instance = new ClassDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IClassDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Unknown);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                writer,
                item.Teaches,
                length: 1);
            writer.Write(item.MaxTrainingLevel);
            writer.Write(item.OneHandedWeight);
            writer.Write(item.TwoHandedWeight);
            writer.Write(item.MarksmanWeight);
            writer.Write(item.BlockWeight);
            writer.Write(item.SmithingWeight);
            writer.Write(item.HeavyArmorWeight);
            writer.Write(item.LightArmorWeight);
            writer.Write(item.PickpocketWeight);
            writer.Write(item.LockpickingWeight);
            writer.Write(item.SneakWeight);
            writer.Write(item.AlchemyWeight);
            writer.Write(item.SpeechcraftWeight);
            writer.Write(item.AlterationWeight);
            writer.Write(item.ConjurationWeight);
            writer.Write(item.DestructionWeight);
            writer.Write(item.IllusionWeight);
            writer.Write(item.RestorationWeight);
            writer.Write(item.EnchantingWeight);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BleedoutDefault);
            writer.Write(item.VoicePoints);
            writer.Write(item.HealthWeight);
            writer.Write(item.MagickaWeight);
            writer.Write(item.StaminaWeight);
            writer.Write(item.Unknown2);
        }

        public void Write(
            MutagenWriter writer,
            IClassDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(ClassData_Registration.DATA_HEADER),
                type: ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IClassDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ClassDataBinaryCreateTranslation
    {
        public readonly static ClassDataBinaryCreateTranslation Instance = new ClassDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ClassDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IClassDataGetter item,
            MutagenWriter writer)
        {
            ((ClassDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ClassDataBinaryOverlay :
        BinaryOverlay,
        IClassDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClassData_Registration.Instance;
        public static ClassData_Registration Registration => ClassData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ClassDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ClassDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IClassDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IClassDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IClassDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ClassDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClassDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ClassDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Int32 Unknown => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x0, 0x4));
        public Skill Teaches => (Skill)_data.Span.Slice(0x4, 0x1)[0];
        public Byte MaxTrainingLevel => _data.Span[0x5];
        public Byte OneHandedWeight => _data.Span[0x6];
        public Byte TwoHandedWeight => _data.Span[0x7];
        public Byte MarksmanWeight => _data.Span[0x8];
        public Byte BlockWeight => _data.Span[0x9];
        public Byte SmithingWeight => _data.Span[0xA];
        public Byte HeavyArmorWeight => _data.Span[0xB];
        public Byte LightArmorWeight => _data.Span[0xC];
        public Byte PickpocketWeight => _data.Span[0xD];
        public Byte LockpickingWeight => _data.Span[0xE];
        public Byte SneakWeight => _data.Span[0xF];
        public Byte AlchemyWeight => _data.Span[0x10];
        public Byte SpeechcraftWeight => _data.Span[0x11];
        public Byte AlterationWeight => _data.Span[0x12];
        public Byte ConjurationWeight => _data.Span[0x13];
        public Byte DestructionWeight => _data.Span[0x14];
        public Byte IllusionWeight => _data.Span[0x15];
        public Byte RestorationWeight => _data.Span[0x16];
        public Byte EnchantingWeight => _data.Span[0x17];
        public Single BleedoutDefault => SpanExt.GetFloat(_data.Slice(0x18, 0x4));
        public UInt32 VoicePoints => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x1C, 0x4));
        public Byte HealthWeight => _data.Span[0x20];
        public Byte MagickaWeight => _data.Span[0x21];
        public Byte StaminaWeight => _data.Span[0x22];
        public Byte Unknown2 => _data.Span[0x23];
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ClassDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ClassDataBinaryOverlay ClassDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ClassDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x24 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ClassDataBinaryOverlay ClassDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ClassDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClassDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

