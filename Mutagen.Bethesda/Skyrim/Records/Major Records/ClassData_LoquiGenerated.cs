/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class ClassData :
        IClassData,
        ILoquiObjectSetter<ClassData>,
        IEquatable<ClassData>,
        IEqualsMask
    {
        #region Ctor
        public ClassData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Unknown
        public Int32 Unknown { get; set; } = default;
        #endregion
        #region Teaches
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Skill? _Teaches;
        public Skill? Teaches
        {
            get => this._Teaches;
            set => this._Teaches = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Skill? IClassDataGetter.Teaches => this.Teaches;
        #endregion
        #region MaxTrainingLevel
        public Byte MaxTrainingLevel { get; set; } = default;
        #endregion
        #region SkillWeights
        private readonly Dictionary<Skill, Byte> _SkillWeights = new Dictionary<Skill, Byte>();
        public IDictionary<Skill, Byte> SkillWeights => _SkillWeights;
        #region Interface Members
        IDictionary<Skill, Byte> IClassData.SkillWeights => _SkillWeights;
        IReadOnlyDictionary<Skill, Byte> IClassDataGetter.SkillWeights => _SkillWeights;
        #endregion

        #endregion
        #region BleedoutDefault
        public Single BleedoutDefault { get; set; } = default;
        #endregion
        #region VoicePoints
        public UInt32 VoicePoints { get; set; } = default;
        #endregion
        #region StatWeights
        private readonly Dictionary<BasicStat, Byte> _StatWeights = new Dictionary<BasicStat, Byte>();
        public IDictionary<BasicStat, Byte> StatWeights => _StatWeights;
        #region Interface Members
        IDictionary<BasicStat, Byte> IClassData.StatWeights => _StatWeights;
        IReadOnlyDictionary<BasicStat, Byte> IClassDataGetter.StatWeights => _StatWeights;
        #endregion

        #endregion
        #region Unknown2
        public Byte Unknown2 { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClassDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IClassDataGetter rhs)) return false;
            return ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ClassData obj)
        {
            return ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ClassDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClassDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ClassData CreateFromXml(
            XElement node,
            ClassData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ClassData CreateFromXml(
            XElement node,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ClassData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ClassData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new ClassData();
            ((ClassDataSetterCommon)((IClassDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ClassData CreateFromXml(
            string path,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ClassData CreateFromXml(
            string path,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ClassData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ClassData CreateFromXml(
            Stream stream,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ClassData CreateFromXml(
            Stream stream,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ClassData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Unknown = initialValue;
                this.Teaches = initialValue;
                this.MaxTrainingLevel = initialValue;
                this.SkillWeights = new MaskItem<TItem, IEnumerable<KeyValuePair<TItem, TItem>>?>(initialValue, null);
                this.BleedoutDefault = initialValue;
                this.VoicePoints = initialValue;
                this.StatWeights = new MaskItem<TItem, IEnumerable<KeyValuePair<TItem, TItem>>?>(initialValue, null);
                this.Unknown2 = initialValue;
            }

            public Mask(
                TItem Unknown,
                TItem Teaches,
                TItem MaxTrainingLevel,
                TItem SkillWeights,
                TItem BleedoutDefault,
                TItem VoicePoints,
                TItem StatWeights,
                TItem Unknown2)
            {
                this.Unknown = Unknown;
                this.Teaches = Teaches;
                this.MaxTrainingLevel = MaxTrainingLevel;
                this.SkillWeights = new MaskItem<TItem, IEnumerable<KeyValuePair<TItem, TItem>>?>(SkillWeights, null);
                this.BleedoutDefault = BleedoutDefault;
                this.VoicePoints = VoicePoints;
                this.StatWeights = new MaskItem<TItem, IEnumerable<KeyValuePair<TItem, TItem>>?>(StatWeights, null);
                this.Unknown2 = Unknown2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Unknown;
            public TItem Teaches;
            public TItem MaxTrainingLevel;
            public MaskItem<TItem, IEnumerable<KeyValuePair<TItem, TItem>>?>? SkillWeights;
            public TItem BleedoutDefault;
            public TItem VoicePoints;
            public MaskItem<TItem, IEnumerable<KeyValuePair<TItem, TItem>>?>? StatWeights;
            public TItem Unknown2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
                if (!object.Equals(this.MaxTrainingLevel, rhs.MaxTrainingLevel)) return false;
                if (!object.Equals(this.SkillWeights, rhs.SkillWeights)) return false;
                if (!object.Equals(this.BleedoutDefault, rhs.BleedoutDefault)) return false;
                if (!object.Equals(this.VoicePoints, rhs.VoicePoints)) return false;
                if (!object.Equals(this.StatWeights, rhs.StatWeights)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Unknown);
                hash.Add(this.Teaches);
                hash.Add(this.MaxTrainingLevel);
                hash.Add(this.SkillWeights);
                hash.Add(this.BleedoutDefault);
                hash.Add(this.VoicePoints);
                hash.Add(this.StatWeights);
                hash.Add(this.Unknown2);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Teaches)) return false;
                if (!eval(this.MaxTrainingLevel)) return false;
                if (this.SkillWeights != null)
                {
                    if (!eval(this.SkillWeights.Overall)) return false;
                    if (this.SkillWeights.Specific != null)
                    {
                        foreach (var item in this.SkillWeights.Specific)
                        {
                            if (!eval(item.Key)) return false;
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.BleedoutDefault)) return false;
                if (!eval(this.VoicePoints)) return false;
                if (this.StatWeights != null)
                {
                    if (!eval(this.StatWeights.Overall)) return false;
                    if (this.StatWeights.Specific != null)
                    {
                        foreach (var item in this.StatWeights.Specific)
                        {
                            if (!eval(item.Key)) return false;
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Unknown2)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Unknown)) return true;
                if (eval(this.Teaches)) return true;
                if (eval(this.MaxTrainingLevel)) return true;
                if (this.SkillWeights != null)
                {
                    if (eval(this.SkillWeights.Overall)) return true;
                    if (this.SkillWeights.Specific != null)
                    {
                        foreach (var item in this.SkillWeights.Specific)
                        {
                            if (!eval(item.Key)) return false;
                            if (eval(item.Value)) return true;
                        }
                    }
                }
                if (eval(this.BleedoutDefault)) return true;
                if (eval(this.VoicePoints)) return true;
                if (this.StatWeights != null)
                {
                    if (eval(this.StatWeights.Overall)) return true;
                    if (this.StatWeights.Specific != null)
                    {
                        foreach (var item in this.StatWeights.Specific)
                        {
                            if (!eval(item.Key)) return false;
                            if (eval(item.Value)) return true;
                        }
                    }
                }
                if (eval(this.Unknown2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ClassData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Unknown = eval(this.Unknown);
                obj.Teaches = eval(this.Teaches);
                obj.MaxTrainingLevel = eval(this.MaxTrainingLevel);
                if (SkillWeights != null)
                {
                    obj.SkillWeights = new MaskItem<R, IEnumerable<KeyValuePair<R, R>>?>(eval(this.SkillWeights.Overall), default);
                    if (SkillWeights.Specific != null)
                    {
                        List<KeyValuePair<R, R>> l = new List<KeyValuePair<R, R>>();
                        obj.SkillWeights.Specific = l;
                        foreach (var item in SkillWeights.Specific)
                        {
                            R keyVal = eval(item.Key);
                            R valVal = eval(item.Value);
                            l.Add(new KeyValuePair<R, R>(keyVal, valVal));
                        }
                    }
                }
                obj.BleedoutDefault = eval(this.BleedoutDefault);
                obj.VoicePoints = eval(this.VoicePoints);
                if (StatWeights != null)
                {
                    obj.StatWeights = new MaskItem<R, IEnumerable<KeyValuePair<R, R>>?>(eval(this.StatWeights.Overall), default);
                    if (StatWeights.Specific != null)
                    {
                        List<KeyValuePair<R, R>> l = new List<KeyValuePair<R, R>>();
                        obj.StatWeights.Specific = l;
                        foreach (var item in StatWeights.Specific)
                        {
                            R keyVal = eval(item.Key);
                            R valVal = eval(item.Value);
                            l.Add(new KeyValuePair<R, R>(keyVal, valVal));
                        }
                    }
                }
                obj.Unknown2 = eval(this.Unknown2);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ClassData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ClassData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ClassData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Teaches ?? true)
                    {
                        fg.AppendItem(Teaches, "Teaches");
                    }
                    if (printMask?.MaxTrainingLevel ?? true)
                    {
                        fg.AppendItem(MaxTrainingLevel, "MaxTrainingLevel");
                    }
                    if (printMask?.SkillWeights?.Overall ?? true)
                    {
                        fg.AppendLine("SkillWeights =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (SkillWeights != null)
                            {
                                if (SkillWeights.Overall != null)
                                {
                                    fg.AppendLine(SkillWeights.Overall.ToString());
                                }
                                if (SkillWeights.Specific != null)
                                {
                                    foreach (var subItem in SkillWeights.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine("Key => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Key);
                                            }
                                            fg.AppendLine("]");
                                            fg.AppendLine("Value => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Value);
                                            }
                                            fg.AppendLine("]");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.BleedoutDefault ?? true)
                    {
                        fg.AppendItem(BleedoutDefault, "BleedoutDefault");
                    }
                    if (printMask?.VoicePoints ?? true)
                    {
                        fg.AppendItem(VoicePoints, "VoicePoints");
                    }
                    if (printMask?.StatWeights?.Overall ?? true)
                    {
                        fg.AppendLine("StatWeights =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (StatWeights != null)
                            {
                                if (StatWeights.Overall != null)
                                {
                                    fg.AppendLine(StatWeights.Overall.ToString());
                                }
                                if (StatWeights.Specific != null)
                                {
                                    foreach (var subItem in StatWeights.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine("Key => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Key);
                                            }
                                            fg.AppendLine("]");
                                            fg.AppendLine("Value => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Value);
                                            }
                                            fg.AppendLine("]");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Unknown;
            public Exception? Teaches;
            public Exception? MaxTrainingLevel;
            public MaskItem<Exception?, IEnumerable<KeyValuePair<Exception?, Exception?>>?>? SkillWeights;
            public Exception? BleedoutDefault;
            public Exception? VoicePoints;
            public MaskItem<Exception?, IEnumerable<KeyValuePair<Exception?, Exception?>>?>? StatWeights;
            public Exception? Unknown2;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
                switch (enu)
                {
                    case ClassData_FieldIndex.Unknown:
                        return Unknown;
                    case ClassData_FieldIndex.Teaches:
                        return Teaches;
                    case ClassData_FieldIndex.MaxTrainingLevel:
                        return MaxTrainingLevel;
                    case ClassData_FieldIndex.SkillWeights:
                        return SkillWeights;
                    case ClassData_FieldIndex.BleedoutDefault:
                        return BleedoutDefault;
                    case ClassData_FieldIndex.VoicePoints:
                        return VoicePoints;
                    case ClassData_FieldIndex.StatWeights:
                        return StatWeights;
                    case ClassData_FieldIndex.Unknown2:
                        return Unknown2;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
                switch (enu)
                {
                    case ClassData_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case ClassData_FieldIndex.Teaches:
                        this.Teaches = ex;
                        break;
                    case ClassData_FieldIndex.MaxTrainingLevel:
                        this.MaxTrainingLevel = ex;
                        break;
                    case ClassData_FieldIndex.SkillWeights:
                        this.SkillWeights = new MaskItem<Exception?, IEnumerable<KeyValuePair<Exception?, Exception?>>?>(ex, null);
                        break;
                    case ClassData_FieldIndex.BleedoutDefault:
                        this.BleedoutDefault = ex;
                        break;
                    case ClassData_FieldIndex.VoicePoints:
                        this.VoicePoints = ex;
                        break;
                    case ClassData_FieldIndex.StatWeights:
                        this.StatWeights = new MaskItem<Exception?, IEnumerable<KeyValuePair<Exception?, Exception?>>?>(ex, null);
                        break;
                    case ClassData_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
                switch (enu)
                {
                    case ClassData_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.Teaches:
                        this.Teaches = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.MaxTrainingLevel:
                        this.MaxTrainingLevel = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.SkillWeights:
                        this.SkillWeights = (MaskItem<Exception?, IEnumerable<KeyValuePair<Exception?, Exception?>>?>)obj;
                        break;
                    case ClassData_FieldIndex.BleedoutDefault:
                        this.BleedoutDefault = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.VoicePoints:
                        this.VoicePoints = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.StatWeights:
                        this.StatWeights = (MaskItem<Exception?, IEnumerable<KeyValuePair<Exception?, Exception?>>?>)obj;
                        break;
                    case ClassData_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Unknown != null) return true;
                if (Teaches != null) return true;
                if (MaxTrainingLevel != null) return true;
                if (SkillWeights != null) return true;
                if (BleedoutDefault != null) return true;
                if (VoicePoints != null) return true;
                if (StatWeights != null) return true;
                if (Unknown2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(Teaches, "Teaches");
                fg.AppendItem(MaxTrainingLevel, "MaxTrainingLevel");
                fg.AppendLine("SkillWeights =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (SkillWeights != null)
                    {
                        if (SkillWeights.Overall != null)
                        {
                            fg.AppendLine(SkillWeights.Overall.ToString());
                        }
                        if (SkillWeights.Specific != null)
                        {
                            foreach (var subItem in SkillWeights.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Key);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Value);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendItem(BleedoutDefault, "BleedoutDefault");
                fg.AppendItem(VoicePoints, "VoicePoints");
                fg.AppendLine("StatWeights =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (StatWeights != null)
                    {
                        if (StatWeights.Overall != null)
                        {
                            fg.AppendLine(StatWeights.Overall.ToString());
                        }
                        if (StatWeights.Specific != null)
                        {
                            foreach (var subItem in StatWeights.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Key);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Value);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                fg.AppendItem(Unknown2, "Unknown2");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Teaches = this.Teaches.Combine(rhs.Teaches);
                ret.MaxTrainingLevel = this.MaxTrainingLevel.Combine(rhs.MaxTrainingLevel);
                ret.SkillWeights = new MaskItem<Exception?, IEnumerable<KeyValuePair<Exception?, Exception?>>?>(ExceptionExt.Combine(this.SkillWeights?.Overall, rhs.SkillWeights?.Overall), new List<KeyValuePair<Exception?, Exception?>>(ExceptionExt.Combine(this.SkillWeights?.Specific, rhs.SkillWeights?.Specific)));
                ret.BleedoutDefault = this.BleedoutDefault.Combine(rhs.BleedoutDefault);
                ret.VoicePoints = this.VoicePoints.Combine(rhs.VoicePoints);
                ret.StatWeights = new MaskItem<Exception?, IEnumerable<KeyValuePair<Exception?, Exception?>>?>(ExceptionExt.Combine(this.StatWeights?.Overall, rhs.StatWeights?.Overall), new List<KeyValuePair<Exception?, Exception?>>(ExceptionExt.Combine(this.StatWeights?.Specific, rhs.StatWeights?.Specific)));
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Unknown;
            public bool Teaches;
            public bool MaxTrainingLevel;
            public bool SkillWeights;
            public bool BleedoutDefault;
            public bool VoicePoints;
            public bool StatWeights;
            public bool Unknown2;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Unknown = defaultOn;
                this.Teaches = defaultOn;
                this.MaxTrainingLevel = defaultOn;
                this.SkillWeights = defaultOn;
                this.BleedoutDefault = defaultOn;
                this.VoicePoints = defaultOn;
                this.StatWeights = defaultOn;
                this.Unknown2 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Unknown, null));
                ret.Add((Teaches, null));
                ret.Add((MaxTrainingLevel, null));
                ret.Add((SkillWeights, null));
                ret.Add((BleedoutDefault, null));
                ret.Add((VoicePoints, null));
                ret.Add((StatWeights, null));
                ret.Add((Unknown2, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = ClassData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ClassDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ClassData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static ClassData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ClassData();
            ((ClassDataSetterCommon)((IClassDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ClassDataSetterCommon)((IClassDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ClassData GetNew()
        {
            return new ClassData();
        }

    }
    #endregion

    #region Interface
    public partial interface IClassData :
        IClassDataGetter,
        ILoquiObjectSetter<IClassData>
    {
        new Int32 Unknown { get; set; }
        new Skill? Teaches { get; set; }
        new Byte MaxTrainingLevel { get; set; }
        new IDictionary<Skill, Byte> SkillWeights { get; }
        new Single BleedoutDefault { get; set; }
        new UInt32 VoicePoints { get; set; }
        new IDictionary<BasicStat, Byte> StatWeights { get; }
        new Byte Unknown2 { get; set; }
    }

    public partial interface IClassDataGetter :
        ILoquiObject,
        ILoquiObject<IClassDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ClassData_Registration.Instance;
        Int32 Unknown { get; }
        Skill? Teaches { get; }
        Byte MaxTrainingLevel { get; }
        IReadOnlyDictionary<Skill, Byte> SkillWeights { get; }
        Single BleedoutDefault { get; }
        UInt32 VoicePoints { get; }
        IReadOnlyDictionary<BasicStat, Byte> StatWeights { get; }
        Byte Unknown2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ClassDataMixIn
    {
        public static void Clear(this IClassData item)
        {
            ((ClassDataSetterCommon)((IClassDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ClassData.Mask<bool> GetEqualsMask(
            this IClassDataGetter item,
            IClassDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IClassDataGetter item,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClassDataGetter item,
            FileGeneration fg,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IClassDataGetter item,
            ClassData.Mask<bool?> checkMask)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ClassData.Mask<bool> GetHasBeenSetMask(this IClassDataGetter item)
        {
            var ret = new ClassData.Mask<bool>(false);
            ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IClassDataGetter item,
            IClassDataGetter rhs)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs)
        {
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs,
            ClassData.TranslationMask? copyMask = null)
        {
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ClassData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ClassData DeepCopy(
            this IClassDataGetter item,
            ClassData.TranslationMask? copyMask = null)
        {
            return ((ClassDataSetterTranslationCommon)((IClassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ClassData DeepCopy(
            this IClassDataGetter item,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? copyMask = null)
        {
            return ((ClassDataSetterTranslationCommon)((IClassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ClassData DeepCopy(
            this IClassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClassDataSetterTranslationCommon)((IClassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClassData item,
            XElement node,
            ClassData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClassData item,
            XElement node,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ClassData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IClassData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ClassDataSetterCommon)((IClassDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            string path,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            string path,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            string path,
            ErrorMaskBuilder? errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IClassData item,
            Stream stream,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            Stream stream,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IClassData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IClassData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassDataSetterCommon)((IClassDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum ClassData_FieldIndex
    {
        Unknown = 0,
        Teaches = 1,
        MaxTrainingLevel = 2,
        SkillWeights = 3,
        BleedoutDefault = 4,
        VoicePoints = 5,
        StatWeights = 6,
        Unknown2 = 7,
    }
    #endregion

    #region Registration
    public partial class ClassData_Registration : ILoquiRegistration
    {
        public static readonly ClassData_Registration Instance = new ClassData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 133,
            version: 0);

        public const string GUID = "34be387d-c309-4620-be5f-49b0e7037fc4";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(ClassData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ClassData.ErrorMask);

        public static readonly Type ClassType = typeof(ClassData);

        public static readonly Type GetterType = typeof(IClassDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClassData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.ClassData";

        public const string Name = "ClassData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "UNKNOWN":
                    return (ushort)ClassData_FieldIndex.Unknown;
                case "TEACHES":
                    return (ushort)ClassData_FieldIndex.Teaches;
                case "MAXTRAININGLEVEL":
                    return (ushort)ClassData_FieldIndex.MaxTrainingLevel;
                case "SKILLWEIGHTS":
                    return (ushort)ClassData_FieldIndex.SkillWeights;
                case "BLEEDOUTDEFAULT":
                    return (ushort)ClassData_FieldIndex.BleedoutDefault;
                case "VOICEPOINTS":
                    return (ushort)ClassData_FieldIndex.VoicePoints;
                case "STATWEIGHTS":
                    return (ushort)ClassData_FieldIndex.StatWeights;
                case "UNKNOWN2":
                    return (ushort)ClassData_FieldIndex.Unknown2;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Unknown:
                case ClassData_FieldIndex.Teaches:
                case ClassData_FieldIndex.MaxTrainingLevel:
                case ClassData_FieldIndex.SkillWeights:
                case ClassData_FieldIndex.BleedoutDefault:
                case ClassData_FieldIndex.VoicePoints:
                case ClassData_FieldIndex.StatWeights:
                case ClassData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Unknown:
                case ClassData_FieldIndex.Teaches:
                case ClassData_FieldIndex.MaxTrainingLevel:
                case ClassData_FieldIndex.SkillWeights:
                case ClassData_FieldIndex.BleedoutDefault:
                case ClassData_FieldIndex.VoicePoints:
                case ClassData_FieldIndex.StatWeights:
                case ClassData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Unknown:
                case ClassData_FieldIndex.Teaches:
                case ClassData_FieldIndex.MaxTrainingLevel:
                case ClassData_FieldIndex.SkillWeights:
                case ClassData_FieldIndex.BleedoutDefault:
                case ClassData_FieldIndex.VoicePoints:
                case ClassData_FieldIndex.StatWeights:
                case ClassData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Unknown:
                    return "Unknown";
                case ClassData_FieldIndex.Teaches:
                    return "Teaches";
                case ClassData_FieldIndex.MaxTrainingLevel:
                    return "MaxTrainingLevel";
                case ClassData_FieldIndex.SkillWeights:
                    return "SkillWeights";
                case ClassData_FieldIndex.BleedoutDefault:
                    return "BleedoutDefault";
                case ClassData_FieldIndex.VoicePoints:
                    return "VoicePoints";
                case ClassData_FieldIndex.StatWeights:
                    return "StatWeights";
                case ClassData_FieldIndex.Unknown2:
                    return "Unknown2";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Unknown:
                case ClassData_FieldIndex.Teaches:
                case ClassData_FieldIndex.MaxTrainingLevel:
                case ClassData_FieldIndex.SkillWeights:
                case ClassData_FieldIndex.BleedoutDefault:
                case ClassData_FieldIndex.VoicePoints:
                case ClassData_FieldIndex.StatWeights:
                case ClassData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Unknown:
                case ClassData_FieldIndex.Teaches:
                case ClassData_FieldIndex.MaxTrainingLevel:
                case ClassData_FieldIndex.SkillWeights:
                case ClassData_FieldIndex.BleedoutDefault:
                case ClassData_FieldIndex.VoicePoints:
                case ClassData_FieldIndex.StatWeights:
                case ClassData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Unknown:
                    return typeof(Int32);
                case ClassData_FieldIndex.Teaches:
                    return typeof(Skill);
                case ClassData_FieldIndex.MaxTrainingLevel:
                    return typeof(Byte);
                case ClassData_FieldIndex.SkillWeights:
                    return typeof(Dictionary<Skill, Byte>);
                case ClassData_FieldIndex.BleedoutDefault:
                    return typeof(Single);
                case ClassData_FieldIndex.VoicePoints:
                    return typeof(UInt32);
                case ClassData_FieldIndex.StatWeights:
                    return typeof(Dictionary<BasicStat, Byte>);
                case ClassData_FieldIndex.Unknown2:
                    return typeof(Byte);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ClassDataXmlWriteTranslation);
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = DATA_HEADER;
        public const int NumStructFields = 8;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(ClassDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ClassDataSetterCommon
    {
        public static readonly ClassDataSetterCommon Instance = new ClassDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClassData item)
        {
            ClearPartial();
            item.Unknown = default;
            item.Teaches = default;
            item.MaxTrainingLevel = default;
            item.SkillWeights.Clear();
            item.BleedoutDefault = default;
            item.VoicePoints = default;
            item.StatWeights.Clear();
            item.Unknown2 = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IClassData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClassDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IClassData item,
            MutagenFrame frame)
        {
            item.Unknown = frame.ReadInt32();
            if (frame.Complete) return;
            item.Teaches = EnumBinaryTranslation<Skill>.Instance.Parse(frame: frame.SpawnWithLength(1));
            item.MaxTrainingLevel = frame.ReadUInt8();
            Mutagen.Bethesda.Binary.DictBinaryTranslation<Byte>.Instance.Parse<Skill>(
                frame: frame,
                item: item.SkillWeights,
                transl: ByteBinaryTranslation.Instance.Parse);
            item.BleedoutDefault = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.VoicePoints = frame.ReadUInt32();
            Mutagen.Bethesda.Binary.DictBinaryTranslation<Byte>.Instance.Parse<BasicStat>(
                frame: frame,
                item: item.StatWeights,
                transl: ByteBinaryTranslation.Instance.Parse);
            item.Unknown2 = frame.ReadUInt8();
        }
        
        public virtual void CopyInFromBinary(
            IClassData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ClassData_Registration.DATA_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class ClassDataCommon
    {
        public static readonly ClassDataCommon Instance = new ClassDataCommon();

        public ClassData.Mask<bool> GetEqualsMask(
            IClassDataGetter item,
            IClassDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ClassData.Mask<bool>(false);
            ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClassDataGetter item,
            IClassDataGetter rhs,
            ClassData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.MaxTrainingLevel = item.MaxTrainingLevel == rhs.MaxTrainingLevel;
            {
                var specific = item.SkillWeights.SelectAgainst<KeyValuePair<Skill, Byte>, KeyValuePair<bool, bool>>(rhs.SkillWeights, ((l, r) => new KeyValuePair<bool, bool>(object.Equals(l.Key, r.Key), object.Equals(l.Value, r.Value))), out var countEqual);
                ret.SkillWeights = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>?>(countEqual && specific.All((b) => b.Key && b.Value), specific);
            }
            ret.BleedoutDefault = item.BleedoutDefault.EqualsWithin(rhs.BleedoutDefault);
            ret.VoicePoints = item.VoicePoints == rhs.VoicePoints;
            {
                var specific = item.StatWeights.SelectAgainst<KeyValuePair<BasicStat, Byte>, KeyValuePair<bool, bool>>(rhs.StatWeights, ((l, r) => new KeyValuePair<bool, bool>(object.Equals(l.Key, r.Key), object.Equals(l.Value, r.Value))), out var countEqual);
                ret.StatWeights = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>?>(countEqual && specific.All((b) => b.Key && b.Value), specific);
            }
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
        }
        
        public string ToString(
            IClassDataGetter item,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IClassDataGetter item,
            FileGeneration fg,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ClassData =>");
            }
            else
            {
                fg.AppendLine($"{name} (ClassData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IClassDataGetter item,
            FileGeneration fg,
            ClassData.Mask<bool>? printMask = null)
        {
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if ((printMask?.Teaches ?? true)
                && item.Teaches.TryGet(out var TeachesItem))
            {
                fg.AppendItem(TeachesItem, "Teaches");
            }
            if (printMask?.MaxTrainingLevel ?? true)
            {
                fg.AppendItem(item.MaxTrainingLevel, "MaxTrainingLevel");
            }
            if (printMask?.SkillWeights?.Overall ?? true)
            {
                fg.AppendLine("SkillWeights =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.SkillWeights)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.Key);
                            fg.AppendItem(subItem.Value);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.BleedoutDefault ?? true)
            {
                fg.AppendItem(item.BleedoutDefault, "BleedoutDefault");
            }
            if (printMask?.VoicePoints ?? true)
            {
                fg.AppendItem(item.VoicePoints, "VoicePoints");
            }
            if (printMask?.StatWeights?.Overall ?? true)
            {
                fg.AppendLine("StatWeights =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.StatWeights)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.Key);
                            fg.AppendItem(subItem.Value);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendItem(item.Unknown2, "Unknown2");
            }
        }
        
        public bool HasBeenSet(
            IClassDataGetter item,
            ClassData.Mask<bool?> checkMask)
        {
            if (checkMask.Teaches.HasValue && checkMask.Teaches.Value != (item.Teaches != null)) return false;
            if (checkMask.SkillWeights?.Overall.HasValue ?? false) return false;
            if (checkMask.StatWeights?.Overall.HasValue ?? false) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IClassDataGetter item,
            ClassData.Mask<bool> mask)
        {
            mask.Unknown = true;
            mask.Teaches = (item.Teaches != null);
            mask.MaxTrainingLevel = true;
            mask.SkillWeights = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>?>(item.SkillWeights != null, null);
            mask.BleedoutDefault = true;
            mask.VoicePoints = true;
            mask.StatWeights = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>?>(item.StatWeights != null, null);
            mask.Unknown2 = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClassDataGetter? lhs,
            IClassDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.Teaches != rhs.Teaches) return false;
            if (lhs.MaxTrainingLevel != rhs.MaxTrainingLevel) return false;
            if (!lhs.SkillWeights.SequenceEqual(rhs.SkillWeights)) return false;
            if (!lhs.BleedoutDefault.EqualsWithin(rhs.BleedoutDefault)) return false;
            if (lhs.VoicePoints != rhs.VoicePoints) return false;
            if (!lhs.StatWeights.SequenceEqual(rhs.StatWeights)) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            return true;
        }
        
        public virtual int GetHashCode(IClassDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Unknown);
            if (item.Teaches.TryGet(out var Teachesitem))
            {
                hash.Add(Teachesitem);
            }
            hash.Add(item.MaxTrainingLevel);
            hash.Add(item.SkillWeights);
            hash.Add(item.BleedoutDefault);
            hash.Add(item.VoicePoints);
            hash.Add(item.StatWeights);
            hash.Add(item.Unknown2);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ClassData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IClassDataGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IClassDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class ClassDataSetterTranslationCommon
    {
        public static readonly ClassDataSetterTranslationCommon Instance = new ClassDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IClassData item,
            IClassDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Teaches) ?? true))
            {
                item.Teaches = rhs.Teaches;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.MaxTrainingLevel) ?? true))
            {
                item.MaxTrainingLevel = rhs.MaxTrainingLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.SkillWeights) ?? true))
            {
                errorMask?.PushIndex((int)ClassData_FieldIndex.SkillWeights);
                try
                {
                    item.SkillWeights.SetTo(rhs.SkillWeights);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.BleedoutDefault) ?? true))
            {
                item.BleedoutDefault = rhs.BleedoutDefault;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.VoicePoints) ?? true))
            {
                item.VoicePoints = rhs.VoicePoints;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.StatWeights) ?? true))
            {
                errorMask?.PushIndex((int)ClassData_FieldIndex.StatWeights);
                try
                {
                    item.StatWeights.SetTo(rhs.StatWeights);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
        }
        
        #endregion
        
        public ClassData DeepCopy(
            IClassDataGetter item,
            ClassData.TranslationMask? copyMask = null)
        {
            ClassData ret = (ClassData)((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ClassData DeepCopy(
            IClassDataGetter item,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? copyMask = null)
        {
            ClassData ret = (ClassData)((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ClassData DeepCopy(
            IClassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ClassData ret = (ClassData)((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class ClassData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClassData_Registration.Instance;
        public static ClassData_Registration Registration => ClassData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ClassDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ClassDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ClassDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IClassDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IClassDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IClassDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ClassDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ClassDataXmlWriteTranslation Instance = new ClassDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IClassDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.Unknown) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)ClassData_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((item.Teaches != null)
                && (translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.Teaches) ?? true))
            {
                EnumXmlTranslation<Skill>.Instance.Write(
                    node: node,
                    name: nameof(item.Teaches),
                    item: item.Teaches,
                    fieldIndex: (int)ClassData_FieldIndex.Teaches,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.MaxTrainingLevel) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaxTrainingLevel),
                    item: item.MaxTrainingLevel,
                    fieldIndex: (int)ClassData_FieldIndex.MaxTrainingLevel,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.SkillWeights) ?? true))
            {
                DictXmlTranslation<Skill, Byte>.Instance.Write(
                    node: node,
                    name: nameof(item.SkillWeights),
                    items: item.SkillWeights,
                    fieldIndex: (int)ClassData_FieldIndex.SkillWeights,
                    errorMask: errorMask,
                    translationMask: translationMask,
                    keyTransl: (XElement subNode, Skill subItem, ErrorMaskBuilder? dictSubMask, TranslationCrystal? dictSubTranslMask) =>
                    {
                        EnumXmlTranslation<Skill>.Instance.Write(
                            node: subNode,
                            name: "Key",
                            item: subItem,
                            errorMask: dictSubMask);
                    },
                    valTransl: (XElement subNode, Byte subItem, ErrorMaskBuilder? dictSubMask, TranslationCrystal? dictSubTranslMask) =>
                    {
                        ByteXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Value",
                            item: subItem,
                            errorMask: dictSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.BleedoutDefault) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BleedoutDefault),
                    item: item.BleedoutDefault,
                    fieldIndex: (int)ClassData_FieldIndex.BleedoutDefault,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.VoicePoints) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VoicePoints),
                    item: item.VoicePoints,
                    fieldIndex: (int)ClassData_FieldIndex.VoicePoints,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.StatWeights) ?? true))
            {
                DictXmlTranslation<BasicStat, Byte>.Instance.Write(
                    node: node,
                    name: nameof(item.StatWeights),
                    items: item.StatWeights,
                    fieldIndex: (int)ClassData_FieldIndex.StatWeights,
                    errorMask: errorMask,
                    translationMask: translationMask,
                    keyTransl: (XElement subNode, BasicStat subItem, ErrorMaskBuilder? dictSubMask, TranslationCrystal? dictSubTranslMask) =>
                    {
                        EnumXmlTranslation<BasicStat>.Instance.Write(
                            node: subNode,
                            name: "Key",
                            item: subItem,
                            errorMask: dictSubMask);
                    },
                    valTransl: (XElement subNode, Byte subItem, ErrorMaskBuilder? dictSubMask, TranslationCrystal? dictSubTranslMask) =>
                    {
                        ByteXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Value",
                            item: subItem,
                            errorMask: dictSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.Unknown2) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown2),
                    item: item.Unknown2,
                    fieldIndex: (int)ClassData_FieldIndex.Unknown2,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IClassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.ClassData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.ClassData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClassDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IClassDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IClassDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ClassDataXmlCreateTranslation
    {
        public readonly static ClassDataXmlCreateTranslation Instance = new ClassDataXmlCreateTranslation();

        public static void FillPublicXml(
            IClassData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClassDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IClassData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Unknown":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Teaches":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.Teaches);
                    try
                    {
                        item.Teaches = EnumXmlTranslation<Skill>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxTrainingLevel":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.MaxTrainingLevel);
                    try
                    {
                        item.MaxTrainingLevel = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillWeights":
                    DictXmlTranslation<Skill, Byte>.Instance.ParseInto(
                        node: node,
                        item: item.SkillWeights,
                        fieldIndex: (int)ClassData_FieldIndex.SkillWeights,
                        errorMask: errorMask,
                        translationMask: translationMask,
                        keyTransl: EnumXmlTranslation<Skill>.Instance.Parse,
                        valTransl: ByteXmlTranslation.Instance.Parse);
                    break;
                case "BleedoutDefault":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.BleedoutDefault);
                    try
                    {
                        item.BleedoutDefault = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VoicePoints":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.VoicePoints);
                    try
                    {
                        item.VoicePoints = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StatWeights":
                    DictXmlTranslation<BasicStat, Byte>.Instance.ParseInto(
                        node: node,
                        item: item.StatWeights,
                        fieldIndex: (int)ClassData_FieldIndex.StatWeights,
                        errorMask: errorMask,
                        translationMask: translationMask,
                        keyTransl: EnumXmlTranslation<BasicStat>.Instance.Parse,
                        valTransl: ByteXmlTranslation.Instance.Parse);
                    break;
                case "Unknown2":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.Unknown2);
                    try
                    {
                        item.Unknown2 = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ClassDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IClassDataGetter item,
            XElement node,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ClassData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            string path,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            Stream stream,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            XElement node,
            string? name = null,
            ClassData.TranslationMask? translationMask = null)
        {
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ClassDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ClassDataBinaryWriteTranslation Instance = new ClassDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IClassDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Unknown);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                writer,
                ((int?)item.Teaches) ?? -1,
                length: 1);
            writer.Write(item.MaxTrainingLevel);
            Mutagen.Bethesda.Binary.DictBinaryTranslation<Byte>.Instance.Write(
                writer: writer,
                items: item.SkillWeights,
                transl: ByteBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BleedoutDefault);
            writer.Write(item.VoicePoints);
            Mutagen.Bethesda.Binary.DictBinaryTranslation<Byte>.Instance.Write(
                writer: writer,
                items: item.StatWeights,
                transl: ByteBinaryTranslation.Instance.Write);
            writer.Write(item.Unknown2);
        }

        public void Write(
            MutagenWriter writer,
            IClassDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(ClassData_Registration.DATA_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IClassDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ClassDataBinaryCreateTranslation
    {
        public readonly static ClassDataBinaryCreateTranslation Instance = new ClassDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ClassDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IClassDataGetter item,
            MutagenWriter writer)
        {
            ((ClassDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ClassDataBinaryOverlay :
        BinaryOverlay,
        IClassDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClassData_Registration.Instance;
        public static ClassData_Registration Registration => ClassData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ClassDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ClassDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IClassDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IClassDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IClassDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ClassDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClassDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ClassDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Int32 Unknown => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x0, 0x4));
        #region Teaches
        public Skill? Teaches
        {
            get
            {
                var val = (Skill)_data.Span.Slice(0x4, 0x1)[0];
                if (((int)val) == -1) return null;
                return val;
            }
        }
        #endregion
        public Byte MaxTrainingLevel => _data.Span[0x5];
        #region SkillWeights
        public IReadOnlyDictionary<Skill, Byte> SkillWeights => DictBinaryTranslation<Byte>.Instance.Parse<Skill>(
            new MutagenFrame(new MutagenMemoryReadStream(_data.Slice(0x6), _package.Meta, _package.MasterReferences)),
            new Dictionary<Skill, Byte>(),
            ByteBinaryTranslation.Instance.Parse);
        #endregion
        public Single BleedoutDefault => SpanExt.GetFloat(_data.Slice(0x18, 0x4));
        public UInt32 VoicePoints => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x1C, 0x4));
        #region StatWeights
        public IReadOnlyDictionary<BasicStat, Byte> StatWeights => DictBinaryTranslation<Byte>.Instance.Parse<BasicStat>(
            new MutagenFrame(new MutagenMemoryReadStream(_data.Slice(0x20), _package.Meta, _package.MasterReferences)),
            new Dictionary<BasicStat, Byte>(),
            ByteBinaryTranslation.Instance.Parse);
        #endregion
        public Byte Unknown2 => _data.Span[0x23];
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ClassDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ClassDataBinaryOverlay ClassDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ClassDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x24 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ClassDataBinaryOverlay ClassDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ClassDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClassDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

