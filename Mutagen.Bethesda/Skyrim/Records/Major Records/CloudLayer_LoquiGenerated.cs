/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class CloudLayer :
        ICloudLayer,
        ILoquiObjectSetter<CloudLayer>,
        IEquatable<CloudLayer>,
        IEqualsMask
    {
        #region Ctor
        public CloudLayer()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Enabled
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Boolean? _Enabled;
        public Boolean? Enabled
        {
            get => this._Enabled;
            set => this._Enabled = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Boolean? ICloudLayerGetter.Enabled => this.Enabled;
        #endregion
        #region XSpeed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single? _XSpeed;
        public Single? XSpeed
        {
            get => this._XSpeed;
            set => this._XSpeed = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICloudLayerGetter.XSpeed => this.XSpeed;
        #endregion
        #region YSpeed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single? _YSpeed;
        public Single? YSpeed
        {
            get => this._YSpeed;
            set => this._YSpeed = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICloudLayerGetter.YSpeed => this.YSpeed;
        #endregion
        #region Colors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WeatherColor? _Colors;
        public WeatherColor? Colors
        {
            get => _Colors;
            set => _Colors = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter? ICloudLayerGetter.Colors => this.Colors;
        #endregion
        #region Alphas
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WeatherAlpha? _Alphas;
        public WeatherAlpha? Alphas
        {
            get => _Alphas;
            set => _Alphas = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherAlphaGetter? ICloudLayerGetter.Alphas => this.Alphas;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CloudLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICloudLayerGetter rhs)) return false;
            return ((CloudLayerCommon)((ICloudLayerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(CloudLayer obj)
        {
            return ((CloudLayerCommon)((ICloudLayerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CloudLayerCommon)((ICloudLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => CloudLayerXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CloudLayerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static CloudLayer CreateFromXml(
            XElement node,
            CloudLayer.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static CloudLayer CreateFromXml(
            XElement node,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CloudLayer.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CloudLayer CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new CloudLayer();
            ((CloudLayerSetterCommon)((ICloudLayerGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static CloudLayer CreateFromXml(
            string path,
            CloudLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static CloudLayer CreateFromXml(
            string path,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CloudLayer CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            CloudLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static CloudLayer CreateFromXml(
            Stream stream,
            CloudLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static CloudLayer CreateFromXml(
            Stream stream,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CloudLayer CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            CloudLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Enabled = initialValue;
                this.XSpeed = initialValue;
                this.YSpeed = initialValue;
                this.Colors = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.Alphas = new MaskItem<TItem, WeatherAlpha.Mask<TItem>?>(initialValue, new WeatherAlpha.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Enabled,
                TItem XSpeed,
                TItem YSpeed,
                TItem Colors,
                TItem Alphas)
            {
                this.Enabled = Enabled;
                this.XSpeed = XSpeed;
                this.YSpeed = YSpeed;
                this.Colors = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(Colors, new WeatherColor.Mask<TItem>(Colors));
                this.Alphas = new MaskItem<TItem, WeatherAlpha.Mask<TItem>?>(Alphas, new WeatherAlpha.Mask<TItem>(Alphas));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Enabled;
            public TItem XSpeed;
            public TItem YSpeed;
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? Colors { get; set; }
            public MaskItem<TItem, WeatherAlpha.Mask<TItem>?>? Alphas { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Enabled, rhs.Enabled)) return false;
                if (!object.Equals(this.XSpeed, rhs.XSpeed)) return false;
                if (!object.Equals(this.YSpeed, rhs.YSpeed)) return false;
                if (!object.Equals(this.Colors, rhs.Colors)) return false;
                if (!object.Equals(this.Alphas, rhs.Alphas)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Enabled);
                hash.Add(this.XSpeed);
                hash.Add(this.YSpeed);
                hash.Add(this.Colors);
                hash.Add(this.Alphas);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Enabled)) return false;
                if (!eval(this.XSpeed)) return false;
                if (!eval(this.YSpeed)) return false;
                if (Colors != null)
                {
                    if (!eval(this.Colors.Overall)) return false;
                    if (this.Colors.Specific != null && !this.Colors.Specific.All(eval)) return false;
                }
                if (Alphas != null)
                {
                    if (!eval(this.Alphas.Overall)) return false;
                    if (this.Alphas.Specific != null && !this.Alphas.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Enabled)) return true;
                if (eval(this.XSpeed)) return true;
                if (eval(this.YSpeed)) return true;
                if (Colors != null)
                {
                    if (eval(this.Colors.Overall)) return true;
                    if (this.Colors.Specific != null && this.Colors.Specific.Any(eval)) return true;
                }
                if (Alphas != null)
                {
                    if (eval(this.Alphas.Overall)) return true;
                    if (this.Alphas.Specific != null && this.Alphas.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CloudLayer.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Enabled = eval(this.Enabled);
                obj.XSpeed = eval(this.XSpeed);
                obj.YSpeed = eval(this.YSpeed);
                obj.Colors = this.Colors == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.Colors.Overall), this.Colors.Specific?.Translate(eval));
                obj.Alphas = this.Alphas == null ? null : new MaskItem<R, WeatherAlpha.Mask<R>?>(eval(this.Alphas.Overall), this.Alphas.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CloudLayer.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CloudLayer.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CloudLayer.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Enabled ?? true)
                    {
                        fg.AppendItem(Enabled, "Enabled");
                    }
                    if (printMask?.XSpeed ?? true)
                    {
                        fg.AppendItem(XSpeed, "XSpeed");
                    }
                    if (printMask?.YSpeed ?? true)
                    {
                        fg.AppendItem(YSpeed, "YSpeed");
                    }
                    if (printMask?.Colors?.Overall ?? true)
                    {
                        Colors?.ToString(fg);
                    }
                    if (printMask?.Alphas?.Overall ?? true)
                    {
                        Alphas?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Enabled;
            public Exception? XSpeed;
            public Exception? YSpeed;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? Colors;
            public MaskItem<Exception?, WeatherAlpha.ErrorMask?>? Alphas;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CloudLayer_FieldIndex enu = (CloudLayer_FieldIndex)index;
                switch (enu)
                {
                    case CloudLayer_FieldIndex.Enabled:
                        return Enabled;
                    case CloudLayer_FieldIndex.XSpeed:
                        return XSpeed;
                    case CloudLayer_FieldIndex.YSpeed:
                        return YSpeed;
                    case CloudLayer_FieldIndex.Colors:
                        return Colors;
                    case CloudLayer_FieldIndex.Alphas:
                        return Alphas;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CloudLayer_FieldIndex enu = (CloudLayer_FieldIndex)index;
                switch (enu)
                {
                    case CloudLayer_FieldIndex.Enabled:
                        this.Enabled = ex;
                        break;
                    case CloudLayer_FieldIndex.XSpeed:
                        this.XSpeed = ex;
                        break;
                    case CloudLayer_FieldIndex.YSpeed:
                        this.YSpeed = ex;
                        break;
                    case CloudLayer_FieldIndex.Colors:
                        this.Colors = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case CloudLayer_FieldIndex.Alphas:
                        this.Alphas = new MaskItem<Exception?, WeatherAlpha.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CloudLayer_FieldIndex enu = (CloudLayer_FieldIndex)index;
                switch (enu)
                {
                    case CloudLayer_FieldIndex.Enabled:
                        this.Enabled = (Exception?)obj;
                        break;
                    case CloudLayer_FieldIndex.XSpeed:
                        this.XSpeed = (Exception?)obj;
                        break;
                    case CloudLayer_FieldIndex.YSpeed:
                        this.YSpeed = (Exception?)obj;
                        break;
                    case CloudLayer_FieldIndex.Colors:
                        this.Colors = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case CloudLayer_FieldIndex.Alphas:
                        this.Alphas = (MaskItem<Exception?, WeatherAlpha.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Enabled != null) return true;
                if (XSpeed != null) return true;
                if (YSpeed != null) return true;
                if (Colors != null) return true;
                if (Alphas != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Enabled, "Enabled");
                fg.AppendItem(XSpeed, "XSpeed");
                fg.AppendItem(YSpeed, "YSpeed");
                Colors?.ToString(fg);
                Alphas?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Enabled = this.Enabled.Combine(rhs.Enabled);
                ret.XSpeed = this.XSpeed.Combine(rhs.XSpeed);
                ret.YSpeed = this.YSpeed.Combine(rhs.YSpeed);
                ret.Colors = this.Colors.Combine(rhs.Colors, (l, r) => l.Combine(r));
                ret.Alphas = this.Alphas.Combine(rhs.Alphas, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Enabled;
            public bool XSpeed;
            public bool YSpeed;
            public MaskItem<bool, WeatherColor.TranslationMask?> Colors;
            public MaskItem<bool, WeatherAlpha.TranslationMask?> Alphas;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Enabled = defaultOn;
                this.XSpeed = defaultOn;
                this.YSpeed = defaultOn;
                this.Colors = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.Alphas = new MaskItem<bool, WeatherAlpha.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Enabled, null));
                ret.Add((XSpeed, null));
                ret.Add((YSpeed, null));
                ret.Add((Colors?.Overall ?? true, Colors?.Specific?.GetCrystal()));
                ret.Add((Alphas?.Overall ?? true, Alphas?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CloudLayerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CloudLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static CloudLayer CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static CloudLayer CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CloudLayer();
            ((CloudLayerSetterCommon)((ICloudLayerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICloudLayerGetter)rhs, include);

        void IClearable.Clear()
        {
            ((CloudLayerSetterCommon)((ICloudLayerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CloudLayer GetNew()
        {
            return new CloudLayer();
        }

    }
    #endregion

    #region Interface
    public partial interface ICloudLayer :
        ICloudLayerGetter,
        ILoquiObjectSetter<ICloudLayer>
    {
        new Boolean? Enabled { get; set; }
        new Single? XSpeed { get; set; }
        new Single? YSpeed { get; set; }
        new WeatherColor? Colors { get; set; }
        new WeatherAlpha? Alphas { get; set; }
    }

    public partial interface ICloudLayerGetter :
        ILoquiObject,
        ILoquiObject<ICloudLayerGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => CloudLayer_Registration.Instance;
        Boolean? Enabled { get; }
        Single? XSpeed { get; }
        Single? YSpeed { get; }
        IWeatherColorGetter? Colors { get; }
        IWeatherAlphaGetter? Alphas { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CloudLayerMixIn
    {
        public static void Clear(this ICloudLayer item)
        {
            ((CloudLayerSetterCommon)((ICloudLayerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CloudLayer.Mask<bool> GetEqualsMask(
            this ICloudLayerGetter item,
            ICloudLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICloudLayerGetter item,
            string? name = null,
            CloudLayer.Mask<bool>? printMask = null)
        {
            return ((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICloudLayerGetter item,
            FileGeneration fg,
            string? name = null,
            CloudLayer.Mask<bool>? printMask = null)
        {
            ((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ICloudLayerGetter item,
            CloudLayer.Mask<bool?> checkMask)
        {
            return ((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static CloudLayer.Mask<bool> GetHasBeenSetMask(this ICloudLayerGetter item)
        {
            var ret = new CloudLayer.Mask<bool>(false);
            ((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ICloudLayerGetter item,
            ICloudLayerGetter rhs)
        {
            return ((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICloudLayer lhs,
            ICloudLayerGetter rhs)
        {
            ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ICloudLayer lhs,
            ICloudLayerGetter rhs,
            CloudLayer.TranslationMask? copyMask = null)
        {
            ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICloudLayer lhs,
            ICloudLayerGetter rhs,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = CloudLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICloudLayer lhs,
            ICloudLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static CloudLayer DeepCopy(
            this ICloudLayerGetter item,
            CloudLayer.TranslationMask? copyMask = null)
        {
            return ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CloudLayer DeepCopy(
            this ICloudLayerGetter item,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? copyMask = null)
        {
            return ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CloudLayer DeepCopy(
            this ICloudLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CloudLayerSetterTranslationCommon)((ICloudLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICloudLayer item,
            XElement node,
            CloudLayer.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICloudLayer item,
            XElement node,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CloudLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ICloudLayer item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((CloudLayerSetterCommon)((ICloudLayerGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICloudLayer item,
            string path,
            CloudLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICloudLayer item,
            string path,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICloudLayer item,
            string path,
            ErrorMaskBuilder? errorMask,
            CloudLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ICloudLayer item,
            Stream stream,
            CloudLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICloudLayer item,
            Stream stream,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICloudLayer item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            CloudLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ICloudLayer item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ICloudLayer item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CloudLayerSetterCommon)((ICloudLayerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum CloudLayer_FieldIndex
    {
        Enabled = 0,
        XSpeed = 1,
        YSpeed = 2,
        Colors = 3,
        Alphas = 4,
    }
    #endregion

    #region Registration
    public partial class CloudLayer_Registration : ILoquiRegistration
    {
        public static readonly CloudLayer_Registration Instance = new CloudLayer_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 249,
            version: 0);

        public const string GUID = "e89335dd-a532-4104-9ce3-b607df804f84";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(CloudLayer.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CloudLayer.ErrorMask);

        public static readonly Type ClassType = typeof(CloudLayer);

        public static readonly Type GetterType = typeof(ICloudLayerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICloudLayer);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.CloudLayer";

        public const string Name = "CloudLayer";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ENABLED":
                    return (ushort)CloudLayer_FieldIndex.Enabled;
                case "XSPEED":
                    return (ushort)CloudLayer_FieldIndex.XSpeed;
                case "YSPEED":
                    return (ushort)CloudLayer_FieldIndex.YSpeed;
                case "COLORS":
                    return (ushort)CloudLayer_FieldIndex.Colors;
                case "ALPHAS":
                    return (ushort)CloudLayer_FieldIndex.Alphas;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CloudLayer_FieldIndex enu = (CloudLayer_FieldIndex)index;
            switch (enu)
            {
                case CloudLayer_FieldIndex.Enabled:
                case CloudLayer_FieldIndex.XSpeed:
                case CloudLayer_FieldIndex.YSpeed:
                case CloudLayer_FieldIndex.Colors:
                case CloudLayer_FieldIndex.Alphas:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CloudLayer_FieldIndex enu = (CloudLayer_FieldIndex)index;
            switch (enu)
            {
                case CloudLayer_FieldIndex.Colors:
                case CloudLayer_FieldIndex.Alphas:
                    return true;
                case CloudLayer_FieldIndex.Enabled:
                case CloudLayer_FieldIndex.XSpeed:
                case CloudLayer_FieldIndex.YSpeed:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CloudLayer_FieldIndex enu = (CloudLayer_FieldIndex)index;
            switch (enu)
            {
                case CloudLayer_FieldIndex.Enabled:
                case CloudLayer_FieldIndex.XSpeed:
                case CloudLayer_FieldIndex.YSpeed:
                case CloudLayer_FieldIndex.Colors:
                case CloudLayer_FieldIndex.Alphas:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CloudLayer_FieldIndex enu = (CloudLayer_FieldIndex)index;
            switch (enu)
            {
                case CloudLayer_FieldIndex.Enabled:
                    return "Enabled";
                case CloudLayer_FieldIndex.XSpeed:
                    return "XSpeed";
                case CloudLayer_FieldIndex.YSpeed:
                    return "YSpeed";
                case CloudLayer_FieldIndex.Colors:
                    return "Colors";
                case CloudLayer_FieldIndex.Alphas:
                    return "Alphas";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CloudLayer_FieldIndex enu = (CloudLayer_FieldIndex)index;
            switch (enu)
            {
                case CloudLayer_FieldIndex.Enabled:
                case CloudLayer_FieldIndex.XSpeed:
                case CloudLayer_FieldIndex.YSpeed:
                case CloudLayer_FieldIndex.Colors:
                case CloudLayer_FieldIndex.Alphas:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CloudLayer_FieldIndex enu = (CloudLayer_FieldIndex)index;
            switch (enu)
            {
                case CloudLayer_FieldIndex.Enabled:
                case CloudLayer_FieldIndex.XSpeed:
                case CloudLayer_FieldIndex.YSpeed:
                case CloudLayer_FieldIndex.Colors:
                case CloudLayer_FieldIndex.Alphas:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CloudLayer_FieldIndex enu = (CloudLayer_FieldIndex)index;
            switch (enu)
            {
                case CloudLayer_FieldIndex.Enabled:
                    return typeof(Boolean);
                case CloudLayer_FieldIndex.XSpeed:
                    return typeof(Single);
                case CloudLayer_FieldIndex.YSpeed:
                    return typeof(Single);
                case CloudLayer_FieldIndex.Colors:
                    return typeof(WeatherColor);
                case CloudLayer_FieldIndex.Alphas:
                    return typeof(WeatherAlpha);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(CloudLayerXmlWriteTranslation);
        public const int NumStructFields = 5;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(CloudLayerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class CloudLayerSetterCommon
    {
        public static readonly CloudLayerSetterCommon Instance = new CloudLayerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICloudLayer item)
        {
            ClearPartial();
            item.Enabled = default;
            item.XSpeed = default;
            item.YSpeed = default;
            item.Colors = null;
            item.Alphas = null;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            ICloudLayer item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CloudLayerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ICloudLayer item,
            MutagenFrame frame)
        {
        }
        
        public virtual void CopyInFromBinary(
            ICloudLayer item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class CloudLayerCommon
    {
        public static readonly CloudLayerCommon Instance = new CloudLayerCommon();

        public CloudLayer.Mask<bool> GetEqualsMask(
            ICloudLayerGetter item,
            ICloudLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CloudLayer.Mask<bool>(false);
            ((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICloudLayerGetter item,
            ICloudLayerGetter rhs,
            CloudLayer.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Enabled = item.Enabled == rhs.Enabled;
            ret.XSpeed = item.XSpeed.EqualsWithin(rhs.XSpeed);
            ret.YSpeed = item.YSpeed.EqualsWithin(rhs.YSpeed);
            ret.Colors = EqualsMaskHelper.EqualsHelper(
                item.Colors,
                rhs.Colors,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Alphas = EqualsMaskHelper.EqualsHelper(
                item.Alphas,
                rhs.Alphas,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            ICloudLayerGetter item,
            string? name = null,
            CloudLayer.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICloudLayerGetter item,
            FileGeneration fg,
            string? name = null,
            CloudLayer.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CloudLayer =>");
            }
            else
            {
                fg.AppendLine($"{name} (CloudLayer) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICloudLayerGetter item,
            FileGeneration fg,
            CloudLayer.Mask<bool>? printMask = null)
        {
            if ((printMask?.Enabled ?? true)
                && item.Enabled.TryGet(out var EnabledItem))
            {
                fg.AppendItem(EnabledItem, "Enabled");
            }
            if ((printMask?.XSpeed ?? true)
                && item.XSpeed.TryGet(out var XSpeedItem))
            {
                fg.AppendItem(XSpeedItem, "XSpeed");
            }
            if ((printMask?.YSpeed ?? true)
                && item.YSpeed.TryGet(out var YSpeedItem))
            {
                fg.AppendItem(YSpeedItem, "YSpeed");
            }
            if ((printMask?.Colors?.Overall ?? true)
                && item.Colors.TryGet(out var ColorsItem))
            {
                ColorsItem?.ToString(fg, "Colors");
            }
            if ((printMask?.Alphas?.Overall ?? true)
                && item.Alphas.TryGet(out var AlphasItem))
            {
                AlphasItem?.ToString(fg, "Alphas");
            }
        }
        
        public bool HasBeenSet(
            ICloudLayerGetter item,
            CloudLayer.Mask<bool?> checkMask)
        {
            if (checkMask.Enabled.HasValue && checkMask.Enabled.Value != (item.Enabled != null)) return false;
            if (checkMask.XSpeed.HasValue && checkMask.XSpeed.Value != (item.XSpeed != null)) return false;
            if (checkMask.YSpeed.HasValue && checkMask.YSpeed.Value != (item.YSpeed != null)) return false;
            if (checkMask.Colors?.Overall.HasValue ?? false && checkMask.Colors.Overall.Value != (item.Colors != null)) return false;
            if (checkMask.Colors?.Specific != null && (item.Colors == null || !item.Colors.HasBeenSet(checkMask.Colors.Specific))) return false;
            if (checkMask.Alphas?.Overall.HasValue ?? false && checkMask.Alphas.Overall.Value != (item.Alphas != null)) return false;
            if (checkMask.Alphas?.Specific != null && (item.Alphas == null || !item.Alphas.HasBeenSet(checkMask.Alphas.Specific))) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            ICloudLayerGetter item,
            CloudLayer.Mask<bool> mask)
        {
            mask.Enabled = (item.Enabled != null);
            mask.XSpeed = (item.XSpeed != null);
            mask.YSpeed = (item.YSpeed != null);
            var itemColors = item.Colors;
            mask.Colors = new MaskItem<bool, WeatherColor.Mask<bool>?>(itemColors != null, itemColors?.GetHasBeenSetMask());
            var itemAlphas = item.Alphas;
            mask.Alphas = new MaskItem<bool, WeatherAlpha.Mask<bool>?>(itemAlphas != null, itemAlphas?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICloudLayerGetter? lhs,
            ICloudLayerGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Enabled != rhs.Enabled) return false;
            if (!lhs.XSpeed.EqualsWithin(rhs.XSpeed)) return false;
            if (!lhs.YSpeed.EqualsWithin(rhs.YSpeed)) return false;
            if (!object.Equals(lhs.Colors, rhs.Colors)) return false;
            if (!object.Equals(lhs.Alphas, rhs.Alphas)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ICloudLayerGetter item)
        {
            var hash = new HashCode();
            if (item.Enabled.TryGet(out var Enableditem))
            {
                hash.Add(Enableditem);
            }
            if (item.XSpeed.TryGet(out var XSpeeditem))
            {
                hash.Add(XSpeeditem);
            }
            if (item.YSpeed.TryGet(out var YSpeeditem))
            {
                hash.Add(YSpeeditem);
            }
            if (item.Colors.TryGet(out var Colorsitem))
            {
                hash.Add(Colorsitem);
            }
            if (item.Alphas.TryGet(out var Alphasitem))
            {
                hash.Add(Alphasitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CloudLayer.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ICloudLayerGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(ICloudLayerGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class CloudLayerSetterTranslationCommon
    {
        public static readonly CloudLayerSetterTranslationCommon Instance = new CloudLayerSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ICloudLayer item,
            ICloudLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.Enabled) ?? true))
            {
                item.Enabled = rhs.Enabled;
            }
            if ((copyMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.XSpeed) ?? true))
            {
                item.XSpeed = rhs.XSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.YSpeed) ?? true))
            {
                item.YSpeed = rhs.YSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.Colors) ?? true))
            {
                errorMask?.PushIndex((int)CloudLayer_FieldIndex.Colors);
                try
                {
                    if(rhs.Colors.TryGet(out var rhsColors))
                    {
                        item.Colors = rhsColors.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)CloudLayer_FieldIndex.Colors));
                    }
                    else
                    {
                        item.Colors = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.Alphas) ?? true))
            {
                errorMask?.PushIndex((int)CloudLayer_FieldIndex.Alphas);
                try
                {
                    if(rhs.Alphas.TryGet(out var rhsAlphas))
                    {
                        item.Alphas = rhsAlphas.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)CloudLayer_FieldIndex.Alphas));
                    }
                    else
                    {
                        item.Alphas = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public CloudLayer DeepCopy(
            ICloudLayerGetter item,
            CloudLayer.TranslationMask? copyMask = null)
        {
            CloudLayer ret = (CloudLayer)((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public CloudLayer DeepCopy(
            ICloudLayerGetter item,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? copyMask = null)
        {
            CloudLayer ret = (CloudLayer)((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public CloudLayer DeepCopy(
            ICloudLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CloudLayer ret = (CloudLayer)((CloudLayerCommon)((ICloudLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class CloudLayer
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CloudLayer_Registration.Instance;
        public static CloudLayer_Registration Registration => CloudLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CloudLayerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CloudLayerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CloudLayerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICloudLayerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICloudLayerGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICloudLayerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CloudLayerXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static CloudLayerXmlWriteTranslation Instance = new CloudLayerXmlWriteTranslation();

        public static void WriteToNodeXml(
            ICloudLayerGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((item.Enabled != null)
                && (translationMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.Enabled) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Enabled),
                    item: item.Enabled.Value,
                    fieldIndex: (int)CloudLayer_FieldIndex.Enabled,
                    errorMask: errorMask);
            }
            if ((item.XSpeed != null)
                && (translationMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.XSpeed) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.XSpeed),
                    item: item.XSpeed.Value,
                    fieldIndex: (int)CloudLayer_FieldIndex.XSpeed,
                    errorMask: errorMask);
            }
            if ((item.YSpeed != null)
                && (translationMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.YSpeed) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.YSpeed),
                    item: item.YSpeed.Value,
                    fieldIndex: (int)CloudLayer_FieldIndex.YSpeed,
                    errorMask: errorMask);
            }
            if ((item.Colors != null)
                && (translationMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.Colors) ?? true))
            {
                if (item.Colors.TryGet(out var ColorsItem))
                {
                    ((WeatherColorXmlWriteTranslation)((IXmlItem)ColorsItem).XmlWriteTranslator).Write(
                        item: ColorsItem,
                        node: node,
                        name: nameof(item.Colors),
                        fieldIndex: (int)CloudLayer_FieldIndex.Colors,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)CloudLayer_FieldIndex.Colors));
                }
            }
            if ((item.Alphas != null)
                && (translationMask?.GetShouldTranslate((int)CloudLayer_FieldIndex.Alphas) ?? true))
            {
                if (item.Alphas.TryGet(out var AlphasItem))
                {
                    ((WeatherAlphaXmlWriteTranslation)((IXmlItem)AlphasItem).XmlWriteTranslator).Write(
                        item: AlphasItem,
                        node: node,
                        name: nameof(item.Alphas),
                        fieldIndex: (int)CloudLayer_FieldIndex.Alphas,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)CloudLayer_FieldIndex.Alphas));
                }
            }
        }

        public void Write(
            XElement node,
            ICloudLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.CloudLayer");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.CloudLayer");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICloudLayerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ICloudLayerGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ICloudLayerGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class CloudLayerXmlCreateTranslation
    {
        public readonly static CloudLayerXmlCreateTranslation Instance = new CloudLayerXmlCreateTranslation();

        public static void FillPublicXml(
            ICloudLayer item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CloudLayerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICloudLayer item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Enabled":
                    errorMask?.PushIndex((int)CloudLayer_FieldIndex.Enabled);
                    try
                    {
                        item.Enabled = BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "XSpeed":
                    errorMask?.PushIndex((int)CloudLayer_FieldIndex.XSpeed);
                    try
                    {
                        item.XSpeed = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "YSpeed":
                    errorMask?.PushIndex((int)CloudLayer_FieldIndex.YSpeed);
                    try
                    {
                        item.YSpeed = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Colors":
                    errorMask?.PushIndex((int)CloudLayer_FieldIndex.Colors);
                    try
                    {
                        item.Colors = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)CloudLayer_FieldIndex.Colors));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Alphas":
                    errorMask?.PushIndex((int)CloudLayer_FieldIndex.Alphas);
                    try
                    {
                        item.Alphas = LoquiXmlTranslation<WeatherAlpha>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)CloudLayer_FieldIndex.Alphas));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class CloudLayerXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICloudLayerGetter item,
            XElement node,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((CloudLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CloudLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICloudLayerGetter item,
            string path,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICloudLayerGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICloudLayerGetter item,
            Stream stream,
            out CloudLayer.ErrorMask errorMask,
            CloudLayer.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICloudLayerGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICloudLayerGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((CloudLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ICloudLayerGetter item,
            XElement node,
            string? name = null,
            CloudLayer.TranslationMask? translationMask = null)
        {
            ((CloudLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ICloudLayerGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((CloudLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICloudLayerGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((CloudLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CloudLayerBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static CloudLayerBinaryWriteTranslation Instance = new CloudLayerBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICloudLayerGetter item,
            MutagenWriter writer)
        {
        }

        public void Write(
            MutagenWriter writer,
            ICloudLayerGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICloudLayerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CloudLayerBinaryCreateTranslation
    {
        public readonly static CloudLayerBinaryCreateTranslation Instance = new CloudLayerBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class CloudLayerBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICloudLayerGetter item,
            MutagenWriter writer)
        {
            ((CloudLayerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class CloudLayerBinaryOverlay :
        BinaryOverlay,
        ICloudLayerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CloudLayer_Registration.Instance;
        public static CloudLayer_Registration Registration => CloudLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CloudLayerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CloudLayerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICloudLayerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICloudLayerGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICloudLayerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICloudLayerGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => CloudLayerXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CloudLayerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CloudLayerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CloudLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected CloudLayerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static CloudLayerBinaryOverlay CloudLayerFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CloudLayerBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 0x0),
                package: package);
            int offset = stream.Position;
            stream.Position += 0x0;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static CloudLayerBinaryOverlay CloudLayerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CloudLayerFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CloudLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

