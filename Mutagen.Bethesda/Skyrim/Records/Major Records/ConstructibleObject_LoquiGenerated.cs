/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class ConstructibleObject :
        SkyrimMajorRecord,
        IConstructibleObjectInternal,
        ILoquiObjectSetter<ConstructibleObject>,
        IEquatable<ConstructibleObject>,
        IEqualsMask
    {
        #region Ctor
        protected ConstructibleObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ContainerEntry>? _Items;
        public ExtendedList<ContainerEntry>? Items
        {
            get => this._Items;
            set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IContainerEntryGetter>? IConstructibleObjectGetter.Items => _Items;
        #endregion

        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IConstructibleObjectGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region CreatedObject
        public FormLinkNullable<SkyrimMajorRecord> CreatedObject { get; set; } = new FormLinkNullable<SkyrimMajorRecord>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISkyrimMajorRecordGetter> IConstructibleObjectGetter.CreatedObject => this.CreatedObject;
        #endregion
        #region WorkbenchKeyword
        public FormLinkNullable<Keyword> WorkbenchKeyword { get; set; } = new FormLinkNullable<Keyword>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IConstructibleObjectGetter.WorkbenchKeyword => this.WorkbenchKeyword;
        #endregion
        #region CreatedObjectCount
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16? _CreatedObjectCount;
        public UInt16? CreatedObjectCount
        {
            get => this._CreatedObjectCount;
            set => this._CreatedObjectCount = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IConstructibleObjectGetter.CreatedObjectCount => this.CreatedObjectCount;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ConstructibleObjectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IConstructibleObjectGetter rhs)) return false;
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ConstructibleObject obj)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ConstructibleObjectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ConstructibleObjectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new ConstructibleObject CreateFromXml(
            XElement node,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ConstructibleObject CreateFromXml(
            XElement node,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ConstructibleObject.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static ConstructibleObject CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new ConstructibleObject();
            ((ConstructibleObjectSetterCommon)((IConstructibleObjectGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ConstructibleObject CreateFromXml(
            string path,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ConstructibleObject CreateFromXml(
            string path,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ConstructibleObject CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ConstructibleObject CreateFromXml(
            Stream stream,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ConstructibleObject CreateFromXml(
            Stream stream,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ConstructibleObject CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.CreatedObject = initialValue;
                this.WorkbenchKeyword = initialValue;
                this.CreatedObjectCount = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Items,
                TItem Conditions,
                TItem CreatedObject,
                TItem WorkbenchKeyword,
                TItem CreatedObjectCount)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.CreatedObject = CreatedObject;
                this.WorkbenchKeyword = WorkbenchKeyword;
                this.CreatedObjectCount = CreatedObjectCount;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>? Items;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem CreatedObject;
            public TItem WorkbenchKeyword;
            public TItem CreatedObjectCount;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.CreatedObject, rhs.CreatedObject)) return false;
                if (!object.Equals(this.WorkbenchKeyword, rhs.WorkbenchKeyword)) return false;
                if (!object.Equals(this.CreatedObjectCount, rhs.CreatedObjectCount)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Items);
                hash.Add(this.Conditions);
                hash.Add(this.CreatedObject);
                hash.Add(this.WorkbenchKeyword);
                hash.Add(this.CreatedObjectCount);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.CreatedObject)) return false;
                if (!eval(this.WorkbenchKeyword)) return false;
                if (!eval(this.CreatedObjectCount)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.CreatedObject)) return true;
                if (eval(this.WorkbenchKeyword)) return true;
                if (eval(this.CreatedObjectCount)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ConstructibleObject.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ContainerEntry.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ContainerEntry.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.CreatedObject = eval(this.CreatedObject);
                obj.WorkbenchKeyword = eval(this.WorkbenchKeyword);
                obj.CreatedObjectCount = eval(this.CreatedObjectCount);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ConstructibleObject.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ConstructibleObject.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ConstructibleObject.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.Items?.Overall ?? true)
                        && Items.TryGet(out var ItemsItem))
                    {
                        fg.AppendLine("Items =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.CreatedObject ?? true)
                    {
                        fg.AppendItem(CreatedObject, "CreatedObject");
                    }
                    if (printMask?.WorkbenchKeyword ?? true)
                    {
                        fg.AppendItem(WorkbenchKeyword, "WorkbenchKeyword");
                    }
                    if (printMask?.CreatedObjectCount ?? true)
                    {
                        fg.AppendItem(CreatedObjectCount, "CreatedObjectCount");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>? Items;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? CreatedObject;
            public Exception? WorkbenchKeyword;
            public Exception? CreatedObjectCount;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
                switch (enu)
                {
                    case ConstructibleObject_FieldIndex.Items:
                        return Items;
                    case ConstructibleObject_FieldIndex.Conditions:
                        return Conditions;
                    case ConstructibleObject_FieldIndex.CreatedObject:
                        return CreatedObject;
                    case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                        return WorkbenchKeyword;
                    case ConstructibleObject_FieldIndex.CreatedObjectCount:
                        return CreatedObjectCount;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
                switch (enu)
                {
                    case ConstructibleObject_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case ConstructibleObject_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case ConstructibleObject_FieldIndex.CreatedObject:
                        this.CreatedObject = ex;
                        break;
                    case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                        this.WorkbenchKeyword = ex;
                        break;
                    case ConstructibleObject_FieldIndex.CreatedObjectCount:
                        this.CreatedObjectCount = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
                switch (enu)
                {
                    case ConstructibleObject_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>)obj;
                        break;
                    case ConstructibleObject_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case ConstructibleObject_FieldIndex.CreatedObject:
                        this.CreatedObject = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                        this.WorkbenchKeyword = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.CreatedObjectCount:
                        this.CreatedObjectCount = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Items != null) return true;
                if (Conditions != null) return true;
                if (CreatedObject != null) return true;
                if (WorkbenchKeyword != null) return true;
                if (CreatedObjectCount != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                if (Items.TryGet(out var ItemsItem))
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(CreatedObject, "CreatedObject");
                fg.AppendItem(WorkbenchKeyword, "WorkbenchKeyword");
                fg.AppendItem(CreatedObjectCount, "CreatedObjectCount");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.CreatedObject = this.CreatedObject.Combine(rhs.CreatedObject);
                ret.WorkbenchKeyword = this.WorkbenchKeyword.Combine(rhs.WorkbenchKeyword);
                ret.CreatedObjectCount = this.CreatedObjectCount.Combine(rhs.CreatedObjectCount);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, ContainerEntry.TranslationMask?> Items;
            public MaskItem<bool, Condition.TranslationMask?> Conditions;
            public bool CreatedObject;
            public bool WorkbenchKeyword;
            public bool CreatedObjectCount;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Items = new MaskItem<bool, ContainerEntry.TranslationMask?>(defaultOn, null);
                this.Conditions = new MaskItem<bool, Condition.TranslationMask?>(defaultOn, null);
                this.CreatedObject = defaultOn;
                this.WorkbenchKeyword = defaultOn;
                this.CreatedObjectCount = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
                ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
                ret.Add((CreatedObject, null));
                ret.Add((WorkbenchKeyword, null));
                ret.Add((CreatedObjectCount, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = ConstructibleObject_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => ConstructibleObjectCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ConstructibleObjectCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ConstructibleObjectCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ConstructibleObjectCommon.Instance.RemapLinks(this, mapping);
        public ConstructibleObject(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public ConstructibleObject(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public ConstructibleObject(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ConstructibleObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ConstructibleObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new ConstructibleObject CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static ConstructibleObject CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ConstructibleObject();
            ((ConstructibleObjectSetterCommon)((IConstructibleObjectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IConstructibleObjectGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ConstructibleObjectSetterCommon)((IConstructibleObjectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ConstructibleObject GetNew()
        {
            return new ConstructibleObject();
        }

    }
    #endregion

    #region Interface
    public partial interface IConstructibleObject :
        IConstructibleObjectGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<IConstructibleObjectInternal>
    {
        new ExtendedList<ContainerEntry>? Items { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new FormLinkNullable<SkyrimMajorRecord> CreatedObject { get; set; }
        new FormLinkNullable<Keyword> WorkbenchKeyword { get; set; }
        new UInt16? CreatedObjectCount { get; set; }
    }

    public partial interface IConstructibleObjectInternal :
        ISkyrimMajorRecordInternal,
        IConstructibleObject,
        IConstructibleObjectGetter
    {
    }

    public partial interface IConstructibleObjectGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<IConstructibleObjectGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => ConstructibleObject_Registration.Instance;
        IReadOnlyList<IContainerEntryGetter>? Items { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IFormLinkNullableGetter<ISkyrimMajorRecordGetter> CreatedObject { get; }
        IFormLinkNullableGetter<IKeywordGetter> WorkbenchKeyword { get; }
        UInt16? CreatedObjectCount { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ConstructibleObjectMixIn
    {
        public static void Clear(this IConstructibleObjectInternal item)
        {
            ((ConstructibleObjectSetterCommon)((IConstructibleObjectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ConstructibleObject.Mask<bool> GetEqualsMask(
            this IConstructibleObjectGetter item,
            IConstructibleObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IConstructibleObjectGetter item,
            string? name = null,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IConstructibleObjectGetter item,
            FileGeneration fg,
            string? name = null,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IConstructibleObjectGetter item,
            ConstructibleObject.Mask<bool?> checkMask)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ConstructibleObject.Mask<bool> GetHasBeenSetMask(this IConstructibleObjectGetter item)
        {
            var ret = new ConstructibleObject.Mask<bool>(false);
            ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IConstructibleObjectGetter item,
            IConstructibleObjectGetter rhs)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IConstructibleObjectInternal lhs,
            IConstructibleObjectGetter rhs,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ConstructibleObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IConstructibleObjectInternal lhs,
            IConstructibleObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ConstructibleObject DeepCopy(
            this IConstructibleObjectGetter item,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            return ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ConstructibleObject DeepCopy(
            this IConstructibleObjectGetter item,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            return ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ConstructibleObject DeepCopy(
            this IConstructibleObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IConstructibleObjectInternal item,
            XElement node,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IConstructibleObjectInternal item,
            XElement node,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ConstructibleObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IConstructibleObjectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ConstructibleObjectSetterCommon)((IConstructibleObjectGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IConstructibleObjectInternal item,
            string path,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IConstructibleObjectInternal item,
            string path,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IConstructibleObjectInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IConstructibleObjectInternal item,
            Stream stream,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IConstructibleObjectInternal item,
            Stream stream,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IConstructibleObjectInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ConstructibleObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IConstructibleObjectInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IConstructibleObjectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ConstructibleObjectSetterCommon)((IConstructibleObjectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum ConstructibleObject_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Items = 6,
        Conditions = 7,
        CreatedObject = 8,
        WorkbenchKeyword = 9,
        CreatedObjectCount = 10,
    }
    #endregion

    #region Registration
    public partial class ConstructibleObject_Registration : ILoquiRegistration
    {
        public static readonly ConstructibleObject_Registration Instance = new ConstructibleObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 237,
            version: 0);

        public const string GUID = "5fae010b-21e8-4528-b78f-1a4efb2cdd60";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(ConstructibleObject.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ConstructibleObject.ErrorMask);

        public static readonly Type ClassType = typeof(ConstructibleObject);

        public static readonly Type GetterType = typeof(IConstructibleObjectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IConstructibleObject);

        public static readonly Type? InternalSetterType = typeof(IConstructibleObjectInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.ConstructibleObject";

        public const string Name = "ConstructibleObject";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ITEMS":
                    return (ushort)ConstructibleObject_FieldIndex.Items;
                case "CONDITIONS":
                    return (ushort)ConstructibleObject_FieldIndex.Conditions;
                case "CREATEDOBJECT":
                    return (ushort)ConstructibleObject_FieldIndex.CreatedObject;
                case "WORKBENCHKEYWORD":
                    return (ushort)ConstructibleObject_FieldIndex.WorkbenchKeyword;
                case "CREATEDOBJECTCOUNT":
                    return (ushort)ConstructibleObject_FieldIndex.CreatedObjectCount;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
            switch (enu)
            {
                case ConstructibleObject_FieldIndex.Items:
                case ConstructibleObject_FieldIndex.Conditions:
                    return true;
                case ConstructibleObject_FieldIndex.CreatedObject:
                case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                case ConstructibleObject_FieldIndex.CreatedObjectCount:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
            switch (enu)
            {
                case ConstructibleObject_FieldIndex.Items:
                case ConstructibleObject_FieldIndex.Conditions:
                    return true;
                case ConstructibleObject_FieldIndex.CreatedObject:
                case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                case ConstructibleObject_FieldIndex.CreatedObjectCount:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
            switch (enu)
            {
                case ConstructibleObject_FieldIndex.Items:
                case ConstructibleObject_FieldIndex.Conditions:
                case ConstructibleObject_FieldIndex.CreatedObject:
                case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                case ConstructibleObject_FieldIndex.CreatedObjectCount:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
            switch (enu)
            {
                case ConstructibleObject_FieldIndex.Items:
                    return "Items";
                case ConstructibleObject_FieldIndex.Conditions:
                    return "Conditions";
                case ConstructibleObject_FieldIndex.CreatedObject:
                    return "CreatedObject";
                case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                    return "WorkbenchKeyword";
                case ConstructibleObject_FieldIndex.CreatedObjectCount:
                    return "CreatedObjectCount";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
            switch (enu)
            {
                case ConstructibleObject_FieldIndex.Items:
                case ConstructibleObject_FieldIndex.Conditions:
                case ConstructibleObject_FieldIndex.CreatedObject:
                case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                case ConstructibleObject_FieldIndex.CreatedObjectCount:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
            switch (enu)
            {
                case ConstructibleObject_FieldIndex.Items:
                case ConstructibleObject_FieldIndex.Conditions:
                case ConstructibleObject_FieldIndex.CreatedObject:
                case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                case ConstructibleObject_FieldIndex.CreatedObjectCount:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
            switch (enu)
            {
                case ConstructibleObject_FieldIndex.Items:
                    return typeof(ExtendedList<ContainerEntry>);
                case ConstructibleObject_FieldIndex.Conditions:
                    return typeof(ExtendedList<Condition>);
                case ConstructibleObject_FieldIndex.CreatedObject:
                    return typeof(FormLinkNullable<SkyrimMajorRecord>);
                case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                    return typeof(FormLinkNullable<Keyword>);
                case ConstructibleObject_FieldIndex.CreatedObjectCount:
                    return typeof(UInt16);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ConstructibleObjectXmlWriteTranslation);
        public static readonly RecordType COBJ_HEADER = new RecordType("COBJ");
        public static readonly RecordType COCT_HEADER = new RecordType("COCT");
        public static readonly RecordType CNTO_HEADER = new RecordType("CNTO");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType BNAM_HEADER = new RecordType("BNAM");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType TriggeringRecordType = COBJ_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        public static readonly Type BinaryWriteTranslation = typeof(ConstructibleObjectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ConstructibleObjectSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ConstructibleObjectSetterCommon Instance = new ConstructibleObjectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IConstructibleObjectInternal item)
        {
            ClearPartial();
            item.Items = null;
            item.Conditions.Clear();
            item.CreatedObject = null;
            item.WorkbenchKeyword = null;
            item.CreatedObjectCount = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IConstructibleObjectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IConstructibleObjectInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IConstructibleObjectInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IConstructibleObjectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ConstructibleObjectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (ConstructibleObject)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (ConstructibleObject)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => ConstructibleObject_Registration.COBJ_HEADER;
        protected static void FillBinaryStructs(
            IConstructibleObjectInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IConstructibleObjectInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54434F43: // COCT
                {
                    var amount = BinaryPrimitives.ReadInt32LittleEndian(frame.ReadSubrecordFrame().Content);
                    item.Items = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ContainerEntry>.Instance.ParsePerItem(
                            frame: frame,
                            amount: amount,
                            triggeringRecord: ConstructibleObject_Registration.CNTO_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out ContainerEntry listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<ContainerEntry>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            })
                        .ToExtendedList<ContainerEntry>();
                    return TryGet<int?>.Succeed((int)ConstructibleObject_FieldIndex.Items);
                }
                case 0x41445443: // CTDA
                {
                    ConstructibleObjectBinaryCreateTranslation.FillBinaryConditionsCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)ConstructibleObject_FieldIndex.Conditions);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.CreatedObject = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)ConstructibleObject_FieldIndex.CreatedObject);
                }
                case 0x4D414E42: // BNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.WorkbenchKeyword = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)ConstructibleObject_FieldIndex.WorkbenchKeyword);
                }
                case 0x314D414E: // NAM1
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.CreatedObjectCount = frame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)ConstructibleObject_FieldIndex.CreatedObjectCount);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            IConstructibleObjectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IConstructibleObjectInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ConstructibleObject)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ConstructibleObject)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ConstructibleObjectCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ConstructibleObjectCommon Instance = new ConstructibleObjectCommon();

        public ConstructibleObject.Mask<bool> GetEqualsMask(
            IConstructibleObjectGetter item,
            IConstructibleObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ConstructibleObject.Mask<bool>(false);
            ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IConstructibleObjectGetter item,
            IConstructibleObjectGetter rhs,
            ConstructibleObject.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.CreatedObject = object.Equals(item.CreatedObject, rhs.CreatedObject);
            ret.WorkbenchKeyword = object.Equals(item.WorkbenchKeyword, rhs.WorkbenchKeyword);
            ret.CreatedObjectCount = item.CreatedObjectCount == rhs.CreatedObjectCount;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IConstructibleObjectGetter item,
            string? name = null,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IConstructibleObjectGetter item,
            FileGeneration fg,
            string? name = null,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ConstructibleObject =>");
            }
            else
            {
                fg.AppendLine($"{name} (ConstructibleObject) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IConstructibleObjectGetter item,
            FileGeneration fg,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Items?.Overall ?? true)
                && item.Items.TryGet(out var ItemsItem))
            {
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ItemsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.CreatedObject ?? true)
                && item.CreatedObject.TryGet(out var CreatedObjectItem))
            {
                fg.AppendItem(CreatedObjectItem, "CreatedObject");
            }
            if ((printMask?.WorkbenchKeyword ?? true)
                && item.WorkbenchKeyword.TryGet(out var WorkbenchKeywordItem))
            {
                fg.AppendItem(WorkbenchKeywordItem, "WorkbenchKeyword");
            }
            if ((printMask?.CreatedObjectCount ?? true)
                && item.CreatedObjectCount.TryGet(out var CreatedObjectCountItem))
            {
                fg.AppendItem(CreatedObjectCountItem, "CreatedObjectCount");
            }
        }
        
        public bool HasBeenSet(
            IConstructibleObjectGetter item,
            ConstructibleObject.Mask<bool?> checkMask)
        {
            if (checkMask.Items?.Overall.HasValue ?? false && checkMask.Items!.Overall.Value != (item.Items != null)) return false;
            if (checkMask.CreatedObject.HasValue && checkMask.CreatedObject.Value != (item.CreatedObject.FormKey != null)) return false;
            if (checkMask.WorkbenchKeyword.HasValue && checkMask.WorkbenchKeyword.Value != (item.WorkbenchKeyword.FormKey != null)) return false;
            if (checkMask.CreatedObjectCount.HasValue && checkMask.CreatedObjectCount.Value != (item.CreatedObjectCount != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IConstructibleObjectGetter item,
            ConstructibleObject.Mask<bool> mask)
        {
            if (item.Items.TryGet(out var ItemsItem))
            {
                mask.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, ContainerEntry.Mask<bool>?>>?>(true, ItemsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, ContainerEntry.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            var ConditionsItem = item.Conditions;
            mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition.Mask<bool>?>>?>(true, ConditionsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.CreatedObject = (item.CreatedObject.FormKey != null);
            mask.WorkbenchKeyword = (item.WorkbenchKeyword.FormKey != null);
            mask.CreatedObjectCount = (item.CreatedObjectCount != null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static ConstructibleObject_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (ConstructibleObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new ConstructibleObject_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ConstructibleObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IConstructibleObjectGetter? lhs,
            IConstructibleObjectGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.Items.SequenceEqual(rhs.Items)) return false;
            if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            if (!lhs.CreatedObject.Equals(rhs.CreatedObject)) return false;
            if (!lhs.WorkbenchKeyword.Equals(rhs.WorkbenchKeyword)) return false;
            if (lhs.CreatedObjectCount != rhs.CreatedObjectCount) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IConstructibleObjectGetter?)lhs,
                rhs: rhs as IConstructibleObjectGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IConstructibleObjectGetter?)lhs,
                rhs: rhs as IConstructibleObjectGetter);
        }
        
        public virtual int GetHashCode(IConstructibleObjectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Items);
            hash.Add(item.Conditions);
            if (item.CreatedObject.TryGet(out var CreatedObjectitem))
            {
                hash.Add(CreatedObjectitem);
            }
            if (item.WorkbenchKeyword.TryGet(out var WorkbenchKeyworditem))
            {
                hash.Add(WorkbenchKeyworditem);
            }
            if (item.CreatedObjectCount.TryGet(out var CreatedObjectCountitem))
            {
                hash.Add(CreatedObjectCountitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IConstructibleObjectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IConstructibleObjectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ConstructibleObject.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IConstructibleObjectGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Items.TryGet(out var ItemsItem))
            {
                foreach (var item in ItemsItem.WhereCastable<IContainerEntryGetter, ILinkedFormKeyContainer> ()
                    .SelectMany((f) => f.LinkFormKeys))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, ILinkedFormKeyContainer> ()
                .SelectMany((f) => f.LinkFormKeys))
            {
                yield return item;
            }
            if (obj.CreatedObject.FormKey.TryGet(out var CreatedObjectKey))
            {
                yield return CreatedObjectKey;
            }
            if (obj.WorkbenchKeyword.FormKey.TryGet(out var WorkbenchKeywordKey))
            {
                yield return WorkbenchKeywordKey;
            }
            yield break;
        }
        
        public void RemapLinks(IConstructibleObjectGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(ConstructibleObject obj, ConstructibleObject rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new ConstructibleObject(getNextFormKey());
            ret.DeepCopyIn((ConstructibleObject)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (ConstructibleObject)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class ConstructibleObjectSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ConstructibleObjectSetterTranslationCommon Instance = new ConstructibleObjectSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IConstructibleObjectInternal item,
            IConstructibleObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IConstructibleObject item,
            IConstructibleObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.Items);
                try
                {
                    if ((rhs.Items != null))
                    {
                        item.Items = 
                            rhs.Items
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ContainerEntry>();
                    }
                    else
                    {
                        item.Items = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.CreatedObject) ?? true))
            {
                item.CreatedObject = rhs.CreatedObject.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.WorkbenchKeyword) ?? true))
            {
                item.WorkbenchKeyword = rhs.WorkbenchKeyword.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.CreatedObjectCount) ?? true))
            {
                item.CreatedObjectCount = rhs.CreatedObjectCount;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IConstructibleObjectInternal)item,
                rhs: (IConstructibleObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IConstructibleObject)item,
                rhs: (IConstructibleObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IConstructibleObjectInternal)item,
                rhs: (IConstructibleObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IConstructibleObject)item,
                rhs: (IConstructibleObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public ConstructibleObject DeepCopy(
            IConstructibleObjectGetter item,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            ConstructibleObject ret = (ConstructibleObject)((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ConstructibleObject DeepCopy(
            IConstructibleObjectGetter item,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            ConstructibleObject ret = (ConstructibleObject)((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ConstructibleObject DeepCopy(
            IConstructibleObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ConstructibleObject ret = (ConstructibleObject)((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class ConstructibleObject
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ConstructibleObject_Registration.Instance;
        public new static ConstructibleObject_Registration Registration => ConstructibleObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ConstructibleObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ConstructibleObjectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ConstructibleObjectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ConstructibleObjectXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ConstructibleObjectXmlWriteTranslation Instance = new ConstructibleObjectXmlWriteTranslation();

        public static void WriteToNodeXml(
            IConstructibleObjectGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Items != null)
                && (translationMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Items) ?? true))
            {
                ListXmlTranslation<IContainerEntryGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)ConstructibleObject_FieldIndex.Items,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.Items),
                    transl: (XElement subNode, IContainerEntryGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((ContainerEntryXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)ConstructibleObject_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((ConditionXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.CreatedObject.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.CreatedObject) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CreatedObject),
                    item: item.CreatedObject.FormKey.Value,
                    fieldIndex: (int)ConstructibleObject_FieldIndex.CreatedObject,
                    errorMask: errorMask);
            }
            if ((item.WorkbenchKeyword.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.WorkbenchKeyword) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.WorkbenchKeyword),
                    item: item.WorkbenchKeyword.FormKey.Value,
                    fieldIndex: (int)ConstructibleObject_FieldIndex.WorkbenchKeyword,
                    errorMask: errorMask);
            }
            if ((item.CreatedObjectCount != null)
                && (translationMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.CreatedObjectCount) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CreatedObjectCount),
                    item: item.CreatedObjectCount.Value,
                    fieldIndex: (int)ConstructibleObject_FieldIndex.CreatedObjectCount,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IConstructibleObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.ConstructibleObject");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.ConstructibleObject");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IConstructibleObjectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IConstructibleObjectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IConstructibleObjectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ConstructibleObjectXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static ConstructibleObjectXmlCreateTranslation Instance = new ConstructibleObjectXmlCreateTranslation();

        public static void FillPublicXml(
            IConstructibleObjectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ConstructibleObjectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IConstructibleObjectInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Items":
                    errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.Items);
                    try
                    {
                        if (ListXmlTranslation<ContainerEntry>.Instance.Parse(
                            node: node,
                            enumer: out var ItemsItem,
                            transl: LoquiXmlTranslation<ContainerEntry>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Items = ItemsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Items = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.Conditions);
                    try
                    {
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CreatedObject":
                    errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.CreatedObject);
                    try
                    {
                        item.CreatedObject = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WorkbenchKeyword":
                    errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.WorkbenchKeyword);
                    try
                    {
                        item.WorkbenchKeyword = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CreatedObjectCount":
                    errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.CreatedObjectCount);
                    try
                    {
                        item.CreatedObjectCount = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ConstructibleObjectXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IConstructibleObjectGetter item,
            XElement node,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ConstructibleObjectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ConstructibleObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IConstructibleObjectGetter item,
            string path,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IConstructibleObjectGetter item,
            Stream stream,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ConstructibleObjectBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ConstructibleObjectBinaryWriteTranslation Instance = new ConstructibleObjectBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            IConstructibleObjectGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            IConstructibleObjectGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IConstructibleObjectGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IContainerEntryGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Items,
                counterType: ConstructibleObject_Registration.COCT_HEADER,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IContainerEntryGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((ContainerEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            ConstructibleObjectBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CreatedObject,
                header: recordTypeConverter.ConvertToCustom(ConstructibleObject_Registration.CNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WorkbenchKeyword,
                header: recordTypeConverter.ConvertToCustom(ConstructibleObject_Registration.BNAM_HEADER));
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CreatedObjectCount,
                header: recordTypeConverter.ConvertToCustom(ConstructibleObject_Registration.NAM1_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            IConstructibleObjectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(ConstructibleObject_Registration.COBJ_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IConstructibleObjectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IConstructibleObjectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IConstructibleObjectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ConstructibleObjectBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static ConstructibleObjectBinaryCreateTranslation Instance = new ConstructibleObjectBinaryCreateTranslation();

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            IConstructibleObjectInternal item);

        public static void FillBinaryConditionsCustomPublic(
            MutagenFrame frame,
            IConstructibleObjectInternal item)
        {
            FillBinaryConditionsCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ConstructibleObjectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ConstructibleObjectBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IConstructibleObjectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ConstructibleObject_Registration.Instance;
        public new static ConstructibleObject_Registration Registration => ConstructibleObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ConstructibleObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ConstructibleObjectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IConstructibleObjectGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => ConstructibleObjectCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ConstructibleObjectCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ConstructibleObjectCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ConstructibleObjectCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ConstructibleObjectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ConstructibleObjectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ConstructibleObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ConstructibleObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public IReadOnlyList<IContainerEntryGetter>? Items { get; private set; }
        #region Conditions
        partial void ConditionsCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        #region CreatedObject
        private int? _CreatedObjectLocation;
        public bool CreatedObject_IsSet => _CreatedObjectLocation.HasValue;
        public IFormLinkNullableGetter<ISkyrimMajorRecordGetter> CreatedObject => _CreatedObjectLocation.HasValue ? new FormLinkNullable<ISkyrimMajorRecordGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _CreatedObjectLocation.Value, _package.Meta)))) : FormLinkNullable<ISkyrimMajorRecordGetter>.Null;
        #endregion
        #region WorkbenchKeyword
        private int? _WorkbenchKeywordLocation;
        public bool WorkbenchKeyword_IsSet => _WorkbenchKeywordLocation.HasValue;
        public IFormLinkNullableGetter<IKeywordGetter> WorkbenchKeyword => _WorkbenchKeywordLocation.HasValue ? new FormLinkNullable<IKeywordGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _WorkbenchKeywordLocation.Value, _package.Meta)))) : FormLinkNullable<IKeywordGetter>.Null;
        #endregion
        #region CreatedObjectCount
        private int? _CreatedObjectCountLocation;
        public UInt16? CreatedObjectCount => _CreatedObjectCountLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _CreatedObjectCountLocation.Value, _package.Meta)) : default(UInt16?);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ConstructibleObjectBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ConstructibleObjectBinaryOverlay ConstructibleObjectFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new ConstructibleObjectBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ConstructibleObjectBinaryOverlay ConstructibleObjectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ConstructibleObjectFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x54434F43: // COCT
                {
                    var count = BinaryPrimitives.ReadUInt32LittleEndian(_package.Meta.ReadSubrecordFrame(stream).Content);
                    this.Items = BinaryOverlaySetList<ContainerEntryBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => ContainerEntryBinaryOverlay.ContainerEntryFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocationsByCount(
                            stream: stream,
                            count: count,
                            trigger: ConstructibleObject_Registration.CNTO_HEADER,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)ConstructibleObject_FieldIndex.Items);
                }
                case 0x41445443: // CTDA
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return TryGet<int?>.Succeed((int)ConstructibleObject_FieldIndex.Conditions);
                }
                case 0x4D414E43: // CNAM
                {
                    _CreatedObjectLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ConstructibleObject_FieldIndex.CreatedObject);
                }
                case 0x4D414E42: // BNAM
                {
                    _WorkbenchKeywordLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ConstructibleObject_FieldIndex.WorkbenchKeyword);
                }
                case 0x314D414E: // NAM1
                {
                    _CreatedObjectCountLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ConstructibleObject_FieldIndex.CreatedObjectCount);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ConstructibleObjectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

