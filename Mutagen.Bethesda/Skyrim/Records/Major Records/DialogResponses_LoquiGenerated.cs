/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class DialogResponses :
        SkyrimMajorRecord,
        IDialogResponsesInternal,
        ILoquiObjectSetter<DialogResponses>,
        IEquatable<DialogResponses>,
        IEqualsMask
    {
        #region Ctor
        protected DialogResponses()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DialogResponseAdapter? _VirtualMachineAdapter;
        public DialogResponseAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDialogResponseAdapterGetter? IDialogResponsesGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _Unknown;
        public Byte[]? Unknown
        {
            get => this._Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogResponsesGetter.Unknown => this.Unknown;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DialogResponseFlags? _Flags;
        public DialogResponseFlags? Flags
        {
            get => _Flags;
            set => _Flags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDialogResponseFlagsGetter? IDialogResponsesGetter.Flags => this.Flags;
        #endregion
        #region Topic
        public FormLinkNullable<DialogTopic> Topic { get; set; } = new FormLinkNullable<DialogTopic>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IDialogTopicGetter> IDialogResponsesGetter.Topic => this.Topic;
        #endregion
        #region PreviousDialog
        public FormLinkNullable<DialogResponses> PreviousDialog { get; set; } = new FormLinkNullable<DialogResponses>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IDialogResponsesGetter> IDialogResponsesGetter.PreviousDialog => this.PreviousDialog;
        #endregion
        #region FavorLevel
        public FavorLevel? FavorLevel { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FavorLevel? IDialogResponsesGetter.FavorLevel => this.FavorLevel;
        #endregion
        #region LinkTo
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<IDialog>> _LinkTo = new ExtendedList<IFormLink<IDialog>>();
        public ExtendedList<IFormLink<IDialog>> LinkTo
        {
            get => this._LinkTo;
            protected set => this._LinkTo = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IDialogGetter>> IDialogResponsesGetter.LinkTo => _LinkTo;
        #endregion

        #endregion
        #region ResponseData
        public FormLinkNullable<DialogResponses> ResponseData { get; set; } = new FormLinkNullable<DialogResponses>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IDialogResponsesGetter> IDialogResponsesGetter.ResponseData => this.ResponseData;
        #endregion
        #region Responses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogResponse> _Responses = new ExtendedList<DialogResponse>();
        public ExtendedList<DialogResponse> Responses
        {
            get => this._Responses;
            protected set => this._Responses = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogResponseGetter> IDialogResponsesGetter.Responses => _Responses;
        #endregion

        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IDialogResponsesGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region UnknownData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogResponsesUnknownData> _UnknownData = new ExtendedList<DialogResponsesUnknownData>();
        public ExtendedList<DialogResponsesUnknownData> UnknownData
        {
            get => this._UnknownData;
            protected set => this._UnknownData = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogResponsesUnknownDataGetter> IDialogResponsesGetter.UnknownData => _UnknownData;
        #endregion

        #endregion
        #region Prompt
        public TranslatedString? Prompt { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString? IDialogResponsesGetter.Prompt => this.Prompt;
        #endregion
        #region Speaker
        public FormLinkNullable<Npc> Speaker { get; set; } = new FormLinkNullable<Npc>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<INpcGetter> IDialogResponsesGetter.Speaker => this.Speaker;
        #endregion
        #region WalkAwayTopic
        public FormLinkNullable<DialogTopic> WalkAwayTopic { get; set; } = new FormLinkNullable<DialogTopic>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IDialogTopicGetter> IDialogResponsesGetter.WalkAwayTopic => this.WalkAwayTopic;
        #endregion
        #region AudioOutputOverride
        public FormLinkNullable<SoundOutputModel> AudioOutputOverride { get; set; } = new FormLinkNullable<SoundOutputModel>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ISoundOutputModelGetter> IDialogResponsesGetter.AudioOutputOverride => this.AudioOutputOverride;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogResponsesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDialogResponsesGetter rhs)) return false;
            return ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(DialogResponses obj)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => DialogResponsesXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DialogResponsesXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new DialogResponses CreateFromXml(
            XElement node,
            DialogResponses.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static DialogResponses CreateFromXml(
            XElement node,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogResponses.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static DialogResponses CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new DialogResponses();
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static DialogResponses CreateFromXml(
            string path,
            DialogResponses.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static DialogResponses CreateFromXml(
            string path,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogResponses CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            DialogResponses.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static DialogResponses CreateFromXml(
            Stream stream,
            DialogResponses.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static DialogResponses CreateFromXml(
            Stream stream,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogResponses CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            DialogResponses.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, DialogResponseAdapter.Mask<TItem>?>(initialValue, new DialogResponseAdapter.Mask<TItem>(initialValue));
                this.Unknown = initialValue;
                this.Flags = new MaskItem<TItem, DialogResponseFlags.Mask<TItem>?>(initialValue, new DialogResponseFlags.Mask<TItem>(initialValue));
                this.Topic = initialValue;
                this.PreviousDialog = initialValue;
                this.FavorLevel = initialValue;
                this.LinkTo = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ResponseData = initialValue;
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.UnknownData = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>());
                this.Prompt = initialValue;
                this.Speaker = initialValue;
                this.WalkAwayTopic = initialValue;
                this.AudioOutputOverride = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem Unknown,
                TItem Flags,
                TItem Topic,
                TItem PreviousDialog,
                TItem FavorLevel,
                TItem LinkTo,
                TItem ResponseData,
                TItem Responses,
                TItem Conditions,
                TItem UnknownData,
                TItem Prompt,
                TItem Speaker,
                TItem WalkAwayTopic,
                TItem AudioOutputOverride)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, DialogResponseAdapter.Mask<TItem>?>(VirtualMachineAdapter, new DialogResponseAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Unknown = Unknown;
                this.Flags = new MaskItem<TItem, DialogResponseFlags.Mask<TItem>?>(Flags, new DialogResponseFlags.Mask<TItem>(Flags));
                this.Topic = Topic;
                this.PreviousDialog = PreviousDialog;
                this.FavorLevel = FavorLevel;
                this.LinkTo = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LinkTo, Enumerable.Empty<(int Index, TItem Value)>());
                this.ResponseData = ResponseData;
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>(Responses, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.UnknownData = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>?>(UnknownData, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>());
                this.Prompt = Prompt;
                this.Speaker = Speaker;
                this.WalkAwayTopic = WalkAwayTopic;
                this.AudioOutputOverride = AudioOutputOverride;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, DialogResponseAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Unknown;
            public MaskItem<TItem, DialogResponseFlags.Mask<TItem>?>? Flags { get; set; }
            public TItem Topic;
            public TItem PreviousDialog;
            public TItem FavorLevel;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LinkTo;
            public TItem ResponseData;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>? Responses;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>?>? UnknownData;
            public TItem Prompt;
            public TItem Speaker;
            public TItem WalkAwayTopic;
            public TItem AudioOutputOverride;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Topic, rhs.Topic)) return false;
                if (!object.Equals(this.PreviousDialog, rhs.PreviousDialog)) return false;
                if (!object.Equals(this.FavorLevel, rhs.FavorLevel)) return false;
                if (!object.Equals(this.LinkTo, rhs.LinkTo)) return false;
                if (!object.Equals(this.ResponseData, rhs.ResponseData)) return false;
                if (!object.Equals(this.Responses, rhs.Responses)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.UnknownData, rhs.UnknownData)) return false;
                if (!object.Equals(this.Prompt, rhs.Prompt)) return false;
                if (!object.Equals(this.Speaker, rhs.Speaker)) return false;
                if (!object.Equals(this.WalkAwayTopic, rhs.WalkAwayTopic)) return false;
                if (!object.Equals(this.AudioOutputOverride, rhs.AudioOutputOverride)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Unknown);
                hash.Add(this.Flags);
                hash.Add(this.Topic);
                hash.Add(this.PreviousDialog);
                hash.Add(this.FavorLevel);
                hash.Add(this.LinkTo);
                hash.Add(this.ResponseData);
                hash.Add(this.Responses);
                hash.Add(this.Conditions);
                hash.Add(this.UnknownData);
                hash.Add(this.Prompt);
                hash.Add(this.Speaker);
                hash.Add(this.WalkAwayTopic);
                hash.Add(this.AudioOutputOverride);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Unknown)) return false;
                if (Flags != null)
                {
                    if (!eval(this.Flags.Overall)) return false;
                    if (this.Flags.Specific != null && !this.Flags.Specific.All(eval)) return false;
                }
                if (!eval(this.Topic)) return false;
                if (!eval(this.PreviousDialog)) return false;
                if (!eval(this.FavorLevel)) return false;
                if (this.LinkTo != null)
                {
                    if (!eval(this.LinkTo.Overall)) return false;
                    if (this.LinkTo.Specific != null)
                    {
                        foreach (var item in this.LinkTo.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.ResponseData)) return false;
                if (this.Responses != null)
                {
                    if (!eval(this.Responses.Overall)) return false;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.UnknownData != null)
                {
                    if (!eval(this.UnknownData.Overall)) return false;
                    if (this.UnknownData.Specific != null)
                    {
                        foreach (var item in this.UnknownData.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Prompt)) return false;
                if (!eval(this.Speaker)) return false;
                if (!eval(this.WalkAwayTopic)) return false;
                if (!eval(this.AudioOutputOverride)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Unknown)) return true;
                if (Flags != null)
                {
                    if (eval(this.Flags.Overall)) return true;
                    if (this.Flags.Specific != null && this.Flags.Specific.Any(eval)) return true;
                }
                if (eval(this.Topic)) return true;
                if (eval(this.PreviousDialog)) return true;
                if (eval(this.FavorLevel)) return true;
                if (this.LinkTo != null)
                {
                    if (eval(this.LinkTo.Overall)) return true;
                    if (this.LinkTo.Specific != null)
                    {
                        foreach (var item in this.LinkTo.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.ResponseData)) return true;
                if (this.Responses != null)
                {
                    if (eval(this.Responses.Overall)) return true;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.UnknownData != null)
                {
                    if (eval(this.UnknownData.Overall)) return true;
                    if (this.UnknownData.Specific != null)
                    {
                        foreach (var item in this.UnknownData.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Prompt)) return true;
                if (eval(this.Speaker)) return true;
                if (eval(this.WalkAwayTopic)) return true;
                if (eval(this.AudioOutputOverride)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogResponses.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, DialogResponseAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Unknown = eval(this.Unknown);
                obj.Flags = this.Flags == null ? null : new MaskItem<R, DialogResponseFlags.Mask<R>?>(eval(this.Flags.Overall), this.Flags.Specific?.Translate(eval));
                obj.Topic = eval(this.Topic);
                obj.PreviousDialog = eval(this.PreviousDialog);
                obj.FavorLevel = eval(this.FavorLevel);
                if (LinkTo != null)
                {
                    obj.LinkTo = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LinkTo.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LinkTo.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LinkTo.Specific = l;
                        foreach (var item in LinkTo.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ResponseData = eval(this.ResponseData);
                if (Responses != null)
                {
                    obj.Responses = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponse.Mask<R>?>>?>(eval(this.Responses.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogResponse.Mask<R>?>>());
                    if (Responses.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogResponse.Mask<R>?>>();
                        obj.Responses.Specific = l;
                        foreach (var item in Responses.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, DialogResponse.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, DialogResponse.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (UnknownData != null)
                {
                    obj.UnknownData = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>>?>(eval(this.UnknownData.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>>());
                    if (UnknownData.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>>();
                        obj.UnknownData.Specific = l;
                        foreach (var item in UnknownData.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Prompt = eval(this.Prompt);
                obj.Speaker = eval(this.Speaker);
                obj.WalkAwayTopic = eval(this.WalkAwayTopic);
                obj.AudioOutputOverride = eval(this.AudioOutputOverride);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DialogResponses.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DialogResponses.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DialogResponses.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Flags?.Overall ?? true)
                    {
                        Flags?.ToString(fg);
                    }
                    if (printMask?.Topic ?? true)
                    {
                        fg.AppendItem(Topic, "Topic");
                    }
                    if (printMask?.PreviousDialog ?? true)
                    {
                        fg.AppendItem(PreviousDialog, "PreviousDialog");
                    }
                    if (printMask?.FavorLevel ?? true)
                    {
                        fg.AppendItem(FavorLevel, "FavorLevel");
                    }
                    if ((printMask?.LinkTo?.Overall ?? true)
                        && LinkTo.TryGet(out var LinkToItem))
                    {
                        fg.AppendLine("LinkTo =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LinkToItem.Overall);
                            if (LinkToItem.Specific != null)
                            {
                                foreach (var subItem in LinkToItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.ResponseData ?? true)
                    {
                        fg.AppendItem(ResponseData, "ResponseData");
                    }
                    if ((printMask?.Responses?.Overall ?? true)
                        && Responses.TryGet(out var ResponsesItem))
                    {
                        fg.AppendLine("Responses =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ResponsesItem.Overall);
                            if (ResponsesItem.Specific != null)
                            {
                                foreach (var subItem in ResponsesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.UnknownData?.Overall ?? true)
                        && UnknownData.TryGet(out var UnknownDataItem))
                    {
                        fg.AppendLine("UnknownData =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(UnknownDataItem.Overall);
                            if (UnknownDataItem.Specific != null)
                            {
                                foreach (var subItem in UnknownDataItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Prompt ?? true)
                    {
                        fg.AppendItem(Prompt, "Prompt");
                    }
                    if (printMask?.Speaker ?? true)
                    {
                        fg.AppendItem(Speaker, "Speaker");
                    }
                    if (printMask?.WalkAwayTopic ?? true)
                    {
                        fg.AppendItem(WalkAwayTopic, "WalkAwayTopic");
                    }
                    if (printMask?.AudioOutputOverride ?? true)
                    {
                        fg.AppendItem(AudioOutputOverride, "AudioOutputOverride");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, DialogResponseAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Unknown;
            public MaskItem<Exception?, DialogResponseFlags.ErrorMask?>? Flags;
            public Exception? Topic;
            public Exception? PreviousDialog;
            public Exception? FavorLevel;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LinkTo;
            public Exception? ResponseData;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>? Responses;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponsesUnknownData.ErrorMask?>>?>? UnknownData;
            public Exception? Prompt;
            public Exception? Speaker;
            public Exception? WalkAwayTopic;
            public Exception? AudioOutputOverride;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponses_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case DialogResponses_FieldIndex.Unknown:
                        return Unknown;
                    case DialogResponses_FieldIndex.Flags:
                        return Flags;
                    case DialogResponses_FieldIndex.Topic:
                        return Topic;
                    case DialogResponses_FieldIndex.PreviousDialog:
                        return PreviousDialog;
                    case DialogResponses_FieldIndex.FavorLevel:
                        return FavorLevel;
                    case DialogResponses_FieldIndex.LinkTo:
                        return LinkTo;
                    case DialogResponses_FieldIndex.ResponseData:
                        return ResponseData;
                    case DialogResponses_FieldIndex.Responses:
                        return Responses;
                    case DialogResponses_FieldIndex.Conditions:
                        return Conditions;
                    case DialogResponses_FieldIndex.UnknownData:
                        return UnknownData;
                    case DialogResponses_FieldIndex.Prompt:
                        return Prompt;
                    case DialogResponses_FieldIndex.Speaker:
                        return Speaker;
                    case DialogResponses_FieldIndex.WalkAwayTopic:
                        return WalkAwayTopic;
                    case DialogResponses_FieldIndex.AudioOutputOverride:
                        return AudioOutputOverride;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponses_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, DialogResponseAdapter.ErrorMask?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case DialogResponses_FieldIndex.Flags:
                        this.Flags = new MaskItem<Exception?, DialogResponseFlags.ErrorMask?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.Topic:
                        this.Topic = ex;
                        break;
                    case DialogResponses_FieldIndex.PreviousDialog:
                        this.PreviousDialog = ex;
                        break;
                    case DialogResponses_FieldIndex.FavorLevel:
                        this.FavorLevel = ex;
                        break;
                    case DialogResponses_FieldIndex.LinkTo:
                        this.LinkTo = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.ResponseData:
                        this.ResponseData = ex;
                        break;
                    case DialogResponses_FieldIndex.Responses:
                        this.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.UnknownData:
                        this.UnknownData = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponsesUnknownData.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.Prompt:
                        this.Prompt = ex;
                        break;
                    case DialogResponses_FieldIndex.Speaker:
                        this.Speaker = ex;
                        break;
                    case DialogResponses_FieldIndex.WalkAwayTopic:
                        this.WalkAwayTopic = ex;
                        break;
                    case DialogResponses_FieldIndex.AudioOutputOverride:
                        this.AudioOutputOverride = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponses_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, DialogResponseAdapter.ErrorMask?>?)obj;
                        break;
                    case DialogResponses_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.Flags:
                        this.Flags = (MaskItem<Exception?, DialogResponseFlags.ErrorMask?>?)obj;
                        break;
                    case DialogResponses_FieldIndex.Topic:
                        this.Topic = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.PreviousDialog:
                        this.PreviousDialog = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.FavorLevel:
                        this.FavorLevel = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.LinkTo:
                        this.LinkTo = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case DialogResponses_FieldIndex.ResponseData:
                        this.ResponseData = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.Responses:
                        this.Responses = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>)obj;
                        break;
                    case DialogResponses_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case DialogResponses_FieldIndex.UnknownData:
                        this.UnknownData = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponsesUnknownData.ErrorMask?>>?>)obj;
                        break;
                    case DialogResponses_FieldIndex.Prompt:
                        this.Prompt = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.Speaker:
                        this.Speaker = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.WalkAwayTopic:
                        this.WalkAwayTopic = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.AudioOutputOverride:
                        this.AudioOutputOverride = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Unknown != null) return true;
                if (Flags != null) return true;
                if (Topic != null) return true;
                if (PreviousDialog != null) return true;
                if (FavorLevel != null) return true;
                if (LinkTo != null) return true;
                if (ResponseData != null) return true;
                if (Responses != null) return true;
                if (Conditions != null) return true;
                if (UnknownData != null) return true;
                if (Prompt != null) return true;
                if (Speaker != null) return true;
                if (WalkAwayTopic != null) return true;
                if (AudioOutputOverride != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                fg.AppendItem(Unknown, "Unknown");
                Flags?.ToString(fg);
                fg.AppendItem(Topic, "Topic");
                fg.AppendItem(PreviousDialog, "PreviousDialog");
                fg.AppendItem(FavorLevel, "FavorLevel");
                if (LinkTo.TryGet(out var LinkToItem))
                {
                    fg.AppendLine("LinkTo =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LinkToItem.Overall);
                        if (LinkToItem.Specific != null)
                        {
                            foreach (var subItem in LinkToItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(ResponseData, "ResponseData");
                if (Responses.TryGet(out var ResponsesItem))
                {
                    fg.AppendLine("Responses =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ResponsesItem.Overall);
                        if (ResponsesItem.Specific != null)
                        {
                            foreach (var subItem in ResponsesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (UnknownData.TryGet(out var UnknownDataItem))
                {
                    fg.AppendLine("UnknownData =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(UnknownDataItem.Overall);
                        if (UnknownDataItem.Specific != null)
                        {
                            foreach (var subItem in UnknownDataItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Prompt, "Prompt");
                fg.AppendItem(Speaker, "Speaker");
                fg.AppendItem(WalkAwayTopic, "WalkAwayTopic");
                fg.AppendItem(AudioOutputOverride, "AudioOutputOverride");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Flags = this.Flags.Combine(rhs.Flags, (l, r) => l.Combine(r));
                ret.Topic = this.Topic.Combine(rhs.Topic);
                ret.PreviousDialog = this.PreviousDialog.Combine(rhs.PreviousDialog);
                ret.FavorLevel = this.FavorLevel.Combine(rhs.FavorLevel);
                ret.LinkTo = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.LinkTo?.Overall, rhs.LinkTo?.Overall), ExceptionExt.Combine(this.LinkTo?.Specific, rhs.LinkTo?.Specific));
                ret.ResponseData = this.ResponseData.Combine(rhs.ResponseData);
                ret.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>(ExceptionExt.Combine(this.Responses?.Overall, rhs.Responses?.Overall), ExceptionExt.Combine(this.Responses?.Specific, rhs.Responses?.Specific));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.UnknownData = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponsesUnknownData.ErrorMask?>>?>(ExceptionExt.Combine(this.UnknownData?.Overall, rhs.UnknownData?.Overall), ExceptionExt.Combine(this.UnknownData?.Specific, rhs.UnknownData?.Specific));
                ret.Prompt = this.Prompt.Combine(rhs.Prompt);
                ret.Speaker = this.Speaker.Combine(rhs.Speaker);
                ret.WalkAwayTopic = this.WalkAwayTopic.Combine(rhs.WalkAwayTopic);
                ret.AudioOutputOverride = this.AudioOutputOverride.Combine(rhs.AudioOutputOverride);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, DialogResponseAdapter.TranslationMask?> VirtualMachineAdapter;
            public bool Unknown;
            public MaskItem<bool, DialogResponseFlags.TranslationMask?> Flags;
            public bool Topic;
            public bool PreviousDialog;
            public bool FavorLevel;
            public bool LinkTo;
            public bool ResponseData;
            public MaskItem<bool, DialogResponse.TranslationMask?> Responses;
            public MaskItem<bool, Condition.TranslationMask?> Conditions;
            public MaskItem<bool, DialogResponsesUnknownData.TranslationMask?> UnknownData;
            public bool Prompt;
            public bool Speaker;
            public bool WalkAwayTopic;
            public bool AudioOutputOverride;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.VirtualMachineAdapter = new MaskItem<bool, DialogResponseAdapter.TranslationMask?>(defaultOn, null);
                this.Unknown = defaultOn;
                this.Flags = new MaskItem<bool, DialogResponseFlags.TranslationMask?>(defaultOn, null);
                this.Topic = defaultOn;
                this.PreviousDialog = defaultOn;
                this.FavorLevel = defaultOn;
                this.LinkTo = defaultOn;
                this.ResponseData = defaultOn;
                this.Responses = new MaskItem<bool, DialogResponse.TranslationMask?>(defaultOn, null);
                this.Conditions = new MaskItem<bool, Condition.TranslationMask?>(defaultOn, null);
                this.UnknownData = new MaskItem<bool, DialogResponsesUnknownData.TranslationMask?>(defaultOn, null);
                this.Prompt = defaultOn;
                this.Speaker = defaultOn;
                this.WalkAwayTopic = defaultOn;
                this.AudioOutputOverride = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter?.Overall ?? true, VirtualMachineAdapter?.Specific?.GetCrystal()));
                ret.Add((Unknown, null));
                ret.Add((Flags?.Overall ?? true, Flags?.Specific?.GetCrystal()));
                ret.Add((Topic, null));
                ret.Add((PreviousDialog, null));
                ret.Add((FavorLevel, null));
                ret.Add((LinkTo, null));
                ret.Add((ResponseData, null));
                ret.Add((Responses?.Overall ?? true, Responses?.Specific?.GetCrystal()));
                ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
                ret.Add((UnknownData?.Overall ?? true, UnknownData?.Specific?.GetCrystal()));
                ret.Add((Prompt, null));
                ret.Add((Speaker, null));
                ret.Add((WalkAwayTopic, null));
                ret.Add((AudioOutputOverride, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = DialogResponses_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => DialogResponsesCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => DialogResponsesCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogResponsesCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogResponsesCommon.Instance.RemapLinks(this, mapping);
        public DialogResponses(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public DialogResponses(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public DialogResponses(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogResponsesBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogResponsesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new DialogResponses CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static DialogResponses CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DialogResponses();
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDialogResponsesGetter)rhs, include);

        void IClearable.Clear()
        {
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DialogResponses GetNew()
        {
            return new DialogResponses();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogResponses :
        IDialogResponsesGetter,
        ISkyrimMajorRecord,
        IDialog,
        ILoquiObjectSetter<IDialogResponsesInternal>
    {
        new DialogResponseAdapter? VirtualMachineAdapter { get; set; }
        new Byte[]? Unknown { get; set; }
        new DialogResponseFlags? Flags { get; set; }
        new FormLinkNullable<DialogTopic> Topic { get; set; }
        new FormLinkNullable<DialogResponses> PreviousDialog { get; set; }
        new FavorLevel? FavorLevel { get; set; }
        new ExtendedList<IFormLink<IDialog>> LinkTo { get; }
        new FormLinkNullable<DialogResponses> ResponseData { get; set; }
        new ExtendedList<DialogResponse> Responses { get; }
        new ExtendedList<Condition> Conditions { get; }
        new ExtendedList<DialogResponsesUnknownData> UnknownData { get; }
        new TranslatedString? Prompt { get; set; }
        new FormLinkNullable<Npc> Speaker { get; set; }
        new FormLinkNullable<DialogTopic> WalkAwayTopic { get; set; }
        new FormLinkNullable<SoundOutputModel> AudioOutputOverride { get; set; }
        #region Mutagen
        new DialogResponses.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IDialogResponsesInternal :
        ISkyrimMajorRecordInternal,
        IDialogResponses,
        IDialogResponsesGetter
    {
    }

    public partial interface IDialogResponsesGetter :
        ISkyrimMajorRecordGetter,
        IDialogGetter,
        ILoquiObject<IDialogResponsesGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => DialogResponses_Registration.Instance;
        IDialogResponseAdapterGetter? VirtualMachineAdapter { get; }
        ReadOnlyMemorySlice<Byte>? Unknown { get; }
        IDialogResponseFlagsGetter? Flags { get; }
        IFormLinkNullable<IDialogTopicGetter> Topic { get; }
        IFormLinkNullable<IDialogResponsesGetter> PreviousDialog { get; }
        FavorLevel? FavorLevel { get; }
        IReadOnlyList<IFormLink<IDialogGetter>> LinkTo { get; }
        IFormLinkNullable<IDialogResponsesGetter> ResponseData { get; }
        IReadOnlyList<IDialogResponseGetter> Responses { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IReadOnlyList<IDialogResponsesUnknownDataGetter> UnknownData { get; }
        TranslatedString? Prompt { get; }
        IFormLinkNullable<INpcGetter> Speaker { get; }
        IFormLinkNullable<IDialogTopicGetter> WalkAwayTopic { get; }
        IFormLinkNullable<ISoundOutputModelGetter> AudioOutputOverride { get; }

        #region Mutagen
        DialogResponses.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class DialogResponsesMixIn
    {
        public static void Clear(this IDialogResponsesInternal item)
        {
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogResponses.Mask<bool> GetEqualsMask(
            this IDialogResponsesGetter item,
            IDialogResponsesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDialogResponsesGetter item,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDialogResponsesGetter item,
            FileGeneration fg,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IDialogResponsesGetter item,
            DialogResponses.Mask<bool?> checkMask)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static DialogResponses.Mask<bool> GetHasBeenSetMask(this IDialogResponsesGetter item)
        {
            var ret = new DialogResponses.Mask<bool>(false);
            ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IDialogResponsesGetter item,
            IDialogResponsesGetter rhs)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDialogResponsesInternal lhs,
            IDialogResponsesGetter rhs,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = DialogResponses.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogResponsesInternal lhs,
            IDialogResponsesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static DialogResponses DeepCopy(
            this IDialogResponsesGetter item,
            DialogResponses.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogResponses DeepCopy(
            this IDialogResponsesGetter item,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogResponses DeepCopy(
            this IDialogResponsesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDialogResponsesInternal item,
            XElement node,
            DialogResponses.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDialogResponsesInternal item,
            XElement node,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogResponses.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IDialogResponsesInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogResponsesInternal item,
            string path,
            DialogResponses.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogResponsesInternal item,
            string path,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogResponsesInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            DialogResponses.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IDialogResponsesInternal item,
            Stream stream,
            DialogResponses.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogResponsesInternal item,
            Stream stream,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogResponsesInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            DialogResponses.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IDialogResponsesInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IDialogResponsesInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum DialogResponses_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        Unknown = 7,
        Flags = 8,
        Topic = 9,
        PreviousDialog = 10,
        FavorLevel = 11,
        LinkTo = 12,
        ResponseData = 13,
        Responses = 14,
        Conditions = 15,
        UnknownData = 16,
        Prompt = 17,
        Speaker = 18,
        WalkAwayTopic = 19,
        AudioOutputOverride = 20,
    }
    #endregion

    #region Registration
    public partial class DialogResponses_Registration : ILoquiRegistration
    {
        public static readonly DialogResponses_Registration Instance = new DialogResponses_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 350,
            version: 0);

        public const string GUID = "39a0ccd0-da05-4f90-b32a-20fcdb7a9ea3";

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 21;

        public static readonly Type MaskType = typeof(DialogResponses.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogResponses.ErrorMask);

        public static readonly Type ClassType = typeof(DialogResponses);

        public static readonly Type GetterType = typeof(IDialogResponsesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogResponses);

        public static readonly Type? InternalSetterType = typeof(IDialogResponsesInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.DialogResponses";

        public const string Name = "DialogResponses";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VIRTUALMACHINEADAPTER":
                    return (ushort)DialogResponses_FieldIndex.VirtualMachineAdapter;
                case "UNKNOWN":
                    return (ushort)DialogResponses_FieldIndex.Unknown;
                case "FLAGS":
                    return (ushort)DialogResponses_FieldIndex.Flags;
                case "TOPIC":
                    return (ushort)DialogResponses_FieldIndex.Topic;
                case "PREVIOUSDIALOG":
                    return (ushort)DialogResponses_FieldIndex.PreviousDialog;
                case "FAVORLEVEL":
                    return (ushort)DialogResponses_FieldIndex.FavorLevel;
                case "LINKTO":
                    return (ushort)DialogResponses_FieldIndex.LinkTo;
                case "RESPONSEDATA":
                    return (ushort)DialogResponses_FieldIndex.ResponseData;
                case "RESPONSES":
                    return (ushort)DialogResponses_FieldIndex.Responses;
                case "CONDITIONS":
                    return (ushort)DialogResponses_FieldIndex.Conditions;
                case "UNKNOWNDATA":
                    return (ushort)DialogResponses_FieldIndex.UnknownData;
                case "PROMPT":
                    return (ushort)DialogResponses_FieldIndex.Prompt;
                case "SPEAKER":
                    return (ushort)DialogResponses_FieldIndex.Speaker;
                case "WALKAWAYTOPIC":
                    return (ushort)DialogResponses_FieldIndex.WalkAwayTopic;
                case "AUDIOOUTPUTOVERRIDE":
                    return (ushort)DialogResponses_FieldIndex.AudioOutputOverride;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
            switch (enu)
            {
                case DialogResponses_FieldIndex.LinkTo:
                case DialogResponses_FieldIndex.Responses:
                case DialogResponses_FieldIndex.Conditions:
                case DialogResponses_FieldIndex.UnknownData:
                    return true;
                case DialogResponses_FieldIndex.VirtualMachineAdapter:
                case DialogResponses_FieldIndex.Unknown:
                case DialogResponses_FieldIndex.Flags:
                case DialogResponses_FieldIndex.Topic:
                case DialogResponses_FieldIndex.PreviousDialog:
                case DialogResponses_FieldIndex.FavorLevel:
                case DialogResponses_FieldIndex.ResponseData:
                case DialogResponses_FieldIndex.Prompt:
                case DialogResponses_FieldIndex.Speaker:
                case DialogResponses_FieldIndex.WalkAwayTopic:
                case DialogResponses_FieldIndex.AudioOutputOverride:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
            switch (enu)
            {
                case DialogResponses_FieldIndex.VirtualMachineAdapter:
                case DialogResponses_FieldIndex.Flags:
                case DialogResponses_FieldIndex.Responses:
                case DialogResponses_FieldIndex.Conditions:
                case DialogResponses_FieldIndex.UnknownData:
                    return true;
                case DialogResponses_FieldIndex.Unknown:
                case DialogResponses_FieldIndex.Topic:
                case DialogResponses_FieldIndex.PreviousDialog:
                case DialogResponses_FieldIndex.FavorLevel:
                case DialogResponses_FieldIndex.LinkTo:
                case DialogResponses_FieldIndex.ResponseData:
                case DialogResponses_FieldIndex.Prompt:
                case DialogResponses_FieldIndex.Speaker:
                case DialogResponses_FieldIndex.WalkAwayTopic:
                case DialogResponses_FieldIndex.AudioOutputOverride:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
            switch (enu)
            {
                case DialogResponses_FieldIndex.VirtualMachineAdapter:
                case DialogResponses_FieldIndex.Unknown:
                case DialogResponses_FieldIndex.Flags:
                case DialogResponses_FieldIndex.Topic:
                case DialogResponses_FieldIndex.PreviousDialog:
                case DialogResponses_FieldIndex.FavorLevel:
                case DialogResponses_FieldIndex.LinkTo:
                case DialogResponses_FieldIndex.ResponseData:
                case DialogResponses_FieldIndex.Responses:
                case DialogResponses_FieldIndex.Conditions:
                case DialogResponses_FieldIndex.UnknownData:
                case DialogResponses_FieldIndex.Prompt:
                case DialogResponses_FieldIndex.Speaker:
                case DialogResponses_FieldIndex.WalkAwayTopic:
                case DialogResponses_FieldIndex.AudioOutputOverride:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
            switch (enu)
            {
                case DialogResponses_FieldIndex.VirtualMachineAdapter:
                    return "VirtualMachineAdapter";
                case DialogResponses_FieldIndex.Unknown:
                    return "Unknown";
                case DialogResponses_FieldIndex.Flags:
                    return "Flags";
                case DialogResponses_FieldIndex.Topic:
                    return "Topic";
                case DialogResponses_FieldIndex.PreviousDialog:
                    return "PreviousDialog";
                case DialogResponses_FieldIndex.FavorLevel:
                    return "FavorLevel";
                case DialogResponses_FieldIndex.LinkTo:
                    return "LinkTo";
                case DialogResponses_FieldIndex.ResponseData:
                    return "ResponseData";
                case DialogResponses_FieldIndex.Responses:
                    return "Responses";
                case DialogResponses_FieldIndex.Conditions:
                    return "Conditions";
                case DialogResponses_FieldIndex.UnknownData:
                    return "UnknownData";
                case DialogResponses_FieldIndex.Prompt:
                    return "Prompt";
                case DialogResponses_FieldIndex.Speaker:
                    return "Speaker";
                case DialogResponses_FieldIndex.WalkAwayTopic:
                    return "WalkAwayTopic";
                case DialogResponses_FieldIndex.AudioOutputOverride:
                    return "AudioOutputOverride";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
            switch (enu)
            {
                case DialogResponses_FieldIndex.VirtualMachineAdapter:
                case DialogResponses_FieldIndex.Unknown:
                case DialogResponses_FieldIndex.Flags:
                case DialogResponses_FieldIndex.Topic:
                case DialogResponses_FieldIndex.PreviousDialog:
                case DialogResponses_FieldIndex.FavorLevel:
                case DialogResponses_FieldIndex.LinkTo:
                case DialogResponses_FieldIndex.ResponseData:
                case DialogResponses_FieldIndex.Responses:
                case DialogResponses_FieldIndex.Conditions:
                case DialogResponses_FieldIndex.UnknownData:
                case DialogResponses_FieldIndex.Prompt:
                case DialogResponses_FieldIndex.Speaker:
                case DialogResponses_FieldIndex.WalkAwayTopic:
                case DialogResponses_FieldIndex.AudioOutputOverride:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
            switch (enu)
            {
                case DialogResponses_FieldIndex.VirtualMachineAdapter:
                case DialogResponses_FieldIndex.Unknown:
                case DialogResponses_FieldIndex.Flags:
                case DialogResponses_FieldIndex.Topic:
                case DialogResponses_FieldIndex.PreviousDialog:
                case DialogResponses_FieldIndex.FavorLevel:
                case DialogResponses_FieldIndex.LinkTo:
                case DialogResponses_FieldIndex.ResponseData:
                case DialogResponses_FieldIndex.Responses:
                case DialogResponses_FieldIndex.Conditions:
                case DialogResponses_FieldIndex.UnknownData:
                case DialogResponses_FieldIndex.Prompt:
                case DialogResponses_FieldIndex.Speaker:
                case DialogResponses_FieldIndex.WalkAwayTopic:
                case DialogResponses_FieldIndex.AudioOutputOverride:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
            switch (enu)
            {
                case DialogResponses_FieldIndex.VirtualMachineAdapter:
                    return typeof(DialogResponseAdapter);
                case DialogResponses_FieldIndex.Unknown:
                    return typeof(Byte[]);
                case DialogResponses_FieldIndex.Flags:
                    return typeof(DialogResponseFlags);
                case DialogResponses_FieldIndex.Topic:
                    return typeof(FormLinkNullable<DialogTopic>);
                case DialogResponses_FieldIndex.PreviousDialog:
                    return typeof(FormLinkNullable<DialogResponses>);
                case DialogResponses_FieldIndex.FavorLevel:
                    return typeof(FavorLevel);
                case DialogResponses_FieldIndex.LinkTo:
                    return typeof(ExtendedList<IFormLink<IDialog>>);
                case DialogResponses_FieldIndex.ResponseData:
                    return typeof(FormLinkNullable<DialogResponses>);
                case DialogResponses_FieldIndex.Responses:
                    return typeof(ExtendedList<DialogResponse>);
                case DialogResponses_FieldIndex.Conditions:
                    return typeof(ExtendedList<Condition>);
                case DialogResponses_FieldIndex.UnknownData:
                    return typeof(ExtendedList<DialogResponsesUnknownData>);
                case DialogResponses_FieldIndex.Prompt:
                    return typeof(TranslatedString);
                case DialogResponses_FieldIndex.Speaker:
                    return typeof(FormLinkNullable<Npc>);
                case DialogResponses_FieldIndex.WalkAwayTopic:
                    return typeof(FormLinkNullable<DialogTopic>);
                case DialogResponses_FieldIndex.AudioOutputOverride:
                    return typeof(FormLinkNullable<SoundOutputModel>);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(DialogResponsesXmlWriteTranslation);
        public static readonly RecordType INFO_HEADER = new RecordType("INFO");
        public static readonly RecordType VMAD_HEADER = new RecordType("VMAD");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType TPIC_HEADER = new RecordType("TPIC");
        public static readonly RecordType PNAM_HEADER = new RecordType("PNAM");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType TCLT_HEADER = new RecordType("TCLT");
        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType TRDT_HEADER = new RecordType("TRDT");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType QNAM_HEADER = new RecordType("QNAM");
        public static readonly RecordType NEXT_HEADER = new RecordType("NEXT");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType TWAT_HEADER = new RecordType("TWAT");
        public static readonly RecordType ONAM_HEADER = new RecordType("ONAM");
        public static readonly RecordType TriggeringRecordType = INFO_HEADER;
        public static readonly Type BinaryWriteTranslation = typeof(DialogResponsesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class DialogResponsesSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly DialogResponsesSetterCommon Instance = new DialogResponsesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogResponsesInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Unknown = default;
            item.Flags = null;
            item.Topic = FormLinkNullable<DialogTopic>.Null;
            item.PreviousDialog = FormLinkNullable<DialogResponses>.Null;
            item.FavorLevel = default;
            item.LinkTo.Clear();
            item.ResponseData = FormLinkNullable<DialogResponses>.Null;
            item.Responses.Clear();
            item.Conditions.Clear();
            item.UnknownData.Clear();
            item.Prompt = default;
            item.Speaker = FormLinkNullable<Npc>.Null;
            item.WalkAwayTopic = FormLinkNullable<DialogTopic>.Null;
            item.AudioOutputOverride = FormLinkNullable<SoundOutputModel>.Null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IDialogResponsesInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDialogResponsesInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IDialogResponsesInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IDialogResponsesInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    DialogResponsesXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (DialogResponses)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (DialogResponses)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogResponsesInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IDialogResponsesInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: DialogResponsesBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DialogResponsesBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (DialogResponses)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (DialogResponses)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class DialogResponsesCommon : SkyrimMajorRecordCommon
    {
        public new static readonly DialogResponsesCommon Instance = new DialogResponsesCommon();

        public DialogResponses.Mask<bool> GetEqualsMask(
            IDialogResponsesGetter item,
            IDialogResponsesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogResponses.Mask<bool>(false);
            ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogResponsesGetter item,
            IDialogResponsesGetter rhs,
            DialogResponses.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Unknown = MemorySliceExt.Equal(item.Unknown, rhs.Unknown);
            ret.Flags = EqualsMaskHelper.EqualsHelper(
                item.Flags,
                rhs.Flags,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Topic = object.Equals(item.Topic, rhs.Topic);
            ret.PreviousDialog = object.Equals(item.PreviousDialog, rhs.PreviousDialog);
            ret.FavorLevel = item.FavorLevel == rhs.FavorLevel;
            ret.LinkTo = item.LinkTo.CollectionEqualsHelper(
                rhs.LinkTo,
                (l, r) => object.Equals(l, r),
                include);
            ret.ResponseData = object.Equals(item.ResponseData, rhs.ResponseData);
            ret.Responses = item.Responses.CollectionEqualsHelper(
                rhs.Responses,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.UnknownData = item.UnknownData.CollectionEqualsHelper(
                rhs.UnknownData,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Prompt = string.Equals(item.Prompt, rhs.Prompt);
            ret.Speaker = object.Equals(item.Speaker, rhs.Speaker);
            ret.WalkAwayTopic = object.Equals(item.WalkAwayTopic, rhs.WalkAwayTopic);
            ret.AudioOutputOverride = object.Equals(item.AudioOutputOverride, rhs.AudioOutputOverride);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IDialogResponsesGetter item,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDialogResponsesGetter item,
            FileGeneration fg,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DialogResponses =>");
            }
            else
            {
                fg.AppendLine($"{name} (DialogResponses) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDialogResponsesGetter item,
            FileGeneration fg,
            DialogResponses.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if ((printMask?.Unknown ?? true)
                && item.Unknown.TryGet(out var UnknownItem))
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(UnknownItem)}");
            }
            if ((printMask?.Flags?.Overall ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                FlagsItem?.ToString(fg, "Flags");
            }
            if ((printMask?.Topic ?? true)
                && item.Topic.TryGet(out var TopicItem))
            {
                fg.AppendItem(TopicItem, "Topic");
            }
            if ((printMask?.PreviousDialog ?? true)
                && item.PreviousDialog.TryGet(out var PreviousDialogItem))
            {
                fg.AppendItem(PreviousDialogItem, "PreviousDialog");
            }
            if ((printMask?.FavorLevel ?? true)
                && item.FavorLevel.TryGet(out var FavorLevelItem))
            {
                fg.AppendItem(FavorLevelItem, "FavorLevel");
            }
            if (printMask?.LinkTo?.Overall ?? true)
            {
                fg.AppendLine("LinkTo =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.LinkTo)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.ResponseData ?? true)
                && item.ResponseData.TryGet(out var ResponseDataItem))
            {
                fg.AppendItem(ResponseDataItem, "ResponseData");
            }
            if (printMask?.Responses?.Overall ?? true)
            {
                fg.AppendLine("Responses =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Responses)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.UnknownData?.Overall ?? true)
            {
                fg.AppendLine("UnknownData =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.UnknownData)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Prompt ?? true)
                && item.Prompt.TryGet(out var PromptItem))
            {
                fg.AppendItem(PromptItem, "Prompt");
            }
            if ((printMask?.Speaker ?? true)
                && item.Speaker.TryGet(out var SpeakerItem))
            {
                fg.AppendItem(SpeakerItem, "Speaker");
            }
            if ((printMask?.WalkAwayTopic ?? true)
                && item.WalkAwayTopic.TryGet(out var WalkAwayTopicItem))
            {
                fg.AppendItem(WalkAwayTopicItem, "WalkAwayTopic");
            }
            if ((printMask?.AudioOutputOverride ?? true)
                && item.AudioOutputOverride.TryGet(out var AudioOutputOverrideItem))
            {
                fg.AppendItem(AudioOutputOverrideItem, "AudioOutputOverride");
            }
        }
        
        public bool HasBeenSet(
            IDialogResponsesGetter item,
            DialogResponses.Mask<bool?> checkMask)
        {
            if (checkMask.VirtualMachineAdapter?.Overall.HasValue ?? false && checkMask.VirtualMachineAdapter.Overall.Value != (item.VirtualMachineAdapter != null)) return false;
            if (checkMask.VirtualMachineAdapter?.Specific != null && (item.VirtualMachineAdapter == null || !item.VirtualMachineAdapter.HasBeenSet(checkMask.VirtualMachineAdapter.Specific))) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != (item.Unknown != null)) return false;
            if (checkMask.Flags?.Overall.HasValue ?? false && checkMask.Flags.Overall.Value != (item.Flags != null)) return false;
            if (checkMask.Flags?.Specific != null && (item.Flags == null || !item.Flags.HasBeenSet(checkMask.Flags.Specific))) return false;
            if (checkMask.Topic.HasValue && checkMask.Topic.Value != (item.Topic.FormKey != null)) return false;
            if (checkMask.PreviousDialog.HasValue && checkMask.PreviousDialog.Value != (item.PreviousDialog.FormKey != null)) return false;
            if (checkMask.FavorLevel.HasValue && checkMask.FavorLevel.Value != (item.FavorLevel != null)) return false;
            if (checkMask.ResponseData.HasValue && checkMask.ResponseData.Value != (item.ResponseData.FormKey != null)) return false;
            if (checkMask.Prompt.HasValue && checkMask.Prompt.Value != (item.Prompt != null)) return false;
            if (checkMask.Speaker.HasValue && checkMask.Speaker.Value != (item.Speaker.FormKey != null)) return false;
            if (checkMask.WalkAwayTopic.HasValue && checkMask.WalkAwayTopic.Value != (item.WalkAwayTopic.FormKey != null)) return false;
            if (checkMask.AudioOutputOverride.HasValue && checkMask.AudioOutputOverride.Value != (item.AudioOutputOverride.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IDialogResponsesGetter item,
            DialogResponses.Mask<bool> mask)
        {
            var itemVirtualMachineAdapter = item.VirtualMachineAdapter;
            mask.VirtualMachineAdapter = new MaskItem<bool, DialogResponseAdapter.Mask<bool>?>(itemVirtualMachineAdapter != null, itemVirtualMachineAdapter?.GetHasBeenSetMask());
            mask.Unknown = (item.Unknown != null);
            var itemFlags = item.Flags;
            mask.Flags = new MaskItem<bool, DialogResponseFlags.Mask<bool>?>(itemFlags != null, itemFlags?.GetHasBeenSetMask());
            mask.Topic = (item.Topic.FormKey != null);
            mask.PreviousDialog = (item.PreviousDialog.FormKey != null);
            mask.FavorLevel = (item.FavorLevel != null);
            mask.LinkTo = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            mask.ResponseData = (item.ResponseData.FormKey != null);
            var ResponsesItem = item.Responses;
            mask.Responses = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, DialogResponse.Mask<bool>?>>?>(true, ResponsesItem.WithIndex().Select((i) => new MaskItemIndexed<bool, DialogResponse.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            var ConditionsItem = item.Conditions;
            mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition.Mask<bool>?>>?>(true, ConditionsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            var UnknownDataItem = item.UnknownData;
            mask.UnknownData = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, DialogResponsesUnknownData.Mask<bool>?>>?>(true, UnknownDataItem.WithIndex().Select((i) => new MaskItemIndexed<bool, DialogResponsesUnknownData.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Prompt = (item.Prompt != null);
            mask.Speaker = (item.Speaker.FormKey != null);
            mask.WalkAwayTopic = (item.WalkAwayTopic.FormKey != null);
            mask.AudioOutputOverride = (item.AudioOutputOverride.FormKey != null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static DialogResponses_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogResponses_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (DialogResponses_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (DialogResponses_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (DialogResponses_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (DialogResponses_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (DialogResponses_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new DialogResponses_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogResponses_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DialogResponses_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (DialogResponses_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogResponses_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogResponsesGetter? lhs,
            IDialogResponsesGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!MemorySliceExt.Equal(lhs.Unknown, rhs.Unknown)) return false;
            if (!object.Equals(lhs.Flags, rhs.Flags)) return false;
            if (!lhs.Topic.Equals(rhs.Topic)) return false;
            if (!lhs.PreviousDialog.Equals(rhs.PreviousDialog)) return false;
            if (lhs.FavorLevel != rhs.FavorLevel) return false;
            if (!lhs.LinkTo.SequenceEqual(rhs.LinkTo)) return false;
            if (!lhs.ResponseData.Equals(rhs.ResponseData)) return false;
            if (!lhs.Responses.SequenceEqual(rhs.Responses)) return false;
            if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            if (!lhs.UnknownData.SequenceEqual(rhs.UnknownData)) return false;
            if (!string.Equals(lhs.Prompt, rhs.Prompt)) return false;
            if (!lhs.Speaker.Equals(rhs.Speaker)) return false;
            if (!lhs.WalkAwayTopic.Equals(rhs.WalkAwayTopic)) return false;
            if (!lhs.AudioOutputOverride.Equals(rhs.AudioOutputOverride)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDialogResponsesGetter?)lhs,
                rhs: rhs as IDialogResponsesGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDialogResponsesGetter?)lhs,
                rhs: rhs as IDialogResponsesGetter);
        }
        
        public virtual int GetHashCode(IDialogResponsesGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            if (item.Unknown.TryGet(out var UnknownItem))
            {
                hash.Add(UnknownItem);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            if (item.Topic.TryGet(out var Topicitem))
            {
                hash.Add(Topicitem);
            }
            if (item.PreviousDialog.TryGet(out var PreviousDialogitem))
            {
                hash.Add(PreviousDialogitem);
            }
            if (item.FavorLevel.TryGet(out var FavorLevelitem))
            {
                hash.Add(FavorLevelitem);
            }
            hash.Add(item.LinkTo);
            if (item.ResponseData.TryGet(out var ResponseDataitem))
            {
                hash.Add(ResponseDataitem);
            }
            hash.Add(item.Responses);
            hash.Add(item.Conditions);
            hash.Add(item.UnknownData);
            if (item.Prompt.TryGet(out var Promptitem))
            {
                hash.Add(Promptitem);
            }
            if (item.Speaker.TryGet(out var Speakeritem))
            {
                hash.Add(Speakeritem);
            }
            if (item.WalkAwayTopic.TryGet(out var WalkAwayTopicitem))
            {
                hash.Add(WalkAwayTopicitem);
            }
            if (item.AudioOutputOverride.TryGet(out var AudioOutputOverrideitem))
            {
                hash.Add(AudioOutputOverrideitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogResponsesGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogResponsesGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DialogResponses.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IDialogResponsesGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is ILinkedFormKeyContainer VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Topic.FormKey.TryGet(out var TopicKey))
            {
                yield return TopicKey;
            }
            if (obj.PreviousDialog.FormKey.TryGet(out var PreviousDialogKey))
            {
                yield return PreviousDialogKey;
            }
            foreach (var item in obj.LinkTo.Select(f => f.FormKey))
            {
                yield return item;
            }
            if (obj.ResponseData.FormKey.TryGet(out var ResponseDataKey))
            {
                yield return ResponseDataKey;
            }
            foreach (var item in obj.Responses.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, ILinkedFormKeyContainer> ()
                .SelectMany((f) => f.LinkFormKeys))
            {
                yield return item;
            }
            foreach (var item in obj.UnknownData.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            if (obj.Speaker.FormKey.TryGet(out var SpeakerKey))
            {
                yield return SpeakerKey;
            }
            if (obj.WalkAwayTopic.FormKey.TryGet(out var WalkAwayTopicKey))
            {
                yield return WalkAwayTopicKey;
            }
            if (obj.AudioOutputOverride.FormKey.TryGet(out var AudioOutputOverrideKey))
            {
                yield return AudioOutputOverrideKey;
            }
            yield break;
        }
        
        public void RemapLinks(IDialogResponsesGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(DialogResponses obj, DialogResponses rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new DialogResponses(getNextFormKey());
            ret.DeepCopyIn((DialogResponses)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (DialogResponses)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class DialogResponsesSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly DialogResponsesSetterTranslationCommon Instance = new DialogResponsesSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IDialogResponsesInternal item,
            IDialogResponsesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IDialogResponses item,
            IDialogResponsesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponses_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Unknown) ?? true))
            {
                if(rhs.Unknown.TryGet(out var Unknownrhs))
                {
                    item.Unknown = Unknownrhs.ToArray();
                }
                else
                {
                    item.Unknown = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Flags) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.Flags);
                try
                {
                    if(rhs.Flags.TryGet(out var rhsFlags))
                    {
                        item.Flags = rhsFlags.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponses_FieldIndex.Flags));
                    }
                    else
                    {
                        item.Flags = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Topic) ?? true))
            {
                item.Topic = rhs.Topic.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.PreviousDialog) ?? true))
            {
                item.PreviousDialog = rhs.PreviousDialog.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.FavorLevel) ?? true))
            {
                item.FavorLevel = rhs.FavorLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.LinkTo) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.LinkTo);
                try
                {
                    item.LinkTo.SetTo(
                        rhs.LinkTo
                        .Select(r => (IFormLink<IDialog>)new FormLink<IDialog>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.ResponseData) ?? true))
            {
                item.ResponseData = rhs.ResponseData.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Responses) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.Responses);
                try
                {
                    item.Responses.SetTo(
                        rhs.Responses
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.UnknownData) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.UnknownData);
                try
                {
                    item.UnknownData.SetTo(
                        rhs.UnknownData
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Prompt) ?? true))
            {
                item.Prompt = rhs.Prompt;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Speaker) ?? true))
            {
                item.Speaker = rhs.Speaker.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.WalkAwayTopic) ?? true))
            {
                item.WalkAwayTopic = rhs.WalkAwayTopic.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.AudioOutputOverride) ?? true))
            {
                item.AudioOutputOverride = rhs.AudioOutputOverride.FormKey;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogResponsesInternal)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogResponses)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogResponsesInternal)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogResponses)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public DialogResponses DeepCopy(
            IDialogResponsesGetter item,
            DialogResponses.TranslationMask? copyMask = null)
        {
            DialogResponses ret = (DialogResponses)((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public DialogResponses DeepCopy(
            IDialogResponsesGetter item,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? copyMask = null)
        {
            DialogResponses ret = (DialogResponses)((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public DialogResponses DeepCopy(
            IDialogResponsesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogResponses ret = (DialogResponses)((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class DialogResponses
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponses_Registration.Instance;
        public new static DialogResponses_Registration Registration => DialogResponses_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogResponsesCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DialogResponsesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogResponsesSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DialogResponsesXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static DialogResponsesXmlWriteTranslation Instance = new DialogResponsesXmlWriteTranslation();

        public static void WriteToNodeXml(
            IDialogResponsesGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.VirtualMachineAdapter != null)
                && (translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
                {
                    ((DialogResponseAdapterXmlWriteTranslation)((IXmlItem)VirtualMachineAdapterItem).XmlWriteTranslator).Write(
                        item: VirtualMachineAdapterItem,
                        node: node,
                        name: nameof(item.VirtualMachineAdapter),
                        fieldIndex: (int)DialogResponses_FieldIndex.VirtualMachineAdapter,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)DialogResponses_FieldIndex.VirtualMachineAdapter));
                }
            }
            if ((item.Unknown != null)
                && (translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown.Value,
                    fieldIndex: (int)DialogResponses_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((item.Flags != null)
                && (translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Flags) ?? true))
            {
                if (item.Flags.TryGet(out var FlagsItem))
                {
                    ((DialogResponseFlagsXmlWriteTranslation)((IXmlItem)FlagsItem).XmlWriteTranslator).Write(
                        item: FlagsItem,
                        node: node,
                        name: nameof(item.Flags),
                        fieldIndex: (int)DialogResponses_FieldIndex.Flags,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)DialogResponses_FieldIndex.Flags));
                }
            }
            if ((item.Topic.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Topic) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Topic),
                    item: item.Topic.FormKey.Value,
                    fieldIndex: (int)DialogResponses_FieldIndex.Topic,
                    errorMask: errorMask);
            }
            if ((item.PreviousDialog.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.PreviousDialog) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PreviousDialog),
                    item: item.PreviousDialog.FormKey.Value,
                    fieldIndex: (int)DialogResponses_FieldIndex.PreviousDialog,
                    errorMask: errorMask);
            }
            if ((item.FavorLevel != null)
                && (translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.FavorLevel) ?? true))
            {
                EnumXmlTranslation<FavorLevel>.Instance.Write(
                    node: node,
                    name: nameof(item.FavorLevel),
                    item: item.FavorLevel,
                    fieldIndex: (int)DialogResponses_FieldIndex.FavorLevel,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.LinkTo) ?? true))
            {
                ListXmlTranslation<IFormLink<IDialogGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.LinkTo),
                    item: item.LinkTo,
                    fieldIndex: (int)DialogResponses_FieldIndex.LinkTo,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogResponses_FieldIndex.LinkTo),
                    transl: (XElement subNode, IFormLink<IDialogGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.ResponseData.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.ResponseData) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ResponseData),
                    item: item.ResponseData.FormKey.Value,
                    fieldIndex: (int)DialogResponses_FieldIndex.ResponseData,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Responses) ?? true))
            {
                ListXmlTranslation<IDialogResponseGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Responses),
                    item: item.Responses,
                    fieldIndex: (int)DialogResponses_FieldIndex.Responses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogResponses_FieldIndex.Responses),
                    transl: (XElement subNode, IDialogResponseGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((DialogResponseXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)DialogResponses_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogResponses_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((ConditionXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.UnknownData) ?? true))
            {
                ListXmlTranslation<IDialogResponsesUnknownDataGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.UnknownData),
                    item: item.UnknownData,
                    fieldIndex: (int)DialogResponses_FieldIndex.UnknownData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogResponses_FieldIndex.UnknownData),
                    transl: (XElement subNode, IDialogResponsesUnknownDataGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((DialogResponsesUnknownDataXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.Prompt != null)
                && (translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Prompt) ?? true))
            {
                Mutagen.Bethesda.Xml.TranslatedStringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Prompt),
                    item: item.Prompt,
                    fieldIndex: (int)DialogResponses_FieldIndex.Prompt,
                    errorMask: errorMask);
            }
            if ((item.Speaker.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Speaker) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Speaker),
                    item: item.Speaker.FormKey.Value,
                    fieldIndex: (int)DialogResponses_FieldIndex.Speaker,
                    errorMask: errorMask);
            }
            if ((item.WalkAwayTopic.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.WalkAwayTopic) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.WalkAwayTopic),
                    item: item.WalkAwayTopic.FormKey.Value,
                    fieldIndex: (int)DialogResponses_FieldIndex.WalkAwayTopic,
                    errorMask: errorMask);
            }
            if ((item.AudioOutputOverride.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.AudioOutputOverride) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AudioOutputOverride),
                    item: item.AudioOutputOverride.FormKey.Value,
                    fieldIndex: (int)DialogResponses_FieldIndex.AudioOutputOverride,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IDialogResponsesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.DialogResponses");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.DialogResponses");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class DialogResponsesXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static DialogResponsesXmlCreateTranslation Instance = new DialogResponsesXmlCreateTranslation();

        public static void FillPublicXml(
            IDialogResponsesInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DialogResponsesXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IDialogResponsesInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "VirtualMachineAdapter":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.VirtualMachineAdapter);
                    try
                    {
                        item.VirtualMachineAdapter = LoquiXmlTranslation<DialogResponseAdapter>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)DialogResponses_FieldIndex.VirtualMachineAdapter));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.Flags);
                    try
                    {
                        item.Flags = LoquiXmlTranslation<DialogResponseFlags>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)DialogResponses_FieldIndex.Flags));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Topic":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.Topic);
                    try
                    {
                        item.Topic = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PreviousDialog":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.PreviousDialog);
                    try
                    {
                        item.PreviousDialog = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FavorLevel":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.FavorLevel);
                    try
                    {
                        item.FavorLevel = EnumXmlTranslation<FavorLevel>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LinkTo":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.LinkTo);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<IDialog>>.Instance.Parse(
                            node: node,
                            enumer: out var LinkToItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.LinkTo.SetTo(LinkToItem);
                        }
                        else
                        {
                            item.LinkTo.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ResponseData":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.ResponseData);
                    try
                    {
                        item.ResponseData = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Responses":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.Responses);
                    try
                    {
                        if (ListXmlTranslation<DialogResponse>.Instance.Parse(
                            node: node,
                            enumer: out var ResponsesItem,
                            transl: LoquiXmlTranslation<DialogResponse>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Responses.SetTo(ResponsesItem);
                        }
                        else
                        {
                            item.Responses.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.Conditions);
                    try
                    {
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnknownData":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.UnknownData);
                    try
                    {
                        if (ListXmlTranslation<DialogResponsesUnknownData>.Instance.Parse(
                            node: node,
                            enumer: out var UnknownDataItem,
                            transl: LoquiXmlTranslation<DialogResponsesUnknownData>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.UnknownData.SetTo(UnknownDataItem);
                        }
                        else
                        {
                            item.UnknownData.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Prompt":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.Prompt);
                    try
                    {
                        item.Prompt = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Speaker":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.Speaker);
                    try
                    {
                        item.Speaker = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WalkAwayTopic":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.WalkAwayTopic);
                    try
                    {
                        item.WalkAwayTopic = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AudioOutputOverride":
                    errorMask?.PushIndex((int)DialogResponses_FieldIndex.AudioOutputOverride);
                    try
                    {
                        item.AudioOutputOverride = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class DialogResponsesXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IDialogResponsesGetter item,
            XElement node,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogResponsesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogResponses.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IDialogResponsesGetter item,
            string path,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDialogResponsesGetter item,
            Stream stream,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DialogResponsesBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static DialogResponsesBinaryWriteTranslation Instance = new DialogResponsesBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            IDialogResponsesGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            IDialogResponsesGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IDialogResponsesGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((DialogResponseAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown,
                header: recordTypeConverter.ConvertToCustom(DialogResponses_Registration.DATA_HEADER));
            if (item.Flags.TryGet(out var FlagsItem))
            {
                ((DialogResponseFlagsBinaryWriteTranslation)((IBinaryItem)FlagsItem).BinaryWriteTranslator).Write(
                    item: FlagsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Topic,
                header: recordTypeConverter.ConvertToCustom(DialogResponses_Registration.TPIC_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PreviousDialog,
                header: recordTypeConverter.ConvertToCustom(DialogResponses_Registration.PNAM_HEADER));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<FavorLevel>.Instance.WriteNullable(
                writer,
                item.FavorLevel,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(DialogResponses_Registration.CNAM_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IDialogGetter>>.Instance.Write(
                writer: writer,
                items: item.LinkTo,
                transl: (MutagenWriter subWriter, IFormLink<IDialogGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(DialogResponses_Registration.TCLT_HEADER));
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ResponseData,
                header: recordTypeConverter.ConvertToCustom(DialogResponses_Registration.DNAM_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IDialogResponseGetter>.Instance.Write(
                writer: writer,
                items: item.Responses,
                transl: (MutagenWriter subWriter, IDialogResponseGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((DialogResponseBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            DialogResponsesBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IDialogResponsesUnknownDataGetter>.Instance.Write(
                writer: writer,
                items: item.UnknownData,
                transl: (MutagenWriter subWriter, IDialogResponsesUnknownDataGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((DialogResponsesUnknownDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Prompt,
                header: recordTypeConverter.ConvertToCustom(DialogResponses_Registration.RNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Speaker,
                header: recordTypeConverter.ConvertToCustom(DialogResponses_Registration.ANAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WalkAwayTopic,
                header: recordTypeConverter.ConvertToCustom(DialogResponses_Registration.TWAT_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AudioOutputOverride,
                header: recordTypeConverter.ConvertToCustom(DialogResponses_Registration.ONAM_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            IDialogResponsesGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(DialogResponses_Registration.INFO_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class DialogResponsesBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static DialogResponsesBinaryCreateTranslation Instance = new DialogResponsesBinaryCreateTranslation();

        public override RecordType RecordType => DialogResponses_Registration.INFO_HEADER;
        public static void FillBinaryStructs(
            IDialogResponsesInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IDialogResponsesInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x44414D56: // VMAD
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.DialogResponseAdapter.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.VirtualMachineAdapter);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Unknown = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.Unknown);
                }
                case 0x4D414E45: // ENAM
                {
                    item.Flags = Mutagen.Bethesda.Skyrim.DialogResponseFlags.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.Flags);
                }
                case 0x43495054: // TPIC
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Topic = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.Topic);
                }
                case 0x4D414E50: // PNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PreviousDialog = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.PreviousDialog);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FavorLevel = EnumBinaryTranslation<FavorLevel>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.FavorLevel);
                }
                case 0x544C4354: // TCLT
                {
                    item.LinkTo.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IDialog>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: DialogResponses_Registration.TCLT_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.LinkTo);
                }
                case 0x4D414E44: // DNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ResponseData = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.ResponseData);
                }
                case 0x54445254: // TRDT
                {
                    item.Responses.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<DialogResponse>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: DialogResponses_Registration.TRDT_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out DialogResponse listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<DialogResponse>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.Responses);
                }
                case 0x41445443: // CTDA
                {
                    DialogResponsesBinaryCreateTranslation.FillBinaryConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.Conditions);
                }
                case 0x52484353: // SCHR
                case 0x4D414E51: // QNAM
                case 0x5458454E: // NEXT
                {
                    item.UnknownData.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<DialogResponsesUnknownData>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: DialogResponsesUnknownData_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out DialogResponsesUnknownData listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<DialogResponsesUnknownData>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.UnknownData);
                }
                case 0x4D414E52: // RNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Prompt = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.Prompt);
                }
                case 0x4D414E41: // ANAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Speaker = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.Speaker);
                }
                case 0x54415754: // TWAT
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WalkAwayTopic = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.WalkAwayTopic);
                }
                case 0x4D414E4F: // ONAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AudioOutputOverride = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.AudioOutputOverride);
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            IDialogResponsesInternal item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class DialogResponsesBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DialogResponsesBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IDialogResponsesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponses_Registration.Instance;
        public new static DialogResponses_Registration Registration => DialogResponses_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogResponsesCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogResponsesSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDialogResponsesGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => DialogResponsesCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => DialogResponsesCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogResponsesCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogResponsesCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => DialogResponsesXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DialogResponsesXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogResponsesBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogResponsesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public DialogResponses.MajorFlag MajorFlags => (DialogResponses.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IDialogResponseAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? DialogResponseAdapterBinaryOverlay.DialogResponseAdapterFactory(new BinaryMemoryReadStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min)), _package) : default;
        public bool VirtualMachineAdapter_IsSet => _VirtualMachineAdapterLocation.HasValue;
        #endregion
        #region Unknown
        private int? _UnknownLocation;
        public ReadOnlyMemorySlice<Byte>? Unknown => _UnknownLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _UnknownLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Flags
        private RangeInt32? _FlagsLocation;
        public IDialogResponseFlagsGetter? Flags => _FlagsLocation.HasValue ? DialogResponseFlagsBinaryOverlay.DialogResponseFlagsFactory(new BinaryMemoryReadStream(_data.Slice(_FlagsLocation!.Value.Min)), _package) : default;
        public bool Flags_IsSet => _FlagsLocation.HasValue;
        #endregion
        #region Topic
        private int? _TopicLocation;
        public bool Topic_IsSet => _TopicLocation.HasValue;
        public IFormLinkNullable<IDialogTopicGetter> Topic => _TopicLocation.HasValue ? new FormLinkNullable<IDialogTopicGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _TopicLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IDialogTopicGetter>.Null;
        #endregion
        #region PreviousDialog
        private int? _PreviousDialogLocation;
        public bool PreviousDialog_IsSet => _PreviousDialogLocation.HasValue;
        public IFormLinkNullable<IDialogResponsesGetter> PreviousDialog => _PreviousDialogLocation.HasValue ? new FormLinkNullable<IDialogResponsesGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PreviousDialogLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IDialogResponsesGetter>.Null;
        #endregion
        #region FavorLevel
        private int? _FavorLevelLocation;
        public FavorLevel? FavorLevel => _FavorLevelLocation.HasValue ? (FavorLevel)HeaderTranslation.ExtractSubrecordSpan(_data, _FavorLevelLocation!.Value, _package.MetaData.Constants)[0] : default(FavorLevel?);
        #endregion
        public IReadOnlyList<IFormLink<IDialogGetter>> LinkTo { get; private set; } = ListExt.Empty<IFormLink<IDialogGetter>>();
        #region ResponseData
        private int? _ResponseDataLocation;
        public bool ResponseData_IsSet => _ResponseDataLocation.HasValue;
        public IFormLinkNullable<IDialogResponsesGetter> ResponseData => _ResponseDataLocation.HasValue ? new FormLinkNullable<IDialogResponsesGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ResponseDataLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IDialogResponsesGetter>.Null;
        #endregion
        public IReadOnlyList<IDialogResponseGetter> Responses { get; private set; } = ListExt.Empty<DialogResponseBinaryOverlay>();
        #region Conditions
        partial void ConditionsCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        public IReadOnlyList<IDialogResponsesUnknownDataGetter> UnknownData { get; private set; } = ListExt.Empty<DialogResponsesUnknownDataBinaryOverlay>();
        #region Prompt
        private int? _PromptLocation;
        public TranslatedString? Prompt => _PromptLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _PromptLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Speaker
        private int? _SpeakerLocation;
        public bool Speaker_IsSet => _SpeakerLocation.HasValue;
        public IFormLinkNullable<INpcGetter> Speaker => _SpeakerLocation.HasValue ? new FormLinkNullable<INpcGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _SpeakerLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<INpcGetter>.Null;
        #endregion
        #region WalkAwayTopic
        private int? _WalkAwayTopicLocation;
        public bool WalkAwayTopic_IsSet => _WalkAwayTopicLocation.HasValue;
        public IFormLinkNullable<IDialogTopicGetter> WalkAwayTopic => _WalkAwayTopicLocation.HasValue ? new FormLinkNullable<IDialogTopicGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _WalkAwayTopicLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IDialogTopicGetter>.Null;
        #endregion
        #region AudioOutputOverride
        private int? _AudioOutputOverrideLocation;
        public bool AudioOutputOverride_IsSet => _AudioOutputOverrideLocation.HasValue;
        public IFormLinkNullable<ISoundOutputModelGetter> AudioOutputOverride => _AudioOutputOverrideLocation.HasValue ? new FormLinkNullable<ISoundOutputModelGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _AudioOutputOverrideLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISoundOutputModelGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogResponsesBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static DialogResponsesBinaryOverlay DialogResponsesFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.MetaData.Constants);
            var ret = new DialogResponsesBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static DialogResponsesBinaryOverlay DialogResponsesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return DialogResponsesFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x44414D56: // VMAD
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.VirtualMachineAdapter);
                }
                case 0x41544144: // DATA
                {
                    _UnknownLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.Unknown);
                }
                case 0x4D414E45: // ENAM
                {
                    _FlagsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.Flags);
                }
                case 0x43495054: // TPIC
                {
                    _TopicLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.Topic);
                }
                case 0x4D414E50: // PNAM
                {
                    _PreviousDialogLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.PreviousDialog);
                }
                case 0x4D414E43: // CNAM
                {
                    _FavorLevelLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.FavorLevel);
                }
                case 0x544C4354: // TCLT
                {
                    this.LinkTo = BinaryOverlayList<IFormLink<IDialogGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IDialogGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.LinkTo);
                }
                case 0x4D414E44: // DNAM
                {
                    _ResponseDataLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.ResponseData);
                }
                case 0x54445254: // TRDT
                {
                    this.Responses = this.ParseRepeatedTypelessSubrecord<DialogResponseBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: DialogResponses_Registration.TRDT_HEADER,
                        factory:  DialogResponseBinaryOverlay.DialogResponseFactory);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.Responses);
                }
                case 0x41445443: // CTDA
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.Conditions);
                }
                case 0x52484353: // SCHR
                case 0x4D414E51: // QNAM
                case 0x5458454E: // NEXT
                {
                    this.UnknownData = this.ParseRepeatedTypelessSubrecord<DialogResponsesUnknownDataBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: DialogResponsesUnknownData_Registration.TriggeringRecordTypes,
                        factory:  DialogResponsesUnknownDataBinaryOverlay.DialogResponsesUnknownDataFactory);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.UnknownData);
                }
                case 0x4D414E52: // RNAM
                {
                    _PromptLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.Prompt);
                }
                case 0x4D414E41: // ANAM
                {
                    _SpeakerLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.Speaker);
                }
                case 0x54415754: // TWAT
                {
                    _WalkAwayTopicLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.WalkAwayTopic);
                }
                case 0x4D414E4F: // ONAM
                {
                    _AudioOutputOverrideLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogResponses_FieldIndex.AudioOutputOverride);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogResponsesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

