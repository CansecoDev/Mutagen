/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class DialogTopic :
        SkyrimMajorRecord,
        IDialogTopicInternal,
        ILoquiObjectSetter<DialogTopic>,
        IEquatable<DialogTopic>,
        IEqualsMask
    {
        #region Ctor
        protected DialogTopic()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString? IDialogTopicGetter.Name => this.Name;
        #endregion
        #region Priority
        public Single Priority { get; set; } = default;
        #endregion
        #region Branch
        public FormLinkNullable<DialogBranch> Branch { get; set; } = new FormLinkNullable<DialogBranch>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IDialogBranchGetter> IDialogTopicGetter.Branch => this.Branch;
        #endregion
        #region Quest
        public FormLinkNullable<Quest> Quest { get; set; } = new FormLinkNullable<Quest>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IQuestGetter> IDialogTopicGetter.Quest => this.Quest;
        #endregion
        #region TopicFlags
        public DialogTopic.TopicFlag TopicFlags { get; set; } = default;
        #endregion
        #region Category
        public DialogTopic.CategoryEnum Category { get; set; } = default;
        #endregion
        #region Subtype
        public DialogTopic.SubtypeEnum Subtype { get; set; } = default;
        #endregion
        #region SubtypeName
        public RecordType SubtypeName { get; set; } = RecordType.Null;
        #endregion
        #region Timestamp
        public Int32 Timestamp { get; set; } = default;
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default;
        #endregion
        #region Responses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogResponses> _Responses = new ExtendedList<DialogResponses>();
        public ExtendedList<DialogResponses> Responses
        {
            get => this._Responses;
            protected set => this._Responses = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogResponsesGetter> IDialogTopicGetter.Responses => _Responses;
        #endregion

        #endregion
        #region DATADataTypeState
        public DialogTopic.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogTopicMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDialogTopicGetter rhs)) return false;
            return ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(DialogTopic obj)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => DialogTopicXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DialogTopicXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new DialogTopic CreateFromXml(
            XElement node,
            DialogTopic.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static DialogTopic CreateFromXml(
            XElement node,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogTopic.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static DialogTopic CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new DialogTopic();
            ((DialogTopicSetterCommon)((IDialogTopicGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static DialogTopic CreateFromXml(
            string path,
            DialogTopic.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static DialogTopic CreateFromXml(
            string path,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogTopic CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            DialogTopic.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static DialogTopic CreateFromXml(
            Stream stream,
            DialogTopic.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static DialogTopic CreateFromXml(
            Stream stream,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogTopic CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            DialogTopic.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Priority = initialValue;
                this.Branch = initialValue;
                this.Quest = initialValue;
                this.TopicFlags = initialValue;
                this.Category = initialValue;
                this.Subtype = initialValue;
                this.SubtypeName = initialValue;
                this.Timestamp = initialValue;
                this.Unknown = initialValue;
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponses.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponses.Mask<TItem>?>>());
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Name,
                TItem Priority,
                TItem Branch,
                TItem Quest,
                TItem TopicFlags,
                TItem Category,
                TItem Subtype,
                TItem SubtypeName,
                TItem Timestamp,
                TItem Unknown,
                TItem Responses,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.Priority = Priority;
                this.Branch = Branch;
                this.Quest = Quest;
                this.TopicFlags = TopicFlags;
                this.Category = Category;
                this.Subtype = Subtype;
                this.SubtypeName = SubtypeName;
                this.Timestamp = Timestamp;
                this.Unknown = Unknown;
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponses.Mask<TItem>?>>?>(Responses, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponses.Mask<TItem>?>>());
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Priority;
            public TItem Branch;
            public TItem Quest;
            public TItem TopicFlags;
            public TItem Category;
            public TItem Subtype;
            public TItem SubtypeName;
            public TItem Timestamp;
            public TItem Unknown;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponses.Mask<TItem>?>>?>? Responses;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Priority, rhs.Priority)) return false;
                if (!object.Equals(this.Branch, rhs.Branch)) return false;
                if (!object.Equals(this.Quest, rhs.Quest)) return false;
                if (!object.Equals(this.TopicFlags, rhs.TopicFlags)) return false;
                if (!object.Equals(this.Category, rhs.Category)) return false;
                if (!object.Equals(this.Subtype, rhs.Subtype)) return false;
                if (!object.Equals(this.SubtypeName, rhs.SubtypeName)) return false;
                if (!object.Equals(this.Timestamp, rhs.Timestamp)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Responses, rhs.Responses)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Priority);
                hash.Add(this.Branch);
                hash.Add(this.Quest);
                hash.Add(this.TopicFlags);
                hash.Add(this.Category);
                hash.Add(this.Subtype);
                hash.Add(this.SubtypeName);
                hash.Add(this.Timestamp);
                hash.Add(this.Unknown);
                hash.Add(this.Responses);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Priority)) return false;
                if (!eval(this.Branch)) return false;
                if (!eval(this.Quest)) return false;
                if (!eval(this.TopicFlags)) return false;
                if (!eval(this.Category)) return false;
                if (!eval(this.Subtype)) return false;
                if (!eval(this.SubtypeName)) return false;
                if (!eval(this.Timestamp)) return false;
                if (!eval(this.Unknown)) return false;
                if (this.Responses != null)
                {
                    if (!eval(this.Responses.Overall)) return false;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Priority)) return true;
                if (eval(this.Branch)) return true;
                if (eval(this.Quest)) return true;
                if (eval(this.TopicFlags)) return true;
                if (eval(this.Category)) return true;
                if (eval(this.Subtype)) return true;
                if (eval(this.SubtypeName)) return true;
                if (eval(this.Timestamp)) return true;
                if (eval(this.Unknown)) return true;
                if (this.Responses != null)
                {
                    if (eval(this.Responses.Overall)) return true;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogTopic.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Priority = eval(this.Priority);
                obj.Branch = eval(this.Branch);
                obj.Quest = eval(this.Quest);
                obj.TopicFlags = eval(this.TopicFlags);
                obj.Category = eval(this.Category);
                obj.Subtype = eval(this.Subtype);
                obj.SubtypeName = eval(this.SubtypeName);
                obj.Timestamp = eval(this.Timestamp);
                obj.Unknown = eval(this.Unknown);
                if (Responses != null)
                {
                    obj.Responses = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponses.Mask<R>?>>?>(eval(this.Responses.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogResponses.Mask<R>?>>());
                    if (Responses.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogResponses.Mask<R>?>>();
                        obj.Responses.Specific = l;
                        foreach (var item in Responses.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, DialogResponses.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, DialogResponses.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DialogTopic.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DialogTopic.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DialogTopic.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Priority ?? true)
                    {
                        fg.AppendItem(Priority, "Priority");
                    }
                    if (printMask?.Branch ?? true)
                    {
                        fg.AppendItem(Branch, "Branch");
                    }
                    if (printMask?.Quest ?? true)
                    {
                        fg.AppendItem(Quest, "Quest");
                    }
                    if (printMask?.TopicFlags ?? true)
                    {
                        fg.AppendItem(TopicFlags, "TopicFlags");
                    }
                    if (printMask?.Category ?? true)
                    {
                        fg.AppendItem(Category, "Category");
                    }
                    if (printMask?.Subtype ?? true)
                    {
                        fg.AppendItem(Subtype, "Subtype");
                    }
                    if (printMask?.SubtypeName ?? true)
                    {
                        fg.AppendItem(SubtypeName, "SubtypeName");
                    }
                    if (printMask?.Timestamp ?? true)
                    {
                        fg.AppendItem(Timestamp, "Timestamp");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if ((printMask?.Responses?.Overall ?? true)
                        && Responses.TryGet(out var ResponsesItem))
                    {
                        fg.AppendLine("Responses =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ResponsesItem.Overall);
                            if (ResponsesItem.Specific != null)
                            {
                                foreach (var subItem in ResponsesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Priority;
            public Exception? Branch;
            public Exception? Quest;
            public Exception? TopicFlags;
            public Exception? Category;
            public Exception? Subtype;
            public Exception? SubtypeName;
            public Exception? Timestamp;
            public Exception? Unknown;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponses.ErrorMask?>>?>? Responses;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
                switch (enu)
                {
                    case DialogTopic_FieldIndex.Name:
                        return Name;
                    case DialogTopic_FieldIndex.Priority:
                        return Priority;
                    case DialogTopic_FieldIndex.Branch:
                        return Branch;
                    case DialogTopic_FieldIndex.Quest:
                        return Quest;
                    case DialogTopic_FieldIndex.TopicFlags:
                        return TopicFlags;
                    case DialogTopic_FieldIndex.Category:
                        return Category;
                    case DialogTopic_FieldIndex.Subtype:
                        return Subtype;
                    case DialogTopic_FieldIndex.SubtypeName:
                        return SubtypeName;
                    case DialogTopic_FieldIndex.Timestamp:
                        return Timestamp;
                    case DialogTopic_FieldIndex.Unknown:
                        return Unknown;
                    case DialogTopic_FieldIndex.Responses:
                        return Responses;
                    case DialogTopic_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
                switch (enu)
                {
                    case DialogTopic_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case DialogTopic_FieldIndex.Priority:
                        this.Priority = ex;
                        break;
                    case DialogTopic_FieldIndex.Branch:
                        this.Branch = ex;
                        break;
                    case DialogTopic_FieldIndex.Quest:
                        this.Quest = ex;
                        break;
                    case DialogTopic_FieldIndex.TopicFlags:
                        this.TopicFlags = ex;
                        break;
                    case DialogTopic_FieldIndex.Category:
                        this.Category = ex;
                        break;
                    case DialogTopic_FieldIndex.Subtype:
                        this.Subtype = ex;
                        break;
                    case DialogTopic_FieldIndex.SubtypeName:
                        this.SubtypeName = ex;
                        break;
                    case DialogTopic_FieldIndex.Timestamp:
                        this.Timestamp = ex;
                        break;
                    case DialogTopic_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case DialogTopic_FieldIndex.Responses:
                        this.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponses.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogTopic_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
                switch (enu)
                {
                    case DialogTopic_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Priority:
                        this.Priority = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Branch:
                        this.Branch = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Quest:
                        this.Quest = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.TopicFlags:
                        this.TopicFlags = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Category:
                        this.Category = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Subtype:
                        this.Subtype = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.SubtypeName:
                        this.SubtypeName = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Timestamp:
                        this.Timestamp = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Responses:
                        this.Responses = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponses.ErrorMask?>>?>)obj;
                        break;
                    case DialogTopic_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Priority != null) return true;
                if (Branch != null) return true;
                if (Quest != null) return true;
                if (TopicFlags != null) return true;
                if (Category != null) return true;
                if (Subtype != null) return true;
                if (SubtypeName != null) return true;
                if (Timestamp != null) return true;
                if (Unknown != null) return true;
                if (Responses != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Priority, "Priority");
                fg.AppendItem(Branch, "Branch");
                fg.AppendItem(Quest, "Quest");
                fg.AppendItem(TopicFlags, "TopicFlags");
                fg.AppendItem(Category, "Category");
                fg.AppendItem(Subtype, "Subtype");
                fg.AppendItem(SubtypeName, "SubtypeName");
                fg.AppendItem(Timestamp, "Timestamp");
                fg.AppendItem(Unknown, "Unknown");
                if (Responses.TryGet(out var ResponsesItem))
                {
                    fg.AppendLine("Responses =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ResponsesItem.Overall);
                        if (ResponsesItem.Specific != null)
                        {
                            foreach (var subItem in ResponsesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Priority = this.Priority.Combine(rhs.Priority);
                ret.Branch = this.Branch.Combine(rhs.Branch);
                ret.Quest = this.Quest.Combine(rhs.Quest);
                ret.TopicFlags = this.TopicFlags.Combine(rhs.TopicFlags);
                ret.Category = this.Category.Combine(rhs.Category);
                ret.Subtype = this.Subtype.Combine(rhs.Subtype);
                ret.SubtypeName = this.SubtypeName.Combine(rhs.SubtypeName);
                ret.Timestamp = this.Timestamp.Combine(rhs.Timestamp);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponses.ErrorMask?>>?>(ExceptionExt.Combine(this.Responses?.Overall, rhs.Responses?.Overall), ExceptionExt.Combine(this.Responses?.Specific, rhs.Responses?.Specific));
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Priority;
            public bool Branch;
            public bool Quest;
            public bool TopicFlags;
            public bool Category;
            public bool Subtype;
            public bool SubtypeName;
            public bool Timestamp;
            public bool Unknown;
            public MaskItem<bool, DialogResponses.TranslationMask?> Responses;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Priority = defaultOn;
                this.Branch = defaultOn;
                this.Quest = defaultOn;
                this.TopicFlags = defaultOn;
                this.Category = defaultOn;
                this.Subtype = defaultOn;
                this.SubtypeName = defaultOn;
                this.Timestamp = defaultOn;
                this.Unknown = defaultOn;
                this.Responses = new MaskItem<bool, DialogResponses.TranslationMask?>(defaultOn, null);
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Priority, null));
                ret.Add((Branch, null));
                ret.Add((Quest, null));
                ret.Add((TopicFlags, null));
                ret.Add((Category, null));
                ret.Add((Subtype, null));
                ret.Add((SubtypeName, null));
                ret.Add((Timestamp, null));
                ret.Add((Unknown, null));
                ret.Add((Responses?.Overall ?? true, Responses?.Specific?.GetCrystal()));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = DialogTopic_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => DialogTopicCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => DialogTopicCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogTopicCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogTopicCommon.Instance.RemapLinks(this, mapping);
        public DialogTopic(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public DialogTopic(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public DialogTopic(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [Flags]
        public enum DATADataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogTopicBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogTopicBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new DialogTopic CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static DialogTopic CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DialogTopic();
            ((DialogTopicSetterCommon)((IDialogTopicGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDialogTopicGetter)rhs, include);

        void IClearable.Clear()
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DialogTopic GetNew()
        {
            return new DialogTopic();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogTopic :
        IDialogTopicGetter,
        ISkyrimMajorRecord,
        ITranslatedNamed,
        IDialog,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<IDialogTopicInternal>
    {
        new TranslatedString? Name { get; set; }
        new Single Priority { get; set; }
        new FormLinkNullable<DialogBranch> Branch { get; set; }
        new FormLinkNullable<Quest> Quest { get; set; }
        new DialogTopic.TopicFlag TopicFlags { get; set; }
        new DialogTopic.CategoryEnum Category { get; set; }
        new DialogTopic.SubtypeEnum Subtype { get; set; }
        new RecordType SubtypeName { get; set; }
        new Int32 Timestamp { get; set; }
        new Int32 Unknown { get; set; }
        new ExtendedList<DialogResponses> Responses { get; }
        new DialogTopic.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IDialogTopicInternal :
        ISkyrimMajorRecordInternal,
        IDialogTopic,
        IDialogTopicGetter
    {
    }

    public partial interface IDialogTopicGetter :
        ISkyrimMajorRecordGetter,
        ITranslatedNamedGetter,
        IDialogGetter,
        IMajorRecordGetterEnumerable,
        ILoquiObject<IDialogTopicGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => DialogTopic_Registration.Instance;
        TranslatedString? Name { get; }
        Single Priority { get; }
        IFormLinkNullable<IDialogBranchGetter> Branch { get; }
        IFormLinkNullable<IQuestGetter> Quest { get; }
        DialogTopic.TopicFlag TopicFlags { get; }
        DialogTopic.CategoryEnum Category { get; }
        DialogTopic.SubtypeEnum Subtype { get; }
        RecordType SubtypeName { get; }
        Int32 Timestamp { get; }
        Int32 Unknown { get; }
        IReadOnlyList<IDialogResponsesGetter> Responses { get; }
        DialogTopic.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogTopicMixIn
    {
        public static void Clear(this IDialogTopicInternal item)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogTopic.Mask<bool> GetEqualsMask(
            this IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDialogTopicGetter item,
            string? name = null,
            DialogTopic.Mask<bool>? printMask = null)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDialogTopicGetter item,
            FileGeneration fg,
            string? name = null,
            DialogTopic.Mask<bool>? printMask = null)
        {
            ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IDialogTopicGetter item,
            DialogTopic.Mask<bool?> checkMask)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static DialogTopic.Mask<bool> GetHasBeenSetMask(this IDialogTopicGetter item)
        {
            var ret = new DialogTopic.Mask<bool>(false);
            ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IDialogTopicGetter item,
            IDialogTopicGetter rhs)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDialogTopicInternal lhs,
            IDialogTopicGetter rhs,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = DialogTopic.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogTopicInternal lhs,
            IDialogTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static DialogTopic DeepCopy(
            this IDialogTopicGetter item,
            DialogTopic.TranslationMask? copyMask = null)
        {
            return ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogTopic DeepCopy(
            this IDialogTopicGetter item,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? copyMask = null)
        {
            return ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogTopic DeepCopy(
            this IDialogTopicGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            XElement node,
            DialogTopic.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            XElement node,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogTopic.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            string path,
            DialogTopic.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            string path,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            DialogTopic.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            Stream stream,
            DialogTopic.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            Stream stream,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogTopicInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            DialogTopic.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this IDialogTopicGetter obj)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IDialogTopicGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)obj).CommonInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this IDialogTopicInternal obj)
        {
            return ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IDialogTopicInternal obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IDialogTopicInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IDialogTopicInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum DialogTopic_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Name = 6,
        Priority = 7,
        Branch = 8,
        Quest = 9,
        TopicFlags = 10,
        Category = 11,
        Subtype = 12,
        SubtypeName = 13,
        Timestamp = 14,
        Unknown = 15,
        Responses = 16,
        DATADataTypeState = 17,
    }
    #endregion

    #region Registration
    public partial class DialogTopic_Registration : ILoquiRegistration
    {
        public static readonly DialogTopic_Registration Instance = new DialogTopic_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 314,
            version: 0);

        public const string GUID = "29f5de6a-ecd3-4ce8-8ffb-b443aad13295";

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(DialogTopic.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogTopic.ErrorMask);

        public static readonly Type ClassType = typeof(DialogTopic);

        public static readonly Type GetterType = typeof(IDialogTopicGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogTopic);

        public static readonly Type? InternalSetterType = typeof(IDialogTopicInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.DialogTopic";

        public const string Name = "DialogTopic";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)DialogTopic_FieldIndex.Name;
                case "PRIORITY":
                    return (ushort)DialogTopic_FieldIndex.Priority;
                case "BRANCH":
                    return (ushort)DialogTopic_FieldIndex.Branch;
                case "QUEST":
                    return (ushort)DialogTopic_FieldIndex.Quest;
                case "TOPICFLAGS":
                    return (ushort)DialogTopic_FieldIndex.TopicFlags;
                case "CATEGORY":
                    return (ushort)DialogTopic_FieldIndex.Category;
                case "SUBTYPE":
                    return (ushort)DialogTopic_FieldIndex.Subtype;
                case "SUBTYPENAME":
                    return (ushort)DialogTopic_FieldIndex.SubtypeName;
                case "TIMESTAMP":
                    return (ushort)DialogTopic_FieldIndex.Timestamp;
                case "UNKNOWN":
                    return (ushort)DialogTopic_FieldIndex.Unknown;
                case "RESPONSES":
                    return (ushort)DialogTopic_FieldIndex.Responses;
                case "DATADATATYPESTATE":
                    return (ushort)DialogTopic_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Responses:
                    return true;
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.Priority:
                case DialogTopic_FieldIndex.Branch:
                case DialogTopic_FieldIndex.Quest:
                case DialogTopic_FieldIndex.TopicFlags:
                case DialogTopic_FieldIndex.Category:
                case DialogTopic_FieldIndex.Subtype:
                case DialogTopic_FieldIndex.SubtypeName:
                case DialogTopic_FieldIndex.Timestamp:
                case DialogTopic_FieldIndex.Unknown:
                case DialogTopic_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Responses:
                    return true;
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.Priority:
                case DialogTopic_FieldIndex.Branch:
                case DialogTopic_FieldIndex.Quest:
                case DialogTopic_FieldIndex.TopicFlags:
                case DialogTopic_FieldIndex.Category:
                case DialogTopic_FieldIndex.Subtype:
                case DialogTopic_FieldIndex.SubtypeName:
                case DialogTopic_FieldIndex.Timestamp:
                case DialogTopic_FieldIndex.Unknown:
                case DialogTopic_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.Priority:
                case DialogTopic_FieldIndex.Branch:
                case DialogTopic_FieldIndex.Quest:
                case DialogTopic_FieldIndex.TopicFlags:
                case DialogTopic_FieldIndex.Category:
                case DialogTopic_FieldIndex.Subtype:
                case DialogTopic_FieldIndex.SubtypeName:
                case DialogTopic_FieldIndex.Timestamp:
                case DialogTopic_FieldIndex.Unknown:
                case DialogTopic_FieldIndex.Responses:
                case DialogTopic_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Name:
                    return "Name";
                case DialogTopic_FieldIndex.Priority:
                    return "Priority";
                case DialogTopic_FieldIndex.Branch:
                    return "Branch";
                case DialogTopic_FieldIndex.Quest:
                    return "Quest";
                case DialogTopic_FieldIndex.TopicFlags:
                    return "TopicFlags";
                case DialogTopic_FieldIndex.Category:
                    return "Category";
                case DialogTopic_FieldIndex.Subtype:
                    return "Subtype";
                case DialogTopic_FieldIndex.SubtypeName:
                    return "SubtypeName";
                case DialogTopic_FieldIndex.Timestamp:
                    return "Timestamp";
                case DialogTopic_FieldIndex.Unknown:
                    return "Unknown";
                case DialogTopic_FieldIndex.Responses:
                    return "Responses";
                case DialogTopic_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.Priority:
                case DialogTopic_FieldIndex.Branch:
                case DialogTopic_FieldIndex.Quest:
                case DialogTopic_FieldIndex.TopicFlags:
                case DialogTopic_FieldIndex.Category:
                case DialogTopic_FieldIndex.Subtype:
                case DialogTopic_FieldIndex.SubtypeName:
                case DialogTopic_FieldIndex.Timestamp:
                case DialogTopic_FieldIndex.Unknown:
                case DialogTopic_FieldIndex.Responses:
                case DialogTopic_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Name:
                case DialogTopic_FieldIndex.Priority:
                case DialogTopic_FieldIndex.Branch:
                case DialogTopic_FieldIndex.Quest:
                case DialogTopic_FieldIndex.TopicFlags:
                case DialogTopic_FieldIndex.Category:
                case DialogTopic_FieldIndex.Subtype:
                case DialogTopic_FieldIndex.SubtypeName:
                case DialogTopic_FieldIndex.Timestamp:
                case DialogTopic_FieldIndex.Unknown:
                case DialogTopic_FieldIndex.Responses:
                case DialogTopic_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
            switch (enu)
            {
                case DialogTopic_FieldIndex.Name:
                    return typeof(TranslatedString);
                case DialogTopic_FieldIndex.Priority:
                    return typeof(Single);
                case DialogTopic_FieldIndex.Branch:
                    return typeof(FormLinkNullable<DialogBranch>);
                case DialogTopic_FieldIndex.Quest:
                    return typeof(FormLinkNullable<Quest>);
                case DialogTopic_FieldIndex.TopicFlags:
                    return typeof(DialogTopic.TopicFlag);
                case DialogTopic_FieldIndex.Category:
                    return typeof(DialogTopic.CategoryEnum);
                case DialogTopic_FieldIndex.Subtype:
                    return typeof(DialogTopic.SubtypeEnum);
                case DialogTopic_FieldIndex.SubtypeName:
                    return typeof(RecordType);
                case DialogTopic_FieldIndex.Timestamp:
                    return typeof(Int32);
                case DialogTopic_FieldIndex.Unknown:
                    return typeof(Int32);
                case DialogTopic_FieldIndex.Responses:
                    return typeof(ExtendedList<DialogResponses>);
                case DialogTopic_FieldIndex.DATADataTypeState:
                    return typeof(DialogTopic.DATADataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(DialogTopicXmlWriteTranslation);
        public static readonly RecordType DIAL_HEADER = new RecordType("DIAL");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType PNAM_HEADER = new RecordType("PNAM");
        public static readonly RecordType BNAM_HEADER = new RecordType("BNAM");
        public static readonly RecordType QNAM_HEADER = new RecordType("QNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType TIFC_HEADER = new RecordType("TIFC");
        public static readonly RecordType INFO_HEADER = new RecordType("INFO");
        public static readonly RecordType TriggeringRecordType = DIAL_HEADER;
        public static readonly Type BinaryWriteTranslation = typeof(DialogTopicBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class DialogTopicSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly DialogTopicSetterCommon Instance = new DialogTopicSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogTopicInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Priority = default;
            item.Branch = FormLinkNullable<DialogBranch>.Null;
            item.Quest = FormLinkNullable<Quest>.Null;
            item.TopicFlags = default;
            item.Category = default;
            item.Subtype = default;
            item.SubtypeName = RecordType.Null;
            item.Timestamp = default;
            item.Unknown = default;
            item.Responses.Clear();
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IDialogTopicInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDialogTopicInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IDialogTopicInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IDialogTopicInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    DialogTopicXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (DialogTopic)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (DialogTopic)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(IDialogTopicInternal obj)
        {
            foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IDialogTopicInternal obj)
            where TMajor : class, IMajorRecordCommon
        {
            foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecords<TMajor>(obj))
            {
                yield return (item as TMajor)!;
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogTopicInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IDialogTopicInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: DialogTopicBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DialogTopicBinaryCreateTranslation.FillBinaryRecordTypes);
            DialogTopicBinaryCreateTranslation.CustomBinaryEndImportPublic(
                frame: frame,
                obj: item);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (DialogTopic)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (DialogTopic)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class DialogTopicCommon : SkyrimMajorRecordCommon
    {
        public new static readonly DialogTopicCommon Instance = new DialogTopicCommon();

        public DialogTopic.Mask<bool> GetEqualsMask(
            IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogTopic.Mask<bool>(false);
            ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            DialogTopic.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Priority = item.Priority.EqualsWithin(rhs.Priority);
            ret.Branch = object.Equals(item.Branch, rhs.Branch);
            ret.Quest = object.Equals(item.Quest, rhs.Quest);
            ret.TopicFlags = item.TopicFlags == rhs.TopicFlags;
            ret.Category = item.Category == rhs.Category;
            ret.Subtype = item.Subtype == rhs.Subtype;
            ret.SubtypeName = item.SubtypeName == rhs.SubtypeName;
            ret.Timestamp = item.Timestamp == rhs.Timestamp;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Responses = item.Responses.CollectionEqualsHelper(
                rhs.Responses,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IDialogTopicGetter item,
            string? name = null,
            DialogTopic.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDialogTopicGetter item,
            FileGeneration fg,
            string? name = null,
            DialogTopic.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DialogTopic =>");
            }
            else
            {
                fg.AppendLine($"{name} (DialogTopic) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDialogTopicGetter item,
            FileGeneration fg,
            DialogTopic.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.Priority ?? true)
            {
                fg.AppendItem(item.Priority, "Priority");
            }
            if ((printMask?.Branch ?? true)
                && item.Branch.TryGet(out var BranchItem))
            {
                fg.AppendItem(BranchItem, "Branch");
            }
            if ((printMask?.Quest ?? true)
                && item.Quest.TryGet(out var QuestItem))
            {
                fg.AppendItem(QuestItem, "Quest");
            }
            if (printMask?.TopicFlags ?? true)
            {
                fg.AppendItem(item.TopicFlags, "TopicFlags");
            }
            if (printMask?.Category ?? true)
            {
                fg.AppendItem(item.Category, "Category");
            }
            if (printMask?.Subtype ?? true)
            {
                fg.AppendItem(item.Subtype, "Subtype");
            }
            if (printMask?.SubtypeName ?? true)
            {
                fg.AppendItem(item.SubtypeName, "SubtypeName");
            }
            if (printMask?.Timestamp ?? true)
            {
                fg.AppendItem(item.Timestamp, "Timestamp");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Responses?.Overall ?? true)
            {
                fg.AppendLine("Responses =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Responses)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IDialogTopicGetter item,
            DialogTopic.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Branch.HasValue && checkMask.Branch.Value != (item.Branch.FormKey != null)) return false;
            if (checkMask.Quest.HasValue && checkMask.Quest.Value != (item.Quest.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IDialogTopicGetter item,
            DialogTopic.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            mask.Priority = true;
            mask.Branch = (item.Branch.FormKey != null);
            mask.Quest = (item.Quest.FormKey != null);
            mask.TopicFlags = true;
            mask.Category = true;
            mask.Subtype = true;
            mask.SubtypeName = true;
            mask.Timestamp = true;
            mask.Unknown = true;
            var ResponsesItem = item.Responses;
            mask.Responses = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, DialogResponses.Mask<bool>?>>?>(true, ResponsesItem.WithIndex().Select((i) => new MaskItemIndexed<bool, DialogResponses.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static DialogTopic_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogTopic_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (DialogTopic_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (DialogTopic_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (DialogTopic_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (DialogTopic_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (DialogTopic_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new DialogTopic_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogTopic_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogTopicGetter? lhs,
            IDialogTopicGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.Priority.EqualsWithin(rhs.Priority)) return false;
            if (!lhs.Branch.Equals(rhs.Branch)) return false;
            if (!lhs.Quest.Equals(rhs.Quest)) return false;
            if (lhs.TopicFlags != rhs.TopicFlags) return false;
            if (lhs.Category != rhs.Category) return false;
            if (lhs.Subtype != rhs.Subtype) return false;
            if (lhs.SubtypeName != rhs.SubtypeName) return false;
            if (lhs.Timestamp != rhs.Timestamp) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (!lhs.Responses.SequenceEqual(rhs.Responses)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDialogTopicGetter?)lhs,
                rhs: rhs as IDialogTopicGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDialogTopicGetter?)lhs,
                rhs: rhs as IDialogTopicGetter);
        }
        
        public virtual int GetHashCode(IDialogTopicGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Priority);
            if (item.Branch.TryGet(out var Branchitem))
            {
                hash.Add(Branchitem);
            }
            if (item.Quest.TryGet(out var Questitem))
            {
                hash.Add(Questitem);
            }
            hash.Add(item.TopicFlags);
            hash.Add(item.Category);
            hash.Add(item.Subtype);
            hash.Add(item.SubtypeName);
            hash.Add(item.Timestamp);
            hash.Add(item.Unknown);
            hash.Add(item.Responses);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogTopicGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogTopicGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DialogTopic.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IDialogTopicGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Branch.FormKey.TryGet(out var BranchKey))
            {
                yield return BranchKey;
            }
            if (obj.Quest.FormKey.TryGet(out var QuestKey))
            {
                yield return QuestKey;
            }
            foreach (var item in obj.Responses.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IDialogTopicGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(DialogTopic obj, DialogTopic rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new DialogTopic(getNextFormKey());
            ret.DeepCopyIn((DialogTopic)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (DialogTopic)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(IDialogTopicGetter obj)
        {
            foreach (var subItem in obj.Responses)
            {
                yield return subItem;
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IDialogTopicGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            switch (typeof(TMajor).Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecordCommonGetter":
                case "MajorRecord":
                case "ISkyrimMajorRecord":
                case "ISkyrimMajorRecordGetter":
                case "SkyrimMajorRecord":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return (item as TMajor)!;
                    }
                    yield break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var subItem in obj.Responses)
                    {
                        yield return (subItem as TMajor)!;
                        foreach (var item in subItem.EnumerateMajorRecords<TMajor>())
                        {
                            yield return (item as TMajor)!;
                        }
                    }
                    yield break;
                default:
                    throw new ArgumentException($"Unknown major record type: {typeof(TMajor)}");
            }
        }
        
        #endregion
        
    }
    public partial class DialogTopicSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly DialogTopicSetterTranslationCommon Instance = new DialogTopicSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IDialogTopicInternal item,
            IDialogTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IDialogTopic item,
            IDialogTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Priority) ?? true))
            {
                item.Priority = rhs.Priority;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Branch) ?? true))
            {
                item.Branch = rhs.Branch.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Quest) ?? true))
            {
                item.Quest = rhs.Quest.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.TopicFlags) ?? true))
            {
                item.TopicFlags = rhs.TopicFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Category) ?? true))
            {
                item.Category = rhs.Category;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Subtype) ?? true))
            {
                item.Subtype = rhs.Subtype;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.SubtypeName) ?? true))
            {
                item.SubtypeName = rhs.SubtypeName;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Timestamp) ?? true))
            {
                item.Timestamp = rhs.Timestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Responses) ?? true))
            {
                errorMask?.PushIndex((int)DialogTopic_FieldIndex.Responses);
                try
                {
                    item.Responses.SetTo(
                        rhs.Responses
                        .Select(r =>
                        {
                            return (DialogResponses)r.DeepCopy(
                                copyMask: default(TranslationCrystal),
                                errorMask: errorMask);
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogTopicInternal)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogTopic)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogTopicInternal)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogTopic)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public DialogTopic DeepCopy(
            IDialogTopicGetter item,
            DialogTopic.TranslationMask? copyMask = null)
        {
            DialogTopic ret = (DialogTopic)((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public DialogTopic DeepCopy(
            IDialogTopicGetter item,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? copyMask = null)
        {
            DialogTopic ret = (DialogTopic)((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public DialogTopic DeepCopy(
            IDialogTopicGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogTopic ret = (DialogTopic)((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class DialogTopic
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogTopic_Registration.Instance;
        public new static DialogTopic_Registration Registration => DialogTopic_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogTopicCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DialogTopicSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogTopicSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DialogTopicXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static DialogTopicXmlWriteTranslation Instance = new DialogTopicXmlWriteTranslation();

        public static void WriteToNodeXml(
            IDialogTopicGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Name) ?? true))
            {
                Mutagen.Bethesda.Xml.TranslatedStringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)DialogTopic_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Priority) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Priority),
                    item: item.Priority,
                    fieldIndex: (int)DialogTopic_FieldIndex.Priority,
                    errorMask: errorMask);
            }
            if ((item.Branch.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Branch) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Branch),
                    item: item.Branch.FormKey.Value,
                    fieldIndex: (int)DialogTopic_FieldIndex.Branch,
                    errorMask: errorMask);
            }
            if ((item.Quest.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Quest) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Quest),
                    item: item.Quest.FormKey.Value,
                    fieldIndex: (int)DialogTopic_FieldIndex.Quest,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.TopicFlags) ?? true))
            {
                EnumXmlTranslation<DialogTopic.TopicFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.TopicFlags),
                    item: item.TopicFlags,
                    fieldIndex: (int)DialogTopic_FieldIndex.TopicFlags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Category) ?? true))
            {
                EnumXmlTranslation<DialogTopic.CategoryEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.Category),
                    item: item.Category,
                    fieldIndex: (int)DialogTopic_FieldIndex.Category,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Subtype) ?? true))
            {
                EnumXmlTranslation<DialogTopic.SubtypeEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.Subtype),
                    item: item.Subtype,
                    fieldIndex: (int)DialogTopic_FieldIndex.Subtype,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.SubtypeName) ?? true))
            {
                RecordTypeXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SubtypeName),
                    item: item.SubtypeName,
                    fieldIndex: (int)DialogTopic_FieldIndex.SubtypeName,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Timestamp) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Timestamp),
                    item: item.Timestamp,
                    fieldIndex: (int)DialogTopic_FieldIndex.Timestamp,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Unknown) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)DialogTopic_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Responses) ?? true))
            {
                ListXmlTranslation<IDialogResponsesGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Responses),
                    item: item.Responses,
                    fieldIndex: (int)DialogTopic_FieldIndex.Responses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogTopic_FieldIndex.Responses),
                    transl: (XElement subNode, IDialogResponsesGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((DialogResponsesXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<DialogTopic.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)DialogTopic_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IDialogTopicGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.DialogTopic");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.DialogTopic");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDialogTopicGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDialogTopicGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDialogTopicGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class DialogTopicXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static DialogTopicXmlCreateTranslation Instance = new DialogTopicXmlCreateTranslation();

        public static void FillPublicXml(
            IDialogTopicInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DialogTopicXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IDialogTopicInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)DialogTopic_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Priority":
                    errorMask?.PushIndex((int)DialogTopic_FieldIndex.Priority);
                    try
                    {
                        item.Priority = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Branch":
                    errorMask?.PushIndex((int)DialogTopic_FieldIndex.Branch);
                    try
                    {
                        item.Branch = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Quest":
                    errorMask?.PushIndex((int)DialogTopic_FieldIndex.Quest);
                    try
                    {
                        item.Quest = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TopicFlags":
                    errorMask?.PushIndex((int)DialogTopic_FieldIndex.TopicFlags);
                    try
                    {
                        item.TopicFlags = EnumXmlTranslation<DialogTopic.TopicFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Category":
                    errorMask?.PushIndex((int)DialogTopic_FieldIndex.Category);
                    try
                    {
                        item.Category = EnumXmlTranslation<DialogTopic.CategoryEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Subtype":
                    errorMask?.PushIndex((int)DialogTopic_FieldIndex.Subtype);
                    try
                    {
                        item.Subtype = EnumXmlTranslation<DialogTopic.SubtypeEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SubtypeName":
                    errorMask?.PushIndex((int)DialogTopic_FieldIndex.SubtypeName);
                    try
                    {
                        item.SubtypeName = RecordTypeXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Timestamp":
                    errorMask?.PushIndex((int)DialogTopic_FieldIndex.Timestamp);
                    try
                    {
                        item.Timestamp = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)DialogTopic_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Responses":
                    errorMask?.PushIndex((int)DialogTopic_FieldIndex.Responses);
                    try
                    {
                        if (ListXmlTranslation<DialogResponses>.Instance.Parse(
                            node: node,
                            enumer: out var ResponsesItem,
                            transl: LoquiXmlTranslation<DialogResponses>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Responses.SetTo(ResponsesItem);
                        }
                        else
                        {
                            item.Responses.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)DialogTopic_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<DialogTopic.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class DialogTopicXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IDialogTopicGetter item,
            XElement node,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogTopicXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogTopic.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IDialogTopicGetter item,
            string path,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDialogTopicGetter item,
            Stream stream,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DialogTopicBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static DialogTopicBinaryWriteTranslation Instance = new DialogTopicBinaryWriteTranslation();

        static partial void WriteBinaryResponseCountCustom(
            MutagenWriter writer,
            IDialogTopicGetter item);

        public static void WriteBinaryResponseCount(
            MutagenWriter writer,
            IDialogTopicGetter item)
        {
            WriteBinaryResponseCountCustom(
                writer: writer,
                item: item);
        }

        static partial void CustomBinaryEndExport(
            MutagenWriter writer,
            IDialogTopicGetter obj);
        public static void CustomBinaryEndExportInternal(
            MutagenWriter writer,
            IDialogTopicGetter obj)
        {
            CustomBinaryEndExport(
                writer: writer,
                obj: obj);
        }
        public static void WriteEmbedded(
            IDialogTopicGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IDialogTopicGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(DialogTopic_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Priority,
                header: recordTypeConverter.ConvertToCustom(DialogTopic_Registration.PNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Branch,
                header: recordTypeConverter.ConvertToCustom(DialogTopic_Registration.BNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Quest,
                header: recordTypeConverter.ConvertToCustom(DialogTopic_Registration.QNAM_HEADER));
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(DialogTopic_Registration.DATA_HEADER)))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<DialogTopic.TopicFlag>.Instance.Write(
                    writer,
                    item.TopicFlags,
                    length: 1);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<DialogTopic.CategoryEnum>.Instance.Write(
                    writer,
                    item.Category,
                    length: 1);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<DialogTopic.SubtypeEnum>.Instance.Write(
                    writer,
                    item.Subtype,
                    length: 2);
            }
            Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SubtypeName,
                header: recordTypeConverter.ConvertToCustom(DialogTopic_Registration.SNAM_HEADER));
            DialogTopicBinaryWriteTranslation.WriteBinaryResponseCount(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IDialogTopicGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(DialogTopic_Registration.DIAL_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            CustomBinaryEndExportInternal(
                writer: writer,
                obj: item);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogTopicGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogTopicGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogTopicGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class DialogTopicBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static DialogTopicBinaryCreateTranslation Instance = new DialogTopicBinaryCreateTranslation();

        public override RecordType RecordType => DialogTopic_Registration.DIAL_HEADER;
        public static void FillBinaryStructs(
            IDialogTopicInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IDialogTopicInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Name);
                }
                case 0x4D414E50: // PNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Priority = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Priority);
                }
                case 0x4D414E42: // BNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Branch = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Branch);
                }
                case 0x4D414E51: // QNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Quest = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Quest);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.TopicFlags = EnumBinaryTranslation<DialogTopic.TopicFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.Category = EnumBinaryTranslation<DialogTopic.CategoryEnum>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.Subtype = EnumBinaryTranslation<DialogTopic.SubtypeEnum>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Subtype);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SubtypeName = Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.SubtypeName);
                }
                case 0x43464954: // TIFC
                {
                    DialogTopicBinaryCreateTranslation.FillBinaryResponseCountCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed(null);
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }

        static partial void FillBinaryResponseCountCustom(
            MutagenFrame frame,
            IDialogTopicInternal item);

        static partial void CustomBinaryEndImport(
            MutagenFrame frame,
            IDialogTopicInternal obj);
        public static void CustomBinaryEndImportPublic(
            MutagenFrame frame,
            IDialogTopicInternal obj)
        {
            CustomBinaryEndImport(
                frame: frame,
                obj: obj);
        }
    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class DialogTopicBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class DialogTopicBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IDialogTopicGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogTopic_Registration.Instance;
        public new static DialogTopic_Registration Registration => DialogTopic_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogTopicCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogTopicSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDialogTopicGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => DialogTopicCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => DialogTopicCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogTopicCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogTopicCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => DialogTopicXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DialogTopicXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogTopicBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogTopicBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public TranslatedString? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        #region Priority
        private int? _PriorityLocation;
        public Single Priority => _PriorityLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _PriorityLocation.Value, _package.MetaData.Constants)) : default;
        #endregion
        #region Branch
        private int? _BranchLocation;
        public bool Branch_IsSet => _BranchLocation.HasValue;
        public IFormLinkNullable<IDialogBranchGetter> Branch => _BranchLocation.HasValue ? new FormLinkNullable<IDialogBranchGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _BranchLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IDialogBranchGetter>.Null;
        #endregion
        #region Quest
        private int? _QuestLocation;
        public bool Quest_IsSet => _QuestLocation.HasValue;
        public IFormLinkNullable<IQuestGetter> Quest => _QuestLocation.HasValue ? new FormLinkNullable<IQuestGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _QuestLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IQuestGetter>.Null;
        #endregion
        private int? _DATALocation;
        public DialogTopic.DATADataType DATADataTypeState { get; private set; }
        #region TopicFlags
        private int _TopicFlagsLocation => _DATALocation!.Value + 0x0;
        private bool _TopicFlags_IsSet => _DATALocation.HasValue;
        public DialogTopic.TopicFlag TopicFlags => _TopicFlags_IsSet ? (DialogTopic.TopicFlag)_data.Span.Slice(_TopicFlagsLocation, 0x1)[0] : default;
        #endregion
        #region Category
        private int _CategoryLocation => _DATALocation!.Value + 0x1;
        private bool _Category_IsSet => _DATALocation.HasValue;
        public DialogTopic.CategoryEnum Category => _Category_IsSet ? (DialogTopic.CategoryEnum)_data.Span.Slice(_CategoryLocation, 0x1)[0] : default;
        #endregion
        #region Subtype
        private int _SubtypeLocation => _DATALocation!.Value + 0x2;
        private bool _Subtype_IsSet => _DATALocation.HasValue;
        public DialogTopic.SubtypeEnum Subtype => _Subtype_IsSet ? (DialogTopic.SubtypeEnum)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_SubtypeLocation, 0x2)) : default;
        #endregion
        #region SubtypeName
        private int? _SubtypeNameLocation;
        public RecordType SubtypeName => _SubtypeNameLocation.HasValue ? new RecordType(BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SubtypeNameLocation.Value, _package.MetaData.Constants))) : RecordType.Null;
        #endregion
        #region ResponseCount
        partial void ResponseCountCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);
        partial void CustomEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogTopicBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static DialogTopicBinaryOverlay DialogTopicFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var origStream = stream;
            stream = UtilityTranslation.DecompressStream(stream, package.MetaData.Constants);
            var ret = new DialogTopicBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            ret.CustomEnd(
                stream: origStream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static DialogTopicBinaryOverlay DialogTopicFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return DialogTopicFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Name);
                }
                case 0x4D414E50: // PNAM
                {
                    _PriorityLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Priority);
                }
                case 0x4D414E42: // BNAM
                {
                    _BranchLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Branch);
                }
                case 0x4D414E51: // QNAM
                {
                    _QuestLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Quest);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.Subtype);
                }
                case 0x4D414E53: // SNAM
                {
                    _SubtypeNameLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogTopic_FieldIndex.SubtypeName);
                }
                case 0x43464954: // TIFC
                {
                    ResponseCountCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(null);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogTopicMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

