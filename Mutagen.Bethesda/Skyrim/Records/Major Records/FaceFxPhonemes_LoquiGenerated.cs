/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class FaceFxPhonemes :
        IFaceFxPhonemes,
        ILoquiObjectSetter<FaceFxPhonemes>,
        IEquatable<FaceFxPhonemes>,
        IEqualsMask
    {
        #region Ctor
        public FaceFxPhonemes()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region IY
        public PhonemeTarget IY { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.IY => IY;
        #endregion
        #region IH
        public PhonemeTarget IH { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.IH => IH;
        #endregion
        #region EH
        public PhonemeTarget EH { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.EH => EH;
        #endregion
        #region EY
        public PhonemeTarget EY { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.EY => EY;
        #endregion
        #region AE
        public PhonemeTarget AE { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.AE => AE;
        #endregion
        #region AA
        public PhonemeTarget AA { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.AA => AA;
        #endregion
        #region AW
        public PhonemeTarget AW { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.AW => AW;
        #endregion
        #region AY
        public PhonemeTarget AY { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.AY => AY;
        #endregion
        #region AH
        public PhonemeTarget AH { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.AH => AH;
        #endregion
        #region AO
        public PhonemeTarget AO { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.AO => AO;
        #endregion
        #region OY
        public PhonemeTarget OY { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.OY => OY;
        #endregion
        #region OW
        public PhonemeTarget OW { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.OW => OW;
        #endregion
        #region UH
        public PhonemeTarget UH { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.UH => UH;
        #endregion
        #region UW
        public PhonemeTarget UW { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.UW => UW;
        #endregion
        #region ER
        public PhonemeTarget ER { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.ER => ER;
        #endregion
        #region AX
        public PhonemeTarget AX { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.AX => AX;
        #endregion
        #region S
        public PhonemeTarget S { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.S => S;
        #endregion
        #region SH
        public PhonemeTarget SH { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.SH => SH;
        #endregion
        #region Z
        public PhonemeTarget Z { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.Z => Z;
        #endregion
        #region ZH
        public PhonemeTarget ZH { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.ZH => ZH;
        #endregion
        #region F
        public PhonemeTarget F { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.F => F;
        #endregion
        #region TH
        public PhonemeTarget TH { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.TH => TH;
        #endregion
        #region V
        public PhonemeTarget V { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.V => V;
        #endregion
        #region DH
        public PhonemeTarget DH { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.DH => DH;
        #endregion
        #region M
        public PhonemeTarget M { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.M => M;
        #endregion
        #region N
        public PhonemeTarget N { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.N => N;
        #endregion
        #region NG
        public PhonemeTarget NG { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.NG => NG;
        #endregion
        #region L
        public PhonemeTarget L { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.L => L;
        #endregion
        #region R
        public PhonemeTarget R { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.R => R;
        #endregion
        #region W
        public PhonemeTarget W { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.W => W;
        #endregion
        #region Y
        public PhonemeTarget Y { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.Y => Y;
        #endregion
        #region HH
        public PhonemeTarget HH { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.HH => HH;
        #endregion
        #region B
        public PhonemeTarget B { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.B => B;
        #endregion
        #region D
        public PhonemeTarget D { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.D => D;
        #endregion
        #region JH
        public PhonemeTarget JH { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.JH => JH;
        #endregion
        #region G
        public PhonemeTarget G { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.G => G;
        #endregion
        #region P
        public PhonemeTarget P { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.P => P;
        #endregion
        #region T
        public PhonemeTarget T { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.T => T;
        #endregion
        #region K
        public PhonemeTarget K { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.K => K;
        #endregion
        #region CH
        public PhonemeTarget CH { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.CH => CH;
        #endregion
        #region SIL
        public PhonemeTarget SIL { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.SIL => SIL;
        #endregion
        #region SHOTSIL
        public PhonemeTarget SHOTSIL { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.SHOTSIL => SHOTSIL;
        #endregion
        #region FLAP
        public PhonemeTarget FLAP { get; set; } = new PhonemeTarget();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeTargetGetter IFaceFxPhonemesGetter.FLAP => FLAP;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FaceFxPhonemesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFaceFxPhonemesGetter rhs)) return false;
            return ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(FaceFxPhonemes obj)
        {
            return ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => FaceFxPhonemesXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FaceFxPhonemesXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static FaceFxPhonemes CreateFromXml(
            XElement node,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static FaceFxPhonemes CreateFromXml(
            XElement node,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FaceFxPhonemes.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static FaceFxPhonemes CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new FaceFxPhonemes();
            ((FaceFxPhonemesSetterCommon)((IFaceFxPhonemesGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static FaceFxPhonemes CreateFromXml(
            string path,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static FaceFxPhonemes CreateFromXml(
            string path,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FaceFxPhonemes CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static FaceFxPhonemes CreateFromXml(
            Stream stream,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static FaceFxPhonemes CreateFromXml(
            Stream stream,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FaceFxPhonemes CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.IY = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.IH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.EH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.EY = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.AE = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.AA = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.AW = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.AY = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.AH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.AO = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.OY = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.OW = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.UH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.UW = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.ER = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.AX = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.S = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.SH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.Z = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.ZH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.F = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.TH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.V = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.DH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.M = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.N = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.NG = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.L = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.R = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.W = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.Y = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.HH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.B = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.D = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.JH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.G = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.P = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.T = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.K = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.CH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.SIL = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.SHOTSIL = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
                this.FLAP = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(initialValue, new PhonemeTarget.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem IY,
                TItem IH,
                TItem EH,
                TItem EY,
                TItem AE,
                TItem AA,
                TItem AW,
                TItem AY,
                TItem AH,
                TItem AO,
                TItem OY,
                TItem OW,
                TItem UH,
                TItem UW,
                TItem ER,
                TItem AX,
                TItem S,
                TItem SH,
                TItem Z,
                TItem ZH,
                TItem F,
                TItem TH,
                TItem V,
                TItem DH,
                TItem M,
                TItem N,
                TItem NG,
                TItem L,
                TItem R,
                TItem W,
                TItem Y,
                TItem HH,
                TItem B,
                TItem D,
                TItem JH,
                TItem G,
                TItem P,
                TItem T,
                TItem K,
                TItem CH,
                TItem SIL,
                TItem SHOTSIL,
                TItem FLAP)
            {
                this.IY = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(IY, new PhonemeTarget.Mask<TItem>(IY));
                this.IH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(IH, new PhonemeTarget.Mask<TItem>(IH));
                this.EH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(EH, new PhonemeTarget.Mask<TItem>(EH));
                this.EY = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(EY, new PhonemeTarget.Mask<TItem>(EY));
                this.AE = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(AE, new PhonemeTarget.Mask<TItem>(AE));
                this.AA = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(AA, new PhonemeTarget.Mask<TItem>(AA));
                this.AW = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(AW, new PhonemeTarget.Mask<TItem>(AW));
                this.AY = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(AY, new PhonemeTarget.Mask<TItem>(AY));
                this.AH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(AH, new PhonemeTarget.Mask<TItem>(AH));
                this.AO = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(AO, new PhonemeTarget.Mask<TItem>(AO));
                this.OY = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(OY, new PhonemeTarget.Mask<TItem>(OY));
                this.OW = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(OW, new PhonemeTarget.Mask<TItem>(OW));
                this.UH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(UH, new PhonemeTarget.Mask<TItem>(UH));
                this.UW = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(UW, new PhonemeTarget.Mask<TItem>(UW));
                this.ER = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(ER, new PhonemeTarget.Mask<TItem>(ER));
                this.AX = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(AX, new PhonemeTarget.Mask<TItem>(AX));
                this.S = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(S, new PhonemeTarget.Mask<TItem>(S));
                this.SH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(SH, new PhonemeTarget.Mask<TItem>(SH));
                this.Z = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(Z, new PhonemeTarget.Mask<TItem>(Z));
                this.ZH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(ZH, new PhonemeTarget.Mask<TItem>(ZH));
                this.F = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(F, new PhonemeTarget.Mask<TItem>(F));
                this.TH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(TH, new PhonemeTarget.Mask<TItem>(TH));
                this.V = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(V, new PhonemeTarget.Mask<TItem>(V));
                this.DH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(DH, new PhonemeTarget.Mask<TItem>(DH));
                this.M = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(M, new PhonemeTarget.Mask<TItem>(M));
                this.N = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(N, new PhonemeTarget.Mask<TItem>(N));
                this.NG = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(NG, new PhonemeTarget.Mask<TItem>(NG));
                this.L = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(L, new PhonemeTarget.Mask<TItem>(L));
                this.R = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(R, new PhonemeTarget.Mask<TItem>(R));
                this.W = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(W, new PhonemeTarget.Mask<TItem>(W));
                this.Y = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(Y, new PhonemeTarget.Mask<TItem>(Y));
                this.HH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(HH, new PhonemeTarget.Mask<TItem>(HH));
                this.B = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(B, new PhonemeTarget.Mask<TItem>(B));
                this.D = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(D, new PhonemeTarget.Mask<TItem>(D));
                this.JH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(JH, new PhonemeTarget.Mask<TItem>(JH));
                this.G = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(G, new PhonemeTarget.Mask<TItem>(G));
                this.P = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(P, new PhonemeTarget.Mask<TItem>(P));
                this.T = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(T, new PhonemeTarget.Mask<TItem>(T));
                this.K = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(K, new PhonemeTarget.Mask<TItem>(K));
                this.CH = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(CH, new PhonemeTarget.Mask<TItem>(CH));
                this.SIL = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(SIL, new PhonemeTarget.Mask<TItem>(SIL));
                this.SHOTSIL = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(SHOTSIL, new PhonemeTarget.Mask<TItem>(SHOTSIL));
                this.FLAP = new MaskItem<TItem, PhonemeTarget.Mask<TItem>?>(FLAP, new PhonemeTarget.Mask<TItem>(FLAP));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? IY { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? IH { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? EH { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? EY { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? AE { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? AA { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? AW { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? AY { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? AH { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? AO { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? OY { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? OW { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? UH { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? UW { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? ER { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? AX { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? S { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? SH { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? Z { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? ZH { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? F { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? TH { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? V { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? DH { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? M { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? N { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? NG { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? L { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? R { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? W { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? Y { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? HH { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? B { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? D { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? JH { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? G { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? P { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? T { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? K { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? CH { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? SIL { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? SHOTSIL { get; set; }
            public MaskItem<TItem, PhonemeTarget.Mask<TItem>?>? FLAP { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.IY, rhs.IY)) return false;
                if (!object.Equals(this.IH, rhs.IH)) return false;
                if (!object.Equals(this.EH, rhs.EH)) return false;
                if (!object.Equals(this.EY, rhs.EY)) return false;
                if (!object.Equals(this.AE, rhs.AE)) return false;
                if (!object.Equals(this.AA, rhs.AA)) return false;
                if (!object.Equals(this.AW, rhs.AW)) return false;
                if (!object.Equals(this.AY, rhs.AY)) return false;
                if (!object.Equals(this.AH, rhs.AH)) return false;
                if (!object.Equals(this.AO, rhs.AO)) return false;
                if (!object.Equals(this.OY, rhs.OY)) return false;
                if (!object.Equals(this.OW, rhs.OW)) return false;
                if (!object.Equals(this.UH, rhs.UH)) return false;
                if (!object.Equals(this.UW, rhs.UW)) return false;
                if (!object.Equals(this.ER, rhs.ER)) return false;
                if (!object.Equals(this.AX, rhs.AX)) return false;
                if (!object.Equals(this.S, rhs.S)) return false;
                if (!object.Equals(this.SH, rhs.SH)) return false;
                if (!object.Equals(this.Z, rhs.Z)) return false;
                if (!object.Equals(this.ZH, rhs.ZH)) return false;
                if (!object.Equals(this.F, rhs.F)) return false;
                if (!object.Equals(this.TH, rhs.TH)) return false;
                if (!object.Equals(this.V, rhs.V)) return false;
                if (!object.Equals(this.DH, rhs.DH)) return false;
                if (!object.Equals(this.M, rhs.M)) return false;
                if (!object.Equals(this.N, rhs.N)) return false;
                if (!object.Equals(this.NG, rhs.NG)) return false;
                if (!object.Equals(this.L, rhs.L)) return false;
                if (!object.Equals(this.R, rhs.R)) return false;
                if (!object.Equals(this.W, rhs.W)) return false;
                if (!object.Equals(this.Y, rhs.Y)) return false;
                if (!object.Equals(this.HH, rhs.HH)) return false;
                if (!object.Equals(this.B, rhs.B)) return false;
                if (!object.Equals(this.D, rhs.D)) return false;
                if (!object.Equals(this.JH, rhs.JH)) return false;
                if (!object.Equals(this.G, rhs.G)) return false;
                if (!object.Equals(this.P, rhs.P)) return false;
                if (!object.Equals(this.T, rhs.T)) return false;
                if (!object.Equals(this.K, rhs.K)) return false;
                if (!object.Equals(this.CH, rhs.CH)) return false;
                if (!object.Equals(this.SIL, rhs.SIL)) return false;
                if (!object.Equals(this.SHOTSIL, rhs.SHOTSIL)) return false;
                if (!object.Equals(this.FLAP, rhs.FLAP)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.IY?.GetHashCode());
                ret = ret.CombineHashCode(this.IH?.GetHashCode());
                ret = ret.CombineHashCode(this.EH?.GetHashCode());
                ret = ret.CombineHashCode(this.EY?.GetHashCode());
                ret = ret.CombineHashCode(this.AE?.GetHashCode());
                ret = ret.CombineHashCode(this.AA?.GetHashCode());
                ret = ret.CombineHashCode(this.AW?.GetHashCode());
                ret = ret.CombineHashCode(this.AY?.GetHashCode());
                ret = ret.CombineHashCode(this.AH?.GetHashCode());
                ret = ret.CombineHashCode(this.AO?.GetHashCode());
                ret = ret.CombineHashCode(this.OY?.GetHashCode());
                ret = ret.CombineHashCode(this.OW?.GetHashCode());
                ret = ret.CombineHashCode(this.UH?.GetHashCode());
                ret = ret.CombineHashCode(this.UW?.GetHashCode());
                ret = ret.CombineHashCode(this.ER?.GetHashCode());
                ret = ret.CombineHashCode(this.AX?.GetHashCode());
                ret = ret.CombineHashCode(this.S?.GetHashCode());
                ret = ret.CombineHashCode(this.SH?.GetHashCode());
                ret = ret.CombineHashCode(this.Z?.GetHashCode());
                ret = ret.CombineHashCode(this.ZH?.GetHashCode());
                ret = ret.CombineHashCode(this.F?.GetHashCode());
                ret = ret.CombineHashCode(this.TH?.GetHashCode());
                ret = ret.CombineHashCode(this.V?.GetHashCode());
                ret = ret.CombineHashCode(this.DH?.GetHashCode());
                ret = ret.CombineHashCode(this.M?.GetHashCode());
                ret = ret.CombineHashCode(this.N?.GetHashCode());
                ret = ret.CombineHashCode(this.NG?.GetHashCode());
                ret = ret.CombineHashCode(this.L?.GetHashCode());
                ret = ret.CombineHashCode(this.R?.GetHashCode());
                ret = ret.CombineHashCode(this.W?.GetHashCode());
                ret = ret.CombineHashCode(this.Y?.GetHashCode());
                ret = ret.CombineHashCode(this.HH?.GetHashCode());
                ret = ret.CombineHashCode(this.B?.GetHashCode());
                ret = ret.CombineHashCode(this.D?.GetHashCode());
                ret = ret.CombineHashCode(this.JH?.GetHashCode());
                ret = ret.CombineHashCode(this.G?.GetHashCode());
                ret = ret.CombineHashCode(this.P?.GetHashCode());
                ret = ret.CombineHashCode(this.T?.GetHashCode());
                ret = ret.CombineHashCode(this.K?.GetHashCode());
                ret = ret.CombineHashCode(this.CH?.GetHashCode());
                ret = ret.CombineHashCode(this.SIL?.GetHashCode());
                ret = ret.CombineHashCode(this.SHOTSIL?.GetHashCode());
                ret = ret.CombineHashCode(this.FLAP?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (IY != null)
                {
                    if (!eval(this.IY.Overall)) return false;
                    if (this.IY.Specific != null && !this.IY.Specific.All(eval)) return false;
                }
                if (IH != null)
                {
                    if (!eval(this.IH.Overall)) return false;
                    if (this.IH.Specific != null && !this.IH.Specific.All(eval)) return false;
                }
                if (EH != null)
                {
                    if (!eval(this.EH.Overall)) return false;
                    if (this.EH.Specific != null && !this.EH.Specific.All(eval)) return false;
                }
                if (EY != null)
                {
                    if (!eval(this.EY.Overall)) return false;
                    if (this.EY.Specific != null && !this.EY.Specific.All(eval)) return false;
                }
                if (AE != null)
                {
                    if (!eval(this.AE.Overall)) return false;
                    if (this.AE.Specific != null && !this.AE.Specific.All(eval)) return false;
                }
                if (AA != null)
                {
                    if (!eval(this.AA.Overall)) return false;
                    if (this.AA.Specific != null && !this.AA.Specific.All(eval)) return false;
                }
                if (AW != null)
                {
                    if (!eval(this.AW.Overall)) return false;
                    if (this.AW.Specific != null && !this.AW.Specific.All(eval)) return false;
                }
                if (AY != null)
                {
                    if (!eval(this.AY.Overall)) return false;
                    if (this.AY.Specific != null && !this.AY.Specific.All(eval)) return false;
                }
                if (AH != null)
                {
                    if (!eval(this.AH.Overall)) return false;
                    if (this.AH.Specific != null && !this.AH.Specific.All(eval)) return false;
                }
                if (AO != null)
                {
                    if (!eval(this.AO.Overall)) return false;
                    if (this.AO.Specific != null && !this.AO.Specific.All(eval)) return false;
                }
                if (OY != null)
                {
                    if (!eval(this.OY.Overall)) return false;
                    if (this.OY.Specific != null && !this.OY.Specific.All(eval)) return false;
                }
                if (OW != null)
                {
                    if (!eval(this.OW.Overall)) return false;
                    if (this.OW.Specific != null && !this.OW.Specific.All(eval)) return false;
                }
                if (UH != null)
                {
                    if (!eval(this.UH.Overall)) return false;
                    if (this.UH.Specific != null && !this.UH.Specific.All(eval)) return false;
                }
                if (UW != null)
                {
                    if (!eval(this.UW.Overall)) return false;
                    if (this.UW.Specific != null && !this.UW.Specific.All(eval)) return false;
                }
                if (ER != null)
                {
                    if (!eval(this.ER.Overall)) return false;
                    if (this.ER.Specific != null && !this.ER.Specific.All(eval)) return false;
                }
                if (AX != null)
                {
                    if (!eval(this.AX.Overall)) return false;
                    if (this.AX.Specific != null && !this.AX.Specific.All(eval)) return false;
                }
                if (S != null)
                {
                    if (!eval(this.S.Overall)) return false;
                    if (this.S.Specific != null && !this.S.Specific.All(eval)) return false;
                }
                if (SH != null)
                {
                    if (!eval(this.SH.Overall)) return false;
                    if (this.SH.Specific != null && !this.SH.Specific.All(eval)) return false;
                }
                if (Z != null)
                {
                    if (!eval(this.Z.Overall)) return false;
                    if (this.Z.Specific != null && !this.Z.Specific.All(eval)) return false;
                }
                if (ZH != null)
                {
                    if (!eval(this.ZH.Overall)) return false;
                    if (this.ZH.Specific != null && !this.ZH.Specific.All(eval)) return false;
                }
                if (F != null)
                {
                    if (!eval(this.F.Overall)) return false;
                    if (this.F.Specific != null && !this.F.Specific.All(eval)) return false;
                }
                if (TH != null)
                {
                    if (!eval(this.TH.Overall)) return false;
                    if (this.TH.Specific != null && !this.TH.Specific.All(eval)) return false;
                }
                if (V != null)
                {
                    if (!eval(this.V.Overall)) return false;
                    if (this.V.Specific != null && !this.V.Specific.All(eval)) return false;
                }
                if (DH != null)
                {
                    if (!eval(this.DH.Overall)) return false;
                    if (this.DH.Specific != null && !this.DH.Specific.All(eval)) return false;
                }
                if (M != null)
                {
                    if (!eval(this.M.Overall)) return false;
                    if (this.M.Specific != null && !this.M.Specific.All(eval)) return false;
                }
                if (N != null)
                {
                    if (!eval(this.N.Overall)) return false;
                    if (this.N.Specific != null && !this.N.Specific.All(eval)) return false;
                }
                if (NG != null)
                {
                    if (!eval(this.NG.Overall)) return false;
                    if (this.NG.Specific != null && !this.NG.Specific.All(eval)) return false;
                }
                if (L != null)
                {
                    if (!eval(this.L.Overall)) return false;
                    if (this.L.Specific != null && !this.L.Specific.All(eval)) return false;
                }
                if (R != null)
                {
                    if (!eval(this.R.Overall)) return false;
                    if (this.R.Specific != null && !this.R.Specific.All(eval)) return false;
                }
                if (W != null)
                {
                    if (!eval(this.W.Overall)) return false;
                    if (this.W.Specific != null && !this.W.Specific.All(eval)) return false;
                }
                if (Y != null)
                {
                    if (!eval(this.Y.Overall)) return false;
                    if (this.Y.Specific != null && !this.Y.Specific.All(eval)) return false;
                }
                if (HH != null)
                {
                    if (!eval(this.HH.Overall)) return false;
                    if (this.HH.Specific != null && !this.HH.Specific.All(eval)) return false;
                }
                if (B != null)
                {
                    if (!eval(this.B.Overall)) return false;
                    if (this.B.Specific != null && !this.B.Specific.All(eval)) return false;
                }
                if (D != null)
                {
                    if (!eval(this.D.Overall)) return false;
                    if (this.D.Specific != null && !this.D.Specific.All(eval)) return false;
                }
                if (JH != null)
                {
                    if (!eval(this.JH.Overall)) return false;
                    if (this.JH.Specific != null && !this.JH.Specific.All(eval)) return false;
                }
                if (G != null)
                {
                    if (!eval(this.G.Overall)) return false;
                    if (this.G.Specific != null && !this.G.Specific.All(eval)) return false;
                }
                if (P != null)
                {
                    if (!eval(this.P.Overall)) return false;
                    if (this.P.Specific != null && !this.P.Specific.All(eval)) return false;
                }
                if (T != null)
                {
                    if (!eval(this.T.Overall)) return false;
                    if (this.T.Specific != null && !this.T.Specific.All(eval)) return false;
                }
                if (K != null)
                {
                    if (!eval(this.K.Overall)) return false;
                    if (this.K.Specific != null && !this.K.Specific.All(eval)) return false;
                }
                if (CH != null)
                {
                    if (!eval(this.CH.Overall)) return false;
                    if (this.CH.Specific != null && !this.CH.Specific.All(eval)) return false;
                }
                if (SIL != null)
                {
                    if (!eval(this.SIL.Overall)) return false;
                    if (this.SIL.Specific != null && !this.SIL.Specific.All(eval)) return false;
                }
                if (SHOTSIL != null)
                {
                    if (!eval(this.SHOTSIL.Overall)) return false;
                    if (this.SHOTSIL.Specific != null && !this.SHOTSIL.Specific.All(eval)) return false;
                }
                if (FLAP != null)
                {
                    if (!eval(this.FLAP.Overall)) return false;
                    if (this.FLAP.Specific != null && !this.FLAP.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (IY != null)
                {
                    if (eval(this.IY.Overall)) return true;
                    if (this.IY.Specific != null && this.IY.Specific.Any(eval)) return true;
                }
                if (IH != null)
                {
                    if (eval(this.IH.Overall)) return true;
                    if (this.IH.Specific != null && this.IH.Specific.Any(eval)) return true;
                }
                if (EH != null)
                {
                    if (eval(this.EH.Overall)) return true;
                    if (this.EH.Specific != null && this.EH.Specific.Any(eval)) return true;
                }
                if (EY != null)
                {
                    if (eval(this.EY.Overall)) return true;
                    if (this.EY.Specific != null && this.EY.Specific.Any(eval)) return true;
                }
                if (AE != null)
                {
                    if (eval(this.AE.Overall)) return true;
                    if (this.AE.Specific != null && this.AE.Specific.Any(eval)) return true;
                }
                if (AA != null)
                {
                    if (eval(this.AA.Overall)) return true;
                    if (this.AA.Specific != null && this.AA.Specific.Any(eval)) return true;
                }
                if (AW != null)
                {
                    if (eval(this.AW.Overall)) return true;
                    if (this.AW.Specific != null && this.AW.Specific.Any(eval)) return true;
                }
                if (AY != null)
                {
                    if (eval(this.AY.Overall)) return true;
                    if (this.AY.Specific != null && this.AY.Specific.Any(eval)) return true;
                }
                if (AH != null)
                {
                    if (eval(this.AH.Overall)) return true;
                    if (this.AH.Specific != null && this.AH.Specific.Any(eval)) return true;
                }
                if (AO != null)
                {
                    if (eval(this.AO.Overall)) return true;
                    if (this.AO.Specific != null && this.AO.Specific.Any(eval)) return true;
                }
                if (OY != null)
                {
                    if (eval(this.OY.Overall)) return true;
                    if (this.OY.Specific != null && this.OY.Specific.Any(eval)) return true;
                }
                if (OW != null)
                {
                    if (eval(this.OW.Overall)) return true;
                    if (this.OW.Specific != null && this.OW.Specific.Any(eval)) return true;
                }
                if (UH != null)
                {
                    if (eval(this.UH.Overall)) return true;
                    if (this.UH.Specific != null && this.UH.Specific.Any(eval)) return true;
                }
                if (UW != null)
                {
                    if (eval(this.UW.Overall)) return true;
                    if (this.UW.Specific != null && this.UW.Specific.Any(eval)) return true;
                }
                if (ER != null)
                {
                    if (eval(this.ER.Overall)) return true;
                    if (this.ER.Specific != null && this.ER.Specific.Any(eval)) return true;
                }
                if (AX != null)
                {
                    if (eval(this.AX.Overall)) return true;
                    if (this.AX.Specific != null && this.AX.Specific.Any(eval)) return true;
                }
                if (S != null)
                {
                    if (eval(this.S.Overall)) return true;
                    if (this.S.Specific != null && this.S.Specific.Any(eval)) return true;
                }
                if (SH != null)
                {
                    if (eval(this.SH.Overall)) return true;
                    if (this.SH.Specific != null && this.SH.Specific.Any(eval)) return true;
                }
                if (Z != null)
                {
                    if (eval(this.Z.Overall)) return true;
                    if (this.Z.Specific != null && this.Z.Specific.Any(eval)) return true;
                }
                if (ZH != null)
                {
                    if (eval(this.ZH.Overall)) return true;
                    if (this.ZH.Specific != null && this.ZH.Specific.Any(eval)) return true;
                }
                if (F != null)
                {
                    if (eval(this.F.Overall)) return true;
                    if (this.F.Specific != null && this.F.Specific.Any(eval)) return true;
                }
                if (TH != null)
                {
                    if (eval(this.TH.Overall)) return true;
                    if (this.TH.Specific != null && this.TH.Specific.Any(eval)) return true;
                }
                if (V != null)
                {
                    if (eval(this.V.Overall)) return true;
                    if (this.V.Specific != null && this.V.Specific.Any(eval)) return true;
                }
                if (DH != null)
                {
                    if (eval(this.DH.Overall)) return true;
                    if (this.DH.Specific != null && this.DH.Specific.Any(eval)) return true;
                }
                if (M != null)
                {
                    if (eval(this.M.Overall)) return true;
                    if (this.M.Specific != null && this.M.Specific.Any(eval)) return true;
                }
                if (N != null)
                {
                    if (eval(this.N.Overall)) return true;
                    if (this.N.Specific != null && this.N.Specific.Any(eval)) return true;
                }
                if (NG != null)
                {
                    if (eval(this.NG.Overall)) return true;
                    if (this.NG.Specific != null && this.NG.Specific.Any(eval)) return true;
                }
                if (L != null)
                {
                    if (eval(this.L.Overall)) return true;
                    if (this.L.Specific != null && this.L.Specific.Any(eval)) return true;
                }
                if (R != null)
                {
                    if (eval(this.R.Overall)) return true;
                    if (this.R.Specific != null && this.R.Specific.Any(eval)) return true;
                }
                if (W != null)
                {
                    if (eval(this.W.Overall)) return true;
                    if (this.W.Specific != null && this.W.Specific.Any(eval)) return true;
                }
                if (Y != null)
                {
                    if (eval(this.Y.Overall)) return true;
                    if (this.Y.Specific != null && this.Y.Specific.Any(eval)) return true;
                }
                if (HH != null)
                {
                    if (eval(this.HH.Overall)) return true;
                    if (this.HH.Specific != null && this.HH.Specific.Any(eval)) return true;
                }
                if (B != null)
                {
                    if (eval(this.B.Overall)) return true;
                    if (this.B.Specific != null && this.B.Specific.Any(eval)) return true;
                }
                if (D != null)
                {
                    if (eval(this.D.Overall)) return true;
                    if (this.D.Specific != null && this.D.Specific.Any(eval)) return true;
                }
                if (JH != null)
                {
                    if (eval(this.JH.Overall)) return true;
                    if (this.JH.Specific != null && this.JH.Specific.Any(eval)) return true;
                }
                if (G != null)
                {
                    if (eval(this.G.Overall)) return true;
                    if (this.G.Specific != null && this.G.Specific.Any(eval)) return true;
                }
                if (P != null)
                {
                    if (eval(this.P.Overall)) return true;
                    if (this.P.Specific != null && this.P.Specific.Any(eval)) return true;
                }
                if (T != null)
                {
                    if (eval(this.T.Overall)) return true;
                    if (this.T.Specific != null && this.T.Specific.Any(eval)) return true;
                }
                if (K != null)
                {
                    if (eval(this.K.Overall)) return true;
                    if (this.K.Specific != null && this.K.Specific.Any(eval)) return true;
                }
                if (CH != null)
                {
                    if (eval(this.CH.Overall)) return true;
                    if (this.CH.Specific != null && this.CH.Specific.Any(eval)) return true;
                }
                if (SIL != null)
                {
                    if (eval(this.SIL.Overall)) return true;
                    if (this.SIL.Specific != null && this.SIL.Specific.Any(eval)) return true;
                }
                if (SHOTSIL != null)
                {
                    if (eval(this.SHOTSIL.Overall)) return true;
                    if (this.SHOTSIL.Specific != null && this.SHOTSIL.Specific.Any(eval)) return true;
                }
                if (FLAP != null)
                {
                    if (eval(this.FLAP.Overall)) return true;
                    if (this.FLAP.Specific != null && this.FLAP.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FaceFxPhonemes.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.IY = this.IY == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.IY.Overall), this.IY.Specific?.Translate(eval));
                obj.IH = this.IH == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.IH.Overall), this.IH.Specific?.Translate(eval));
                obj.EH = this.EH == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.EH.Overall), this.EH.Specific?.Translate(eval));
                obj.EY = this.EY == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.EY.Overall), this.EY.Specific?.Translate(eval));
                obj.AE = this.AE == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.AE.Overall), this.AE.Specific?.Translate(eval));
                obj.AA = this.AA == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.AA.Overall), this.AA.Specific?.Translate(eval));
                obj.AW = this.AW == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.AW.Overall), this.AW.Specific?.Translate(eval));
                obj.AY = this.AY == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.AY.Overall), this.AY.Specific?.Translate(eval));
                obj.AH = this.AH == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.AH.Overall), this.AH.Specific?.Translate(eval));
                obj.AO = this.AO == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.AO.Overall), this.AO.Specific?.Translate(eval));
                obj.OY = this.OY == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.OY.Overall), this.OY.Specific?.Translate(eval));
                obj.OW = this.OW == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.OW.Overall), this.OW.Specific?.Translate(eval));
                obj.UH = this.UH == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.UH.Overall), this.UH.Specific?.Translate(eval));
                obj.UW = this.UW == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.UW.Overall), this.UW.Specific?.Translate(eval));
                obj.ER = this.ER == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.ER.Overall), this.ER.Specific?.Translate(eval));
                obj.AX = this.AX == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.AX.Overall), this.AX.Specific?.Translate(eval));
                obj.S = this.S == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.S.Overall), this.S.Specific?.Translate(eval));
                obj.SH = this.SH == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.SH.Overall), this.SH.Specific?.Translate(eval));
                obj.Z = this.Z == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.Z.Overall), this.Z.Specific?.Translate(eval));
                obj.ZH = this.ZH == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.ZH.Overall), this.ZH.Specific?.Translate(eval));
                obj.F = this.F == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.F.Overall), this.F.Specific?.Translate(eval));
                obj.TH = this.TH == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.TH.Overall), this.TH.Specific?.Translate(eval));
                obj.V = this.V == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.V.Overall), this.V.Specific?.Translate(eval));
                obj.DH = this.DH == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.DH.Overall), this.DH.Specific?.Translate(eval));
                obj.M = this.M == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.M.Overall), this.M.Specific?.Translate(eval));
                obj.N = this.N == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.N.Overall), this.N.Specific?.Translate(eval));
                obj.NG = this.NG == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.NG.Overall), this.NG.Specific?.Translate(eval));
                obj.L = this.L == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.L.Overall), this.L.Specific?.Translate(eval));
                obj.R = this.R == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.R.Overall), this.R.Specific?.Translate(eval));
                obj.W = this.W == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.W.Overall), this.W.Specific?.Translate(eval));
                obj.Y = this.Y == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.Y.Overall), this.Y.Specific?.Translate(eval));
                obj.HH = this.HH == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.HH.Overall), this.HH.Specific?.Translate(eval));
                obj.B = this.B == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.B.Overall), this.B.Specific?.Translate(eval));
                obj.D = this.D == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.D.Overall), this.D.Specific?.Translate(eval));
                obj.JH = this.JH == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.JH.Overall), this.JH.Specific?.Translate(eval));
                obj.G = this.G == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.G.Overall), this.G.Specific?.Translate(eval));
                obj.P = this.P == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.P.Overall), this.P.Specific?.Translate(eval));
                obj.T = this.T == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.T.Overall), this.T.Specific?.Translate(eval));
                obj.K = this.K == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.K.Overall), this.K.Specific?.Translate(eval));
                obj.CH = this.CH == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.CH.Overall), this.CH.Specific?.Translate(eval));
                obj.SIL = this.SIL == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.SIL.Overall), this.SIL.Specific?.Translate(eval));
                obj.SHOTSIL = this.SHOTSIL == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.SHOTSIL.Overall), this.SHOTSIL.Specific?.Translate(eval));
                obj.FLAP = this.FLAP == null ? null : new MaskItem<R, PhonemeTarget.Mask<R>?>(eval(this.FLAP.Overall), this.FLAP.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(FaceFxPhonemes.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, FaceFxPhonemes.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(FaceFxPhonemes.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.IY?.Overall ?? true)
                    {
                        IY?.ToString(fg);
                    }
                    if (printMask?.IH?.Overall ?? true)
                    {
                        IH?.ToString(fg);
                    }
                    if (printMask?.EH?.Overall ?? true)
                    {
                        EH?.ToString(fg);
                    }
                    if (printMask?.EY?.Overall ?? true)
                    {
                        EY?.ToString(fg);
                    }
                    if (printMask?.AE?.Overall ?? true)
                    {
                        AE?.ToString(fg);
                    }
                    if (printMask?.AA?.Overall ?? true)
                    {
                        AA?.ToString(fg);
                    }
                    if (printMask?.AW?.Overall ?? true)
                    {
                        AW?.ToString(fg);
                    }
                    if (printMask?.AY?.Overall ?? true)
                    {
                        AY?.ToString(fg);
                    }
                    if (printMask?.AH?.Overall ?? true)
                    {
                        AH?.ToString(fg);
                    }
                    if (printMask?.AO?.Overall ?? true)
                    {
                        AO?.ToString(fg);
                    }
                    if (printMask?.OY?.Overall ?? true)
                    {
                        OY?.ToString(fg);
                    }
                    if (printMask?.OW?.Overall ?? true)
                    {
                        OW?.ToString(fg);
                    }
                    if (printMask?.UH?.Overall ?? true)
                    {
                        UH?.ToString(fg);
                    }
                    if (printMask?.UW?.Overall ?? true)
                    {
                        UW?.ToString(fg);
                    }
                    if (printMask?.ER?.Overall ?? true)
                    {
                        ER?.ToString(fg);
                    }
                    if (printMask?.AX?.Overall ?? true)
                    {
                        AX?.ToString(fg);
                    }
                    if (printMask?.S?.Overall ?? true)
                    {
                        S?.ToString(fg);
                    }
                    if (printMask?.SH?.Overall ?? true)
                    {
                        SH?.ToString(fg);
                    }
                    if (printMask?.Z?.Overall ?? true)
                    {
                        Z?.ToString(fg);
                    }
                    if (printMask?.ZH?.Overall ?? true)
                    {
                        ZH?.ToString(fg);
                    }
                    if (printMask?.F?.Overall ?? true)
                    {
                        F?.ToString(fg);
                    }
                    if (printMask?.TH?.Overall ?? true)
                    {
                        TH?.ToString(fg);
                    }
                    if (printMask?.V?.Overall ?? true)
                    {
                        V?.ToString(fg);
                    }
                    if (printMask?.DH?.Overall ?? true)
                    {
                        DH?.ToString(fg);
                    }
                    if (printMask?.M?.Overall ?? true)
                    {
                        M?.ToString(fg);
                    }
                    if (printMask?.N?.Overall ?? true)
                    {
                        N?.ToString(fg);
                    }
                    if (printMask?.NG?.Overall ?? true)
                    {
                        NG?.ToString(fg);
                    }
                    if (printMask?.L?.Overall ?? true)
                    {
                        L?.ToString(fg);
                    }
                    if (printMask?.R?.Overall ?? true)
                    {
                        R?.ToString(fg);
                    }
                    if (printMask?.W?.Overall ?? true)
                    {
                        W?.ToString(fg);
                    }
                    if (printMask?.Y?.Overall ?? true)
                    {
                        Y?.ToString(fg);
                    }
                    if (printMask?.HH?.Overall ?? true)
                    {
                        HH?.ToString(fg);
                    }
                    if (printMask?.B?.Overall ?? true)
                    {
                        B?.ToString(fg);
                    }
                    if (printMask?.D?.Overall ?? true)
                    {
                        D?.ToString(fg);
                    }
                    if (printMask?.JH?.Overall ?? true)
                    {
                        JH?.ToString(fg);
                    }
                    if (printMask?.G?.Overall ?? true)
                    {
                        G?.ToString(fg);
                    }
                    if (printMask?.P?.Overall ?? true)
                    {
                        P?.ToString(fg);
                    }
                    if (printMask?.T?.Overall ?? true)
                    {
                        T?.ToString(fg);
                    }
                    if (printMask?.K?.Overall ?? true)
                    {
                        K?.ToString(fg);
                    }
                    if (printMask?.CH?.Overall ?? true)
                    {
                        CH?.ToString(fg);
                    }
                    if (printMask?.SIL?.Overall ?? true)
                    {
                        SIL?.ToString(fg);
                    }
                    if (printMask?.SHOTSIL?.Overall ?? true)
                    {
                        SHOTSIL?.ToString(fg);
                    }
                    if (printMask?.FLAP?.Overall ?? true)
                    {
                        FLAP?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? IY;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? IH;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? EH;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? EY;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? AE;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? AA;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? AW;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? AY;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? AH;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? AO;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? OY;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? OW;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? UH;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? UW;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? ER;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? AX;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? S;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? SH;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? Z;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? ZH;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? F;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? TH;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? V;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? DH;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? M;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? N;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? NG;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? L;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? R;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? W;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? Y;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? HH;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? B;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? D;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? JH;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? G;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? P;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? T;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? K;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? CH;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? SIL;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? SHOTSIL;
            public MaskItem<Exception?, PhonemeTarget.ErrorMask?>? FLAP;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
                switch (enu)
                {
                    case FaceFxPhonemes_FieldIndex.IY:
                        return IY;
                    case FaceFxPhonemes_FieldIndex.IH:
                        return IH;
                    case FaceFxPhonemes_FieldIndex.EH:
                        return EH;
                    case FaceFxPhonemes_FieldIndex.EY:
                        return EY;
                    case FaceFxPhonemes_FieldIndex.AE:
                        return AE;
                    case FaceFxPhonemes_FieldIndex.AA:
                        return AA;
                    case FaceFxPhonemes_FieldIndex.AW:
                        return AW;
                    case FaceFxPhonemes_FieldIndex.AY:
                        return AY;
                    case FaceFxPhonemes_FieldIndex.AH:
                        return AH;
                    case FaceFxPhonemes_FieldIndex.AO:
                        return AO;
                    case FaceFxPhonemes_FieldIndex.OY:
                        return OY;
                    case FaceFxPhonemes_FieldIndex.OW:
                        return OW;
                    case FaceFxPhonemes_FieldIndex.UH:
                        return UH;
                    case FaceFxPhonemes_FieldIndex.UW:
                        return UW;
                    case FaceFxPhonemes_FieldIndex.ER:
                        return ER;
                    case FaceFxPhonemes_FieldIndex.AX:
                        return AX;
                    case FaceFxPhonemes_FieldIndex.S:
                        return S;
                    case FaceFxPhonemes_FieldIndex.SH:
                        return SH;
                    case FaceFxPhonemes_FieldIndex.Z:
                        return Z;
                    case FaceFxPhonemes_FieldIndex.ZH:
                        return ZH;
                    case FaceFxPhonemes_FieldIndex.F:
                        return F;
                    case FaceFxPhonemes_FieldIndex.TH:
                        return TH;
                    case FaceFxPhonemes_FieldIndex.V:
                        return V;
                    case FaceFxPhonemes_FieldIndex.DH:
                        return DH;
                    case FaceFxPhonemes_FieldIndex.M:
                        return M;
                    case FaceFxPhonemes_FieldIndex.N:
                        return N;
                    case FaceFxPhonemes_FieldIndex.NG:
                        return NG;
                    case FaceFxPhonemes_FieldIndex.L:
                        return L;
                    case FaceFxPhonemes_FieldIndex.R:
                        return R;
                    case FaceFxPhonemes_FieldIndex.W:
                        return W;
                    case FaceFxPhonemes_FieldIndex.Y:
                        return Y;
                    case FaceFxPhonemes_FieldIndex.HH:
                        return HH;
                    case FaceFxPhonemes_FieldIndex.B:
                        return B;
                    case FaceFxPhonemes_FieldIndex.D:
                        return D;
                    case FaceFxPhonemes_FieldIndex.JH:
                        return JH;
                    case FaceFxPhonemes_FieldIndex.G:
                        return G;
                    case FaceFxPhonemes_FieldIndex.P:
                        return P;
                    case FaceFxPhonemes_FieldIndex.T:
                        return T;
                    case FaceFxPhonemes_FieldIndex.K:
                        return K;
                    case FaceFxPhonemes_FieldIndex.CH:
                        return CH;
                    case FaceFxPhonemes_FieldIndex.SIL:
                        return SIL;
                    case FaceFxPhonemes_FieldIndex.SHOTSIL:
                        return SHOTSIL;
                    case FaceFxPhonemes_FieldIndex.FLAP:
                        return FLAP;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
                switch (enu)
                {
                    case FaceFxPhonemes_FieldIndex.IY:
                        this.IY = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.IH:
                        this.IH = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.EH:
                        this.EH = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.EY:
                        this.EY = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.AE:
                        this.AE = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.AA:
                        this.AA = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.AW:
                        this.AW = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.AY:
                        this.AY = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.AH:
                        this.AH = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.AO:
                        this.AO = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.OY:
                        this.OY = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.OW:
                        this.OW = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.UH:
                        this.UH = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.UW:
                        this.UW = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.ER:
                        this.ER = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.AX:
                        this.AX = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.S:
                        this.S = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.SH:
                        this.SH = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.Z:
                        this.Z = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.ZH:
                        this.ZH = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.F:
                        this.F = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.TH:
                        this.TH = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.V:
                        this.V = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.DH:
                        this.DH = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.M:
                        this.M = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.N:
                        this.N = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.NG:
                        this.NG = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.L:
                        this.L = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.R:
                        this.R = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.W:
                        this.W = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.Y:
                        this.Y = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.HH:
                        this.HH = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.B:
                        this.B = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.D:
                        this.D = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.JH:
                        this.JH = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.G:
                        this.G = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.P:
                        this.P = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.T:
                        this.T = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.K:
                        this.K = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.CH:
                        this.CH = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.SIL:
                        this.SIL = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.SHOTSIL:
                        this.SHOTSIL = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.FLAP:
                        this.FLAP = new MaskItem<Exception?, PhonemeTarget.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
                switch (enu)
                {
                    case FaceFxPhonemes_FieldIndex.IY:
                        this.IY = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.IH:
                        this.IH = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.EH:
                        this.EH = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.EY:
                        this.EY = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.AE:
                        this.AE = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.AA:
                        this.AA = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.AW:
                        this.AW = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.AY:
                        this.AY = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.AH:
                        this.AH = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.AO:
                        this.AO = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.OY:
                        this.OY = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.OW:
                        this.OW = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.UH:
                        this.UH = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.UW:
                        this.UW = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.ER:
                        this.ER = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.AX:
                        this.AX = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.S:
                        this.S = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.SH:
                        this.SH = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.Z:
                        this.Z = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.ZH:
                        this.ZH = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.F:
                        this.F = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.TH:
                        this.TH = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.V:
                        this.V = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.DH:
                        this.DH = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.M:
                        this.M = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.N:
                        this.N = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.NG:
                        this.NG = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.L:
                        this.L = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.R:
                        this.R = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.W:
                        this.W = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.Y:
                        this.Y = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.HH:
                        this.HH = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.B:
                        this.B = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.D:
                        this.D = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.JH:
                        this.JH = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.G:
                        this.G = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.P:
                        this.P = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.T:
                        this.T = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.K:
                        this.K = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.CH:
                        this.CH = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.SIL:
                        this.SIL = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.SHOTSIL:
                        this.SHOTSIL = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.FLAP:
                        this.FLAP = (MaskItem<Exception?, PhonemeTarget.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (IY != null) return true;
                if (IH != null) return true;
                if (EH != null) return true;
                if (EY != null) return true;
                if (AE != null) return true;
                if (AA != null) return true;
                if (AW != null) return true;
                if (AY != null) return true;
                if (AH != null) return true;
                if (AO != null) return true;
                if (OY != null) return true;
                if (OW != null) return true;
                if (UH != null) return true;
                if (UW != null) return true;
                if (ER != null) return true;
                if (AX != null) return true;
                if (S != null) return true;
                if (SH != null) return true;
                if (Z != null) return true;
                if (ZH != null) return true;
                if (F != null) return true;
                if (TH != null) return true;
                if (V != null) return true;
                if (DH != null) return true;
                if (M != null) return true;
                if (N != null) return true;
                if (NG != null) return true;
                if (L != null) return true;
                if (R != null) return true;
                if (W != null) return true;
                if (Y != null) return true;
                if (HH != null) return true;
                if (B != null) return true;
                if (D != null) return true;
                if (JH != null) return true;
                if (G != null) return true;
                if (P != null) return true;
                if (T != null) return true;
                if (K != null) return true;
                if (CH != null) return true;
                if (SIL != null) return true;
                if (SHOTSIL != null) return true;
                if (FLAP != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                IY?.ToString(fg);
                IH?.ToString(fg);
                EH?.ToString(fg);
                EY?.ToString(fg);
                AE?.ToString(fg);
                AA?.ToString(fg);
                AW?.ToString(fg);
                AY?.ToString(fg);
                AH?.ToString(fg);
                AO?.ToString(fg);
                OY?.ToString(fg);
                OW?.ToString(fg);
                UH?.ToString(fg);
                UW?.ToString(fg);
                ER?.ToString(fg);
                AX?.ToString(fg);
                S?.ToString(fg);
                SH?.ToString(fg);
                Z?.ToString(fg);
                ZH?.ToString(fg);
                F?.ToString(fg);
                TH?.ToString(fg);
                V?.ToString(fg);
                DH?.ToString(fg);
                M?.ToString(fg);
                N?.ToString(fg);
                NG?.ToString(fg);
                L?.ToString(fg);
                R?.ToString(fg);
                W?.ToString(fg);
                Y?.ToString(fg);
                HH?.ToString(fg);
                B?.ToString(fg);
                D?.ToString(fg);
                JH?.ToString(fg);
                G?.ToString(fg);
                P?.ToString(fg);
                T?.ToString(fg);
                K?.ToString(fg);
                CH?.ToString(fg);
                SIL?.ToString(fg);
                SHOTSIL?.ToString(fg);
                FLAP?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.IY = this.IY.Combine(rhs.IY, (l, r) => l.Combine(r));
                ret.IH = this.IH.Combine(rhs.IH, (l, r) => l.Combine(r));
                ret.EH = this.EH.Combine(rhs.EH, (l, r) => l.Combine(r));
                ret.EY = this.EY.Combine(rhs.EY, (l, r) => l.Combine(r));
                ret.AE = this.AE.Combine(rhs.AE, (l, r) => l.Combine(r));
                ret.AA = this.AA.Combine(rhs.AA, (l, r) => l.Combine(r));
                ret.AW = this.AW.Combine(rhs.AW, (l, r) => l.Combine(r));
                ret.AY = this.AY.Combine(rhs.AY, (l, r) => l.Combine(r));
                ret.AH = this.AH.Combine(rhs.AH, (l, r) => l.Combine(r));
                ret.AO = this.AO.Combine(rhs.AO, (l, r) => l.Combine(r));
                ret.OY = this.OY.Combine(rhs.OY, (l, r) => l.Combine(r));
                ret.OW = this.OW.Combine(rhs.OW, (l, r) => l.Combine(r));
                ret.UH = this.UH.Combine(rhs.UH, (l, r) => l.Combine(r));
                ret.UW = this.UW.Combine(rhs.UW, (l, r) => l.Combine(r));
                ret.ER = this.ER.Combine(rhs.ER, (l, r) => l.Combine(r));
                ret.AX = this.AX.Combine(rhs.AX, (l, r) => l.Combine(r));
                ret.S = this.S.Combine(rhs.S, (l, r) => l.Combine(r));
                ret.SH = this.SH.Combine(rhs.SH, (l, r) => l.Combine(r));
                ret.Z = this.Z.Combine(rhs.Z, (l, r) => l.Combine(r));
                ret.ZH = this.ZH.Combine(rhs.ZH, (l, r) => l.Combine(r));
                ret.F = this.F.Combine(rhs.F, (l, r) => l.Combine(r));
                ret.TH = this.TH.Combine(rhs.TH, (l, r) => l.Combine(r));
                ret.V = this.V.Combine(rhs.V, (l, r) => l.Combine(r));
                ret.DH = this.DH.Combine(rhs.DH, (l, r) => l.Combine(r));
                ret.M = this.M.Combine(rhs.M, (l, r) => l.Combine(r));
                ret.N = this.N.Combine(rhs.N, (l, r) => l.Combine(r));
                ret.NG = this.NG.Combine(rhs.NG, (l, r) => l.Combine(r));
                ret.L = this.L.Combine(rhs.L, (l, r) => l.Combine(r));
                ret.R = this.R.Combine(rhs.R, (l, r) => l.Combine(r));
                ret.W = this.W.Combine(rhs.W, (l, r) => l.Combine(r));
                ret.Y = this.Y.Combine(rhs.Y, (l, r) => l.Combine(r));
                ret.HH = this.HH.Combine(rhs.HH, (l, r) => l.Combine(r));
                ret.B = this.B.Combine(rhs.B, (l, r) => l.Combine(r));
                ret.D = this.D.Combine(rhs.D, (l, r) => l.Combine(r));
                ret.JH = this.JH.Combine(rhs.JH, (l, r) => l.Combine(r));
                ret.G = this.G.Combine(rhs.G, (l, r) => l.Combine(r));
                ret.P = this.P.Combine(rhs.P, (l, r) => l.Combine(r));
                ret.T = this.T.Combine(rhs.T, (l, r) => l.Combine(r));
                ret.K = this.K.Combine(rhs.K, (l, r) => l.Combine(r));
                ret.CH = this.CH.Combine(rhs.CH, (l, r) => l.Combine(r));
                ret.SIL = this.SIL.Combine(rhs.SIL, (l, r) => l.Combine(r));
                ret.SHOTSIL = this.SHOTSIL.Combine(rhs.SHOTSIL, (l, r) => l.Combine(r));
                ret.FLAP = this.FLAP.Combine(rhs.FLAP, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> IY;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> IH;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> EH;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> EY;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> AE;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> AA;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> AW;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> AY;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> AH;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> AO;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> OY;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> OW;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> UH;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> UW;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> ER;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> AX;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> S;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> SH;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> Z;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> ZH;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> F;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> TH;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> V;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> DH;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> M;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> N;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> NG;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> L;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> R;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> W;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> Y;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> HH;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> B;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> D;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> JH;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> G;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> P;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> T;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> K;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> CH;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> SIL;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> SHOTSIL;
            public MaskItem<bool, PhonemeTarget.TranslationMask?> FLAP;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.IY = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.IH = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.EH = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.EY = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.AE = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.AA = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.AW = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.AY = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.AH = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.AO = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.OY = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.OW = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.UH = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.UW = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.ER = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.AX = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.S = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.SH = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.Z = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.ZH = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.F = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.TH = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.V = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.DH = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.M = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.N = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.NG = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.L = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.R = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.W = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.Y = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.HH = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.B = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.D = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.JH = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.G = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.P = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.T = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.K = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.CH = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.SIL = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.SHOTSIL = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
                this.FLAP = new MaskItem<bool, PhonemeTarget.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((IY?.Overall ?? true, IY?.Specific?.GetCrystal()));
                ret.Add((IH?.Overall ?? true, IH?.Specific?.GetCrystal()));
                ret.Add((EH?.Overall ?? true, EH?.Specific?.GetCrystal()));
                ret.Add((EY?.Overall ?? true, EY?.Specific?.GetCrystal()));
                ret.Add((AE?.Overall ?? true, AE?.Specific?.GetCrystal()));
                ret.Add((AA?.Overall ?? true, AA?.Specific?.GetCrystal()));
                ret.Add((AW?.Overall ?? true, AW?.Specific?.GetCrystal()));
                ret.Add((AY?.Overall ?? true, AY?.Specific?.GetCrystal()));
                ret.Add((AH?.Overall ?? true, AH?.Specific?.GetCrystal()));
                ret.Add((AO?.Overall ?? true, AO?.Specific?.GetCrystal()));
                ret.Add((OY?.Overall ?? true, OY?.Specific?.GetCrystal()));
                ret.Add((OW?.Overall ?? true, OW?.Specific?.GetCrystal()));
                ret.Add((UH?.Overall ?? true, UH?.Specific?.GetCrystal()));
                ret.Add((UW?.Overall ?? true, UW?.Specific?.GetCrystal()));
                ret.Add((ER?.Overall ?? true, ER?.Specific?.GetCrystal()));
                ret.Add((AX?.Overall ?? true, AX?.Specific?.GetCrystal()));
                ret.Add((S?.Overall ?? true, S?.Specific?.GetCrystal()));
                ret.Add((SH?.Overall ?? true, SH?.Specific?.GetCrystal()));
                ret.Add((Z?.Overall ?? true, Z?.Specific?.GetCrystal()));
                ret.Add((ZH?.Overall ?? true, ZH?.Specific?.GetCrystal()));
                ret.Add((F?.Overall ?? true, F?.Specific?.GetCrystal()));
                ret.Add((TH?.Overall ?? true, TH?.Specific?.GetCrystal()));
                ret.Add((V?.Overall ?? true, V?.Specific?.GetCrystal()));
                ret.Add((DH?.Overall ?? true, DH?.Specific?.GetCrystal()));
                ret.Add((M?.Overall ?? true, M?.Specific?.GetCrystal()));
                ret.Add((N?.Overall ?? true, N?.Specific?.GetCrystal()));
                ret.Add((NG?.Overall ?? true, NG?.Specific?.GetCrystal()));
                ret.Add((L?.Overall ?? true, L?.Specific?.GetCrystal()));
                ret.Add((R?.Overall ?? true, R?.Specific?.GetCrystal()));
                ret.Add((W?.Overall ?? true, W?.Specific?.GetCrystal()));
                ret.Add((Y?.Overall ?? true, Y?.Specific?.GetCrystal()));
                ret.Add((HH?.Overall ?? true, HH?.Specific?.GetCrystal()));
                ret.Add((B?.Overall ?? true, B?.Specific?.GetCrystal()));
                ret.Add((D?.Overall ?? true, D?.Specific?.GetCrystal()));
                ret.Add((JH?.Overall ?? true, JH?.Specific?.GetCrystal()));
                ret.Add((G?.Overall ?? true, G?.Specific?.GetCrystal()));
                ret.Add((P?.Overall ?? true, P?.Specific?.GetCrystal()));
                ret.Add((T?.Overall ?? true, T?.Specific?.GetCrystal()));
                ret.Add((K?.Overall ?? true, K?.Specific?.GetCrystal()));
                ret.Add((CH?.Overall ?? true, CH?.Specific?.GetCrystal()));
                ret.Add((SIL?.Overall ?? true, SIL?.Specific?.GetCrystal()));
                ret.Add((SHOTSIL?.Overall ?? true, SHOTSIL?.Specific?.GetCrystal()));
                ret.Add((FLAP?.Overall ?? true, FLAP?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = FaceFxPhonemes_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FaceFxPhonemesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FaceFxPhonemesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static FaceFxPhonemes CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static FaceFxPhonemes CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new FaceFxPhonemes();
            ((FaceFxPhonemesSetterCommon)((IFaceFxPhonemesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFaceFxPhonemesGetter)rhs, include);

        void IClearable.Clear()
        {
            ((FaceFxPhonemesSetterCommon)((IFaceFxPhonemesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static FaceFxPhonemes GetNew()
        {
            return new FaceFxPhonemes();
        }

    }
    #endregion

    #region Interface
    public partial interface IFaceFxPhonemes :
        IFaceFxPhonemesGetter,
        ILoquiObjectSetter<IFaceFxPhonemes>
    {
        new PhonemeTarget IY { get; set; }
        new PhonemeTarget IH { get; set; }
        new PhonemeTarget EH { get; set; }
        new PhonemeTarget EY { get; set; }
        new PhonemeTarget AE { get; set; }
        new PhonemeTarget AA { get; set; }
        new PhonemeTarget AW { get; set; }
        new PhonemeTarget AY { get; set; }
        new PhonemeTarget AH { get; set; }
        new PhonemeTarget AO { get; set; }
        new PhonemeTarget OY { get; set; }
        new PhonemeTarget OW { get; set; }
        new PhonemeTarget UH { get; set; }
        new PhonemeTarget UW { get; set; }
        new PhonemeTarget ER { get; set; }
        new PhonemeTarget AX { get; set; }
        new PhonemeTarget S { get; set; }
        new PhonemeTarget SH { get; set; }
        new PhonemeTarget Z { get; set; }
        new PhonemeTarget ZH { get; set; }
        new PhonemeTarget F { get; set; }
        new PhonemeTarget TH { get; set; }
        new PhonemeTarget V { get; set; }
        new PhonemeTarget DH { get; set; }
        new PhonemeTarget M { get; set; }
        new PhonemeTarget N { get; set; }
        new PhonemeTarget NG { get; set; }
        new PhonemeTarget L { get; set; }
        new PhonemeTarget R { get; set; }
        new PhonemeTarget W { get; set; }
        new PhonemeTarget Y { get; set; }
        new PhonemeTarget HH { get; set; }
        new PhonemeTarget B { get; set; }
        new PhonemeTarget D { get; set; }
        new PhonemeTarget JH { get; set; }
        new PhonemeTarget G { get; set; }
        new PhonemeTarget P { get; set; }
        new PhonemeTarget T { get; set; }
        new PhonemeTarget K { get; set; }
        new PhonemeTarget CH { get; set; }
        new PhonemeTarget SIL { get; set; }
        new PhonemeTarget SHOTSIL { get; set; }
        new PhonemeTarget FLAP { get; set; }
    }

    public partial interface IFaceFxPhonemesGetter :
        ILoquiObject,
        ILoquiObject<IFaceFxPhonemesGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        IPhonemeTargetGetter IY { get; }
        IPhonemeTargetGetter IH { get; }
        IPhonemeTargetGetter EH { get; }
        IPhonemeTargetGetter EY { get; }
        IPhonemeTargetGetter AE { get; }
        IPhonemeTargetGetter AA { get; }
        IPhonemeTargetGetter AW { get; }
        IPhonemeTargetGetter AY { get; }
        IPhonemeTargetGetter AH { get; }
        IPhonemeTargetGetter AO { get; }
        IPhonemeTargetGetter OY { get; }
        IPhonemeTargetGetter OW { get; }
        IPhonemeTargetGetter UH { get; }
        IPhonemeTargetGetter UW { get; }
        IPhonemeTargetGetter ER { get; }
        IPhonemeTargetGetter AX { get; }
        IPhonemeTargetGetter S { get; }
        IPhonemeTargetGetter SH { get; }
        IPhonemeTargetGetter Z { get; }
        IPhonemeTargetGetter ZH { get; }
        IPhonemeTargetGetter F { get; }
        IPhonemeTargetGetter TH { get; }
        IPhonemeTargetGetter V { get; }
        IPhonemeTargetGetter DH { get; }
        IPhonemeTargetGetter M { get; }
        IPhonemeTargetGetter N { get; }
        IPhonemeTargetGetter NG { get; }
        IPhonemeTargetGetter L { get; }
        IPhonemeTargetGetter R { get; }
        IPhonemeTargetGetter W { get; }
        IPhonemeTargetGetter Y { get; }
        IPhonemeTargetGetter HH { get; }
        IPhonemeTargetGetter B { get; }
        IPhonemeTargetGetter D { get; }
        IPhonemeTargetGetter JH { get; }
        IPhonemeTargetGetter G { get; }
        IPhonemeTargetGetter P { get; }
        IPhonemeTargetGetter T { get; }
        IPhonemeTargetGetter K { get; }
        IPhonemeTargetGetter CH { get; }
        IPhonemeTargetGetter SIL { get; }
        IPhonemeTargetGetter SHOTSIL { get; }
        IPhonemeTargetGetter FLAP { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FaceFxPhonemesMixIn
    {
        public static void Clear(this IFaceFxPhonemes item)
        {
            ((FaceFxPhonemesSetterCommon)((IFaceFxPhonemesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FaceFxPhonemes.Mask<bool> GetEqualsMask(
            this IFaceFxPhonemesGetter item,
            IFaceFxPhonemesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFaceFxPhonemesGetter item,
            string? name = null,
            FaceFxPhonemes.Mask<bool>? printMask = null)
        {
            return ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFaceFxPhonemesGetter item,
            FileGeneration fg,
            string? name = null,
            FaceFxPhonemes.Mask<bool>? printMask = null)
        {
            ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFaceFxPhonemesGetter item,
            FaceFxPhonemes.Mask<bool?> checkMask)
        {
            return ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static FaceFxPhonemes.Mask<bool> GetHasBeenSetMask(this IFaceFxPhonemesGetter item)
        {
            var ret = new FaceFxPhonemes.Mask<bool>(false);
            ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFaceFxPhonemesGetter item,
            IFaceFxPhonemesGetter rhs)
        {
            return ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IFaceFxPhonemes lhs,
            IFaceFxPhonemesGetter rhs,
            FaceFxPhonemes.TranslationMask? copyMask = null)
        {
            ((FaceFxPhonemesSetterTranslationCommon)((IFaceFxPhonemesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IFaceFxPhonemes lhs,
            IFaceFxPhonemesGetter rhs,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FaceFxPhonemesSetterTranslationCommon)((IFaceFxPhonemesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = FaceFxPhonemes.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFaceFxPhonemes lhs,
            IFaceFxPhonemesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FaceFxPhonemesSetterTranslationCommon)((IFaceFxPhonemesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static FaceFxPhonemes DeepCopy(
            this IFaceFxPhonemesGetter item,
            FaceFxPhonemes.TranslationMask? copyMask = null)
        {
            return ((FaceFxPhonemesSetterTranslationCommon)((IFaceFxPhonemesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FaceFxPhonemes DeepCopy(
            this IFaceFxPhonemesGetter item,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? copyMask = null)
        {
            return ((FaceFxPhonemesSetterTranslationCommon)((IFaceFxPhonemesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FaceFxPhonemes DeepCopy(
            this IFaceFxPhonemesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FaceFxPhonemesSetterTranslationCommon)((IFaceFxPhonemesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            XElement node,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            XElement node,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FaceFxPhonemes.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((FaceFxPhonemesSetterCommon)((IFaceFxPhonemesGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            string path,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            string path,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            string path,
            ErrorMaskBuilder? errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            Stream stream,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            Stream stream,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFaceFxPhonemes item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IFaceFxPhonemes item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FaceFxPhonemesSetterCommon)((IFaceFxPhonemesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum FaceFxPhonemes_FieldIndex
    {
        IY = 0,
        IH = 1,
        EH = 2,
        EY = 3,
        AE = 4,
        AA = 5,
        AW = 6,
        AY = 7,
        AH = 8,
        AO = 9,
        OY = 10,
        OW = 11,
        UH = 12,
        UW = 13,
        ER = 14,
        AX = 15,
        S = 16,
        SH = 17,
        Z = 18,
        ZH = 19,
        F = 20,
        TH = 21,
        V = 22,
        DH = 23,
        M = 24,
        N = 25,
        NG = 26,
        L = 27,
        R = 28,
        W = 29,
        Y = 30,
        HH = 31,
        B = 32,
        D = 33,
        JH = 34,
        G = 35,
        P = 36,
        T = 37,
        K = 38,
        CH = 39,
        SIL = 40,
        SHOTSIL = 41,
        FLAP = 42,
    }
    #endregion

    #region Registration
    public partial class FaceFxPhonemes_Registration : ILoquiRegistration
    {
        public static readonly FaceFxPhonemes_Registration Instance = new FaceFxPhonemes_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 70,
            version: 0);

        public const string GUID = "b965bdb9-1d8c-4efe-8cfa-2f35cd13370a";

        public const ushort AdditionalFieldCount = 43;

        public const ushort FieldCount = 43;

        public static readonly Type MaskType = typeof(FaceFxPhonemes.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FaceFxPhonemes.ErrorMask);

        public static readonly Type ClassType = typeof(FaceFxPhonemes);

        public static readonly Type GetterType = typeof(IFaceFxPhonemesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFaceFxPhonemes);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.FaceFxPhonemes";

        public const string Name = "FaceFxPhonemes";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "IY":
                    return (ushort)FaceFxPhonemes_FieldIndex.IY;
                case "IH":
                    return (ushort)FaceFxPhonemes_FieldIndex.IH;
                case "EH":
                    return (ushort)FaceFxPhonemes_FieldIndex.EH;
                case "EY":
                    return (ushort)FaceFxPhonemes_FieldIndex.EY;
                case "AE":
                    return (ushort)FaceFxPhonemes_FieldIndex.AE;
                case "AA":
                    return (ushort)FaceFxPhonemes_FieldIndex.AA;
                case "AW":
                    return (ushort)FaceFxPhonemes_FieldIndex.AW;
                case "AY":
                    return (ushort)FaceFxPhonemes_FieldIndex.AY;
                case "AH":
                    return (ushort)FaceFxPhonemes_FieldIndex.AH;
                case "AO":
                    return (ushort)FaceFxPhonemes_FieldIndex.AO;
                case "OY":
                    return (ushort)FaceFxPhonemes_FieldIndex.OY;
                case "OW":
                    return (ushort)FaceFxPhonemes_FieldIndex.OW;
                case "UH":
                    return (ushort)FaceFxPhonemes_FieldIndex.UH;
                case "UW":
                    return (ushort)FaceFxPhonemes_FieldIndex.UW;
                case "ER":
                    return (ushort)FaceFxPhonemes_FieldIndex.ER;
                case "AX":
                    return (ushort)FaceFxPhonemes_FieldIndex.AX;
                case "S":
                    return (ushort)FaceFxPhonemes_FieldIndex.S;
                case "SH":
                    return (ushort)FaceFxPhonemes_FieldIndex.SH;
                case "Z":
                    return (ushort)FaceFxPhonemes_FieldIndex.Z;
                case "ZH":
                    return (ushort)FaceFxPhonemes_FieldIndex.ZH;
                case "F":
                    return (ushort)FaceFxPhonemes_FieldIndex.F;
                case "TH":
                    return (ushort)FaceFxPhonemes_FieldIndex.TH;
                case "V":
                    return (ushort)FaceFxPhonemes_FieldIndex.V;
                case "DH":
                    return (ushort)FaceFxPhonemes_FieldIndex.DH;
                case "M":
                    return (ushort)FaceFxPhonemes_FieldIndex.M;
                case "N":
                    return (ushort)FaceFxPhonemes_FieldIndex.N;
                case "NG":
                    return (ushort)FaceFxPhonemes_FieldIndex.NG;
                case "L":
                    return (ushort)FaceFxPhonemes_FieldIndex.L;
                case "R":
                    return (ushort)FaceFxPhonemes_FieldIndex.R;
                case "W":
                    return (ushort)FaceFxPhonemes_FieldIndex.W;
                case "Y":
                    return (ushort)FaceFxPhonemes_FieldIndex.Y;
                case "HH":
                    return (ushort)FaceFxPhonemes_FieldIndex.HH;
                case "B":
                    return (ushort)FaceFxPhonemes_FieldIndex.B;
                case "D":
                    return (ushort)FaceFxPhonemes_FieldIndex.D;
                case "JH":
                    return (ushort)FaceFxPhonemes_FieldIndex.JH;
                case "G":
                    return (ushort)FaceFxPhonemes_FieldIndex.G;
                case "P":
                    return (ushort)FaceFxPhonemes_FieldIndex.P;
                case "T":
                    return (ushort)FaceFxPhonemes_FieldIndex.T;
                case "K":
                    return (ushort)FaceFxPhonemes_FieldIndex.K;
                case "CH":
                    return (ushort)FaceFxPhonemes_FieldIndex.CH;
                case "SIL":
                    return (ushort)FaceFxPhonemes_FieldIndex.SIL;
                case "SHOTSIL":
                    return (ushort)FaceFxPhonemes_FieldIndex.SHOTSIL;
                case "FLAP":
                    return (ushort)FaceFxPhonemes_FieldIndex.FLAP;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
            switch (enu)
            {
                case FaceFxPhonemes_FieldIndex.IY:
                case FaceFxPhonemes_FieldIndex.IH:
                case FaceFxPhonemes_FieldIndex.EH:
                case FaceFxPhonemes_FieldIndex.EY:
                case FaceFxPhonemes_FieldIndex.AE:
                case FaceFxPhonemes_FieldIndex.AA:
                case FaceFxPhonemes_FieldIndex.AW:
                case FaceFxPhonemes_FieldIndex.AY:
                case FaceFxPhonemes_FieldIndex.AH:
                case FaceFxPhonemes_FieldIndex.AO:
                case FaceFxPhonemes_FieldIndex.OY:
                case FaceFxPhonemes_FieldIndex.OW:
                case FaceFxPhonemes_FieldIndex.UH:
                case FaceFxPhonemes_FieldIndex.UW:
                case FaceFxPhonemes_FieldIndex.ER:
                case FaceFxPhonemes_FieldIndex.AX:
                case FaceFxPhonemes_FieldIndex.S:
                case FaceFxPhonemes_FieldIndex.SH:
                case FaceFxPhonemes_FieldIndex.Z:
                case FaceFxPhonemes_FieldIndex.ZH:
                case FaceFxPhonemes_FieldIndex.F:
                case FaceFxPhonemes_FieldIndex.TH:
                case FaceFxPhonemes_FieldIndex.V:
                case FaceFxPhonemes_FieldIndex.DH:
                case FaceFxPhonemes_FieldIndex.M:
                case FaceFxPhonemes_FieldIndex.N:
                case FaceFxPhonemes_FieldIndex.NG:
                case FaceFxPhonemes_FieldIndex.L:
                case FaceFxPhonemes_FieldIndex.R:
                case FaceFxPhonemes_FieldIndex.W:
                case FaceFxPhonemes_FieldIndex.Y:
                case FaceFxPhonemes_FieldIndex.HH:
                case FaceFxPhonemes_FieldIndex.B:
                case FaceFxPhonemes_FieldIndex.D:
                case FaceFxPhonemes_FieldIndex.JH:
                case FaceFxPhonemes_FieldIndex.G:
                case FaceFxPhonemes_FieldIndex.P:
                case FaceFxPhonemes_FieldIndex.T:
                case FaceFxPhonemes_FieldIndex.K:
                case FaceFxPhonemes_FieldIndex.CH:
                case FaceFxPhonemes_FieldIndex.SIL:
                case FaceFxPhonemes_FieldIndex.SHOTSIL:
                case FaceFxPhonemes_FieldIndex.FLAP:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
            switch (enu)
            {
                case FaceFxPhonemes_FieldIndex.IY:
                case FaceFxPhonemes_FieldIndex.IH:
                case FaceFxPhonemes_FieldIndex.EH:
                case FaceFxPhonemes_FieldIndex.EY:
                case FaceFxPhonemes_FieldIndex.AE:
                case FaceFxPhonemes_FieldIndex.AA:
                case FaceFxPhonemes_FieldIndex.AW:
                case FaceFxPhonemes_FieldIndex.AY:
                case FaceFxPhonemes_FieldIndex.AH:
                case FaceFxPhonemes_FieldIndex.AO:
                case FaceFxPhonemes_FieldIndex.OY:
                case FaceFxPhonemes_FieldIndex.OW:
                case FaceFxPhonemes_FieldIndex.UH:
                case FaceFxPhonemes_FieldIndex.UW:
                case FaceFxPhonemes_FieldIndex.ER:
                case FaceFxPhonemes_FieldIndex.AX:
                case FaceFxPhonemes_FieldIndex.S:
                case FaceFxPhonemes_FieldIndex.SH:
                case FaceFxPhonemes_FieldIndex.Z:
                case FaceFxPhonemes_FieldIndex.ZH:
                case FaceFxPhonemes_FieldIndex.F:
                case FaceFxPhonemes_FieldIndex.TH:
                case FaceFxPhonemes_FieldIndex.V:
                case FaceFxPhonemes_FieldIndex.DH:
                case FaceFxPhonemes_FieldIndex.M:
                case FaceFxPhonemes_FieldIndex.N:
                case FaceFxPhonemes_FieldIndex.NG:
                case FaceFxPhonemes_FieldIndex.L:
                case FaceFxPhonemes_FieldIndex.R:
                case FaceFxPhonemes_FieldIndex.W:
                case FaceFxPhonemes_FieldIndex.Y:
                case FaceFxPhonemes_FieldIndex.HH:
                case FaceFxPhonemes_FieldIndex.B:
                case FaceFxPhonemes_FieldIndex.D:
                case FaceFxPhonemes_FieldIndex.JH:
                case FaceFxPhonemes_FieldIndex.G:
                case FaceFxPhonemes_FieldIndex.P:
                case FaceFxPhonemes_FieldIndex.T:
                case FaceFxPhonemes_FieldIndex.K:
                case FaceFxPhonemes_FieldIndex.CH:
                case FaceFxPhonemes_FieldIndex.SIL:
                case FaceFxPhonemes_FieldIndex.SHOTSIL:
                case FaceFxPhonemes_FieldIndex.FLAP:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
            switch (enu)
            {
                case FaceFxPhonemes_FieldIndex.IY:
                case FaceFxPhonemes_FieldIndex.IH:
                case FaceFxPhonemes_FieldIndex.EH:
                case FaceFxPhonemes_FieldIndex.EY:
                case FaceFxPhonemes_FieldIndex.AE:
                case FaceFxPhonemes_FieldIndex.AA:
                case FaceFxPhonemes_FieldIndex.AW:
                case FaceFxPhonemes_FieldIndex.AY:
                case FaceFxPhonemes_FieldIndex.AH:
                case FaceFxPhonemes_FieldIndex.AO:
                case FaceFxPhonemes_FieldIndex.OY:
                case FaceFxPhonemes_FieldIndex.OW:
                case FaceFxPhonemes_FieldIndex.UH:
                case FaceFxPhonemes_FieldIndex.UW:
                case FaceFxPhonemes_FieldIndex.ER:
                case FaceFxPhonemes_FieldIndex.AX:
                case FaceFxPhonemes_FieldIndex.S:
                case FaceFxPhonemes_FieldIndex.SH:
                case FaceFxPhonemes_FieldIndex.Z:
                case FaceFxPhonemes_FieldIndex.ZH:
                case FaceFxPhonemes_FieldIndex.F:
                case FaceFxPhonemes_FieldIndex.TH:
                case FaceFxPhonemes_FieldIndex.V:
                case FaceFxPhonemes_FieldIndex.DH:
                case FaceFxPhonemes_FieldIndex.M:
                case FaceFxPhonemes_FieldIndex.N:
                case FaceFxPhonemes_FieldIndex.NG:
                case FaceFxPhonemes_FieldIndex.L:
                case FaceFxPhonemes_FieldIndex.R:
                case FaceFxPhonemes_FieldIndex.W:
                case FaceFxPhonemes_FieldIndex.Y:
                case FaceFxPhonemes_FieldIndex.HH:
                case FaceFxPhonemes_FieldIndex.B:
                case FaceFxPhonemes_FieldIndex.D:
                case FaceFxPhonemes_FieldIndex.JH:
                case FaceFxPhonemes_FieldIndex.G:
                case FaceFxPhonemes_FieldIndex.P:
                case FaceFxPhonemes_FieldIndex.T:
                case FaceFxPhonemes_FieldIndex.K:
                case FaceFxPhonemes_FieldIndex.CH:
                case FaceFxPhonemes_FieldIndex.SIL:
                case FaceFxPhonemes_FieldIndex.SHOTSIL:
                case FaceFxPhonemes_FieldIndex.FLAP:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
            switch (enu)
            {
                case FaceFxPhonemes_FieldIndex.IY:
                    return "IY";
                case FaceFxPhonemes_FieldIndex.IH:
                    return "IH";
                case FaceFxPhonemes_FieldIndex.EH:
                    return "EH";
                case FaceFxPhonemes_FieldIndex.EY:
                    return "EY";
                case FaceFxPhonemes_FieldIndex.AE:
                    return "AE";
                case FaceFxPhonemes_FieldIndex.AA:
                    return "AA";
                case FaceFxPhonemes_FieldIndex.AW:
                    return "AW";
                case FaceFxPhonemes_FieldIndex.AY:
                    return "AY";
                case FaceFxPhonemes_FieldIndex.AH:
                    return "AH";
                case FaceFxPhonemes_FieldIndex.AO:
                    return "AO";
                case FaceFxPhonemes_FieldIndex.OY:
                    return "OY";
                case FaceFxPhonemes_FieldIndex.OW:
                    return "OW";
                case FaceFxPhonemes_FieldIndex.UH:
                    return "UH";
                case FaceFxPhonemes_FieldIndex.UW:
                    return "UW";
                case FaceFxPhonemes_FieldIndex.ER:
                    return "ER";
                case FaceFxPhonemes_FieldIndex.AX:
                    return "AX";
                case FaceFxPhonemes_FieldIndex.S:
                    return "S";
                case FaceFxPhonemes_FieldIndex.SH:
                    return "SH";
                case FaceFxPhonemes_FieldIndex.Z:
                    return "Z";
                case FaceFxPhonemes_FieldIndex.ZH:
                    return "ZH";
                case FaceFxPhonemes_FieldIndex.F:
                    return "F";
                case FaceFxPhonemes_FieldIndex.TH:
                    return "TH";
                case FaceFxPhonemes_FieldIndex.V:
                    return "V";
                case FaceFxPhonemes_FieldIndex.DH:
                    return "DH";
                case FaceFxPhonemes_FieldIndex.M:
                    return "M";
                case FaceFxPhonemes_FieldIndex.N:
                    return "N";
                case FaceFxPhonemes_FieldIndex.NG:
                    return "NG";
                case FaceFxPhonemes_FieldIndex.L:
                    return "L";
                case FaceFxPhonemes_FieldIndex.R:
                    return "R";
                case FaceFxPhonemes_FieldIndex.W:
                    return "W";
                case FaceFxPhonemes_FieldIndex.Y:
                    return "Y";
                case FaceFxPhonemes_FieldIndex.HH:
                    return "HH";
                case FaceFxPhonemes_FieldIndex.B:
                    return "B";
                case FaceFxPhonemes_FieldIndex.D:
                    return "D";
                case FaceFxPhonemes_FieldIndex.JH:
                    return "JH";
                case FaceFxPhonemes_FieldIndex.G:
                    return "G";
                case FaceFxPhonemes_FieldIndex.P:
                    return "P";
                case FaceFxPhonemes_FieldIndex.T:
                    return "T";
                case FaceFxPhonemes_FieldIndex.K:
                    return "K";
                case FaceFxPhonemes_FieldIndex.CH:
                    return "CH";
                case FaceFxPhonemes_FieldIndex.SIL:
                    return "SIL";
                case FaceFxPhonemes_FieldIndex.SHOTSIL:
                    return "SHOTSIL";
                case FaceFxPhonemes_FieldIndex.FLAP:
                    return "FLAP";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
            switch (enu)
            {
                case FaceFxPhonemes_FieldIndex.IY:
                case FaceFxPhonemes_FieldIndex.IH:
                case FaceFxPhonemes_FieldIndex.EH:
                case FaceFxPhonemes_FieldIndex.EY:
                case FaceFxPhonemes_FieldIndex.AE:
                case FaceFxPhonemes_FieldIndex.AA:
                case FaceFxPhonemes_FieldIndex.AW:
                case FaceFxPhonemes_FieldIndex.AY:
                case FaceFxPhonemes_FieldIndex.AH:
                case FaceFxPhonemes_FieldIndex.AO:
                case FaceFxPhonemes_FieldIndex.OY:
                case FaceFxPhonemes_FieldIndex.OW:
                case FaceFxPhonemes_FieldIndex.UH:
                case FaceFxPhonemes_FieldIndex.UW:
                case FaceFxPhonemes_FieldIndex.ER:
                case FaceFxPhonemes_FieldIndex.AX:
                case FaceFxPhonemes_FieldIndex.S:
                case FaceFxPhonemes_FieldIndex.SH:
                case FaceFxPhonemes_FieldIndex.Z:
                case FaceFxPhonemes_FieldIndex.ZH:
                case FaceFxPhonemes_FieldIndex.F:
                case FaceFxPhonemes_FieldIndex.TH:
                case FaceFxPhonemes_FieldIndex.V:
                case FaceFxPhonemes_FieldIndex.DH:
                case FaceFxPhonemes_FieldIndex.M:
                case FaceFxPhonemes_FieldIndex.N:
                case FaceFxPhonemes_FieldIndex.NG:
                case FaceFxPhonemes_FieldIndex.L:
                case FaceFxPhonemes_FieldIndex.R:
                case FaceFxPhonemes_FieldIndex.W:
                case FaceFxPhonemes_FieldIndex.Y:
                case FaceFxPhonemes_FieldIndex.HH:
                case FaceFxPhonemes_FieldIndex.B:
                case FaceFxPhonemes_FieldIndex.D:
                case FaceFxPhonemes_FieldIndex.JH:
                case FaceFxPhonemes_FieldIndex.G:
                case FaceFxPhonemes_FieldIndex.P:
                case FaceFxPhonemes_FieldIndex.T:
                case FaceFxPhonemes_FieldIndex.K:
                case FaceFxPhonemes_FieldIndex.CH:
                case FaceFxPhonemes_FieldIndex.SIL:
                case FaceFxPhonemes_FieldIndex.SHOTSIL:
                case FaceFxPhonemes_FieldIndex.FLAP:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
            switch (enu)
            {
                case FaceFxPhonemes_FieldIndex.IY:
                case FaceFxPhonemes_FieldIndex.IH:
                case FaceFxPhonemes_FieldIndex.EH:
                case FaceFxPhonemes_FieldIndex.EY:
                case FaceFxPhonemes_FieldIndex.AE:
                case FaceFxPhonemes_FieldIndex.AA:
                case FaceFxPhonemes_FieldIndex.AW:
                case FaceFxPhonemes_FieldIndex.AY:
                case FaceFxPhonemes_FieldIndex.AH:
                case FaceFxPhonemes_FieldIndex.AO:
                case FaceFxPhonemes_FieldIndex.OY:
                case FaceFxPhonemes_FieldIndex.OW:
                case FaceFxPhonemes_FieldIndex.UH:
                case FaceFxPhonemes_FieldIndex.UW:
                case FaceFxPhonemes_FieldIndex.ER:
                case FaceFxPhonemes_FieldIndex.AX:
                case FaceFxPhonemes_FieldIndex.S:
                case FaceFxPhonemes_FieldIndex.SH:
                case FaceFxPhonemes_FieldIndex.Z:
                case FaceFxPhonemes_FieldIndex.ZH:
                case FaceFxPhonemes_FieldIndex.F:
                case FaceFxPhonemes_FieldIndex.TH:
                case FaceFxPhonemes_FieldIndex.V:
                case FaceFxPhonemes_FieldIndex.DH:
                case FaceFxPhonemes_FieldIndex.M:
                case FaceFxPhonemes_FieldIndex.N:
                case FaceFxPhonemes_FieldIndex.NG:
                case FaceFxPhonemes_FieldIndex.L:
                case FaceFxPhonemes_FieldIndex.R:
                case FaceFxPhonemes_FieldIndex.W:
                case FaceFxPhonemes_FieldIndex.Y:
                case FaceFxPhonemes_FieldIndex.HH:
                case FaceFxPhonemes_FieldIndex.B:
                case FaceFxPhonemes_FieldIndex.D:
                case FaceFxPhonemes_FieldIndex.JH:
                case FaceFxPhonemes_FieldIndex.G:
                case FaceFxPhonemes_FieldIndex.P:
                case FaceFxPhonemes_FieldIndex.T:
                case FaceFxPhonemes_FieldIndex.K:
                case FaceFxPhonemes_FieldIndex.CH:
                case FaceFxPhonemes_FieldIndex.SIL:
                case FaceFxPhonemes_FieldIndex.SHOTSIL:
                case FaceFxPhonemes_FieldIndex.FLAP:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
            switch (enu)
            {
                case FaceFxPhonemes_FieldIndex.IY:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.IH:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.EH:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.EY:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.AE:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.AA:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.AW:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.AY:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.AH:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.AO:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.OY:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.OW:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.UH:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.UW:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.ER:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.AX:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.S:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.SH:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.Z:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.ZH:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.F:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.TH:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.V:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.DH:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.M:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.N:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.NG:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.L:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.R:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.W:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.Y:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.HH:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.B:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.D:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.JH:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.G:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.P:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.T:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.K:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.CH:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.SIL:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.SHOTSIL:
                    return typeof(PhonemeTarget);
                case FaceFxPhonemes_FieldIndex.FLAP:
                    return typeof(PhonemeTarget);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FaceFxPhonemesXmlWriteTranslation);
        public static readonly RecordType PHWT_HEADER = new RecordType("PHWT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = PHWT_HEADER;
        public const int NumStructFields = 43;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(FaceFxPhonemesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FaceFxPhonemesSetterCommon
    {
        public static readonly FaceFxPhonemesSetterCommon Instance = new FaceFxPhonemesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFaceFxPhonemes item)
        {
            ClearPartial();
            item.IY.Clear();
            item.IH.Clear();
            item.EH.Clear();
            item.EY.Clear();
            item.AE.Clear();
            item.AA.Clear();
            item.AW.Clear();
            item.AY.Clear();
            item.AH.Clear();
            item.AO.Clear();
            item.OY.Clear();
            item.OW.Clear();
            item.UH.Clear();
            item.UW.Clear();
            item.ER.Clear();
            item.AX.Clear();
            item.S.Clear();
            item.SH.Clear();
            item.Z.Clear();
            item.ZH.Clear();
            item.F.Clear();
            item.TH.Clear();
            item.V.Clear();
            item.DH.Clear();
            item.M.Clear();
            item.N.Clear();
            item.NG.Clear();
            item.L.Clear();
            item.R.Clear();
            item.W.Clear();
            item.Y.Clear();
            item.HH.Clear();
            item.B.Clear();
            item.D.Clear();
            item.JH.Clear();
            item.G.Clear();
            item.P.Clear();
            item.T.Clear();
            item.K.Clear();
            item.CH.Clear();
            item.SIL.Clear();
            item.SHOTSIL.Clear();
            item.FLAP.Clear();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IFaceFxPhonemes item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FaceFxPhonemesXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IFaceFxPhonemes item,
            MutagenFrame frame)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IFaceFxPhonemes item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54574850: // PHWT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FaceFxPhonemes_FieldIndex.IY) return TryGet<int?>.Failure;
                    FaceFxPhonemesBinaryCreateTranslation.FillBinaryParsingCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed(lastParsed);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IFaceFxPhonemes item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class FaceFxPhonemesCommon
    {
        public static readonly FaceFxPhonemesCommon Instance = new FaceFxPhonemesCommon();

        public FaceFxPhonemes.Mask<bool> GetEqualsMask(
            IFaceFxPhonemesGetter item,
            IFaceFxPhonemesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FaceFxPhonemes.Mask<bool>(false);
            ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFaceFxPhonemesGetter item,
            IFaceFxPhonemesGetter rhs,
            FaceFxPhonemes.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.IY = MaskItemExt.Factory(item.IY.GetEqualsMask(rhs.IY, include), include);
            ret.IH = MaskItemExt.Factory(item.IH.GetEqualsMask(rhs.IH, include), include);
            ret.EH = MaskItemExt.Factory(item.EH.GetEqualsMask(rhs.EH, include), include);
            ret.EY = MaskItemExt.Factory(item.EY.GetEqualsMask(rhs.EY, include), include);
            ret.AE = MaskItemExt.Factory(item.AE.GetEqualsMask(rhs.AE, include), include);
            ret.AA = MaskItemExt.Factory(item.AA.GetEqualsMask(rhs.AA, include), include);
            ret.AW = MaskItemExt.Factory(item.AW.GetEqualsMask(rhs.AW, include), include);
            ret.AY = MaskItemExt.Factory(item.AY.GetEqualsMask(rhs.AY, include), include);
            ret.AH = MaskItemExt.Factory(item.AH.GetEqualsMask(rhs.AH, include), include);
            ret.AO = MaskItemExt.Factory(item.AO.GetEqualsMask(rhs.AO, include), include);
            ret.OY = MaskItemExt.Factory(item.OY.GetEqualsMask(rhs.OY, include), include);
            ret.OW = MaskItemExt.Factory(item.OW.GetEqualsMask(rhs.OW, include), include);
            ret.UH = MaskItemExt.Factory(item.UH.GetEqualsMask(rhs.UH, include), include);
            ret.UW = MaskItemExt.Factory(item.UW.GetEqualsMask(rhs.UW, include), include);
            ret.ER = MaskItemExt.Factory(item.ER.GetEqualsMask(rhs.ER, include), include);
            ret.AX = MaskItemExt.Factory(item.AX.GetEqualsMask(rhs.AX, include), include);
            ret.S = MaskItemExt.Factory(item.S.GetEqualsMask(rhs.S, include), include);
            ret.SH = MaskItemExt.Factory(item.SH.GetEqualsMask(rhs.SH, include), include);
            ret.Z = MaskItemExt.Factory(item.Z.GetEqualsMask(rhs.Z, include), include);
            ret.ZH = MaskItemExt.Factory(item.ZH.GetEqualsMask(rhs.ZH, include), include);
            ret.F = MaskItemExt.Factory(item.F.GetEqualsMask(rhs.F, include), include);
            ret.TH = MaskItemExt.Factory(item.TH.GetEqualsMask(rhs.TH, include), include);
            ret.V = MaskItemExt.Factory(item.V.GetEqualsMask(rhs.V, include), include);
            ret.DH = MaskItemExt.Factory(item.DH.GetEqualsMask(rhs.DH, include), include);
            ret.M = MaskItemExt.Factory(item.M.GetEqualsMask(rhs.M, include), include);
            ret.N = MaskItemExt.Factory(item.N.GetEqualsMask(rhs.N, include), include);
            ret.NG = MaskItemExt.Factory(item.NG.GetEqualsMask(rhs.NG, include), include);
            ret.L = MaskItemExt.Factory(item.L.GetEqualsMask(rhs.L, include), include);
            ret.R = MaskItemExt.Factory(item.R.GetEqualsMask(rhs.R, include), include);
            ret.W = MaskItemExt.Factory(item.W.GetEqualsMask(rhs.W, include), include);
            ret.Y = MaskItemExt.Factory(item.Y.GetEqualsMask(rhs.Y, include), include);
            ret.HH = MaskItemExt.Factory(item.HH.GetEqualsMask(rhs.HH, include), include);
            ret.B = MaskItemExt.Factory(item.B.GetEqualsMask(rhs.B, include), include);
            ret.D = MaskItemExt.Factory(item.D.GetEqualsMask(rhs.D, include), include);
            ret.JH = MaskItemExt.Factory(item.JH.GetEqualsMask(rhs.JH, include), include);
            ret.G = MaskItemExt.Factory(item.G.GetEqualsMask(rhs.G, include), include);
            ret.P = MaskItemExt.Factory(item.P.GetEqualsMask(rhs.P, include), include);
            ret.T = MaskItemExt.Factory(item.T.GetEqualsMask(rhs.T, include), include);
            ret.K = MaskItemExt.Factory(item.K.GetEqualsMask(rhs.K, include), include);
            ret.CH = MaskItemExt.Factory(item.CH.GetEqualsMask(rhs.CH, include), include);
            ret.SIL = MaskItemExt.Factory(item.SIL.GetEqualsMask(rhs.SIL, include), include);
            ret.SHOTSIL = MaskItemExt.Factory(item.SHOTSIL.GetEqualsMask(rhs.SHOTSIL, include), include);
            ret.FLAP = MaskItemExt.Factory(item.FLAP.GetEqualsMask(rhs.FLAP, include), include);
        }
        
        public string ToString(
            IFaceFxPhonemesGetter item,
            string? name = null,
            FaceFxPhonemes.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFaceFxPhonemesGetter item,
            FileGeneration fg,
            string? name = null,
            FaceFxPhonemes.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"FaceFxPhonemes =>");
            }
            else
            {
                fg.AppendLine($"{name} (FaceFxPhonemes) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFaceFxPhonemesGetter item,
            FileGeneration fg,
            FaceFxPhonemes.Mask<bool>? printMask = null)
        {
            if (printMask?.IY?.Overall ?? true)
            {
                item.IY?.ToString(fg, "IY");
            }
            if (printMask?.IH?.Overall ?? true)
            {
                item.IH?.ToString(fg, "IH");
            }
            if (printMask?.EH?.Overall ?? true)
            {
                item.EH?.ToString(fg, "EH");
            }
            if (printMask?.EY?.Overall ?? true)
            {
                item.EY?.ToString(fg, "EY");
            }
            if (printMask?.AE?.Overall ?? true)
            {
                item.AE?.ToString(fg, "AE");
            }
            if (printMask?.AA?.Overall ?? true)
            {
                item.AA?.ToString(fg, "AA");
            }
            if (printMask?.AW?.Overall ?? true)
            {
                item.AW?.ToString(fg, "AW");
            }
            if (printMask?.AY?.Overall ?? true)
            {
                item.AY?.ToString(fg, "AY");
            }
            if (printMask?.AH?.Overall ?? true)
            {
                item.AH?.ToString(fg, "AH");
            }
            if (printMask?.AO?.Overall ?? true)
            {
                item.AO?.ToString(fg, "AO");
            }
            if (printMask?.OY?.Overall ?? true)
            {
                item.OY?.ToString(fg, "OY");
            }
            if (printMask?.OW?.Overall ?? true)
            {
                item.OW?.ToString(fg, "OW");
            }
            if (printMask?.UH?.Overall ?? true)
            {
                item.UH?.ToString(fg, "UH");
            }
            if (printMask?.UW?.Overall ?? true)
            {
                item.UW?.ToString(fg, "UW");
            }
            if (printMask?.ER?.Overall ?? true)
            {
                item.ER?.ToString(fg, "ER");
            }
            if (printMask?.AX?.Overall ?? true)
            {
                item.AX?.ToString(fg, "AX");
            }
            if (printMask?.S?.Overall ?? true)
            {
                item.S?.ToString(fg, "S");
            }
            if (printMask?.SH?.Overall ?? true)
            {
                item.SH?.ToString(fg, "SH");
            }
            if (printMask?.Z?.Overall ?? true)
            {
                item.Z?.ToString(fg, "Z");
            }
            if (printMask?.ZH?.Overall ?? true)
            {
                item.ZH?.ToString(fg, "ZH");
            }
            if (printMask?.F?.Overall ?? true)
            {
                item.F?.ToString(fg, "F");
            }
            if (printMask?.TH?.Overall ?? true)
            {
                item.TH?.ToString(fg, "TH");
            }
            if (printMask?.V?.Overall ?? true)
            {
                item.V?.ToString(fg, "V");
            }
            if (printMask?.DH?.Overall ?? true)
            {
                item.DH?.ToString(fg, "DH");
            }
            if (printMask?.M?.Overall ?? true)
            {
                item.M?.ToString(fg, "M");
            }
            if (printMask?.N?.Overall ?? true)
            {
                item.N?.ToString(fg, "N");
            }
            if (printMask?.NG?.Overall ?? true)
            {
                item.NG?.ToString(fg, "NG");
            }
            if (printMask?.L?.Overall ?? true)
            {
                item.L?.ToString(fg, "L");
            }
            if (printMask?.R?.Overall ?? true)
            {
                item.R?.ToString(fg, "R");
            }
            if (printMask?.W?.Overall ?? true)
            {
                item.W?.ToString(fg, "W");
            }
            if (printMask?.Y?.Overall ?? true)
            {
                item.Y?.ToString(fg, "Y");
            }
            if (printMask?.HH?.Overall ?? true)
            {
                item.HH?.ToString(fg, "HH");
            }
            if (printMask?.B?.Overall ?? true)
            {
                item.B?.ToString(fg, "B");
            }
            if (printMask?.D?.Overall ?? true)
            {
                item.D?.ToString(fg, "D");
            }
            if (printMask?.JH?.Overall ?? true)
            {
                item.JH?.ToString(fg, "JH");
            }
            if (printMask?.G?.Overall ?? true)
            {
                item.G?.ToString(fg, "G");
            }
            if (printMask?.P?.Overall ?? true)
            {
                item.P?.ToString(fg, "P");
            }
            if (printMask?.T?.Overall ?? true)
            {
                item.T?.ToString(fg, "T");
            }
            if (printMask?.K?.Overall ?? true)
            {
                item.K?.ToString(fg, "K");
            }
            if (printMask?.CH?.Overall ?? true)
            {
                item.CH?.ToString(fg, "CH");
            }
            if (printMask?.SIL?.Overall ?? true)
            {
                item.SIL?.ToString(fg, "SIL");
            }
            if (printMask?.SHOTSIL?.Overall ?? true)
            {
                item.SHOTSIL?.ToString(fg, "SHOTSIL");
            }
            if (printMask?.FLAP?.Overall ?? true)
            {
                item.FLAP?.ToString(fg, "FLAP");
            }
        }
        
        public bool HasBeenSet(
            IFaceFxPhonemesGetter item,
            FaceFxPhonemes.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IFaceFxPhonemesGetter item,
            FaceFxPhonemes.Mask<bool> mask)
        {
            mask.IY = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.IY?.GetHasBeenSetMask());
            mask.IH = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.IH?.GetHasBeenSetMask());
            mask.EH = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.EH?.GetHasBeenSetMask());
            mask.EY = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.EY?.GetHasBeenSetMask());
            mask.AE = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.AE?.GetHasBeenSetMask());
            mask.AA = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.AA?.GetHasBeenSetMask());
            mask.AW = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.AW?.GetHasBeenSetMask());
            mask.AY = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.AY?.GetHasBeenSetMask());
            mask.AH = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.AH?.GetHasBeenSetMask());
            mask.AO = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.AO?.GetHasBeenSetMask());
            mask.OY = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.OY?.GetHasBeenSetMask());
            mask.OW = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.OW?.GetHasBeenSetMask());
            mask.UH = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.UH?.GetHasBeenSetMask());
            mask.UW = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.UW?.GetHasBeenSetMask());
            mask.ER = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.ER?.GetHasBeenSetMask());
            mask.AX = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.AX?.GetHasBeenSetMask());
            mask.S = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.S?.GetHasBeenSetMask());
            mask.SH = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.SH?.GetHasBeenSetMask());
            mask.Z = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.Z?.GetHasBeenSetMask());
            mask.ZH = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.ZH?.GetHasBeenSetMask());
            mask.F = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.F?.GetHasBeenSetMask());
            mask.TH = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.TH?.GetHasBeenSetMask());
            mask.V = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.V?.GetHasBeenSetMask());
            mask.DH = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.DH?.GetHasBeenSetMask());
            mask.M = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.M?.GetHasBeenSetMask());
            mask.N = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.N?.GetHasBeenSetMask());
            mask.NG = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.NG?.GetHasBeenSetMask());
            mask.L = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.L?.GetHasBeenSetMask());
            mask.R = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.R?.GetHasBeenSetMask());
            mask.W = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.W?.GetHasBeenSetMask());
            mask.Y = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.Y?.GetHasBeenSetMask());
            mask.HH = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.HH?.GetHasBeenSetMask());
            mask.B = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.B?.GetHasBeenSetMask());
            mask.D = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.D?.GetHasBeenSetMask());
            mask.JH = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.JH?.GetHasBeenSetMask());
            mask.G = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.G?.GetHasBeenSetMask());
            mask.P = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.P?.GetHasBeenSetMask());
            mask.T = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.T?.GetHasBeenSetMask());
            mask.K = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.K?.GetHasBeenSetMask());
            mask.CH = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.CH?.GetHasBeenSetMask());
            mask.SIL = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.SIL?.GetHasBeenSetMask());
            mask.SHOTSIL = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.SHOTSIL?.GetHasBeenSetMask());
            mask.FLAP = new MaskItem<bool, PhonemeTarget.Mask<bool>?>(true, item.FLAP?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFaceFxPhonemesGetter? lhs,
            IFaceFxPhonemesGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.IY, rhs.IY)) return false;
            if (!object.Equals(lhs.IH, rhs.IH)) return false;
            if (!object.Equals(lhs.EH, rhs.EH)) return false;
            if (!object.Equals(lhs.EY, rhs.EY)) return false;
            if (!object.Equals(lhs.AE, rhs.AE)) return false;
            if (!object.Equals(lhs.AA, rhs.AA)) return false;
            if (!object.Equals(lhs.AW, rhs.AW)) return false;
            if (!object.Equals(lhs.AY, rhs.AY)) return false;
            if (!object.Equals(lhs.AH, rhs.AH)) return false;
            if (!object.Equals(lhs.AO, rhs.AO)) return false;
            if (!object.Equals(lhs.OY, rhs.OY)) return false;
            if (!object.Equals(lhs.OW, rhs.OW)) return false;
            if (!object.Equals(lhs.UH, rhs.UH)) return false;
            if (!object.Equals(lhs.UW, rhs.UW)) return false;
            if (!object.Equals(lhs.ER, rhs.ER)) return false;
            if (!object.Equals(lhs.AX, rhs.AX)) return false;
            if (!object.Equals(lhs.S, rhs.S)) return false;
            if (!object.Equals(lhs.SH, rhs.SH)) return false;
            if (!object.Equals(lhs.Z, rhs.Z)) return false;
            if (!object.Equals(lhs.ZH, rhs.ZH)) return false;
            if (!object.Equals(lhs.F, rhs.F)) return false;
            if (!object.Equals(lhs.TH, rhs.TH)) return false;
            if (!object.Equals(lhs.V, rhs.V)) return false;
            if (!object.Equals(lhs.DH, rhs.DH)) return false;
            if (!object.Equals(lhs.M, rhs.M)) return false;
            if (!object.Equals(lhs.N, rhs.N)) return false;
            if (!object.Equals(lhs.NG, rhs.NG)) return false;
            if (!object.Equals(lhs.L, rhs.L)) return false;
            if (!object.Equals(lhs.R, rhs.R)) return false;
            if (!object.Equals(lhs.W, rhs.W)) return false;
            if (!object.Equals(lhs.Y, rhs.Y)) return false;
            if (!object.Equals(lhs.HH, rhs.HH)) return false;
            if (!object.Equals(lhs.B, rhs.B)) return false;
            if (!object.Equals(lhs.D, rhs.D)) return false;
            if (!object.Equals(lhs.JH, rhs.JH)) return false;
            if (!object.Equals(lhs.G, rhs.G)) return false;
            if (!object.Equals(lhs.P, rhs.P)) return false;
            if (!object.Equals(lhs.T, rhs.T)) return false;
            if (!object.Equals(lhs.K, rhs.K)) return false;
            if (!object.Equals(lhs.CH, rhs.CH)) return false;
            if (!object.Equals(lhs.SIL, rhs.SIL)) return false;
            if (!object.Equals(lhs.SHOTSIL, rhs.SHOTSIL)) return false;
            if (!object.Equals(lhs.FLAP, rhs.FLAP)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IFaceFxPhonemesGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.IY).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.IH).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EH).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EY).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AE).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AA).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AW).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AY).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AH).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AO).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.OY).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.OW).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.UH).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.UW).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ER).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AX).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.S).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SH).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Z).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ZH).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.F).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TH).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.V).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DH).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.M).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.NG).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.L).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.R).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.W).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Y).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.HH).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.B).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.D).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.JH).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.G).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.P).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.T).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.K).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CH).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SIL).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SHOTSIL).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FLAP).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return FaceFxPhonemes.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IFaceFxPhonemesGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class FaceFxPhonemesSetterTranslationCommon
    {
        public static readonly FaceFxPhonemesSetterTranslationCommon Instance = new FaceFxPhonemesSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IFaceFxPhonemes item,
            IFaceFxPhonemesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.IY) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.IY);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.IY) ?? true))
                    {
                        item.IY = rhs.IY.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.IY),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.IH) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.IH);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.IH) ?? true))
                    {
                        item.IH = rhs.IH.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.IH),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.EH) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.EH);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.EH) ?? true))
                    {
                        item.EH = rhs.EH.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.EH),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.EY) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.EY);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.EY) ?? true))
                    {
                        item.EY = rhs.EY.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.EY),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AE) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.AE);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AE) ?? true))
                    {
                        item.AE = rhs.AE.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AE),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AA) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.AA);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AA) ?? true))
                    {
                        item.AA = rhs.AA.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AA),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AW) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.AW);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AW) ?? true))
                    {
                        item.AW = rhs.AW.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AW),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AY) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.AY);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AY) ?? true))
                    {
                        item.AY = rhs.AY.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AY),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AH) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.AH);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AH) ?? true))
                    {
                        item.AH = rhs.AH.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AH),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AO) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.AO);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AO) ?? true))
                    {
                        item.AO = rhs.AO.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AO),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.OY) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.OY);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.OY) ?? true))
                    {
                        item.OY = rhs.OY.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.OY),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.OW) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.OW);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.OW) ?? true))
                    {
                        item.OW = rhs.OW.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.OW),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.UH) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.UH);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.UH) ?? true))
                    {
                        item.UH = rhs.UH.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.UH),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.UW) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.UW);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.UW) ?? true))
                    {
                        item.UW = rhs.UW.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.UW),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.ER) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.ER);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.ER) ?? true))
                    {
                        item.ER = rhs.ER.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.ER),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AX) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.AX);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AX) ?? true))
                    {
                        item.AX = rhs.AX.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AX),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.S) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.S);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.S) ?? true))
                    {
                        item.S = rhs.S.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.S),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.SH) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.SH);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.SH) ?? true))
                    {
                        item.SH = rhs.SH.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.SH),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Z) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.Z);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Z) ?? true))
                    {
                        item.Z = rhs.Z.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Z),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.ZH) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.ZH);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.ZH) ?? true))
                    {
                        item.ZH = rhs.ZH.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.ZH),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.F) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.F);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.F) ?? true))
                    {
                        item.F = rhs.F.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.F),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.TH) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.TH);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.TH) ?? true))
                    {
                        item.TH = rhs.TH.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.TH),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.V) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.V);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.V) ?? true))
                    {
                        item.V = rhs.V.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.V),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.DH) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.DH);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.DH) ?? true))
                    {
                        item.DH = rhs.DH.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.DH),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.M) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.M);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.M) ?? true))
                    {
                        item.M = rhs.M.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.M),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.N) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.N);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.N) ?? true))
                    {
                        item.N = rhs.N.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.N),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.NG) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.NG);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.NG) ?? true))
                    {
                        item.NG = rhs.NG.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.NG),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.L) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.L);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.L) ?? true))
                    {
                        item.L = rhs.L.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.L),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.R) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.R);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.R) ?? true))
                    {
                        item.R = rhs.R.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.R),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.W) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.W);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.W) ?? true))
                    {
                        item.W = rhs.W.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.W),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Y) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.Y);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Y) ?? true))
                    {
                        item.Y = rhs.Y.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Y),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.HH) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.HH);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.HH) ?? true))
                    {
                        item.HH = rhs.HH.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.HH),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.B) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.B);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.B) ?? true))
                    {
                        item.B = rhs.B.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.B),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.D) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.D);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.D) ?? true))
                    {
                        item.D = rhs.D.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.D),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.JH) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.JH);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.JH) ?? true))
                    {
                        item.JH = rhs.JH.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.JH),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.G) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.G);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.G) ?? true))
                    {
                        item.G = rhs.G.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.G),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.P) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.P);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.P) ?? true))
                    {
                        item.P = rhs.P.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.P),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.T) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.T);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.T) ?? true))
                    {
                        item.T = rhs.T.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.T),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.K) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.K);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.K) ?? true))
                    {
                        item.K = rhs.K.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.K),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.CH) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.CH);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.CH) ?? true))
                    {
                        item.CH = rhs.CH.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.CH),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.SIL) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.SIL);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.SIL) ?? true))
                    {
                        item.SIL = rhs.SIL.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.SIL),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.SHOTSIL) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.SHOTSIL);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.SHOTSIL) ?? true))
                    {
                        item.SHOTSIL = rhs.SHOTSIL.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.SHOTSIL),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.FLAP) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.FLAP);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.FLAP) ?? true))
                    {
                        item.FLAP = rhs.FLAP.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.FLAP),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public FaceFxPhonemes DeepCopy(
            IFaceFxPhonemesGetter item,
            FaceFxPhonemes.TranslationMask? copyMask = null)
        {
            FaceFxPhonemes ret = (FaceFxPhonemes)((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public FaceFxPhonemes DeepCopy(
            IFaceFxPhonemesGetter item,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? copyMask = null)
        {
            FaceFxPhonemes ret = (FaceFxPhonemes)((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public FaceFxPhonemes DeepCopy(
            IFaceFxPhonemesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FaceFxPhonemes ret = (FaceFxPhonemes)((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class FaceFxPhonemes
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FaceFxPhonemes_Registration.Instance;
        public static FaceFxPhonemes_Registration Registration => FaceFxPhonemes_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FaceFxPhonemesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return FaceFxPhonemesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FaceFxPhonemesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFaceFxPhonemesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IFaceFxPhonemesGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IFaceFxPhonemesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FaceFxPhonemesXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static FaceFxPhonemesXmlWriteTranslation Instance = new FaceFxPhonemesXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFaceFxPhonemesGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.IY) ?? true))
            {
                var IYItem = item.IY;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)IYItem).XmlWriteTranslator).Write(
                    item: IYItem,
                    node: node,
                    name: nameof(item.IY),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.IY,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.IY));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.IH) ?? true))
            {
                var IHItem = item.IH;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)IHItem).XmlWriteTranslator).Write(
                    item: IHItem,
                    node: node,
                    name: nameof(item.IH),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.IH,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.IH));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.EH) ?? true))
            {
                var EHItem = item.EH;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)EHItem).XmlWriteTranslator).Write(
                    item: EHItem,
                    node: node,
                    name: nameof(item.EH),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.EH,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.EH));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.EY) ?? true))
            {
                var EYItem = item.EY;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)EYItem).XmlWriteTranslator).Write(
                    item: EYItem,
                    node: node,
                    name: nameof(item.EY),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.EY,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.EY));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AE) ?? true))
            {
                var AEItem = item.AE;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)AEItem).XmlWriteTranslator).Write(
                    item: AEItem,
                    node: node,
                    name: nameof(item.AE),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.AE,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AE));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AA) ?? true))
            {
                var AAItem = item.AA;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)AAItem).XmlWriteTranslator).Write(
                    item: AAItem,
                    node: node,
                    name: nameof(item.AA),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.AA,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AA));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AW) ?? true))
            {
                var AWItem = item.AW;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)AWItem).XmlWriteTranslator).Write(
                    item: AWItem,
                    node: node,
                    name: nameof(item.AW),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.AW,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AW));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AY) ?? true))
            {
                var AYItem = item.AY;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)AYItem).XmlWriteTranslator).Write(
                    item: AYItem,
                    node: node,
                    name: nameof(item.AY),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.AY,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AY));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AH) ?? true))
            {
                var AHItem = item.AH;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)AHItem).XmlWriteTranslator).Write(
                    item: AHItem,
                    node: node,
                    name: nameof(item.AH),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.AH,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AH));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AO) ?? true))
            {
                var AOItem = item.AO;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)AOItem).XmlWriteTranslator).Write(
                    item: AOItem,
                    node: node,
                    name: nameof(item.AO),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.AO,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AO));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.OY) ?? true))
            {
                var OYItem = item.OY;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)OYItem).XmlWriteTranslator).Write(
                    item: OYItem,
                    node: node,
                    name: nameof(item.OY),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.OY,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.OY));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.OW) ?? true))
            {
                var OWItem = item.OW;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)OWItem).XmlWriteTranslator).Write(
                    item: OWItem,
                    node: node,
                    name: nameof(item.OW),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.OW,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.OW));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.UH) ?? true))
            {
                var UHItem = item.UH;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)UHItem).XmlWriteTranslator).Write(
                    item: UHItem,
                    node: node,
                    name: nameof(item.UH),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.UH,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.UH));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.UW) ?? true))
            {
                var UWItem = item.UW;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)UWItem).XmlWriteTranslator).Write(
                    item: UWItem,
                    node: node,
                    name: nameof(item.UW),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.UW,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.UW));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.ER) ?? true))
            {
                var ERItem = item.ER;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)ERItem).XmlWriteTranslator).Write(
                    item: ERItem,
                    node: node,
                    name: nameof(item.ER),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.ER,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.ER));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.AX) ?? true))
            {
                var AXItem = item.AX;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)AXItem).XmlWriteTranslator).Write(
                    item: AXItem,
                    node: node,
                    name: nameof(item.AX),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.AX,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AX));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.S) ?? true))
            {
                var SItem = item.S;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)SItem).XmlWriteTranslator).Write(
                    item: SItem,
                    node: node,
                    name: nameof(item.S),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.S,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.S));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.SH) ?? true))
            {
                var SHItem = item.SH;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)SHItem).XmlWriteTranslator).Write(
                    item: SHItem,
                    node: node,
                    name: nameof(item.SH),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.SH,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.SH));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Z) ?? true))
            {
                var ZItem = item.Z;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)ZItem).XmlWriteTranslator).Write(
                    item: ZItem,
                    node: node,
                    name: nameof(item.Z),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.Z,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Z));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.ZH) ?? true))
            {
                var ZHItem = item.ZH;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)ZHItem).XmlWriteTranslator).Write(
                    item: ZHItem,
                    node: node,
                    name: nameof(item.ZH),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.ZH,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.ZH));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.F) ?? true))
            {
                var FItem = item.F;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)FItem).XmlWriteTranslator).Write(
                    item: FItem,
                    node: node,
                    name: nameof(item.F),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.F,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.F));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.TH) ?? true))
            {
                var THItem = item.TH;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)THItem).XmlWriteTranslator).Write(
                    item: THItem,
                    node: node,
                    name: nameof(item.TH),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.TH,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.TH));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.V) ?? true))
            {
                var VItem = item.V;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)VItem).XmlWriteTranslator).Write(
                    item: VItem,
                    node: node,
                    name: nameof(item.V),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.V,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.V));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.DH) ?? true))
            {
                var DHItem = item.DH;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)DHItem).XmlWriteTranslator).Write(
                    item: DHItem,
                    node: node,
                    name: nameof(item.DH),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.DH,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.DH));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.M) ?? true))
            {
                var MItem = item.M;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)MItem).XmlWriteTranslator).Write(
                    item: MItem,
                    node: node,
                    name: nameof(item.M),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.M,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.M));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.N) ?? true))
            {
                var NItem = item.N;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)NItem).XmlWriteTranslator).Write(
                    item: NItem,
                    node: node,
                    name: nameof(item.N),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.N,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.N));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.NG) ?? true))
            {
                var NGItem = item.NG;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)NGItem).XmlWriteTranslator).Write(
                    item: NGItem,
                    node: node,
                    name: nameof(item.NG),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.NG,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.NG));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.L) ?? true))
            {
                var LItem = item.L;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)LItem).XmlWriteTranslator).Write(
                    item: LItem,
                    node: node,
                    name: nameof(item.L),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.L,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.L));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.R) ?? true))
            {
                var RItem = item.R;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)RItem).XmlWriteTranslator).Write(
                    item: RItem,
                    node: node,
                    name: nameof(item.R),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.R,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.R));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.W) ?? true))
            {
                var WItem = item.W;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)WItem).XmlWriteTranslator).Write(
                    item: WItem,
                    node: node,
                    name: nameof(item.W),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.W,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.W));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Y) ?? true))
            {
                var YItem = item.Y;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)YItem).XmlWriteTranslator).Write(
                    item: YItem,
                    node: node,
                    name: nameof(item.Y),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.Y,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Y));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.HH) ?? true))
            {
                var HHItem = item.HH;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)HHItem).XmlWriteTranslator).Write(
                    item: HHItem,
                    node: node,
                    name: nameof(item.HH),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.HH,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.HH));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.B) ?? true))
            {
                var BItem = item.B;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)BItem).XmlWriteTranslator).Write(
                    item: BItem,
                    node: node,
                    name: nameof(item.B),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.B,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.B));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.D) ?? true))
            {
                var DItem = item.D;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)DItem).XmlWriteTranslator).Write(
                    item: DItem,
                    node: node,
                    name: nameof(item.D),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.D,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.D));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.JH) ?? true))
            {
                var JHItem = item.JH;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)JHItem).XmlWriteTranslator).Write(
                    item: JHItem,
                    node: node,
                    name: nameof(item.JH),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.JH,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.JH));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.G) ?? true))
            {
                var GItem = item.G;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)GItem).XmlWriteTranslator).Write(
                    item: GItem,
                    node: node,
                    name: nameof(item.G),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.G,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.G));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.P) ?? true))
            {
                var PItem = item.P;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)PItem).XmlWriteTranslator).Write(
                    item: PItem,
                    node: node,
                    name: nameof(item.P),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.P,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.P));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.T) ?? true))
            {
                var TItem = item.T;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)TItem).XmlWriteTranslator).Write(
                    item: TItem,
                    node: node,
                    name: nameof(item.T),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.T,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.T));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.K) ?? true))
            {
                var KItem = item.K;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)KItem).XmlWriteTranslator).Write(
                    item: KItem,
                    node: node,
                    name: nameof(item.K),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.K,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.K));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.CH) ?? true))
            {
                var CHItem = item.CH;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)CHItem).XmlWriteTranslator).Write(
                    item: CHItem,
                    node: node,
                    name: nameof(item.CH),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.CH,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.CH));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.SIL) ?? true))
            {
                var SILItem = item.SIL;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)SILItem).XmlWriteTranslator).Write(
                    item: SILItem,
                    node: node,
                    name: nameof(item.SIL),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.SIL,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.SIL));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.SHOTSIL) ?? true))
            {
                var SHOTSILItem = item.SHOTSIL;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)SHOTSILItem).XmlWriteTranslator).Write(
                    item: SHOTSILItem,
                    node: node,
                    name: nameof(item.SHOTSIL),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.SHOTSIL,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.SHOTSIL));
            }
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.FLAP) ?? true))
            {
                var FLAPItem = item.FLAP;
                ((PhonemeTargetXmlWriteTranslation)((IXmlItem)FLAPItem).XmlWriteTranslator).Write(
                    item: FLAPItem,
                    node: node,
                    name: nameof(item.FLAP),
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.FLAP,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.FLAP));
            }
        }

        public void Write(
            XElement node,
            IFaceFxPhonemesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.FaceFxPhonemes");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.FaceFxPhonemes");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFaceFxPhonemesGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IFaceFxPhonemesGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IFaceFxPhonemesGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class FaceFxPhonemesXmlCreateTranslation
    {
        public readonly static FaceFxPhonemesXmlCreateTranslation Instance = new FaceFxPhonemesXmlCreateTranslation();

        public static void FillPublicXml(
            IFaceFxPhonemes item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FaceFxPhonemesXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFaceFxPhonemes item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "IY":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.IY);
                    try
                    {
                        item.IY = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.IY));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IH":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.IH);
                    try
                    {
                        item.IH = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.IH));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EH":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.EH);
                    try
                    {
                        item.EH = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.EH));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EY":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.EY);
                    try
                    {
                        item.EY = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.EY));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AE":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.AE);
                    try
                    {
                        item.AE = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AE));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AA":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.AA);
                    try
                    {
                        item.AA = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AA));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AW":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.AW);
                    try
                    {
                        item.AW = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AW));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AY":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.AY);
                    try
                    {
                        item.AY = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AY));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AH":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.AH);
                    try
                    {
                        item.AH = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AH));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AO":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.AO);
                    try
                    {
                        item.AO = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AO));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OY":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.OY);
                    try
                    {
                        item.OY = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.OY));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OW":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.OW);
                    try
                    {
                        item.OW = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.OW));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UH":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.UH);
                    try
                    {
                        item.UH = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.UH));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UW":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.UW);
                    try
                    {
                        item.UW = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.UW));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ER":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.ER);
                    try
                    {
                        item.ER = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.ER));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AX":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.AX);
                    try
                    {
                        item.AX = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.AX));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "S":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.S);
                    try
                    {
                        item.S = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.S));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SH":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.SH);
                    try
                    {
                        item.SH = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.SH));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Z":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.Z);
                    try
                    {
                        item.Z = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Z));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ZH":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.ZH);
                    try
                    {
                        item.ZH = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.ZH));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "F":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.F);
                    try
                    {
                        item.F = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.F));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TH":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.TH);
                    try
                    {
                        item.TH = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.TH));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "V":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.V);
                    try
                    {
                        item.V = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.V));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DH":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.DH);
                    try
                    {
                        item.DH = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.DH));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "M":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.M);
                    try
                    {
                        item.M = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.M));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "N":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.N);
                    try
                    {
                        item.N = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.N));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NG":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.NG);
                    try
                    {
                        item.NG = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.NG));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "L":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.L);
                    try
                    {
                        item.L = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.L));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "R":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.R);
                    try
                    {
                        item.R = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.R));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "W":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.W);
                    try
                    {
                        item.W = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.W));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Y":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.Y);
                    try
                    {
                        item.Y = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Y));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HH":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.HH);
                    try
                    {
                        item.HH = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.HH));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "B":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.B);
                    try
                    {
                        item.B = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.B));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "D":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.D);
                    try
                    {
                        item.D = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.D));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "JH":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.JH);
                    try
                    {
                        item.JH = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.JH));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "G":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.G);
                    try
                    {
                        item.G = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.G));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "P":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.P);
                    try
                    {
                        item.P = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.P));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "T":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.T);
                    try
                    {
                        item.T = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.T));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "K":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.K);
                    try
                    {
                        item.K = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.K));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CH":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.CH);
                    try
                    {
                        item.CH = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.CH));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SIL":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.SIL);
                    try
                    {
                        item.SIL = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.SIL));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SHOTSIL":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.SHOTSIL);
                    try
                    {
                        item.SHOTSIL = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.SHOTSIL));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FLAP":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.FLAP);
                    try
                    {
                        item.FLAP = LoquiXmlTranslation<PhonemeTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.FLAP));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class FaceFxPhonemesXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            XElement node,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((FaceFxPhonemesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FaceFxPhonemes.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            string path,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            Stream stream,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((FaceFxPhonemesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            XElement node,
            string? name = null,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            ((FaceFxPhonemesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((FaceFxPhonemesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((FaceFxPhonemesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FaceFxPhonemesBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static FaceFxPhonemesBinaryWriteTranslation Instance = new FaceFxPhonemesBinaryWriteTranslation();

        static partial void WriteBinaryParsingCustom(
            MutagenWriter writer,
            IFaceFxPhonemesGetter item);

        public static void WriteBinaryParsing(
            MutagenWriter writer,
            IFaceFxPhonemesGetter item)
        {
            WriteBinaryParsingCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IFaceFxPhonemesGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            IFaceFxPhonemesGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            FaceFxPhonemesBinaryWriteTranslation.WriteBinaryParsing(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IFaceFxPhonemesGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFaceFxPhonemesGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class FaceFxPhonemesBinaryCreateTranslation
    {
        public readonly static FaceFxPhonemesBinaryCreateTranslation Instance = new FaceFxPhonemesBinaryCreateTranslation();

        static partial void FillBinaryParsingCustom(
            MutagenFrame frame,
            IFaceFxPhonemes item);

        public static void FillBinaryParsingCustomPublic(
            MutagenFrame frame,
            IFaceFxPhonemes item)
        {
            FillBinaryParsingCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class FaceFxPhonemesBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFaceFxPhonemesGetter item,
            MutagenWriter writer)
        {
            ((FaceFxPhonemesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FaceFxPhonemesBinaryOverlay :
        BinaryOverlay,
        IFaceFxPhonemesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FaceFxPhonemes_Registration.Instance;
        public static FaceFxPhonemes_Registration Registration => FaceFxPhonemes_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FaceFxPhonemesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FaceFxPhonemesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFaceFxPhonemesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IFaceFxPhonemesGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IFaceFxPhonemesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFaceFxPhonemesGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => FaceFxPhonemesXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FaceFxPhonemesXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FaceFxPhonemesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FaceFxPhonemesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Parsing
        partial void ParsingCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected FaceFxPhonemesBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static FaceFxPhonemesBinaryOverlay FaceFxPhonemesFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new FaceFxPhonemesBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x54574850: // PHWT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)FaceFxPhonemes_FieldIndex.IY) return TryGet<int?>.Failure;
                    ParsingCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(lastParsed);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

