/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class FaceFxPhonemes :
        IFaceFxPhonemes,
        ILoquiObjectSetter<FaceFxPhonemes>,
        IEquatable<FaceFxPhonemes>,
        IEqualsMask
    {
        #region Ctor
        public FaceFxPhonemes()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region LipMode
        public Boolean LipMode { get; set; } = default;
        #endregion
        #region Aah_LipBigAah
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _Aah_LipBigAah;
        public Phoneme? Aah_LipBigAah
        {
            get => _Aah_LipBigAah;
            set => _Aah_LipBigAah = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.Aah_LipBigAah => this.Aah_LipBigAah;
        #endregion
        #region BigAah_LipDST
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _BigAah_LipDST;
        public Phoneme? BigAah_LipDST
        {
            get => _BigAah_LipDST;
            set => _BigAah_LipDST = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.BigAah_LipDST => this.BigAah_LipDST;
        #endregion
        #region BMP_LipEee
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _BMP_LipEee;
        public Phoneme? BMP_LipEee
        {
            get => _BMP_LipEee;
            set => _BMP_LipEee = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.BMP_LipEee => this.BMP_LipEee;
        #endregion
        #region ChJSh_LipFV
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _ChJSh_LipFV;
        public Phoneme? ChJSh_LipFV
        {
            get => _ChJSh_LipFV;
            set => _ChJSh_LipFV = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.ChJSh_LipFV => this.ChJSh_LipFV;
        #endregion
        #region DST_LipK
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _DST_LipK;
        public Phoneme? DST_LipK
        {
            get => _DST_LipK;
            set => _DST_LipK = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.DST_LipK => this.DST_LipK;
        #endregion
        #region Eee_LipL
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _Eee_LipL;
        public Phoneme? Eee_LipL
        {
            get => _Eee_LipL;
            set => _Eee_LipL = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.Eee_LipL => this.Eee_LipL;
        #endregion
        #region Eh_LipR
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _Eh_LipR;
        public Phoneme? Eh_LipR
        {
            get => _Eh_LipR;
            set => _Eh_LipR = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.Eh_LipR => this.Eh_LipR;
        #endregion
        #region FV_LipTh
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _FV_LipTh;
        public Phoneme? FV_LipTh
        {
            get => _FV_LipTh;
            set => _FV_LipTh = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.FV_LipTh => this.FV_LipTh;
        #endregion
        #region I
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _I;
        public Phoneme? I
        {
            get => _I;
            set => _I = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.I => this.I;
        #endregion
        #region K
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _K;
        public Phoneme? K
        {
            get => _K;
            set => _K = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.K => this.K;
        #endregion
        #region N
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _N;
        public Phoneme? N
        {
            get => _N;
            set => _N = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.N => this.N;
        #endregion
        #region Oh
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _Oh;
        public Phoneme? Oh
        {
            get => _Oh;
            set => _Oh = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.Oh => this.Oh;
        #endregion
        #region OohQ
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _OohQ;
        public Phoneme? OohQ
        {
            get => _OohQ;
            set => _OohQ = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.OohQ => this.OohQ;
        #endregion
        #region R
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _R;
        public Phoneme? R
        {
            get => _R;
            set => _R = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.R => this.R;
        #endregion
        #region Th
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _Th;
        public Phoneme? Th
        {
            get => _Th;
            set => _Th = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.Th => this.Th;
        #endregion
        #region W
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Phoneme? _W;
        public Phoneme? W
        {
            get => _W;
            set => _W = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPhonemeGetter? IFaceFxPhonemesGetter.W => this.W;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FaceFxPhonemesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFaceFxPhonemesGetter rhs)) return false;
            return ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(FaceFxPhonemes obj)
        {
            return ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => FaceFxPhonemesXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FaceFxPhonemesXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static FaceFxPhonemes CreateFromXml(
            XElement node,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static FaceFxPhonemes CreateFromXml(
            XElement node,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FaceFxPhonemes.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static FaceFxPhonemes CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new FaceFxPhonemes();
            ((FaceFxPhonemesSetterCommon)((IFaceFxPhonemesGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static FaceFxPhonemes CreateFromXml(
            string path,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static FaceFxPhonemes CreateFromXml(
            string path,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FaceFxPhonemes CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static FaceFxPhonemes CreateFromXml(
            Stream stream,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static FaceFxPhonemes CreateFromXml(
            Stream stream,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FaceFxPhonemes CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.LipMode = initialValue;
                this.Aah_LipBigAah = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.BigAah_LipDST = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.BMP_LipEee = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.ChJSh_LipFV = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.DST_LipK = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.Eee_LipL = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.Eh_LipR = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.FV_LipTh = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.I = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.K = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.N = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.Oh = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.OohQ = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.R = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.Th = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
                this.W = new MaskItem<TItem, Phoneme.Mask<TItem>?>(initialValue, new Phoneme.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem LipMode,
                TItem Aah_LipBigAah,
                TItem BigAah_LipDST,
                TItem BMP_LipEee,
                TItem ChJSh_LipFV,
                TItem DST_LipK,
                TItem Eee_LipL,
                TItem Eh_LipR,
                TItem FV_LipTh,
                TItem I,
                TItem K,
                TItem N,
                TItem Oh,
                TItem OohQ,
                TItem R,
                TItem Th,
                TItem W)
            {
                this.LipMode = LipMode;
                this.Aah_LipBigAah = new MaskItem<TItem, Phoneme.Mask<TItem>?>(Aah_LipBigAah, new Phoneme.Mask<TItem>(Aah_LipBigAah));
                this.BigAah_LipDST = new MaskItem<TItem, Phoneme.Mask<TItem>?>(BigAah_LipDST, new Phoneme.Mask<TItem>(BigAah_LipDST));
                this.BMP_LipEee = new MaskItem<TItem, Phoneme.Mask<TItem>?>(BMP_LipEee, new Phoneme.Mask<TItem>(BMP_LipEee));
                this.ChJSh_LipFV = new MaskItem<TItem, Phoneme.Mask<TItem>?>(ChJSh_LipFV, new Phoneme.Mask<TItem>(ChJSh_LipFV));
                this.DST_LipK = new MaskItem<TItem, Phoneme.Mask<TItem>?>(DST_LipK, new Phoneme.Mask<TItem>(DST_LipK));
                this.Eee_LipL = new MaskItem<TItem, Phoneme.Mask<TItem>?>(Eee_LipL, new Phoneme.Mask<TItem>(Eee_LipL));
                this.Eh_LipR = new MaskItem<TItem, Phoneme.Mask<TItem>?>(Eh_LipR, new Phoneme.Mask<TItem>(Eh_LipR));
                this.FV_LipTh = new MaskItem<TItem, Phoneme.Mask<TItem>?>(FV_LipTh, new Phoneme.Mask<TItem>(FV_LipTh));
                this.I = new MaskItem<TItem, Phoneme.Mask<TItem>?>(I, new Phoneme.Mask<TItem>(I));
                this.K = new MaskItem<TItem, Phoneme.Mask<TItem>?>(K, new Phoneme.Mask<TItem>(K));
                this.N = new MaskItem<TItem, Phoneme.Mask<TItem>?>(N, new Phoneme.Mask<TItem>(N));
                this.Oh = new MaskItem<TItem, Phoneme.Mask<TItem>?>(Oh, new Phoneme.Mask<TItem>(Oh));
                this.OohQ = new MaskItem<TItem, Phoneme.Mask<TItem>?>(OohQ, new Phoneme.Mask<TItem>(OohQ));
                this.R = new MaskItem<TItem, Phoneme.Mask<TItem>?>(R, new Phoneme.Mask<TItem>(R));
                this.Th = new MaskItem<TItem, Phoneme.Mask<TItem>?>(Th, new Phoneme.Mask<TItem>(Th));
                this.W = new MaskItem<TItem, Phoneme.Mask<TItem>?>(W, new Phoneme.Mask<TItem>(W));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem LipMode;
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? Aah_LipBigAah { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? BigAah_LipDST { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? BMP_LipEee { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? ChJSh_LipFV { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? DST_LipK { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? Eee_LipL { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? Eh_LipR { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? FV_LipTh { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? I { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? K { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? N { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? Oh { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? OohQ { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? R { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? Th { get; set; }
            public MaskItem<TItem, Phoneme.Mask<TItem>?>? W { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.LipMode, rhs.LipMode)) return false;
                if (!object.Equals(this.Aah_LipBigAah, rhs.Aah_LipBigAah)) return false;
                if (!object.Equals(this.BigAah_LipDST, rhs.BigAah_LipDST)) return false;
                if (!object.Equals(this.BMP_LipEee, rhs.BMP_LipEee)) return false;
                if (!object.Equals(this.ChJSh_LipFV, rhs.ChJSh_LipFV)) return false;
                if (!object.Equals(this.DST_LipK, rhs.DST_LipK)) return false;
                if (!object.Equals(this.Eee_LipL, rhs.Eee_LipL)) return false;
                if (!object.Equals(this.Eh_LipR, rhs.Eh_LipR)) return false;
                if (!object.Equals(this.FV_LipTh, rhs.FV_LipTh)) return false;
                if (!object.Equals(this.I, rhs.I)) return false;
                if (!object.Equals(this.K, rhs.K)) return false;
                if (!object.Equals(this.N, rhs.N)) return false;
                if (!object.Equals(this.Oh, rhs.Oh)) return false;
                if (!object.Equals(this.OohQ, rhs.OohQ)) return false;
                if (!object.Equals(this.R, rhs.R)) return false;
                if (!object.Equals(this.Th, rhs.Th)) return false;
                if (!object.Equals(this.W, rhs.W)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.LipMode);
                hash.Add(this.Aah_LipBigAah);
                hash.Add(this.BigAah_LipDST);
                hash.Add(this.BMP_LipEee);
                hash.Add(this.ChJSh_LipFV);
                hash.Add(this.DST_LipK);
                hash.Add(this.Eee_LipL);
                hash.Add(this.Eh_LipR);
                hash.Add(this.FV_LipTh);
                hash.Add(this.I);
                hash.Add(this.K);
                hash.Add(this.N);
                hash.Add(this.Oh);
                hash.Add(this.OohQ);
                hash.Add(this.R);
                hash.Add(this.Th);
                hash.Add(this.W);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.LipMode)) return false;
                if (Aah_LipBigAah != null)
                {
                    if (!eval(this.Aah_LipBigAah.Overall)) return false;
                    if (this.Aah_LipBigAah.Specific != null && !this.Aah_LipBigAah.Specific.All(eval)) return false;
                }
                if (BigAah_LipDST != null)
                {
                    if (!eval(this.BigAah_LipDST.Overall)) return false;
                    if (this.BigAah_LipDST.Specific != null && !this.BigAah_LipDST.Specific.All(eval)) return false;
                }
                if (BMP_LipEee != null)
                {
                    if (!eval(this.BMP_LipEee.Overall)) return false;
                    if (this.BMP_LipEee.Specific != null && !this.BMP_LipEee.Specific.All(eval)) return false;
                }
                if (ChJSh_LipFV != null)
                {
                    if (!eval(this.ChJSh_LipFV.Overall)) return false;
                    if (this.ChJSh_LipFV.Specific != null && !this.ChJSh_LipFV.Specific.All(eval)) return false;
                }
                if (DST_LipK != null)
                {
                    if (!eval(this.DST_LipK.Overall)) return false;
                    if (this.DST_LipK.Specific != null && !this.DST_LipK.Specific.All(eval)) return false;
                }
                if (Eee_LipL != null)
                {
                    if (!eval(this.Eee_LipL.Overall)) return false;
                    if (this.Eee_LipL.Specific != null && !this.Eee_LipL.Specific.All(eval)) return false;
                }
                if (Eh_LipR != null)
                {
                    if (!eval(this.Eh_LipR.Overall)) return false;
                    if (this.Eh_LipR.Specific != null && !this.Eh_LipR.Specific.All(eval)) return false;
                }
                if (FV_LipTh != null)
                {
                    if (!eval(this.FV_LipTh.Overall)) return false;
                    if (this.FV_LipTh.Specific != null && !this.FV_LipTh.Specific.All(eval)) return false;
                }
                if (I != null)
                {
                    if (!eval(this.I.Overall)) return false;
                    if (this.I.Specific != null && !this.I.Specific.All(eval)) return false;
                }
                if (K != null)
                {
                    if (!eval(this.K.Overall)) return false;
                    if (this.K.Specific != null && !this.K.Specific.All(eval)) return false;
                }
                if (N != null)
                {
                    if (!eval(this.N.Overall)) return false;
                    if (this.N.Specific != null && !this.N.Specific.All(eval)) return false;
                }
                if (Oh != null)
                {
                    if (!eval(this.Oh.Overall)) return false;
                    if (this.Oh.Specific != null && !this.Oh.Specific.All(eval)) return false;
                }
                if (OohQ != null)
                {
                    if (!eval(this.OohQ.Overall)) return false;
                    if (this.OohQ.Specific != null && !this.OohQ.Specific.All(eval)) return false;
                }
                if (R != null)
                {
                    if (!eval(this.R.Overall)) return false;
                    if (this.R.Specific != null && !this.R.Specific.All(eval)) return false;
                }
                if (Th != null)
                {
                    if (!eval(this.Th.Overall)) return false;
                    if (this.Th.Specific != null && !this.Th.Specific.All(eval)) return false;
                }
                if (W != null)
                {
                    if (!eval(this.W.Overall)) return false;
                    if (this.W.Specific != null && !this.W.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.LipMode)) return true;
                if (Aah_LipBigAah != null)
                {
                    if (eval(this.Aah_LipBigAah.Overall)) return true;
                    if (this.Aah_LipBigAah.Specific != null && this.Aah_LipBigAah.Specific.Any(eval)) return true;
                }
                if (BigAah_LipDST != null)
                {
                    if (eval(this.BigAah_LipDST.Overall)) return true;
                    if (this.BigAah_LipDST.Specific != null && this.BigAah_LipDST.Specific.Any(eval)) return true;
                }
                if (BMP_LipEee != null)
                {
                    if (eval(this.BMP_LipEee.Overall)) return true;
                    if (this.BMP_LipEee.Specific != null && this.BMP_LipEee.Specific.Any(eval)) return true;
                }
                if (ChJSh_LipFV != null)
                {
                    if (eval(this.ChJSh_LipFV.Overall)) return true;
                    if (this.ChJSh_LipFV.Specific != null && this.ChJSh_LipFV.Specific.Any(eval)) return true;
                }
                if (DST_LipK != null)
                {
                    if (eval(this.DST_LipK.Overall)) return true;
                    if (this.DST_LipK.Specific != null && this.DST_LipK.Specific.Any(eval)) return true;
                }
                if (Eee_LipL != null)
                {
                    if (eval(this.Eee_LipL.Overall)) return true;
                    if (this.Eee_LipL.Specific != null && this.Eee_LipL.Specific.Any(eval)) return true;
                }
                if (Eh_LipR != null)
                {
                    if (eval(this.Eh_LipR.Overall)) return true;
                    if (this.Eh_LipR.Specific != null && this.Eh_LipR.Specific.Any(eval)) return true;
                }
                if (FV_LipTh != null)
                {
                    if (eval(this.FV_LipTh.Overall)) return true;
                    if (this.FV_LipTh.Specific != null && this.FV_LipTh.Specific.Any(eval)) return true;
                }
                if (I != null)
                {
                    if (eval(this.I.Overall)) return true;
                    if (this.I.Specific != null && this.I.Specific.Any(eval)) return true;
                }
                if (K != null)
                {
                    if (eval(this.K.Overall)) return true;
                    if (this.K.Specific != null && this.K.Specific.Any(eval)) return true;
                }
                if (N != null)
                {
                    if (eval(this.N.Overall)) return true;
                    if (this.N.Specific != null && this.N.Specific.Any(eval)) return true;
                }
                if (Oh != null)
                {
                    if (eval(this.Oh.Overall)) return true;
                    if (this.Oh.Specific != null && this.Oh.Specific.Any(eval)) return true;
                }
                if (OohQ != null)
                {
                    if (eval(this.OohQ.Overall)) return true;
                    if (this.OohQ.Specific != null && this.OohQ.Specific.Any(eval)) return true;
                }
                if (R != null)
                {
                    if (eval(this.R.Overall)) return true;
                    if (this.R.Specific != null && this.R.Specific.Any(eval)) return true;
                }
                if (Th != null)
                {
                    if (eval(this.Th.Overall)) return true;
                    if (this.Th.Specific != null && this.Th.Specific.Any(eval)) return true;
                }
                if (W != null)
                {
                    if (eval(this.W.Overall)) return true;
                    if (this.W.Specific != null && this.W.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FaceFxPhonemes.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.LipMode = eval(this.LipMode);
                obj.Aah_LipBigAah = this.Aah_LipBigAah == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.Aah_LipBigAah.Overall), this.Aah_LipBigAah.Specific?.Translate(eval));
                obj.BigAah_LipDST = this.BigAah_LipDST == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.BigAah_LipDST.Overall), this.BigAah_LipDST.Specific?.Translate(eval));
                obj.BMP_LipEee = this.BMP_LipEee == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.BMP_LipEee.Overall), this.BMP_LipEee.Specific?.Translate(eval));
                obj.ChJSh_LipFV = this.ChJSh_LipFV == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.ChJSh_LipFV.Overall), this.ChJSh_LipFV.Specific?.Translate(eval));
                obj.DST_LipK = this.DST_LipK == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.DST_LipK.Overall), this.DST_LipK.Specific?.Translate(eval));
                obj.Eee_LipL = this.Eee_LipL == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.Eee_LipL.Overall), this.Eee_LipL.Specific?.Translate(eval));
                obj.Eh_LipR = this.Eh_LipR == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.Eh_LipR.Overall), this.Eh_LipR.Specific?.Translate(eval));
                obj.FV_LipTh = this.FV_LipTh == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.FV_LipTh.Overall), this.FV_LipTh.Specific?.Translate(eval));
                obj.I = this.I == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.I.Overall), this.I.Specific?.Translate(eval));
                obj.K = this.K == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.K.Overall), this.K.Specific?.Translate(eval));
                obj.N = this.N == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.N.Overall), this.N.Specific?.Translate(eval));
                obj.Oh = this.Oh == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.Oh.Overall), this.Oh.Specific?.Translate(eval));
                obj.OohQ = this.OohQ == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.OohQ.Overall), this.OohQ.Specific?.Translate(eval));
                obj.R = this.R == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.R.Overall), this.R.Specific?.Translate(eval));
                obj.Th = this.Th == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.Th.Overall), this.Th.Specific?.Translate(eval));
                obj.W = this.W == null ? null : new MaskItem<R, Phoneme.Mask<R>?>(eval(this.W.Overall), this.W.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(FaceFxPhonemes.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, FaceFxPhonemes.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(FaceFxPhonemes.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.LipMode ?? true)
                    {
                        fg.AppendItem(LipMode, "LipMode");
                    }
                    if (printMask?.Aah_LipBigAah?.Overall ?? true)
                    {
                        Aah_LipBigAah?.ToString(fg);
                    }
                    if (printMask?.BigAah_LipDST?.Overall ?? true)
                    {
                        BigAah_LipDST?.ToString(fg);
                    }
                    if (printMask?.BMP_LipEee?.Overall ?? true)
                    {
                        BMP_LipEee?.ToString(fg);
                    }
                    if (printMask?.ChJSh_LipFV?.Overall ?? true)
                    {
                        ChJSh_LipFV?.ToString(fg);
                    }
                    if (printMask?.DST_LipK?.Overall ?? true)
                    {
                        DST_LipK?.ToString(fg);
                    }
                    if (printMask?.Eee_LipL?.Overall ?? true)
                    {
                        Eee_LipL?.ToString(fg);
                    }
                    if (printMask?.Eh_LipR?.Overall ?? true)
                    {
                        Eh_LipR?.ToString(fg);
                    }
                    if (printMask?.FV_LipTh?.Overall ?? true)
                    {
                        FV_LipTh?.ToString(fg);
                    }
                    if (printMask?.I?.Overall ?? true)
                    {
                        I?.ToString(fg);
                    }
                    if (printMask?.K?.Overall ?? true)
                    {
                        K?.ToString(fg);
                    }
                    if (printMask?.N?.Overall ?? true)
                    {
                        N?.ToString(fg);
                    }
                    if (printMask?.Oh?.Overall ?? true)
                    {
                        Oh?.ToString(fg);
                    }
                    if (printMask?.OohQ?.Overall ?? true)
                    {
                        OohQ?.ToString(fg);
                    }
                    if (printMask?.R?.Overall ?? true)
                    {
                        R?.ToString(fg);
                    }
                    if (printMask?.Th?.Overall ?? true)
                    {
                        Th?.ToString(fg);
                    }
                    if (printMask?.W?.Overall ?? true)
                    {
                        W?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? LipMode;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? Aah_LipBigAah;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? BigAah_LipDST;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? BMP_LipEee;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? ChJSh_LipFV;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? DST_LipK;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? Eee_LipL;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? Eh_LipR;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? FV_LipTh;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? I;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? K;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? N;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? Oh;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? OohQ;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? R;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? Th;
            public MaskItem<Exception?, Phoneme.ErrorMask?>? W;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
                switch (enu)
                {
                    case FaceFxPhonemes_FieldIndex.LipMode:
                        return LipMode;
                    case FaceFxPhonemes_FieldIndex.Aah_LipBigAah:
                        return Aah_LipBigAah;
                    case FaceFxPhonemes_FieldIndex.BigAah_LipDST:
                        return BigAah_LipDST;
                    case FaceFxPhonemes_FieldIndex.BMP_LipEee:
                        return BMP_LipEee;
                    case FaceFxPhonemes_FieldIndex.ChJSh_LipFV:
                        return ChJSh_LipFV;
                    case FaceFxPhonemes_FieldIndex.DST_LipK:
                        return DST_LipK;
                    case FaceFxPhonemes_FieldIndex.Eee_LipL:
                        return Eee_LipL;
                    case FaceFxPhonemes_FieldIndex.Eh_LipR:
                        return Eh_LipR;
                    case FaceFxPhonemes_FieldIndex.FV_LipTh:
                        return FV_LipTh;
                    case FaceFxPhonemes_FieldIndex.I:
                        return I;
                    case FaceFxPhonemes_FieldIndex.K:
                        return K;
                    case FaceFxPhonemes_FieldIndex.N:
                        return N;
                    case FaceFxPhonemes_FieldIndex.Oh:
                        return Oh;
                    case FaceFxPhonemes_FieldIndex.OohQ:
                        return OohQ;
                    case FaceFxPhonemes_FieldIndex.R:
                        return R;
                    case FaceFxPhonemes_FieldIndex.Th:
                        return Th;
                    case FaceFxPhonemes_FieldIndex.W:
                        return W;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
                switch (enu)
                {
                    case FaceFxPhonemes_FieldIndex.LipMode:
                        this.LipMode = ex;
                        break;
                    case FaceFxPhonemes_FieldIndex.Aah_LipBigAah:
                        this.Aah_LipBigAah = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.BigAah_LipDST:
                        this.BigAah_LipDST = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.BMP_LipEee:
                        this.BMP_LipEee = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.ChJSh_LipFV:
                        this.ChJSh_LipFV = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.DST_LipK:
                        this.DST_LipK = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.Eee_LipL:
                        this.Eee_LipL = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.Eh_LipR:
                        this.Eh_LipR = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.FV_LipTh:
                        this.FV_LipTh = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.I:
                        this.I = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.K:
                        this.K = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.N:
                        this.N = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.Oh:
                        this.Oh = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.OohQ:
                        this.OohQ = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.R:
                        this.R = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.Th:
                        this.Th = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    case FaceFxPhonemes_FieldIndex.W:
                        this.W = new MaskItem<Exception?, Phoneme.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
                switch (enu)
                {
                    case FaceFxPhonemes_FieldIndex.LipMode:
                        this.LipMode = (Exception?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.Aah_LipBigAah:
                        this.Aah_LipBigAah = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.BigAah_LipDST:
                        this.BigAah_LipDST = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.BMP_LipEee:
                        this.BMP_LipEee = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.ChJSh_LipFV:
                        this.ChJSh_LipFV = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.DST_LipK:
                        this.DST_LipK = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.Eee_LipL:
                        this.Eee_LipL = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.Eh_LipR:
                        this.Eh_LipR = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.FV_LipTh:
                        this.FV_LipTh = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.I:
                        this.I = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.K:
                        this.K = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.N:
                        this.N = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.Oh:
                        this.Oh = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.OohQ:
                        this.OohQ = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.R:
                        this.R = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.Th:
                        this.Th = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    case FaceFxPhonemes_FieldIndex.W:
                        this.W = (MaskItem<Exception?, Phoneme.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (LipMode != null) return true;
                if (Aah_LipBigAah != null) return true;
                if (BigAah_LipDST != null) return true;
                if (BMP_LipEee != null) return true;
                if (ChJSh_LipFV != null) return true;
                if (DST_LipK != null) return true;
                if (Eee_LipL != null) return true;
                if (Eh_LipR != null) return true;
                if (FV_LipTh != null) return true;
                if (I != null) return true;
                if (K != null) return true;
                if (N != null) return true;
                if (Oh != null) return true;
                if (OohQ != null) return true;
                if (R != null) return true;
                if (Th != null) return true;
                if (W != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(LipMode, "LipMode");
                Aah_LipBigAah?.ToString(fg);
                BigAah_LipDST?.ToString(fg);
                BMP_LipEee?.ToString(fg);
                ChJSh_LipFV?.ToString(fg);
                DST_LipK?.ToString(fg);
                Eee_LipL?.ToString(fg);
                Eh_LipR?.ToString(fg);
                FV_LipTh?.ToString(fg);
                I?.ToString(fg);
                K?.ToString(fg);
                N?.ToString(fg);
                Oh?.ToString(fg);
                OohQ?.ToString(fg);
                R?.ToString(fg);
                Th?.ToString(fg);
                W?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.LipMode = this.LipMode.Combine(rhs.LipMode);
                ret.Aah_LipBigAah = this.Aah_LipBigAah.Combine(rhs.Aah_LipBigAah, (l, r) => l.Combine(r));
                ret.BigAah_LipDST = this.BigAah_LipDST.Combine(rhs.BigAah_LipDST, (l, r) => l.Combine(r));
                ret.BMP_LipEee = this.BMP_LipEee.Combine(rhs.BMP_LipEee, (l, r) => l.Combine(r));
                ret.ChJSh_LipFV = this.ChJSh_LipFV.Combine(rhs.ChJSh_LipFV, (l, r) => l.Combine(r));
                ret.DST_LipK = this.DST_LipK.Combine(rhs.DST_LipK, (l, r) => l.Combine(r));
                ret.Eee_LipL = this.Eee_LipL.Combine(rhs.Eee_LipL, (l, r) => l.Combine(r));
                ret.Eh_LipR = this.Eh_LipR.Combine(rhs.Eh_LipR, (l, r) => l.Combine(r));
                ret.FV_LipTh = this.FV_LipTh.Combine(rhs.FV_LipTh, (l, r) => l.Combine(r));
                ret.I = this.I.Combine(rhs.I, (l, r) => l.Combine(r));
                ret.K = this.K.Combine(rhs.K, (l, r) => l.Combine(r));
                ret.N = this.N.Combine(rhs.N, (l, r) => l.Combine(r));
                ret.Oh = this.Oh.Combine(rhs.Oh, (l, r) => l.Combine(r));
                ret.OohQ = this.OohQ.Combine(rhs.OohQ, (l, r) => l.Combine(r));
                ret.R = this.R.Combine(rhs.R, (l, r) => l.Combine(r));
                ret.Th = this.Th.Combine(rhs.Th, (l, r) => l.Combine(r));
                ret.W = this.W.Combine(rhs.W, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool LipMode;
            public MaskItem<bool, Phoneme.TranslationMask?> Aah_LipBigAah;
            public MaskItem<bool, Phoneme.TranslationMask?> BigAah_LipDST;
            public MaskItem<bool, Phoneme.TranslationMask?> BMP_LipEee;
            public MaskItem<bool, Phoneme.TranslationMask?> ChJSh_LipFV;
            public MaskItem<bool, Phoneme.TranslationMask?> DST_LipK;
            public MaskItem<bool, Phoneme.TranslationMask?> Eee_LipL;
            public MaskItem<bool, Phoneme.TranslationMask?> Eh_LipR;
            public MaskItem<bool, Phoneme.TranslationMask?> FV_LipTh;
            public MaskItem<bool, Phoneme.TranslationMask?> I;
            public MaskItem<bool, Phoneme.TranslationMask?> K;
            public MaskItem<bool, Phoneme.TranslationMask?> N;
            public MaskItem<bool, Phoneme.TranslationMask?> Oh;
            public MaskItem<bool, Phoneme.TranslationMask?> OohQ;
            public MaskItem<bool, Phoneme.TranslationMask?> R;
            public MaskItem<bool, Phoneme.TranslationMask?> Th;
            public MaskItem<bool, Phoneme.TranslationMask?> W;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.LipMode = defaultOn;
                this.Aah_LipBigAah = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.BigAah_LipDST = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.BMP_LipEee = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.ChJSh_LipFV = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.DST_LipK = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.Eee_LipL = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.Eh_LipR = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.FV_LipTh = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.I = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.K = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.N = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.Oh = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.OohQ = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.R = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.Th = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
                this.W = new MaskItem<bool, Phoneme.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((LipMode, null));
                ret.Add((Aah_LipBigAah?.Overall ?? true, Aah_LipBigAah?.Specific?.GetCrystal()));
                ret.Add((BigAah_LipDST?.Overall ?? true, BigAah_LipDST?.Specific?.GetCrystal()));
                ret.Add((BMP_LipEee?.Overall ?? true, BMP_LipEee?.Specific?.GetCrystal()));
                ret.Add((ChJSh_LipFV?.Overall ?? true, ChJSh_LipFV?.Specific?.GetCrystal()));
                ret.Add((DST_LipK?.Overall ?? true, DST_LipK?.Specific?.GetCrystal()));
                ret.Add((Eee_LipL?.Overall ?? true, Eee_LipL?.Specific?.GetCrystal()));
                ret.Add((Eh_LipR?.Overall ?? true, Eh_LipR?.Specific?.GetCrystal()));
                ret.Add((FV_LipTh?.Overall ?? true, FV_LipTh?.Specific?.GetCrystal()));
                ret.Add((I?.Overall ?? true, I?.Specific?.GetCrystal()));
                ret.Add((K?.Overall ?? true, K?.Specific?.GetCrystal()));
                ret.Add((N?.Overall ?? true, N?.Specific?.GetCrystal()));
                ret.Add((Oh?.Overall ?? true, Oh?.Specific?.GetCrystal()));
                ret.Add((OohQ?.Overall ?? true, OohQ?.Specific?.GetCrystal()));
                ret.Add((R?.Overall ?? true, R?.Specific?.GetCrystal()));
                ret.Add((Th?.Overall ?? true, Th?.Specific?.GetCrystal()));
                ret.Add((W?.Overall ?? true, W?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FaceFxPhonemesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FaceFxPhonemesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static FaceFxPhonemes CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static FaceFxPhonemes CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new FaceFxPhonemes();
            ((FaceFxPhonemesSetterCommon)((IFaceFxPhonemesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFaceFxPhonemesGetter)rhs, include);

        void IClearable.Clear()
        {
            ((FaceFxPhonemesSetterCommon)((IFaceFxPhonemesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static FaceFxPhonemes GetNew()
        {
            return new FaceFxPhonemes();
        }

    }
    #endregion

    #region Interface
    public partial interface IFaceFxPhonemes :
        IFaceFxPhonemesGetter,
        ILoquiObjectSetter<IFaceFxPhonemes>
    {
        new Boolean LipMode { get; set; }
        new Phoneme? Aah_LipBigAah { get; set; }
        new Phoneme? BigAah_LipDST { get; set; }
        new Phoneme? BMP_LipEee { get; set; }
        new Phoneme? ChJSh_LipFV { get; set; }
        new Phoneme? DST_LipK { get; set; }
        new Phoneme? Eee_LipL { get; set; }
        new Phoneme? Eh_LipR { get; set; }
        new Phoneme? FV_LipTh { get; set; }
        new Phoneme? I { get; set; }
        new Phoneme? K { get; set; }
        new Phoneme? N { get; set; }
        new Phoneme? Oh { get; set; }
        new Phoneme? OohQ { get; set; }
        new Phoneme? R { get; set; }
        new Phoneme? Th { get; set; }
        new Phoneme? W { get; set; }
    }

    public partial interface IFaceFxPhonemesGetter :
        ILoquiObject,
        ILoquiObject<IFaceFxPhonemesGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        Boolean LipMode { get; }
        IPhonemeGetter? Aah_LipBigAah { get; }
        IPhonemeGetter? BigAah_LipDST { get; }
        IPhonemeGetter? BMP_LipEee { get; }
        IPhonemeGetter? ChJSh_LipFV { get; }
        IPhonemeGetter? DST_LipK { get; }
        IPhonemeGetter? Eee_LipL { get; }
        IPhonemeGetter? Eh_LipR { get; }
        IPhonemeGetter? FV_LipTh { get; }
        IPhonemeGetter? I { get; }
        IPhonemeGetter? K { get; }
        IPhonemeGetter? N { get; }
        IPhonemeGetter? Oh { get; }
        IPhonemeGetter? OohQ { get; }
        IPhonemeGetter? R { get; }
        IPhonemeGetter? Th { get; }
        IPhonemeGetter? W { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FaceFxPhonemesMixIn
    {
        public static void Clear(this IFaceFxPhonemes item)
        {
            ((FaceFxPhonemesSetterCommon)((IFaceFxPhonemesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FaceFxPhonemes.Mask<bool> GetEqualsMask(
            this IFaceFxPhonemesGetter item,
            IFaceFxPhonemesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFaceFxPhonemesGetter item,
            string? name = null,
            FaceFxPhonemes.Mask<bool>? printMask = null)
        {
            return ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFaceFxPhonemesGetter item,
            FileGeneration fg,
            string? name = null,
            FaceFxPhonemes.Mask<bool>? printMask = null)
        {
            ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFaceFxPhonemesGetter item,
            FaceFxPhonemes.Mask<bool?> checkMask)
        {
            return ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static FaceFxPhonemes.Mask<bool> GetHasBeenSetMask(this IFaceFxPhonemesGetter item)
        {
            var ret = new FaceFxPhonemes.Mask<bool>(false);
            ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFaceFxPhonemesGetter item,
            IFaceFxPhonemesGetter rhs)
        {
            return ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IFaceFxPhonemes lhs,
            IFaceFxPhonemesGetter rhs,
            FaceFxPhonemes.TranslationMask? copyMask = null)
        {
            ((FaceFxPhonemesSetterTranslationCommon)((IFaceFxPhonemesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IFaceFxPhonemes lhs,
            IFaceFxPhonemesGetter rhs,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FaceFxPhonemesSetterTranslationCommon)((IFaceFxPhonemesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = FaceFxPhonemes.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFaceFxPhonemes lhs,
            IFaceFxPhonemesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FaceFxPhonemesSetterTranslationCommon)((IFaceFxPhonemesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static FaceFxPhonemes DeepCopy(
            this IFaceFxPhonemesGetter item,
            FaceFxPhonemes.TranslationMask? copyMask = null)
        {
            return ((FaceFxPhonemesSetterTranslationCommon)((IFaceFxPhonemesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FaceFxPhonemes DeepCopy(
            this IFaceFxPhonemesGetter item,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? copyMask = null)
        {
            return ((FaceFxPhonemesSetterTranslationCommon)((IFaceFxPhonemesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FaceFxPhonemes DeepCopy(
            this IFaceFxPhonemesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FaceFxPhonemesSetterTranslationCommon)((IFaceFxPhonemesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            XElement node,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            XElement node,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FaceFxPhonemes.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((FaceFxPhonemesSetterCommon)((IFaceFxPhonemesGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            string path,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            string path,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            string path,
            ErrorMaskBuilder? errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            Stream stream,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            Stream stream,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFaceFxPhonemes item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFaceFxPhonemes item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IFaceFxPhonemes item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FaceFxPhonemesSetterCommon)((IFaceFxPhonemesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum FaceFxPhonemes_FieldIndex
    {
        LipMode = 0,
        Aah_LipBigAah = 1,
        BigAah_LipDST = 2,
        BMP_LipEee = 3,
        ChJSh_LipFV = 4,
        DST_LipK = 5,
        Eee_LipL = 6,
        Eh_LipR = 7,
        FV_LipTh = 8,
        I = 9,
        K = 10,
        N = 11,
        Oh = 12,
        OohQ = 13,
        R = 14,
        Th = 15,
        W = 16,
    }
    #endregion

    #region Registration
    public partial class FaceFxPhonemes_Registration : ILoquiRegistration
    {
        public static readonly FaceFxPhonemes_Registration Instance = new FaceFxPhonemes_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 70,
            version: 0);

        public const string GUID = "b965bdb9-1d8c-4efe-8cfa-2f35cd13370a";

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(FaceFxPhonemes.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FaceFxPhonemes.ErrorMask);

        public static readonly Type ClassType = typeof(FaceFxPhonemes);

        public static readonly Type GetterType = typeof(IFaceFxPhonemesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFaceFxPhonemes);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.FaceFxPhonemes";

        public const string Name = "FaceFxPhonemes";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "LIPMODE":
                    return (ushort)FaceFxPhonemes_FieldIndex.LipMode;
                case "AAH_LIPBIGAAH":
                    return (ushort)FaceFxPhonemes_FieldIndex.Aah_LipBigAah;
                case "BIGAAH_LIPDST":
                    return (ushort)FaceFxPhonemes_FieldIndex.BigAah_LipDST;
                case "BMP_LIPEEE":
                    return (ushort)FaceFxPhonemes_FieldIndex.BMP_LipEee;
                case "CHJSH_LIPFV":
                    return (ushort)FaceFxPhonemes_FieldIndex.ChJSh_LipFV;
                case "DST_LIPK":
                    return (ushort)FaceFxPhonemes_FieldIndex.DST_LipK;
                case "EEE_LIPL":
                    return (ushort)FaceFxPhonemes_FieldIndex.Eee_LipL;
                case "EH_LIPR":
                    return (ushort)FaceFxPhonemes_FieldIndex.Eh_LipR;
                case "FV_LIPTH":
                    return (ushort)FaceFxPhonemes_FieldIndex.FV_LipTh;
                case "I":
                    return (ushort)FaceFxPhonemes_FieldIndex.I;
                case "K":
                    return (ushort)FaceFxPhonemes_FieldIndex.K;
                case "N":
                    return (ushort)FaceFxPhonemes_FieldIndex.N;
                case "OH":
                    return (ushort)FaceFxPhonemes_FieldIndex.Oh;
                case "OOHQ":
                    return (ushort)FaceFxPhonemes_FieldIndex.OohQ;
                case "R":
                    return (ushort)FaceFxPhonemes_FieldIndex.R;
                case "TH":
                    return (ushort)FaceFxPhonemes_FieldIndex.Th;
                case "W":
                    return (ushort)FaceFxPhonemes_FieldIndex.W;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
            switch (enu)
            {
                case FaceFxPhonemes_FieldIndex.LipMode:
                case FaceFxPhonemes_FieldIndex.Aah_LipBigAah:
                case FaceFxPhonemes_FieldIndex.BigAah_LipDST:
                case FaceFxPhonemes_FieldIndex.BMP_LipEee:
                case FaceFxPhonemes_FieldIndex.ChJSh_LipFV:
                case FaceFxPhonemes_FieldIndex.DST_LipK:
                case FaceFxPhonemes_FieldIndex.Eee_LipL:
                case FaceFxPhonemes_FieldIndex.Eh_LipR:
                case FaceFxPhonemes_FieldIndex.FV_LipTh:
                case FaceFxPhonemes_FieldIndex.I:
                case FaceFxPhonemes_FieldIndex.K:
                case FaceFxPhonemes_FieldIndex.N:
                case FaceFxPhonemes_FieldIndex.Oh:
                case FaceFxPhonemes_FieldIndex.OohQ:
                case FaceFxPhonemes_FieldIndex.R:
                case FaceFxPhonemes_FieldIndex.Th:
                case FaceFxPhonemes_FieldIndex.W:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
            switch (enu)
            {
                case FaceFxPhonemes_FieldIndex.Aah_LipBigAah:
                case FaceFxPhonemes_FieldIndex.BigAah_LipDST:
                case FaceFxPhonemes_FieldIndex.BMP_LipEee:
                case FaceFxPhonemes_FieldIndex.ChJSh_LipFV:
                case FaceFxPhonemes_FieldIndex.DST_LipK:
                case FaceFxPhonemes_FieldIndex.Eee_LipL:
                case FaceFxPhonemes_FieldIndex.Eh_LipR:
                case FaceFxPhonemes_FieldIndex.FV_LipTh:
                case FaceFxPhonemes_FieldIndex.I:
                case FaceFxPhonemes_FieldIndex.K:
                case FaceFxPhonemes_FieldIndex.N:
                case FaceFxPhonemes_FieldIndex.Oh:
                case FaceFxPhonemes_FieldIndex.OohQ:
                case FaceFxPhonemes_FieldIndex.R:
                case FaceFxPhonemes_FieldIndex.Th:
                case FaceFxPhonemes_FieldIndex.W:
                    return true;
                case FaceFxPhonemes_FieldIndex.LipMode:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
            switch (enu)
            {
                case FaceFxPhonemes_FieldIndex.LipMode:
                case FaceFxPhonemes_FieldIndex.Aah_LipBigAah:
                case FaceFxPhonemes_FieldIndex.BigAah_LipDST:
                case FaceFxPhonemes_FieldIndex.BMP_LipEee:
                case FaceFxPhonemes_FieldIndex.ChJSh_LipFV:
                case FaceFxPhonemes_FieldIndex.DST_LipK:
                case FaceFxPhonemes_FieldIndex.Eee_LipL:
                case FaceFxPhonemes_FieldIndex.Eh_LipR:
                case FaceFxPhonemes_FieldIndex.FV_LipTh:
                case FaceFxPhonemes_FieldIndex.I:
                case FaceFxPhonemes_FieldIndex.K:
                case FaceFxPhonemes_FieldIndex.N:
                case FaceFxPhonemes_FieldIndex.Oh:
                case FaceFxPhonemes_FieldIndex.OohQ:
                case FaceFxPhonemes_FieldIndex.R:
                case FaceFxPhonemes_FieldIndex.Th:
                case FaceFxPhonemes_FieldIndex.W:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
            switch (enu)
            {
                case FaceFxPhonemes_FieldIndex.LipMode:
                    return "LipMode";
                case FaceFxPhonemes_FieldIndex.Aah_LipBigAah:
                    return "Aah_LipBigAah";
                case FaceFxPhonemes_FieldIndex.BigAah_LipDST:
                    return "BigAah_LipDST";
                case FaceFxPhonemes_FieldIndex.BMP_LipEee:
                    return "BMP_LipEee";
                case FaceFxPhonemes_FieldIndex.ChJSh_LipFV:
                    return "ChJSh_LipFV";
                case FaceFxPhonemes_FieldIndex.DST_LipK:
                    return "DST_LipK";
                case FaceFxPhonemes_FieldIndex.Eee_LipL:
                    return "Eee_LipL";
                case FaceFxPhonemes_FieldIndex.Eh_LipR:
                    return "Eh_LipR";
                case FaceFxPhonemes_FieldIndex.FV_LipTh:
                    return "FV_LipTh";
                case FaceFxPhonemes_FieldIndex.I:
                    return "I";
                case FaceFxPhonemes_FieldIndex.K:
                    return "K";
                case FaceFxPhonemes_FieldIndex.N:
                    return "N";
                case FaceFxPhonemes_FieldIndex.Oh:
                    return "Oh";
                case FaceFxPhonemes_FieldIndex.OohQ:
                    return "OohQ";
                case FaceFxPhonemes_FieldIndex.R:
                    return "R";
                case FaceFxPhonemes_FieldIndex.Th:
                    return "Th";
                case FaceFxPhonemes_FieldIndex.W:
                    return "W";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
            switch (enu)
            {
                case FaceFxPhonemes_FieldIndex.LipMode:
                case FaceFxPhonemes_FieldIndex.Aah_LipBigAah:
                case FaceFxPhonemes_FieldIndex.BigAah_LipDST:
                case FaceFxPhonemes_FieldIndex.BMP_LipEee:
                case FaceFxPhonemes_FieldIndex.ChJSh_LipFV:
                case FaceFxPhonemes_FieldIndex.DST_LipK:
                case FaceFxPhonemes_FieldIndex.Eee_LipL:
                case FaceFxPhonemes_FieldIndex.Eh_LipR:
                case FaceFxPhonemes_FieldIndex.FV_LipTh:
                case FaceFxPhonemes_FieldIndex.I:
                case FaceFxPhonemes_FieldIndex.K:
                case FaceFxPhonemes_FieldIndex.N:
                case FaceFxPhonemes_FieldIndex.Oh:
                case FaceFxPhonemes_FieldIndex.OohQ:
                case FaceFxPhonemes_FieldIndex.R:
                case FaceFxPhonemes_FieldIndex.Th:
                case FaceFxPhonemes_FieldIndex.W:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
            switch (enu)
            {
                case FaceFxPhonemes_FieldIndex.LipMode:
                case FaceFxPhonemes_FieldIndex.Aah_LipBigAah:
                case FaceFxPhonemes_FieldIndex.BigAah_LipDST:
                case FaceFxPhonemes_FieldIndex.BMP_LipEee:
                case FaceFxPhonemes_FieldIndex.ChJSh_LipFV:
                case FaceFxPhonemes_FieldIndex.DST_LipK:
                case FaceFxPhonemes_FieldIndex.Eee_LipL:
                case FaceFxPhonemes_FieldIndex.Eh_LipR:
                case FaceFxPhonemes_FieldIndex.FV_LipTh:
                case FaceFxPhonemes_FieldIndex.I:
                case FaceFxPhonemes_FieldIndex.K:
                case FaceFxPhonemes_FieldIndex.N:
                case FaceFxPhonemes_FieldIndex.Oh:
                case FaceFxPhonemes_FieldIndex.OohQ:
                case FaceFxPhonemes_FieldIndex.R:
                case FaceFxPhonemes_FieldIndex.Th:
                case FaceFxPhonemes_FieldIndex.W:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            FaceFxPhonemes_FieldIndex enu = (FaceFxPhonemes_FieldIndex)index;
            switch (enu)
            {
                case FaceFxPhonemes_FieldIndex.LipMode:
                    return typeof(Boolean);
                case FaceFxPhonemes_FieldIndex.Aah_LipBigAah:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.BigAah_LipDST:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.BMP_LipEee:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.ChJSh_LipFV:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.DST_LipK:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.Eee_LipL:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.Eh_LipR:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.FV_LipTh:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.I:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.K:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.N:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.Oh:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.OohQ:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.R:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.Th:
                    return typeof(Phoneme);
                case FaceFxPhonemes_FieldIndex.W:
                    return typeof(Phoneme);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FaceFxPhonemesXmlWriteTranslation);
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(FaceFxPhonemesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FaceFxPhonemesSetterCommon
    {
        public static readonly FaceFxPhonemesSetterCommon Instance = new FaceFxPhonemesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFaceFxPhonemes item)
        {
            ClearPartial();
            item.LipMode = default;
            item.Aah_LipBigAah = null;
            item.BigAah_LipDST = null;
            item.BMP_LipEee = null;
            item.ChJSh_LipFV = null;
            item.DST_LipK = null;
            item.Eee_LipL = null;
            item.Eh_LipR = null;
            item.FV_LipTh = null;
            item.I = null;
            item.K = null;
            item.N = null;
            item.Oh = null;
            item.OohQ = null;
            item.R = null;
            item.Th = null;
            item.W = null;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IFaceFxPhonemes item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FaceFxPhonemesXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IFaceFxPhonemes item,
            MutagenFrame frame)
        {
        }
        
        public virtual void CopyInFromBinary(
            IFaceFxPhonemes item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class FaceFxPhonemesCommon
    {
        public static readonly FaceFxPhonemesCommon Instance = new FaceFxPhonemesCommon();

        public FaceFxPhonemes.Mask<bool> GetEqualsMask(
            IFaceFxPhonemesGetter item,
            IFaceFxPhonemesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FaceFxPhonemes.Mask<bool>(false);
            ((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFaceFxPhonemesGetter item,
            IFaceFxPhonemesGetter rhs,
            FaceFxPhonemes.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.LipMode = item.LipMode == rhs.LipMode;
            ret.Aah_LipBigAah = EqualsMaskHelper.EqualsHelper(
                item.Aah_LipBigAah,
                rhs.Aah_LipBigAah,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.BigAah_LipDST = EqualsMaskHelper.EqualsHelper(
                item.BigAah_LipDST,
                rhs.BigAah_LipDST,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.BMP_LipEee = EqualsMaskHelper.EqualsHelper(
                item.BMP_LipEee,
                rhs.BMP_LipEee,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ChJSh_LipFV = EqualsMaskHelper.EqualsHelper(
                item.ChJSh_LipFV,
                rhs.ChJSh_LipFV,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DST_LipK = EqualsMaskHelper.EqualsHelper(
                item.DST_LipK,
                rhs.DST_LipK,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Eee_LipL = EqualsMaskHelper.EqualsHelper(
                item.Eee_LipL,
                rhs.Eee_LipL,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Eh_LipR = EqualsMaskHelper.EqualsHelper(
                item.Eh_LipR,
                rhs.Eh_LipR,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FV_LipTh = EqualsMaskHelper.EqualsHelper(
                item.FV_LipTh,
                rhs.FV_LipTh,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.I = EqualsMaskHelper.EqualsHelper(
                item.I,
                rhs.I,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.K = EqualsMaskHelper.EqualsHelper(
                item.K,
                rhs.K,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.N = EqualsMaskHelper.EqualsHelper(
                item.N,
                rhs.N,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Oh = EqualsMaskHelper.EqualsHelper(
                item.Oh,
                rhs.Oh,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.OohQ = EqualsMaskHelper.EqualsHelper(
                item.OohQ,
                rhs.OohQ,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.R = EqualsMaskHelper.EqualsHelper(
                item.R,
                rhs.R,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Th = EqualsMaskHelper.EqualsHelper(
                item.Th,
                rhs.Th,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.W = EqualsMaskHelper.EqualsHelper(
                item.W,
                rhs.W,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IFaceFxPhonemesGetter item,
            string? name = null,
            FaceFxPhonemes.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFaceFxPhonemesGetter item,
            FileGeneration fg,
            string? name = null,
            FaceFxPhonemes.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"FaceFxPhonemes =>");
            }
            else
            {
                fg.AppendLine($"{name} (FaceFxPhonemes) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFaceFxPhonemesGetter item,
            FileGeneration fg,
            FaceFxPhonemes.Mask<bool>? printMask = null)
        {
            if (printMask?.LipMode ?? true)
            {
                fg.AppendItem(item.LipMode, "LipMode");
            }
            if ((printMask?.Aah_LipBigAah?.Overall ?? true)
                && item.Aah_LipBigAah.TryGet(out var Aah_LipBigAahItem))
            {
                Aah_LipBigAahItem?.ToString(fg, "Aah_LipBigAah");
            }
            if ((printMask?.BigAah_LipDST?.Overall ?? true)
                && item.BigAah_LipDST.TryGet(out var BigAah_LipDSTItem))
            {
                BigAah_LipDSTItem?.ToString(fg, "BigAah_LipDST");
            }
            if ((printMask?.BMP_LipEee?.Overall ?? true)
                && item.BMP_LipEee.TryGet(out var BMP_LipEeeItem))
            {
                BMP_LipEeeItem?.ToString(fg, "BMP_LipEee");
            }
            if ((printMask?.ChJSh_LipFV?.Overall ?? true)
                && item.ChJSh_LipFV.TryGet(out var ChJSh_LipFVItem))
            {
                ChJSh_LipFVItem?.ToString(fg, "ChJSh_LipFV");
            }
            if ((printMask?.DST_LipK?.Overall ?? true)
                && item.DST_LipK.TryGet(out var DST_LipKItem))
            {
                DST_LipKItem?.ToString(fg, "DST_LipK");
            }
            if ((printMask?.Eee_LipL?.Overall ?? true)
                && item.Eee_LipL.TryGet(out var Eee_LipLItem))
            {
                Eee_LipLItem?.ToString(fg, "Eee_LipL");
            }
            if ((printMask?.Eh_LipR?.Overall ?? true)
                && item.Eh_LipR.TryGet(out var Eh_LipRItem))
            {
                Eh_LipRItem?.ToString(fg, "Eh_LipR");
            }
            if ((printMask?.FV_LipTh?.Overall ?? true)
                && item.FV_LipTh.TryGet(out var FV_LipThItem))
            {
                FV_LipThItem?.ToString(fg, "FV_LipTh");
            }
            if ((printMask?.I?.Overall ?? true)
                && item.I.TryGet(out var IItem))
            {
                IItem?.ToString(fg, "I");
            }
            if ((printMask?.K?.Overall ?? true)
                && item.K.TryGet(out var KItem))
            {
                KItem?.ToString(fg, "K");
            }
            if ((printMask?.N?.Overall ?? true)
                && item.N.TryGet(out var NItem))
            {
                NItem?.ToString(fg, "N");
            }
            if ((printMask?.Oh?.Overall ?? true)
                && item.Oh.TryGet(out var OhItem))
            {
                OhItem?.ToString(fg, "Oh");
            }
            if ((printMask?.OohQ?.Overall ?? true)
                && item.OohQ.TryGet(out var OohQItem))
            {
                OohQItem?.ToString(fg, "OohQ");
            }
            if ((printMask?.R?.Overall ?? true)
                && item.R.TryGet(out var RItem))
            {
                RItem?.ToString(fg, "R");
            }
            if ((printMask?.Th?.Overall ?? true)
                && item.Th.TryGet(out var ThItem))
            {
                ThItem?.ToString(fg, "Th");
            }
            if ((printMask?.W?.Overall ?? true)
                && item.W.TryGet(out var WItem))
            {
                WItem?.ToString(fg, "W");
            }
        }
        
        public bool HasBeenSet(
            IFaceFxPhonemesGetter item,
            FaceFxPhonemes.Mask<bool?> checkMask)
        {
            if (checkMask.Aah_LipBigAah?.Overall.HasValue ?? false && checkMask.Aah_LipBigAah.Overall.Value != (item.Aah_LipBigAah != null)) return false;
            if (checkMask.Aah_LipBigAah?.Specific != null && (item.Aah_LipBigAah == null || !item.Aah_LipBigAah.HasBeenSet(checkMask.Aah_LipBigAah.Specific))) return false;
            if (checkMask.BigAah_LipDST?.Overall.HasValue ?? false && checkMask.BigAah_LipDST.Overall.Value != (item.BigAah_LipDST != null)) return false;
            if (checkMask.BigAah_LipDST?.Specific != null && (item.BigAah_LipDST == null || !item.BigAah_LipDST.HasBeenSet(checkMask.BigAah_LipDST.Specific))) return false;
            if (checkMask.BMP_LipEee?.Overall.HasValue ?? false && checkMask.BMP_LipEee.Overall.Value != (item.BMP_LipEee != null)) return false;
            if (checkMask.BMP_LipEee?.Specific != null && (item.BMP_LipEee == null || !item.BMP_LipEee.HasBeenSet(checkMask.BMP_LipEee.Specific))) return false;
            if (checkMask.ChJSh_LipFV?.Overall.HasValue ?? false && checkMask.ChJSh_LipFV.Overall.Value != (item.ChJSh_LipFV != null)) return false;
            if (checkMask.ChJSh_LipFV?.Specific != null && (item.ChJSh_LipFV == null || !item.ChJSh_LipFV.HasBeenSet(checkMask.ChJSh_LipFV.Specific))) return false;
            if (checkMask.DST_LipK?.Overall.HasValue ?? false && checkMask.DST_LipK.Overall.Value != (item.DST_LipK != null)) return false;
            if (checkMask.DST_LipK?.Specific != null && (item.DST_LipK == null || !item.DST_LipK.HasBeenSet(checkMask.DST_LipK.Specific))) return false;
            if (checkMask.Eee_LipL?.Overall.HasValue ?? false && checkMask.Eee_LipL.Overall.Value != (item.Eee_LipL != null)) return false;
            if (checkMask.Eee_LipL?.Specific != null && (item.Eee_LipL == null || !item.Eee_LipL.HasBeenSet(checkMask.Eee_LipL.Specific))) return false;
            if (checkMask.Eh_LipR?.Overall.HasValue ?? false && checkMask.Eh_LipR.Overall.Value != (item.Eh_LipR != null)) return false;
            if (checkMask.Eh_LipR?.Specific != null && (item.Eh_LipR == null || !item.Eh_LipR.HasBeenSet(checkMask.Eh_LipR.Specific))) return false;
            if (checkMask.FV_LipTh?.Overall.HasValue ?? false && checkMask.FV_LipTh.Overall.Value != (item.FV_LipTh != null)) return false;
            if (checkMask.FV_LipTh?.Specific != null && (item.FV_LipTh == null || !item.FV_LipTh.HasBeenSet(checkMask.FV_LipTh.Specific))) return false;
            if (checkMask.I?.Overall.HasValue ?? false && checkMask.I.Overall.Value != (item.I != null)) return false;
            if (checkMask.I?.Specific != null && (item.I == null || !item.I.HasBeenSet(checkMask.I.Specific))) return false;
            if (checkMask.K?.Overall.HasValue ?? false && checkMask.K.Overall.Value != (item.K != null)) return false;
            if (checkMask.K?.Specific != null && (item.K == null || !item.K.HasBeenSet(checkMask.K.Specific))) return false;
            if (checkMask.N?.Overall.HasValue ?? false && checkMask.N.Overall.Value != (item.N != null)) return false;
            if (checkMask.N?.Specific != null && (item.N == null || !item.N.HasBeenSet(checkMask.N.Specific))) return false;
            if (checkMask.Oh?.Overall.HasValue ?? false && checkMask.Oh.Overall.Value != (item.Oh != null)) return false;
            if (checkMask.Oh?.Specific != null && (item.Oh == null || !item.Oh.HasBeenSet(checkMask.Oh.Specific))) return false;
            if (checkMask.OohQ?.Overall.HasValue ?? false && checkMask.OohQ.Overall.Value != (item.OohQ != null)) return false;
            if (checkMask.OohQ?.Specific != null && (item.OohQ == null || !item.OohQ.HasBeenSet(checkMask.OohQ.Specific))) return false;
            if (checkMask.R?.Overall.HasValue ?? false && checkMask.R.Overall.Value != (item.R != null)) return false;
            if (checkMask.R?.Specific != null && (item.R == null || !item.R.HasBeenSet(checkMask.R.Specific))) return false;
            if (checkMask.Th?.Overall.HasValue ?? false && checkMask.Th.Overall.Value != (item.Th != null)) return false;
            if (checkMask.Th?.Specific != null && (item.Th == null || !item.Th.HasBeenSet(checkMask.Th.Specific))) return false;
            if (checkMask.W?.Overall.HasValue ?? false && checkMask.W.Overall.Value != (item.W != null)) return false;
            if (checkMask.W?.Specific != null && (item.W == null || !item.W.HasBeenSet(checkMask.W.Specific))) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IFaceFxPhonemesGetter item,
            FaceFxPhonemes.Mask<bool> mask)
        {
            mask.LipMode = true;
            var itemAah_LipBigAah = item.Aah_LipBigAah;
            mask.Aah_LipBigAah = new MaskItem<bool, Phoneme.Mask<bool>?>(itemAah_LipBigAah != null, itemAah_LipBigAah?.GetHasBeenSetMask());
            var itemBigAah_LipDST = item.BigAah_LipDST;
            mask.BigAah_LipDST = new MaskItem<bool, Phoneme.Mask<bool>?>(itemBigAah_LipDST != null, itemBigAah_LipDST?.GetHasBeenSetMask());
            var itemBMP_LipEee = item.BMP_LipEee;
            mask.BMP_LipEee = new MaskItem<bool, Phoneme.Mask<bool>?>(itemBMP_LipEee != null, itemBMP_LipEee?.GetHasBeenSetMask());
            var itemChJSh_LipFV = item.ChJSh_LipFV;
            mask.ChJSh_LipFV = new MaskItem<bool, Phoneme.Mask<bool>?>(itemChJSh_LipFV != null, itemChJSh_LipFV?.GetHasBeenSetMask());
            var itemDST_LipK = item.DST_LipK;
            mask.DST_LipK = new MaskItem<bool, Phoneme.Mask<bool>?>(itemDST_LipK != null, itemDST_LipK?.GetHasBeenSetMask());
            var itemEee_LipL = item.Eee_LipL;
            mask.Eee_LipL = new MaskItem<bool, Phoneme.Mask<bool>?>(itemEee_LipL != null, itemEee_LipL?.GetHasBeenSetMask());
            var itemEh_LipR = item.Eh_LipR;
            mask.Eh_LipR = new MaskItem<bool, Phoneme.Mask<bool>?>(itemEh_LipR != null, itemEh_LipR?.GetHasBeenSetMask());
            var itemFV_LipTh = item.FV_LipTh;
            mask.FV_LipTh = new MaskItem<bool, Phoneme.Mask<bool>?>(itemFV_LipTh != null, itemFV_LipTh?.GetHasBeenSetMask());
            var itemI = item.I;
            mask.I = new MaskItem<bool, Phoneme.Mask<bool>?>(itemI != null, itemI?.GetHasBeenSetMask());
            var itemK = item.K;
            mask.K = new MaskItem<bool, Phoneme.Mask<bool>?>(itemK != null, itemK?.GetHasBeenSetMask());
            var itemN = item.N;
            mask.N = new MaskItem<bool, Phoneme.Mask<bool>?>(itemN != null, itemN?.GetHasBeenSetMask());
            var itemOh = item.Oh;
            mask.Oh = new MaskItem<bool, Phoneme.Mask<bool>?>(itemOh != null, itemOh?.GetHasBeenSetMask());
            var itemOohQ = item.OohQ;
            mask.OohQ = new MaskItem<bool, Phoneme.Mask<bool>?>(itemOohQ != null, itemOohQ?.GetHasBeenSetMask());
            var itemR = item.R;
            mask.R = new MaskItem<bool, Phoneme.Mask<bool>?>(itemR != null, itemR?.GetHasBeenSetMask());
            var itemTh = item.Th;
            mask.Th = new MaskItem<bool, Phoneme.Mask<bool>?>(itemTh != null, itemTh?.GetHasBeenSetMask());
            var itemW = item.W;
            mask.W = new MaskItem<bool, Phoneme.Mask<bool>?>(itemW != null, itemW?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFaceFxPhonemesGetter? lhs,
            IFaceFxPhonemesGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.LipMode != rhs.LipMode) return false;
            if (!object.Equals(lhs.Aah_LipBigAah, rhs.Aah_LipBigAah)) return false;
            if (!object.Equals(lhs.BigAah_LipDST, rhs.BigAah_LipDST)) return false;
            if (!object.Equals(lhs.BMP_LipEee, rhs.BMP_LipEee)) return false;
            if (!object.Equals(lhs.ChJSh_LipFV, rhs.ChJSh_LipFV)) return false;
            if (!object.Equals(lhs.DST_LipK, rhs.DST_LipK)) return false;
            if (!object.Equals(lhs.Eee_LipL, rhs.Eee_LipL)) return false;
            if (!object.Equals(lhs.Eh_LipR, rhs.Eh_LipR)) return false;
            if (!object.Equals(lhs.FV_LipTh, rhs.FV_LipTh)) return false;
            if (!object.Equals(lhs.I, rhs.I)) return false;
            if (!object.Equals(lhs.K, rhs.K)) return false;
            if (!object.Equals(lhs.N, rhs.N)) return false;
            if (!object.Equals(lhs.Oh, rhs.Oh)) return false;
            if (!object.Equals(lhs.OohQ, rhs.OohQ)) return false;
            if (!object.Equals(lhs.R, rhs.R)) return false;
            if (!object.Equals(lhs.Th, rhs.Th)) return false;
            if (!object.Equals(lhs.W, rhs.W)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IFaceFxPhonemesGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.LipMode);
            if (item.Aah_LipBigAah.TryGet(out var Aah_LipBigAahitem))
            {
                hash.Add(Aah_LipBigAahitem);
            }
            if (item.BigAah_LipDST.TryGet(out var BigAah_LipDSTitem))
            {
                hash.Add(BigAah_LipDSTitem);
            }
            if (item.BMP_LipEee.TryGet(out var BMP_LipEeeitem))
            {
                hash.Add(BMP_LipEeeitem);
            }
            if (item.ChJSh_LipFV.TryGet(out var ChJSh_LipFVitem))
            {
                hash.Add(ChJSh_LipFVitem);
            }
            if (item.DST_LipK.TryGet(out var DST_LipKitem))
            {
                hash.Add(DST_LipKitem);
            }
            if (item.Eee_LipL.TryGet(out var Eee_LipLitem))
            {
                hash.Add(Eee_LipLitem);
            }
            if (item.Eh_LipR.TryGet(out var Eh_LipRitem))
            {
                hash.Add(Eh_LipRitem);
            }
            if (item.FV_LipTh.TryGet(out var FV_LipThitem))
            {
                hash.Add(FV_LipThitem);
            }
            if (item.I.TryGet(out var Iitem))
            {
                hash.Add(Iitem);
            }
            if (item.K.TryGet(out var Kitem))
            {
                hash.Add(Kitem);
            }
            if (item.N.TryGet(out var Nitem))
            {
                hash.Add(Nitem);
            }
            if (item.Oh.TryGet(out var Ohitem))
            {
                hash.Add(Ohitem);
            }
            if (item.OohQ.TryGet(out var OohQitem))
            {
                hash.Add(OohQitem);
            }
            if (item.R.TryGet(out var Ritem))
            {
                hash.Add(Ritem);
            }
            if (item.Th.TryGet(out var Thitem))
            {
                hash.Add(Thitem);
            }
            if (item.W.TryGet(out var Witem))
            {
                hash.Add(Witem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return FaceFxPhonemes.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IFaceFxPhonemesGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class FaceFxPhonemesSetterTranslationCommon
    {
        public static readonly FaceFxPhonemesSetterTranslationCommon Instance = new FaceFxPhonemesSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IFaceFxPhonemes item,
            IFaceFxPhonemesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.LipMode) ?? true))
            {
                item.LipMode = rhs.LipMode;
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Aah_LipBigAah) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.Aah_LipBigAah);
                try
                {
                    if(rhs.Aah_LipBigAah.TryGet(out var rhsAah_LipBigAah))
                    {
                        item.Aah_LipBigAah = rhsAah_LipBigAah.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Aah_LipBigAah));
                    }
                    else
                    {
                        item.Aah_LipBigAah = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.BigAah_LipDST) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.BigAah_LipDST);
                try
                {
                    if(rhs.BigAah_LipDST.TryGet(out var rhsBigAah_LipDST))
                    {
                        item.BigAah_LipDST = rhsBigAah_LipDST.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.BigAah_LipDST));
                    }
                    else
                    {
                        item.BigAah_LipDST = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.BMP_LipEee) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.BMP_LipEee);
                try
                {
                    if(rhs.BMP_LipEee.TryGet(out var rhsBMP_LipEee))
                    {
                        item.BMP_LipEee = rhsBMP_LipEee.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.BMP_LipEee));
                    }
                    else
                    {
                        item.BMP_LipEee = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.ChJSh_LipFV) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.ChJSh_LipFV);
                try
                {
                    if(rhs.ChJSh_LipFV.TryGet(out var rhsChJSh_LipFV))
                    {
                        item.ChJSh_LipFV = rhsChJSh_LipFV.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.ChJSh_LipFV));
                    }
                    else
                    {
                        item.ChJSh_LipFV = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.DST_LipK) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.DST_LipK);
                try
                {
                    if(rhs.DST_LipK.TryGet(out var rhsDST_LipK))
                    {
                        item.DST_LipK = rhsDST_LipK.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.DST_LipK));
                    }
                    else
                    {
                        item.DST_LipK = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Eee_LipL) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.Eee_LipL);
                try
                {
                    if(rhs.Eee_LipL.TryGet(out var rhsEee_LipL))
                    {
                        item.Eee_LipL = rhsEee_LipL.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Eee_LipL));
                    }
                    else
                    {
                        item.Eee_LipL = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Eh_LipR) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.Eh_LipR);
                try
                {
                    if(rhs.Eh_LipR.TryGet(out var rhsEh_LipR))
                    {
                        item.Eh_LipR = rhsEh_LipR.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Eh_LipR));
                    }
                    else
                    {
                        item.Eh_LipR = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.FV_LipTh) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.FV_LipTh);
                try
                {
                    if(rhs.FV_LipTh.TryGet(out var rhsFV_LipTh))
                    {
                        item.FV_LipTh = rhsFV_LipTh.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.FV_LipTh));
                    }
                    else
                    {
                        item.FV_LipTh = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.I) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.I);
                try
                {
                    if(rhs.I.TryGet(out var rhsI))
                    {
                        item.I = rhsI.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.I));
                    }
                    else
                    {
                        item.I = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.K) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.K);
                try
                {
                    if(rhs.K.TryGet(out var rhsK))
                    {
                        item.K = rhsK.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.K));
                    }
                    else
                    {
                        item.K = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.N) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.N);
                try
                {
                    if(rhs.N.TryGet(out var rhsN))
                    {
                        item.N = rhsN.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.N));
                    }
                    else
                    {
                        item.N = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Oh) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.Oh);
                try
                {
                    if(rhs.Oh.TryGet(out var rhsOh))
                    {
                        item.Oh = rhsOh.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Oh));
                    }
                    else
                    {
                        item.Oh = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.OohQ) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.OohQ);
                try
                {
                    if(rhs.OohQ.TryGet(out var rhsOohQ))
                    {
                        item.OohQ = rhsOohQ.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.OohQ));
                    }
                    else
                    {
                        item.OohQ = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.R) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.R);
                try
                {
                    if(rhs.R.TryGet(out var rhsR))
                    {
                        item.R = rhsR.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.R));
                    }
                    else
                    {
                        item.R = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Th) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.Th);
                try
                {
                    if(rhs.Th.TryGet(out var rhsTh))
                    {
                        item.Th = rhsTh.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Th));
                    }
                    else
                    {
                        item.Th = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.W) ?? true))
            {
                errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.W);
                try
                {
                    if(rhs.W.TryGet(out var rhsW))
                    {
                        item.W = rhsW.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.W));
                    }
                    else
                    {
                        item.W = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public FaceFxPhonemes DeepCopy(
            IFaceFxPhonemesGetter item,
            FaceFxPhonemes.TranslationMask? copyMask = null)
        {
            FaceFxPhonemes ret = (FaceFxPhonemes)((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public FaceFxPhonemes DeepCopy(
            IFaceFxPhonemesGetter item,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? copyMask = null)
        {
            FaceFxPhonemes ret = (FaceFxPhonemes)((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public FaceFxPhonemes DeepCopy(
            IFaceFxPhonemesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FaceFxPhonemes ret = (FaceFxPhonemes)((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class FaceFxPhonemes
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FaceFxPhonemes_Registration.Instance;
        public static FaceFxPhonemes_Registration Registration => FaceFxPhonemes_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FaceFxPhonemesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return FaceFxPhonemesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FaceFxPhonemesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFaceFxPhonemesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IFaceFxPhonemesGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IFaceFxPhonemesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FaceFxPhonemesXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static FaceFxPhonemesXmlWriteTranslation Instance = new FaceFxPhonemesXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFaceFxPhonemesGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.LipMode) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LipMode),
                    item: item.LipMode,
                    fieldIndex: (int)FaceFxPhonemes_FieldIndex.LipMode,
                    errorMask: errorMask);
            }
            if ((item.Aah_LipBigAah != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Aah_LipBigAah) ?? true))
            {
                if (item.Aah_LipBigAah.TryGet(out var Aah_LipBigAahItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)Aah_LipBigAahItem).XmlWriteTranslator).Write(
                        item: Aah_LipBigAahItem,
                        node: node,
                        name: nameof(item.Aah_LipBigAah),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.Aah_LipBigAah,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Aah_LipBigAah));
                }
            }
            if ((item.BigAah_LipDST != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.BigAah_LipDST) ?? true))
            {
                if (item.BigAah_LipDST.TryGet(out var BigAah_LipDSTItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)BigAah_LipDSTItem).XmlWriteTranslator).Write(
                        item: BigAah_LipDSTItem,
                        node: node,
                        name: nameof(item.BigAah_LipDST),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.BigAah_LipDST,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.BigAah_LipDST));
                }
            }
            if ((item.BMP_LipEee != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.BMP_LipEee) ?? true))
            {
                if (item.BMP_LipEee.TryGet(out var BMP_LipEeeItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)BMP_LipEeeItem).XmlWriteTranslator).Write(
                        item: BMP_LipEeeItem,
                        node: node,
                        name: nameof(item.BMP_LipEee),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.BMP_LipEee,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.BMP_LipEee));
                }
            }
            if ((item.ChJSh_LipFV != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.ChJSh_LipFV) ?? true))
            {
                if (item.ChJSh_LipFV.TryGet(out var ChJSh_LipFVItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)ChJSh_LipFVItem).XmlWriteTranslator).Write(
                        item: ChJSh_LipFVItem,
                        node: node,
                        name: nameof(item.ChJSh_LipFV),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.ChJSh_LipFV,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.ChJSh_LipFV));
                }
            }
            if ((item.DST_LipK != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.DST_LipK) ?? true))
            {
                if (item.DST_LipK.TryGet(out var DST_LipKItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)DST_LipKItem).XmlWriteTranslator).Write(
                        item: DST_LipKItem,
                        node: node,
                        name: nameof(item.DST_LipK),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.DST_LipK,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.DST_LipK));
                }
            }
            if ((item.Eee_LipL != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Eee_LipL) ?? true))
            {
                if (item.Eee_LipL.TryGet(out var Eee_LipLItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)Eee_LipLItem).XmlWriteTranslator).Write(
                        item: Eee_LipLItem,
                        node: node,
                        name: nameof(item.Eee_LipL),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.Eee_LipL,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Eee_LipL));
                }
            }
            if ((item.Eh_LipR != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Eh_LipR) ?? true))
            {
                if (item.Eh_LipR.TryGet(out var Eh_LipRItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)Eh_LipRItem).XmlWriteTranslator).Write(
                        item: Eh_LipRItem,
                        node: node,
                        name: nameof(item.Eh_LipR),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.Eh_LipR,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Eh_LipR));
                }
            }
            if ((item.FV_LipTh != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.FV_LipTh) ?? true))
            {
                if (item.FV_LipTh.TryGet(out var FV_LipThItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)FV_LipThItem).XmlWriteTranslator).Write(
                        item: FV_LipThItem,
                        node: node,
                        name: nameof(item.FV_LipTh),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.FV_LipTh,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.FV_LipTh));
                }
            }
            if ((item.I != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.I) ?? true))
            {
                if (item.I.TryGet(out var IItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)IItem).XmlWriteTranslator).Write(
                        item: IItem,
                        node: node,
                        name: nameof(item.I),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.I,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.I));
                }
            }
            if ((item.K != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.K) ?? true))
            {
                if (item.K.TryGet(out var KItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)KItem).XmlWriteTranslator).Write(
                        item: KItem,
                        node: node,
                        name: nameof(item.K),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.K,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.K));
                }
            }
            if ((item.N != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.N) ?? true))
            {
                if (item.N.TryGet(out var NItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)NItem).XmlWriteTranslator).Write(
                        item: NItem,
                        node: node,
                        name: nameof(item.N),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.N,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.N));
                }
            }
            if ((item.Oh != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Oh) ?? true))
            {
                if (item.Oh.TryGet(out var OhItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)OhItem).XmlWriteTranslator).Write(
                        item: OhItem,
                        node: node,
                        name: nameof(item.Oh),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.Oh,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Oh));
                }
            }
            if ((item.OohQ != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.OohQ) ?? true))
            {
                if (item.OohQ.TryGet(out var OohQItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)OohQItem).XmlWriteTranslator).Write(
                        item: OohQItem,
                        node: node,
                        name: nameof(item.OohQ),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.OohQ,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.OohQ));
                }
            }
            if ((item.R != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.R) ?? true))
            {
                if (item.R.TryGet(out var RItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)RItem).XmlWriteTranslator).Write(
                        item: RItem,
                        node: node,
                        name: nameof(item.R),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.R,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.R));
                }
            }
            if ((item.Th != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.Th) ?? true))
            {
                if (item.Th.TryGet(out var ThItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)ThItem).XmlWriteTranslator).Write(
                        item: ThItem,
                        node: node,
                        name: nameof(item.Th),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.Th,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Th));
                }
            }
            if ((item.W != null)
                && (translationMask?.GetShouldTranslate((int)FaceFxPhonemes_FieldIndex.W) ?? true))
            {
                if (item.W.TryGet(out var WItem))
                {
                    ((PhonemeXmlWriteTranslation)((IXmlItem)WItem).XmlWriteTranslator).Write(
                        item: WItem,
                        node: node,
                        name: nameof(item.W),
                        fieldIndex: (int)FaceFxPhonemes_FieldIndex.W,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.W));
                }
            }
        }

        public void Write(
            XElement node,
            IFaceFxPhonemesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.FaceFxPhonemes");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.FaceFxPhonemes");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFaceFxPhonemesGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IFaceFxPhonemesGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IFaceFxPhonemesGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class FaceFxPhonemesXmlCreateTranslation
    {
        public readonly static FaceFxPhonemesXmlCreateTranslation Instance = new FaceFxPhonemesXmlCreateTranslation();

        public static void FillPublicXml(
            IFaceFxPhonemes item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FaceFxPhonemesXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFaceFxPhonemes item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "LipMode":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.LipMode);
                    try
                    {
                        item.LipMode = BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Aah_LipBigAah":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.Aah_LipBigAah);
                    try
                    {
                        item.Aah_LipBigAah = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Aah_LipBigAah));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BigAah_LipDST":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.BigAah_LipDST);
                    try
                    {
                        item.BigAah_LipDST = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.BigAah_LipDST));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BMP_LipEee":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.BMP_LipEee);
                    try
                    {
                        item.BMP_LipEee = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.BMP_LipEee));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ChJSh_LipFV":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.ChJSh_LipFV);
                    try
                    {
                        item.ChJSh_LipFV = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.ChJSh_LipFV));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DST_LipK":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.DST_LipK);
                    try
                    {
                        item.DST_LipK = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.DST_LipK));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eee_LipL":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.Eee_LipL);
                    try
                    {
                        item.Eee_LipL = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Eee_LipL));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eh_LipR":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.Eh_LipR);
                    try
                    {
                        item.Eh_LipR = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Eh_LipR));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FV_LipTh":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.FV_LipTh);
                    try
                    {
                        item.FV_LipTh = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.FV_LipTh));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "I":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.I);
                    try
                    {
                        item.I = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.I));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "K":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.K);
                    try
                    {
                        item.K = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.K));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "N":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.N);
                    try
                    {
                        item.N = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.N));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Oh":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.Oh);
                    try
                    {
                        item.Oh = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Oh));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OohQ":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.OohQ);
                    try
                    {
                        item.OohQ = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.OohQ));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "R":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.R);
                    try
                    {
                        item.R = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.R));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Th":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.Th);
                    try
                    {
                        item.Th = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.Th));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "W":
                    errorMask?.PushIndex((int)FaceFxPhonemes_FieldIndex.W);
                    try
                    {
                        item.W = LoquiXmlTranslation<Phoneme>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FaceFxPhonemes_FieldIndex.W));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class FaceFxPhonemesXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            XElement node,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((FaceFxPhonemesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FaceFxPhonemes.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            string path,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            Stream stream,
            out FaceFxPhonemes.ErrorMask errorMask,
            FaceFxPhonemes.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((FaceFxPhonemesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            XElement node,
            string? name = null,
            FaceFxPhonemes.TranslationMask? translationMask = null)
        {
            ((FaceFxPhonemesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((FaceFxPhonemesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFaceFxPhonemesGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((FaceFxPhonemesXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FaceFxPhonemesBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static FaceFxPhonemesBinaryWriteTranslation Instance = new FaceFxPhonemesBinaryWriteTranslation();

        public static void WriteEmbedded(
            IFaceFxPhonemesGetter item,
            MutagenWriter writer)
        {
        }

        public void Write(
            MutagenWriter writer,
            IFaceFxPhonemesGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFaceFxPhonemesGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class FaceFxPhonemesBinaryCreateTranslation
    {
        public readonly static FaceFxPhonemesBinaryCreateTranslation Instance = new FaceFxPhonemesBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class FaceFxPhonemesBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFaceFxPhonemesGetter item,
            MutagenWriter writer)
        {
            ((FaceFxPhonemesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FaceFxPhonemesBinaryOverlay :
        BinaryOverlay,
        IFaceFxPhonemesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FaceFxPhonemes_Registration.Instance;
        public static FaceFxPhonemes_Registration Registration => FaceFxPhonemes_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FaceFxPhonemesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FaceFxPhonemesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFaceFxPhonemesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IFaceFxPhonemesGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IFaceFxPhonemesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFaceFxPhonemesGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => FaceFxPhonemesXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FaceFxPhonemesXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FaceFxPhonemesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FaceFxPhonemesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected FaceFxPhonemesBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static FaceFxPhonemesBinaryOverlay FaceFxPhonemesFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new FaceFxPhonemesBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 0),
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static FaceFxPhonemesBinaryOverlay FaceFxPhonemesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return FaceFxPhonemesFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FaceFxPhonemesMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

