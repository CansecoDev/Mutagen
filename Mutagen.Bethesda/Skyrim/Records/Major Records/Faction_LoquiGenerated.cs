/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Faction :
        SkyrimMajorRecord,
        IFactionInternal,
        ILoquiObjectSetter<Faction>,
        IEquatable<Faction>,
        IEqualsMask
    {
        #region Ctor
        protected Faction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IFactionGetter.Name => this.Name;
        #endregion
        #region Relations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Relation> _Relations = new ExtendedList<Relation>();
        public ExtendedList<Relation> Relations
        {
            get => this._Relations;
            protected set => this._Relations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRelationGetter> IFactionGetter.Relations => _Relations;
        #endregion

        #endregion
        #region Flags
        public Faction.FactionFlag Flags { get; set; } = default;
        #endregion
        #region ExteriorJailMarker
        public FormLinkNullable<PlacedObject> ExteriorJailMarker { get; set; } = new FormLinkNullable<PlacedObject>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IFactionGetter.ExteriorJailMarker => this.ExteriorJailMarker;
        #endregion
        #region FollowerWaitMarker
        public FormLinkNullable<PlacedObject> FollowerWaitMarker { get; set; } = new FormLinkNullable<PlacedObject>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IFactionGetter.FollowerWaitMarker => this.FollowerWaitMarker;
        #endregion
        #region StolenGoodsContainer
        public FormLinkNullable<PlacedObject> StolenGoodsContainer { get; set; } = new FormLinkNullable<PlacedObject>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IFactionGetter.StolenGoodsContainer => this.StolenGoodsContainer;
        #endregion
        #region PlayerInventoryContainer
        public FormLinkNullable<PlacedObject> PlayerInventoryContainer { get; set; } = new FormLinkNullable<PlacedObject>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IFactionGetter.PlayerInventoryContainer => this.PlayerInventoryContainer;
        #endregion
        #region SharedCrimeFactionList
        public FormLinkNullable<FormList> SharedCrimeFactionList { get; set; } = new FormLinkNullable<FormList>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IFactionGetter.SharedCrimeFactionList => this.SharedCrimeFactionList;
        #endregion
        #region JailOutfit
        public FormLinkNullable<Outfit> JailOutfit { get; set; } = new FormLinkNullable<Outfit>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IOutfitGetter> IFactionGetter.JailOutfit => this.JailOutfit;
        #endregion
        #region CrimeValues
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CrimeValues? _CrimeValues;
        public CrimeValues? CrimeValues
        {
            get => _CrimeValues;
            set => _CrimeValues = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICrimeValuesGetter? IFactionGetter.CrimeValues => this.CrimeValues;
        #endregion
        #region Ranks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Rank> _Ranks = new ExtendedList<Rank>();
        public ExtendedList<Rank> Ranks
        {
            get => this._Ranks;
            protected set => this._Ranks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRankGetter> IFactionGetter.Ranks => _Ranks;
        #endregion

        #endregion
        #region VendorBuySellList
        public FormLinkNullable<FormList> VendorBuySellList { get; set; } = new FormLinkNullable<FormList>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IFactionGetter.VendorBuySellList => this.VendorBuySellList;
        #endregion
        #region MerchantContainer
        public FormLinkNullable<PlacedObject> MerchantContainer { get; set; } = new FormLinkNullable<PlacedObject>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IFactionGetter.MerchantContainer => this.MerchantContainer;
        #endregion
        #region VendorValues
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VendorValues? _VendorValues;
        public VendorValues? VendorValues
        {
            get => _VendorValues;
            set => _VendorValues = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVendorValuesGetter? IFactionGetter.VendorValues => this.VendorValues;
        #endregion
        #region VendorLocation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Location? _VendorLocation;
        public Location? VendorLocation
        {
            get => _VendorLocation;
            set => _VendorLocation = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILocationGetter? IFactionGetter.VendorLocation => this.VendorLocation;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition>? _Conditions;
        public ExtendedList<Condition>? Conditions
        {
            get => this._Conditions;
            set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter>? IFactionGetter.Conditions => _Conditions;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FactionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFactionGetter rhs)) return false;
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Faction obj)
        {
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FactionCommon)((IFactionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => FactionXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FactionXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Faction CreateFromXml(
            XElement node,
            Faction.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Faction CreateFromXml(
            XElement node,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Faction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Faction CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Faction();
            ((FactionSetterCommon)((IFactionGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Faction CreateFromXml(
            string path,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Faction CreateFromXml(
            string path,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Faction CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Faction CreateFromXml(
            Stream stream,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Faction CreateFromXml(
            Stream stream,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Faction CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Relations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>());
                this.Flags = initialValue;
                this.ExteriorJailMarker = initialValue;
                this.FollowerWaitMarker = initialValue;
                this.StolenGoodsContainer = initialValue;
                this.PlayerInventoryContainer = initialValue;
                this.SharedCrimeFactionList = initialValue;
                this.JailOutfit = initialValue;
                this.CrimeValues = new MaskItem<TItem, CrimeValues.Mask<TItem>?>(initialValue, new CrimeValues.Mask<TItem>(initialValue));
                this.Ranks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>());
                this.VendorBuySellList = initialValue;
                this.MerchantContainer = initialValue;
                this.VendorValues = new MaskItem<TItem, VendorValues.Mask<TItem>?>(initialValue, new VendorValues.Mask<TItem>(initialValue));
                this.VendorLocation = new MaskItem<TItem, Location.Mask<TItem>?>(initialValue, new Location.Mask<TItem>(initialValue));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Name,
                TItem Relations,
                TItem Flags,
                TItem ExteriorJailMarker,
                TItem FollowerWaitMarker,
                TItem StolenGoodsContainer,
                TItem PlayerInventoryContainer,
                TItem SharedCrimeFactionList,
                TItem JailOutfit,
                TItem CrimeValues,
                TItem Ranks,
                TItem VendorBuySellList,
                TItem MerchantContainer,
                TItem VendorValues,
                TItem VendorLocation,
                TItem Conditions)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.Relations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>?>(Relations, Enumerable.Empty<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>());
                this.Flags = Flags;
                this.ExteriorJailMarker = ExteriorJailMarker;
                this.FollowerWaitMarker = FollowerWaitMarker;
                this.StolenGoodsContainer = StolenGoodsContainer;
                this.PlayerInventoryContainer = PlayerInventoryContainer;
                this.SharedCrimeFactionList = SharedCrimeFactionList;
                this.JailOutfit = JailOutfit;
                this.CrimeValues = new MaskItem<TItem, CrimeValues.Mask<TItem>?>(CrimeValues, new CrimeValues.Mask<TItem>(CrimeValues));
                this.Ranks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>?>(Ranks, Enumerable.Empty<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>());
                this.VendorBuySellList = VendorBuySellList;
                this.MerchantContainer = MerchantContainer;
                this.VendorValues = new MaskItem<TItem, VendorValues.Mask<TItem>?>(VendorValues, new VendorValues.Mask<TItem>(VendorValues));
                this.VendorLocation = new MaskItem<TItem, Location.Mask<TItem>?>(VendorLocation, new Location.Mask<TItem>(VendorLocation));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>?>? Relations;
            public TItem Flags;
            public TItem ExteriorJailMarker;
            public TItem FollowerWaitMarker;
            public TItem StolenGoodsContainer;
            public TItem PlayerInventoryContainer;
            public TItem SharedCrimeFactionList;
            public TItem JailOutfit;
            public MaskItem<TItem, CrimeValues.Mask<TItem>?>? CrimeValues { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>?>? Ranks;
            public TItem VendorBuySellList;
            public TItem MerchantContainer;
            public MaskItem<TItem, VendorValues.Mask<TItem>?>? VendorValues { get; set; }
            public MaskItem<TItem, Location.Mask<TItem>?>? VendorLocation { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Relations, rhs.Relations)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.ExteriorJailMarker, rhs.ExteriorJailMarker)) return false;
                if (!object.Equals(this.FollowerWaitMarker, rhs.FollowerWaitMarker)) return false;
                if (!object.Equals(this.StolenGoodsContainer, rhs.StolenGoodsContainer)) return false;
                if (!object.Equals(this.PlayerInventoryContainer, rhs.PlayerInventoryContainer)) return false;
                if (!object.Equals(this.SharedCrimeFactionList, rhs.SharedCrimeFactionList)) return false;
                if (!object.Equals(this.JailOutfit, rhs.JailOutfit)) return false;
                if (!object.Equals(this.CrimeValues, rhs.CrimeValues)) return false;
                if (!object.Equals(this.Ranks, rhs.Ranks)) return false;
                if (!object.Equals(this.VendorBuySellList, rhs.VendorBuySellList)) return false;
                if (!object.Equals(this.MerchantContainer, rhs.MerchantContainer)) return false;
                if (!object.Equals(this.VendorValues, rhs.VendorValues)) return false;
                if (!object.Equals(this.VendorLocation, rhs.VendorLocation)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Relations);
                hash.Add(this.Flags);
                hash.Add(this.ExteriorJailMarker);
                hash.Add(this.FollowerWaitMarker);
                hash.Add(this.StolenGoodsContainer);
                hash.Add(this.PlayerInventoryContainer);
                hash.Add(this.SharedCrimeFactionList);
                hash.Add(this.JailOutfit);
                hash.Add(this.CrimeValues);
                hash.Add(this.Ranks);
                hash.Add(this.VendorBuySellList);
                hash.Add(this.MerchantContainer);
                hash.Add(this.VendorValues);
                hash.Add(this.VendorLocation);
                hash.Add(this.Conditions);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (this.Relations != null)
                {
                    if (!eval(this.Relations.Overall)) return false;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.ExteriorJailMarker)) return false;
                if (!eval(this.FollowerWaitMarker)) return false;
                if (!eval(this.StolenGoodsContainer)) return false;
                if (!eval(this.PlayerInventoryContainer)) return false;
                if (!eval(this.SharedCrimeFactionList)) return false;
                if (!eval(this.JailOutfit)) return false;
                if (CrimeValues != null)
                {
                    if (!eval(this.CrimeValues.Overall)) return false;
                    if (this.CrimeValues.Specific != null && !this.CrimeValues.Specific.All(eval)) return false;
                }
                if (this.Ranks != null)
                {
                    if (!eval(this.Ranks.Overall)) return false;
                    if (this.Ranks.Specific != null)
                    {
                        foreach (var item in this.Ranks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.VendorBuySellList)) return false;
                if (!eval(this.MerchantContainer)) return false;
                if (VendorValues != null)
                {
                    if (!eval(this.VendorValues.Overall)) return false;
                    if (this.VendorValues.Specific != null && !this.VendorValues.Specific.All(eval)) return false;
                }
                if (VendorLocation != null)
                {
                    if (!eval(this.VendorLocation.Overall)) return false;
                    if (this.VendorLocation.Specific != null && !this.VendorLocation.Specific.All(eval)) return false;
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (this.Relations != null)
                {
                    if (eval(this.Relations.Overall)) return true;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Flags)) return true;
                if (eval(this.ExteriorJailMarker)) return true;
                if (eval(this.FollowerWaitMarker)) return true;
                if (eval(this.StolenGoodsContainer)) return true;
                if (eval(this.PlayerInventoryContainer)) return true;
                if (eval(this.SharedCrimeFactionList)) return true;
                if (eval(this.JailOutfit)) return true;
                if (CrimeValues != null)
                {
                    if (eval(this.CrimeValues.Overall)) return true;
                    if (this.CrimeValues.Specific != null && this.CrimeValues.Specific.Any(eval)) return true;
                }
                if (this.Ranks != null)
                {
                    if (eval(this.Ranks.Overall)) return true;
                    if (this.Ranks.Specific != null)
                    {
                        foreach (var item in this.Ranks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.VendorBuySellList)) return true;
                if (eval(this.MerchantContainer)) return true;
                if (VendorValues != null)
                {
                    if (eval(this.VendorValues.Overall)) return true;
                    if (this.VendorValues.Specific != null && this.VendorValues.Specific.Any(eval)) return true;
                }
                if (VendorLocation != null)
                {
                    if (eval(this.VendorLocation.Overall)) return true;
                    if (this.VendorLocation.Specific != null && this.VendorLocation.Specific.Any(eval)) return true;
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Faction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                if (Relations != null)
                {
                    obj.Relations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Relation.Mask<R>?>>?>(eval(this.Relations.Overall), Enumerable.Empty<MaskItemIndexed<R, Relation.Mask<R>?>>());
                    if (Relations.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Relation.Mask<R>?>>();
                        obj.Relations.Specific = l;
                        foreach (var item in Relations.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Relation.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Relation.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Flags = eval(this.Flags);
                obj.ExteriorJailMarker = eval(this.ExteriorJailMarker);
                obj.FollowerWaitMarker = eval(this.FollowerWaitMarker);
                obj.StolenGoodsContainer = eval(this.StolenGoodsContainer);
                obj.PlayerInventoryContainer = eval(this.PlayerInventoryContainer);
                obj.SharedCrimeFactionList = eval(this.SharedCrimeFactionList);
                obj.JailOutfit = eval(this.JailOutfit);
                obj.CrimeValues = this.CrimeValues == null ? null : new MaskItem<R, CrimeValues.Mask<R>?>(eval(this.CrimeValues.Overall), this.CrimeValues.Specific?.Translate(eval));
                if (Ranks != null)
                {
                    obj.Ranks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Rank.Mask<R>?>>?>(eval(this.Ranks.Overall), Enumerable.Empty<MaskItemIndexed<R, Rank.Mask<R>?>>());
                    if (Ranks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Rank.Mask<R>?>>();
                        obj.Ranks.Specific = l;
                        foreach (var item in Ranks.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Rank.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Rank.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.VendorBuySellList = eval(this.VendorBuySellList);
                obj.MerchantContainer = eval(this.MerchantContainer);
                obj.VendorValues = this.VendorValues == null ? null : new MaskItem<R, VendorValues.Mask<R>?>(eval(this.VendorValues.Overall), this.VendorValues.Specific?.Translate(eval));
                obj.VendorLocation = this.VendorLocation == null ? null : new MaskItem<R, Location.Mask<R>?>(eval(this.VendorLocation.Overall), this.VendorLocation.Specific?.Translate(eval));
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Faction.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Faction.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Faction.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Relations?.Overall ?? true)
                        && Relations.TryGet(out var RelationsItem))
                    {
                        fg.AppendLine("Relations =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RelationsItem.Overall);
                            if (RelationsItem.Specific != null)
                            {
                                foreach (var subItem in RelationsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.ExteriorJailMarker ?? true)
                    {
                        fg.AppendItem(ExteriorJailMarker, "ExteriorJailMarker");
                    }
                    if (printMask?.FollowerWaitMarker ?? true)
                    {
                        fg.AppendItem(FollowerWaitMarker, "FollowerWaitMarker");
                    }
                    if (printMask?.StolenGoodsContainer ?? true)
                    {
                        fg.AppendItem(StolenGoodsContainer, "StolenGoodsContainer");
                    }
                    if (printMask?.PlayerInventoryContainer ?? true)
                    {
                        fg.AppendItem(PlayerInventoryContainer, "PlayerInventoryContainer");
                    }
                    if (printMask?.SharedCrimeFactionList ?? true)
                    {
                        fg.AppendItem(SharedCrimeFactionList, "SharedCrimeFactionList");
                    }
                    if (printMask?.JailOutfit ?? true)
                    {
                        fg.AppendItem(JailOutfit, "JailOutfit");
                    }
                    if (printMask?.CrimeValues?.Overall ?? true)
                    {
                        CrimeValues?.ToString(fg);
                    }
                    if ((printMask?.Ranks?.Overall ?? true)
                        && Ranks.TryGet(out var RanksItem))
                    {
                        fg.AppendLine("Ranks =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RanksItem.Overall);
                            if (RanksItem.Specific != null)
                            {
                                foreach (var subItem in RanksItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.VendorBuySellList ?? true)
                    {
                        fg.AppendItem(VendorBuySellList, "VendorBuySellList");
                    }
                    if (printMask?.MerchantContainer ?? true)
                    {
                        fg.AppendItem(MerchantContainer, "MerchantContainer");
                    }
                    if (printMask?.VendorValues?.Overall ?? true)
                    {
                        VendorValues?.ToString(fg);
                    }
                    if (printMask?.VendorLocation?.Overall ?? true)
                    {
                        VendorLocation?.ToString(fg);
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>? Relations;
            public Exception? Flags;
            public Exception? ExteriorJailMarker;
            public Exception? FollowerWaitMarker;
            public Exception? StolenGoodsContainer;
            public Exception? PlayerInventoryContainer;
            public Exception? SharedCrimeFactionList;
            public Exception? JailOutfit;
            public MaskItem<Exception?, CrimeValues.ErrorMask?>? CrimeValues;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>? Ranks;
            public Exception? VendorBuySellList;
            public Exception? MerchantContainer;
            public MaskItem<Exception?, VendorValues.ErrorMask?>? VendorValues;
            public MaskItem<Exception?, Location.ErrorMask?>? VendorLocation;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Name:
                        return Name;
                    case Faction_FieldIndex.Relations:
                        return Relations;
                    case Faction_FieldIndex.Flags:
                        return Flags;
                    case Faction_FieldIndex.ExteriorJailMarker:
                        return ExteriorJailMarker;
                    case Faction_FieldIndex.FollowerWaitMarker:
                        return FollowerWaitMarker;
                    case Faction_FieldIndex.StolenGoodsContainer:
                        return StolenGoodsContainer;
                    case Faction_FieldIndex.PlayerInventoryContainer:
                        return PlayerInventoryContainer;
                    case Faction_FieldIndex.SharedCrimeFactionList:
                        return SharedCrimeFactionList;
                    case Faction_FieldIndex.JailOutfit:
                        return JailOutfit;
                    case Faction_FieldIndex.CrimeValues:
                        return CrimeValues;
                    case Faction_FieldIndex.Ranks:
                        return Ranks;
                    case Faction_FieldIndex.VendorBuySellList:
                        return VendorBuySellList;
                    case Faction_FieldIndex.MerchantContainer:
                        return MerchantContainer;
                    case Faction_FieldIndex.VendorValues:
                        return VendorValues;
                    case Faction_FieldIndex.VendorLocation:
                        return VendorLocation;
                    case Faction_FieldIndex.Conditions:
                        return Conditions;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Faction_FieldIndex.Relations:
                        this.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>(ex, null);
                        break;
                    case Faction_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Faction_FieldIndex.ExteriorJailMarker:
                        this.ExteriorJailMarker = ex;
                        break;
                    case Faction_FieldIndex.FollowerWaitMarker:
                        this.FollowerWaitMarker = ex;
                        break;
                    case Faction_FieldIndex.StolenGoodsContainer:
                        this.StolenGoodsContainer = ex;
                        break;
                    case Faction_FieldIndex.PlayerInventoryContainer:
                        this.PlayerInventoryContainer = ex;
                        break;
                    case Faction_FieldIndex.SharedCrimeFactionList:
                        this.SharedCrimeFactionList = ex;
                        break;
                    case Faction_FieldIndex.JailOutfit:
                        this.JailOutfit = ex;
                        break;
                    case Faction_FieldIndex.CrimeValues:
                        this.CrimeValues = new MaskItem<Exception?, CrimeValues.ErrorMask?>(ex, null);
                        break;
                    case Faction_FieldIndex.Ranks:
                        this.Ranks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>(ex, null);
                        break;
                    case Faction_FieldIndex.VendorBuySellList:
                        this.VendorBuySellList = ex;
                        break;
                    case Faction_FieldIndex.MerchantContainer:
                        this.MerchantContainer = ex;
                        break;
                    case Faction_FieldIndex.VendorValues:
                        this.VendorValues = new MaskItem<Exception?, VendorValues.ErrorMask?>(ex, null);
                        break;
                    case Faction_FieldIndex.VendorLocation:
                        this.VendorLocation = new MaskItem<Exception?, Location.ErrorMask?>(ex, null);
                        break;
                    case Faction_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.Relations:
                        this.Relations = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>)obj;
                        break;
                    case Faction_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.ExteriorJailMarker:
                        this.ExteriorJailMarker = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.FollowerWaitMarker:
                        this.FollowerWaitMarker = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.StolenGoodsContainer:
                        this.StolenGoodsContainer = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.PlayerInventoryContainer:
                        this.PlayerInventoryContainer = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.SharedCrimeFactionList:
                        this.SharedCrimeFactionList = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.JailOutfit:
                        this.JailOutfit = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.CrimeValues:
                        this.CrimeValues = (MaskItem<Exception?, CrimeValues.ErrorMask?>?)obj;
                        break;
                    case Faction_FieldIndex.Ranks:
                        this.Ranks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>)obj;
                        break;
                    case Faction_FieldIndex.VendorBuySellList:
                        this.VendorBuySellList = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.MerchantContainer:
                        this.MerchantContainer = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.VendorValues:
                        this.VendorValues = (MaskItem<Exception?, VendorValues.ErrorMask?>?)obj;
                        break;
                    case Faction_FieldIndex.VendorLocation:
                        this.VendorLocation = (MaskItem<Exception?, Location.ErrorMask?>?)obj;
                        break;
                    case Faction_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Relations != null) return true;
                if (Flags != null) return true;
                if (ExteriorJailMarker != null) return true;
                if (FollowerWaitMarker != null) return true;
                if (StolenGoodsContainer != null) return true;
                if (PlayerInventoryContainer != null) return true;
                if (SharedCrimeFactionList != null) return true;
                if (JailOutfit != null) return true;
                if (CrimeValues != null) return true;
                if (Ranks != null) return true;
                if (VendorBuySellList != null) return true;
                if (MerchantContainer != null) return true;
                if (VendorValues != null) return true;
                if (VendorLocation != null) return true;
                if (Conditions != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                if (Relations.TryGet(out var RelationsItem))
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RelationsItem.Overall);
                        if (RelationsItem.Specific != null)
                        {
                            foreach (var subItem in RelationsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(ExteriorJailMarker, "ExteriorJailMarker");
                fg.AppendItem(FollowerWaitMarker, "FollowerWaitMarker");
                fg.AppendItem(StolenGoodsContainer, "StolenGoodsContainer");
                fg.AppendItem(PlayerInventoryContainer, "PlayerInventoryContainer");
                fg.AppendItem(SharedCrimeFactionList, "SharedCrimeFactionList");
                fg.AppendItem(JailOutfit, "JailOutfit");
                CrimeValues?.ToString(fg);
                if (Ranks.TryGet(out var RanksItem))
                {
                    fg.AppendLine("Ranks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RanksItem.Overall);
                        if (RanksItem.Specific != null)
                        {
                            foreach (var subItem in RanksItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(VendorBuySellList, "VendorBuySellList");
                fg.AppendItem(MerchantContainer, "MerchantContainer");
                VendorValues?.ToString(fg);
                VendorLocation?.ToString(fg);
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>(ExceptionExt.Combine(this.Relations?.Overall, rhs.Relations?.Overall), ExceptionExt.Combine(this.Relations?.Specific, rhs.Relations?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.ExteriorJailMarker = this.ExteriorJailMarker.Combine(rhs.ExteriorJailMarker);
                ret.FollowerWaitMarker = this.FollowerWaitMarker.Combine(rhs.FollowerWaitMarker);
                ret.StolenGoodsContainer = this.StolenGoodsContainer.Combine(rhs.StolenGoodsContainer);
                ret.PlayerInventoryContainer = this.PlayerInventoryContainer.Combine(rhs.PlayerInventoryContainer);
                ret.SharedCrimeFactionList = this.SharedCrimeFactionList.Combine(rhs.SharedCrimeFactionList);
                ret.JailOutfit = this.JailOutfit.Combine(rhs.JailOutfit);
                ret.CrimeValues = this.CrimeValues.Combine(rhs.CrimeValues, (l, r) => l.Combine(r));
                ret.Ranks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>(ExceptionExt.Combine(this.Ranks?.Overall, rhs.Ranks?.Overall), ExceptionExt.Combine(this.Ranks?.Specific, rhs.Ranks?.Specific));
                ret.VendorBuySellList = this.VendorBuySellList.Combine(rhs.VendorBuySellList);
                ret.MerchantContainer = this.MerchantContainer.Combine(rhs.MerchantContainer);
                ret.VendorValues = this.VendorValues.Combine(rhs.VendorValues, (l, r) => l.Combine(r));
                ret.VendorLocation = this.VendorLocation.Combine(rhs.VendorLocation, (l, r) => l.Combine(r));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public MaskItem<bool, Relation.TranslationMask?> Relations;
            public bool Flags;
            public bool ExteriorJailMarker;
            public bool FollowerWaitMarker;
            public bool StolenGoodsContainer;
            public bool PlayerInventoryContainer;
            public bool SharedCrimeFactionList;
            public bool JailOutfit;
            public MaskItem<bool, CrimeValues.TranslationMask?> CrimeValues;
            public MaskItem<bool, Rank.TranslationMask?> Ranks;
            public bool VendorBuySellList;
            public bool MerchantContainer;
            public MaskItem<bool, VendorValues.TranslationMask?> VendorValues;
            public MaskItem<bool, Location.TranslationMask?> VendorLocation;
            public MaskItem<bool, Condition.TranslationMask?> Conditions;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Relations = new MaskItem<bool, Relation.TranslationMask?>(defaultOn, null);
                this.Flags = defaultOn;
                this.ExteriorJailMarker = defaultOn;
                this.FollowerWaitMarker = defaultOn;
                this.StolenGoodsContainer = defaultOn;
                this.PlayerInventoryContainer = defaultOn;
                this.SharedCrimeFactionList = defaultOn;
                this.JailOutfit = defaultOn;
                this.CrimeValues = new MaskItem<bool, CrimeValues.TranslationMask?>(defaultOn, null);
                this.Ranks = new MaskItem<bool, Rank.TranslationMask?>(defaultOn, null);
                this.VendorBuySellList = defaultOn;
                this.MerchantContainer = defaultOn;
                this.VendorValues = new MaskItem<bool, VendorValues.TranslationMask?>(defaultOn, null);
                this.VendorLocation = new MaskItem<bool, Location.TranslationMask?>(defaultOn, null);
                this.Conditions = new MaskItem<bool, Condition.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Relations?.Overall ?? true, Relations?.Specific?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((ExteriorJailMarker, null));
                ret.Add((FollowerWaitMarker, null));
                ret.Add((StolenGoodsContainer, null));
                ret.Add((PlayerInventoryContainer, null));
                ret.Add((SharedCrimeFactionList, null));
                ret.Add((JailOutfit, null));
                ret.Add((CrimeValues?.Overall ?? true, CrimeValues?.Specific?.GetCrystal()));
                ret.Add((Ranks?.Overall ?? true, Ranks?.Specific?.GetCrystal()));
                ret.Add((VendorBuySellList, null));
                ret.Add((MerchantContainer, null));
                ret.Add((VendorValues?.Overall ?? true, VendorValues?.Specific?.GetCrystal()));
                ret.Add((VendorLocation?.Overall ?? true, VendorLocation?.Specific?.GetCrystal()));
                ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Faction_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => FactionCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => FactionCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FactionCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FactionCommon.Instance.RemapLinks(this, mapping);
        public Faction(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Faction(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Faction(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FactionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FactionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Faction CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Faction CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Faction();
            ((FactionSetterCommon)((IFactionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFactionGetter)rhs, include);

        void IClearable.Clear()
        {
            ((FactionSetterCommon)((IFactionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Faction GetNew()
        {
            return new Faction();
        }

    }
    #endregion

    #region Interface
    public partial interface IFaction :
        IFactionGetter,
        ISkyrimMajorRecord,
        INamed,
        IRelatable,
        IObjectId,
        ILoquiObjectSetter<IFactionInternal>
    {
        new String? Name { get; set; }
        new ExtendedList<Relation> Relations { get; }
        new Faction.FactionFlag Flags { get; set; }
        new FormLinkNullable<PlacedObject> ExteriorJailMarker { get; set; }
        new FormLinkNullable<PlacedObject> FollowerWaitMarker { get; set; }
        new FormLinkNullable<PlacedObject> StolenGoodsContainer { get; set; }
        new FormLinkNullable<PlacedObject> PlayerInventoryContainer { get; set; }
        new FormLinkNullable<FormList> SharedCrimeFactionList { get; set; }
        new FormLinkNullable<Outfit> JailOutfit { get; set; }
        new CrimeValues? CrimeValues { get; set; }
        new ExtendedList<Rank> Ranks { get; }
        new FormLinkNullable<FormList> VendorBuySellList { get; set; }
        new FormLinkNullable<PlacedObject> MerchantContainer { get; set; }
        new VendorValues? VendorValues { get; set; }
        new Location? VendorLocation { get; set; }
        new ExtendedList<Condition>? Conditions { get; set; }
    }

    public partial interface IFactionInternal :
        ISkyrimMajorRecordInternal,
        IFaction,
        IFactionGetter
    {
    }

    public partial interface IFactionGetter :
        ISkyrimMajorRecordGetter,
        INamedGetter,
        IRelatableGetter,
        IObjectIdGetter,
        ILoquiObject<IFactionGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Faction_Registration.Instance;
        String? Name { get; }
        IReadOnlyList<IRelationGetter> Relations { get; }
        Faction.FactionFlag Flags { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> ExteriorJailMarker { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> FollowerWaitMarker { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> StolenGoodsContainer { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> PlayerInventoryContainer { get; }
        IFormLinkNullableGetter<IFormListGetter> SharedCrimeFactionList { get; }
        IFormLinkNullableGetter<IOutfitGetter> JailOutfit { get; }
        ICrimeValuesGetter? CrimeValues { get; }
        IReadOnlyList<IRankGetter> Ranks { get; }
        IFormLinkNullableGetter<IFormListGetter> VendorBuySellList { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> MerchantContainer { get; }
        IVendorValuesGetter? VendorValues { get; }
        ILocationGetter? VendorLocation { get; }
        IReadOnlyList<IConditionGetter>? Conditions { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FactionMixIn
    {
        public static void Clear(this IFactionInternal item)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Faction.Mask<bool> GetEqualsMask(
            this IFactionGetter item,
            IFactionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFactionGetter item,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFactionGetter item,
            FileGeneration fg,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            ((FactionCommon)((IFactionGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFactionGetter item,
            Faction.Mask<bool?> checkMask)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Faction.Mask<bool> GetHasBeenSetMask(this IFactionGetter item)
        {
            var ret = new Faction.Mask<bool>(false);
            ((FactionCommon)((IFactionGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFactionGetter item,
            IFactionGetter rhs)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IFactionInternal lhs,
            IFactionGetter rhs,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FactionSetterTranslationCommon)((IFactionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Faction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFactionInternal lhs,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FactionSetterTranslationCommon)((IFactionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            Faction.TranslationMask? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFactionInternal item,
            XElement node,
            Faction.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFactionInternal item,
            XElement node,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Faction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            string path,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            string path,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            Stream stream,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            Stream stream,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFactionInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Faction.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFactionInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IFactionInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Faction_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Name = 6,
        Relations = 7,
        Flags = 8,
        ExteriorJailMarker = 9,
        FollowerWaitMarker = 10,
        StolenGoodsContainer = 11,
        PlayerInventoryContainer = 12,
        SharedCrimeFactionList = 13,
        JailOutfit = 14,
        CrimeValues = 15,
        Ranks = 16,
        VendorBuySellList = 17,
        MerchantContainer = 18,
        VendorValues = 19,
        VendorLocation = 20,
        Conditions = 21,
    }
    #endregion

    #region Registration
    public partial class Faction_Registration : ILoquiRegistration
    {
        public static readonly Faction_Registration Instance = new Faction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 27,
            version: 0);

        public const string GUID = "db110917-5be4-4ea2-b679-55c8ac5b6179";

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(Faction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Faction.ErrorMask);

        public static readonly Type ClassType = typeof(Faction);

        public static readonly Type GetterType = typeof(IFactionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFaction);

        public static readonly Type? InternalSetterType = typeof(IFactionInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Faction";

        public const string Name = "Faction";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Faction_FieldIndex.Name;
                case "RELATIONS":
                    return (ushort)Faction_FieldIndex.Relations;
                case "FLAGS":
                    return (ushort)Faction_FieldIndex.Flags;
                case "EXTERIORJAILMARKER":
                    return (ushort)Faction_FieldIndex.ExteriorJailMarker;
                case "FOLLOWERWAITMARKER":
                    return (ushort)Faction_FieldIndex.FollowerWaitMarker;
                case "STOLENGOODSCONTAINER":
                    return (ushort)Faction_FieldIndex.StolenGoodsContainer;
                case "PLAYERINVENTORYCONTAINER":
                    return (ushort)Faction_FieldIndex.PlayerInventoryContainer;
                case "SHAREDCRIMEFACTIONLIST":
                    return (ushort)Faction_FieldIndex.SharedCrimeFactionList;
                case "JAILOUTFIT":
                    return (ushort)Faction_FieldIndex.JailOutfit;
                case "CRIMEVALUES":
                    return (ushort)Faction_FieldIndex.CrimeValues;
                case "RANKS":
                    return (ushort)Faction_FieldIndex.Ranks;
                case "VENDORBUYSELLLIST":
                    return (ushort)Faction_FieldIndex.VendorBuySellList;
                case "MERCHANTCONTAINER":
                    return (ushort)Faction_FieldIndex.MerchantContainer;
                case "VENDORVALUES":
                    return (ushort)Faction_FieldIndex.VendorValues;
                case "VENDORLOCATION":
                    return (ushort)Faction_FieldIndex.VendorLocation;
                case "CONDITIONS":
                    return (ushort)Faction_FieldIndex.Conditions;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Ranks:
                case Faction_FieldIndex.Conditions:
                    return true;
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.ExteriorJailMarker:
                case Faction_FieldIndex.FollowerWaitMarker:
                case Faction_FieldIndex.StolenGoodsContainer:
                case Faction_FieldIndex.PlayerInventoryContainer:
                case Faction_FieldIndex.SharedCrimeFactionList:
                case Faction_FieldIndex.JailOutfit:
                case Faction_FieldIndex.CrimeValues:
                case Faction_FieldIndex.VendorBuySellList:
                case Faction_FieldIndex.MerchantContainer:
                case Faction_FieldIndex.VendorValues:
                case Faction_FieldIndex.VendorLocation:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.CrimeValues:
                case Faction_FieldIndex.Ranks:
                case Faction_FieldIndex.VendorValues:
                case Faction_FieldIndex.VendorLocation:
                case Faction_FieldIndex.Conditions:
                    return true;
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.ExteriorJailMarker:
                case Faction_FieldIndex.FollowerWaitMarker:
                case Faction_FieldIndex.StolenGoodsContainer:
                case Faction_FieldIndex.PlayerInventoryContainer:
                case Faction_FieldIndex.SharedCrimeFactionList:
                case Faction_FieldIndex.JailOutfit:
                case Faction_FieldIndex.VendorBuySellList:
                case Faction_FieldIndex.MerchantContainer:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.ExteriorJailMarker:
                case Faction_FieldIndex.FollowerWaitMarker:
                case Faction_FieldIndex.StolenGoodsContainer:
                case Faction_FieldIndex.PlayerInventoryContainer:
                case Faction_FieldIndex.SharedCrimeFactionList:
                case Faction_FieldIndex.JailOutfit:
                case Faction_FieldIndex.CrimeValues:
                case Faction_FieldIndex.Ranks:
                case Faction_FieldIndex.VendorBuySellList:
                case Faction_FieldIndex.MerchantContainer:
                case Faction_FieldIndex.VendorValues:
                case Faction_FieldIndex.VendorLocation:
                case Faction_FieldIndex.Conditions:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    return "Name";
                case Faction_FieldIndex.Relations:
                    return "Relations";
                case Faction_FieldIndex.Flags:
                    return "Flags";
                case Faction_FieldIndex.ExteriorJailMarker:
                    return "ExteriorJailMarker";
                case Faction_FieldIndex.FollowerWaitMarker:
                    return "FollowerWaitMarker";
                case Faction_FieldIndex.StolenGoodsContainer:
                    return "StolenGoodsContainer";
                case Faction_FieldIndex.PlayerInventoryContainer:
                    return "PlayerInventoryContainer";
                case Faction_FieldIndex.SharedCrimeFactionList:
                    return "SharedCrimeFactionList";
                case Faction_FieldIndex.JailOutfit:
                    return "JailOutfit";
                case Faction_FieldIndex.CrimeValues:
                    return "CrimeValues";
                case Faction_FieldIndex.Ranks:
                    return "Ranks";
                case Faction_FieldIndex.VendorBuySellList:
                    return "VendorBuySellList";
                case Faction_FieldIndex.MerchantContainer:
                    return "MerchantContainer";
                case Faction_FieldIndex.VendorValues:
                    return "VendorValues";
                case Faction_FieldIndex.VendorLocation:
                    return "VendorLocation";
                case Faction_FieldIndex.Conditions:
                    return "Conditions";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.ExteriorJailMarker:
                case Faction_FieldIndex.FollowerWaitMarker:
                case Faction_FieldIndex.StolenGoodsContainer:
                case Faction_FieldIndex.PlayerInventoryContainer:
                case Faction_FieldIndex.SharedCrimeFactionList:
                case Faction_FieldIndex.JailOutfit:
                case Faction_FieldIndex.CrimeValues:
                case Faction_FieldIndex.Ranks:
                case Faction_FieldIndex.VendorBuySellList:
                case Faction_FieldIndex.MerchantContainer:
                case Faction_FieldIndex.VendorValues:
                case Faction_FieldIndex.VendorLocation:
                case Faction_FieldIndex.Conditions:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.ExteriorJailMarker:
                case Faction_FieldIndex.FollowerWaitMarker:
                case Faction_FieldIndex.StolenGoodsContainer:
                case Faction_FieldIndex.PlayerInventoryContainer:
                case Faction_FieldIndex.SharedCrimeFactionList:
                case Faction_FieldIndex.JailOutfit:
                case Faction_FieldIndex.CrimeValues:
                case Faction_FieldIndex.Ranks:
                case Faction_FieldIndex.VendorBuySellList:
                case Faction_FieldIndex.MerchantContainer:
                case Faction_FieldIndex.VendorValues:
                case Faction_FieldIndex.VendorLocation:
                case Faction_FieldIndex.Conditions:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Name:
                    return typeof(String);
                case Faction_FieldIndex.Relations:
                    return typeof(ExtendedList<Relation>);
                case Faction_FieldIndex.Flags:
                    return typeof(Faction.FactionFlag);
                case Faction_FieldIndex.ExteriorJailMarker:
                    return typeof(FormLinkNullable<PlacedObject>);
                case Faction_FieldIndex.FollowerWaitMarker:
                    return typeof(FormLinkNullable<PlacedObject>);
                case Faction_FieldIndex.StolenGoodsContainer:
                    return typeof(FormLinkNullable<PlacedObject>);
                case Faction_FieldIndex.PlayerInventoryContainer:
                    return typeof(FormLinkNullable<PlacedObject>);
                case Faction_FieldIndex.SharedCrimeFactionList:
                    return typeof(FormLinkNullable<FormList>);
                case Faction_FieldIndex.JailOutfit:
                    return typeof(FormLinkNullable<Outfit>);
                case Faction_FieldIndex.CrimeValues:
                    return typeof(CrimeValues);
                case Faction_FieldIndex.Ranks:
                    return typeof(ExtendedList<Rank>);
                case Faction_FieldIndex.VendorBuySellList:
                    return typeof(FormLinkNullable<FormList>);
                case Faction_FieldIndex.MerchantContainer:
                    return typeof(FormLinkNullable<PlacedObject>);
                case Faction_FieldIndex.VendorValues:
                    return typeof(VendorValues);
                case Faction_FieldIndex.VendorLocation:
                    return typeof(Location);
                case Faction_FieldIndex.Conditions:
                    return typeof(ExtendedList<Condition>);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FactionXmlWriteTranslation);
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType XNAM_HEADER = new RecordType("XNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType JAIL_HEADER = new RecordType("JAIL");
        public static readonly RecordType WAIT_HEADER = new RecordType("WAIT");
        public static readonly RecordType STOL_HEADER = new RecordType("STOL");
        public static readonly RecordType PLCN_HEADER = new RecordType("PLCN");
        public static readonly RecordType CRGR_HEADER = new RecordType("CRGR");
        public static readonly RecordType JOUT_HEADER = new RecordType("JOUT");
        public static readonly RecordType CRVA_HEADER = new RecordType("CRVA");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static readonly RecordType VEND_HEADER = new RecordType("VEND");
        public static readonly RecordType VENC_HEADER = new RecordType("VENC");
        public static readonly RecordType VENV_HEADER = new RecordType("VENV");
        public static readonly RecordType PLVD_HEADER = new RecordType("PLVD");
        public static readonly RecordType CITC_HEADER = new RecordType("CITC");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType TriggeringRecordType = FACT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 16;
        public static readonly Type BinaryWriteTranslation = typeof(FactionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FactionSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly FactionSetterCommon Instance = new FactionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFactionInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Relations.Clear();
            item.Flags = default;
            item.ExteriorJailMarker = null;
            item.FollowerWaitMarker = null;
            item.StolenGoodsContainer = null;
            item.PlayerInventoryContainer = null;
            item.SharedCrimeFactionList = null;
            item.JailOutfit = null;
            item.CrimeValues = null;
            item.Ranks.Clear();
            item.VendorBuySellList = null;
            item.MerchantContainer = null;
            item.VendorValues = null;
            item.VendorLocation = null;
            item.Conditions = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IFactionInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFactionInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IFactionInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IFactionInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    FactionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Faction)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Faction)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Faction_Registration.FACT_HEADER;
        protected static void FillBinaryStructs(
            IFactionInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IFactionInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Name);
                }
                case 0x4D414E58: // XNAM
                {
                    item.Relations.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Relation>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Faction_Registration.XNAM_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out Relation listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<Relation>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Relations);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Faction.FactionFlag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Flags);
                }
                case 0x4C49414A: // JAIL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.ExteriorJailMarker = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.ExteriorJailMarker);
                }
                case 0x54494157: // WAIT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FollowerWaitMarker = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.FollowerWaitMarker);
                }
                case 0x4C4F5453: // STOL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.StolenGoodsContainer = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.StolenGoodsContainer);
                }
                case 0x4E434C50: // PLCN
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.PlayerInventoryContainer = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.PlayerInventoryContainer);
                }
                case 0x52475243: // CRGR
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.SharedCrimeFactionList = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.SharedCrimeFactionList);
                }
                case 0x54554F4A: // JOUT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.JailOutfit = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.JailOutfit);
                }
                case 0x41565243: // CRVA
                {
                    item.CrimeValues = Mutagen.Bethesda.Skyrim.CrimeValues.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.CrimeValues);
                }
                case 0x4D414E52: // RNAM
                case 0x4D414E4D: // MNAM
                case 0x4D414E46: // FNAM
                case 0x4D414E49: // INAM
                {
                    item.Ranks.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Rank>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Rank_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out Rank listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<Rank>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Ranks);
                }
                case 0x444E4556: // VEND
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.VendorBuySellList = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.VendorBuySellList);
                }
                case 0x434E4556: // VENC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MerchantContainer = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.MerchantContainer);
                }
                case 0x564E4556: // VENV
                {
                    item.VendorValues = Mutagen.Bethesda.Skyrim.VendorValues.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.VendorValues);
                }
                case 0x44564C50: // PLVD
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength; // Skip header
                    item.VendorLocation = Mutagen.Bethesda.Skyrim.Location.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.VendorLocation);
                }
                case 0x43544943: // CITC
                {
                    FactionBinaryCreateTranslation.FillBinaryConditionsCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Conditions);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            IFactionInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IFactionInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Faction)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Faction)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class FactionCommon : SkyrimMajorRecordCommon
    {
        public new static readonly FactionCommon Instance = new FactionCommon();

        public Faction.Mask<bool> GetEqualsMask(
            IFactionGetter item,
            IFactionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Faction.Mask<bool>(false);
            ((FactionCommon)((IFactionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFactionGetter item,
            IFactionGetter rhs,
            Faction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Relations = item.Relations.CollectionEqualsHelper(
                rhs.Relations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.ExteriorJailMarker = object.Equals(item.ExteriorJailMarker, rhs.ExteriorJailMarker);
            ret.FollowerWaitMarker = object.Equals(item.FollowerWaitMarker, rhs.FollowerWaitMarker);
            ret.StolenGoodsContainer = object.Equals(item.StolenGoodsContainer, rhs.StolenGoodsContainer);
            ret.PlayerInventoryContainer = object.Equals(item.PlayerInventoryContainer, rhs.PlayerInventoryContainer);
            ret.SharedCrimeFactionList = object.Equals(item.SharedCrimeFactionList, rhs.SharedCrimeFactionList);
            ret.JailOutfit = object.Equals(item.JailOutfit, rhs.JailOutfit);
            ret.CrimeValues = EqualsMaskHelper.EqualsHelper(
                item.CrimeValues,
                rhs.CrimeValues,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Ranks = item.Ranks.CollectionEqualsHelper(
                rhs.Ranks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.VendorBuySellList = object.Equals(item.VendorBuySellList, rhs.VendorBuySellList);
            ret.MerchantContainer = object.Equals(item.MerchantContainer, rhs.MerchantContainer);
            ret.VendorValues = EqualsMaskHelper.EqualsHelper(
                item.VendorValues,
                rhs.VendorValues,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.VendorLocation = EqualsMaskHelper.EqualsHelper(
                item.VendorLocation,
                rhs.VendorLocation,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IFactionGetter item,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFactionGetter item,
            FileGeneration fg,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Faction =>");
            }
            else
            {
                fg.AppendLine($"{name} (Faction) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFactionGetter item,
            FileGeneration fg,
            Faction.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.Relations?.Overall ?? true)
            {
                fg.AppendLine("Relations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Relations)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.ExteriorJailMarker ?? true)
                && item.ExteriorJailMarker.TryGet(out var ExteriorJailMarkerItem))
            {
                fg.AppendItem(ExteriorJailMarkerItem, "ExteriorJailMarker");
            }
            if ((printMask?.FollowerWaitMarker ?? true)
                && item.FollowerWaitMarker.TryGet(out var FollowerWaitMarkerItem))
            {
                fg.AppendItem(FollowerWaitMarkerItem, "FollowerWaitMarker");
            }
            if ((printMask?.StolenGoodsContainer ?? true)
                && item.StolenGoodsContainer.TryGet(out var StolenGoodsContainerItem))
            {
                fg.AppendItem(StolenGoodsContainerItem, "StolenGoodsContainer");
            }
            if ((printMask?.PlayerInventoryContainer ?? true)
                && item.PlayerInventoryContainer.TryGet(out var PlayerInventoryContainerItem))
            {
                fg.AppendItem(PlayerInventoryContainerItem, "PlayerInventoryContainer");
            }
            if ((printMask?.SharedCrimeFactionList ?? true)
                && item.SharedCrimeFactionList.TryGet(out var SharedCrimeFactionListItem))
            {
                fg.AppendItem(SharedCrimeFactionListItem, "SharedCrimeFactionList");
            }
            if ((printMask?.JailOutfit ?? true)
                && item.JailOutfit.TryGet(out var JailOutfitItem))
            {
                fg.AppendItem(JailOutfitItem, "JailOutfit");
            }
            if ((printMask?.CrimeValues?.Overall ?? true)
                && item.CrimeValues.TryGet(out var CrimeValuesItem))
            {
                CrimeValuesItem?.ToString(fg, "CrimeValues");
            }
            if (printMask?.Ranks?.Overall ?? true)
            {
                fg.AppendLine("Ranks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Ranks)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.VendorBuySellList ?? true)
                && item.VendorBuySellList.TryGet(out var VendorBuySellListItem))
            {
                fg.AppendItem(VendorBuySellListItem, "VendorBuySellList");
            }
            if ((printMask?.MerchantContainer ?? true)
                && item.MerchantContainer.TryGet(out var MerchantContainerItem))
            {
                fg.AppendItem(MerchantContainerItem, "MerchantContainer");
            }
            if ((printMask?.VendorValues?.Overall ?? true)
                && item.VendorValues.TryGet(out var VendorValuesItem))
            {
                VendorValuesItem?.ToString(fg, "VendorValues");
            }
            if ((printMask?.VendorLocation?.Overall ?? true)
                && item.VendorLocation.TryGet(out var VendorLocationItem))
            {
                VendorLocationItem?.ToString(fg, "VendorLocation");
            }
            if ((printMask?.Conditions?.Overall ?? true)
                && item.Conditions.TryGet(out var ConditionsItem))
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ConditionsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IFactionGetter item,
            Faction.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.ExteriorJailMarker.HasValue && checkMask.ExteriorJailMarker.Value != (item.ExteriorJailMarker.FormKey != null)) return false;
            if (checkMask.FollowerWaitMarker.HasValue && checkMask.FollowerWaitMarker.Value != (item.FollowerWaitMarker.FormKey != null)) return false;
            if (checkMask.StolenGoodsContainer.HasValue && checkMask.StolenGoodsContainer.Value != (item.StolenGoodsContainer.FormKey != null)) return false;
            if (checkMask.PlayerInventoryContainer.HasValue && checkMask.PlayerInventoryContainer.Value != (item.PlayerInventoryContainer.FormKey != null)) return false;
            if (checkMask.SharedCrimeFactionList.HasValue && checkMask.SharedCrimeFactionList.Value != (item.SharedCrimeFactionList.FormKey != null)) return false;
            if (checkMask.JailOutfit.HasValue && checkMask.JailOutfit.Value != (item.JailOutfit.FormKey != null)) return false;
            if (checkMask.CrimeValues?.Overall.HasValue ?? false && checkMask.CrimeValues.Overall.Value != (item.CrimeValues != null)) return false;
            if (checkMask.CrimeValues?.Specific != null && (item.CrimeValues == null || !item.CrimeValues.HasBeenSet(checkMask.CrimeValues.Specific))) return false;
            if (checkMask.VendorBuySellList.HasValue && checkMask.VendorBuySellList.Value != (item.VendorBuySellList.FormKey != null)) return false;
            if (checkMask.MerchantContainer.HasValue && checkMask.MerchantContainer.Value != (item.MerchantContainer.FormKey != null)) return false;
            if (checkMask.VendorValues?.Overall.HasValue ?? false && checkMask.VendorValues.Overall.Value != (item.VendorValues != null)) return false;
            if (checkMask.VendorValues?.Specific != null && (item.VendorValues == null || !item.VendorValues.HasBeenSet(checkMask.VendorValues.Specific))) return false;
            if (checkMask.VendorLocation?.Overall.HasValue ?? false && checkMask.VendorLocation.Overall.Value != (item.VendorLocation != null)) return false;
            if (checkMask.VendorLocation?.Specific != null && (item.VendorLocation == null || !item.VendorLocation.HasBeenSet(checkMask.VendorLocation.Specific))) return false;
            if (checkMask.Conditions?.Overall.HasValue ?? false && checkMask.Conditions!.Overall.Value != (item.Conditions != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IFactionGetter item,
            Faction.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            var RelationsItem = item.Relations;
            mask.Relations = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Relation.Mask<bool>?>>?>(true, RelationsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Relation.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Flags = true;
            mask.ExteriorJailMarker = (item.ExteriorJailMarker.FormKey != null);
            mask.FollowerWaitMarker = (item.FollowerWaitMarker.FormKey != null);
            mask.StolenGoodsContainer = (item.StolenGoodsContainer.FormKey != null);
            mask.PlayerInventoryContainer = (item.PlayerInventoryContainer.FormKey != null);
            mask.SharedCrimeFactionList = (item.SharedCrimeFactionList.FormKey != null);
            mask.JailOutfit = (item.JailOutfit.FormKey != null);
            var itemCrimeValues = item.CrimeValues;
            mask.CrimeValues = new MaskItem<bool, CrimeValues.Mask<bool>?>(itemCrimeValues != null, itemCrimeValues?.GetHasBeenSetMask());
            var RanksItem = item.Ranks;
            mask.Ranks = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Rank.Mask<bool>?>>?>(true, RanksItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Rank.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.VendorBuySellList = (item.VendorBuySellList.FormKey != null);
            mask.MerchantContainer = (item.MerchantContainer.FormKey != null);
            var itemVendorValues = item.VendorValues;
            mask.VendorValues = new MaskItem<bool, VendorValues.Mask<bool>?>(itemVendorValues != null, itemVendorValues?.GetHasBeenSetMask());
            var itemVendorLocation = item.VendorLocation;
            mask.VendorLocation = new MaskItem<bool, Location.Mask<bool>?>(itemVendorLocation != null, itemVendorLocation?.GetHasBeenSetMask());
            if (item.Conditions.TryGet(out var ConditionsItem))
            {
                mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition.Mask<bool>?>>?>(true, ConditionsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Faction_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Faction_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Faction_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Faction_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Faction_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Faction_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Faction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Faction_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Faction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFactionGetter? lhs,
            IFactionGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.Relations.SequenceEqual(rhs.Relations)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.ExteriorJailMarker.Equals(rhs.ExteriorJailMarker)) return false;
            if (!lhs.FollowerWaitMarker.Equals(rhs.FollowerWaitMarker)) return false;
            if (!lhs.StolenGoodsContainer.Equals(rhs.StolenGoodsContainer)) return false;
            if (!lhs.PlayerInventoryContainer.Equals(rhs.PlayerInventoryContainer)) return false;
            if (!lhs.SharedCrimeFactionList.Equals(rhs.SharedCrimeFactionList)) return false;
            if (!lhs.JailOutfit.Equals(rhs.JailOutfit)) return false;
            if (!object.Equals(lhs.CrimeValues, rhs.CrimeValues)) return false;
            if (!lhs.Ranks.SequenceEqual(rhs.Ranks)) return false;
            if (!lhs.VendorBuySellList.Equals(rhs.VendorBuySellList)) return false;
            if (!lhs.MerchantContainer.Equals(rhs.MerchantContainer)) return false;
            if (!object.Equals(lhs.VendorValues, rhs.VendorValues)) return false;
            if (!object.Equals(lhs.VendorLocation, rhs.VendorLocation)) return false;
            if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IFactionGetter?)lhs,
                rhs: rhs as IFactionGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IFactionGetter?)lhs,
                rhs: rhs as IFactionGetter);
        }
        
        public virtual int GetHashCode(IFactionGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Relations);
            hash.Add(item.Flags);
            if (item.ExteriorJailMarker.TryGet(out var ExteriorJailMarkeritem))
            {
                hash.Add(ExteriorJailMarkeritem);
            }
            if (item.FollowerWaitMarker.TryGet(out var FollowerWaitMarkeritem))
            {
                hash.Add(FollowerWaitMarkeritem);
            }
            if (item.StolenGoodsContainer.TryGet(out var StolenGoodsContaineritem))
            {
                hash.Add(StolenGoodsContaineritem);
            }
            if (item.PlayerInventoryContainer.TryGet(out var PlayerInventoryContaineritem))
            {
                hash.Add(PlayerInventoryContaineritem);
            }
            if (item.SharedCrimeFactionList.TryGet(out var SharedCrimeFactionListitem))
            {
                hash.Add(SharedCrimeFactionListitem);
            }
            if (item.JailOutfit.TryGet(out var JailOutfititem))
            {
                hash.Add(JailOutfititem);
            }
            if (item.CrimeValues.TryGet(out var CrimeValuesitem))
            {
                hash.Add(CrimeValuesitem);
            }
            hash.Add(item.Ranks);
            if (item.VendorBuySellList.TryGet(out var VendorBuySellListitem))
            {
                hash.Add(VendorBuySellListitem);
            }
            if (item.MerchantContainer.TryGet(out var MerchantContaineritem))
            {
                hash.Add(MerchantContaineritem);
            }
            if (item.VendorValues.TryGet(out var VendorValuesitem))
            {
                hash.Add(VendorValuesitem);
            }
            if (item.VendorLocation.TryGet(out var VendorLocationitem))
            {
                hash.Add(VendorLocationitem);
            }
            hash.Add(item.Conditions);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IFactionGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFactionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Faction.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IFactionGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Relations.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            if (obj.ExteriorJailMarker.FormKey.TryGet(out var ExteriorJailMarkerKey))
            {
                yield return ExteriorJailMarkerKey;
            }
            if (obj.FollowerWaitMarker.FormKey.TryGet(out var FollowerWaitMarkerKey))
            {
                yield return FollowerWaitMarkerKey;
            }
            if (obj.StolenGoodsContainer.FormKey.TryGet(out var StolenGoodsContainerKey))
            {
                yield return StolenGoodsContainerKey;
            }
            if (obj.PlayerInventoryContainer.FormKey.TryGet(out var PlayerInventoryContainerKey))
            {
                yield return PlayerInventoryContainerKey;
            }
            if (obj.SharedCrimeFactionList.FormKey.TryGet(out var SharedCrimeFactionListKey))
            {
                yield return SharedCrimeFactionListKey;
            }
            if (obj.JailOutfit.FormKey.TryGet(out var JailOutfitKey))
            {
                yield return JailOutfitKey;
            }
            if (obj.VendorBuySellList.FormKey.TryGet(out var VendorBuySellListKey))
            {
                yield return VendorBuySellListKey;
            }
            if (obj.MerchantContainer.FormKey.TryGet(out var MerchantContainerKey))
            {
                yield return MerchantContainerKey;
            }
            if (obj.VendorLocation is ILinkedFormKeyContainer VendorLocationlinkCont)
            {
                foreach (var item in VendorLocationlinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Conditions.TryGet(out var ConditionsItem))
            {
                foreach (var item in ConditionsItem.WhereCastable<IConditionGetter, ILinkedFormKeyContainer> ()
                    .SelectMany((f) => f.LinkFormKeys))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(IFactionGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Faction obj, Faction rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Faction(getNextFormKey());
            ret.DeepCopyIn((Faction)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Faction)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class FactionSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly FactionSetterTranslationCommon Instance = new FactionSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IFactionInternal item,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IFaction item,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Relations) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Relations);
                try
                {
                    item.Relations.SetTo(
                        rhs.Relations
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.ExteriorJailMarker) ?? true))
            {
                item.ExteriorJailMarker = rhs.ExteriorJailMarker.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.FollowerWaitMarker) ?? true))
            {
                item.FollowerWaitMarker = rhs.FollowerWaitMarker.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.StolenGoodsContainer) ?? true))
            {
                item.StolenGoodsContainer = rhs.StolenGoodsContainer.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.PlayerInventoryContainer) ?? true))
            {
                item.PlayerInventoryContainer = rhs.PlayerInventoryContainer.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.SharedCrimeFactionList) ?? true))
            {
                item.SharedCrimeFactionList = rhs.SharedCrimeFactionList.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.JailOutfit) ?? true))
            {
                item.JailOutfit = rhs.JailOutfit.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.CrimeValues) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.CrimeValues);
                try
                {
                    if(rhs.CrimeValues.TryGet(out var rhsCrimeValues))
                    {
                        item.CrimeValues = rhsCrimeValues.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Faction_FieldIndex.CrimeValues));
                    }
                    else
                    {
                        item.CrimeValues = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Ranks) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Ranks);
                try
                {
                    item.Ranks.SetTo(
                        rhs.Ranks
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorBuySellList) ?? true))
            {
                item.VendorBuySellList = rhs.VendorBuySellList.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.MerchantContainer) ?? true))
            {
                item.MerchantContainer = rhs.MerchantContainer.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorValues) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.VendorValues);
                try
                {
                    if(rhs.VendorValues.TryGet(out var rhsVendorValues))
                    {
                        item.VendorValues = rhsVendorValues.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Faction_FieldIndex.VendorValues));
                    }
                    else
                    {
                        item.VendorValues = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorLocation) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.VendorLocation);
                try
                {
                    if(rhs.VendorLocation.TryGet(out var rhsVendorLocation))
                    {
                        item.VendorLocation = rhsVendorLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Faction_FieldIndex.VendorLocation));
                    }
                    else
                    {
                        item.VendorLocation = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Conditions);
                try
                {
                    if ((rhs.Conditions != null))
                    {
                        item.Conditions = 
                            rhs.Conditions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Condition>();
                    }
                    else
                    {
                        item.Conditions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFactionInternal)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFaction)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFactionInternal)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFaction)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Faction DeepCopy(
            IFactionGetter item,
            Faction.TranslationMask? copyMask = null)
        {
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Faction DeepCopy(
            IFactionGetter item,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Faction DeepCopy(
            IFactionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Faction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Faction_Registration.Instance;
        public new static Faction_Registration Registration => Faction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FactionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FactionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FactionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FactionXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static FactionXmlWriteTranslation Instance = new FactionXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFactionGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Faction_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Relations) ?? true))
            {
                ListXmlTranslation<IRelationGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Relations),
                    item: item.Relations,
                    fieldIndex: (int)Faction_FieldIndex.Relations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.Relations),
                    transl: (XElement subNode, IRelationGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((RelationXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Faction.FactionFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Faction_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((item.ExteriorJailMarker.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.ExteriorJailMarker) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ExteriorJailMarker),
                    item: item.ExteriorJailMarker.FormKey.Value,
                    fieldIndex: (int)Faction_FieldIndex.ExteriorJailMarker,
                    errorMask: errorMask);
            }
            if ((item.FollowerWaitMarker.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.FollowerWaitMarker) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FollowerWaitMarker),
                    item: item.FollowerWaitMarker.FormKey.Value,
                    fieldIndex: (int)Faction_FieldIndex.FollowerWaitMarker,
                    errorMask: errorMask);
            }
            if ((item.StolenGoodsContainer.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.StolenGoodsContainer) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StolenGoodsContainer),
                    item: item.StolenGoodsContainer.FormKey.Value,
                    fieldIndex: (int)Faction_FieldIndex.StolenGoodsContainer,
                    errorMask: errorMask);
            }
            if ((item.PlayerInventoryContainer.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.PlayerInventoryContainer) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PlayerInventoryContainer),
                    item: item.PlayerInventoryContainer.FormKey.Value,
                    fieldIndex: (int)Faction_FieldIndex.PlayerInventoryContainer,
                    errorMask: errorMask);
            }
            if ((item.SharedCrimeFactionList.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.SharedCrimeFactionList) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SharedCrimeFactionList),
                    item: item.SharedCrimeFactionList.FormKey.Value,
                    fieldIndex: (int)Faction_FieldIndex.SharedCrimeFactionList,
                    errorMask: errorMask);
            }
            if ((item.JailOutfit.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.JailOutfit) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.JailOutfit),
                    item: item.JailOutfit.FormKey.Value,
                    fieldIndex: (int)Faction_FieldIndex.JailOutfit,
                    errorMask: errorMask);
            }
            if ((item.CrimeValues != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.CrimeValues) ?? true))
            {
                if (item.CrimeValues.TryGet(out var CrimeValuesItem))
                {
                    ((CrimeValuesXmlWriteTranslation)((IXmlItem)CrimeValuesItem).XmlWriteTranslator).Write(
                        item: CrimeValuesItem,
                        node: node,
                        name: nameof(item.CrimeValues),
                        fieldIndex: (int)Faction_FieldIndex.CrimeValues,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.CrimeValues));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Ranks) ?? true))
            {
                ListXmlTranslation<IRankGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Ranks),
                    item: item.Ranks,
                    fieldIndex: (int)Faction_FieldIndex.Ranks,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.Ranks),
                    transl: (XElement subNode, IRankGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((RankXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((item.VendorBuySellList.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorBuySellList) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VendorBuySellList),
                    item: item.VendorBuySellList.FormKey.Value,
                    fieldIndex: (int)Faction_FieldIndex.VendorBuySellList,
                    errorMask: errorMask);
            }
            if ((item.MerchantContainer.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.MerchantContainer) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MerchantContainer),
                    item: item.MerchantContainer.FormKey.Value,
                    fieldIndex: (int)Faction_FieldIndex.MerchantContainer,
                    errorMask: errorMask);
            }
            if ((item.VendorValues != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorValues) ?? true))
            {
                if (item.VendorValues.TryGet(out var VendorValuesItem))
                {
                    ((VendorValuesXmlWriteTranslation)((IXmlItem)VendorValuesItem).XmlWriteTranslator).Write(
                        item: VendorValuesItem,
                        node: node,
                        name: nameof(item.VendorValues),
                        fieldIndex: (int)Faction_FieldIndex.VendorValues,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.VendorValues));
                }
            }
            if ((item.VendorLocation != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorLocation) ?? true))
            {
                if (item.VendorLocation.TryGet(out var VendorLocationItem))
                {
                    ((LocationXmlWriteTranslation)((IXmlItem)VendorLocationItem).XmlWriteTranslator).Write(
                        item: VendorLocationItem,
                        node: node,
                        name: nameof(item.VendorLocation),
                        fieldIndex: (int)Faction_FieldIndex.VendorLocation,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.VendorLocation));
                }
            }
            if ((item.Conditions != null)
                && (translationMask?.GetShouldTranslate((int)Faction_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)Faction_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((ConditionXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
        }

        public void Write(
            XElement node,
            IFactionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Faction");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Faction");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFactionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFactionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFactionGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class FactionXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static FactionXmlCreateTranslation Instance = new FactionXmlCreateTranslation();

        public static void FillPublicXml(
            IFactionInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FactionXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFactionInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Faction_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Relations":
                    errorMask?.PushIndex((int)Faction_FieldIndex.Relations);
                    try
                    {
                        if (ListXmlTranslation<Relation>.Instance.Parse(
                            node: node,
                            enumer: out var RelationsItem,
                            transl: LoquiXmlTranslation<Relation>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Relations.SetTo(RelationsItem);
                        }
                        else
                        {
                            item.Relations.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Faction_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Faction.FactionFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ExteriorJailMarker":
                    errorMask?.PushIndex((int)Faction_FieldIndex.ExteriorJailMarker);
                    try
                    {
                        item.ExteriorJailMarker = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FollowerWaitMarker":
                    errorMask?.PushIndex((int)Faction_FieldIndex.FollowerWaitMarker);
                    try
                    {
                        item.FollowerWaitMarker = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StolenGoodsContainer":
                    errorMask?.PushIndex((int)Faction_FieldIndex.StolenGoodsContainer);
                    try
                    {
                        item.StolenGoodsContainer = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PlayerInventoryContainer":
                    errorMask?.PushIndex((int)Faction_FieldIndex.PlayerInventoryContainer);
                    try
                    {
                        item.PlayerInventoryContainer = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SharedCrimeFactionList":
                    errorMask?.PushIndex((int)Faction_FieldIndex.SharedCrimeFactionList);
                    try
                    {
                        item.SharedCrimeFactionList = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "JailOutfit":
                    errorMask?.PushIndex((int)Faction_FieldIndex.JailOutfit);
                    try
                    {
                        item.JailOutfit = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CrimeValues":
                    errorMask?.PushIndex((int)Faction_FieldIndex.CrimeValues);
                    try
                    {
                        item.CrimeValues = LoquiXmlTranslation<CrimeValues>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.CrimeValues));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ranks":
                    errorMask?.PushIndex((int)Faction_FieldIndex.Ranks);
                    try
                    {
                        if (ListXmlTranslation<Rank>.Instance.Parse(
                            node: node,
                            enumer: out var RanksItem,
                            transl: LoquiXmlTranslation<Rank>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Ranks.SetTo(RanksItem);
                        }
                        else
                        {
                            item.Ranks.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VendorBuySellList":
                    errorMask?.PushIndex((int)Faction_FieldIndex.VendorBuySellList);
                    try
                    {
                        item.VendorBuySellList = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MerchantContainer":
                    errorMask?.PushIndex((int)Faction_FieldIndex.MerchantContainer);
                    try
                    {
                        item.MerchantContainer = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VendorValues":
                    errorMask?.PushIndex((int)Faction_FieldIndex.VendorValues);
                    try
                    {
                        item.VendorValues = LoquiXmlTranslation<VendorValues>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.VendorValues));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VendorLocation":
                    errorMask?.PushIndex((int)Faction_FieldIndex.VendorLocation);
                    try
                    {
                        item.VendorLocation = LoquiXmlTranslation<Location>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Faction_FieldIndex.VendorLocation));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    errorMask?.PushIndex((int)Faction_FieldIndex.Conditions);
                    try
                    {
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions = ConditionsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Conditions = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class FactionXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFactionGetter item,
            XElement node,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((FactionXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Faction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFactionGetter item,
            string path,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFactionGetter item,
            Stream stream,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FactionBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static FactionBinaryWriteTranslation Instance = new FactionBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            IFactionGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            IFactionGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IFactionGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRelationGetter>.Instance.Write(
                writer: writer,
                items: item.Relations,
                transl: (MutagenWriter subWriter, IRelationGetter subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((RelationBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            recordTypeConverter: conv);
                    }
                });
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Faction.FactionFlag>.Instance.Write(
                writer,
                item.Flags,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.DATA_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ExteriorJailMarker,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.JAIL_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FollowerWaitMarker,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.WAIT_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.StolenGoodsContainer,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.STOL_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PlayerInventoryContainer,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.PLCN_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SharedCrimeFactionList,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.CRGR_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.JailOutfit,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.JOUT_HEADER));
            if (item.CrimeValues.TryGet(out var CrimeValuesItem))
            {
                ((CrimeValuesBinaryWriteTranslation)((IBinaryItem)CrimeValuesItem).BinaryWriteTranslator).Write(
                    item: CrimeValuesItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRankGetter>.Instance.Write(
                writer: writer,
                items: item.Ranks,
                transl: (MutagenWriter subWriter, IRankGetter subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((RankBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            recordTypeConverter: conv);
                    }
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VendorBuySellList,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.VEND_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MerchantContainer,
                header: recordTypeConverter.ConvertToCustom(Faction_Registration.VENC_HEADER));
            if (item.VendorValues.TryGet(out var VendorValuesItem))
            {
                ((VendorValuesBinaryWriteTranslation)((IBinaryItem)VendorValuesItem).BinaryWriteTranslator).Write(
                    item: VendorValuesItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.VendorLocation.TryGet(out var VendorLocationItem))
            {
                using (HeaderExport.ExportHeader(writer, Faction_Registration.PLVD_HEADER, Mutagen.Bethesda.Binary.ObjectType.Subrecord))
                {
                    ((LocationBinaryWriteTranslation)((IBinaryItem)VendorLocationItem).BinaryWriteTranslator).Write(
                        item: VendorLocationItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            FactionBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IFactionGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(Faction_Registration.FACT_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFactionGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFactionGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFactionGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class FactionBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static FactionBinaryCreateTranslation Instance = new FactionBinaryCreateTranslation();

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            IFactionInternal item);

        public static void FillBinaryConditionsCustomPublic(
            MutagenFrame frame,
            IFactionInternal item)
        {
            FillBinaryConditionsCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class FactionBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FactionBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IFactionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Faction_Registration.Instance;
        public new static Faction_Registration Registration => Faction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FactionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FactionSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFactionGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => FactionCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => FactionCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FactionCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FactionCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => FactionXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FactionXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FactionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FactionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        public IReadOnlyList<IRelationGetter> Relations { get; private set; } = ListExt.Empty<RelationBinaryOverlay>();
        #region Flags
        private int? _FlagsLocation;
        public Faction.FactionFlag Flags => _FlagsLocation.HasValue ? (Faction.FactionFlag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation!.Value, _package.Meta)) : default(Faction.FactionFlag);
        #endregion
        #region ExteriorJailMarker
        private int? _ExteriorJailMarkerLocation;
        public bool ExteriorJailMarker_IsSet => _ExteriorJailMarkerLocation.HasValue;
        public IFormLinkNullableGetter<IPlacedObjectGetter> ExteriorJailMarker => _ExteriorJailMarkerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ExteriorJailMarkerLocation.Value, _package.Meta)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region FollowerWaitMarker
        private int? _FollowerWaitMarkerLocation;
        public bool FollowerWaitMarker_IsSet => _FollowerWaitMarkerLocation.HasValue;
        public IFormLinkNullableGetter<IPlacedObjectGetter> FollowerWaitMarker => _FollowerWaitMarkerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _FollowerWaitMarkerLocation.Value, _package.Meta)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region StolenGoodsContainer
        private int? _StolenGoodsContainerLocation;
        public bool StolenGoodsContainer_IsSet => _StolenGoodsContainerLocation.HasValue;
        public IFormLinkNullableGetter<IPlacedObjectGetter> StolenGoodsContainer => _StolenGoodsContainerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _StolenGoodsContainerLocation.Value, _package.Meta)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region PlayerInventoryContainer
        private int? _PlayerInventoryContainerLocation;
        public bool PlayerInventoryContainer_IsSet => _PlayerInventoryContainerLocation.HasValue;
        public IFormLinkNullableGetter<IPlacedObjectGetter> PlayerInventoryContainer => _PlayerInventoryContainerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PlayerInventoryContainerLocation.Value, _package.Meta)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region SharedCrimeFactionList
        private int? _SharedCrimeFactionListLocation;
        public bool SharedCrimeFactionList_IsSet => _SharedCrimeFactionListLocation.HasValue;
        public IFormLinkNullableGetter<IFormListGetter> SharedCrimeFactionList => _SharedCrimeFactionListLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _SharedCrimeFactionListLocation.Value, _package.Meta)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        #region JailOutfit
        private int? _JailOutfitLocation;
        public bool JailOutfit_IsSet => _JailOutfitLocation.HasValue;
        public IFormLinkNullableGetter<IOutfitGetter> JailOutfit => _JailOutfitLocation.HasValue ? new FormLinkNullable<IOutfitGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _JailOutfitLocation.Value, _package.Meta)))) : FormLinkNullable<IOutfitGetter>.Null;
        #endregion
        #region CrimeValues
        private RangeInt32? _CrimeValuesLocation;
        public ICrimeValuesGetter? CrimeValues => _CrimeValuesLocation.HasValue ? CrimeValuesBinaryOverlay.CrimeValuesFactory(new BinaryMemoryReadStream(_data.Slice(_CrimeValuesLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool CrimeValues_IsSet => _CrimeValuesLocation.HasValue;
        #endregion
        public IReadOnlyList<IRankGetter> Ranks { get; private set; } = ListExt.Empty<RankBinaryOverlay>();
        #region VendorBuySellList
        private int? _VendorBuySellListLocation;
        public bool VendorBuySellList_IsSet => _VendorBuySellListLocation.HasValue;
        public IFormLinkNullableGetter<IFormListGetter> VendorBuySellList => _VendorBuySellListLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _VendorBuySellListLocation.Value, _package.Meta)))) : FormLinkNullable<IFormListGetter>.Null;
        #endregion
        #region MerchantContainer
        private int? _MerchantContainerLocation;
        public bool MerchantContainer_IsSet => _MerchantContainerLocation.HasValue;
        public IFormLinkNullableGetter<IPlacedObjectGetter> MerchantContainer => _MerchantContainerLocation.HasValue ? new FormLinkNullable<IPlacedObjectGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _MerchantContainerLocation.Value, _package.Meta)))) : FormLinkNullable<IPlacedObjectGetter>.Null;
        #endregion
        #region VendorValues
        private RangeInt32? _VendorValuesLocation;
        public IVendorValuesGetter? VendorValues => _VendorValuesLocation.HasValue ? VendorValuesBinaryOverlay.VendorValuesFactory(new BinaryMemoryReadStream(_data.Slice(_VendorValuesLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool VendorValues_IsSet => _VendorValuesLocation.HasValue;
        #endregion
        public ILocationGetter? VendorLocation { get; private set; }
        #region Conditions
        partial void ConditionsCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected FactionBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static FactionBinaryOverlay FactionFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new FactionBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static FactionBinaryOverlay FactionFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return FactionFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Name);
                }
                case 0x4D414E58: // XNAM
                {
                    this.Relations = BinaryOverlaySetList<RelationBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => RelationBinaryOverlay.RelationFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Relations);
                }
                case 0x41544144: // DATA
                {
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Flags);
                }
                case 0x4C49414A: // JAIL
                {
                    _ExteriorJailMarkerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.ExteriorJailMarker);
                }
                case 0x54494157: // WAIT
                {
                    _FollowerWaitMarkerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.FollowerWaitMarker);
                }
                case 0x4C4F5453: // STOL
                {
                    _StolenGoodsContainerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.StolenGoodsContainer);
                }
                case 0x4E434C50: // PLCN
                {
                    _PlayerInventoryContainerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.PlayerInventoryContainer);
                }
                case 0x52475243: // CRGR
                {
                    _SharedCrimeFactionListLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.SharedCrimeFactionList);
                }
                case 0x54554F4A: // JOUT
                {
                    _JailOutfitLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.JailOutfit);
                }
                case 0x41565243: // CRVA
                {
                    _CrimeValuesLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.CrimeValues);
                }
                case 0x4D414E52: // RNAM
                case 0x4D414E4D: // MNAM
                case 0x4D414E46: // FNAM
                case 0x4D414E49: // INAM
                {
                    this.Ranks = this.ParseRepeatedTypelessSubrecord<RankBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: Rank_Registration.TriggeringRecordTypes,
                        factory:  RankBinaryOverlay.RankFactory);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Ranks);
                }
                case 0x444E4556: // VEND
                {
                    _VendorBuySellListLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.VendorBuySellList);
                }
                case 0x434E4556: // VENC
                {
                    _MerchantContainerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.MerchantContainer);
                }
                case 0x564E4556: // VENV
                {
                    _VendorValuesLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.VendorValues);
                }
                case 0x44564C50: // PLVD
                {
                    stream.Position += _package.Meta.SubConstants.HeaderLength;
                    this.VendorLocation = LocationBinaryOverlay.LocationFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.VendorLocation);
                }
                case 0x43544943: // CITC
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return TryGet<int?>.Succeed((int)Faction_FieldIndex.Conditions);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FactionMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

