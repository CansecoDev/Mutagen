/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class FurnitureMarker :
        IFurnitureMarker,
        ILoquiObjectSetter<FurnitureMarker>,
        IEquatable<FurnitureMarker>,
        IEqualsMask
    {
        #region Ctor
        public FurnitureMarker()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Enabled
        public Boolean Enabled { get; set; } = default;
        #endregion
        #region DisabledEntryPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EntryPoints? _DisabledEntryPoints;
        public EntryPoints? DisabledEntryPoints
        {
            get => _DisabledEntryPoints;
            set => _DisabledEntryPoints = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEntryPointsGetter? IFurnitureMarkerGetter.DisabledEntryPoints => this.DisabledEntryPoints;
        #endregion
        #region MarkerKeyword
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Keyword> _MarkerKeyword = new FormLinkNullable<Keyword>();
        public IFormLinkNullable<Keyword> MarkerKeyword => this._MarkerKeyword;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IFurnitureMarkerGetter.MarkerKeyword => this.MarkerKeyword;
        #endregion
        #region EntryPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EntryPoints? _EntryPoints;
        public EntryPoints? EntryPoints
        {
            get => _EntryPoints;
            set => _EntryPoints = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEntryPointsGetter? IFurnitureMarkerGetter.EntryPoints => this.EntryPoints;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FurnitureMarkerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFurnitureMarkerGetter rhs)) return false;
            return ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(FurnitureMarker obj)
        {
            return ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => FurnitureMarkerXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FurnitureMarkerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static FurnitureMarker CreateFromXml(
            XElement node,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static FurnitureMarker CreateFromXml(
            XElement node,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FurnitureMarker.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static FurnitureMarker CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new FurnitureMarker();
            ((FurnitureMarkerSetterCommon)((IFurnitureMarkerGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static FurnitureMarker CreateFromXml(
            string path,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static FurnitureMarker CreateFromXml(
            string path,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FurnitureMarker CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static FurnitureMarker CreateFromXml(
            Stream stream,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static FurnitureMarker CreateFromXml(
            Stream stream,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static FurnitureMarker CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Enabled = initialValue;
                this.DisabledEntryPoints = new MaskItem<TItem, EntryPoints.Mask<TItem>?>(initialValue, new EntryPoints.Mask<TItem>(initialValue));
                this.MarkerKeyword = initialValue;
                this.EntryPoints = new MaskItem<TItem, EntryPoints.Mask<TItem>?>(initialValue, new EntryPoints.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Enabled,
                TItem DisabledEntryPoints,
                TItem MarkerKeyword,
                TItem EntryPoints)
            {
                this.Enabled = Enabled;
                this.DisabledEntryPoints = new MaskItem<TItem, EntryPoints.Mask<TItem>?>(DisabledEntryPoints, new EntryPoints.Mask<TItem>(DisabledEntryPoints));
                this.MarkerKeyword = MarkerKeyword;
                this.EntryPoints = new MaskItem<TItem, EntryPoints.Mask<TItem>?>(EntryPoints, new EntryPoints.Mask<TItem>(EntryPoints));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Enabled;
            public MaskItem<TItem, EntryPoints.Mask<TItem>?>? DisabledEntryPoints { get; set; }
            public TItem MarkerKeyword;
            public MaskItem<TItem, EntryPoints.Mask<TItem>?>? EntryPoints { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Enabled, rhs.Enabled)) return false;
                if (!object.Equals(this.DisabledEntryPoints, rhs.DisabledEntryPoints)) return false;
                if (!object.Equals(this.MarkerKeyword, rhs.MarkerKeyword)) return false;
                if (!object.Equals(this.EntryPoints, rhs.EntryPoints)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Enabled);
                hash.Add(this.DisabledEntryPoints);
                hash.Add(this.MarkerKeyword);
                hash.Add(this.EntryPoints);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Enabled)) return false;
                if (DisabledEntryPoints != null)
                {
                    if (!eval(this.DisabledEntryPoints.Overall)) return false;
                    if (this.DisabledEntryPoints.Specific != null && !this.DisabledEntryPoints.Specific.All(eval)) return false;
                }
                if (!eval(this.MarkerKeyword)) return false;
                if (EntryPoints != null)
                {
                    if (!eval(this.EntryPoints.Overall)) return false;
                    if (this.EntryPoints.Specific != null && !this.EntryPoints.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Enabled)) return true;
                if (DisabledEntryPoints != null)
                {
                    if (eval(this.DisabledEntryPoints.Overall)) return true;
                    if (this.DisabledEntryPoints.Specific != null && this.DisabledEntryPoints.Specific.Any(eval)) return true;
                }
                if (eval(this.MarkerKeyword)) return true;
                if (EntryPoints != null)
                {
                    if (eval(this.EntryPoints.Overall)) return true;
                    if (this.EntryPoints.Specific != null && this.EntryPoints.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FurnitureMarker.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Enabled = eval(this.Enabled);
                obj.DisabledEntryPoints = this.DisabledEntryPoints == null ? null : new MaskItem<R, EntryPoints.Mask<R>?>(eval(this.DisabledEntryPoints.Overall), this.DisabledEntryPoints.Specific?.Translate(eval));
                obj.MarkerKeyword = eval(this.MarkerKeyword);
                obj.EntryPoints = this.EntryPoints == null ? null : new MaskItem<R, EntryPoints.Mask<R>?>(eval(this.EntryPoints.Overall), this.EntryPoints.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(FurnitureMarker.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, FurnitureMarker.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(FurnitureMarker.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Enabled ?? true)
                    {
                        fg.AppendItem(Enabled, "Enabled");
                    }
                    if (printMask?.DisabledEntryPoints?.Overall ?? true)
                    {
                        DisabledEntryPoints?.ToString(fg);
                    }
                    if (printMask?.MarkerKeyword ?? true)
                    {
                        fg.AppendItem(MarkerKeyword, "MarkerKeyword");
                    }
                    if (printMask?.EntryPoints?.Overall ?? true)
                    {
                        EntryPoints?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Enabled;
            public MaskItem<Exception?, EntryPoints.ErrorMask?>? DisabledEntryPoints;
            public Exception? MarkerKeyword;
            public MaskItem<Exception?, EntryPoints.ErrorMask?>? EntryPoints;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                FurnitureMarker_FieldIndex enu = (FurnitureMarker_FieldIndex)index;
                switch (enu)
                {
                    case FurnitureMarker_FieldIndex.Enabled:
                        return Enabled;
                    case FurnitureMarker_FieldIndex.DisabledEntryPoints:
                        return DisabledEntryPoints;
                    case FurnitureMarker_FieldIndex.MarkerKeyword:
                        return MarkerKeyword;
                    case FurnitureMarker_FieldIndex.EntryPoints:
                        return EntryPoints;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                FurnitureMarker_FieldIndex enu = (FurnitureMarker_FieldIndex)index;
                switch (enu)
                {
                    case FurnitureMarker_FieldIndex.Enabled:
                        this.Enabled = ex;
                        break;
                    case FurnitureMarker_FieldIndex.DisabledEntryPoints:
                        this.DisabledEntryPoints = new MaskItem<Exception?, EntryPoints.ErrorMask?>(ex, null);
                        break;
                    case FurnitureMarker_FieldIndex.MarkerKeyword:
                        this.MarkerKeyword = ex;
                        break;
                    case FurnitureMarker_FieldIndex.EntryPoints:
                        this.EntryPoints = new MaskItem<Exception?, EntryPoints.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                FurnitureMarker_FieldIndex enu = (FurnitureMarker_FieldIndex)index;
                switch (enu)
                {
                    case FurnitureMarker_FieldIndex.Enabled:
                        this.Enabled = (Exception?)obj;
                        break;
                    case FurnitureMarker_FieldIndex.DisabledEntryPoints:
                        this.DisabledEntryPoints = (MaskItem<Exception?, EntryPoints.ErrorMask?>?)obj;
                        break;
                    case FurnitureMarker_FieldIndex.MarkerKeyword:
                        this.MarkerKeyword = (Exception?)obj;
                        break;
                    case FurnitureMarker_FieldIndex.EntryPoints:
                        this.EntryPoints = (MaskItem<Exception?, EntryPoints.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Enabled != null) return true;
                if (DisabledEntryPoints != null) return true;
                if (MarkerKeyword != null) return true;
                if (EntryPoints != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Enabled, "Enabled");
                DisabledEntryPoints?.ToString(fg);
                fg.AppendItem(MarkerKeyword, "MarkerKeyword");
                EntryPoints?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Enabled = this.Enabled.Combine(rhs.Enabled);
                ret.DisabledEntryPoints = this.DisabledEntryPoints.Combine(rhs.DisabledEntryPoints, (l, r) => l.Combine(r));
                ret.MarkerKeyword = this.MarkerKeyword.Combine(rhs.MarkerKeyword);
                ret.EntryPoints = this.EntryPoints.Combine(rhs.EntryPoints, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Enabled;
            public MaskItem<bool, EntryPoints.TranslationMask?> DisabledEntryPoints;
            public bool MarkerKeyword;
            public MaskItem<bool, EntryPoints.TranslationMask?> EntryPoints;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Enabled = defaultOn;
                this.DisabledEntryPoints = new MaskItem<bool, EntryPoints.TranslationMask?>(defaultOn, null);
                this.MarkerKeyword = defaultOn;
                this.EntryPoints = new MaskItem<bool, EntryPoints.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Enabled, null));
                ret.Add((DisabledEntryPoints?.Overall ?? true, DisabledEntryPoints?.Specific?.GetCrystal()));
                ret.Add((MarkerKeyword, null));
                ret.Add((EntryPoints?.Overall ?? true, EntryPoints?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => FurnitureMarkerCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => FurnitureMarkerCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FurnitureMarkerCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FurnitureMarkerCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FurnitureMarkerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FurnitureMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static FurnitureMarker CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static FurnitureMarker CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new FurnitureMarker();
            ((FurnitureMarkerSetterCommon)((IFurnitureMarkerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFurnitureMarkerGetter)rhs, include);

        void IClearable.Clear()
        {
            ((FurnitureMarkerSetterCommon)((IFurnitureMarkerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static FurnitureMarker GetNew()
        {
            return new FurnitureMarker();
        }

    }
    #endregion

    #region Interface
    public partial interface IFurnitureMarker :
        IFurnitureMarkerGetter,
        ILoquiObjectSetter<IFurnitureMarker>
    {
        new Boolean Enabled { get; set; }
        new EntryPoints? DisabledEntryPoints { get; set; }
        new IFormLinkNullable<Keyword> MarkerKeyword { get; }
        new EntryPoints? EntryPoints { get; set; }
    }

    public partial interface IFurnitureMarkerGetter :
        ILoquiObject,
        ILoquiObject<IFurnitureMarkerGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => FurnitureMarker_Registration.Instance;
        Boolean Enabled { get; }
        IEntryPointsGetter? DisabledEntryPoints { get; }
        IFormLinkNullableGetter<IKeywordGetter> MarkerKeyword { get; }
        IEntryPointsGetter? EntryPoints { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FurnitureMarkerMixIn
    {
        public static void Clear(this IFurnitureMarker item)
        {
            ((FurnitureMarkerSetterCommon)((IFurnitureMarkerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FurnitureMarker.Mask<bool> GetEqualsMask(
            this IFurnitureMarkerGetter item,
            IFurnitureMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFurnitureMarkerGetter item,
            string? name = null,
            FurnitureMarker.Mask<bool>? printMask = null)
        {
            return ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFurnitureMarkerGetter item,
            FileGeneration fg,
            string? name = null,
            FurnitureMarker.Mask<bool>? printMask = null)
        {
            ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFurnitureMarkerGetter item,
            FurnitureMarker.Mask<bool?> checkMask)
        {
            return ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static FurnitureMarker.Mask<bool> GetHasBeenSetMask(this IFurnitureMarkerGetter item)
        {
            var ret = new FurnitureMarker.Mask<bool>(false);
            ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFurnitureMarkerGetter item,
            IFurnitureMarkerGetter rhs)
        {
            return ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IFurnitureMarker lhs,
            IFurnitureMarkerGetter rhs)
        {
            ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IFurnitureMarker lhs,
            IFurnitureMarkerGetter rhs,
            FurnitureMarker.TranslationMask? copyMask = null)
        {
            ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFurnitureMarker lhs,
            IFurnitureMarkerGetter rhs,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = FurnitureMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFurnitureMarker lhs,
            IFurnitureMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static FurnitureMarker DeepCopy(
            this IFurnitureMarkerGetter item,
            FurnitureMarker.TranslationMask? copyMask = null)
        {
            return ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FurnitureMarker DeepCopy(
            this IFurnitureMarkerGetter item,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? copyMask = null)
        {
            return ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FurnitureMarker DeepCopy(
            this IFurnitureMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FurnitureMarkerSetterTranslationCommon)((IFurnitureMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFurnitureMarker item,
            XElement node,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFurnitureMarker item,
            XElement node,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FurnitureMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IFurnitureMarker item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((FurnitureMarkerSetterCommon)((IFurnitureMarkerGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFurnitureMarker item,
            string path,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFurnitureMarker item,
            string path,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFurnitureMarker item,
            string path,
            ErrorMaskBuilder? errorMask,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFurnitureMarker item,
            Stream stream,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFurnitureMarker item,
            Stream stream,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFurnitureMarker item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFurnitureMarker item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IFurnitureMarker item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FurnitureMarkerSetterCommon)((IFurnitureMarkerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum FurnitureMarker_FieldIndex
    {
        Enabled = 0,
        DisabledEntryPoints = 1,
        MarkerKeyword = 2,
        EntryPoints = 3,
    }
    #endregion

    #region Registration
    public partial class FurnitureMarker_Registration : ILoquiRegistration
    {
        public static readonly FurnitureMarker_Registration Instance = new FurnitureMarker_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 194,
            version: 0);

        public const string GUID = "947fcdab-6949-4138-a678-cae2ce9086a6";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(FurnitureMarker.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FurnitureMarker.ErrorMask);

        public static readonly Type ClassType = typeof(FurnitureMarker);

        public static readonly Type GetterType = typeof(IFurnitureMarkerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFurnitureMarker);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.FurnitureMarker";

        public const string Name = "FurnitureMarker";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ENABLED":
                    return (ushort)FurnitureMarker_FieldIndex.Enabled;
                case "DISABLEDENTRYPOINTS":
                    return (ushort)FurnitureMarker_FieldIndex.DisabledEntryPoints;
                case "MARKERKEYWORD":
                    return (ushort)FurnitureMarker_FieldIndex.MarkerKeyword;
                case "ENTRYPOINTS":
                    return (ushort)FurnitureMarker_FieldIndex.EntryPoints;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            FurnitureMarker_FieldIndex enu = (FurnitureMarker_FieldIndex)index;
            switch (enu)
            {
                case FurnitureMarker_FieldIndex.Enabled:
                case FurnitureMarker_FieldIndex.DisabledEntryPoints:
                case FurnitureMarker_FieldIndex.MarkerKeyword:
                case FurnitureMarker_FieldIndex.EntryPoints:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            FurnitureMarker_FieldIndex enu = (FurnitureMarker_FieldIndex)index;
            switch (enu)
            {
                case FurnitureMarker_FieldIndex.DisabledEntryPoints:
                case FurnitureMarker_FieldIndex.EntryPoints:
                    return true;
                case FurnitureMarker_FieldIndex.Enabled:
                case FurnitureMarker_FieldIndex.MarkerKeyword:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            FurnitureMarker_FieldIndex enu = (FurnitureMarker_FieldIndex)index;
            switch (enu)
            {
                case FurnitureMarker_FieldIndex.Enabled:
                case FurnitureMarker_FieldIndex.DisabledEntryPoints:
                case FurnitureMarker_FieldIndex.MarkerKeyword:
                case FurnitureMarker_FieldIndex.EntryPoints:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            FurnitureMarker_FieldIndex enu = (FurnitureMarker_FieldIndex)index;
            switch (enu)
            {
                case FurnitureMarker_FieldIndex.Enabled:
                    return "Enabled";
                case FurnitureMarker_FieldIndex.DisabledEntryPoints:
                    return "DisabledEntryPoints";
                case FurnitureMarker_FieldIndex.MarkerKeyword:
                    return "MarkerKeyword";
                case FurnitureMarker_FieldIndex.EntryPoints:
                    return "EntryPoints";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            FurnitureMarker_FieldIndex enu = (FurnitureMarker_FieldIndex)index;
            switch (enu)
            {
                case FurnitureMarker_FieldIndex.Enabled:
                case FurnitureMarker_FieldIndex.DisabledEntryPoints:
                case FurnitureMarker_FieldIndex.MarkerKeyword:
                case FurnitureMarker_FieldIndex.EntryPoints:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            FurnitureMarker_FieldIndex enu = (FurnitureMarker_FieldIndex)index;
            switch (enu)
            {
                case FurnitureMarker_FieldIndex.Enabled:
                case FurnitureMarker_FieldIndex.DisabledEntryPoints:
                case FurnitureMarker_FieldIndex.MarkerKeyword:
                case FurnitureMarker_FieldIndex.EntryPoints:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            FurnitureMarker_FieldIndex enu = (FurnitureMarker_FieldIndex)index;
            switch (enu)
            {
                case FurnitureMarker_FieldIndex.Enabled:
                    return typeof(Boolean);
                case FurnitureMarker_FieldIndex.DisabledEntryPoints:
                    return typeof(EntryPoints);
                case FurnitureMarker_FieldIndex.MarkerKeyword:
                    return typeof(IFormLinkNullable<Keyword>);
                case FurnitureMarker_FieldIndex.EntryPoints:
                    return typeof(EntryPoints);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FurnitureMarkerXmlWriteTranslation);
        public const int NumStructFields = 4;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(FurnitureMarkerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FurnitureMarkerSetterCommon
    {
        public static readonly FurnitureMarkerSetterCommon Instance = new FurnitureMarkerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFurnitureMarker item)
        {
            ClearPartial();
            item.Enabled = default;
            item.DisabledEntryPoints = null;
            item.MarkerKeyword.FormKey = null;
            item.EntryPoints = null;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IFurnitureMarker item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FurnitureMarkerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IFurnitureMarker item,
            MutagenFrame frame)
        {
            item.Enabled = frame.ReadBoolean();
            if (frame.Complete) return;
            item.DisabledEntryPoints = Mutagen.Bethesda.Skyrim.EntryPoints.CreateFromBinary(frame: frame);
            if (frame.Complete) return;
            item.MarkerKeyword.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            if (frame.Complete) return;
            item.EntryPoints = Mutagen.Bethesda.Skyrim.EntryPoints.CreateFromBinary(frame: frame);
        }
        
        public virtual void CopyInFromBinary(
            IFurnitureMarker item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class FurnitureMarkerCommon
    {
        public static readonly FurnitureMarkerCommon Instance = new FurnitureMarkerCommon();

        public FurnitureMarker.Mask<bool> GetEqualsMask(
            IFurnitureMarkerGetter item,
            IFurnitureMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FurnitureMarker.Mask<bool>(false);
            ((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFurnitureMarkerGetter item,
            IFurnitureMarkerGetter rhs,
            FurnitureMarker.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Enabled = item.Enabled == rhs.Enabled;
            ret.DisabledEntryPoints = EqualsMaskHelper.EqualsHelper(
                item.DisabledEntryPoints,
                rhs.DisabledEntryPoints,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MarkerKeyword = object.Equals(item.MarkerKeyword, rhs.MarkerKeyword);
            ret.EntryPoints = EqualsMaskHelper.EqualsHelper(
                item.EntryPoints,
                rhs.EntryPoints,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IFurnitureMarkerGetter item,
            string? name = null,
            FurnitureMarker.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFurnitureMarkerGetter item,
            FileGeneration fg,
            string? name = null,
            FurnitureMarker.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"FurnitureMarker =>");
            }
            else
            {
                fg.AppendLine($"{name} (FurnitureMarker) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFurnitureMarkerGetter item,
            FileGeneration fg,
            FurnitureMarker.Mask<bool>? printMask = null)
        {
            if (printMask?.Enabled ?? true)
            {
                fg.AppendItem(item.Enabled, "Enabled");
            }
            if ((printMask?.DisabledEntryPoints?.Overall ?? true)
                && item.DisabledEntryPoints.TryGet(out var DisabledEntryPointsItem))
            {
                DisabledEntryPointsItem?.ToString(fg, "DisabledEntryPoints");
            }
            if ((printMask?.MarkerKeyword ?? true)
                && item.MarkerKeyword.TryGet(out var MarkerKeywordItem))
            {
                fg.AppendItem(MarkerKeywordItem, "MarkerKeyword");
            }
            if ((printMask?.EntryPoints?.Overall ?? true)
                && item.EntryPoints.TryGet(out var EntryPointsItem))
            {
                EntryPointsItem?.ToString(fg, "EntryPoints");
            }
        }
        
        public bool HasBeenSet(
            IFurnitureMarkerGetter item,
            FurnitureMarker.Mask<bool?> checkMask)
        {
            if (checkMask.DisabledEntryPoints?.Overall.HasValue ?? false && checkMask.DisabledEntryPoints.Overall.Value != (item.DisabledEntryPoints != null)) return false;
            if (checkMask.DisabledEntryPoints?.Specific != null && (item.DisabledEntryPoints == null || !item.DisabledEntryPoints.HasBeenSet(checkMask.DisabledEntryPoints.Specific))) return false;
            if (checkMask.MarkerKeyword.HasValue && checkMask.MarkerKeyword.Value != (item.MarkerKeyword.FormKey != null)) return false;
            if (checkMask.EntryPoints?.Overall.HasValue ?? false && checkMask.EntryPoints.Overall.Value != (item.EntryPoints != null)) return false;
            if (checkMask.EntryPoints?.Specific != null && (item.EntryPoints == null || !item.EntryPoints.HasBeenSet(checkMask.EntryPoints.Specific))) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IFurnitureMarkerGetter item,
            FurnitureMarker.Mask<bool> mask)
        {
            mask.Enabled = true;
            var itemDisabledEntryPoints = item.DisabledEntryPoints;
            mask.DisabledEntryPoints = new MaskItem<bool, EntryPoints.Mask<bool>?>(itemDisabledEntryPoints != null, itemDisabledEntryPoints?.GetHasBeenSetMask());
            mask.MarkerKeyword = (item.MarkerKeyword.FormKey != null);
            var itemEntryPoints = item.EntryPoints;
            mask.EntryPoints = new MaskItem<bool, EntryPoints.Mask<bool>?>(itemEntryPoints != null, itemEntryPoints?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFurnitureMarkerGetter? lhs,
            IFurnitureMarkerGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Enabled != rhs.Enabled) return false;
            if (!object.Equals(lhs.DisabledEntryPoints, rhs.DisabledEntryPoints)) return false;
            if (!lhs.MarkerKeyword.Equals(rhs.MarkerKeyword)) return false;
            if (!object.Equals(lhs.EntryPoints, rhs.EntryPoints)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IFurnitureMarkerGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Enabled);
            if (item.DisabledEntryPoints.TryGet(out var DisabledEntryPointsitem))
            {
                hash.Add(DisabledEntryPointsitem);
            }
            if (item.MarkerKeyword.TryGet(out var MarkerKeyworditem))
            {
                hash.Add(MarkerKeyworditem);
            }
            if (item.EntryPoints.TryGet(out var EntryPointsitem))
            {
                hash.Add(EntryPointsitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return FurnitureMarker.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IFurnitureMarkerGetter obj)
        {
            if (obj.MarkerKeyword.FormKey.TryGet(out var MarkerKeywordKey))
            {
                yield return MarkerKeywordKey;
            }
            yield break;
        }
        
        public void RemapLinks(IFurnitureMarkerGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class FurnitureMarkerSetterTranslationCommon
    {
        public static readonly FurnitureMarkerSetterTranslationCommon Instance = new FurnitureMarkerSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IFurnitureMarker item,
            IFurnitureMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarker_FieldIndex.Enabled) ?? true))
            {
                item.Enabled = rhs.Enabled;
            }
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarker_FieldIndex.DisabledEntryPoints) ?? true))
            {
                errorMask?.PushIndex((int)FurnitureMarker_FieldIndex.DisabledEntryPoints);
                try
                {
                    if(rhs.DisabledEntryPoints.TryGet(out var rhsDisabledEntryPoints))
                    {
                        item.DisabledEntryPoints = rhsDisabledEntryPoints.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FurnitureMarker_FieldIndex.DisabledEntryPoints));
                    }
                    else
                    {
                        item.DisabledEntryPoints = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarker_FieldIndex.MarkerKeyword) ?? true))
            {
                item.MarkerKeyword.FormKey = rhs.MarkerKeyword.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)FurnitureMarker_FieldIndex.EntryPoints) ?? true))
            {
                errorMask?.PushIndex((int)FurnitureMarker_FieldIndex.EntryPoints);
                try
                {
                    if(rhs.EntryPoints.TryGet(out var rhsEntryPoints))
                    {
                        item.EntryPoints = rhsEntryPoints.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FurnitureMarker_FieldIndex.EntryPoints));
                    }
                    else
                    {
                        item.EntryPoints = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public FurnitureMarker DeepCopy(
            IFurnitureMarkerGetter item,
            FurnitureMarker.TranslationMask? copyMask = null)
        {
            FurnitureMarker ret = (FurnitureMarker)((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public FurnitureMarker DeepCopy(
            IFurnitureMarkerGetter item,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? copyMask = null)
        {
            FurnitureMarker ret = (FurnitureMarker)((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public FurnitureMarker DeepCopy(
            IFurnitureMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FurnitureMarker ret = (FurnitureMarker)((FurnitureMarkerCommon)((IFurnitureMarkerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class FurnitureMarker
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FurnitureMarker_Registration.Instance;
        public static FurnitureMarker_Registration Registration => FurnitureMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FurnitureMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return FurnitureMarkerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FurnitureMarkerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFurnitureMarkerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IFurnitureMarkerGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IFurnitureMarkerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FurnitureMarkerXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static FurnitureMarkerXmlWriteTranslation Instance = new FurnitureMarkerXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFurnitureMarkerGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)FurnitureMarker_FieldIndex.Enabled) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Enabled),
                    item: item.Enabled,
                    fieldIndex: (int)FurnitureMarker_FieldIndex.Enabled,
                    errorMask: errorMask);
            }
            if ((item.DisabledEntryPoints != null)
                && (translationMask?.GetShouldTranslate((int)FurnitureMarker_FieldIndex.DisabledEntryPoints) ?? true))
            {
                if (item.DisabledEntryPoints.TryGet(out var DisabledEntryPointsItem))
                {
                    ((EntryPointsXmlWriteTranslation)((IXmlItem)DisabledEntryPointsItem).XmlWriteTranslator).Write(
                        item: DisabledEntryPointsItem,
                        node: node,
                        name: nameof(item.DisabledEntryPoints),
                        fieldIndex: (int)FurnitureMarker_FieldIndex.DisabledEntryPoints,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FurnitureMarker_FieldIndex.DisabledEntryPoints));
                }
            }
            if ((item.MarkerKeyword.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)FurnitureMarker_FieldIndex.MarkerKeyword) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MarkerKeyword),
                    item: item.MarkerKeyword.FormKey.Value,
                    fieldIndex: (int)FurnitureMarker_FieldIndex.MarkerKeyword,
                    errorMask: errorMask);
            }
            if ((item.EntryPoints != null)
                && (translationMask?.GetShouldTranslate((int)FurnitureMarker_FieldIndex.EntryPoints) ?? true))
            {
                if (item.EntryPoints.TryGet(out var EntryPointsItem))
                {
                    ((EntryPointsXmlWriteTranslation)((IXmlItem)EntryPointsItem).XmlWriteTranslator).Write(
                        item: EntryPointsItem,
                        node: node,
                        name: nameof(item.EntryPoints),
                        fieldIndex: (int)FurnitureMarker_FieldIndex.EntryPoints,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)FurnitureMarker_FieldIndex.EntryPoints));
                }
            }
        }

        public void Write(
            XElement node,
            IFurnitureMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.FurnitureMarker");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.FurnitureMarker");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFurnitureMarkerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IFurnitureMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IFurnitureMarkerGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class FurnitureMarkerXmlCreateTranslation
    {
        public readonly static FurnitureMarkerXmlCreateTranslation Instance = new FurnitureMarkerXmlCreateTranslation();

        public static void FillPublicXml(
            IFurnitureMarker item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FurnitureMarkerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFurnitureMarker item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Enabled":
                    errorMask?.PushIndex((int)FurnitureMarker_FieldIndex.Enabled);
                    try
                    {
                        item.Enabled = BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DisabledEntryPoints":
                    errorMask?.PushIndex((int)FurnitureMarker_FieldIndex.DisabledEntryPoints);
                    try
                    {
                        item.DisabledEntryPoints = LoquiXmlTranslation<EntryPoints>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FurnitureMarker_FieldIndex.DisabledEntryPoints));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MarkerKeyword":
                    errorMask?.PushIndex((int)FurnitureMarker_FieldIndex.MarkerKeyword);
                    try
                    {
                        item.MarkerKeyword.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EntryPoints":
                    errorMask?.PushIndex((int)FurnitureMarker_FieldIndex.EntryPoints);
                    try
                    {
                        item.EntryPoints = LoquiXmlTranslation<EntryPoints>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)FurnitureMarker_FieldIndex.EntryPoints));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class FurnitureMarkerXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFurnitureMarkerGetter item,
            XElement node,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((FurnitureMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = FurnitureMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFurnitureMarkerGetter item,
            string path,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFurnitureMarkerGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFurnitureMarkerGetter item,
            Stream stream,
            out FurnitureMarker.ErrorMask errorMask,
            FurnitureMarker.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IFurnitureMarkerGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IFurnitureMarkerGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((FurnitureMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IFurnitureMarkerGetter item,
            XElement node,
            string? name = null,
            FurnitureMarker.TranslationMask? translationMask = null)
        {
            ((FurnitureMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IFurnitureMarkerGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((FurnitureMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFurnitureMarkerGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((FurnitureMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FurnitureMarkerBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static FurnitureMarkerBinaryWriteTranslation Instance = new FurnitureMarkerBinaryWriteTranslation();

        public static void WriteEmbedded(
            IFurnitureMarkerGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Enabled);
            if (item.DisabledEntryPoints.TryGet(out var DisabledEntryPointsItem))
            {
                ((EntryPointsBinaryWriteTranslation)((IBinaryItem)DisabledEntryPointsItem).BinaryWriteTranslator).Write(
                    item: DisabledEntryPointsItem,
                    writer: writer);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MarkerKeyword);
            if (item.EntryPoints.TryGet(out var EntryPointsItem))
            {
                ((EntryPointsBinaryWriteTranslation)((IBinaryItem)EntryPointsItem).BinaryWriteTranslator).Write(
                    item: EntryPointsItem,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            IFurnitureMarkerGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFurnitureMarkerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class FurnitureMarkerBinaryCreateTranslation
    {
        public readonly static FurnitureMarkerBinaryCreateTranslation Instance = new FurnitureMarkerBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class FurnitureMarkerBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFurnitureMarkerGetter item,
            MutagenWriter writer)
        {
            ((FurnitureMarkerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FurnitureMarkerBinaryOverlay :
        BinaryOverlay,
        IFurnitureMarkerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FurnitureMarker_Registration.Instance;
        public static FurnitureMarker_Registration Registration => FurnitureMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FurnitureMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FurnitureMarkerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFurnitureMarkerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IFurnitureMarkerGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IFurnitureMarkerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFurnitureMarkerGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => FurnitureMarkerCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => FurnitureMarkerCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FurnitureMarkerCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FurnitureMarkerCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => FurnitureMarkerXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FurnitureMarkerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FurnitureMarkerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FurnitureMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Boolean Enabled => _data.Slice(0x0, 0x1)[0] == 1;
        public IEntryPointsGetter DisabledEntryPoints => EntryPointsBinaryOverlay.EntryPointsFactory(new BinaryMemoryReadStream(_data.Slice(0x1)), _package, default(RecordTypeConverter));
        public IFormLinkNullableGetter<IKeywordGetter> MarkerKeyword => new FormLinkNullable<IKeywordGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x5, 0x4))));
        public IEntryPointsGetter EntryPoints => EntryPointsBinaryOverlay.EntryPointsFactory(new BinaryMemoryReadStream(_data.Slice(0x9)), _package, default(RecordTypeConverter));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected FurnitureMarkerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static FurnitureMarkerBinaryOverlay FurnitureMarkerFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new FurnitureMarkerBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 0xD),
                package: package);
            int offset = stream.Position;
            stream.Position += 0xD;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static FurnitureMarkerBinaryOverlay FurnitureMarkerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return FurnitureMarkerFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FurnitureMarkerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

