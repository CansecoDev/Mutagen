/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Furniture :
        SkyrimMajorRecord,
        IFurnitureInternal,
        ILoquiObjectSetter<Furniture>,
        IEquatable<Furniture>,
        IEqualsMask
    {
        #region Ctor
        protected Furniture()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IFurnitureGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IFurnitureGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString? IFurnitureGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IFurnitureGetter.Model => this.Model;
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IFurnitureGetter.Destructible => this.Destructible;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Keyword>>? _Keywords;
        public ExtendedList<IFormLink<Keyword>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IFurnitureGetter.Keywords => _Keywords;
        #endregion

        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _Unknown;
        public Byte[]? Unknown
        {
            get => this._Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFurnitureGetter.Unknown => this.Unknown;
        #endregion
        #region Flags
        public Furniture.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Furniture.Flag? IFurnitureGetter.Flags => this.Flags;
        #endregion
        #region InteractionKeyword
        public FormLinkNullable<Keyword> InteractionKeyword { get; set; } = new FormLinkNullable<Keyword>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IFurnitureGetter.InteractionKeyword => this.InteractionKeyword;
        #endregion
        #region WorkbenchData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WorkbenchData? _WorkbenchData;
        public WorkbenchData? WorkbenchData
        {
            get => _WorkbenchData;
            set => _WorkbenchData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWorkbenchDataGetter? IFurnitureGetter.WorkbenchData => this.WorkbenchData;
        #endregion
        #region AssociatedSpell
        public FormLinkNullable<Spell> AssociatedSpell { get; set; } = new FormLinkNullable<Spell>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISpellGetter> IFurnitureGetter.AssociatedSpell => this.AssociatedSpell;
        #endregion
        #region Markers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<FurnitureMarker>? _Markers;
        public ExtendedList<FurnitureMarker>? Markers
        {
            get => this._Markers;
            set => this._Markers = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFurnitureMarkerGetter>? IFurnitureGetter.Markers => _Markers;
        #endregion

        #endregion
        #region ModelFilename
        public String? ModelFilename { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IFurnitureGetter.ModelFilename => this.ModelFilename;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FurnitureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IFurnitureGetter rhs)) return false;
            return ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Furniture obj)
        {
            return ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((FurnitureCommon)((IFurnitureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => FurnitureXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FurnitureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Furniture CreateFromXml(
            XElement node,
            Furniture.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Furniture CreateFromXml(
            XElement node,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Furniture.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Furniture CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Furniture();
            ((FurnitureSetterCommon)((IFurnitureGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Furniture CreateFromXml(
            string path,
            Furniture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Furniture CreateFromXml(
            string path,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Furniture CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Furniture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Furniture CreateFromXml(
            Stream stream,
            Furniture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Furniture CreateFromXml(
            Stream stream,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Furniture CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Furniture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Unknown = initialValue;
                this.Flags = initialValue;
                this.InteractionKeyword = initialValue;
                this.WorkbenchData = new MaskItem<TItem, WorkbenchData.Mask<TItem>?>(initialValue, new WorkbenchData.Mask<TItem>(initialValue));
                this.AssociatedSpell = initialValue;
                this.Markers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarker.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarker.Mask<TItem>?>>());
                this.ModelFilename = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Name,
                TItem Model,
                TItem Destructible,
                TItem Keywords,
                TItem Unknown,
                TItem Flags,
                TItem InteractionKeyword,
                TItem WorkbenchData,
                TItem AssociatedSpell,
                TItem Markers,
                TItem ModelFilename)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Unknown = Unknown;
                this.Flags = Flags;
                this.InteractionKeyword = InteractionKeyword;
                this.WorkbenchData = new MaskItem<TItem, WorkbenchData.Mask<TItem>?>(WorkbenchData, new WorkbenchData.Mask<TItem>(WorkbenchData));
                this.AssociatedSpell = AssociatedSpell;
                this.Markers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarker.Mask<TItem>?>>?>(Markers, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarker.Mask<TItem>?>>());
                this.ModelFilename = ModelFilename;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem Unknown;
            public TItem Flags;
            public TItem InteractionKeyword;
            public MaskItem<TItem, WorkbenchData.Mask<TItem>?>? WorkbenchData { get; set; }
            public TItem AssociatedSpell;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarker.Mask<TItem>?>>?>? Markers;
            public TItem ModelFilename;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.InteractionKeyword, rhs.InteractionKeyword)) return false;
                if (!object.Equals(this.WorkbenchData, rhs.WorkbenchData)) return false;
                if (!object.Equals(this.AssociatedSpell, rhs.AssociatedSpell)) return false;
                if (!object.Equals(this.Markers, rhs.Markers)) return false;
                if (!object.Equals(this.ModelFilename, rhs.ModelFilename)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Destructible);
                hash.Add(this.Keywords);
                hash.Add(this.Unknown);
                hash.Add(this.Flags);
                hash.Add(this.InteractionKeyword);
                hash.Add(this.WorkbenchData);
                hash.Add(this.AssociatedSpell);
                hash.Add(this.Markers);
                hash.Add(this.ModelFilename);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.InteractionKeyword)) return false;
                if (WorkbenchData != null)
                {
                    if (!eval(this.WorkbenchData.Overall)) return false;
                    if (this.WorkbenchData.Specific != null && !this.WorkbenchData.Specific.All(eval)) return false;
                }
                if (!eval(this.AssociatedSpell)) return false;
                if (this.Markers != null)
                {
                    if (!eval(this.Markers.Overall)) return false;
                    if (this.Markers.Specific != null)
                    {
                        foreach (var item in this.Markers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ModelFilename)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Unknown)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.InteractionKeyword)) return true;
                if (WorkbenchData != null)
                {
                    if (eval(this.WorkbenchData.Overall)) return true;
                    if (this.WorkbenchData.Specific != null && this.WorkbenchData.Specific.Any(eval)) return true;
                }
                if (eval(this.AssociatedSpell)) return true;
                if (this.Markers != null)
                {
                    if (eval(this.Markers.Overall)) return true;
                    if (this.Markers.Specific != null)
                    {
                        foreach (var item in this.Markers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ModelFilename)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Furniture.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Unknown = eval(this.Unknown);
                obj.Flags = eval(this.Flags);
                obj.InteractionKeyword = eval(this.InteractionKeyword);
                obj.WorkbenchData = this.WorkbenchData == null ? null : new MaskItem<R, WorkbenchData.Mask<R>?>(eval(this.WorkbenchData.Overall), this.WorkbenchData.Specific?.Translate(eval));
                obj.AssociatedSpell = eval(this.AssociatedSpell);
                if (Markers != null)
                {
                    obj.Markers = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FurnitureMarker.Mask<R>?>>?>(eval(this.Markers.Overall), Enumerable.Empty<MaskItemIndexed<R, FurnitureMarker.Mask<R>?>>());
                    if (Markers.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, FurnitureMarker.Mask<R>?>>();
                        obj.Markers.Specific = l;
                        foreach (var item in Markers.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, FurnitureMarker.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, FurnitureMarker.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ModelFilename = eval(this.ModelFilename);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Furniture.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Furniture.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Furniture.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords.TryGet(out var KeywordsItem))
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.InteractionKeyword ?? true)
                    {
                        fg.AppendItem(InteractionKeyword, "InteractionKeyword");
                    }
                    if (printMask?.WorkbenchData?.Overall ?? true)
                    {
                        WorkbenchData?.ToString(fg);
                    }
                    if (printMask?.AssociatedSpell ?? true)
                    {
                        fg.AppendItem(AssociatedSpell, "AssociatedSpell");
                    }
                    if ((printMask?.Markers?.Overall ?? true)
                        && Markers.TryGet(out var MarkersItem))
                    {
                        fg.AppendLine("Markers =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(MarkersItem.Overall);
                            if (MarkersItem.Specific != null)
                            {
                                foreach (var subItem in MarkersItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.ModelFilename ?? true)
                    {
                        fg.AppendItem(ModelFilename, "ModelFilename");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? Unknown;
            public Exception? Flags;
            public Exception? InteractionKeyword;
            public MaskItem<Exception?, WorkbenchData.ErrorMask?>? WorkbenchData;
            public Exception? AssociatedSpell;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarker.ErrorMask?>>?>? Markers;
            public Exception? ModelFilename;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
                switch (enu)
                {
                    case Furniture_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Furniture_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Furniture_FieldIndex.Name:
                        return Name;
                    case Furniture_FieldIndex.Model:
                        return Model;
                    case Furniture_FieldIndex.Destructible:
                        return Destructible;
                    case Furniture_FieldIndex.Keywords:
                        return Keywords;
                    case Furniture_FieldIndex.Unknown:
                        return Unknown;
                    case Furniture_FieldIndex.Flags:
                        return Flags;
                    case Furniture_FieldIndex.InteractionKeyword:
                        return InteractionKeyword;
                    case Furniture_FieldIndex.WorkbenchData:
                        return WorkbenchData;
                    case Furniture_FieldIndex.AssociatedSpell:
                        return AssociatedSpell;
                    case Furniture_FieldIndex.Markers:
                        return Markers;
                    case Furniture_FieldIndex.ModelFilename:
                        return ModelFilename;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
                switch (enu)
                {
                    case Furniture_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Furniture_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Furniture_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Furniture_FieldIndex.InteractionKeyword:
                        this.InteractionKeyword = ex;
                        break;
                    case Furniture_FieldIndex.WorkbenchData:
                        this.WorkbenchData = new MaskItem<Exception?, WorkbenchData.ErrorMask?>(ex, null);
                        break;
                    case Furniture_FieldIndex.AssociatedSpell:
                        this.AssociatedSpell = ex;
                        break;
                    case Furniture_FieldIndex.Markers:
                        this.Markers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarker.ErrorMask?>>?>(ex, null);
                        break;
                    case Furniture_FieldIndex.ModelFilename:
                        this.ModelFilename = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
                switch (enu)
                {
                    case Furniture_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Furniture_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.InteractionKeyword:
                        this.InteractionKeyword = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.WorkbenchData:
                        this.WorkbenchData = (MaskItem<Exception?, WorkbenchData.ErrorMask?>?)obj;
                        break;
                    case Furniture_FieldIndex.AssociatedSpell:
                        this.AssociatedSpell = (Exception?)obj;
                        break;
                    case Furniture_FieldIndex.Markers:
                        this.Markers = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarker.ErrorMask?>>?>)obj;
                        break;
                    case Furniture_FieldIndex.ModelFilename:
                        this.ModelFilename = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Destructible != null) return true;
                if (Keywords != null) return true;
                if (Unknown != null) return true;
                if (Flags != null) return true;
                if (InteractionKeyword != null) return true;
                if (WorkbenchData != null) return true;
                if (AssociatedSpell != null) return true;
                if (Markers != null) return true;
                if (ModelFilename != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                Destructible?.ToString(fg);
                if (Keywords.TryGet(out var KeywordsItem))
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(InteractionKeyword, "InteractionKeyword");
                WorkbenchData?.ToString(fg);
                fg.AppendItem(AssociatedSpell, "AssociatedSpell");
                if (Markers.TryGet(out var MarkersItem))
                {
                    fg.AppendLine("Markers =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(MarkersItem.Overall);
                        if (MarkersItem.Specific != null)
                        {
                            foreach (var subItem in MarkersItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(ModelFilename, "ModelFilename");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.InteractionKeyword = this.InteractionKeyword.Combine(rhs.InteractionKeyword);
                ret.WorkbenchData = this.WorkbenchData.Combine(rhs.WorkbenchData, (l, r) => l.Combine(r));
                ret.AssociatedSpell = this.AssociatedSpell.Combine(rhs.AssociatedSpell);
                ret.Markers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarker.ErrorMask?>>?>(ExceptionExt.Combine(this.Markers?.Overall, rhs.Markers?.Overall), ExceptionExt.Combine(this.Markers?.Specific, rhs.Markers?.Specific));
                ret.ModelFilename = this.ModelFilename.Combine(rhs.ModelFilename);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, VirtualMachineAdapter.TranslationMask?> VirtualMachineAdapter;
            public MaskItem<bool, ObjectBounds.TranslationMask?> ObjectBounds;
            public bool Name;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public MaskItem<bool, Destructible.TranslationMask?> Destructible;
            public bool Keywords;
            public bool Unknown;
            public bool Flags;
            public bool InteractionKeyword;
            public MaskItem<bool, WorkbenchData.TranslationMask?> WorkbenchData;
            public bool AssociatedSpell;
            public MaskItem<bool, FurnitureMarker.TranslationMask?> Markers;
            public bool ModelFilename;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.VirtualMachineAdapter = new MaskItem<bool, VirtualMachineAdapter.TranslationMask?>(defaultOn, null);
                this.ObjectBounds = new MaskItem<bool, ObjectBounds.TranslationMask?>(defaultOn, null);
                this.Name = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Destructible = new MaskItem<bool, Destructible.TranslationMask?>(defaultOn, null);
                this.Keywords = defaultOn;
                this.Unknown = defaultOn;
                this.Flags = defaultOn;
                this.InteractionKeyword = defaultOn;
                this.WorkbenchData = new MaskItem<bool, WorkbenchData.TranslationMask?>(defaultOn, null);
                this.AssociatedSpell = defaultOn;
                this.Markers = new MaskItem<bool, FurnitureMarker.TranslationMask?>(defaultOn, null);
                this.ModelFilename = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter?.Overall ?? true, VirtualMachineAdapter?.Specific?.GetCrystal()));
                ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Destructible?.Overall ?? true, Destructible?.Specific?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Unknown, null));
                ret.Add((Flags, null));
                ret.Add((InteractionKeyword, null));
                ret.Add((WorkbenchData?.Overall ?? true, WorkbenchData?.Specific?.GetCrystal()));
                ret.Add((AssociatedSpell, null));
                ret.Add((Markers?.Overall ?? true, Markers?.Specific?.GetCrystal()));
                ret.Add((ModelFilename, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Furniture_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => FurnitureCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => FurnitureCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FurnitureCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FurnitureCommon.Instance.RemapLinks(this, mapping);
        public Furniture(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Furniture(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Furniture(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FurnitureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FurnitureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Furniture CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Furniture CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Furniture();
            ((FurnitureSetterCommon)((IFurnitureGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFurnitureGetter)rhs, include);

        void IClearable.Clear()
        {
            ((FurnitureSetterCommon)((IFurnitureGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Furniture GetNew()
        {
            return new Furniture();
        }

    }
    #endregion

    #region Interface
    public partial interface IFurniture :
        IFurnitureGetter,
        ISkyrimMajorRecord,
        ITranslatedNamed,
        IModeled,
        IObjectBounded,
        IObjectId,
        ILoquiObjectSetter<IFurnitureInternal>
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new ObjectBounds ObjectBounds { get; set; }
        new TranslatedString? Name { get; set; }
        new Model? Model { get; set; }
        new Destructible? Destructible { get; set; }
        new ExtendedList<IFormLink<Keyword>>? Keywords { get; set; }
        new Byte[]? Unknown { get; set; }
        new Furniture.Flag? Flags { get; set; }
        new FormLinkNullable<Keyword> InteractionKeyword { get; set; }
        new WorkbenchData? WorkbenchData { get; set; }
        new FormLinkNullable<Spell> AssociatedSpell { get; set; }
        new ExtendedList<FurnitureMarker>? Markers { get; set; }
        new String? ModelFilename { get; set; }
        #region Mutagen
        new Furniture.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IFurnitureInternal :
        ISkyrimMajorRecordInternal,
        IFurniture,
        IFurnitureGetter
    {
    }

    public partial interface IFurnitureGetter :
        ISkyrimMajorRecordGetter,
        ITranslatedNamedGetter,
        IModeledGetter,
        IObjectBoundedGetter,
        IObjectIdGetter,
        ILoquiObject<IFurnitureGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Furniture_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        IObjectBoundsGetter ObjectBounds { get; }
        TranslatedString? Name { get; }
        IModelGetter? Model { get; }
        IDestructibleGetter? Destructible { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        ReadOnlyMemorySlice<Byte>? Unknown { get; }
        Furniture.Flag? Flags { get; }
        IFormLinkNullableGetter<IKeywordGetter> InteractionKeyword { get; }
        IWorkbenchDataGetter? WorkbenchData { get; }
        IFormLinkNullableGetter<ISpellGetter> AssociatedSpell { get; }
        IReadOnlyList<IFurnitureMarkerGetter>? Markers { get; }
        String? ModelFilename { get; }

        #region Mutagen
        Furniture.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class FurnitureMixIn
    {
        public static void Clear(this IFurnitureInternal item)
        {
            ((FurnitureSetterCommon)((IFurnitureGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Furniture.Mask<bool> GetEqualsMask(
            this IFurnitureGetter item,
            IFurnitureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IFurnitureGetter item,
            string? name = null,
            Furniture.Mask<bool>? printMask = null)
        {
            return ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IFurnitureGetter item,
            FileGeneration fg,
            string? name = null,
            Furniture.Mask<bool>? printMask = null)
        {
            ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IFurnitureGetter item,
            Furniture.Mask<bool?> checkMask)
        {
            return ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Furniture.Mask<bool> GetHasBeenSetMask(this IFurnitureGetter item)
        {
            var ret = new Furniture.Mask<bool>(false);
            ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IFurnitureGetter item,
            IFurnitureGetter rhs)
        {
            return ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IFurnitureInternal lhs,
            IFurnitureGetter rhs,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FurnitureSetterTranslationCommon)((IFurnitureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Furniture.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFurnitureInternal lhs,
            IFurnitureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FurnitureSetterTranslationCommon)((IFurnitureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Furniture DeepCopy(
            this IFurnitureGetter item,
            Furniture.TranslationMask? copyMask = null)
        {
            return ((FurnitureSetterTranslationCommon)((IFurnitureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Furniture DeepCopy(
            this IFurnitureGetter item,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? copyMask = null)
        {
            return ((FurnitureSetterTranslationCommon)((IFurnitureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Furniture DeepCopy(
            this IFurnitureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FurnitureSetterTranslationCommon)((IFurnitureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFurnitureInternal item,
            XElement node,
            Furniture.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IFurnitureInternal item,
            XElement node,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Furniture.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IFurnitureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((FurnitureSetterCommon)((IFurnitureGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFurnitureInternal item,
            string path,
            Furniture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFurnitureInternal item,
            string path,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFurnitureInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Furniture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IFurnitureInternal item,
            Stream stream,
            Furniture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFurnitureInternal item,
            Stream stream,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IFurnitureInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Furniture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IFurnitureInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IFurnitureInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FurnitureSetterCommon)((IFurnitureGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Furniture_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        Name = 8,
        Model = 9,
        Destructible = 10,
        Keywords = 11,
        Unknown = 12,
        Flags = 13,
        InteractionKeyword = 14,
        WorkbenchData = 15,
        AssociatedSpell = 16,
        Markers = 17,
        ModelFilename = 18,
    }
    #endregion

    #region Registration
    public partial class Furniture_Registration : ILoquiRegistration
    {
        public static readonly Furniture_Registration Instance = new Furniture_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 192,
            version: 0);

        public const string GUID = "d259f939-c92a-48d0-aad5-2d58e712b4f6";

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 19;

        public static readonly Type MaskType = typeof(Furniture.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Furniture.ErrorMask);

        public static readonly Type ClassType = typeof(Furniture);

        public static readonly Type GetterType = typeof(IFurnitureGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFurniture);

        public static readonly Type? InternalSetterType = typeof(IFurnitureInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Furniture";

        public const string Name = "Furniture";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VIRTUALMACHINEADAPTER":
                    return (ushort)Furniture_FieldIndex.VirtualMachineAdapter;
                case "OBJECTBOUNDS":
                    return (ushort)Furniture_FieldIndex.ObjectBounds;
                case "NAME":
                    return (ushort)Furniture_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Furniture_FieldIndex.Model;
                case "DESTRUCTIBLE":
                    return (ushort)Furniture_FieldIndex.Destructible;
                case "KEYWORDS":
                    return (ushort)Furniture_FieldIndex.Keywords;
                case "UNKNOWN":
                    return (ushort)Furniture_FieldIndex.Unknown;
                case "FLAGS":
                    return (ushort)Furniture_FieldIndex.Flags;
                case "INTERACTIONKEYWORD":
                    return (ushort)Furniture_FieldIndex.InteractionKeyword;
                case "WORKBENCHDATA":
                    return (ushort)Furniture_FieldIndex.WorkbenchData;
                case "ASSOCIATEDSPELL":
                    return (ushort)Furniture_FieldIndex.AssociatedSpell;
                case "MARKERS":
                    return (ushort)Furniture_FieldIndex.Markers;
                case "MODELFILENAME":
                    return (ushort)Furniture_FieldIndex.ModelFilename;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
            switch (enu)
            {
                case Furniture_FieldIndex.Keywords:
                case Furniture_FieldIndex.Markers:
                    return true;
                case Furniture_FieldIndex.VirtualMachineAdapter:
                case Furniture_FieldIndex.ObjectBounds:
                case Furniture_FieldIndex.Name:
                case Furniture_FieldIndex.Model:
                case Furniture_FieldIndex.Destructible:
                case Furniture_FieldIndex.Unknown:
                case Furniture_FieldIndex.Flags:
                case Furniture_FieldIndex.InteractionKeyword:
                case Furniture_FieldIndex.WorkbenchData:
                case Furniture_FieldIndex.AssociatedSpell:
                case Furniture_FieldIndex.ModelFilename:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
            switch (enu)
            {
                case Furniture_FieldIndex.VirtualMachineAdapter:
                case Furniture_FieldIndex.ObjectBounds:
                case Furniture_FieldIndex.Model:
                case Furniture_FieldIndex.Destructible:
                case Furniture_FieldIndex.WorkbenchData:
                case Furniture_FieldIndex.Markers:
                    return true;
                case Furniture_FieldIndex.Name:
                case Furniture_FieldIndex.Keywords:
                case Furniture_FieldIndex.Unknown:
                case Furniture_FieldIndex.Flags:
                case Furniture_FieldIndex.InteractionKeyword:
                case Furniture_FieldIndex.AssociatedSpell:
                case Furniture_FieldIndex.ModelFilename:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
            switch (enu)
            {
                case Furniture_FieldIndex.VirtualMachineAdapter:
                case Furniture_FieldIndex.ObjectBounds:
                case Furniture_FieldIndex.Name:
                case Furniture_FieldIndex.Model:
                case Furniture_FieldIndex.Destructible:
                case Furniture_FieldIndex.Keywords:
                case Furniture_FieldIndex.Unknown:
                case Furniture_FieldIndex.Flags:
                case Furniture_FieldIndex.InteractionKeyword:
                case Furniture_FieldIndex.WorkbenchData:
                case Furniture_FieldIndex.AssociatedSpell:
                case Furniture_FieldIndex.Markers:
                case Furniture_FieldIndex.ModelFilename:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
            switch (enu)
            {
                case Furniture_FieldIndex.VirtualMachineAdapter:
                    return "VirtualMachineAdapter";
                case Furniture_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case Furniture_FieldIndex.Name:
                    return "Name";
                case Furniture_FieldIndex.Model:
                    return "Model";
                case Furniture_FieldIndex.Destructible:
                    return "Destructible";
                case Furniture_FieldIndex.Keywords:
                    return "Keywords";
                case Furniture_FieldIndex.Unknown:
                    return "Unknown";
                case Furniture_FieldIndex.Flags:
                    return "Flags";
                case Furniture_FieldIndex.InteractionKeyword:
                    return "InteractionKeyword";
                case Furniture_FieldIndex.WorkbenchData:
                    return "WorkbenchData";
                case Furniture_FieldIndex.AssociatedSpell:
                    return "AssociatedSpell";
                case Furniture_FieldIndex.Markers:
                    return "Markers";
                case Furniture_FieldIndex.ModelFilename:
                    return "ModelFilename";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
            switch (enu)
            {
                case Furniture_FieldIndex.VirtualMachineAdapter:
                case Furniture_FieldIndex.ObjectBounds:
                case Furniture_FieldIndex.Name:
                case Furniture_FieldIndex.Model:
                case Furniture_FieldIndex.Destructible:
                case Furniture_FieldIndex.Keywords:
                case Furniture_FieldIndex.Unknown:
                case Furniture_FieldIndex.Flags:
                case Furniture_FieldIndex.InteractionKeyword:
                case Furniture_FieldIndex.WorkbenchData:
                case Furniture_FieldIndex.AssociatedSpell:
                case Furniture_FieldIndex.Markers:
                case Furniture_FieldIndex.ModelFilename:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
            switch (enu)
            {
                case Furniture_FieldIndex.VirtualMachineAdapter:
                case Furniture_FieldIndex.ObjectBounds:
                case Furniture_FieldIndex.Name:
                case Furniture_FieldIndex.Model:
                case Furniture_FieldIndex.Destructible:
                case Furniture_FieldIndex.Keywords:
                case Furniture_FieldIndex.Unknown:
                case Furniture_FieldIndex.Flags:
                case Furniture_FieldIndex.InteractionKeyword:
                case Furniture_FieldIndex.WorkbenchData:
                case Furniture_FieldIndex.AssociatedSpell:
                case Furniture_FieldIndex.Markers:
                case Furniture_FieldIndex.ModelFilename:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Furniture_FieldIndex enu = (Furniture_FieldIndex)index;
            switch (enu)
            {
                case Furniture_FieldIndex.VirtualMachineAdapter:
                    return typeof(VirtualMachineAdapter);
                case Furniture_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case Furniture_FieldIndex.Name:
                    return typeof(TranslatedString);
                case Furniture_FieldIndex.Model:
                    return typeof(Model);
                case Furniture_FieldIndex.Destructible:
                    return typeof(Destructible);
                case Furniture_FieldIndex.Keywords:
                    return typeof(ExtendedList<IFormLink<Keyword>>);
                case Furniture_FieldIndex.Unknown:
                    return typeof(Byte[]);
                case Furniture_FieldIndex.Flags:
                    return typeof(Furniture.Flag);
                case Furniture_FieldIndex.InteractionKeyword:
                    return typeof(FormLinkNullable<Keyword>);
                case Furniture_FieldIndex.WorkbenchData:
                    return typeof(WorkbenchData);
                case Furniture_FieldIndex.AssociatedSpell:
                    return typeof(FormLinkNullable<Spell>);
                case Furniture_FieldIndex.Markers:
                    return typeof(ExtendedList<FurnitureMarker>);
                case Furniture_FieldIndex.ModelFilename:
                    return typeof(String);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(FurnitureXmlWriteTranslation);
        public static readonly RecordType FURN_HEADER = new RecordType("FURN");
        public static readonly RecordType VMAD_HEADER = new RecordType("VMAD");
        public static readonly RecordType OBND_HEADER = new RecordType("OBND");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType DEST_HEADER = new RecordType("DEST");
        public static readonly RecordType DSTD_HEADER = new RecordType("DSTD");
        public static readonly RecordType DMDL_HEADER = new RecordType("DMDL");
        public static readonly RecordType KWDA_HEADER = new RecordType("KWDA");
        public static readonly RecordType KSIZ_HEADER = new RecordType("KSIZ");
        public static readonly RecordType PNAM_HEADER = new RecordType("PNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType KNAM_HEADER = new RecordType("KNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType WBDT_HEADER = new RecordType("WBDT");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType FNPR_HEADER = new RecordType("FNPR");
        public static readonly RecordType XMRK_HEADER = new RecordType("XMRK");
        public static readonly RecordType TriggeringRecordType = FURN_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 13;
        public static readonly Type BinaryWriteTranslation = typeof(FurnitureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class FurnitureSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly FurnitureSetterCommon Instance = new FurnitureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFurnitureInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Name = default;
            item.Model = null;
            item.Destructible = null;
            item.Keywords = null;
            item.Unknown = default;
            item.Flags = default;
            item.InteractionKeyword = null;
            item.WorkbenchData = null;
            item.AssociatedSpell = null;
            item.Markers = null;
            item.ModelFilename = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IFurnitureInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFurnitureInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IFurnitureInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IFurnitureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    FurnitureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Furniture)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Furniture)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Furniture_Registration.FURN_HEADER;
        protected static void FillBinaryStructs(
            IFurnitureInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IFurnitureInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x44414D56: // VMAD
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.VirtualMachineAdapter);
                }
                case 0x444E424F: // OBND
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.ObjectBounds);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.Model);
                }
                case 0x54534544: // DEST
                case 0x44545344: // DSTD
                case 0x4C444D44: // DMDL
                {
                    item.Destructible = Mutagen.Bethesda.Skyrim.Destructible.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.Destructible);
                }
                case 0x5A49534B: // KSIZ
                {
                    var amount = BinaryPrimitives.ReadInt32LittleEndian(frame.ReadSubrecordFrame().Content);
                    item.Keywords = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Keyword>>.Instance.Parse(
                            frame: frame,
                            amount: amount,
                            triggeringRecord: Furniture_Registration.KWDA_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Keyword>>();
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.Keywords);
                }
                case 0x4D414E50: // PNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Unknown = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.Unknown);
                }
                case 0x4D414E46: // FNAM
                {
                    FurnitureBinaryCreateTranslation.FillBinaryFlagsCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.Flags);
                }
                case 0x4D414E4B: // KNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InteractionKeyword = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.InteractionKeyword);
                }
                case 0x4D414E4D: // MNAM
                {
                    FurnitureBinaryCreateTranslation.FillBinaryFlags2CustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed(null);
                }
                case 0x54444257: // WBDT
                {
                    item.WorkbenchData = Mutagen.Bethesda.Skyrim.WorkbenchData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.WorkbenchData);
                }
                case 0x314D414E: // NAM1
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AssociatedSpell = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.AssociatedSpell);
                }
                case 0x4D414E45: // ENAM
                {
                    FurnitureBinaryCreateTranslation.FillBinaryDisabledMarkersCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed(null);
                }
                case 0x52504E46: // FNPR
                {
                    FurnitureBinaryCreateTranslation.FillBinaryMarkersCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.Markers);
                }
                case 0x4B524D58: // XMRK
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ModelFilename = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.ModelFilename);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            IFurnitureInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IFurnitureInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Furniture)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Furniture)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class FurnitureCommon : SkyrimMajorRecordCommon
    {
        public new static readonly FurnitureCommon Instance = new FurnitureCommon();

        public Furniture.Mask<bool> GetEqualsMask(
            IFurnitureGetter item,
            IFurnitureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Furniture.Mask<bool>(false);
            ((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFurnitureGetter item,
            IFurnitureGetter rhs,
            Furniture.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Unknown = MemorySliceExt.Equal(item.Unknown, rhs.Unknown);
            ret.Flags = item.Flags == rhs.Flags;
            ret.InteractionKeyword = object.Equals(item.InteractionKeyword, rhs.InteractionKeyword);
            ret.WorkbenchData = EqualsMaskHelper.EqualsHelper(
                item.WorkbenchData,
                rhs.WorkbenchData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.AssociatedSpell = object.Equals(item.AssociatedSpell, rhs.AssociatedSpell);
            ret.Markers = item.Markers.CollectionEqualsHelper(
                rhs.Markers,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ModelFilename = string.Equals(item.ModelFilename, rhs.ModelFilename);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IFurnitureGetter item,
            string? name = null,
            Furniture.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IFurnitureGetter item,
            FileGeneration fg,
            string? name = null,
            Furniture.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Furniture =>");
            }
            else
            {
                fg.AppendLine($"{name} (Furniture) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IFurnitureGetter item,
            FileGeneration fg,
            Furniture.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible.TryGet(out var DestructibleItem))
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords.TryGet(out var KeywordsItem))
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Unknown ?? true)
                && item.Unknown.TryGet(out var UnknownItem))
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(UnknownItem)}");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.InteractionKeyword ?? true)
                && item.InteractionKeyword.TryGet(out var InteractionKeywordItem))
            {
                fg.AppendItem(InteractionKeywordItem, "InteractionKeyword");
            }
            if ((printMask?.WorkbenchData?.Overall ?? true)
                && item.WorkbenchData.TryGet(out var WorkbenchDataItem))
            {
                WorkbenchDataItem?.ToString(fg, "WorkbenchData");
            }
            if ((printMask?.AssociatedSpell ?? true)
                && item.AssociatedSpell.TryGet(out var AssociatedSpellItem))
            {
                fg.AppendItem(AssociatedSpellItem, "AssociatedSpell");
            }
            if ((printMask?.Markers?.Overall ?? true)
                && item.Markers.TryGet(out var MarkersItem))
            {
                fg.AppendLine("Markers =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in MarkersItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.ModelFilename ?? true)
                && item.ModelFilename.TryGet(out var ModelFilenameItem))
            {
                fg.AppendItem(ModelFilenameItem, "ModelFilename");
            }
        }
        
        public bool HasBeenSet(
            IFurnitureGetter item,
            Furniture.Mask<bool?> checkMask)
        {
            if (checkMask.VirtualMachineAdapter?.Overall.HasValue ?? false && checkMask.VirtualMachineAdapter.Overall.Value != (item.VirtualMachineAdapter != null)) return false;
            if (checkMask.VirtualMachineAdapter?.Specific != null && (item.VirtualMachineAdapter == null || !item.VirtualMachineAdapter.HasBeenSet(checkMask.VirtualMachineAdapter.Specific))) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Destructible?.Overall.HasValue ?? false && checkMask.Destructible.Overall.Value != (item.Destructible != null)) return false;
            if (checkMask.Destructible?.Specific != null && (item.Destructible == null || !item.Destructible.HasBeenSet(checkMask.Destructible.Specific))) return false;
            if (checkMask.Keywords?.Overall.HasValue ?? false && checkMask.Keywords!.Overall.Value != (item.Keywords != null)) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != (item.Unknown != null)) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != (item.Flags != null)) return false;
            if (checkMask.InteractionKeyword.HasValue && checkMask.InteractionKeyword.Value != (item.InteractionKeyword.FormKey != null)) return false;
            if (checkMask.WorkbenchData?.Overall.HasValue ?? false && checkMask.WorkbenchData.Overall.Value != (item.WorkbenchData != null)) return false;
            if (checkMask.WorkbenchData?.Specific != null && (item.WorkbenchData == null || !item.WorkbenchData.HasBeenSet(checkMask.WorkbenchData.Specific))) return false;
            if (checkMask.AssociatedSpell.HasValue && checkMask.AssociatedSpell.Value != (item.AssociatedSpell.FormKey != null)) return false;
            if (checkMask.Markers?.Overall.HasValue ?? false && checkMask.Markers!.Overall.Value != (item.Markers != null)) return false;
            if (checkMask.ModelFilename.HasValue && checkMask.ModelFilename.Value != (item.ModelFilename != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IFurnitureGetter item,
            Furniture.Mask<bool> mask)
        {
            var itemVirtualMachineAdapter = item.VirtualMachineAdapter;
            mask.VirtualMachineAdapter = new MaskItem<bool, VirtualMachineAdapter.Mask<bool>?>(itemVirtualMachineAdapter != null, itemVirtualMachineAdapter?.GetHasBeenSetMask());
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds.Mask<bool>?>(true, item.ObjectBounds?.GetHasBeenSetMask());
            mask.Name = (item.Name != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            var itemDestructible = item.Destructible;
            mask.Destructible = new MaskItem<bool, Destructible.Mask<bool>?>(itemDestructible != null, itemDestructible?.GetHasBeenSetMask());
            mask.Keywords = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Keywords != null), default);
            mask.Unknown = (item.Unknown != null);
            mask.Flags = (item.Flags != null);
            mask.InteractionKeyword = (item.InteractionKeyword.FormKey != null);
            var itemWorkbenchData = item.WorkbenchData;
            mask.WorkbenchData = new MaskItem<bool, WorkbenchData.Mask<bool>?>(itemWorkbenchData != null, itemWorkbenchData?.GetHasBeenSetMask());
            mask.AssociatedSpell = (item.AssociatedSpell.FormKey != null);
            if (item.Markers.TryGet(out var MarkersItem))
            {
                mask.Markers = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, FurnitureMarker.Mask<bool>?>>?>(true, MarkersItem.WithIndex().Select((i) => new MaskItemIndexed<bool, FurnitureMarker.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            mask.ModelFilename = (item.ModelFilename != null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Furniture_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Furniture_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Furniture_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Furniture_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Furniture_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Furniture_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Furniture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Furniture_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Furniture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Furniture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Furniture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Furniture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFurnitureGetter? lhs,
            IFurnitureGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!object.Equals(lhs.Destructible, rhs.Destructible)) return false;
            if (!lhs.Keywords.SequenceEqual(rhs.Keywords)) return false;
            if (!MemorySliceExt.Equal(lhs.Unknown, rhs.Unknown)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.InteractionKeyword.Equals(rhs.InteractionKeyword)) return false;
            if (!object.Equals(lhs.WorkbenchData, rhs.WorkbenchData)) return false;
            if (!lhs.AssociatedSpell.Equals(rhs.AssociatedSpell)) return false;
            if (!lhs.Markers.SequenceEqual(rhs.Markers)) return false;
            if (!string.Equals(lhs.ModelFilename, rhs.ModelFilename)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IFurnitureGetter?)lhs,
                rhs: rhs as IFurnitureGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IFurnitureGetter?)lhs,
                rhs: rhs as IFurnitureGetter);
        }
        
        public virtual int GetHashCode(IFurnitureGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Destructible.TryGet(out var Destructibleitem))
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.Keywords);
            if (item.Unknown.TryGet(out var UnknownItem))
            {
                hash.Add(UnknownItem);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            if (item.InteractionKeyword.TryGet(out var InteractionKeyworditem))
            {
                hash.Add(InteractionKeyworditem);
            }
            if (item.WorkbenchData.TryGet(out var WorkbenchDataitem))
            {
                hash.Add(WorkbenchDataitem);
            }
            if (item.AssociatedSpell.TryGet(out var AssociatedSpellitem))
            {
                hash.Add(AssociatedSpellitem);
            }
            hash.Add(item.Markers);
            if (item.ModelFilename.TryGet(out var ModelFilenameitem))
            {
                hash.Add(ModelFilenameitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IFurnitureGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFurnitureGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Furniture.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IFurnitureGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is ILinkedFormKeyContainer VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Destructible.TryGet(out var DestructibleItems))
            {
                foreach (var item in DestructibleItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Keywords.TryGet(out var KeywordsItem))
            {
                foreach (var item in KeywordsItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.InteractionKeyword.FormKey.TryGet(out var InteractionKeywordKey))
            {
                yield return InteractionKeywordKey;
            }
            if (obj.AssociatedSpell.FormKey.TryGet(out var AssociatedSpellKey))
            {
                yield return AssociatedSpellKey;
            }
            if (obj.Markers.TryGet(out var MarkersItem))
            {
                foreach (var item in MarkersItem.SelectMany(f => f.LinkFormKeys))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(IFurnitureGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Furniture obj, Furniture rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Furniture(getNextFormKey());
            ret.DeepCopyIn((Furniture)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Furniture)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class FurnitureSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly FurnitureSetterTranslationCommon Instance = new FurnitureSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IFurnitureInternal item,
            IFurnitureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IFurniture item,
            IFurnitureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Furniture_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible.TryGet(out var rhsDestructible))
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLink<Keyword>)new FormLink<Keyword>(r.FormKey))
                            .ToExtendedList<IFormLink<Keyword>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Unknown) ?? true))
            {
                if(rhs.Unknown.TryGet(out var Unknownrhs))
                {
                    item.Unknown = Unknownrhs.ToArray();
                }
                else
                {
                    item.Unknown = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.InteractionKeyword) ?? true))
            {
                item.InteractionKeyword = rhs.InteractionKeyword.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.WorkbenchData) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.WorkbenchData);
                try
                {
                    if(rhs.WorkbenchData.TryGet(out var rhsWorkbenchData))
                    {
                        item.WorkbenchData = rhsWorkbenchData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Furniture_FieldIndex.WorkbenchData));
                    }
                    else
                    {
                        item.WorkbenchData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.AssociatedSpell) ?? true))
            {
                item.AssociatedSpell = rhs.AssociatedSpell.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.Markers) ?? true))
            {
                errorMask?.PushIndex((int)Furniture_FieldIndex.Markers);
                try
                {
                    if ((rhs.Markers != null))
                    {
                        item.Markers = 
                            rhs.Markers
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<FurnitureMarker>();
                    }
                    else
                    {
                        item.Markers = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Furniture_FieldIndex.ModelFilename) ?? true))
            {
                item.ModelFilename = rhs.ModelFilename;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFurnitureInternal)item,
                rhs: (IFurnitureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFurniture)item,
                rhs: (IFurnitureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFurnitureInternal)item,
                rhs: (IFurnitureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IFurniture)item,
                rhs: (IFurnitureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Furniture DeepCopy(
            IFurnitureGetter item,
            Furniture.TranslationMask? copyMask = null)
        {
            Furniture ret = (Furniture)((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Furniture DeepCopy(
            IFurnitureGetter item,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? copyMask = null)
        {
            Furniture ret = (Furniture)((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Furniture DeepCopy(
            IFurnitureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Furniture ret = (Furniture)((FurnitureCommon)((IFurnitureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Furniture
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Furniture_Registration.Instance;
        public new static Furniture_Registration Registration => Furniture_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FurnitureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FurnitureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FurnitureSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FurnitureXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static FurnitureXmlWriteTranslation Instance = new FurnitureXmlWriteTranslation();

        public static void WriteToNodeXml(
            IFurnitureGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.VirtualMachineAdapter != null)
                && (translationMask?.GetShouldTranslate((int)Furniture_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
                {
                    ((VirtualMachineAdapterXmlWriteTranslation)((IXmlItem)VirtualMachineAdapterItem).XmlWriteTranslator).Write(
                        item: VirtualMachineAdapterItem,
                        node: node,
                        name: nameof(item.VirtualMachineAdapter),
                        fieldIndex: (int)Furniture_FieldIndex.VirtualMachineAdapter,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Furniture_FieldIndex.VirtualMachineAdapter));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Furniture_FieldIndex.ObjectBounds) ?? true))
            {
                var ObjectBoundsItem = item.ObjectBounds;
                ((ObjectBoundsXmlWriteTranslation)((IXmlItem)ObjectBoundsItem).XmlWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    node: node,
                    name: nameof(item.ObjectBounds),
                    fieldIndex: (int)Furniture_FieldIndex.ObjectBounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Furniture_FieldIndex.ObjectBounds));
            }
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Furniture_FieldIndex.Name) ?? true))
            {
                Mutagen.Bethesda.Xml.TranslatedStringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Furniture_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Furniture_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Furniture_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Furniture_FieldIndex.Model));
                }
            }
            if ((item.Destructible != null)
                && (translationMask?.GetShouldTranslate((int)Furniture_FieldIndex.Destructible) ?? true))
            {
                if (item.Destructible.TryGet(out var DestructibleItem))
                {
                    ((DestructibleXmlWriteTranslation)((IXmlItem)DestructibleItem).XmlWriteTranslator).Write(
                        item: DestructibleItem,
                        node: node,
                        name: nameof(item.Destructible),
                        fieldIndex: (int)Furniture_FieldIndex.Destructible,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Furniture_FieldIndex.Destructible));
                }
            }
            if ((item.Keywords != null)
                && (translationMask?.GetShouldTranslate((int)Furniture_FieldIndex.Keywords) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Keywords),
                    item: item.Keywords,
                    fieldIndex: (int)Furniture_FieldIndex.Keywords,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Furniture_FieldIndex.Keywords),
                    transl: (XElement subNode, IFormLinkGetter<IKeywordGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Unknown != null)
                && (translationMask?.GetShouldTranslate((int)Furniture_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown.Value,
                    fieldIndex: (int)Furniture_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((item.Flags != null)
                && (translationMask?.GetShouldTranslate((int)Furniture_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Furniture.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Furniture_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((item.InteractionKeyword.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Furniture_FieldIndex.InteractionKeyword) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.InteractionKeyword),
                    item: item.InteractionKeyword.FormKey.Value,
                    fieldIndex: (int)Furniture_FieldIndex.InteractionKeyword,
                    errorMask: errorMask);
            }
            if ((item.WorkbenchData != null)
                && (translationMask?.GetShouldTranslate((int)Furniture_FieldIndex.WorkbenchData) ?? true))
            {
                if (item.WorkbenchData.TryGet(out var WorkbenchDataItem))
                {
                    ((WorkbenchDataXmlWriteTranslation)((IXmlItem)WorkbenchDataItem).XmlWriteTranslator).Write(
                        item: WorkbenchDataItem,
                        node: node,
                        name: nameof(item.WorkbenchData),
                        fieldIndex: (int)Furniture_FieldIndex.WorkbenchData,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Furniture_FieldIndex.WorkbenchData));
                }
            }
            if ((item.AssociatedSpell.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Furniture_FieldIndex.AssociatedSpell) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AssociatedSpell),
                    item: item.AssociatedSpell.FormKey.Value,
                    fieldIndex: (int)Furniture_FieldIndex.AssociatedSpell,
                    errorMask: errorMask);
            }
            if ((item.Markers != null)
                && (translationMask?.GetShouldTranslate((int)Furniture_FieldIndex.Markers) ?? true))
            {
                ListXmlTranslation<IFurnitureMarkerGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Markers),
                    item: item.Markers,
                    fieldIndex: (int)Furniture_FieldIndex.Markers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Furniture_FieldIndex.Markers),
                    transl: (XElement subNode, IFurnitureMarkerGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((FurnitureMarkerXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.ModelFilename != null)
                && (translationMask?.GetShouldTranslate((int)Furniture_FieldIndex.ModelFilename) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ModelFilename),
                    item: item.ModelFilename,
                    fieldIndex: (int)Furniture_FieldIndex.ModelFilename,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IFurnitureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Furniture");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Furniture");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFurnitureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFurnitureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IFurnitureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class FurnitureXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static FurnitureXmlCreateTranslation Instance = new FurnitureXmlCreateTranslation();

        public static void FillPublicXml(
            IFurnitureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FurnitureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IFurnitureInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "VirtualMachineAdapter":
                    errorMask?.PushIndex((int)Furniture_FieldIndex.VirtualMachineAdapter);
                    try
                    {
                        item.VirtualMachineAdapter = LoquiXmlTranslation<VirtualMachineAdapter>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Furniture_FieldIndex.VirtualMachineAdapter));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ObjectBounds":
                    errorMask?.PushIndex((int)Furniture_FieldIndex.ObjectBounds);
                    try
                    {
                        item.ObjectBounds = LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Furniture_FieldIndex.ObjectBounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    errorMask?.PushIndex((int)Furniture_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)Furniture_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Furniture_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Destructible":
                    errorMask?.PushIndex((int)Furniture_FieldIndex.Destructible);
                    try
                    {
                        item.Destructible = LoquiXmlTranslation<Destructible>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Furniture_FieldIndex.Destructible));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keywords":
                    errorMask?.PushIndex((int)Furniture_FieldIndex.Keywords);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Keyword>>.Instance.Parse(
                            node: node,
                            enumer: out var KeywordsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Keywords = KeywordsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Keywords = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)Furniture_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Furniture_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Furniture.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "InteractionKeyword":
                    errorMask?.PushIndex((int)Furniture_FieldIndex.InteractionKeyword);
                    try
                    {
                        item.InteractionKeyword = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WorkbenchData":
                    errorMask?.PushIndex((int)Furniture_FieldIndex.WorkbenchData);
                    try
                    {
                        item.WorkbenchData = LoquiXmlTranslation<WorkbenchData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Furniture_FieldIndex.WorkbenchData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AssociatedSpell":
                    errorMask?.PushIndex((int)Furniture_FieldIndex.AssociatedSpell);
                    try
                    {
                        item.AssociatedSpell = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Markers":
                    errorMask?.PushIndex((int)Furniture_FieldIndex.Markers);
                    try
                    {
                        if (ListXmlTranslation<FurnitureMarker>.Instance.Parse(
                            node: node,
                            enumer: out var MarkersItem,
                            transl: LoquiXmlTranslation<FurnitureMarker>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Markers = MarkersItem.ToExtendedList();
                        }
                        else
                        {
                            item.Markers = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ModelFilename":
                    errorMask?.PushIndex((int)Furniture_FieldIndex.ModelFilename);
                    try
                    {
                        item.ModelFilename = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class FurnitureXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IFurnitureGetter item,
            XElement node,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((FurnitureXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Furniture.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IFurnitureGetter item,
            string path,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IFurnitureGetter item,
            Stream stream,
            out Furniture.ErrorMask errorMask,
            Furniture.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FurnitureBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static FurnitureBinaryWriteTranslation Instance = new FurnitureBinaryWriteTranslation();

        static partial void WriteBinaryFlagsCustom(
            MutagenWriter writer,
            IFurnitureGetter item);

        public static void WriteBinaryFlags(
            MutagenWriter writer,
            IFurnitureGetter item)
        {
            WriteBinaryFlagsCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryFlags2Custom(
            MutagenWriter writer,
            IFurnitureGetter item);

        public static void WriteBinaryFlags2(
            MutagenWriter writer,
            IFurnitureGetter item)
        {
            WriteBinaryFlags2Custom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryDisabledMarkersCustom(
            MutagenWriter writer,
            IFurnitureGetter item);

        public static void WriteBinaryDisabledMarkers(
            MutagenWriter writer,
            IFurnitureGetter item)
        {
            WriteBinaryDisabledMarkersCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryMarkersCustom(
            MutagenWriter writer,
            IFurnitureGetter item);

        public static void WriteBinaryMarkers(
            MutagenWriter writer,
            IFurnitureGetter item)
        {
            WriteBinaryMarkersCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IFurnitureGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Furniture_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Destructible.TryGet(out var DestructibleItem))
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: Furniture_Registration.KSIZ_HEADER,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(Furniture_Registration.KWDA_HEADER),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown,
                header: recordTypeConverter.ConvertToCustom(Furniture_Registration.PNAM_HEADER));
            FurnitureBinaryWriteTranslation.WriteBinaryFlags(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InteractionKeyword,
                header: recordTypeConverter.ConvertToCustom(Furniture_Registration.KNAM_HEADER));
            FurnitureBinaryWriteTranslation.WriteBinaryFlags2(
                writer: writer,
                item: item);
            if (item.WorkbenchData.TryGet(out var WorkbenchDataItem))
            {
                ((WorkbenchDataBinaryWriteTranslation)((IBinaryItem)WorkbenchDataItem).BinaryWriteTranslator).Write(
                    item: WorkbenchDataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AssociatedSpell,
                header: recordTypeConverter.ConvertToCustom(Furniture_Registration.NAM1_HEADER));
            FurnitureBinaryWriteTranslation.WriteBinaryDisabledMarkers(
                writer: writer,
                item: item);
            FurnitureBinaryWriteTranslation.WriteBinaryMarkers(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ModelFilename,
                header: recordTypeConverter.ConvertToCustom(Furniture_Registration.XMRK_HEADER),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IFurnitureGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(Furniture_Registration.FURN_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFurnitureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFurnitureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IFurnitureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class FurnitureBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static FurnitureBinaryCreateTranslation Instance = new FurnitureBinaryCreateTranslation();

        static partial void FillBinaryFlagsCustom(
            MutagenFrame frame,
            IFurnitureInternal item);

        public static void FillBinaryFlagsCustomPublic(
            MutagenFrame frame,
            IFurnitureInternal item)
        {
            FillBinaryFlagsCustom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryFlags2Custom(
            MutagenFrame frame,
            IFurnitureInternal item);

        public static void FillBinaryFlags2CustomPublic(
            MutagenFrame frame,
            IFurnitureInternal item)
        {
            FillBinaryFlags2Custom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryDisabledMarkersCustom(
            MutagenFrame frame,
            IFurnitureInternal item);

        public static void FillBinaryDisabledMarkersCustomPublic(
            MutagenFrame frame,
            IFurnitureInternal item)
        {
            FillBinaryDisabledMarkersCustom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryMarkersCustom(
            MutagenFrame frame,
            IFurnitureInternal item);

        public static void FillBinaryMarkersCustomPublic(
            MutagenFrame frame,
            IFurnitureInternal item)
        {
            FillBinaryMarkersCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class FurnitureBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class FurnitureBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IFurnitureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Furniture_Registration.Instance;
        public new static Furniture_Registration Registration => Furniture_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FurnitureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FurnitureSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IFurnitureGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => FurnitureCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => FurnitureCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FurnitureCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FurnitureCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => FurnitureXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((FurnitureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FurnitureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((FurnitureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Furniture.MajorFlag MajorFlags => (Furniture.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new BinaryMemoryReadStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min)), _package) : default;
        public bool VirtualMachineAdapter_IsSet => _VirtualMachineAdapterLocation.HasValue;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new BinaryMemoryReadStream(_data.Slice(_ObjectBoundsLocation!.Value.Min)), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public TranslatedString? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        public IModelGetter? Model { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        #region Unknown
        private int? _UnknownLocation;
        public ReadOnlyMemorySlice<Byte>? Unknown => _UnknownLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _UnknownLocation.Value, _package.MetaData.Constants).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Flags
        partial void FlagsCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);
        public Furniture.Flag? Flags => GetFlagsCustom();
        #endregion
        #region InteractionKeyword
        private int? _InteractionKeywordLocation;
        public bool InteractionKeyword_IsSet => _InteractionKeywordLocation.HasValue;
        public IFormLinkNullableGetter<IKeywordGetter> InteractionKeyword => _InteractionKeywordLocation.HasValue ? new FormLinkNullable<IKeywordGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _InteractionKeywordLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IKeywordGetter>.Null;
        #endregion
        #region Flags2
        partial void Flags2CustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region WorkbenchData
        private RangeInt32? _WorkbenchDataLocation;
        public IWorkbenchDataGetter? WorkbenchData => _WorkbenchDataLocation.HasValue ? WorkbenchDataBinaryOverlay.WorkbenchDataFactory(new BinaryMemoryReadStream(_data.Slice(_WorkbenchDataLocation!.Value.Min)), _package) : default;
        public bool WorkbenchData_IsSet => _WorkbenchDataLocation.HasValue;
        #endregion
        #region AssociatedSpell
        private int? _AssociatedSpellLocation;
        public bool AssociatedSpell_IsSet => _AssociatedSpellLocation.HasValue;
        public IFormLinkNullableGetter<ISpellGetter> AssociatedSpell => _AssociatedSpellLocation.HasValue ? new FormLinkNullable<ISpellGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _AssociatedSpellLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ISpellGetter>.Null;
        #endregion
        #region DisabledMarkers
        partial void DisabledMarkersCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region Markers
        partial void MarkersCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        #region ModelFilename
        private int? _ModelFilenameLocation;
        public String? ModelFilename => _ModelFilenameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _ModelFilenameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        protected FurnitureBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static FurnitureBinaryOverlay FurnitureFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.MetaData.Constants);
            var ret = new FurnitureBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static FurnitureBinaryOverlay FurnitureFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return FurnitureFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x44414D56: // VMAD
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.VirtualMachineAdapter);
                }
                case 0x444E424F: // OBND
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.ObjectBounds);
                }
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.Model);
                }
                case 0x54534544: // DEST
                case 0x44545344: // DSTD
                case 0x4C444D44: // DMDL
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.Destructible);
                }
                case 0x5A49534B: // KSIZ
                {
                    var count = BinaryPrimitives.ReadUInt32LittleEndian(_package.MetaData.Constants.ReadSubrecordFrame(stream).Content);
                    var subMeta = _package.MetaData.Constants.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Keywords = BinaryOverlayList<IFormLinkGetter<IKeywordGetter>>.FactoryByCount(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 0x4,
                        count: count,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.Keywords);
                }
                case 0x4D414E50: // PNAM
                {
                    _UnknownLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.Unknown);
                }
                case 0x4D414E46: // FNAM
                {
                    FlagsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.Flags);
                }
                case 0x4D414E4B: // KNAM
                {
                    _InteractionKeywordLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.InteractionKeyword);
                }
                case 0x4D414E4D: // MNAM
                {
                    Flags2CustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(null);
                }
                case 0x54444257: // WBDT
                {
                    _WorkbenchDataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.WorkbenchData);
                }
                case 0x314D414E: // NAM1
                {
                    _AssociatedSpellLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.AssociatedSpell);
                }
                case 0x4D414E45: // ENAM
                {
                    DisabledMarkersCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(null);
                }
                case 0x52504E46: // FNPR
                {
                    MarkersCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.Markers);
                }
                case 0x4B524D58: // XMRK
                {
                    _ModelFilenameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Furniture_FieldIndex.ModelFilename);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            FurnitureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

