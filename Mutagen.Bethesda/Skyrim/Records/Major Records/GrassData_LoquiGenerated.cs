/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class GrassData :
        IGrassData,
        ILoquiObjectSetter<GrassData>,
        IEquatable<GrassData>,
        IEqualsMask
    {
        #region Ctor
        public GrassData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Density
        public Byte Density { get; set; } = default;
        #endregion
        #region MinSlope
        public Byte MinSlope { get; set; } = default;
        #endregion
        #region MaxSlope
        public Byte MaxSlope { get; set; } = default;
        #endregion
        #region Unknown
        public Byte Unknown { get; set; } = default;
        #endregion
        #region UnitsFromWater
        public UInt16 UnitsFromWater { get; set; } = default;
        #endregion
        #region Unknown2
        public UInt16 Unknown2 { get; set; } = default;
        #endregion
        #region UnitsFromWaterType
        public GrassData.UnitsFromWaterTypeEnum UnitsFromWaterType { get; set; } = default;
        #endregion
        #region PositionRange
        public Single PositionRange { get; set; } = default;
        #endregion
        #region HeightRange
        public Single HeightRange { get; set; } = default;
        #endregion
        #region ColorRange
        public Single ColorRange { get; set; } = default;
        #endregion
        #region WavePeriod
        public Single WavePeriod { get; set; } = default;
        #endregion
        #region Flags
        public GrassData.Flag Flags { get; set; } = default;
        #endregion
        #region Unknown3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _Unknown3 = new byte[3];
        public Byte[] Unknown3
        {
            get => _Unknown3;
            set => this._Unknown3 = value ?? new byte[3];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IGrassDataGetter.Unknown3 => this.Unknown3;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            GrassDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IGrassDataGetter rhs)) return false;
            return ((GrassDataCommon)((IGrassDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(GrassData obj)
        {
            return ((GrassDataCommon)((IGrassDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((GrassDataCommon)((IGrassDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => GrassDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((GrassDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static GrassData CreateFromXml(
            XElement node,
            GrassData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static GrassData CreateFromXml(
            XElement node,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = GrassData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static GrassData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new GrassData();
            ((GrassDataSetterCommon)((IGrassDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static GrassData CreateFromXml(
            string path,
            GrassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static GrassData CreateFromXml(
            string path,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static GrassData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            GrassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static GrassData CreateFromXml(
            Stream stream,
            GrassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static GrassData CreateFromXml(
            Stream stream,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static GrassData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            GrassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Density = initialValue;
                this.MinSlope = initialValue;
                this.MaxSlope = initialValue;
                this.Unknown = initialValue;
                this.UnitsFromWater = initialValue;
                this.Unknown2 = initialValue;
                this.UnitsFromWaterType = initialValue;
                this.PositionRange = initialValue;
                this.HeightRange = initialValue;
                this.ColorRange = initialValue;
                this.WavePeriod = initialValue;
                this.Flags = initialValue;
                this.Unknown3 = initialValue;
            }

            public Mask(
                TItem Density,
                TItem MinSlope,
                TItem MaxSlope,
                TItem Unknown,
                TItem UnitsFromWater,
                TItem Unknown2,
                TItem UnitsFromWaterType,
                TItem PositionRange,
                TItem HeightRange,
                TItem ColorRange,
                TItem WavePeriod,
                TItem Flags,
                TItem Unknown3)
            {
                this.Density = Density;
                this.MinSlope = MinSlope;
                this.MaxSlope = MaxSlope;
                this.Unknown = Unknown;
                this.UnitsFromWater = UnitsFromWater;
                this.Unknown2 = Unknown2;
                this.UnitsFromWaterType = UnitsFromWaterType;
                this.PositionRange = PositionRange;
                this.HeightRange = HeightRange;
                this.ColorRange = ColorRange;
                this.WavePeriod = WavePeriod;
                this.Flags = Flags;
                this.Unknown3 = Unknown3;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Density;
            public TItem MinSlope;
            public TItem MaxSlope;
            public TItem Unknown;
            public TItem UnitsFromWater;
            public TItem Unknown2;
            public TItem UnitsFromWaterType;
            public TItem PositionRange;
            public TItem HeightRange;
            public TItem ColorRange;
            public TItem WavePeriod;
            public TItem Flags;
            public TItem Unknown3;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Density, rhs.Density)) return false;
                if (!object.Equals(this.MinSlope, rhs.MinSlope)) return false;
                if (!object.Equals(this.MaxSlope, rhs.MaxSlope)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.UnitsFromWater, rhs.UnitsFromWater)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.UnitsFromWaterType, rhs.UnitsFromWaterType)) return false;
                if (!object.Equals(this.PositionRange, rhs.PositionRange)) return false;
                if (!object.Equals(this.HeightRange, rhs.HeightRange)) return false;
                if (!object.Equals(this.ColorRange, rhs.ColorRange)) return false;
                if (!object.Equals(this.WavePeriod, rhs.WavePeriod)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Density);
                hash.Add(this.MinSlope);
                hash.Add(this.MaxSlope);
                hash.Add(this.Unknown);
                hash.Add(this.UnitsFromWater);
                hash.Add(this.Unknown2);
                hash.Add(this.UnitsFromWaterType);
                hash.Add(this.PositionRange);
                hash.Add(this.HeightRange);
                hash.Add(this.ColorRange);
                hash.Add(this.WavePeriod);
                hash.Add(this.Flags);
                hash.Add(this.Unknown3);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Density)) return false;
                if (!eval(this.MinSlope)) return false;
                if (!eval(this.MaxSlope)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.UnitsFromWater)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.UnitsFromWaterType)) return false;
                if (!eval(this.PositionRange)) return false;
                if (!eval(this.HeightRange)) return false;
                if (!eval(this.ColorRange)) return false;
                if (!eval(this.WavePeriod)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Unknown3)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Density)) return true;
                if (eval(this.MinSlope)) return true;
                if (eval(this.MaxSlope)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.UnitsFromWater)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.UnitsFromWaterType)) return true;
                if (eval(this.PositionRange)) return true;
                if (eval(this.HeightRange)) return true;
                if (eval(this.ColorRange)) return true;
                if (eval(this.WavePeriod)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Unknown3)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new GrassData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Density = eval(this.Density);
                obj.MinSlope = eval(this.MinSlope);
                obj.MaxSlope = eval(this.MaxSlope);
                obj.Unknown = eval(this.Unknown);
                obj.UnitsFromWater = eval(this.UnitsFromWater);
                obj.Unknown2 = eval(this.Unknown2);
                obj.UnitsFromWaterType = eval(this.UnitsFromWaterType);
                obj.PositionRange = eval(this.PositionRange);
                obj.HeightRange = eval(this.HeightRange);
                obj.ColorRange = eval(this.ColorRange);
                obj.WavePeriod = eval(this.WavePeriod);
                obj.Flags = eval(this.Flags);
                obj.Unknown3 = eval(this.Unknown3);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(GrassData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, GrassData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(GrassData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Density ?? true)
                    {
                        fg.AppendItem(Density, "Density");
                    }
                    if (printMask?.MinSlope ?? true)
                    {
                        fg.AppendItem(MinSlope, "MinSlope");
                    }
                    if (printMask?.MaxSlope ?? true)
                    {
                        fg.AppendItem(MaxSlope, "MaxSlope");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.UnitsFromWater ?? true)
                    {
                        fg.AppendItem(UnitsFromWater, "UnitsFromWater");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.UnitsFromWaterType ?? true)
                    {
                        fg.AppendItem(UnitsFromWaterType, "UnitsFromWaterType");
                    }
                    if (printMask?.PositionRange ?? true)
                    {
                        fg.AppendItem(PositionRange, "PositionRange");
                    }
                    if (printMask?.HeightRange ?? true)
                    {
                        fg.AppendItem(HeightRange, "HeightRange");
                    }
                    if (printMask?.ColorRange ?? true)
                    {
                        fg.AppendItem(ColorRange, "ColorRange");
                    }
                    if (printMask?.WavePeriod ?? true)
                    {
                        fg.AppendItem(WavePeriod, "WavePeriod");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        fg.AppendItem(Unknown3, "Unknown3");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Density;
            public Exception? MinSlope;
            public Exception? MaxSlope;
            public Exception? Unknown;
            public Exception? UnitsFromWater;
            public Exception? Unknown2;
            public Exception? UnitsFromWaterType;
            public Exception? PositionRange;
            public Exception? HeightRange;
            public Exception? ColorRange;
            public Exception? WavePeriod;
            public Exception? Flags;
            public Exception? Unknown3;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                GrassData_FieldIndex enu = (GrassData_FieldIndex)index;
                switch (enu)
                {
                    case GrassData_FieldIndex.Density:
                        return Density;
                    case GrassData_FieldIndex.MinSlope:
                        return MinSlope;
                    case GrassData_FieldIndex.MaxSlope:
                        return MaxSlope;
                    case GrassData_FieldIndex.Unknown:
                        return Unknown;
                    case GrassData_FieldIndex.UnitsFromWater:
                        return UnitsFromWater;
                    case GrassData_FieldIndex.Unknown2:
                        return Unknown2;
                    case GrassData_FieldIndex.UnitsFromWaterType:
                        return UnitsFromWaterType;
                    case GrassData_FieldIndex.PositionRange:
                        return PositionRange;
                    case GrassData_FieldIndex.HeightRange:
                        return HeightRange;
                    case GrassData_FieldIndex.ColorRange:
                        return ColorRange;
                    case GrassData_FieldIndex.WavePeriod:
                        return WavePeriod;
                    case GrassData_FieldIndex.Flags:
                        return Flags;
                    case GrassData_FieldIndex.Unknown3:
                        return Unknown3;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                GrassData_FieldIndex enu = (GrassData_FieldIndex)index;
                switch (enu)
                {
                    case GrassData_FieldIndex.Density:
                        this.Density = ex;
                        break;
                    case GrassData_FieldIndex.MinSlope:
                        this.MinSlope = ex;
                        break;
                    case GrassData_FieldIndex.MaxSlope:
                        this.MaxSlope = ex;
                        break;
                    case GrassData_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case GrassData_FieldIndex.UnitsFromWater:
                        this.UnitsFromWater = ex;
                        break;
                    case GrassData_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case GrassData_FieldIndex.UnitsFromWaterType:
                        this.UnitsFromWaterType = ex;
                        break;
                    case GrassData_FieldIndex.PositionRange:
                        this.PositionRange = ex;
                        break;
                    case GrassData_FieldIndex.HeightRange:
                        this.HeightRange = ex;
                        break;
                    case GrassData_FieldIndex.ColorRange:
                        this.ColorRange = ex;
                        break;
                    case GrassData_FieldIndex.WavePeriod:
                        this.WavePeriod = ex;
                        break;
                    case GrassData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case GrassData_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                GrassData_FieldIndex enu = (GrassData_FieldIndex)index;
                switch (enu)
                {
                    case GrassData_FieldIndex.Density:
                        this.Density = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.MinSlope:
                        this.MinSlope = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.MaxSlope:
                        this.MaxSlope = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.UnitsFromWater:
                        this.UnitsFromWater = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.UnitsFromWaterType:
                        this.UnitsFromWaterType = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.PositionRange:
                        this.PositionRange = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.HeightRange:
                        this.HeightRange = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.ColorRange:
                        this.ColorRange = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.WavePeriod:
                        this.WavePeriod = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case GrassData_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Density != null) return true;
                if (MinSlope != null) return true;
                if (MaxSlope != null) return true;
                if (Unknown != null) return true;
                if (UnitsFromWater != null) return true;
                if (Unknown2 != null) return true;
                if (UnitsFromWaterType != null) return true;
                if (PositionRange != null) return true;
                if (HeightRange != null) return true;
                if (ColorRange != null) return true;
                if (WavePeriod != null) return true;
                if (Flags != null) return true;
                if (Unknown3 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Density, "Density");
                fg.AppendItem(MinSlope, "MinSlope");
                fg.AppendItem(MaxSlope, "MaxSlope");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(UnitsFromWater, "UnitsFromWater");
                fg.AppendItem(Unknown2, "Unknown2");
                fg.AppendItem(UnitsFromWaterType, "UnitsFromWaterType");
                fg.AppendItem(PositionRange, "PositionRange");
                fg.AppendItem(HeightRange, "HeightRange");
                fg.AppendItem(ColorRange, "ColorRange");
                fg.AppendItem(WavePeriod, "WavePeriod");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Unknown3, "Unknown3");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Density = this.Density.Combine(rhs.Density);
                ret.MinSlope = this.MinSlope.Combine(rhs.MinSlope);
                ret.MaxSlope = this.MaxSlope.Combine(rhs.MaxSlope);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.UnitsFromWater = this.UnitsFromWater.Combine(rhs.UnitsFromWater);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.UnitsFromWaterType = this.UnitsFromWaterType.Combine(rhs.UnitsFromWaterType);
                ret.PositionRange = this.PositionRange.Combine(rhs.PositionRange);
                ret.HeightRange = this.HeightRange.Combine(rhs.HeightRange);
                ret.ColorRange = this.ColorRange.Combine(rhs.ColorRange);
                ret.WavePeriod = this.WavePeriod.Combine(rhs.WavePeriod);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Density;
            public bool MinSlope;
            public bool MaxSlope;
            public bool Unknown;
            public bool UnitsFromWater;
            public bool Unknown2;
            public bool UnitsFromWaterType;
            public bool PositionRange;
            public bool HeightRange;
            public bool ColorRange;
            public bool WavePeriod;
            public bool Flags;
            public bool Unknown3;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Density = defaultOn;
                this.MinSlope = defaultOn;
                this.MaxSlope = defaultOn;
                this.Unknown = defaultOn;
                this.UnitsFromWater = defaultOn;
                this.Unknown2 = defaultOn;
                this.UnitsFromWaterType = defaultOn;
                this.PositionRange = defaultOn;
                this.HeightRange = defaultOn;
                this.ColorRange = defaultOn;
                this.WavePeriod = defaultOn;
                this.Flags = defaultOn;
                this.Unknown3 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Density, null));
                ret.Add((MinSlope, null));
                ret.Add((MaxSlope, null));
                ret.Add((Unknown, null));
                ret.Add((UnitsFromWater, null));
                ret.Add((Unknown2, null));
                ret.Add((UnitsFromWaterType, null));
                ret.Add((PositionRange, null));
                ret.Add((HeightRange, null));
                ret.Add((ColorRange, null));
                ret.Add((WavePeriod, null));
                ret.Add((Flags, null));
                ret.Add((Unknown3, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = GrassData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => GrassDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((GrassDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static GrassData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static GrassData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new GrassData();
            ((GrassDataSetterCommon)((IGrassDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGrassDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((GrassDataSetterCommon)((IGrassDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static GrassData GetNew()
        {
            return new GrassData();
        }

    }
    #endregion

    #region Interface
    public partial interface IGrassData :
        IGrassDataGetter,
        ILoquiObjectSetter<IGrassData>
    {
        new Byte Density { get; set; }
        new Byte MinSlope { get; set; }
        new Byte MaxSlope { get; set; }
        new Byte Unknown { get; set; }
        new UInt16 UnitsFromWater { get; set; }
        new UInt16 Unknown2 { get; set; }
        new GrassData.UnitsFromWaterTypeEnum UnitsFromWaterType { get; set; }
        new Single PositionRange { get; set; }
        new Single HeightRange { get; set; }
        new Single ColorRange { get; set; }
        new Single WavePeriod { get; set; }
        new GrassData.Flag Flags { get; set; }
        new Byte[] Unknown3 { get; set; }
    }

    public partial interface IGrassDataGetter :
        ILoquiObject,
        ILoquiObject<IGrassDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => GrassData_Registration.Instance;
        Byte Density { get; }
        Byte MinSlope { get; }
        Byte MaxSlope { get; }
        Byte Unknown { get; }
        UInt16 UnitsFromWater { get; }
        UInt16 Unknown2 { get; }
        GrassData.UnitsFromWaterTypeEnum UnitsFromWaterType { get; }
        Single PositionRange { get; }
        Single HeightRange { get; }
        Single ColorRange { get; }
        Single WavePeriod { get; }
        GrassData.Flag Flags { get; }
        ReadOnlyMemorySlice<Byte> Unknown3 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GrassDataMixIn
    {
        public static void Clear(this IGrassData item)
        {
            ((GrassDataSetterCommon)((IGrassDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GrassData.Mask<bool> GetEqualsMask(
            this IGrassDataGetter item,
            IGrassDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IGrassDataGetter item,
            string? name = null,
            GrassData.Mask<bool>? printMask = null)
        {
            return ((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IGrassDataGetter item,
            FileGeneration fg,
            string? name = null,
            GrassData.Mask<bool>? printMask = null)
        {
            ((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IGrassDataGetter item,
            GrassData.Mask<bool?> checkMask)
        {
            return ((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static GrassData.Mask<bool> GetHasBeenSetMask(this IGrassDataGetter item)
        {
            var ret = new GrassData.Mask<bool>(false);
            ((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IGrassDataGetter item,
            IGrassDataGetter rhs)
        {
            return ((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IGrassData lhs,
            IGrassDataGetter rhs)
        {
            ((GrassDataSetterTranslationCommon)((IGrassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IGrassData lhs,
            IGrassDataGetter rhs,
            GrassData.TranslationMask? copyMask = null)
        {
            ((GrassDataSetterTranslationCommon)((IGrassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IGrassData lhs,
            IGrassDataGetter rhs,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GrassDataSetterTranslationCommon)((IGrassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = GrassData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGrassData lhs,
            IGrassDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GrassDataSetterTranslationCommon)((IGrassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static GrassData DeepCopy(
            this IGrassDataGetter item,
            GrassData.TranslationMask? copyMask = null)
        {
            return ((GrassDataSetterTranslationCommon)((IGrassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GrassData DeepCopy(
            this IGrassDataGetter item,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? copyMask = null)
        {
            return ((GrassDataSetterTranslationCommon)((IGrassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GrassData DeepCopy(
            this IGrassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GrassDataSetterTranslationCommon)((IGrassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IGrassData item,
            XElement node,
            GrassData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IGrassData item,
            XElement node,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = GrassData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IGrassData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((GrassDataSetterCommon)((IGrassDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGrassData item,
            string path,
            GrassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGrassData item,
            string path,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGrassData item,
            string path,
            ErrorMaskBuilder? errorMask,
            GrassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IGrassData item,
            Stream stream,
            GrassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGrassData item,
            Stream stream,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IGrassData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            GrassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IGrassData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IGrassData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((GrassDataSetterCommon)((IGrassDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum GrassData_FieldIndex
    {
        Density = 0,
        MinSlope = 1,
        MaxSlope = 2,
        Unknown = 3,
        UnitsFromWater = 4,
        Unknown2 = 5,
        UnitsFromWaterType = 6,
        PositionRange = 7,
        HeightRange = 8,
        ColorRange = 9,
        WavePeriod = 10,
        Flags = 11,
        Unknown3 = 12,
    }
    #endregion

    #region Registration
    public partial class GrassData_Registration : ILoquiRegistration
    {
        public static readonly GrassData_Registration Instance = new GrassData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 187,
            version: 0);

        public const string GUID = "825acb51-3e9d-4012-abc9-1a516dd04d49";

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(GrassData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GrassData.ErrorMask);

        public static readonly Type ClassType = typeof(GrassData);

        public static readonly Type GetterType = typeof(IGrassDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGrassData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.GrassData";

        public const string Name = "GrassData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DENSITY":
                    return (ushort)GrassData_FieldIndex.Density;
                case "MINSLOPE":
                    return (ushort)GrassData_FieldIndex.MinSlope;
                case "MAXSLOPE":
                    return (ushort)GrassData_FieldIndex.MaxSlope;
                case "UNKNOWN":
                    return (ushort)GrassData_FieldIndex.Unknown;
                case "UNITSFROMWATER":
                    return (ushort)GrassData_FieldIndex.UnitsFromWater;
                case "UNKNOWN2":
                    return (ushort)GrassData_FieldIndex.Unknown2;
                case "UNITSFROMWATERTYPE":
                    return (ushort)GrassData_FieldIndex.UnitsFromWaterType;
                case "POSITIONRANGE":
                    return (ushort)GrassData_FieldIndex.PositionRange;
                case "HEIGHTRANGE":
                    return (ushort)GrassData_FieldIndex.HeightRange;
                case "COLORRANGE":
                    return (ushort)GrassData_FieldIndex.ColorRange;
                case "WAVEPERIOD":
                    return (ushort)GrassData_FieldIndex.WavePeriod;
                case "FLAGS":
                    return (ushort)GrassData_FieldIndex.Flags;
                case "UNKNOWN3":
                    return (ushort)GrassData_FieldIndex.Unknown3;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            GrassData_FieldIndex enu = (GrassData_FieldIndex)index;
            switch (enu)
            {
                case GrassData_FieldIndex.Density:
                case GrassData_FieldIndex.MinSlope:
                case GrassData_FieldIndex.MaxSlope:
                case GrassData_FieldIndex.Unknown:
                case GrassData_FieldIndex.UnitsFromWater:
                case GrassData_FieldIndex.Unknown2:
                case GrassData_FieldIndex.UnitsFromWaterType:
                case GrassData_FieldIndex.PositionRange:
                case GrassData_FieldIndex.HeightRange:
                case GrassData_FieldIndex.ColorRange:
                case GrassData_FieldIndex.WavePeriod:
                case GrassData_FieldIndex.Flags:
                case GrassData_FieldIndex.Unknown3:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            GrassData_FieldIndex enu = (GrassData_FieldIndex)index;
            switch (enu)
            {
                case GrassData_FieldIndex.Density:
                case GrassData_FieldIndex.MinSlope:
                case GrassData_FieldIndex.MaxSlope:
                case GrassData_FieldIndex.Unknown:
                case GrassData_FieldIndex.UnitsFromWater:
                case GrassData_FieldIndex.Unknown2:
                case GrassData_FieldIndex.UnitsFromWaterType:
                case GrassData_FieldIndex.PositionRange:
                case GrassData_FieldIndex.HeightRange:
                case GrassData_FieldIndex.ColorRange:
                case GrassData_FieldIndex.WavePeriod:
                case GrassData_FieldIndex.Flags:
                case GrassData_FieldIndex.Unknown3:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            GrassData_FieldIndex enu = (GrassData_FieldIndex)index;
            switch (enu)
            {
                case GrassData_FieldIndex.Density:
                case GrassData_FieldIndex.MinSlope:
                case GrassData_FieldIndex.MaxSlope:
                case GrassData_FieldIndex.Unknown:
                case GrassData_FieldIndex.UnitsFromWater:
                case GrassData_FieldIndex.Unknown2:
                case GrassData_FieldIndex.UnitsFromWaterType:
                case GrassData_FieldIndex.PositionRange:
                case GrassData_FieldIndex.HeightRange:
                case GrassData_FieldIndex.ColorRange:
                case GrassData_FieldIndex.WavePeriod:
                case GrassData_FieldIndex.Flags:
                case GrassData_FieldIndex.Unknown3:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            GrassData_FieldIndex enu = (GrassData_FieldIndex)index;
            switch (enu)
            {
                case GrassData_FieldIndex.Density:
                    return "Density";
                case GrassData_FieldIndex.MinSlope:
                    return "MinSlope";
                case GrassData_FieldIndex.MaxSlope:
                    return "MaxSlope";
                case GrassData_FieldIndex.Unknown:
                    return "Unknown";
                case GrassData_FieldIndex.UnitsFromWater:
                    return "UnitsFromWater";
                case GrassData_FieldIndex.Unknown2:
                    return "Unknown2";
                case GrassData_FieldIndex.UnitsFromWaterType:
                    return "UnitsFromWaterType";
                case GrassData_FieldIndex.PositionRange:
                    return "PositionRange";
                case GrassData_FieldIndex.HeightRange:
                    return "HeightRange";
                case GrassData_FieldIndex.ColorRange:
                    return "ColorRange";
                case GrassData_FieldIndex.WavePeriod:
                    return "WavePeriod";
                case GrassData_FieldIndex.Flags:
                    return "Flags";
                case GrassData_FieldIndex.Unknown3:
                    return "Unknown3";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            GrassData_FieldIndex enu = (GrassData_FieldIndex)index;
            switch (enu)
            {
                case GrassData_FieldIndex.Density:
                case GrassData_FieldIndex.MinSlope:
                case GrassData_FieldIndex.MaxSlope:
                case GrassData_FieldIndex.Unknown:
                case GrassData_FieldIndex.UnitsFromWater:
                case GrassData_FieldIndex.Unknown2:
                case GrassData_FieldIndex.UnitsFromWaterType:
                case GrassData_FieldIndex.PositionRange:
                case GrassData_FieldIndex.HeightRange:
                case GrassData_FieldIndex.ColorRange:
                case GrassData_FieldIndex.WavePeriod:
                case GrassData_FieldIndex.Flags:
                case GrassData_FieldIndex.Unknown3:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            GrassData_FieldIndex enu = (GrassData_FieldIndex)index;
            switch (enu)
            {
                case GrassData_FieldIndex.Density:
                case GrassData_FieldIndex.MinSlope:
                case GrassData_FieldIndex.MaxSlope:
                case GrassData_FieldIndex.Unknown:
                case GrassData_FieldIndex.UnitsFromWater:
                case GrassData_FieldIndex.Unknown2:
                case GrassData_FieldIndex.UnitsFromWaterType:
                case GrassData_FieldIndex.PositionRange:
                case GrassData_FieldIndex.HeightRange:
                case GrassData_FieldIndex.ColorRange:
                case GrassData_FieldIndex.WavePeriod:
                case GrassData_FieldIndex.Flags:
                case GrassData_FieldIndex.Unknown3:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            GrassData_FieldIndex enu = (GrassData_FieldIndex)index;
            switch (enu)
            {
                case GrassData_FieldIndex.Density:
                    return typeof(Byte);
                case GrassData_FieldIndex.MinSlope:
                    return typeof(Byte);
                case GrassData_FieldIndex.MaxSlope:
                    return typeof(Byte);
                case GrassData_FieldIndex.Unknown:
                    return typeof(Byte);
                case GrassData_FieldIndex.UnitsFromWater:
                    return typeof(UInt16);
                case GrassData_FieldIndex.Unknown2:
                    return typeof(UInt16);
                case GrassData_FieldIndex.UnitsFromWaterType:
                    return typeof(GrassData.UnitsFromWaterTypeEnum);
                case GrassData_FieldIndex.PositionRange:
                    return typeof(Single);
                case GrassData_FieldIndex.HeightRange:
                    return typeof(Single);
                case GrassData_FieldIndex.ColorRange:
                    return typeof(Single);
                case GrassData_FieldIndex.WavePeriod:
                    return typeof(Single);
                case GrassData_FieldIndex.Flags:
                    return typeof(GrassData.Flag);
                case GrassData_FieldIndex.Unknown3:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(GrassDataXmlWriteTranslation);
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = DATA_HEADER;
        public const int NumStructFields = 13;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(GrassDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class GrassDataSetterCommon
    {
        public static readonly GrassDataSetterCommon Instance = new GrassDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGrassData item)
        {
            ClearPartial();
            item.Density = default;
            item.MinSlope = default;
            item.MaxSlope = default;
            item.Unknown = default;
            item.UnitsFromWater = default;
            item.Unknown2 = default;
            item.UnitsFromWaterType = default;
            item.PositionRange = default;
            item.HeightRange = default;
            item.ColorRange = default;
            item.WavePeriod = default;
            item.Flags = default;
            item.Unknown3 = new byte[3];
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IGrassData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GrassDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IGrassData item,
            MutagenFrame frame)
        {
            item.Density = frame.ReadUInt8();
            item.MinSlope = frame.ReadUInt8();
            item.MaxSlope = frame.ReadUInt8();
            item.Unknown = frame.ReadUInt8();
            item.UnitsFromWater = frame.ReadUInt16();
            item.Unknown2 = frame.ReadUInt16();
            item.UnitsFromWaterType = EnumBinaryTranslation<GrassData.UnitsFromWaterTypeEnum>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.PositionRange = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.HeightRange = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ColorRange = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.WavePeriod = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Flags = EnumBinaryTranslation<GrassData.Flag>.Instance.Parse(frame: frame.SpawnWithLength(1));
            item.Unknown3 = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(3));
        }
        
        public virtual void CopyInFromBinary(
            IGrassData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(GrassData_Registration.DATA_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class GrassDataCommon
    {
        public static readonly GrassDataCommon Instance = new GrassDataCommon();

        public GrassData.Mask<bool> GetEqualsMask(
            IGrassDataGetter item,
            IGrassDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GrassData.Mask<bool>(false);
            ((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGrassDataGetter item,
            IGrassDataGetter rhs,
            GrassData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Density = item.Density == rhs.Density;
            ret.MinSlope = item.MinSlope == rhs.MinSlope;
            ret.MaxSlope = item.MaxSlope == rhs.MaxSlope;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.UnitsFromWater = item.UnitsFromWater == rhs.UnitsFromWater;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.UnitsFromWaterType = item.UnitsFromWaterType == rhs.UnitsFromWaterType;
            ret.PositionRange = item.PositionRange.EqualsWithin(rhs.PositionRange);
            ret.HeightRange = item.HeightRange.EqualsWithin(rhs.HeightRange);
            ret.ColorRange = item.ColorRange.EqualsWithin(rhs.ColorRange);
            ret.WavePeriod = item.WavePeriod.EqualsWithin(rhs.WavePeriod);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Unknown3 = MemoryExtensions.SequenceEqual(item.Unknown3.Span, rhs.Unknown3.Span);
        }
        
        public string ToString(
            IGrassDataGetter item,
            string? name = null,
            GrassData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IGrassDataGetter item,
            FileGeneration fg,
            string? name = null,
            GrassData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"GrassData =>");
            }
            else
            {
                fg.AppendLine($"{name} (GrassData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IGrassDataGetter item,
            FileGeneration fg,
            GrassData.Mask<bool>? printMask = null)
        {
            if (printMask?.Density ?? true)
            {
                fg.AppendItem(item.Density, "Density");
            }
            if (printMask?.MinSlope ?? true)
            {
                fg.AppendItem(item.MinSlope, "MinSlope");
            }
            if (printMask?.MaxSlope ?? true)
            {
                fg.AppendItem(item.MaxSlope, "MaxSlope");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.UnitsFromWater ?? true)
            {
                fg.AppendItem(item.UnitsFromWater, "UnitsFromWater");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.UnitsFromWaterType ?? true)
            {
                fg.AppendItem(item.UnitsFromWaterType, "UnitsFromWaterType");
            }
            if (printMask?.PositionRange ?? true)
            {
                fg.AppendItem(item.PositionRange, "PositionRange");
            }
            if (printMask?.HeightRange ?? true)
            {
                fg.AppendItem(item.HeightRange, "HeightRange");
            }
            if (printMask?.ColorRange ?? true)
            {
                fg.AppendItem(item.ColorRange, "ColorRange");
            }
            if (printMask?.WavePeriod ?? true)
            {
                fg.AppendItem(item.WavePeriod, "WavePeriod");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Unknown3 ?? true)
            {
                fg.AppendLine($"Unknown3 => {SpanExt.ToHexString(item.Unknown3)}");
            }
        }
        
        public bool HasBeenSet(
            IGrassDataGetter item,
            GrassData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IGrassDataGetter item,
            GrassData.Mask<bool> mask)
        {
            mask.Density = true;
            mask.MinSlope = true;
            mask.MaxSlope = true;
            mask.Unknown = true;
            mask.UnitsFromWater = true;
            mask.Unknown2 = true;
            mask.UnitsFromWaterType = true;
            mask.PositionRange = true;
            mask.HeightRange = true;
            mask.ColorRange = true;
            mask.WavePeriod = true;
            mask.Flags = true;
            mask.Unknown3 = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGrassDataGetter? lhs,
            IGrassDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Density != rhs.Density) return false;
            if (lhs.MinSlope != rhs.MinSlope) return false;
            if (lhs.MaxSlope != rhs.MaxSlope) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.UnitsFromWater != rhs.UnitsFromWater) return false;
            if (lhs.Unknown2 != rhs.Unknown2) return false;
            if (lhs.UnitsFromWaterType != rhs.UnitsFromWaterType) return false;
            if (!lhs.PositionRange.EqualsWithin(rhs.PositionRange)) return false;
            if (!lhs.HeightRange.EqualsWithin(rhs.HeightRange)) return false;
            if (!lhs.ColorRange.EqualsWithin(rhs.ColorRange)) return false;
            if (!lhs.WavePeriod.EqualsWithin(rhs.WavePeriod)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unknown3.Span, rhs.Unknown3.Span)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IGrassDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Density);
            hash.Add(item.MinSlope);
            hash.Add(item.MaxSlope);
            hash.Add(item.Unknown);
            hash.Add(item.UnitsFromWater);
            hash.Add(item.Unknown2);
            hash.Add(item.UnitsFromWaterType);
            hash.Add(item.PositionRange);
            hash.Add(item.HeightRange);
            hash.Add(item.ColorRange);
            hash.Add(item.WavePeriod);
            hash.Add(item.Flags);
            hash.Add(item.Unknown3);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return GrassData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IGrassDataGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IGrassDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class GrassDataSetterTranslationCommon
    {
        public static readonly GrassDataSetterTranslationCommon Instance = new GrassDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IGrassData item,
            IGrassDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.Density) ?? true))
            {
                item.Density = rhs.Density;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.MinSlope) ?? true))
            {
                item.MinSlope = rhs.MinSlope;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.MaxSlope) ?? true))
            {
                item.MaxSlope = rhs.MaxSlope;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.UnitsFromWater) ?? true))
            {
                item.UnitsFromWater = rhs.UnitsFromWater;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.UnitsFromWaterType) ?? true))
            {
                item.UnitsFromWaterType = rhs.UnitsFromWaterType;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.PositionRange) ?? true))
            {
                item.PositionRange = rhs.PositionRange;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.HeightRange) ?? true))
            {
                item.HeightRange = rhs.HeightRange;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.ColorRange) ?? true))
            {
                item.ColorRange = rhs.ColorRange;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.WavePeriod) ?? true))
            {
                item.WavePeriod = rhs.WavePeriod;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)GrassData_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3.ToArray();
            }
        }
        
        #endregion
        
        public GrassData DeepCopy(
            IGrassDataGetter item,
            GrassData.TranslationMask? copyMask = null)
        {
            GrassData ret = (GrassData)((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public GrassData DeepCopy(
            IGrassDataGetter item,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? copyMask = null)
        {
            GrassData ret = (GrassData)((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public GrassData DeepCopy(
            IGrassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            GrassData ret = (GrassData)((GrassDataCommon)((IGrassDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class GrassData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GrassData_Registration.Instance;
        public static GrassData_Registration Registration => GrassData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => GrassDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return GrassDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => GrassDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IGrassDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IGrassDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IGrassDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class GrassDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static GrassDataXmlWriteTranslation Instance = new GrassDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IGrassDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)GrassData_FieldIndex.Density) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Density),
                    item: item.Density,
                    fieldIndex: (int)GrassData_FieldIndex.Density,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GrassData_FieldIndex.MinSlope) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MinSlope),
                    item: item.MinSlope,
                    fieldIndex: (int)GrassData_FieldIndex.MinSlope,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GrassData_FieldIndex.MaxSlope) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaxSlope),
                    item: item.MaxSlope,
                    fieldIndex: (int)GrassData_FieldIndex.MaxSlope,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GrassData_FieldIndex.Unknown) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)GrassData_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GrassData_FieldIndex.UnitsFromWater) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.UnitsFromWater),
                    item: item.UnitsFromWater,
                    fieldIndex: (int)GrassData_FieldIndex.UnitsFromWater,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GrassData_FieldIndex.Unknown2) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown2),
                    item: item.Unknown2,
                    fieldIndex: (int)GrassData_FieldIndex.Unknown2,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GrassData_FieldIndex.UnitsFromWaterType) ?? true))
            {
                EnumXmlTranslation<GrassData.UnitsFromWaterTypeEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.UnitsFromWaterType),
                    item: item.UnitsFromWaterType,
                    fieldIndex: (int)GrassData_FieldIndex.UnitsFromWaterType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GrassData_FieldIndex.PositionRange) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PositionRange),
                    item: item.PositionRange,
                    fieldIndex: (int)GrassData_FieldIndex.PositionRange,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GrassData_FieldIndex.HeightRange) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HeightRange),
                    item: item.HeightRange,
                    fieldIndex: (int)GrassData_FieldIndex.HeightRange,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GrassData_FieldIndex.ColorRange) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ColorRange),
                    item: item.ColorRange,
                    fieldIndex: (int)GrassData_FieldIndex.ColorRange,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GrassData_FieldIndex.WavePeriod) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.WavePeriod),
                    item: item.WavePeriod,
                    fieldIndex: (int)GrassData_FieldIndex.WavePeriod,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GrassData_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<GrassData.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)GrassData_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)GrassData_FieldIndex.Unknown3) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown3),
                    item: item.Unknown3,
                    fieldIndex: (int)GrassData_FieldIndex.Unknown3,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IGrassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.GrassData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.GrassData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IGrassDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IGrassDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IGrassDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class GrassDataXmlCreateTranslation
    {
        public readonly static GrassDataXmlCreateTranslation Instance = new GrassDataXmlCreateTranslation();

        public static void FillPublicXml(
            IGrassData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GrassDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IGrassData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Density":
                    errorMask?.PushIndex((int)GrassData_FieldIndex.Density);
                    try
                    {
                        item.Density = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MinSlope":
                    errorMask?.PushIndex((int)GrassData_FieldIndex.MinSlope);
                    try
                    {
                        item.MinSlope = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaxSlope":
                    errorMask?.PushIndex((int)GrassData_FieldIndex.MaxSlope);
                    try
                    {
                        item.MaxSlope = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)GrassData_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnitsFromWater":
                    errorMask?.PushIndex((int)GrassData_FieldIndex.UnitsFromWater);
                    try
                    {
                        item.UnitsFromWater = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown2":
                    errorMask?.PushIndex((int)GrassData_FieldIndex.Unknown2);
                    try
                    {
                        item.Unknown2 = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnitsFromWaterType":
                    errorMask?.PushIndex((int)GrassData_FieldIndex.UnitsFromWaterType);
                    try
                    {
                        item.UnitsFromWaterType = EnumXmlTranslation<GrassData.UnitsFromWaterTypeEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PositionRange":
                    errorMask?.PushIndex((int)GrassData_FieldIndex.PositionRange);
                    try
                    {
                        item.PositionRange = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HeightRange":
                    errorMask?.PushIndex((int)GrassData_FieldIndex.HeightRange);
                    try
                    {
                        item.HeightRange = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorRange":
                    errorMask?.PushIndex((int)GrassData_FieldIndex.ColorRange);
                    try
                    {
                        item.ColorRange = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WavePeriod":
                    errorMask?.PushIndex((int)GrassData_FieldIndex.WavePeriod);
                    try
                    {
                        item.WavePeriod = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)GrassData_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<GrassData.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown3":
                    errorMask?.PushIndex((int)GrassData_FieldIndex.Unknown3);
                    try
                    {
                        item.Unknown3 = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 3,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class GrassDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IGrassDataGetter item,
            XElement node,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((GrassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = GrassData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IGrassDataGetter item,
            string path,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IGrassDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IGrassDataGetter item,
            Stream stream,
            out GrassData.ErrorMask errorMask,
            GrassData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IGrassDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IGrassDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((GrassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IGrassDataGetter item,
            XElement node,
            string? name = null,
            GrassData.TranslationMask? translationMask = null)
        {
            ((GrassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IGrassDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((GrassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IGrassDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((GrassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class GrassDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static GrassDataBinaryWriteTranslation Instance = new GrassDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IGrassDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Density);
            writer.Write(item.MinSlope);
            writer.Write(item.MaxSlope);
            writer.Write(item.Unknown);
            writer.Write(item.UnitsFromWater);
            writer.Write(item.Unknown2);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<GrassData.UnitsFromWaterTypeEnum>.Instance.Write(
                writer,
                item.UnitsFromWaterType,
                length: 4);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.PositionRange);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.HeightRange);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ColorRange);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.WavePeriod);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<GrassData.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 1);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown3);
        }

        public void Write(
            MutagenWriter writer,
            IGrassDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(GrassData_Registration.DATA_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IGrassDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class GrassDataBinaryCreateTranslation
    {
        public readonly static GrassDataBinaryCreateTranslation Instance = new GrassDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class GrassDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IGrassDataGetter item,
            MutagenWriter writer)
        {
            ((GrassDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class GrassDataBinaryOverlay :
        BinaryOverlay,
        IGrassDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GrassData_Registration.Instance;
        public static GrassData_Registration Registration => GrassData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => GrassDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => GrassDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IGrassDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IGrassDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IGrassDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGrassDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => GrassDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((GrassDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => GrassDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((GrassDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Byte Density => _data.Span[0x0];
        public Byte MinSlope => _data.Span[0x1];
        public Byte MaxSlope => _data.Span[0x2];
        public Byte Unknown => _data.Span[0x3];
        public UInt16 UnitsFromWater => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x4, 0x2));
        public UInt16 Unknown2 => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(0x6, 0x2));
        public GrassData.UnitsFromWaterTypeEnum UnitsFromWaterType => (GrassData.UnitsFromWaterTypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x8, 0x4));
        public Single PositionRange => SpanExt.GetFloat(_data.Slice(0xC, 0x4));
        public Single HeightRange => SpanExt.GetFloat(_data.Slice(0x10, 0x4));
        public Single ColorRange => SpanExt.GetFloat(_data.Slice(0x14, 0x4));
        public Single WavePeriod => SpanExt.GetFloat(_data.Slice(0x18, 0x4));
        public GrassData.Flag Flags => (GrassData.Flag)_data.Span.Slice(0x1C, 0x1)[0];
        public ReadOnlyMemorySlice<Byte> Unknown3 => _data.Span.Slice(0x1D, 0x3).ToArray();
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected GrassDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static GrassDataBinaryOverlay GrassDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new GrassDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x20 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static GrassDataBinaryOverlay GrassDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return GrassDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            GrassDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

