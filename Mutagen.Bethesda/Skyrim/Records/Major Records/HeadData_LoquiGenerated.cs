/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class HeadData :
        IHeadData,
        ILoquiObjectSetter<HeadData>,
        IEquatable<HeadData>,
        IEqualsMask
    {
        #region Ctor
        public HeadData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region HeadParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<HeadPartReference>? _HeadParts;
        public ExtendedList<HeadPartReference>? HeadParts
        {
            get => this._HeadParts;
            set => this._HeadParts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IHeadPartReferenceGetter>? IHeadDataGetter.HeadParts => _HeadParts;
        #endregion

        #endregion
        #region AvailableMorphs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AvailableMorphs? _AvailableMorphs;
        public AvailableMorphs? AvailableMorphs
        {
            get => _AvailableMorphs;
            set => _AvailableMorphs = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAvailableMorphsGetter? IHeadDataGetter.AvailableMorphs => this.AvailableMorphs;
        #endregion
        #region RacePresets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Npc>>? _RacePresets;
        public ExtendedList<IFormLink<Npc>>? RacePresets
        {
            get => this._RacePresets;
            set => this._RacePresets = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<INpcGetter>>? IHeadDataGetter.RacePresets => _RacePresets;
        #endregion

        #endregion
        #region AvailableHairColors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<ColorRecord>>? _AvailableHairColors;
        public ExtendedList<IFormLink<ColorRecord>>? AvailableHairColors
        {
            get => this._AvailableHairColors;
            set => this._AvailableHairColors = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IColorRecordGetter>>? IHeadDataGetter.AvailableHairColors => _AvailableHairColors;
        #endregion

        #endregion
        #region FaceDetails
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<TextureSet>>? _FaceDetails;
        public ExtendedList<IFormLink<TextureSet>>? FaceDetails
        {
            get => this._FaceDetails;
            set => this._FaceDetails = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ITextureSetGetter>>? IHeadDataGetter.FaceDetails => _FaceDetails;
        #endregion

        #endregion
        #region DefaultFaceTexture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<TextureSet> _DefaultFaceTexture = new FormLinkNullable<TextureSet>();
        public IFormLinkNullable<TextureSet> DefaultFaceTexture => this._DefaultFaceTexture;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITextureSetGetter> IHeadDataGetter.DefaultFaceTexture => this.DefaultFaceTexture;
        #endregion
        #region TintMasks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TintAssets>? _TintMasks;
        public ExtendedList<TintAssets>? TintMasks
        {
            get => this._TintMasks;
            set => this._TintMasks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITintAssetsGetter>? IHeadDataGetter.TintMasks => _TintMasks;
        #endregion

        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IHeadDataGetter.Model => this.Model;
        #endregion
        #region MorphRace
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Race> _MorphRace = new FormLinkNullable<Race>();
        public IFormLinkNullable<Race> MorphRace => this._MorphRace;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IHeadDataGetter.MorphRace => this.MorphRace;
        #endregion
        #region ArmorRace
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Race> _ArmorRace = new FormLinkNullable<Race>();
        public IFormLinkNullable<Race> ArmorRace => this._ArmorRace;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IHeadDataGetter.ArmorRace => this.ArmorRace;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            HeadDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IHeadDataGetter rhs)) return false;
            return ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(HeadData obj)
        {
            return ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => HeadDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((HeadDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static HeadData CreateFromXml(
            XElement node,
            HeadData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static HeadData CreateFromXml(
            XElement node,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = HeadData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static HeadData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new HeadData();
            ((HeadDataSetterCommon)((IHeadDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static HeadData CreateFromXml(
            string path,
            HeadData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static HeadData CreateFromXml(
            string path,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static HeadData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            HeadData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static HeadData CreateFromXml(
            Stream stream,
            HeadData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static HeadData CreateFromXml(
            Stream stream,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static HeadData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            HeadData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.HeadParts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>());
                this.AvailableMorphs = new MaskItem<TItem, AvailableMorphs.Mask<TItem>?>(initialValue, new AvailableMorphs.Mask<TItem>(initialValue));
                this.RacePresets = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.AvailableHairColors = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.FaceDetails = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.DefaultFaceTexture = initialValue;
                this.TintMasks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintAssets.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TintAssets.Mask<TItem>?>>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.MorphRace = initialValue;
                this.ArmorRace = initialValue;
            }

            public Mask(
                TItem HeadParts,
                TItem AvailableMorphs,
                TItem RacePresets,
                TItem AvailableHairColors,
                TItem FaceDetails,
                TItem DefaultFaceTexture,
                TItem TintMasks,
                TItem Model,
                TItem MorphRace,
                TItem ArmorRace)
            {
                this.HeadParts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>?>(HeadParts, Enumerable.Empty<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>());
                this.AvailableMorphs = new MaskItem<TItem, AvailableMorphs.Mask<TItem>?>(AvailableMorphs, new AvailableMorphs.Mask<TItem>(AvailableMorphs));
                this.RacePresets = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RacePresets, Enumerable.Empty<(int Index, TItem Value)>());
                this.AvailableHairColors = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AvailableHairColors, Enumerable.Empty<(int Index, TItem Value)>());
                this.FaceDetails = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(FaceDetails, Enumerable.Empty<(int Index, TItem Value)>());
                this.DefaultFaceTexture = DefaultFaceTexture;
                this.TintMasks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintAssets.Mask<TItem>?>>?>(TintMasks, Enumerable.Empty<MaskItemIndexed<TItem, TintAssets.Mask<TItem>?>>());
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.MorphRace = MorphRace;
                this.ArmorRace = ArmorRace;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>?>? HeadParts;
            public MaskItem<TItem, AvailableMorphs.Mask<TItem>?>? AvailableMorphs { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RacePresets;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AvailableHairColors;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? FaceDetails;
            public TItem DefaultFaceTexture;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintAssets.Mask<TItem>?>>?>? TintMasks;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem MorphRace;
            public TItem ArmorRace;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.HeadParts, rhs.HeadParts)) return false;
                if (!object.Equals(this.AvailableMorphs, rhs.AvailableMorphs)) return false;
                if (!object.Equals(this.RacePresets, rhs.RacePresets)) return false;
                if (!object.Equals(this.AvailableHairColors, rhs.AvailableHairColors)) return false;
                if (!object.Equals(this.FaceDetails, rhs.FaceDetails)) return false;
                if (!object.Equals(this.DefaultFaceTexture, rhs.DefaultFaceTexture)) return false;
                if (!object.Equals(this.TintMasks, rhs.TintMasks)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.MorphRace, rhs.MorphRace)) return false;
                if (!object.Equals(this.ArmorRace, rhs.ArmorRace)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.HeadParts?.GetHashCode());
                ret = ret.CombineHashCode(this.AvailableMorphs?.GetHashCode());
                ret = ret.CombineHashCode(this.RacePresets?.GetHashCode());
                ret = ret.CombineHashCode(this.AvailableHairColors?.GetHashCode());
                ret = ret.CombineHashCode(this.FaceDetails?.GetHashCode());
                ret = ret.CombineHashCode(this.DefaultFaceTexture?.GetHashCode());
                ret = ret.CombineHashCode(this.TintMasks?.GetHashCode());
                ret = ret.CombineHashCode(this.Model?.GetHashCode());
                ret = ret.CombineHashCode(this.MorphRace?.GetHashCode());
                ret = ret.CombineHashCode(this.ArmorRace?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (this.HeadParts != null)
                {
                    if (!eval(this.HeadParts.Overall)) return false;
                    if (this.HeadParts.Specific != null)
                    {
                        foreach (var item in this.HeadParts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (AvailableMorphs != null)
                {
                    if (!eval(this.AvailableMorphs.Overall)) return false;
                    if (this.AvailableMorphs.Specific != null && !this.AvailableMorphs.Specific.All(eval)) return false;
                }
                if (this.RacePresets != null)
                {
                    if (!eval(this.RacePresets.Overall)) return false;
                    if (this.RacePresets.Specific != null)
                    {
                        foreach (var item in this.RacePresets.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AvailableHairColors != null)
                {
                    if (!eval(this.AvailableHairColors.Overall)) return false;
                    if (this.AvailableHairColors.Specific != null)
                    {
                        foreach (var item in this.AvailableHairColors.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.FaceDetails != null)
                {
                    if (!eval(this.FaceDetails.Overall)) return false;
                    if (this.FaceDetails.Specific != null)
                    {
                        foreach (var item in this.FaceDetails.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.DefaultFaceTexture)) return false;
                if (this.TintMasks != null)
                {
                    if (!eval(this.TintMasks.Overall)) return false;
                    if (this.TintMasks.Specific != null)
                    {
                        foreach (var item in this.TintMasks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.MorphRace)) return false;
                if (!eval(this.ArmorRace)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (this.HeadParts != null)
                {
                    if (eval(this.HeadParts.Overall)) return true;
                    if (this.HeadParts.Specific != null)
                    {
                        foreach (var item in this.HeadParts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (AvailableMorphs != null)
                {
                    if (eval(this.AvailableMorphs.Overall)) return true;
                    if (this.AvailableMorphs.Specific != null && this.AvailableMorphs.Specific.Any(eval)) return true;
                }
                if (this.RacePresets != null)
                {
                    if (eval(this.RacePresets.Overall)) return true;
                    if (this.RacePresets.Specific != null)
                    {
                        foreach (var item in this.RacePresets.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AvailableHairColors != null)
                {
                    if (eval(this.AvailableHairColors.Overall)) return true;
                    if (this.AvailableHairColors.Specific != null)
                    {
                        foreach (var item in this.AvailableHairColors.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.FaceDetails != null)
                {
                    if (eval(this.FaceDetails.Overall)) return true;
                    if (this.FaceDetails.Specific != null)
                    {
                        foreach (var item in this.FaceDetails.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.DefaultFaceTexture)) return true;
                if (this.TintMasks != null)
                {
                    if (eval(this.TintMasks.Overall)) return true;
                    if (this.TintMasks.Specific != null)
                    {
                        foreach (var item in this.TintMasks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.MorphRace)) return true;
                if (eval(this.ArmorRace)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new HeadData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                if (HeadParts != null)
                {
                    obj.HeadParts = new MaskItem<R, IEnumerable<MaskItemIndexed<R, HeadPartReference.Mask<R>?>>?>(eval(this.HeadParts.Overall), Enumerable.Empty<MaskItemIndexed<R, HeadPartReference.Mask<R>?>>());
                    if (HeadParts.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, HeadPartReference.Mask<R>?>>();
                        obj.HeadParts.Specific = l;
                        foreach (var item in HeadParts.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, HeadPartReference.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, HeadPartReference.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.AvailableMorphs = this.AvailableMorphs == null ? null : new MaskItem<R, AvailableMorphs.Mask<R>?>(eval(this.AvailableMorphs.Overall), this.AvailableMorphs.Specific?.Translate(eval));
                if (RacePresets != null)
                {
                    obj.RacePresets = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RacePresets.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RacePresets.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RacePresets.Specific = l;
                        foreach (var item in RacePresets.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (AvailableHairColors != null)
                {
                    obj.AvailableHairColors = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AvailableHairColors.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AvailableHairColors.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AvailableHairColors.Specific = l;
                        foreach (var item in AvailableHairColors.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (FaceDetails != null)
                {
                    obj.FaceDetails = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.FaceDetails.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (FaceDetails.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.FaceDetails.Specific = l;
                        foreach (var item in FaceDetails.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.DefaultFaceTexture = eval(this.DefaultFaceTexture);
                if (TintMasks != null)
                {
                    obj.TintMasks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TintAssets.Mask<R>?>>?>(eval(this.TintMasks.Overall), Enumerable.Empty<MaskItemIndexed<R, TintAssets.Mask<R>?>>());
                    if (TintMasks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TintAssets.Mask<R>?>>();
                        obj.TintMasks.Specific = l;
                        foreach (var item in TintMasks.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, TintAssets.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, TintAssets.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.MorphRace = eval(this.MorphRace);
                obj.ArmorRace = eval(this.ArmorRace);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(HeadData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, HeadData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(HeadData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.HeadParts?.Overall ?? true)
                        && HeadParts.TryGet(out var HeadPartsItem))
                    {
                        fg.AppendLine("HeadParts =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(HeadPartsItem.Overall);
                            if (HeadPartsItem.Specific != null)
                            {
                                foreach (var subItem in HeadPartsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.AvailableMorphs?.Overall ?? true)
                    {
                        AvailableMorphs?.ToString(fg);
                    }
                    if ((printMask?.RacePresets?.Overall ?? true)
                        && RacePresets.TryGet(out var RacePresetsItem))
                    {
                        fg.AppendLine("RacePresets =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RacePresetsItem.Overall);
                            if (RacePresetsItem.Specific != null)
                            {
                                foreach (var subItem in RacePresetsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.AvailableHairColors?.Overall ?? true)
                        && AvailableHairColors.TryGet(out var AvailableHairColorsItem))
                    {
                        fg.AppendLine("AvailableHairColors =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AvailableHairColorsItem.Overall);
                            if (AvailableHairColorsItem.Specific != null)
                            {
                                foreach (var subItem in AvailableHairColorsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.FaceDetails?.Overall ?? true)
                        && FaceDetails.TryGet(out var FaceDetailsItem))
                    {
                        fg.AppendLine("FaceDetails =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(FaceDetailsItem.Overall);
                            if (FaceDetailsItem.Specific != null)
                            {
                                foreach (var subItem in FaceDetailsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DefaultFaceTexture ?? true)
                    {
                        fg.AppendItem(DefaultFaceTexture, "DefaultFaceTexture");
                    }
                    if ((printMask?.TintMasks?.Overall ?? true)
                        && TintMasks.TryGet(out var TintMasksItem))
                    {
                        fg.AppendLine("TintMasks =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TintMasksItem.Overall);
                            if (TintMasksItem.Specific != null)
                            {
                                foreach (var subItem in TintMasksItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.MorphRace ?? true)
                    {
                        fg.AppendItem(MorphRace, "MorphRace");
                    }
                    if (printMask?.ArmorRace ?? true)
                    {
                        fg.AppendItem(ArmorRace, "ArmorRace");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, HeadPartReference.ErrorMask?>>?>? HeadParts;
            public MaskItem<Exception?, AvailableMorphs.ErrorMask?>? AvailableMorphs;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RacePresets;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AvailableHairColors;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? FaceDetails;
            public Exception? DefaultFaceTexture;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintAssets.ErrorMask?>>?>? TintMasks;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? MorphRace;
            public Exception? ArmorRace;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
                switch (enu)
                {
                    case HeadData_FieldIndex.HeadParts:
                        return HeadParts;
                    case HeadData_FieldIndex.AvailableMorphs:
                        return AvailableMorphs;
                    case HeadData_FieldIndex.RacePresets:
                        return RacePresets;
                    case HeadData_FieldIndex.AvailableHairColors:
                        return AvailableHairColors;
                    case HeadData_FieldIndex.FaceDetails:
                        return FaceDetails;
                    case HeadData_FieldIndex.DefaultFaceTexture:
                        return DefaultFaceTexture;
                    case HeadData_FieldIndex.TintMasks:
                        return TintMasks;
                    case HeadData_FieldIndex.Model:
                        return Model;
                    case HeadData_FieldIndex.MorphRace:
                        return MorphRace;
                    case HeadData_FieldIndex.ArmorRace:
                        return ArmorRace;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
                switch (enu)
                {
                    case HeadData_FieldIndex.HeadParts:
                        this.HeadParts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, HeadPartReference.ErrorMask?>>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.AvailableMorphs:
                        this.AvailableMorphs = new MaskItem<Exception?, AvailableMorphs.ErrorMask?>(ex, null);
                        break;
                    case HeadData_FieldIndex.RacePresets:
                        this.RacePresets = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.AvailableHairColors:
                        this.AvailableHairColors = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.FaceDetails:
                        this.FaceDetails = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.DefaultFaceTexture:
                        this.DefaultFaceTexture = ex;
                        break;
                    case HeadData_FieldIndex.TintMasks:
                        this.TintMasks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintAssets.ErrorMask?>>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case HeadData_FieldIndex.MorphRace:
                        this.MorphRace = ex;
                        break;
                    case HeadData_FieldIndex.ArmorRace:
                        this.ArmorRace = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
                switch (enu)
                {
                    case HeadData_FieldIndex.HeadParts:
                        this.HeadParts = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, HeadPartReference.ErrorMask?>>?>)obj;
                        break;
                    case HeadData_FieldIndex.AvailableMorphs:
                        this.AvailableMorphs = (MaskItem<Exception?, AvailableMorphs.ErrorMask?>?)obj;
                        break;
                    case HeadData_FieldIndex.RacePresets:
                        this.RacePresets = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case HeadData_FieldIndex.AvailableHairColors:
                        this.AvailableHairColors = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case HeadData_FieldIndex.FaceDetails:
                        this.FaceDetails = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case HeadData_FieldIndex.DefaultFaceTexture:
                        this.DefaultFaceTexture = (Exception?)obj;
                        break;
                    case HeadData_FieldIndex.TintMasks:
                        this.TintMasks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintAssets.ErrorMask?>>?>)obj;
                        break;
                    case HeadData_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case HeadData_FieldIndex.MorphRace:
                        this.MorphRace = (Exception?)obj;
                        break;
                    case HeadData_FieldIndex.ArmorRace:
                        this.ArmorRace = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (HeadParts != null) return true;
                if (AvailableMorphs != null) return true;
                if (RacePresets != null) return true;
                if (AvailableHairColors != null) return true;
                if (FaceDetails != null) return true;
                if (DefaultFaceTexture != null) return true;
                if (TintMasks != null) return true;
                if (Model != null) return true;
                if (MorphRace != null) return true;
                if (ArmorRace != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                if (HeadParts.TryGet(out var HeadPartsItem))
                {
                    fg.AppendLine("HeadParts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(HeadPartsItem.Overall);
                        if (HeadPartsItem.Specific != null)
                        {
                            foreach (var subItem in HeadPartsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                AvailableMorphs?.ToString(fg);
                if (RacePresets.TryGet(out var RacePresetsItem))
                {
                    fg.AppendLine("RacePresets =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RacePresetsItem.Overall);
                        if (RacePresetsItem.Specific != null)
                        {
                            foreach (var subItem in RacePresetsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (AvailableHairColors.TryGet(out var AvailableHairColorsItem))
                {
                    fg.AppendLine("AvailableHairColors =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AvailableHairColorsItem.Overall);
                        if (AvailableHairColorsItem.Specific != null)
                        {
                            foreach (var subItem in AvailableHairColorsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (FaceDetails.TryGet(out var FaceDetailsItem))
                {
                    fg.AppendLine("FaceDetails =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(FaceDetailsItem.Overall);
                        if (FaceDetailsItem.Specific != null)
                        {
                            foreach (var subItem in FaceDetailsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(DefaultFaceTexture, "DefaultFaceTexture");
                if (TintMasks.TryGet(out var TintMasksItem))
                {
                    fg.AppendLine("TintMasks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TintMasksItem.Overall);
                        if (TintMasksItem.Specific != null)
                        {
                            foreach (var subItem in TintMasksItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Model?.ToString(fg);
                fg.AppendItem(MorphRace, "MorphRace");
                fg.AppendItem(ArmorRace, "ArmorRace");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.HeadParts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, HeadPartReference.ErrorMask?>>?>(ExceptionExt.Combine(this.HeadParts?.Overall, rhs.HeadParts?.Overall), ExceptionExt.Combine(this.HeadParts?.Specific, rhs.HeadParts?.Specific));
                ret.AvailableMorphs = this.AvailableMorphs.Combine(rhs.AvailableMorphs, (l, r) => l.Combine(r));
                ret.RacePresets = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.RacePresets?.Overall, rhs.RacePresets?.Overall), ExceptionExt.Combine(this.RacePresets?.Specific, rhs.RacePresets?.Specific));
                ret.AvailableHairColors = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.AvailableHairColors?.Overall, rhs.AvailableHairColors?.Overall), ExceptionExt.Combine(this.AvailableHairColors?.Specific, rhs.AvailableHairColors?.Specific));
                ret.FaceDetails = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.FaceDetails?.Overall, rhs.FaceDetails?.Overall), ExceptionExt.Combine(this.FaceDetails?.Specific, rhs.FaceDetails?.Specific));
                ret.DefaultFaceTexture = this.DefaultFaceTexture.Combine(rhs.DefaultFaceTexture);
                ret.TintMasks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintAssets.ErrorMask?>>?>(ExceptionExt.Combine(this.TintMasks?.Overall, rhs.TintMasks?.Overall), ExceptionExt.Combine(this.TintMasks?.Specific, rhs.TintMasks?.Specific));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.MorphRace = this.MorphRace.Combine(rhs.MorphRace);
                ret.ArmorRace = this.ArmorRace.Combine(rhs.ArmorRace);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public MaskItem<bool, HeadPartReference.TranslationMask?> HeadParts;
            public MaskItem<bool, AvailableMorphs.TranslationMask?> AvailableMorphs;
            public bool RacePresets;
            public bool AvailableHairColors;
            public bool FaceDetails;
            public bool DefaultFaceTexture;
            public MaskItem<bool, TintAssets.TranslationMask?> TintMasks;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool MorphRace;
            public bool ArmorRace;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.HeadParts = new MaskItem<bool, HeadPartReference.TranslationMask?>(defaultOn, null);
                this.AvailableMorphs = new MaskItem<bool, AvailableMorphs.TranslationMask?>(defaultOn, null);
                this.RacePresets = defaultOn;
                this.AvailableHairColors = defaultOn;
                this.FaceDetails = defaultOn;
                this.DefaultFaceTexture = defaultOn;
                this.TintMasks = new MaskItem<bool, TintAssets.TranslationMask?>(defaultOn, null);
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.MorphRace = defaultOn;
                this.ArmorRace = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((HeadParts?.Overall ?? true, HeadParts?.Specific?.GetCrystal()));
                ret.Add((AvailableMorphs?.Overall ?? true, AvailableMorphs?.Specific?.GetCrystal()));
                ret.Add((RacePresets, null));
                ret.Add((AvailableHairColors, null));
                ret.Add((FaceDetails, null));
                ret.Add((DefaultFaceTexture, null));
                ret.Add((TintMasks?.Overall ?? true, TintMasks?.Specific?.GetCrystal()));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((MorphRace, null));
                ret.Add((ArmorRace, null));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => HeadDataCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HeadDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static HeadData CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static HeadData CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new HeadData();
            ((HeadDataSetterCommon)((IHeadDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IHeadDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((HeadDataSetterCommon)((IHeadDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static HeadData GetNew()
        {
            return new HeadData();
        }

    }
    #endregion

    #region Interface
    public partial interface IHeadData :
        IHeadDataGetter,
        ILoquiObjectSetter<IHeadData>
    {
        new ExtendedList<HeadPartReference>? HeadParts { get; set; }
        new AvailableMorphs? AvailableMorphs { get; set; }
        new ExtendedList<IFormLink<Npc>>? RacePresets { get; set; }
        new ExtendedList<IFormLink<ColorRecord>>? AvailableHairColors { get; set; }
        new ExtendedList<IFormLink<TextureSet>>? FaceDetails { get; set; }
        new IFormLinkNullable<TextureSet> DefaultFaceTexture { get; }
        new ExtendedList<TintAssets>? TintMasks { get; set; }
        new Model? Model { get; set; }
        new IFormLinkNullable<Race> MorphRace { get; }
        new IFormLinkNullable<Race> ArmorRace { get; }
    }

    public partial interface IHeadDataGetter :
        ILoquiObject,
        ILoquiObject<IHeadDataGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        IReadOnlyList<IHeadPartReferenceGetter>? HeadParts { get; }
        IAvailableMorphsGetter? AvailableMorphs { get; }
        IReadOnlyList<IFormLinkGetter<INpcGetter>>? RacePresets { get; }
        IReadOnlyList<IFormLinkGetter<IColorRecordGetter>>? AvailableHairColors { get; }
        IReadOnlyList<IFormLinkGetter<ITextureSetGetter>>? FaceDetails { get; }
        IFormLinkNullableGetter<ITextureSetGetter> DefaultFaceTexture { get; }
        IReadOnlyList<ITintAssetsGetter>? TintMasks { get; }
        IModelGetter? Model { get; }
        IFormLinkNullableGetter<IRaceGetter> MorphRace { get; }
        IFormLinkNullableGetter<IRaceGetter> ArmorRace { get; }

    }

    #endregion

    #region Common MixIn
    public static class HeadDataMixIn
    {
        public static void Clear(this IHeadData item)
        {
            ((HeadDataSetterCommon)((IHeadDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static HeadData.Mask<bool> GetEqualsMask(
            this IHeadDataGetter item,
            IHeadDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IHeadDataGetter item,
            string? name = null,
            HeadData.Mask<bool>? printMask = null)
        {
            return ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IHeadDataGetter item,
            FileGeneration fg,
            string? name = null,
            HeadData.Mask<bool>? printMask = null)
        {
            ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IHeadDataGetter item,
            HeadData.Mask<bool?> checkMask)
        {
            return ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static HeadData.Mask<bool> GetHasBeenSetMask(this IHeadDataGetter item)
        {
            var ret = new HeadData.Mask<bool>(false);
            ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IHeadDataGetter item,
            IHeadDataGetter rhs)
        {
            return ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IHeadData lhs,
            IHeadDataGetter rhs,
            HeadData.TranslationMask? copyMask = null)
        {
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IHeadData lhs,
            IHeadDataGetter rhs,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = HeadData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IHeadData lhs,
            IHeadDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static HeadData DeepCopy(
            this IHeadDataGetter item,
            HeadData.TranslationMask? copyMask = null)
        {
            return ((HeadDataSetterTranslationCommon)((IHeadDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static HeadData DeepCopy(
            this IHeadDataGetter item,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? copyMask = null)
        {
            return ((HeadDataSetterTranslationCommon)((IHeadDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static HeadData DeepCopy(
            this IHeadDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((HeadDataSetterTranslationCommon)((IHeadDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IHeadData item,
            XElement node,
            HeadData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IHeadData item,
            XElement node,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = HeadData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IHeadData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((HeadDataSetterCommon)((IHeadDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadData item,
            string path,
            HeadData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadData item,
            string path,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadData item,
            string path,
            ErrorMaskBuilder? errorMask,
            HeadData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IHeadData item,
            Stream stream,
            HeadData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadData item,
            Stream stream,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            HeadData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IHeadData item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IHeadData item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadDataSetterCommon)((IHeadDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum HeadData_FieldIndex
    {
        HeadParts = 0,
        AvailableMorphs = 1,
        RacePresets = 2,
        AvailableHairColors = 3,
        FaceDetails = 4,
        DefaultFaceTexture = 5,
        TintMasks = 6,
        Model = 7,
        MorphRace = 8,
        ArmorRace = 9,
    }
    #endregion

    #region Registration
    public partial class HeadData_Registration : ILoquiRegistration
    {
        public static readonly HeadData_Registration Instance = new HeadData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 72,
            version: 0);

        public const string GUID = "c0a94c29-c6cd-4b72-b019-b2af3b6b2b34";

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(HeadData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(HeadData.ErrorMask);

        public static readonly Type ClassType = typeof(HeadData);

        public static readonly Type GetterType = typeof(IHeadDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHeadData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.HeadData";

        public const string Name = "HeadData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "HEADPARTS":
                    return (ushort)HeadData_FieldIndex.HeadParts;
                case "AVAILABLEMORPHS":
                    return (ushort)HeadData_FieldIndex.AvailableMorphs;
                case "RACEPRESETS":
                    return (ushort)HeadData_FieldIndex.RacePresets;
                case "AVAILABLEHAIRCOLORS":
                    return (ushort)HeadData_FieldIndex.AvailableHairColors;
                case "FACEDETAILS":
                    return (ushort)HeadData_FieldIndex.FaceDetails;
                case "DEFAULTFACETEXTURE":
                    return (ushort)HeadData_FieldIndex.DefaultFaceTexture;
                case "TINTMASKS":
                    return (ushort)HeadData_FieldIndex.TintMasks;
                case "MODEL":
                    return (ushort)HeadData_FieldIndex.Model;
                case "MORPHRACE":
                    return (ushort)HeadData_FieldIndex.MorphRace;
                case "ARMORRACE":
                    return (ushort)HeadData_FieldIndex.ArmorRace;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
            switch (enu)
            {
                case HeadData_FieldIndex.HeadParts:
                case HeadData_FieldIndex.RacePresets:
                case HeadData_FieldIndex.AvailableHairColors:
                case HeadData_FieldIndex.FaceDetails:
                case HeadData_FieldIndex.TintMasks:
                    return true;
                case HeadData_FieldIndex.AvailableMorphs:
                case HeadData_FieldIndex.DefaultFaceTexture:
                case HeadData_FieldIndex.Model:
                case HeadData_FieldIndex.MorphRace:
                case HeadData_FieldIndex.ArmorRace:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
            switch (enu)
            {
                case HeadData_FieldIndex.HeadParts:
                case HeadData_FieldIndex.AvailableMorphs:
                case HeadData_FieldIndex.TintMasks:
                case HeadData_FieldIndex.Model:
                    return true;
                case HeadData_FieldIndex.RacePresets:
                case HeadData_FieldIndex.AvailableHairColors:
                case HeadData_FieldIndex.FaceDetails:
                case HeadData_FieldIndex.DefaultFaceTexture:
                case HeadData_FieldIndex.MorphRace:
                case HeadData_FieldIndex.ArmorRace:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
            switch (enu)
            {
                case HeadData_FieldIndex.HeadParts:
                case HeadData_FieldIndex.AvailableMorphs:
                case HeadData_FieldIndex.RacePresets:
                case HeadData_FieldIndex.AvailableHairColors:
                case HeadData_FieldIndex.FaceDetails:
                case HeadData_FieldIndex.DefaultFaceTexture:
                case HeadData_FieldIndex.TintMasks:
                case HeadData_FieldIndex.Model:
                case HeadData_FieldIndex.MorphRace:
                case HeadData_FieldIndex.ArmorRace:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
            switch (enu)
            {
                case HeadData_FieldIndex.HeadParts:
                    return "HeadParts";
                case HeadData_FieldIndex.AvailableMorphs:
                    return "AvailableMorphs";
                case HeadData_FieldIndex.RacePresets:
                    return "RacePresets";
                case HeadData_FieldIndex.AvailableHairColors:
                    return "AvailableHairColors";
                case HeadData_FieldIndex.FaceDetails:
                    return "FaceDetails";
                case HeadData_FieldIndex.DefaultFaceTexture:
                    return "DefaultFaceTexture";
                case HeadData_FieldIndex.TintMasks:
                    return "TintMasks";
                case HeadData_FieldIndex.Model:
                    return "Model";
                case HeadData_FieldIndex.MorphRace:
                    return "MorphRace";
                case HeadData_FieldIndex.ArmorRace:
                    return "ArmorRace";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
            switch (enu)
            {
                case HeadData_FieldIndex.HeadParts:
                case HeadData_FieldIndex.AvailableMorphs:
                case HeadData_FieldIndex.RacePresets:
                case HeadData_FieldIndex.AvailableHairColors:
                case HeadData_FieldIndex.FaceDetails:
                case HeadData_FieldIndex.DefaultFaceTexture:
                case HeadData_FieldIndex.TintMasks:
                case HeadData_FieldIndex.Model:
                case HeadData_FieldIndex.MorphRace:
                case HeadData_FieldIndex.ArmorRace:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
            switch (enu)
            {
                case HeadData_FieldIndex.HeadParts:
                case HeadData_FieldIndex.AvailableMorphs:
                case HeadData_FieldIndex.RacePresets:
                case HeadData_FieldIndex.AvailableHairColors:
                case HeadData_FieldIndex.FaceDetails:
                case HeadData_FieldIndex.DefaultFaceTexture:
                case HeadData_FieldIndex.TintMasks:
                case HeadData_FieldIndex.Model:
                case HeadData_FieldIndex.MorphRace:
                case HeadData_FieldIndex.ArmorRace:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
            switch (enu)
            {
                case HeadData_FieldIndex.HeadParts:
                    return typeof(ExtendedList<HeadPartReference>);
                case HeadData_FieldIndex.AvailableMorphs:
                    return typeof(AvailableMorphs);
                case HeadData_FieldIndex.RacePresets:
                    return typeof(ExtendedList<IFormLink<Npc>>);
                case HeadData_FieldIndex.AvailableHairColors:
                    return typeof(ExtendedList<IFormLink<ColorRecord>>);
                case HeadData_FieldIndex.FaceDetails:
                    return typeof(ExtendedList<IFormLink<TextureSet>>);
                case HeadData_FieldIndex.DefaultFaceTexture:
                    return typeof(IFormLinkNullable<TextureSet>);
                case HeadData_FieldIndex.TintMasks:
                    return typeof(ExtendedList<TintAssets>);
                case HeadData_FieldIndex.Model:
                    return typeof(Model);
                case HeadData_FieldIndex.MorphRace:
                    return typeof(IFormLinkNullable<Race>);
                case HeadData_FieldIndex.ArmorRace:
                    return typeof(IFormLinkNullable<Race>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(HeadDataXmlWriteTranslation);
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType HEAD_HEADER = new RecordType("HEAD");
        public static readonly RecordType MPAI_HEADER = new RecordType("MPAI");
        public static readonly RecordType RPRM_HEADER = new RecordType("RPRM");
        public static readonly RecordType ACHM_HEADER = new RecordType("ACHM");
        public static readonly RecordType FTSM_HEADER = new RecordType("FTSM");
        public static readonly RecordType DFTM_HEADER = new RecordType("DFTM");
        public static readonly RecordType TINI_HEADER = new RecordType("TINI");
        public static readonly RecordType TINT_HEADER = new RecordType("TINT");
        public static readonly RecordType TINP_HEADER = new RecordType("TINP");
        public static readonly RecordType TIND_HEADER = new RecordType("TIND");
        public static readonly RecordType TINC_HEADER = new RecordType("TINC");
        public static readonly RecordType TINV_HEADER = new RecordType("TINV");
        public static readonly RecordType TIRS_HEADER = new RecordType("TIRS");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType NAM8_HEADER = new RecordType("NAM8");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        INDX_HEADER,
                        HEAD_HEADER,
                        MPAI_HEADER,
                        RPRM_HEADER,
                        ACHM_HEADER,
                        FTSM_HEADER,
                        DFTM_HEADER,
                        TINI_HEADER,
                        TINT_HEADER,
                        TINP_HEADER,
                        TIND_HEADER,
                        TINC_HEADER,
                        TINV_HEADER,
                        TIRS_HEADER,
                        MODL_HEADER,
                        NAM8_HEADER,
                        RNAM_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 10;
        public static readonly Type BinaryWriteTranslation = typeof(HeadDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class HeadDataSetterCommon
    {
        public static readonly HeadDataSetterCommon Instance = new HeadDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHeadData item)
        {
            ClearPartial();
            item.HeadParts = null;
            item.AvailableMorphs = null;
            item.RacePresets = null;
            item.AvailableHairColors = null;
            item.FaceDetails = null;
            item.DefaultFaceTexture.FormKey = null;
            item.TintMasks = null;
            item.Model = null;
            item.MorphRace.FormKey = null;
            item.ArmorRace.FormKey = null;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IHeadData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    HeadDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IHeadData item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IHeadData item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x58444E49: // INDX
                case 0x44414548: // HEAD
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.HeadParts) return TryGet<int?>.Failure;
                    item.HeadParts = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<HeadPartReference>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: HeadPartReference_Registration.TriggeringRecordTypes,
                            masterReferences: masterReferences,
                            transl: (MutagenFrame r, out HeadPartReference listSubItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<HeadPartReference>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem,
                                    masterReferences: m);
                            })
                        .ToExtendedList<HeadPartReference>();
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.HeadParts);
                }
                case 0x4941504D: // MPAI
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.AvailableMorphs) return TryGet<int?>.Failure;
                    item.AvailableMorphs = Mutagen.Bethesda.Skyrim.AvailableMorphs.CreateFromBinary(
                        frame: frame,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.AvailableMorphs);
                }
                case 0x4D525052: // RPRM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.RacePresets) return TryGet<int?>.Failure;
                    item.RacePresets = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Npc>>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: HeadData_Registration.RPRM_HEADER,
                            masterReferences: masterReferences,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Npc>>();
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.RacePresets);
                }
                case 0x4D484341: // ACHM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.AvailableHairColors) return TryGet<int?>.Failure;
                    item.AvailableHairColors = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ColorRecord>>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: HeadData_Registration.ACHM_HEADER,
                            masterReferences: masterReferences,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<ColorRecord>>();
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.AvailableHairColors);
                }
                case 0x4D535446: // FTSM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.FaceDetails) return TryGet<int?>.Failure;
                    item.FaceDetails = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<TextureSet>>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: HeadData_Registration.FTSM_HEADER,
                            masterReferences: masterReferences,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<TextureSet>>();
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.FaceDetails);
                }
                case 0x4D544644: // DFTM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.DefaultFaceTexture) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.DefaultFaceTexture.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.DefaultFaceTexture);
                }
                case 0x494E4954: // TINI
                case 0x544E4954: // TINT
                case 0x504E4954: // TINP
                case 0x444E4954: // TIND
                case 0x434E4954: // TINC
                case 0x564E4954: // TINV
                case 0x53524954: // TIRS
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.TintMasks) return TryGet<int?>.Failure;
                    item.TintMasks = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<TintAssets>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: TintAssets_Registration.TriggeringRecordTypes,
                            masterReferences: masterReferences,
                            transl: (MutagenFrame r, out TintAssets listSubItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<TintAssets>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem,
                                    masterReferences: m);
                            })
                        .ToExtendedList<TintAssets>();
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.TintMasks);
                }
                case 0x4C444F4D: // MODL
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.Model) return TryGet<int?>.Failure;
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.Model);
                }
                case 0x384D414E: // NAM8
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.MorphRace) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MorphRace.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.MorphRace);
                }
                case 0x4D414E52: // RNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.ArmorRace) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.ArmorRace.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.ArmorRace);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IHeadData item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class HeadDataCommon
    {
        public static readonly HeadDataCommon Instance = new HeadDataCommon();

        public HeadData.Mask<bool> GetEqualsMask(
            IHeadDataGetter item,
            IHeadDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new HeadData.Mask<bool>(false);
            ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHeadDataGetter item,
            IHeadDataGetter rhs,
            HeadData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.HeadParts = item.HeadParts.CollectionEqualsHelper(
                rhs.HeadParts,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.AvailableMorphs = EqualsMaskHelper.EqualsHelper(
                item.AvailableMorphs,
                rhs.AvailableMorphs,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.RacePresets = item.RacePresets.CollectionEqualsHelper(
                rhs.RacePresets,
                (l, r) => object.Equals(l, r),
                include);
            ret.AvailableHairColors = item.AvailableHairColors.CollectionEqualsHelper(
                rhs.AvailableHairColors,
                (l, r) => object.Equals(l, r),
                include);
            ret.FaceDetails = item.FaceDetails.CollectionEqualsHelper(
                rhs.FaceDetails,
                (l, r) => object.Equals(l, r),
                include);
            ret.DefaultFaceTexture = object.Equals(item.DefaultFaceTexture, rhs.DefaultFaceTexture);
            ret.TintMasks = item.TintMasks.CollectionEqualsHelper(
                rhs.TintMasks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MorphRace = object.Equals(item.MorphRace, rhs.MorphRace);
            ret.ArmorRace = object.Equals(item.ArmorRace, rhs.ArmorRace);
        }
        
        public string ToString(
            IHeadDataGetter item,
            string? name = null,
            HeadData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IHeadDataGetter item,
            FileGeneration fg,
            string? name = null,
            HeadData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"HeadData =>");
            }
            else
            {
                fg.AppendLine($"{name} (HeadData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IHeadDataGetter item,
            FileGeneration fg,
            HeadData.Mask<bool>? printMask = null)
        {
            if ((printMask?.HeadParts?.Overall ?? true)
                && item.HeadParts.TryGet(out var HeadPartsItem))
            {
                fg.AppendLine("HeadParts =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in HeadPartsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.AvailableMorphs?.Overall ?? true)
                && item.AvailableMorphs.TryGet(out var AvailableMorphsItem))
            {
                AvailableMorphsItem?.ToString(fg, "AvailableMorphs");
            }
            if ((printMask?.RacePresets?.Overall ?? true)
                && item.RacePresets.TryGet(out var RacePresetsItem))
            {
                fg.AppendLine("RacePresets =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in RacePresetsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.AvailableHairColors?.Overall ?? true)
                && item.AvailableHairColors.TryGet(out var AvailableHairColorsItem))
            {
                fg.AppendLine("AvailableHairColors =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in AvailableHairColorsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.FaceDetails?.Overall ?? true)
                && item.FaceDetails.TryGet(out var FaceDetailsItem))
            {
                fg.AppendLine("FaceDetails =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in FaceDetailsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.DefaultFaceTexture ?? true)
                && item.DefaultFaceTexture.TryGet(out var DefaultFaceTextureItem))
            {
                fg.AppendItem(DefaultFaceTextureItem, "DefaultFaceTexture");
            }
            if ((printMask?.TintMasks?.Overall ?? true)
                && item.TintMasks.TryGet(out var TintMasksItem))
            {
                fg.AppendLine("TintMasks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in TintMasksItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.MorphRace ?? true)
                && item.MorphRace.TryGet(out var MorphRaceItem))
            {
                fg.AppendItem(MorphRaceItem, "MorphRace");
            }
            if ((printMask?.ArmorRace ?? true)
                && item.ArmorRace.TryGet(out var ArmorRaceItem))
            {
                fg.AppendItem(ArmorRaceItem, "ArmorRace");
            }
        }
        
        public bool HasBeenSet(
            IHeadDataGetter item,
            HeadData.Mask<bool?> checkMask)
        {
            if (checkMask.HeadParts?.Overall.HasValue ?? false && checkMask.HeadParts!.Overall.Value != (item.HeadParts != null)) return false;
            if (checkMask.AvailableMorphs?.Overall.HasValue ?? false && checkMask.AvailableMorphs.Overall.Value != (item.AvailableMorphs != null)) return false;
            if (checkMask.AvailableMorphs?.Specific != null && (item.AvailableMorphs == null || !item.AvailableMorphs.HasBeenSet(checkMask.AvailableMorphs.Specific))) return false;
            if (checkMask.RacePresets?.Overall.HasValue ?? false && checkMask.RacePresets!.Overall.Value != (item.RacePresets != null)) return false;
            if (checkMask.AvailableHairColors?.Overall.HasValue ?? false && checkMask.AvailableHairColors!.Overall.Value != (item.AvailableHairColors != null)) return false;
            if (checkMask.FaceDetails?.Overall.HasValue ?? false && checkMask.FaceDetails!.Overall.Value != (item.FaceDetails != null)) return false;
            if (checkMask.DefaultFaceTexture.HasValue && checkMask.DefaultFaceTexture.Value != (item.DefaultFaceTexture.FormKey != null)) return false;
            if (checkMask.TintMasks?.Overall.HasValue ?? false && checkMask.TintMasks!.Overall.Value != (item.TintMasks != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.MorphRace.HasValue && checkMask.MorphRace.Value != (item.MorphRace.FormKey != null)) return false;
            if (checkMask.ArmorRace.HasValue && checkMask.ArmorRace.Value != (item.ArmorRace.FormKey != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IHeadDataGetter item,
            HeadData.Mask<bool> mask)
        {
            if (item.HeadParts.TryGet(out var HeadPartsItem))
            {
                mask.HeadParts = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, HeadPartReference.Mask<bool>?>>?>(true, HeadPartsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, HeadPartReference.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            var itemAvailableMorphs = item.AvailableMorphs;
            mask.AvailableMorphs = new MaskItem<bool, AvailableMorphs.Mask<bool>?>(itemAvailableMorphs != null, itemAvailableMorphs?.GetHasBeenSetMask());
            mask.RacePresets = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.RacePresets != null), default);
            mask.AvailableHairColors = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.AvailableHairColors != null), default);
            mask.FaceDetails = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.FaceDetails != null), default);
            mask.DefaultFaceTexture = (item.DefaultFaceTexture.FormKey != null);
            if (item.TintMasks.TryGet(out var TintMasksItem))
            {
                mask.TintMasks = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, TintAssets.Mask<bool>?>>?>(true, TintMasksItem.WithIndex().Select((i) => new MaskItemIndexed<bool, TintAssets.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.MorphRace = (item.MorphRace.FormKey != null);
            mask.ArmorRace = (item.ArmorRace.FormKey != null);
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHeadDataGetter? lhs,
            IHeadDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.HeadParts.SequenceEqual(rhs.HeadParts)) return false;
            if (!object.Equals(lhs.AvailableMorphs, rhs.AvailableMorphs)) return false;
            if (!lhs.RacePresets.SequenceEqual(rhs.RacePresets)) return false;
            if (!lhs.AvailableHairColors.SequenceEqual(rhs.AvailableHairColors)) return false;
            if (!lhs.FaceDetails.SequenceEqual(rhs.FaceDetails)) return false;
            if (!lhs.DefaultFaceTexture.Equals(rhs.DefaultFaceTexture)) return false;
            if (!lhs.TintMasks.SequenceEqual(rhs.TintMasks)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!lhs.MorphRace.Equals(rhs.MorphRace)) return false;
            if (!lhs.ArmorRace.Equals(rhs.ArmorRace)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IHeadDataGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.HeadParts).CombineHashCode(ret);
            if (item.AvailableMorphs.TryGet(out var AvailableMorphsitem))
            {
                ret = HashHelper.GetHashCode(AvailableMorphsitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.RacePresets).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AvailableHairColors).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FaceDetails).CombineHashCode(ret);
            if (item.DefaultFaceTexture.TryGet(out var DefaultFaceTextureitem))
            {
                ret = HashHelper.GetHashCode(DefaultFaceTextureitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.TintMasks).CombineHashCode(ret);
            if (item.Model.TryGet(out var Modelitem))
            {
                ret = HashHelper.GetHashCode(Modelitem).CombineHashCode(ret);
            }
            if (item.MorphRace.TryGet(out var MorphRaceitem))
            {
                ret = HashHelper.GetHashCode(MorphRaceitem).CombineHashCode(ret);
            }
            if (item.ArmorRace.TryGet(out var ArmorRaceitem))
            {
                ret = HashHelper.GetHashCode(ArmorRaceitem).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return HeadData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IHeadDataGetter obj)
        {
            if (obj.HeadParts != null)
            {
                foreach (var item in obj.HeadParts.SelectMany(f => f.Links))
                {
                    yield return item;
                }
            }
            if (obj.RacePresets != null)
            {
                foreach (var item in obj.RacePresets)
                {
                    yield return item;
                }
            }
            if (obj.AvailableHairColors != null)
            {
                foreach (var item in obj.AvailableHairColors)
                {
                    yield return item;
                }
            }
            if (obj.FaceDetails != null)
            {
                foreach (var item in obj.FaceDetails)
                {
                    yield return item;
                }
            }
            yield return obj.DefaultFaceTexture;
            if (obj.TintMasks != null)
            {
                foreach (var item in obj.TintMasks.SelectMany(f => f.Links))
                {
                    yield return item;
                }
            }
            if (obj.Model != null)
            {
                foreach (var item in obj.Model.Links)
                {
                    yield return item;
                }
            }
            yield return obj.MorphRace;
            yield return obj.ArmorRace;
            yield break;
        }
        
        #endregion
        
    }
    public partial class HeadDataSetterTranslationCommon
    {
        public static readonly HeadDataSetterTranslationCommon Instance = new HeadDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IHeadData item,
            IHeadDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.HeadParts) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.HeadParts);
                try
                {
                    if ((rhs.HeadParts != null))
                    {
                        item.HeadParts = 
                            rhs.HeadParts
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<HeadPartReference>();
                    }
                    else
                    {
                        item.HeadParts = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.AvailableMorphs) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.AvailableMorphs);
                try
                {
                    if(rhs.AvailableMorphs.TryGet(out var rhsAvailableMorphs))
                    {
                        item.AvailableMorphs = rhsAvailableMorphs.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)HeadData_FieldIndex.AvailableMorphs));
                    }
                    else
                    {
                        item.AvailableMorphs = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.RacePresets) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.RacePresets);
                try
                {
                    if ((rhs.RacePresets != null))
                    {
                        item.RacePresets = 
                            rhs.RacePresets
                            .Select(r => new FormLink<Npc>(r.FormKey))
                            .ToExtendedList<IFormLink<Npc>>();
                    }
                    else
                    {
                        item.RacePresets = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.AvailableHairColors) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.AvailableHairColors);
                try
                {
                    if ((rhs.AvailableHairColors != null))
                    {
                        item.AvailableHairColors = 
                            rhs.AvailableHairColors
                            .Select(r => new FormLink<ColorRecord>(r.FormKey))
                            .ToExtendedList<IFormLink<ColorRecord>>();
                    }
                    else
                    {
                        item.AvailableHairColors = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.FaceDetails) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.FaceDetails);
                try
                {
                    if ((rhs.FaceDetails != null))
                    {
                        item.FaceDetails = 
                            rhs.FaceDetails
                            .Select(r => new FormLink<TextureSet>(r.FormKey))
                            .ToExtendedList<IFormLink<TextureSet>>();
                    }
                    else
                    {
                        item.FaceDetails = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.DefaultFaceTexture) ?? true))
            {
                item.DefaultFaceTexture.FormKey = rhs.DefaultFaceTexture.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.TintMasks) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.TintMasks);
                try
                {
                    if ((rhs.TintMasks != null))
                    {
                        item.TintMasks = 
                            rhs.TintMasks
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<TintAssets>();
                    }
                    else
                    {
                        item.TintMasks = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)HeadData_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.MorphRace) ?? true))
            {
                item.MorphRace.FormKey = rhs.MorphRace.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.ArmorRace) ?? true))
            {
                item.ArmorRace.FormKey = rhs.ArmorRace.FormKey;
            }
        }
        
        #endregion
        
        public HeadData DeepCopy(
            IHeadDataGetter item,
            HeadData.TranslationMask? copyMask = null)
        {
            HeadData ret = (HeadData)((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public HeadData DeepCopy(
            IHeadDataGetter item,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? copyMask = null)
        {
            HeadData ret = (HeadData)((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public HeadData DeepCopy(
            IHeadDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            HeadData ret = (HeadData)((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class HeadData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadData_Registration.Instance;
        public static HeadData_Registration Registration => HeadData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HeadDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return HeadDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HeadDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class HeadDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static HeadDataXmlWriteTranslation Instance = new HeadDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IHeadDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((item.HeadParts != null)
                && (translationMask?.GetShouldTranslate((int)HeadData_FieldIndex.HeadParts) ?? true))
            {
                ListXmlTranslation<IHeadPartReferenceGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.HeadParts),
                    item: item.HeadParts,
                    fieldIndex: (int)HeadData_FieldIndex.HeadParts,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)HeadData_FieldIndex.HeadParts),
                    transl: (XElement subNode, IHeadPartReferenceGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((HeadPartReferenceXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((item.AvailableMorphs != null)
                && (translationMask?.GetShouldTranslate((int)HeadData_FieldIndex.AvailableMorphs) ?? true))
            {
                if (item.AvailableMorphs.TryGet(out var AvailableMorphsItem))
                {
                    ((AvailableMorphsXmlWriteTranslation)((IXmlItem)AvailableMorphsItem).XmlWriteTranslator).Write(
                        item: AvailableMorphsItem,
                        node: node,
                        name: nameof(item.AvailableMorphs),
                        fieldIndex: (int)HeadData_FieldIndex.AvailableMorphs,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)HeadData_FieldIndex.AvailableMorphs));
                }
            }
            if ((item.RacePresets != null)
                && (translationMask?.GetShouldTranslate((int)HeadData_FieldIndex.RacePresets) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<INpcGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.RacePresets),
                    item: item.RacePresets,
                    fieldIndex: (int)HeadData_FieldIndex.RacePresets,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)HeadData_FieldIndex.RacePresets),
                    transl: (XElement subNode, IFormLinkGetter<INpcGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.AvailableHairColors != null)
                && (translationMask?.GetShouldTranslate((int)HeadData_FieldIndex.AvailableHairColors) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IColorRecordGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.AvailableHairColors),
                    item: item.AvailableHairColors,
                    fieldIndex: (int)HeadData_FieldIndex.AvailableHairColors,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)HeadData_FieldIndex.AvailableHairColors),
                    transl: (XElement subNode, IFormLinkGetter<IColorRecordGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.FaceDetails != null)
                && (translationMask?.GetShouldTranslate((int)HeadData_FieldIndex.FaceDetails) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<ITextureSetGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.FaceDetails),
                    item: item.FaceDetails,
                    fieldIndex: (int)HeadData_FieldIndex.FaceDetails,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)HeadData_FieldIndex.FaceDetails),
                    transl: (XElement subNode, IFormLinkGetter<ITextureSetGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.DefaultFaceTexture.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)HeadData_FieldIndex.DefaultFaceTexture) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DefaultFaceTexture),
                    item: item.DefaultFaceTexture.FormKey,
                    fieldIndex: (int)HeadData_FieldIndex.DefaultFaceTexture,
                    errorMask: errorMask);
            }
            if ((item.TintMasks != null)
                && (translationMask?.GetShouldTranslate((int)HeadData_FieldIndex.TintMasks) ?? true))
            {
                ListXmlTranslation<ITintAssetsGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.TintMasks),
                    item: item.TintMasks,
                    fieldIndex: (int)HeadData_FieldIndex.TintMasks,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)HeadData_FieldIndex.TintMasks),
                    transl: (XElement subNode, ITintAssetsGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((TintAssetsXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)HeadData_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)HeadData_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)HeadData_FieldIndex.Model));
                }
            }
            if ((item.MorphRace.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)HeadData_FieldIndex.MorphRace) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MorphRace),
                    item: item.MorphRace.FormKey,
                    fieldIndex: (int)HeadData_FieldIndex.MorphRace,
                    errorMask: errorMask);
            }
            if ((item.ArmorRace.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)HeadData_FieldIndex.ArmorRace) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ArmorRace),
                    item: item.ArmorRace.FormKey,
                    fieldIndex: (int)HeadData_FieldIndex.ArmorRace,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IHeadDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.HeadData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.HeadData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IHeadDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IHeadDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IHeadDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class HeadDataXmlCreateTranslation
    {
        public readonly static HeadDataXmlCreateTranslation Instance = new HeadDataXmlCreateTranslation();

        public static void FillPublicXml(
            IHeadData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    HeadDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IHeadData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HeadParts":
                    errorMask?.PushIndex((int)HeadData_FieldIndex.HeadParts);
                    try
                    {
                        if (ListXmlTranslation<HeadPartReference>.Instance.Parse(
                            node: node,
                            enumer: out var HeadPartsItem,
                            transl: LoquiXmlTranslation<HeadPartReference>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.HeadParts = HeadPartsItem.ToExtendedList();
                        }
                        else
                        {
                            item.HeadParts = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AvailableMorphs":
                    errorMask?.PushIndex((int)HeadData_FieldIndex.AvailableMorphs);
                    try
                    {
                        item.AvailableMorphs = LoquiXmlTranslation<AvailableMorphs>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)HeadData_FieldIndex.AvailableMorphs));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RacePresets":
                    errorMask?.PushIndex((int)HeadData_FieldIndex.RacePresets);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Npc>>.Instance.Parse(
                            node: node,
                            enumer: out var RacePresetsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.RacePresets = RacePresetsItem.ToExtendedList();
                        }
                        else
                        {
                            item.RacePresets = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AvailableHairColors":
                    errorMask?.PushIndex((int)HeadData_FieldIndex.AvailableHairColors);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<ColorRecord>>.Instance.Parse(
                            node: node,
                            enumer: out var AvailableHairColorsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.AvailableHairColors = AvailableHairColorsItem.ToExtendedList();
                        }
                        else
                        {
                            item.AvailableHairColors = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceDetails":
                    errorMask?.PushIndex((int)HeadData_FieldIndex.FaceDetails);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<TextureSet>>.Instance.Parse(
                            node: node,
                            enumer: out var FaceDetailsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.FaceDetails = FaceDetailsItem.ToExtendedList();
                        }
                        else
                        {
                            item.FaceDetails = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DefaultFaceTexture":
                    errorMask?.PushIndex((int)HeadData_FieldIndex.DefaultFaceTexture);
                    try
                    {
                        item.DefaultFaceTexture.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TintMasks":
                    errorMask?.PushIndex((int)HeadData_FieldIndex.TintMasks);
                    try
                    {
                        if (ListXmlTranslation<TintAssets>.Instance.Parse(
                            node: node,
                            enumer: out var TintMasksItem,
                            transl: LoquiXmlTranslation<TintAssets>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.TintMasks = TintMasksItem.ToExtendedList();
                        }
                        else
                        {
                            item.TintMasks = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)HeadData_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)HeadData_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MorphRace":
                    errorMask?.PushIndex((int)HeadData_FieldIndex.MorphRace);
                    try
                    {
                        item.MorphRace.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ArmorRace":
                    errorMask?.PushIndex((int)HeadData_FieldIndex.ArmorRace);
                    try
                    {
                        item.ArmorRace.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class HeadDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IHeadDataGetter item,
            XElement node,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((HeadDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = HeadData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IHeadDataGetter item,
            string path,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IHeadDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IHeadDataGetter item,
            Stream stream,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IHeadDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IHeadDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((HeadDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IHeadDataGetter item,
            XElement node,
            string? name = null,
            HeadData.TranslationMask? translationMask = null)
        {
            ((HeadDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IHeadDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((HeadDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IHeadDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((HeadDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class HeadDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static HeadDataBinaryWriteTranslation Instance = new HeadDataBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IHeadDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferenceReader masterReferences)
        {
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IHeadPartReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.HeadParts,
                masterReferences: masterReferences,
                transl: (MutagenWriter subWriter, IHeadPartReferenceGetter subItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((HeadPartReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            masterReferences: m);
                    }
                });
            if (item.AvailableMorphs.TryGet(out var AvailableMorphsItem))
            {
                ((AvailableMorphsBinaryWriteTranslation)((IBinaryItem)AvailableMorphsItem).BinaryWriteTranslator).Write(
                    item: AvailableMorphsItem,
                    writer: writer,
                    masterReferences: masterReferences);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<INpcGetter>>.Instance.Write(
                writer: writer,
                items: item.RacePresets,
                masterReferences: masterReferences,
                transl: (MutagenWriter subWriter, IFormLinkGetter<INpcGetter> subItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(HeadData_Registration.RPRM_HEADER),
                        masterReferences: m);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IColorRecordGetter>>.Instance.Write(
                writer: writer,
                items: item.AvailableHairColors,
                masterReferences: masterReferences,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IColorRecordGetter> subItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(HeadData_Registration.ACHM_HEADER),
                        masterReferences: m);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<ITextureSetGetter>>.Instance.Write(
                writer: writer,
                items: item.FaceDetails,
                masterReferences: masterReferences,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ITextureSetGetter> subItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(HeadData_Registration.FTSM_HEADER),
                        masterReferences: m);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultFaceTexture,
                header: recordTypeConverter.ConvertToCustom(HeadData_Registration.DFTM_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ITintAssetsGetter>.Instance.Write(
                writer: writer,
                items: item.TintMasks,
                masterReferences: masterReferences,
                transl: (MutagenWriter subWriter, ITintAssetsGetter subItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((TintAssetsBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            masterReferences: m);
                    }
                });
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    masterReferences: masterReferences);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MorphRace,
                header: recordTypeConverter.ConvertToCustom(HeadData_Registration.NAM8_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ArmorRace,
                header: recordTypeConverter.ConvertToCustom(HeadData_Registration.RNAM_HEADER),
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            IHeadDataGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IHeadDataGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class HeadDataBinaryCreateTranslation
    {
        public readonly static HeadDataBinaryCreateTranslation Instance = new HeadDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class HeadDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IHeadDataGetter item,
            MutagenWriter writer,
            MasterReferenceReader masterReferences)
        {
            ((HeadDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class HeadDataBinaryOverlay :
        BinaryOverlay,
        IHeadDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadData_Registration.Instance;
        public static HeadData_Registration Registration => HeadData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HeadDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HeadDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IHeadDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IHeadDataGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => HeadDataCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => HeadDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((HeadDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HeadDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public IReadOnlyList<IHeadPartReferenceGetter>? HeadParts { get; private set; }
        #region AvailableMorphs
        public IAvailableMorphsGetter? AvailableMorphs { get; private set; }
        public bool AvailableMorphs_IsSet => AvailableMorphs != null;
        #endregion
        public IReadOnlyList<IFormLinkGetter<INpcGetter>>? RacePresets { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IColorRecordGetter>>? AvailableHairColors { get; private set; }
        public IReadOnlyList<IFormLinkGetter<ITextureSetGetter>>? FaceDetails { get; private set; }
        #region DefaultFaceTexture
        private int? _DefaultFaceTextureLocation;
        public bool DefaultFaceTexture_IsSet => _DefaultFaceTextureLocation.HasValue;
        public IFormLinkNullableGetter<ITextureSetGetter> DefaultFaceTexture => _DefaultFaceTextureLocation.HasValue ? new FormLinkNullable<ITextureSetGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _DefaultFaceTextureLocation.Value, _package.Meta)))) : FormLinkNullable<ITextureSetGetter>.Empty;
        #endregion
        public IReadOnlyList<ITintAssetsGetter>? TintMasks { get; private set; }
        #region Model
        public IModelGetter? Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region MorphRace
        private int? _MorphRaceLocation;
        public bool MorphRace_IsSet => _MorphRaceLocation.HasValue;
        public IFormLinkNullableGetter<IRaceGetter> MorphRace => _MorphRaceLocation.HasValue ? new FormLinkNullable<IRaceGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _MorphRaceLocation.Value, _package.Meta)))) : FormLinkNullable<IRaceGetter>.Empty;
        #endregion
        #region ArmorRace
        private int? _ArmorRaceLocation;
        public bool ArmorRace_IsSet => _ArmorRaceLocation.HasValue;
        public IFormLinkNullableGetter<IRaceGetter> ArmorRace => _ArmorRaceLocation.HasValue ? new FormLinkNullable<IRaceGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ArmorRaceLocation.Value, _package.Meta)))) : FormLinkNullable<IRaceGetter>.Empty;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected HeadDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static HeadDataBinaryOverlay HeadDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new HeadDataBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x58444E49: // INDX
                case 0x44414548: // HEAD
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.HeadParts) return TryGet<int?>.Failure;
                    this.HeadParts = this.ParseRepeatedTypelessSubrecord<HeadPartReferenceBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: HeadPartReference_Registration.TriggeringRecordTypes,
                        factory:  HeadPartReferenceBinaryOverlay.HeadPartReferenceFactory);
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.HeadParts);
                }
                case 0x4941504D: // MPAI
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.AvailableMorphs) return TryGet<int?>.Failure;
                    this.AvailableMorphs = AvailableMorphsBinaryOverlay.AvailableMorphsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.AvailableMorphs);
                }
                case 0x4D525052: // RPRM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.RacePresets) return TryGet<int?>.Failure;
                    this.RacePresets = BinaryOverlaySetList<IFormLinkGetter<INpcGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<INpcGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.RacePresets);
                }
                case 0x4D484341: // ACHM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.AvailableHairColors) return TryGet<int?>.Failure;
                    this.AvailableHairColors = BinaryOverlaySetList<IFormLinkGetter<IColorRecordGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IColorRecordGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.AvailableHairColors);
                }
                case 0x4D535446: // FTSM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.FaceDetails) return TryGet<int?>.Failure;
                    this.FaceDetails = BinaryOverlaySetList<IFormLinkGetter<ITextureSetGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<ITextureSetGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.FaceDetails);
                }
                case 0x4D544644: // DFTM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.DefaultFaceTexture) return TryGet<int?>.Failure;
                    _DefaultFaceTextureLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.DefaultFaceTexture);
                }
                case 0x494E4954: // TINI
                case 0x544E4954: // TINT
                case 0x504E4954: // TINP
                case 0x444E4954: // TIND
                case 0x434E4954: // TINC
                case 0x564E4954: // TINV
                case 0x53524954: // TIRS
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.TintMasks) return TryGet<int?>.Failure;
                    this.TintMasks = this.ParseRepeatedTypelessSubrecord<TintAssetsBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: TintAssets_Registration.TriggeringRecordTypes,
                        factory:  TintAssetsBinaryOverlay.TintAssetsFactory);
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.TintMasks);
                }
                case 0x4C444F4D: // MODL
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.Model) return TryGet<int?>.Failure;
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.Model);
                }
                case 0x384D414E: // NAM8
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.MorphRace) return TryGet<int?>.Failure;
                    _MorphRaceLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.MorphRace);
                }
                case 0x4D414E52: // RNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadData_FieldIndex.ArmorRace) return TryGet<int?>.Failure;
                    _ArmorRaceLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)HeadData_FieldIndex.ArmorRace);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

