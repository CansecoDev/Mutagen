/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class HeadPartReference :
        IHeadPartReference,
        ILoquiObjectSetter<HeadPartReference>,
        IEquatable<HeadPartReference>,
        IEqualsMask
    {
        #region Ctor
        public HeadPartReference()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Number
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int32? _Number;
        public Int32? Number
        {
            get => this._Number;
            set => this._Number = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IHeadPartReferenceGetter.Number => this.Number;
        #endregion
        #region Head
        public FormLinkNullable<HeadPart> Head { get; set; } = new FormLinkNullable<HeadPart>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IHeadPartGetter> IHeadPartReferenceGetter.Head => this.Head;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            HeadPartReferenceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IHeadPartReferenceGetter rhs)) return false;
            return ((HeadPartReferenceCommon)((IHeadPartReferenceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(HeadPartReference obj)
        {
            return ((HeadPartReferenceCommon)((IHeadPartReferenceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((HeadPartReferenceCommon)((IHeadPartReferenceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => HeadPartReferenceXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((HeadPartReferenceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static HeadPartReference CreateFromXml(
            XElement node,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static HeadPartReference CreateFromXml(
            XElement node,
            out HeadPartReference.ErrorMask errorMask,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = HeadPartReference.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static HeadPartReference CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new HeadPartReference();
            ((HeadPartReferenceSetterCommon)((IHeadPartReferenceGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static HeadPartReference CreateFromXml(
            string path,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static HeadPartReference CreateFromXml(
            string path,
            out HeadPartReference.ErrorMask errorMask,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static HeadPartReference CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static HeadPartReference CreateFromXml(
            Stream stream,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static HeadPartReference CreateFromXml(
            Stream stream,
            out HeadPartReference.ErrorMask errorMask,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static HeadPartReference CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Number = initialValue;
                this.Head = initialValue;
            }

            public Mask(
                TItem Number,
                TItem Head)
            {
                this.Number = Number;
                this.Head = Head;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Number;
            public TItem Head;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Number, rhs.Number)) return false;
                if (!object.Equals(this.Head, rhs.Head)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Number);
                hash.Add(this.Head);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Number)) return false;
                if (!eval(this.Head)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Number)) return true;
                if (eval(this.Head)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new HeadPartReference.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Number = eval(this.Number);
                obj.Head = eval(this.Head);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(HeadPartReference.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, HeadPartReference.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(HeadPartReference.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Number ?? true)
                    {
                        fg.AppendItem(Number, "Number");
                    }
                    if (printMask?.Head ?? true)
                    {
                        fg.AppendItem(Head, "Head");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Number;
            public Exception? Head;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                HeadPartReference_FieldIndex enu = (HeadPartReference_FieldIndex)index;
                switch (enu)
                {
                    case HeadPartReference_FieldIndex.Number:
                        return Number;
                    case HeadPartReference_FieldIndex.Head:
                        return Head;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                HeadPartReference_FieldIndex enu = (HeadPartReference_FieldIndex)index;
                switch (enu)
                {
                    case HeadPartReference_FieldIndex.Number:
                        this.Number = ex;
                        break;
                    case HeadPartReference_FieldIndex.Head:
                        this.Head = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                HeadPartReference_FieldIndex enu = (HeadPartReference_FieldIndex)index;
                switch (enu)
                {
                    case HeadPartReference_FieldIndex.Number:
                        this.Number = (Exception?)obj;
                        break;
                    case HeadPartReference_FieldIndex.Head:
                        this.Head = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Number != null) return true;
                if (Head != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Number, "Number");
                fg.AppendItem(Head, "Head");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Number = this.Number.Combine(rhs.Number);
                ret.Head = this.Head.Combine(rhs.Head);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Number;
            public bool Head;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Number = defaultOn;
                this.Head = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Number, null));
                ret.Add((Head, null));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => HeadPartReferenceCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => HeadPartReferenceCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => HeadPartReferenceCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => HeadPartReferenceCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HeadPartReferenceBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadPartReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static HeadPartReference CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static HeadPartReference CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new HeadPartReference();
            ((HeadPartReferenceSetterCommon)((IHeadPartReferenceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IHeadPartReferenceGetter)rhs, include);

        void IClearable.Clear()
        {
            ((HeadPartReferenceSetterCommon)((IHeadPartReferenceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static HeadPartReference GetNew()
        {
            return new HeadPartReference();
        }

    }
    #endregion

    #region Interface
    public partial interface IHeadPartReference :
        IHeadPartReferenceGetter,
        ILoquiObjectSetter<IHeadPartReference>
    {
        new Int32? Number { get; set; }
        new FormLinkNullable<HeadPart> Head { get; set; }
    }

    public partial interface IHeadPartReferenceGetter :
        ILoquiObject,
        ILoquiObject<IHeadPartReferenceGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => HeadPartReference_Registration.Instance;
        Int32? Number { get; }
        IFormLinkNullableGetter<IHeadPartGetter> Head { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class HeadPartReferenceMixIn
    {
        public static void Clear(this IHeadPartReference item)
        {
            ((HeadPartReferenceSetterCommon)((IHeadPartReferenceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static HeadPartReference.Mask<bool> GetEqualsMask(
            this IHeadPartReferenceGetter item,
            IHeadPartReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HeadPartReferenceCommon)((IHeadPartReferenceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IHeadPartReferenceGetter item,
            string? name = null,
            HeadPartReference.Mask<bool>? printMask = null)
        {
            return ((HeadPartReferenceCommon)((IHeadPartReferenceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IHeadPartReferenceGetter item,
            FileGeneration fg,
            string? name = null,
            HeadPartReference.Mask<bool>? printMask = null)
        {
            ((HeadPartReferenceCommon)((IHeadPartReferenceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IHeadPartReferenceGetter item,
            HeadPartReference.Mask<bool?> checkMask)
        {
            return ((HeadPartReferenceCommon)((IHeadPartReferenceGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static HeadPartReference.Mask<bool> GetHasBeenSetMask(this IHeadPartReferenceGetter item)
        {
            var ret = new HeadPartReference.Mask<bool>(false);
            ((HeadPartReferenceCommon)((IHeadPartReferenceGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IHeadPartReferenceGetter item,
            IHeadPartReferenceGetter rhs)
        {
            return ((HeadPartReferenceCommon)((IHeadPartReferenceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IHeadPartReference lhs,
            IHeadPartReferenceGetter rhs)
        {
            ((HeadPartReferenceSetterTranslationCommon)((IHeadPartReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IHeadPartReference lhs,
            IHeadPartReferenceGetter rhs,
            HeadPartReference.TranslationMask? copyMask = null)
        {
            ((HeadPartReferenceSetterTranslationCommon)((IHeadPartReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IHeadPartReference lhs,
            IHeadPartReferenceGetter rhs,
            out HeadPartReference.ErrorMask errorMask,
            HeadPartReference.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((HeadPartReferenceSetterTranslationCommon)((IHeadPartReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = HeadPartReference.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IHeadPartReference lhs,
            IHeadPartReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((HeadPartReferenceSetterTranslationCommon)((IHeadPartReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static HeadPartReference DeepCopy(
            this IHeadPartReferenceGetter item,
            HeadPartReference.TranslationMask? copyMask = null)
        {
            return ((HeadPartReferenceSetterTranslationCommon)((IHeadPartReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static HeadPartReference DeepCopy(
            this IHeadPartReferenceGetter item,
            out HeadPartReference.ErrorMask errorMask,
            HeadPartReference.TranslationMask? copyMask = null)
        {
            return ((HeadPartReferenceSetterTranslationCommon)((IHeadPartReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static HeadPartReference DeepCopy(
            this IHeadPartReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((HeadPartReferenceSetterTranslationCommon)((IHeadPartReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IHeadPartReference item,
            XElement node,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IHeadPartReference item,
            XElement node,
            out HeadPartReference.ErrorMask errorMask,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = HeadPartReference.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IHeadPartReference item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((HeadPartReferenceSetterCommon)((IHeadPartReferenceGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadPartReference item,
            string path,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadPartReference item,
            string path,
            out HeadPartReference.ErrorMask errorMask,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadPartReference item,
            string path,
            ErrorMaskBuilder? errorMask,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IHeadPartReference item,
            Stream stream,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadPartReference item,
            Stream stream,
            out HeadPartReference.ErrorMask errorMask,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadPartReference item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IHeadPartReference item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IHeadPartReference item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadPartReferenceSetterCommon)((IHeadPartReferenceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum HeadPartReference_FieldIndex
    {
        Number = 0,
        Head = 1,
    }
    #endregion

    #region Registration
    public partial class HeadPartReference_Registration : ILoquiRegistration
    {
        public static readonly HeadPartReference_Registration Instance = new HeadPartReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 73,
            version: 0);

        public const string GUID = "d9a4b8da-2a5b-42d5-9cf6-614b7a13bc26";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(HeadPartReference.Mask<>);

        public static readonly Type ErrorMaskType = typeof(HeadPartReference.ErrorMask);

        public static readonly Type ClassType = typeof(HeadPartReference);

        public static readonly Type GetterType = typeof(IHeadPartReferenceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHeadPartReference);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.HeadPartReference";

        public const string Name = "HeadPartReference";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NUMBER":
                    return (ushort)HeadPartReference_FieldIndex.Number;
                case "HEAD":
                    return (ushort)HeadPartReference_FieldIndex.Head;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            HeadPartReference_FieldIndex enu = (HeadPartReference_FieldIndex)index;
            switch (enu)
            {
                case HeadPartReference_FieldIndex.Number:
                case HeadPartReference_FieldIndex.Head:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            HeadPartReference_FieldIndex enu = (HeadPartReference_FieldIndex)index;
            switch (enu)
            {
                case HeadPartReference_FieldIndex.Number:
                case HeadPartReference_FieldIndex.Head:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            HeadPartReference_FieldIndex enu = (HeadPartReference_FieldIndex)index;
            switch (enu)
            {
                case HeadPartReference_FieldIndex.Number:
                case HeadPartReference_FieldIndex.Head:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            HeadPartReference_FieldIndex enu = (HeadPartReference_FieldIndex)index;
            switch (enu)
            {
                case HeadPartReference_FieldIndex.Number:
                    return "Number";
                case HeadPartReference_FieldIndex.Head:
                    return "Head";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            HeadPartReference_FieldIndex enu = (HeadPartReference_FieldIndex)index;
            switch (enu)
            {
                case HeadPartReference_FieldIndex.Number:
                case HeadPartReference_FieldIndex.Head:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            HeadPartReference_FieldIndex enu = (HeadPartReference_FieldIndex)index;
            switch (enu)
            {
                case HeadPartReference_FieldIndex.Number:
                case HeadPartReference_FieldIndex.Head:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            HeadPartReference_FieldIndex enu = (HeadPartReference_FieldIndex)index;
            switch (enu)
            {
                case HeadPartReference_FieldIndex.Number:
                    return typeof(Int32);
                case HeadPartReference_FieldIndex.Head:
                    return typeof(FormLinkNullable<HeadPart>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(HeadPartReferenceXmlWriteTranslation);
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType HEAD_HEADER = new RecordType("HEAD");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        INDX_HEADER,
                        HEAD_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(HeadPartReferenceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class HeadPartReferenceSetterCommon
    {
        public static readonly HeadPartReferenceSetterCommon Instance = new HeadPartReferenceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHeadPartReference item)
        {
            ClearPartial();
            item.Number = default;
            item.Head = null;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IHeadPartReference item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    HeadPartReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IHeadPartReference item,
            MutagenFrame frame)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IHeadPartReference item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x58444E49: // INDX
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadPartReference_FieldIndex.Number) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Number = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)HeadPartReference_FieldIndex.Number);
                }
                case 0x44414548: // HEAD
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadPartReference_FieldIndex.Head) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Head = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)HeadPartReference_FieldIndex.Head);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public virtual void CopyInFromBinary(
            IHeadPartReference item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class HeadPartReferenceCommon
    {
        public static readonly HeadPartReferenceCommon Instance = new HeadPartReferenceCommon();

        public HeadPartReference.Mask<bool> GetEqualsMask(
            IHeadPartReferenceGetter item,
            IHeadPartReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new HeadPartReference.Mask<bool>(false);
            ((HeadPartReferenceCommon)((IHeadPartReferenceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHeadPartReferenceGetter item,
            IHeadPartReferenceGetter rhs,
            HeadPartReference.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Number = item.Number == rhs.Number;
            ret.Head = object.Equals(item.Head, rhs.Head);
        }
        
        public string ToString(
            IHeadPartReferenceGetter item,
            string? name = null,
            HeadPartReference.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IHeadPartReferenceGetter item,
            FileGeneration fg,
            string? name = null,
            HeadPartReference.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"HeadPartReference =>");
            }
            else
            {
                fg.AppendLine($"{name} (HeadPartReference) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IHeadPartReferenceGetter item,
            FileGeneration fg,
            HeadPartReference.Mask<bool>? printMask = null)
        {
            if ((printMask?.Number ?? true)
                && item.Number.TryGet(out var NumberItem))
            {
                fg.AppendItem(NumberItem, "Number");
            }
            if ((printMask?.Head ?? true)
                && item.Head.TryGet(out var HeadItem))
            {
                fg.AppendItem(HeadItem, "Head");
            }
        }
        
        public bool HasBeenSet(
            IHeadPartReferenceGetter item,
            HeadPartReference.Mask<bool?> checkMask)
        {
            if (checkMask.Number.HasValue && checkMask.Number.Value != (item.Number != null)) return false;
            if (checkMask.Head.HasValue && checkMask.Head.Value != (item.Head.FormKey != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IHeadPartReferenceGetter item,
            HeadPartReference.Mask<bool> mask)
        {
            mask.Number = (item.Number != null);
            mask.Head = (item.Head.FormKey != null);
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHeadPartReferenceGetter? lhs,
            IHeadPartReferenceGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Number != rhs.Number) return false;
            if (!lhs.Head.Equals(rhs.Head)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IHeadPartReferenceGetter item)
        {
            var hash = new HashCode();
            if (item.Number.TryGet(out var Numberitem))
            {
                hash.Add(Numberitem);
            }
            if (item.Head.TryGet(out var Headitem))
            {
                hash.Add(Headitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return HeadPartReference.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IHeadPartReferenceGetter obj)
        {
            if (obj.Head.FormKey.TryGet(out var HeadKey))
            {
                yield return HeadKey;
            }
            yield break;
        }
        
        public void RemapLinks(IHeadPartReferenceGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class HeadPartReferenceSetterTranslationCommon
    {
        public static readonly HeadPartReferenceSetterTranslationCommon Instance = new HeadPartReferenceSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IHeadPartReference item,
            IHeadPartReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)HeadPartReference_FieldIndex.Number) ?? true))
            {
                item.Number = rhs.Number;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPartReference_FieldIndex.Head) ?? true))
            {
                item.Head = rhs.Head.FormKey;
            }
        }
        
        #endregion
        
        public HeadPartReference DeepCopy(
            IHeadPartReferenceGetter item,
            HeadPartReference.TranslationMask? copyMask = null)
        {
            HeadPartReference ret = (HeadPartReference)((HeadPartReferenceCommon)((IHeadPartReferenceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public HeadPartReference DeepCopy(
            IHeadPartReferenceGetter item,
            out HeadPartReference.ErrorMask errorMask,
            HeadPartReference.TranslationMask? copyMask = null)
        {
            HeadPartReference ret = (HeadPartReference)((HeadPartReferenceCommon)((IHeadPartReferenceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public HeadPartReference DeepCopy(
            IHeadPartReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            HeadPartReference ret = (HeadPartReference)((HeadPartReferenceCommon)((IHeadPartReferenceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class HeadPartReference
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadPartReference_Registration.Instance;
        public static HeadPartReference_Registration Registration => HeadPartReference_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HeadPartReferenceCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return HeadPartReferenceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HeadPartReferenceSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHeadPartReferenceGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IHeadPartReferenceGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IHeadPartReferenceGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class HeadPartReferenceXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static HeadPartReferenceXmlWriteTranslation Instance = new HeadPartReferenceXmlWriteTranslation();

        public static void WriteToNodeXml(
            IHeadPartReferenceGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((item.Number != null)
                && (translationMask?.GetShouldTranslate((int)HeadPartReference_FieldIndex.Number) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Number),
                    item: item.Number.Value,
                    fieldIndex: (int)HeadPartReference_FieldIndex.Number,
                    errorMask: errorMask);
            }
            if ((item.Head.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)HeadPartReference_FieldIndex.Head) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Head),
                    item: item.Head.FormKey.Value,
                    fieldIndex: (int)HeadPartReference_FieldIndex.Head,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IHeadPartReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.HeadPartReference");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.HeadPartReference");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IHeadPartReferenceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IHeadPartReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IHeadPartReferenceGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class HeadPartReferenceXmlCreateTranslation
    {
        public readonly static HeadPartReferenceXmlCreateTranslation Instance = new HeadPartReferenceXmlCreateTranslation();

        public static void FillPublicXml(
            IHeadPartReference item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    HeadPartReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IHeadPartReference item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Number":
                    errorMask?.PushIndex((int)HeadPartReference_FieldIndex.Number);
                    try
                    {
                        item.Number = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Head":
                    errorMask?.PushIndex((int)HeadPartReference_FieldIndex.Head);
                    try
                    {
                        item.Head = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class HeadPartReferenceXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IHeadPartReferenceGetter item,
            XElement node,
            out HeadPartReference.ErrorMask errorMask,
            HeadPartReference.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((HeadPartReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = HeadPartReference.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IHeadPartReferenceGetter item,
            string path,
            out HeadPartReference.ErrorMask errorMask,
            HeadPartReference.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IHeadPartReferenceGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IHeadPartReferenceGetter item,
            Stream stream,
            out HeadPartReference.ErrorMask errorMask,
            HeadPartReference.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IHeadPartReferenceGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IHeadPartReferenceGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((HeadPartReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IHeadPartReferenceGetter item,
            XElement node,
            string? name = null,
            HeadPartReference.TranslationMask? translationMask = null)
        {
            ((HeadPartReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IHeadPartReferenceGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((HeadPartReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IHeadPartReferenceGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((HeadPartReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class HeadPartReferenceBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static HeadPartReferenceBinaryWriteTranslation Instance = new HeadPartReferenceBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IHeadPartReferenceGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Number,
                header: recordTypeConverter.ConvertToCustom(HeadPartReference_Registration.INDX_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Head,
                header: recordTypeConverter.ConvertToCustom(HeadPartReference_Registration.HEAD_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            IHeadPartReferenceGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IHeadPartReferenceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class HeadPartReferenceBinaryCreateTranslation
    {
        public readonly static HeadPartReferenceBinaryCreateTranslation Instance = new HeadPartReferenceBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class HeadPartReferenceBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IHeadPartReferenceGetter item,
            MutagenWriter writer)
        {
            ((HeadPartReferenceBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class HeadPartReferenceBinaryOverlay :
        BinaryOverlay,
        IHeadPartReferenceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadPartReference_Registration.Instance;
        public static HeadPartReference_Registration Registration => HeadPartReference_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HeadPartReferenceCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HeadPartReferenceSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHeadPartReferenceGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IHeadPartReferenceGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IHeadPartReferenceGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IHeadPartReferenceGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => HeadPartReferenceCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => HeadPartReferenceCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => HeadPartReferenceCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => HeadPartReferenceCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => HeadPartReferenceXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((HeadPartReferenceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HeadPartReferenceBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadPartReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Number
        private int? _NumberLocation;
        public Int32? Number => _NumberLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _NumberLocation.Value, _package.Meta)) : default(Int32?);
        #endregion
        #region Head
        private int? _HeadLocation;
        public bool Head_IsSet => _HeadLocation.HasValue;
        public IFormLinkNullableGetter<IHeadPartGetter> Head => _HeadLocation.HasValue ? new FormLinkNullable<IHeadPartGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _HeadLocation.Value, _package.Meta)))) : FormLinkNullable<IHeadPartGetter>.Null;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected HeadPartReferenceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static HeadPartReferenceBinaryOverlay HeadPartReferenceFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new HeadPartReferenceBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static HeadPartReferenceBinaryOverlay HeadPartReferenceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return HeadPartReferenceFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x58444E49: // INDX
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadPartReference_FieldIndex.Number) return TryGet<int?>.Failure;
                    _NumberLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)HeadPartReference_FieldIndex.Number);
                }
                case 0x44414548: // HEAD
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)HeadPartReference_FieldIndex.Head) return TryGet<int?>.Failure;
                    _HeadLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)HeadPartReference_FieldIndex.Head);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            HeadPartReferenceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

