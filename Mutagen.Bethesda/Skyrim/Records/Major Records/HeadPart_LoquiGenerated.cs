/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class HeadPart :
        SkyrimMajorRecord,
        IHeadPartInternal,
        ILoquiObjectSetter<HeadPart>,
        INamed,
        IEquatable<HeadPart>,
        IEqualsMask
    {
        #region Ctor
        protected HeadPart()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IHeadPartGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IHeadPartGetter.Model => this.Model;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private HeadPart.Flag? _Flags;
        public HeadPart.Flag? Flags
        {
            get => this._Flags;
            set => this._Flags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        HeadPart.Flag? IHeadPartGetter.Flags => this.Flags;
        #endregion
        #region Type
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private HeadPart.TypeEnum? _Type;
        public HeadPart.TypeEnum? Type
        {
            get => this._Type;
            set => this._Type = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        HeadPart.TypeEnum? IHeadPartGetter.Type => this.Type;
        #endregion
        #region ExtraParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<HeadPart>>? _ExtraParts;
        public ExtendedList<IFormLink<HeadPart>>? ExtraParts
        {
            get => this._ExtraParts;
            set => this._ExtraParts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IHeadPartGetter>>? IHeadPartGetter.ExtraParts => _ExtraParts;
        #endregion

        #endregion
        #region Parts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Part>? _Parts;
        public ExtendedList<Part>? Parts
        {
            get => this._Parts;
            set => this._Parts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPartGetter>? IHeadPartGetter.Parts => _Parts;
        #endregion

        #endregion
        #region TextureSet
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<TextureSet> _TextureSet = new FormLinkNullable<TextureSet>();
        public IFormLinkNullable<TextureSet> TextureSet => this._TextureSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITextureSetGetter> IHeadPartGetter.TextureSet => this.TextureSet;
        #endregion
        #region ValidRaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<FormList> _ValidRaces = new FormLinkNullable<FormList>();
        public IFormLinkNullable<FormList> ValidRaces => this._ValidRaces;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IHeadPartGetter.ValidRaces => this.ValidRaces;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            HeadPartMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IHeadPartGetter rhs)) return false;
            return ((HeadPartCommon)((IHeadPartGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(HeadPart obj)
        {
            return ((HeadPartCommon)((IHeadPartGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((HeadPartCommon)((IHeadPartGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => HeadPartXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((HeadPartXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new HeadPart CreateFromXml(
            XElement node,
            HeadPart.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static HeadPart CreateFromXml(
            XElement node,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = HeadPart.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static HeadPart CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new HeadPart();
            ((HeadPartSetterCommon)((IHeadPartGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static HeadPart CreateFromXml(
            string path,
            HeadPart.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static HeadPart CreateFromXml(
            string path,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static HeadPart CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            HeadPart.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static HeadPart CreateFromXml(
            Stream stream,
            HeadPart.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static HeadPart CreateFromXml(
            Stream stream,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static HeadPart CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            HeadPart.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.Type = initialValue;
                this.ExtraParts = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Parts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Part.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Part.Mask<TItem>?>>());
                this.TextureSet = initialValue;
                this.ValidRaces = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem SkyrimMajorRecordFlags,
                TItem FormVersion,
                TItem Version2,
                TItem Name,
                TItem Model,
                TItem Flags,
                TItem Type,
                TItem ExtraParts,
                TItem Parts,
                TItem TextureSet,
                TItem ValidRaces)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Flags = Flags;
                this.Type = Type;
                this.ExtraParts = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ExtraParts, Enumerable.Empty<(int Index, TItem Value)>());
                this.Parts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Part.Mask<TItem>?>>?>(Parts, Enumerable.Empty<MaskItemIndexed<TItem, Part.Mask<TItem>?>>());
                this.TextureSet = TextureSet;
                this.ValidRaces = ValidRaces;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Flags;
            public TItem Type;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ExtraParts;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Part.Mask<TItem>?>>?>? Parts;
            public TItem TextureSet;
            public TItem ValidRaces;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.ExtraParts, rhs.ExtraParts)) return false;
                if (!object.Equals(this.Parts, rhs.Parts)) return false;
                if (!object.Equals(this.TextureSet, rhs.TextureSet)) return false;
                if (!object.Equals(this.ValidRaces, rhs.ValidRaces)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Name?.GetHashCode());
                ret = ret.CombineHashCode(this.Model?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.Type?.GetHashCode());
                ret = ret.CombineHashCode(this.ExtraParts?.GetHashCode());
                ret = ret.CombineHashCode(this.Parts?.GetHashCode());
                ret = ret.CombineHashCode(this.TextureSet?.GetHashCode());
                ret = ret.CombineHashCode(this.ValidRaces?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (this.ExtraParts != null)
                {
                    if (!eval(this.ExtraParts.Overall)) return false;
                    if (this.ExtraParts.Specific != null)
                    {
                        foreach (var item in this.ExtraParts.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Parts != null)
                {
                    if (!eval(this.Parts.Overall)) return false;
                    if (this.Parts.Specific != null)
                    {
                        foreach (var item in this.Parts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.TextureSet)) return false;
                if (!eval(this.ValidRaces)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (this.ExtraParts != null)
                {
                    if (eval(this.ExtraParts.Overall)) return true;
                    if (this.ExtraParts.Specific != null)
                    {
                        foreach (var item in this.ExtraParts.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Parts != null)
                {
                    if (eval(this.Parts.Overall)) return true;
                    if (this.Parts.Specific != null)
                    {
                        foreach (var item in this.Parts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.TextureSet)) return true;
                if (eval(this.ValidRaces)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new HeadPart.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                if (ExtraParts != null)
                {
                    obj.ExtraParts = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ExtraParts.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ExtraParts.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ExtraParts.Specific = l;
                        foreach (var item in ExtraParts.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Parts != null)
                {
                    obj.Parts = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Part.Mask<R>?>>?>(eval(this.Parts.Overall), Enumerable.Empty<MaskItemIndexed<R, Part.Mask<R>?>>());
                    if (Parts.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Part.Mask<R>?>>();
                        obj.Parts.Specific = l;
                        foreach (var item in Parts.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Part.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Part.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.TextureSet = eval(this.TextureSet);
                obj.ValidRaces = eval(this.ValidRaces);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(HeadPart.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, HeadPart.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(HeadPart.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if ((printMask?.ExtraParts?.Overall ?? true)
                        && ExtraParts.TryGet(out var ExtraPartsItem))
                    {
                        fg.AppendLine("ExtraParts =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ExtraPartsItem.Overall);
                            if (ExtraPartsItem.Specific != null)
                            {
                                foreach (var subItem in ExtraPartsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Parts?.Overall ?? true)
                        && Parts.TryGet(out var PartsItem))
                    {
                        fg.AppendLine("Parts =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PartsItem.Overall);
                            if (PartsItem.Specific != null)
                            {
                                foreach (var subItem in PartsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.TextureSet ?? true)
                    {
                        fg.AppendItem(TextureSet, "TextureSet");
                    }
                    if (printMask?.ValidRaces ?? true)
                    {
                        fg.AppendItem(ValidRaces, "ValidRaces");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Flags;
            public Exception? Type;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ExtraParts;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Part.ErrorMask?>>?>? Parts;
            public Exception? TextureSet;
            public Exception? ValidRaces;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
                switch (enu)
                {
                    case HeadPart_FieldIndex.Name:
                        return Name;
                    case HeadPart_FieldIndex.Model:
                        return Model;
                    case HeadPart_FieldIndex.Flags:
                        return Flags;
                    case HeadPart_FieldIndex.Type:
                        return Type;
                    case HeadPart_FieldIndex.ExtraParts:
                        return ExtraParts;
                    case HeadPart_FieldIndex.Parts:
                        return Parts;
                    case HeadPart_FieldIndex.TextureSet:
                        return TextureSet;
                    case HeadPart_FieldIndex.ValidRaces:
                        return ValidRaces;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
                switch (enu)
                {
                    case HeadPart_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case HeadPart_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case HeadPart_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case HeadPart_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case HeadPart_FieldIndex.ExtraParts:
                        this.ExtraParts = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case HeadPart_FieldIndex.Parts:
                        this.Parts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Part.ErrorMask?>>?>(ex, null);
                        break;
                    case HeadPart_FieldIndex.TextureSet:
                        this.TextureSet = ex;
                        break;
                    case HeadPart_FieldIndex.ValidRaces:
                        this.ValidRaces = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
                switch (enu)
                {
                    case HeadPart_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case HeadPart_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.ExtraParts:
                        this.ExtraParts = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case HeadPart_FieldIndex.Parts:
                        this.Parts = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Part.ErrorMask?>>?>)obj;
                        break;
                    case HeadPart_FieldIndex.TextureSet:
                        this.TextureSet = (Exception?)obj;
                        break;
                    case HeadPart_FieldIndex.ValidRaces:
                        this.ValidRaces = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (ExtraParts != null) return true;
                if (Parts != null) return true;
                if (TextureSet != null) return true;
                if (ValidRaces != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Type, "Type");
                if (ExtraParts.TryGet(out var ExtraPartsItem))
                {
                    fg.AppendLine("ExtraParts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ExtraPartsItem.Overall);
                        if (ExtraPartsItem.Specific != null)
                        {
                            foreach (var subItem in ExtraPartsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Parts.TryGet(out var PartsItem))
                {
                    fg.AppendLine("Parts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PartsItem.Overall);
                        if (PartsItem.Specific != null)
                        {
                            foreach (var subItem in PartsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(TextureSet, "TextureSet");
                fg.AppendItem(ValidRaces, "ValidRaces");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.ExtraParts = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.ExtraParts?.Overall, rhs.ExtraParts?.Overall), ExceptionExt.Combine(this.ExtraParts?.Specific, rhs.ExtraParts?.Specific));
                ret.Parts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Part.ErrorMask?>>?>(ExceptionExt.Combine(this.Parts?.Overall, rhs.Parts?.Overall), ExceptionExt.Combine(this.Parts?.Specific, rhs.Parts?.Specific));
                ret.TextureSet = this.TextureSet.Combine(rhs.TextureSet);
                ret.ValidRaces = this.ValidRaces.Combine(rhs.ValidRaces);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool Flags;
            public bool Type;
            public bool ExtraParts;
            public MaskItem<bool, Part.TranslationMask?> Parts;
            public bool TextureSet;
            public bool ValidRaces;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.ExtraParts = defaultOn;
                this.Parts = new MaskItem<bool, Part.TranslationMask?>(defaultOn, null);
                this.TextureSet = defaultOn;
                this.ValidRaces = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((ExtraParts, null));
                ret.Add((Parts?.Overall ?? true, Parts?.Specific?.GetCrystal()));
                ret.Add((TextureSet, null));
                ret.Add((ValidRaces, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = HeadPart_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => HeadPartCommon.Instance.GetLinks(this);
        public HeadPart(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public HeadPart(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public HeadPart(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => HeadPartBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadPartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new HeadPart CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static HeadPart CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new HeadPart();
            ((HeadPartSetterCommon)((IHeadPartGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IHeadPartGetter)rhs, include);

        void IClearable.Clear()
        {
            ((HeadPartSetterCommon)((IHeadPartGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new HeadPart GetNew()
        {
            return new HeadPart();
        }

    }
    #endregion

    #region Interface
    public partial interface IHeadPart :
        IHeadPartGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<IHeadPartInternal>
    {
        new String? Name { get; set; }
        new Model? Model { get; set; }
        new HeadPart.Flag? Flags { get; set; }
        new HeadPart.TypeEnum? Type { get; set; }
        new ExtendedList<IFormLink<HeadPart>>? ExtraParts { get; set; }
        new ExtendedList<Part>? Parts { get; set; }
        new IFormLinkNullable<TextureSet> TextureSet { get; }
        new IFormLinkNullable<FormList> ValidRaces { get; }
    }

    public partial interface IHeadPartInternal :
        ISkyrimMajorRecordInternal,
        IHeadPart,
        IHeadPartGetter
    {
    }

    public partial interface IHeadPartGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<IHeadPartGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        IModelGetter? Model { get; }
        HeadPart.Flag? Flags { get; }
        HeadPart.TypeEnum? Type { get; }
        IReadOnlyList<IFormLinkGetter<IHeadPartGetter>>? ExtraParts { get; }
        IReadOnlyList<IPartGetter>? Parts { get; }
        IFormLinkNullableGetter<ITextureSetGetter> TextureSet { get; }
        IFormLinkNullableGetter<IFormListGetter> ValidRaces { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class HeadPartMixIn
    {
        public static void Clear(this IHeadPartInternal item)
        {
            ((HeadPartSetterCommon)((IHeadPartGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static HeadPart.Mask<bool> GetEqualsMask(
            this IHeadPartGetter item,
            IHeadPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IHeadPartGetter item,
            string? name = null,
            HeadPart.Mask<bool>? printMask = null)
        {
            return ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IHeadPartGetter item,
            FileGeneration fg,
            string? name = null,
            HeadPart.Mask<bool>? printMask = null)
        {
            ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IHeadPartGetter item,
            HeadPart.Mask<bool?> checkMask)
        {
            return ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static HeadPart.Mask<bool> GetHasBeenSetMask(this IHeadPartGetter item)
        {
            var ret = new HeadPart.Mask<bool>(false);
            ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IHeadPartGetter item,
            IHeadPartGetter rhs)
        {
            return ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IHeadPartInternal lhs,
            IHeadPartGetter rhs,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((HeadPartSetterTranslationCommon)((IHeadPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = HeadPart.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IHeadPartInternal lhs,
            IHeadPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((HeadPartSetterTranslationCommon)((IHeadPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static HeadPart DeepCopy(
            this IHeadPartGetter item,
            HeadPart.TranslationMask? copyMask = null)
        {
            return ((HeadPartSetterTranslationCommon)((IHeadPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static HeadPart DeepCopy(
            this IHeadPartGetter item,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? copyMask = null)
        {
            return ((HeadPartSetterTranslationCommon)((IHeadPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static HeadPart DeepCopy(
            this IHeadPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((HeadPartSetterTranslationCommon)((IHeadPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IHeadPartInternal item,
            XElement node,
            HeadPart.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IHeadPartInternal item,
            XElement node,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = HeadPart.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IHeadPartInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((HeadPartSetterCommon)((IHeadPartGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadPartInternal item,
            string path,
            HeadPart.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadPartInternal item,
            string path,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadPartInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            HeadPart.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IHeadPartInternal item,
            Stream stream,
            HeadPart.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadPartInternal item,
            Stream stream,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IHeadPartInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            HeadPart.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IHeadPartInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IHeadPartInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadPartSetterCommon)((IHeadPartGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum HeadPart_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        SkyrimMajorRecordFlags = 4,
        FormVersion = 5,
        Version2 = 6,
        Name = 7,
        Model = 8,
        Flags = 9,
        Type = 10,
        ExtraParts = 11,
        Parts = 12,
        TextureSet = 13,
        ValidRaces = 14,
    }
    #endregion

    #region Registration
    public partial class HeadPart_Registration : ILoquiRegistration
    {
        public static readonly HeadPart_Registration Instance = new HeadPart_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 44,
            version: 0);

        public const string GUID = "857a29e8-2860-48f1-b007-30df75c1667c";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(HeadPart.Mask<>);

        public static readonly Type ErrorMaskType = typeof(HeadPart.ErrorMask);

        public static readonly Type ClassType = typeof(HeadPart);

        public static readonly Type GetterType = typeof(IHeadPartGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHeadPart);

        public static readonly Type? InternalSetterType = typeof(IHeadPartInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.HeadPart";

        public const string Name = "HeadPart";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)HeadPart_FieldIndex.Name;
                case "MODEL":
                    return (ushort)HeadPart_FieldIndex.Model;
                case "FLAGS":
                    return (ushort)HeadPart_FieldIndex.Flags;
                case "TYPE":
                    return (ushort)HeadPart_FieldIndex.Type;
                case "EXTRAPARTS":
                    return (ushort)HeadPart_FieldIndex.ExtraParts;
                case "PARTS":
                    return (ushort)HeadPart_FieldIndex.Parts;
                case "TEXTURESET":
                    return (ushort)HeadPart_FieldIndex.TextureSet;
                case "VALIDRACES":
                    return (ushort)HeadPart_FieldIndex.ValidRaces;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
            switch (enu)
            {
                case HeadPart_FieldIndex.ExtraParts:
                case HeadPart_FieldIndex.Parts:
                    return true;
                case HeadPart_FieldIndex.Name:
                case HeadPart_FieldIndex.Model:
                case HeadPart_FieldIndex.Flags:
                case HeadPart_FieldIndex.Type:
                case HeadPart_FieldIndex.TextureSet:
                case HeadPart_FieldIndex.ValidRaces:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
            switch (enu)
            {
                case HeadPart_FieldIndex.Model:
                case HeadPart_FieldIndex.Parts:
                    return true;
                case HeadPart_FieldIndex.Name:
                case HeadPart_FieldIndex.Flags:
                case HeadPart_FieldIndex.Type:
                case HeadPart_FieldIndex.ExtraParts:
                case HeadPart_FieldIndex.TextureSet:
                case HeadPart_FieldIndex.ValidRaces:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
            switch (enu)
            {
                case HeadPart_FieldIndex.Name:
                case HeadPart_FieldIndex.Model:
                case HeadPart_FieldIndex.Flags:
                case HeadPart_FieldIndex.Type:
                case HeadPart_FieldIndex.ExtraParts:
                case HeadPart_FieldIndex.Parts:
                case HeadPart_FieldIndex.TextureSet:
                case HeadPart_FieldIndex.ValidRaces:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
            switch (enu)
            {
                case HeadPart_FieldIndex.Name:
                    return "Name";
                case HeadPart_FieldIndex.Model:
                    return "Model";
                case HeadPart_FieldIndex.Flags:
                    return "Flags";
                case HeadPart_FieldIndex.Type:
                    return "Type";
                case HeadPart_FieldIndex.ExtraParts:
                    return "ExtraParts";
                case HeadPart_FieldIndex.Parts:
                    return "Parts";
                case HeadPart_FieldIndex.TextureSet:
                    return "TextureSet";
                case HeadPart_FieldIndex.ValidRaces:
                    return "ValidRaces";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
            switch (enu)
            {
                case HeadPart_FieldIndex.Name:
                case HeadPart_FieldIndex.Model:
                case HeadPart_FieldIndex.Flags:
                case HeadPart_FieldIndex.Type:
                case HeadPart_FieldIndex.ExtraParts:
                case HeadPart_FieldIndex.Parts:
                case HeadPart_FieldIndex.TextureSet:
                case HeadPart_FieldIndex.ValidRaces:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
            switch (enu)
            {
                case HeadPart_FieldIndex.Name:
                case HeadPart_FieldIndex.Model:
                case HeadPart_FieldIndex.Flags:
                case HeadPart_FieldIndex.Type:
                case HeadPart_FieldIndex.ExtraParts:
                case HeadPart_FieldIndex.Parts:
                case HeadPart_FieldIndex.TextureSet:
                case HeadPart_FieldIndex.ValidRaces:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            HeadPart_FieldIndex enu = (HeadPart_FieldIndex)index;
            switch (enu)
            {
                case HeadPart_FieldIndex.Name:
                    return typeof(String);
                case HeadPart_FieldIndex.Model:
                    return typeof(Model);
                case HeadPart_FieldIndex.Flags:
                    return typeof(HeadPart.Flag);
                case HeadPart_FieldIndex.Type:
                    return typeof(HeadPart.TypeEnum);
                case HeadPart_FieldIndex.ExtraParts:
                    return typeof(ExtendedList<IFormLink<HeadPart>>);
                case HeadPart_FieldIndex.Parts:
                    return typeof(ExtendedList<Part>);
                case HeadPart_FieldIndex.TextureSet:
                    return typeof(IFormLinkNullable<TextureSet>);
                case HeadPart_FieldIndex.ValidRaces:
                    return typeof(IFormLinkNullable<FormList>);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(HeadPartXmlWriteTranslation);
        public static readonly RecordType HDPT_HEADER = new RecordType("HDPT");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType PNAM_HEADER = new RecordType("PNAM");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = HDPT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 8;
        public static readonly Type BinaryWriteTranslation = typeof(HeadPartBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class HeadPartSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly HeadPartSetterCommon Instance = new HeadPartSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHeadPartInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Model = null;
            item.Flags = default;
            item.Type = default;
            item.ExtraParts = null;
            item.Parts = null;
            item.TextureSet.FormKey = null;
            item.ValidRaces.FormKey = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IHeadPartInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IHeadPartInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IHeadPartInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IHeadPartInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    HeadPartXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => HeadPart_Registration.HDPT_HEADER;
        protected static void FillBinaryStructs(
            IHeadPartInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IHeadPartInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.Model);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<HeadPart.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.Flags);
                }
                case 0x4D414E50: // PNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Type = EnumBinaryTranslation<HeadPart.TypeEnum>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.Type);
                }
                case 0x4D414E48: // HNAM
                {
                    item.ExtraParts = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<HeadPart>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: HeadPart_Registration.HNAM_HEADER,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<HeadPart>>();
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.ExtraParts);
                }
                case 0x304D414E: // NAM0
                case 0x314D414E: // NAM1
                {
                    item.Parts = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Part>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Part_Registration.TriggeringRecordTypes,
                            transl: (MutagenFrame r, out Part listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<Part>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!);
                            })
                        .ToExtendedList<Part>();
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.Parts);
                }
                case 0x4D414E54: // TNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.TextureSet.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.TextureSet);
                }
                case 0x4D414E52: // RNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.ValidRaces.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.ValidRaces);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public void CopyInFromBinary(
            IHeadPartInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IHeadPartInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class HeadPartCommon : SkyrimMajorRecordCommon
    {
        public new static readonly HeadPartCommon Instance = new HeadPartCommon();

        public HeadPart.Mask<bool> GetEqualsMask(
            IHeadPartGetter item,
            IHeadPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new HeadPart.Mask<bool>(false);
            ((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHeadPartGetter item,
            IHeadPartGetter rhs,
            HeadPart.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.ExtraParts = item.ExtraParts.CollectionEqualsHelper(
                rhs.ExtraParts,
                (l, r) => object.Equals(l, r),
                include);
            ret.Parts = item.Parts.CollectionEqualsHelper(
                rhs.Parts,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.TextureSet = object.Equals(item.TextureSet, rhs.TextureSet);
            ret.ValidRaces = object.Equals(item.ValidRaces, rhs.ValidRaces);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IHeadPartGetter item,
            string? name = null,
            HeadPart.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IHeadPartGetter item,
            FileGeneration fg,
            string? name = null,
            HeadPart.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"HeadPart =>");
            }
            else
            {
                fg.AppendLine($"{name} (HeadPart) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IHeadPartGetter item,
            FileGeneration fg,
            HeadPart.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.Type ?? true)
                && item.Type.TryGet(out var TypeItem))
            {
                fg.AppendItem(TypeItem, "Type");
            }
            if ((printMask?.ExtraParts?.Overall ?? true)
                && item.ExtraParts.TryGet(out var ExtraPartsItem))
            {
                fg.AppendLine("ExtraParts =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ExtraPartsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Parts?.Overall ?? true)
                && item.Parts.TryGet(out var PartsItem))
            {
                fg.AppendLine("Parts =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in PartsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.TextureSet ?? true)
                && item.TextureSet.TryGet(out var TextureSetItem))
            {
                fg.AppendItem(TextureSetItem, "TextureSet");
            }
            if ((printMask?.ValidRaces ?? true)
                && item.ValidRaces.TryGet(out var ValidRacesItem))
            {
                fg.AppendItem(ValidRacesItem, "ValidRaces");
            }
        }
        
        public bool HasBeenSet(
            IHeadPartGetter item,
            HeadPart.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != (item.Flags != null)) return false;
            if (checkMask.Type.HasValue && checkMask.Type.Value != (item.Type != null)) return false;
            if (checkMask.ExtraParts?.Overall.HasValue ?? false && checkMask.ExtraParts!.Overall.Value != (item.ExtraParts != null)) return false;
            if (checkMask.Parts?.Overall.HasValue ?? false && checkMask.Parts!.Overall.Value != (item.Parts != null)) return false;
            if (checkMask.TextureSet.HasValue && checkMask.TextureSet.Value != (item.TextureSet.FormKey != null)) return false;
            if (checkMask.ValidRaces.HasValue && checkMask.ValidRaces.Value != (item.ValidRaces.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IHeadPartGetter item,
            HeadPart.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.Flags = (item.Flags != null);
            mask.Type = (item.Type != null);
            mask.ExtraParts = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.ExtraParts != null), default);
            if (item.Parts.TryGet(out var PartsItem))
            {
                mask.Parts = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Part.Mask<bool>?>>?>(true, PartsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Part.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            mask.TextureSet = (item.TextureSet.FormKey != null);
            mask.ValidRaces = (item.ValidRaces.FormKey != null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static HeadPart_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (HeadPart_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (HeadPart_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (HeadPart_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (HeadPart_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (HeadPart_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (HeadPart_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (HeadPart_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new HeadPart_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (HeadPart_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (HeadPart_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (HeadPart_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (HeadPart_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHeadPartGetter? lhs,
            IHeadPartGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Type != rhs.Type) return false;
            if (!lhs.ExtraParts.SequenceEqual(rhs.ExtraParts)) return false;
            if (!lhs.Parts.SequenceEqual(rhs.Parts)) return false;
            if (!lhs.TextureSet.Equals(rhs.TextureSet)) return false;
            if (!lhs.ValidRaces.Equals(rhs.ValidRaces)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IHeadPartGetter?)lhs,
                rhs: rhs as IHeadPartGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IHeadPartGetter?)lhs,
                rhs: rhs as IHeadPartGetter);
        }
        
        public virtual int GetHashCode(IHeadPartGetter item)
        {
            int ret = 0;
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                ret = HashHelper.GetHashCode(Modelitem).CombineHashCode(ret);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                ret = HashHelper.GetHashCode(Flagsitem).CombineHashCode(ret);
            }
            if (item.Type.TryGet(out var Typeitem))
            {
                ret = HashHelper.GetHashCode(Typeitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.ExtraParts).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Parts).CombineHashCode(ret);
            if (item.TextureSet.TryGet(out var TextureSetitem))
            {
                ret = HashHelper.GetHashCode(TextureSetitem).CombineHashCode(ret);
            }
            if (item.ValidRaces.TryGet(out var ValidRacesitem))
            {
                ret = HashHelper.GetHashCode(ValidRacesitem).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IHeadPartGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IHeadPartGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return HeadPart.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IHeadPartGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            if (obj.Model != null)
            {
                foreach (var item in obj.Model.Links)
                {
                    yield return item;
                }
            }
            if (obj.ExtraParts != null)
            {
                foreach (var item in obj.ExtraParts)
                {
                    yield return item;
                }
            }
            yield return obj.TextureSet;
            yield return obj.ValidRaces;
            yield break;
        }
        
        partial void PostDuplicate(HeadPart obj, HeadPart rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new HeadPart(getNextFormKey());
            ret.DeepCopyIn((HeadPart)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (HeadPart)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class HeadPartSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly HeadPartSetterTranslationCommon Instance = new HeadPartSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IHeadPartInternal item,
            IHeadPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IHeadPart item,
            IHeadPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)HeadPart_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)HeadPart_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.ExtraParts) ?? true))
            {
                errorMask?.PushIndex((int)HeadPart_FieldIndex.ExtraParts);
                try
                {
                    if ((rhs.ExtraParts != null))
                    {
                        item.ExtraParts = 
                            rhs.ExtraParts
                            .Select(r => new FormLink<HeadPart>(r.FormKey))
                            .ToExtendedList<IFormLink<HeadPart>>();
                    }
                    else
                    {
                        item.ExtraParts = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Parts) ?? true))
            {
                errorMask?.PushIndex((int)HeadPart_FieldIndex.Parts);
                try
                {
                    if ((rhs.Parts != null))
                    {
                        item.Parts = 
                            rhs.Parts
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Part>();
                    }
                    else
                    {
                        item.Parts = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.TextureSet) ?? true))
            {
                item.TextureSet.FormKey = rhs.TextureSet.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)HeadPart_FieldIndex.ValidRaces) ?? true))
            {
                item.ValidRaces.FormKey = rhs.ValidRaces.FormKey;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IHeadPartInternal)item,
                rhs: (IHeadPartGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IHeadPart)item,
                rhs: (IHeadPartGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IHeadPartInternal)item,
                rhs: (IHeadPartGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IHeadPart)item,
                rhs: (IHeadPartGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public HeadPart DeepCopy(
            IHeadPartGetter item,
            HeadPart.TranslationMask? copyMask = null)
        {
            HeadPart ret = (HeadPart)((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public HeadPart DeepCopy(
            IHeadPartGetter item,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? copyMask = null)
        {
            HeadPart ret = (HeadPart)((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public HeadPart DeepCopy(
            IHeadPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            HeadPart ret = (HeadPart)((HeadPartCommon)((IHeadPartGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class HeadPart
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadPart_Registration.Instance;
        public new static HeadPart_Registration Registration => HeadPart_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => HeadPartCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return HeadPartSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => HeadPartSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class HeadPartXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static HeadPartXmlWriteTranslation Instance = new HeadPartXmlWriteTranslation();

        public static void WriteToNodeXml(
            IHeadPartGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)HeadPart_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)HeadPart_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)HeadPart_FieldIndex.Model));
                }
            }
            if ((item.Flags != null)
                && (translationMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<HeadPart.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)HeadPart_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((item.Type != null)
                && (translationMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Type) ?? true))
            {
                EnumXmlTranslation<HeadPart.TypeEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.Type),
                    item: item.Type,
                    fieldIndex: (int)HeadPart_FieldIndex.Type,
                    errorMask: errorMask);
            }
            if ((item.ExtraParts != null)
                && (translationMask?.GetShouldTranslate((int)HeadPart_FieldIndex.ExtraParts) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IHeadPartGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.ExtraParts),
                    item: item.ExtraParts,
                    fieldIndex: (int)HeadPart_FieldIndex.ExtraParts,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)HeadPart_FieldIndex.ExtraParts),
                    transl: (XElement subNode, IFormLinkGetter<IHeadPartGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Parts != null)
                && (translationMask?.GetShouldTranslate((int)HeadPart_FieldIndex.Parts) ?? true))
            {
                ListXmlTranslation<IPartGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Parts),
                    item: item.Parts,
                    fieldIndex: (int)HeadPart_FieldIndex.Parts,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)HeadPart_FieldIndex.Parts),
                    transl: (XElement subNode, IPartGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((PartXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((item.TextureSet.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)HeadPart_FieldIndex.TextureSet) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TextureSet),
                    item: item.TextureSet.FormKey,
                    fieldIndex: (int)HeadPart_FieldIndex.TextureSet,
                    errorMask: errorMask);
            }
            if ((item.ValidRaces.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)HeadPart_FieldIndex.ValidRaces) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ValidRaces),
                    item: item.ValidRaces.FormKey,
                    fieldIndex: (int)HeadPart_FieldIndex.ValidRaces,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IHeadPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.HeadPart");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.HeadPart");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IHeadPartGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IHeadPartGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IHeadPartGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class HeadPartXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static HeadPartXmlCreateTranslation Instance = new HeadPartXmlCreateTranslation();

        public static void FillPublicXml(
            IHeadPartInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    HeadPartXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IHeadPartInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)HeadPart_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)HeadPart_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)HeadPart_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)HeadPart_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<HeadPart.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Type":
                    errorMask?.PushIndex((int)HeadPart_FieldIndex.Type);
                    try
                    {
                        item.Type = EnumXmlTranslation<HeadPart.TypeEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ExtraParts":
                    errorMask?.PushIndex((int)HeadPart_FieldIndex.ExtraParts);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<HeadPart>>.Instance.Parse(
                            node: node,
                            enumer: out var ExtraPartsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.ExtraParts = ExtraPartsItem.ToExtendedList();
                        }
                        else
                        {
                            item.ExtraParts = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Parts":
                    errorMask?.PushIndex((int)HeadPart_FieldIndex.Parts);
                    try
                    {
                        if (ListXmlTranslation<Part>.Instance.Parse(
                            node: node,
                            enumer: out var PartsItem,
                            transl: LoquiXmlTranslation<Part>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Parts = PartsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Parts = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TextureSet":
                    errorMask?.PushIndex((int)HeadPart_FieldIndex.TextureSet);
                    try
                    {
                        item.TextureSet.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ValidRaces":
                    errorMask?.PushIndex((int)HeadPart_FieldIndex.ValidRaces);
                    try
                    {
                        item.ValidRaces.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class HeadPartXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IHeadPartGetter item,
            XElement node,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((HeadPartXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = HeadPart.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IHeadPartGetter item,
            string path,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IHeadPartGetter item,
            Stream stream,
            out HeadPart.ErrorMask errorMask,
            HeadPart.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class HeadPartBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static HeadPartBinaryWriteTranslation Instance = new HeadPartBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IHeadPartGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(HeadPart_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer);
            }
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<HeadPart.Flag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(HeadPart_Registration.DATA_HEADER));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<HeadPart.TypeEnum>.Instance.WriteNullable(
                writer,
                item.Type,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(HeadPart_Registration.PNAM_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IHeadPartGetter>>.Instance.Write(
                writer: writer,
                items: item.ExtraParts,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IHeadPartGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(HeadPart_Registration.HNAM_HEADER));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IPartGetter>.Instance.Write(
                writer: writer,
                items: item.Parts,
                transl: (MutagenWriter subWriter, IPartGetter subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((PartBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter);
                    }
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TextureSet,
                header: recordTypeConverter.ConvertToCustom(HeadPart_Registration.TNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ValidRaces,
                header: recordTypeConverter.ConvertToCustom(HeadPart_Registration.RNAM_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            IHeadPartGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: HeadPart_Registration.HDPT_HEADER,
                type: ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IHeadPartGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IHeadPartGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IHeadPartGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class HeadPartBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static HeadPartBinaryCreateTranslation Instance = new HeadPartBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class HeadPartBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class HeadPartBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IHeadPartGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadPart_Registration.Instance;
        public new static HeadPart_Registration Registration => HeadPart_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => HeadPartCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => HeadPartSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IHeadPartGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => HeadPartCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => HeadPartXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((HeadPartXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => HeadPartBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((HeadPartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Model
        public IModelGetter? Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        private bool Flags_IsSet => _FlagsLocation.HasValue;
        public HeadPart.Flag? Flags => Flags_IsSet ? (HeadPart.Flag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation!.Value, _package.Meta)[0] : default(HeadPart.Flag?);
        #endregion
        #region Type
        private int? _TypeLocation;
        private bool Type_IsSet => _TypeLocation.HasValue;
        public HeadPart.TypeEnum? Type => Type_IsSet ? (HeadPart.TypeEnum)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _TypeLocation!.Value, _package.Meta)) : default(HeadPart.TypeEnum?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IHeadPartGetter>>? ExtraParts { get; private set; }
        public IReadOnlyList<IPartGetter>? Parts { get; private set; }
        #region TextureSet
        private int? _TextureSetLocation;
        public bool TextureSet_IsSet => _TextureSetLocation.HasValue;
        public IFormLinkNullableGetter<ITextureSetGetter> TextureSet => _TextureSetLocation.HasValue ? new FormLinkNullable<ITextureSetGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _TextureSetLocation.Value, _package.Meta)))) : FormLinkNullable<ITextureSetGetter>.Empty;
        #endregion
        #region ValidRaces
        private int? _ValidRacesLocation;
        public bool ValidRaces_IsSet => _ValidRacesLocation.HasValue;
        public IFormLinkNullableGetter<IFormListGetter> ValidRaces => _ValidRacesLocation.HasValue ? new FormLinkNullable<IFormListGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ValidRacesLocation.Value, _package.Meta)))) : FormLinkNullable<IFormListGetter>.Empty;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected HeadPartBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static HeadPartBinaryOverlay HeadPartFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new HeadPartBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.Model);
                }
                case 0x41544144: // DATA
                {
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.Flags);
                }
                case 0x4D414E50: // PNAM
                {
                    _TypeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.Type);
                }
                case 0x4D414E48: // HNAM
                {
                    this.ExtraParts = BinaryOverlaySetList<IFormLinkGetter<IHeadPartGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IHeadPartGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.ExtraParts);
                }
                case 0x304D414E: // NAM0
                case 0x314D414E: // NAM1
                {
                    this.Parts = this.ParseRepeatedTypelessSubrecord<PartBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: Part_Registration.TriggeringRecordTypes,
                        factory:  PartBinaryOverlay.PartFactory);
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.Parts);
                }
                case 0x4D414E54: // TNAM
                {
                    _TextureSetLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.TextureSet);
                }
                case 0x4D414E52: // RNAM
                {
                    _ValidRacesLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)HeadPart_FieldIndex.ValidRaces);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

