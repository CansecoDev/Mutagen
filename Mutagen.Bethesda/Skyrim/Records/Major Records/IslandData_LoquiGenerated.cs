/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class IslandData :
        IIslandData,
        ILoquiObjectSetter<IslandData>,
        IEquatable<IslandData>,
        IEqualsMask
    {
        #region Ctor
        public IslandData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Min
        public P3Float Min { get; set; } = default;
        #endregion
        #region Max
        public P3Float Max { get; set; } = default;
        #endregion
        #region Triangles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<P3Int16> _Triangles = new ExtendedList<P3Int16>();
        public ExtendedList<P3Int16> Triangles
        {
            get => this._Triangles;
            protected set => this._Triangles = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<P3Int16> IIslandDataGetter.Triangles => _Triangles;
        #endregion

        #endregion
        #region Vertices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<P3Float> _Vertices = new ExtendedList<P3Float>();
        public ExtendedList<P3Float> Vertices
        {
            get => this._Vertices;
            protected set => this._Vertices = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<P3Float> IIslandDataGetter.Vertices => _Vertices;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            IslandDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IIslandDataGetter rhs)) return false;
            return ((IslandDataCommon)((IIslandDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(IslandData obj)
        {
            return ((IslandDataCommon)((IIslandDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((IslandDataCommon)((IIslandDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => IslandDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((IslandDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static IslandData CreateFromXml(
            XElement node,
            IslandData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static IslandData CreateFromXml(
            XElement node,
            out IslandData.ErrorMask errorMask,
            IslandData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = IslandData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static IslandData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new IslandData();
            ((IslandDataSetterCommon)((IIslandDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static IslandData CreateFromXml(
            string path,
            IslandData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static IslandData CreateFromXml(
            string path,
            out IslandData.ErrorMask errorMask,
            IslandData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static IslandData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            IslandData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static IslandData CreateFromXml(
            Stream stream,
            IslandData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static IslandData CreateFromXml(
            Stream stream,
            out IslandData.ErrorMask errorMask,
            IslandData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static IslandData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            IslandData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Min = initialValue;
                this.Max = initialValue;
                this.Triangles = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Vertices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem Min,
                TItem Max,
                TItem Triangles,
                TItem Vertices)
            {
                this.Min = Min;
                this.Max = Max;
                this.Triangles = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Triangles, Enumerable.Empty<(int Index, TItem Value)>());
                this.Vertices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Vertices, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Min;
            public TItem Max;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Triangles;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Vertices;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Min, rhs.Min)) return false;
                if (!object.Equals(this.Max, rhs.Max)) return false;
                if (!object.Equals(this.Triangles, rhs.Triangles)) return false;
                if (!object.Equals(this.Vertices, rhs.Vertices)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Min);
                hash.Add(this.Max);
                hash.Add(this.Triangles);
                hash.Add(this.Vertices);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Min)) return false;
                if (!eval(this.Max)) return false;
                if (this.Triangles != null)
                {
                    if (!eval(this.Triangles.Overall)) return false;
                    if (this.Triangles.Specific != null)
                    {
                        foreach (var item in this.Triangles.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Vertices != null)
                {
                    if (!eval(this.Vertices.Overall)) return false;
                    if (this.Vertices.Specific != null)
                    {
                        foreach (var item in this.Vertices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Min)) return true;
                if (eval(this.Max)) return true;
                if (this.Triangles != null)
                {
                    if (eval(this.Triangles.Overall)) return true;
                    if (this.Triangles.Specific != null)
                    {
                        foreach (var item in this.Triangles.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Vertices != null)
                {
                    if (eval(this.Vertices.Overall)) return true;
                    if (this.Vertices.Specific != null)
                    {
                        foreach (var item in this.Vertices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new IslandData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Min = eval(this.Min);
                obj.Max = eval(this.Max);
                if (Triangles != null)
                {
                    obj.Triangles = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Triangles.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Triangles.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Triangles.Specific = l;
                        foreach (var item in Triangles.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Vertices != null)
                {
                    obj.Vertices = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Vertices.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Vertices.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Vertices.Specific = l;
                        foreach (var item in Vertices.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(IslandData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, IslandData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(IslandData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Min ?? true)
                    {
                        fg.AppendItem(Min, "Min");
                    }
                    if (printMask?.Max ?? true)
                    {
                        fg.AppendItem(Max, "Max");
                    }
                    if ((printMask?.Triangles?.Overall ?? true)
                        && Triangles.TryGet(out var TrianglesItem))
                    {
                        fg.AppendLine("Triangles =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TrianglesItem.Overall);
                            if (TrianglesItem.Specific != null)
                            {
                                foreach (var subItem in TrianglesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Vertices?.Overall ?? true)
                        && Vertices.TryGet(out var VerticesItem))
                    {
                        fg.AppendLine("Vertices =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(VerticesItem.Overall);
                            if (VerticesItem.Specific != null)
                            {
                                foreach (var subItem in VerticesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Min;
            public Exception? Max;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Triangles;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Vertices;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                IslandData_FieldIndex enu = (IslandData_FieldIndex)index;
                switch (enu)
                {
                    case IslandData_FieldIndex.Min:
                        return Min;
                    case IslandData_FieldIndex.Max:
                        return Max;
                    case IslandData_FieldIndex.Triangles:
                        return Triangles;
                    case IslandData_FieldIndex.Vertices:
                        return Vertices;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                IslandData_FieldIndex enu = (IslandData_FieldIndex)index;
                switch (enu)
                {
                    case IslandData_FieldIndex.Min:
                        this.Min = ex;
                        break;
                    case IslandData_FieldIndex.Max:
                        this.Max = ex;
                        break;
                    case IslandData_FieldIndex.Triangles:
                        this.Triangles = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case IslandData_FieldIndex.Vertices:
                        this.Vertices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                IslandData_FieldIndex enu = (IslandData_FieldIndex)index;
                switch (enu)
                {
                    case IslandData_FieldIndex.Min:
                        this.Min = (Exception?)obj;
                        break;
                    case IslandData_FieldIndex.Max:
                        this.Max = (Exception?)obj;
                        break;
                    case IslandData_FieldIndex.Triangles:
                        this.Triangles = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case IslandData_FieldIndex.Vertices:
                        this.Vertices = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Min != null) return true;
                if (Max != null) return true;
                if (Triangles != null) return true;
                if (Vertices != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Min, "Min");
                fg.AppendItem(Max, "Max");
                if (Triangles.TryGet(out var TrianglesItem))
                {
                    fg.AppendLine("Triangles =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TrianglesItem.Overall);
                        if (TrianglesItem.Specific != null)
                        {
                            foreach (var subItem in TrianglesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Vertices.TryGet(out var VerticesItem))
                {
                    fg.AppendLine("Vertices =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(VerticesItem.Overall);
                        if (VerticesItem.Specific != null)
                        {
                            foreach (var subItem in VerticesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Min = this.Min.Combine(rhs.Min);
                ret.Max = this.Max.Combine(rhs.Max);
                ret.Triangles = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Triangles?.Overall, rhs.Triangles?.Overall), ExceptionExt.Combine(this.Triangles?.Specific, rhs.Triangles?.Specific));
                ret.Vertices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Vertices?.Overall, rhs.Vertices?.Overall), ExceptionExt.Combine(this.Vertices?.Specific, rhs.Vertices?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Min;
            public bool Max;
            public bool Triangles;
            public bool Vertices;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Min = defaultOn;
                this.Max = defaultOn;
                this.Triangles = defaultOn;
                this.Vertices = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Min, null));
                ret.Add((Max, null));
                ret.Add((Triangles, null));
                ret.Add((Vertices, null));
            }
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => IslandDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IslandDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static IslandData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static IslandData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new IslandData();
            ((IslandDataSetterCommon)((IIslandDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IIslandDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((IslandDataSetterCommon)((IIslandDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static IslandData GetNew()
        {
            return new IslandData();
        }

    }
    #endregion

    #region Interface
    public partial interface IIslandData :
        IIslandDataGetter,
        ILoquiObjectSetter<IIslandData>
    {
        new P3Float Min { get; set; }
        new P3Float Max { get; set; }
        new ExtendedList<P3Int16> Triangles { get; }
        new ExtendedList<P3Float> Vertices { get; }
    }

    public partial interface IIslandDataGetter :
        ILoquiObject,
        ILoquiObject<IIslandDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => IslandData_Registration.Instance;
        P3Float Min { get; }
        P3Float Max { get; }
        IReadOnlyList<P3Int16> Triangles { get; }
        IReadOnlyList<P3Float> Vertices { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class IslandDataMixIn
    {
        public static void Clear(this IIslandData item)
        {
            ((IslandDataSetterCommon)((IIslandDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static IslandData.Mask<bool> GetEqualsMask(
            this IIslandDataGetter item,
            IIslandDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((IslandDataCommon)((IIslandDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IIslandDataGetter item,
            string? name = null,
            IslandData.Mask<bool>? printMask = null)
        {
            return ((IslandDataCommon)((IIslandDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IIslandDataGetter item,
            FileGeneration fg,
            string? name = null,
            IslandData.Mask<bool>? printMask = null)
        {
            ((IslandDataCommon)((IIslandDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IIslandDataGetter item,
            IslandData.Mask<bool?> checkMask)
        {
            return ((IslandDataCommon)((IIslandDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static IslandData.Mask<bool> GetHasBeenSetMask(this IIslandDataGetter item)
        {
            var ret = new IslandData.Mask<bool>(false);
            ((IslandDataCommon)((IIslandDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IIslandDataGetter item,
            IIslandDataGetter rhs)
        {
            return ((IslandDataCommon)((IIslandDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IIslandData lhs,
            IIslandDataGetter rhs)
        {
            ((IslandDataSetterTranslationCommon)((IIslandDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IIslandData lhs,
            IIslandDataGetter rhs,
            IslandData.TranslationMask? copyMask = null)
        {
            ((IslandDataSetterTranslationCommon)((IIslandDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IIslandData lhs,
            IIslandDataGetter rhs,
            out IslandData.ErrorMask errorMask,
            IslandData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((IslandDataSetterTranslationCommon)((IIslandDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = IslandData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IIslandData lhs,
            IIslandDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((IslandDataSetterTranslationCommon)((IIslandDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static IslandData DeepCopy(
            this IIslandDataGetter item,
            IslandData.TranslationMask? copyMask = null)
        {
            return ((IslandDataSetterTranslationCommon)((IIslandDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static IslandData DeepCopy(
            this IIslandDataGetter item,
            out IslandData.ErrorMask errorMask,
            IslandData.TranslationMask? copyMask = null)
        {
            return ((IslandDataSetterTranslationCommon)((IIslandDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static IslandData DeepCopy(
            this IIslandDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((IslandDataSetterTranslationCommon)((IIslandDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IIslandData item,
            XElement node,
            IslandData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IIslandData item,
            XElement node,
            out IslandData.ErrorMask errorMask,
            IslandData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = IslandData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IIslandData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((IslandDataSetterCommon)((IIslandDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIslandData item,
            string path,
            IslandData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIslandData item,
            string path,
            out IslandData.ErrorMask errorMask,
            IslandData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIslandData item,
            string path,
            ErrorMaskBuilder? errorMask,
            IslandData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IIslandData item,
            Stream stream,
            IslandData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIslandData item,
            Stream stream,
            out IslandData.ErrorMask errorMask,
            IslandData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IIslandData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            IslandData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IIslandData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IIslandData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IslandDataSetterCommon)((IIslandDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum IslandData_FieldIndex
    {
        Min = 0,
        Max = 1,
        Triangles = 2,
        Vertices = 3,
    }
    #endregion

    #region Registration
    public partial class IslandData_Registration : ILoquiRegistration
    {
        public static readonly IslandData_Registration Instance = new IslandData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 276,
            version: 0);

        public const string GUID = "81b666ed-5a8c-4595-9021-9075a97d086a";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(IslandData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(IslandData.ErrorMask);

        public static readonly Type ClassType = typeof(IslandData);

        public static readonly Type GetterType = typeof(IIslandDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IIslandData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.IslandData";

        public const string Name = "IslandData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MIN":
                    return (ushort)IslandData_FieldIndex.Min;
                case "MAX":
                    return (ushort)IslandData_FieldIndex.Max;
                case "TRIANGLES":
                    return (ushort)IslandData_FieldIndex.Triangles;
                case "VERTICES":
                    return (ushort)IslandData_FieldIndex.Vertices;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            IslandData_FieldIndex enu = (IslandData_FieldIndex)index;
            switch (enu)
            {
                case IslandData_FieldIndex.Triangles:
                case IslandData_FieldIndex.Vertices:
                    return true;
                case IslandData_FieldIndex.Min:
                case IslandData_FieldIndex.Max:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            IslandData_FieldIndex enu = (IslandData_FieldIndex)index;
            switch (enu)
            {
                case IslandData_FieldIndex.Min:
                case IslandData_FieldIndex.Max:
                case IslandData_FieldIndex.Triangles:
                case IslandData_FieldIndex.Vertices:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            IslandData_FieldIndex enu = (IslandData_FieldIndex)index;
            switch (enu)
            {
                case IslandData_FieldIndex.Min:
                case IslandData_FieldIndex.Max:
                case IslandData_FieldIndex.Triangles:
                case IslandData_FieldIndex.Vertices:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            IslandData_FieldIndex enu = (IslandData_FieldIndex)index;
            switch (enu)
            {
                case IslandData_FieldIndex.Min:
                    return "Min";
                case IslandData_FieldIndex.Max:
                    return "Max";
                case IslandData_FieldIndex.Triangles:
                    return "Triangles";
                case IslandData_FieldIndex.Vertices:
                    return "Vertices";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            IslandData_FieldIndex enu = (IslandData_FieldIndex)index;
            switch (enu)
            {
                case IslandData_FieldIndex.Min:
                case IslandData_FieldIndex.Max:
                case IslandData_FieldIndex.Triangles:
                case IslandData_FieldIndex.Vertices:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            IslandData_FieldIndex enu = (IslandData_FieldIndex)index;
            switch (enu)
            {
                case IslandData_FieldIndex.Min:
                case IslandData_FieldIndex.Max:
                case IslandData_FieldIndex.Triangles:
                case IslandData_FieldIndex.Vertices:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            IslandData_FieldIndex enu = (IslandData_FieldIndex)index;
            switch (enu)
            {
                case IslandData_FieldIndex.Min:
                    return typeof(P3Float);
                case IslandData_FieldIndex.Max:
                    return typeof(P3Float);
                case IslandData_FieldIndex.Triangles:
                    return typeof(ExtendedList<P3Int16>);
                case IslandData_FieldIndex.Vertices:
                    return typeof(ExtendedList<P3Float>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(IslandDataXmlWriteTranslation);
        public const int NumStructFields = 4;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(IslandDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class IslandDataSetterCommon
    {
        public static readonly IslandDataSetterCommon Instance = new IslandDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IIslandData item)
        {
            ClearPartial();
            item.Min = default;
            item.Max = default;
            item.Triangles.Clear();
            item.Vertices.Clear();
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IIslandData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    IslandDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IIslandData item,
            MutagenFrame frame)
        {
            item.Min = Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Max = Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Triangles.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<P3Int16>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    frame: frame,
                    transl: P3Int16BinaryTranslation.Instance.Parse));
            item.Vertices.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<P3Float>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    frame: frame,
                    transl: P3FloatBinaryTranslation.Instance.Parse));
        }
        
        public virtual void CopyInFromBinary(
            IIslandData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class IslandDataCommon
    {
        public static readonly IslandDataCommon Instance = new IslandDataCommon();

        public IslandData.Mask<bool> GetEqualsMask(
            IIslandDataGetter item,
            IIslandDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new IslandData.Mask<bool>(false);
            ((IslandDataCommon)((IIslandDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IIslandDataGetter item,
            IIslandDataGetter rhs,
            IslandData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Min = item.Min.Equals(rhs.Min);
            ret.Max = item.Max.Equals(rhs.Max);
            ret.Triangles = item.Triangles.CollectionEqualsHelper(
                rhs.Triangles,
                (l, r) => l.Equals(r),
                include);
            ret.Vertices = item.Vertices.CollectionEqualsHelper(
                rhs.Vertices,
                (l, r) => l.Equals(r),
                include);
        }
        
        public string ToString(
            IIslandDataGetter item,
            string? name = null,
            IslandData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IIslandDataGetter item,
            FileGeneration fg,
            string? name = null,
            IslandData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"IslandData =>");
            }
            else
            {
                fg.AppendLine($"{name} (IslandData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IIslandDataGetter item,
            FileGeneration fg,
            IslandData.Mask<bool>? printMask = null)
        {
            if (printMask?.Min ?? true)
            {
                fg.AppendItem(item.Min, "Min");
            }
            if (printMask?.Max ?? true)
            {
                fg.AppendItem(item.Max, "Max");
            }
            if (printMask?.Triangles?.Overall ?? true)
            {
                fg.AppendLine("Triangles =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Triangles)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Vertices?.Overall ?? true)
            {
                fg.AppendLine("Vertices =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Vertices)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IIslandDataGetter item,
            IslandData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IIslandDataGetter item,
            IslandData.Mask<bool> mask)
        {
            mask.Min = true;
            mask.Max = true;
            mask.Triangles = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            mask.Vertices = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IIslandDataGetter? lhs,
            IIslandDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Min.Equals(rhs.Min)) return false;
            if (!lhs.Max.Equals(rhs.Max)) return false;
            if (!lhs.Triangles.SequenceEqual(rhs.Triangles)) return false;
            if (!lhs.Vertices.SequenceEqual(rhs.Vertices)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IIslandDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Min);
            hash.Add(item.Max);
            hash.Add(item.Triangles);
            hash.Add(item.Vertices);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return IslandData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IIslandDataGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IIslandDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class IslandDataSetterTranslationCommon
    {
        public static readonly IslandDataSetterTranslationCommon Instance = new IslandDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IIslandData item,
            IIslandDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)IslandData_FieldIndex.Min) ?? true))
            {
                item.Min = rhs.Min;
            }
            if ((copyMask?.GetShouldTranslate((int)IslandData_FieldIndex.Max) ?? true))
            {
                item.Max = rhs.Max;
            }
            if ((copyMask?.GetShouldTranslate((int)IslandData_FieldIndex.Triangles) ?? true))
            {
                errorMask?.PushIndex((int)IslandData_FieldIndex.Triangles);
                try
                {
                    item.Triangles.SetTo(rhs.Triangles);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)IslandData_FieldIndex.Vertices) ?? true))
            {
                errorMask?.PushIndex((int)IslandData_FieldIndex.Vertices);
                try
                {
                    item.Vertices.SetTo(rhs.Vertices);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public IslandData DeepCopy(
            IIslandDataGetter item,
            IslandData.TranslationMask? copyMask = null)
        {
            IslandData ret = (IslandData)((IslandDataCommon)((IIslandDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public IslandData DeepCopy(
            IIslandDataGetter item,
            out IslandData.ErrorMask errorMask,
            IslandData.TranslationMask? copyMask = null)
        {
            IslandData ret = (IslandData)((IslandDataCommon)((IIslandDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public IslandData DeepCopy(
            IIslandDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            IslandData ret = (IslandData)((IslandDataCommon)((IIslandDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class IslandData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => IslandData_Registration.Instance;
        public static IslandData_Registration Registration => IslandData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => IslandDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return IslandDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => IslandDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IIslandDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IIslandDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IIslandDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class IslandDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static IslandDataXmlWriteTranslation Instance = new IslandDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IIslandDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)IslandData_FieldIndex.Min) ?? true))
            {
                P3FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Min),
                    item: item.Min,
                    fieldIndex: (int)IslandData_FieldIndex.Min,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)IslandData_FieldIndex.Max) ?? true))
            {
                P3FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Max),
                    item: item.Max,
                    fieldIndex: (int)IslandData_FieldIndex.Max,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)IslandData_FieldIndex.Triangles) ?? true))
            {
                ListXmlTranslation<P3Int16>.Instance.Write(
                    node: node,
                    name: nameof(item.Triangles),
                    item: item.Triangles,
                    fieldIndex: (int)IslandData_FieldIndex.Triangles,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)IslandData_FieldIndex.Triangles),
                    transl: (XElement subNode, P3Int16 subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        P3Int16XmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)IslandData_FieldIndex.Vertices) ?? true))
            {
                ListXmlTranslation<P3Float>.Instance.Write(
                    node: node,
                    name: nameof(item.Vertices),
                    item: item.Vertices,
                    fieldIndex: (int)IslandData_FieldIndex.Vertices,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)IslandData_FieldIndex.Vertices),
                    transl: (XElement subNode, P3Float subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        P3FloatXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IIslandDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.IslandData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.IslandData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IIslandDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IIslandDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IIslandDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class IslandDataXmlCreateTranslation
    {
        public readonly static IslandDataXmlCreateTranslation Instance = new IslandDataXmlCreateTranslation();

        public static void FillPublicXml(
            IIslandData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    IslandDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IIslandData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Min":
                    errorMask?.PushIndex((int)IslandData_FieldIndex.Min);
                    try
                    {
                        item.Min = P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Max":
                    errorMask?.PushIndex((int)IslandData_FieldIndex.Max);
                    try
                    {
                        item.Max = P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Triangles":
                    errorMask?.PushIndex((int)IslandData_FieldIndex.Triangles);
                    try
                    {
                        if (ListXmlTranslation<P3Int16>.Instance.Parse(
                            node: node,
                            enumer: out var TrianglesItem,
                            transl: P3Int16XmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Triangles.SetTo(TrianglesItem);
                        }
                        else
                        {
                            item.Triangles.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Vertices":
                    errorMask?.PushIndex((int)IslandData_FieldIndex.Vertices);
                    try
                    {
                        if (ListXmlTranslation<P3Float>.Instance.Parse(
                            node: node,
                            enumer: out var VerticesItem,
                            transl: P3FloatXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Vertices.SetTo(VerticesItem);
                        }
                        else
                        {
                            item.Vertices.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class IslandDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IIslandDataGetter item,
            XElement node,
            out IslandData.ErrorMask errorMask,
            IslandData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((IslandDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = IslandData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IIslandDataGetter item,
            string path,
            out IslandData.ErrorMask errorMask,
            IslandData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IIslandDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IIslandDataGetter item,
            Stream stream,
            out IslandData.ErrorMask errorMask,
            IslandData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IIslandDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IIslandDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((IslandDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IIslandDataGetter item,
            XElement node,
            string? name = null,
            IslandData.TranslationMask? translationMask = null)
        {
            ((IslandDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IIslandDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((IslandDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IIslandDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((IslandDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class IslandDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static IslandDataBinaryWriteTranslation Instance = new IslandDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IIslandDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Min);
            Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Max);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<P3Int16>.Instance.Write(
                writer: writer,
                items: item.Triangles,
                countLengthLength: 4,
                transl: P3Int16BinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<P3Float>.Instance.Write(
                writer: writer,
                items: item.Vertices,
                countLengthLength: 4,
                transl: P3FloatBinaryTranslation.Instance.Write);
        }

        public void Write(
            MutagenWriter writer,
            IIslandDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IIslandDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class IslandDataBinaryCreateTranslation
    {
        public readonly static IslandDataBinaryCreateTranslation Instance = new IslandDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class IslandDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IIslandDataGetter item,
            MutagenWriter writer)
        {
            ((IslandDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class IslandDataBinaryOverlay :
        BinaryOverlay,
        IIslandDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => IslandData_Registration.Instance;
        public static IslandData_Registration Registration => IslandData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => IslandDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => IslandDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IIslandDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IIslandDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IIslandDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IIslandDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => IslandDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((IslandDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => IslandDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((IslandDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public P3Float Min => P3FloatBinaryTranslation.Read(_data.Slice(0x0, 0xC));
        public P3Float Max => P3FloatBinaryTranslation.Read(_data.Slice(0xC, 0xC));
        public IReadOnlyList<P3Int16> Triangles => BinaryOverlaySetList<P3Int16>.FactoryByCountLength(_data.Slice(0x18), _package, 6, countLength: 4, (s, p) => P3Int16BinaryTranslation.Read(s));
        public IReadOnlyList<P3Float> Vertices => BinaryOverlaySetList<P3Float>.FactoryByCountLength(_data.Slice(TrianglesEndingPos), _package, 12, countLength: 4, (s, p) => P3FloatBinaryTranslation.Read(s));
        private int TrianglesEndingPos;
        private int VerticesEndingPos;
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected IslandDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static IslandDataBinaryOverlay IslandDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new IslandDataBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.TrianglesEndingPos = 0x18 + BinaryPrimitives.ReadInt32LittleEndian(ret._data.Slice(0x18)) * 6 + 4;
            ret.VerticesEndingPos = ret.TrianglesEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._data.Slice(ret.TrianglesEndingPos)) * 12 + 4;
            stream.Position += ret.VerticesEndingPos;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IslandDataBinaryOverlay IslandDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return IslandDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            IslandDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

