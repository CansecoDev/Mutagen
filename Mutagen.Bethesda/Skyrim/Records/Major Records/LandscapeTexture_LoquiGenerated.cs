/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class LandscapeTexture :
        SkyrimMajorRecord,
        ILandscapeTextureInternal,
        ILoquiObjectSetter<LandscapeTexture>,
        IEquatable<LandscapeTexture>,
        IEqualsMask
    {
        #region Ctor
        protected LandscapeTexture()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TextureSet
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<TextureSet> _TextureSet = new FormLinkNullable<TextureSet>();
        public IFormLinkNullable<TextureSet> TextureSet => this._TextureSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITextureSetGetter> ILandscapeTextureGetter.TextureSet => this.TextureSet;
        #endregion
        #region MaterialType
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<MaterialType> _MaterialType = new FormLink<MaterialType>();
        public IFormLink<MaterialType> MaterialType => this._MaterialType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IMaterialTypeGetter> ILandscapeTextureGetter.MaterialType => this.MaterialType;
        #endregion
        #region HavokData
        public HavokData HavokData { get; set; } = new HavokData();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IHavokDataGetter ILandscapeTextureGetter.HavokData => HavokData;
        #endregion
        #region TextureSpecularExponent
        public Byte TextureSpecularExponent { get; set; } = default;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Grass>>? _Grasses;
        public ExtendedList<IFormLink<Grass>>? Grasses
        {
            get => this._Grasses;
            set => this._Grasses = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IGrassGetter>>? ILandscapeTextureGetter.Grasses => _Grasses;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LandscapeTextureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILandscapeTextureGetter rhs)) return false;
            return ((LandscapeTextureCommon)((ILandscapeTextureGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(LandscapeTexture obj)
        {
            return ((LandscapeTextureCommon)((ILandscapeTextureGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LandscapeTextureCommon)((ILandscapeTextureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => LandscapeTextureXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LandscapeTextureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new LandscapeTexture CreateFromXml(
            XElement node,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LandscapeTexture CreateFromXml(
            XElement node,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LandscapeTexture.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static LandscapeTexture CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new LandscapeTexture();
            ((LandscapeTextureSetterCommon)((ILandscapeTextureGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static LandscapeTexture CreateFromXml(
            string path,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LandscapeTexture CreateFromXml(
            string path,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LandscapeTexture CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LandscapeTexture CreateFromXml(
            Stream stream,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LandscapeTexture CreateFromXml(
            Stream stream,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LandscapeTexture CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.TextureSet = initialValue;
                this.MaterialType = initialValue;
                this.HavokData = new MaskItem<TItem, HavokData.Mask<TItem>?>(initialValue, new HavokData.Mask<TItem>(initialValue));
                this.TextureSpecularExponent = initialValue;
                this.Grasses = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem TextureSet,
                TItem MaterialType,
                TItem HavokData,
                TItem TextureSpecularExponent,
                TItem Grasses)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.TextureSet = TextureSet;
                this.MaterialType = MaterialType;
                this.HavokData = new MaskItem<TItem, HavokData.Mask<TItem>?>(HavokData, new HavokData.Mask<TItem>(HavokData));
                this.TextureSpecularExponent = TextureSpecularExponent;
                this.Grasses = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Grasses, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem TextureSet;
            public TItem MaterialType;
            public MaskItem<TItem, HavokData.Mask<TItem>?>? HavokData { get; set; }
            public TItem TextureSpecularExponent;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Grasses;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.TextureSet, rhs.TextureSet)) return false;
                if (!object.Equals(this.MaterialType, rhs.MaterialType)) return false;
                if (!object.Equals(this.HavokData, rhs.HavokData)) return false;
                if (!object.Equals(this.TextureSpecularExponent, rhs.TextureSpecularExponent)) return false;
                if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.TextureSet);
                hash.Add(this.MaterialType);
                hash.Add(this.HavokData);
                hash.Add(this.TextureSpecularExponent);
                hash.Add(this.Grasses);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.TextureSet)) return false;
                if (!eval(this.MaterialType)) return false;
                if (HavokData != null)
                {
                    if (!eval(this.HavokData.Overall)) return false;
                    if (this.HavokData.Specific != null && !this.HavokData.Specific.All(eval)) return false;
                }
                if (!eval(this.TextureSpecularExponent)) return false;
                if (this.Grasses != null)
                {
                    if (!eval(this.Grasses.Overall)) return false;
                    if (this.Grasses.Specific != null)
                    {
                        foreach (var item in this.Grasses.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.TextureSet)) return true;
                if (eval(this.MaterialType)) return true;
                if (HavokData != null)
                {
                    if (eval(this.HavokData.Overall)) return true;
                    if (this.HavokData.Specific != null && this.HavokData.Specific.Any(eval)) return true;
                }
                if (eval(this.TextureSpecularExponent)) return true;
                if (this.Grasses != null)
                {
                    if (eval(this.Grasses.Overall)) return true;
                    if (this.Grasses.Specific != null)
                    {
                        foreach (var item in this.Grasses.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LandscapeTexture.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.TextureSet = eval(this.TextureSet);
                obj.MaterialType = eval(this.MaterialType);
                obj.HavokData = this.HavokData == null ? null : new MaskItem<R, HavokData.Mask<R>?>(eval(this.HavokData.Overall), this.HavokData.Specific?.Translate(eval));
                obj.TextureSpecularExponent = eval(this.TextureSpecularExponent);
                if (Grasses != null)
                {
                    obj.Grasses = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Grasses.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Grasses.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Grasses.Specific = l;
                        foreach (var item in Grasses.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LandscapeTexture.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LandscapeTexture.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LandscapeTexture.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.TextureSet ?? true)
                    {
                        fg.AppendItem(TextureSet, "TextureSet");
                    }
                    if (printMask?.MaterialType ?? true)
                    {
                        fg.AppendItem(MaterialType, "MaterialType");
                    }
                    if (printMask?.HavokData?.Overall ?? true)
                    {
                        HavokData?.ToString(fg);
                    }
                    if (printMask?.TextureSpecularExponent ?? true)
                    {
                        fg.AppendItem(TextureSpecularExponent, "TextureSpecularExponent");
                    }
                    if ((printMask?.Grasses?.Overall ?? true)
                        && Grasses.TryGet(out var GrassesItem))
                    {
                        fg.AppendLine("Grasses =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(GrassesItem.Overall);
                            if (GrassesItem.Specific != null)
                            {
                                foreach (var subItem in GrassesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? TextureSet;
            public Exception? MaterialType;
            public MaskItem<Exception?, HavokData.ErrorMask?>? HavokData;
            public Exception? TextureSpecularExponent;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Grasses;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                LandscapeTexture_FieldIndex enu = (LandscapeTexture_FieldIndex)index;
                switch (enu)
                {
                    case LandscapeTexture_FieldIndex.TextureSet:
                        return TextureSet;
                    case LandscapeTexture_FieldIndex.MaterialType:
                        return MaterialType;
                    case LandscapeTexture_FieldIndex.HavokData:
                        return HavokData;
                    case LandscapeTexture_FieldIndex.TextureSpecularExponent:
                        return TextureSpecularExponent;
                    case LandscapeTexture_FieldIndex.Grasses:
                        return Grasses;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                LandscapeTexture_FieldIndex enu = (LandscapeTexture_FieldIndex)index;
                switch (enu)
                {
                    case LandscapeTexture_FieldIndex.TextureSet:
                        this.TextureSet = ex;
                        break;
                    case LandscapeTexture_FieldIndex.MaterialType:
                        this.MaterialType = ex;
                        break;
                    case LandscapeTexture_FieldIndex.HavokData:
                        this.HavokData = new MaskItem<Exception?, HavokData.ErrorMask?>(ex, null);
                        break;
                    case LandscapeTexture_FieldIndex.TextureSpecularExponent:
                        this.TextureSpecularExponent = ex;
                        break;
                    case LandscapeTexture_FieldIndex.Grasses:
                        this.Grasses = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                LandscapeTexture_FieldIndex enu = (LandscapeTexture_FieldIndex)index;
                switch (enu)
                {
                    case LandscapeTexture_FieldIndex.TextureSet:
                        this.TextureSet = (Exception?)obj;
                        break;
                    case LandscapeTexture_FieldIndex.MaterialType:
                        this.MaterialType = (Exception?)obj;
                        break;
                    case LandscapeTexture_FieldIndex.HavokData:
                        this.HavokData = (MaskItem<Exception?, HavokData.ErrorMask?>?)obj;
                        break;
                    case LandscapeTexture_FieldIndex.TextureSpecularExponent:
                        this.TextureSpecularExponent = (Exception?)obj;
                        break;
                    case LandscapeTexture_FieldIndex.Grasses:
                        this.Grasses = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (TextureSet != null) return true;
                if (MaterialType != null) return true;
                if (HavokData != null) return true;
                if (TextureSpecularExponent != null) return true;
                if (Grasses != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(TextureSet, "TextureSet");
                fg.AppendItem(MaterialType, "MaterialType");
                HavokData?.ToString(fg);
                fg.AppendItem(TextureSpecularExponent, "TextureSpecularExponent");
                if (Grasses.TryGet(out var GrassesItem))
                {
                    fg.AppendLine("Grasses =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(GrassesItem.Overall);
                        if (GrassesItem.Specific != null)
                        {
                            foreach (var subItem in GrassesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.TextureSet = this.TextureSet.Combine(rhs.TextureSet);
                ret.MaterialType = this.MaterialType.Combine(rhs.MaterialType);
                ret.HavokData = this.HavokData.Combine(rhs.HavokData, (l, r) => l.Combine(r));
                ret.TextureSpecularExponent = this.TextureSpecularExponent.Combine(rhs.TextureSpecularExponent);
                ret.Grasses = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Grasses?.Overall, rhs.Grasses?.Overall), ExceptionExt.Combine(this.Grasses?.Specific, rhs.Grasses?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool TextureSet;
            public bool MaterialType;
            public MaskItem<bool, HavokData.TranslationMask?> HavokData;
            public bool TextureSpecularExponent;
            public bool Grasses;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.TextureSet = defaultOn;
                this.MaterialType = defaultOn;
                this.HavokData = new MaskItem<bool, HavokData.TranslationMask?>(defaultOn, null);
                this.TextureSpecularExponent = defaultOn;
                this.Grasses = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((TextureSet, null));
                ret.Add((MaterialType, null));
                ret.Add((HavokData?.Overall ?? true, HavokData?.Specific?.GetCrystal()));
                ret.Add((TextureSpecularExponent, null));
                ret.Add((Grasses, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = LandscapeTexture_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => LandscapeTextureCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => LandscapeTextureCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LandscapeTextureCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LandscapeTextureCommon.Instance.RemapLinks(this, mapping);
        public LandscapeTexture(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public LandscapeTexture(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public LandscapeTexture(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LandscapeTextureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LandscapeTextureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new LandscapeTexture CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static LandscapeTexture CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LandscapeTexture();
            ((LandscapeTextureSetterCommon)((ILandscapeTextureGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILandscapeTextureGetter)rhs, include);

        void IClearable.Clear()
        {
            ((LandscapeTextureSetterCommon)((ILandscapeTextureGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new LandscapeTexture GetNew()
        {
            return new LandscapeTexture();
        }

    }
    #endregion

    #region Interface
    public partial interface ILandscapeTexture :
        ILandscapeTextureGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<ILandscapeTextureInternal>
    {
        new IFormLinkNullable<TextureSet> TextureSet { get; }
        new IFormLink<MaterialType> MaterialType { get; }
        new HavokData HavokData { get; set; }
        new Byte TextureSpecularExponent { get; set; }
        new ExtendedList<IFormLink<Grass>>? Grasses { get; set; }
    }

    public partial interface ILandscapeTextureInternal :
        ISkyrimMajorRecordInternal,
        ILandscapeTexture,
        ILandscapeTextureGetter
    {
    }

    public partial interface ILandscapeTextureGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<ILandscapeTextureGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => LandscapeTexture_Registration.Instance;
        IFormLinkNullableGetter<ITextureSetGetter> TextureSet { get; }
        IFormLinkGetter<IMaterialTypeGetter> MaterialType { get; }
        IHavokDataGetter HavokData { get; }
        Byte TextureSpecularExponent { get; }
        IReadOnlyList<IFormLinkGetter<IGrassGetter>>? Grasses { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LandscapeTextureMixIn
    {
        public static void Clear(this ILandscapeTextureInternal item)
        {
            ((LandscapeTextureSetterCommon)((ILandscapeTextureGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LandscapeTexture.Mask<bool> GetEqualsMask(
            this ILandscapeTextureGetter item,
            ILandscapeTextureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILandscapeTextureGetter item,
            string? name = null,
            LandscapeTexture.Mask<bool>? printMask = null)
        {
            return ((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILandscapeTextureGetter item,
            FileGeneration fg,
            string? name = null,
            LandscapeTexture.Mask<bool>? printMask = null)
        {
            ((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILandscapeTextureGetter item,
            LandscapeTexture.Mask<bool?> checkMask)
        {
            return ((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LandscapeTexture.Mask<bool> GetHasBeenSetMask(this ILandscapeTextureGetter item)
        {
            var ret = new LandscapeTexture.Mask<bool>(false);
            ((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILandscapeTextureGetter item,
            ILandscapeTextureGetter rhs)
        {
            return ((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILandscapeTextureInternal lhs,
            ILandscapeTextureGetter rhs,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LandscapeTextureSetterTranslationCommon)((ILandscapeTextureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = LandscapeTexture.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILandscapeTextureInternal lhs,
            ILandscapeTextureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LandscapeTextureSetterTranslationCommon)((ILandscapeTextureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static LandscapeTexture DeepCopy(
            this ILandscapeTextureGetter item,
            LandscapeTexture.TranslationMask? copyMask = null)
        {
            return ((LandscapeTextureSetterTranslationCommon)((ILandscapeTextureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LandscapeTexture DeepCopy(
            this ILandscapeTextureGetter item,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? copyMask = null)
        {
            return ((LandscapeTextureSetterTranslationCommon)((ILandscapeTextureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LandscapeTexture DeepCopy(
            this ILandscapeTextureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LandscapeTextureSetterTranslationCommon)((ILandscapeTextureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILandscapeTextureInternal item,
            XElement node,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILandscapeTextureInternal item,
            XElement node,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LandscapeTexture.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ILandscapeTextureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((LandscapeTextureSetterCommon)((ILandscapeTextureGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandscapeTextureInternal item,
            string path,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandscapeTextureInternal item,
            string path,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandscapeTextureInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ILandscapeTextureInternal item,
            Stream stream,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandscapeTextureInternal item,
            Stream stream,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandscapeTextureInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LandscapeTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILandscapeTextureInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ILandscapeTextureInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LandscapeTextureSetterCommon)((ILandscapeTextureGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum LandscapeTexture_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        TextureSet = 6,
        MaterialType = 7,
        HavokData = 8,
        TextureSpecularExponent = 9,
        Grasses = 10,
    }
    #endregion

    #region Registration
    public partial class LandscapeTexture_Registration : ILoquiRegistration
    {
        public static readonly LandscapeTexture_Registration Instance = new LandscapeTexture_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 130,
            version: 0);

        public const string GUID = "f6e8d6f6-773c-4c3b-b09b-d892c0114ed7";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(LandscapeTexture.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LandscapeTexture.ErrorMask);

        public static readonly Type ClassType = typeof(LandscapeTexture);

        public static readonly Type GetterType = typeof(ILandscapeTextureGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILandscapeTexture);

        public static readonly Type? InternalSetterType = typeof(ILandscapeTextureInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.LandscapeTexture";

        public const string Name = "LandscapeTexture";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TEXTURESET":
                    return (ushort)LandscapeTexture_FieldIndex.TextureSet;
                case "MATERIALTYPE":
                    return (ushort)LandscapeTexture_FieldIndex.MaterialType;
                case "HAVOKDATA":
                    return (ushort)LandscapeTexture_FieldIndex.HavokData;
                case "TEXTURESPECULAREXPONENT":
                    return (ushort)LandscapeTexture_FieldIndex.TextureSpecularExponent;
                case "GRASSES":
                    return (ushort)LandscapeTexture_FieldIndex.Grasses;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LandscapeTexture_FieldIndex enu = (LandscapeTexture_FieldIndex)index;
            switch (enu)
            {
                case LandscapeTexture_FieldIndex.Grasses:
                    return true;
                case LandscapeTexture_FieldIndex.TextureSet:
                case LandscapeTexture_FieldIndex.MaterialType:
                case LandscapeTexture_FieldIndex.HavokData:
                case LandscapeTexture_FieldIndex.TextureSpecularExponent:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LandscapeTexture_FieldIndex enu = (LandscapeTexture_FieldIndex)index;
            switch (enu)
            {
                case LandscapeTexture_FieldIndex.HavokData:
                    return true;
                case LandscapeTexture_FieldIndex.TextureSet:
                case LandscapeTexture_FieldIndex.MaterialType:
                case LandscapeTexture_FieldIndex.TextureSpecularExponent:
                case LandscapeTexture_FieldIndex.Grasses:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LandscapeTexture_FieldIndex enu = (LandscapeTexture_FieldIndex)index;
            switch (enu)
            {
                case LandscapeTexture_FieldIndex.TextureSet:
                case LandscapeTexture_FieldIndex.MaterialType:
                case LandscapeTexture_FieldIndex.HavokData:
                case LandscapeTexture_FieldIndex.TextureSpecularExponent:
                case LandscapeTexture_FieldIndex.Grasses:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            LandscapeTexture_FieldIndex enu = (LandscapeTexture_FieldIndex)index;
            switch (enu)
            {
                case LandscapeTexture_FieldIndex.TextureSet:
                    return "TextureSet";
                case LandscapeTexture_FieldIndex.MaterialType:
                    return "MaterialType";
                case LandscapeTexture_FieldIndex.HavokData:
                    return "HavokData";
                case LandscapeTexture_FieldIndex.TextureSpecularExponent:
                    return "TextureSpecularExponent";
                case LandscapeTexture_FieldIndex.Grasses:
                    return "Grasses";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LandscapeTexture_FieldIndex enu = (LandscapeTexture_FieldIndex)index;
            switch (enu)
            {
                case LandscapeTexture_FieldIndex.TextureSet:
                case LandscapeTexture_FieldIndex.MaterialType:
                case LandscapeTexture_FieldIndex.HavokData:
                case LandscapeTexture_FieldIndex.TextureSpecularExponent:
                case LandscapeTexture_FieldIndex.Grasses:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            LandscapeTexture_FieldIndex enu = (LandscapeTexture_FieldIndex)index;
            switch (enu)
            {
                case LandscapeTexture_FieldIndex.TextureSet:
                case LandscapeTexture_FieldIndex.MaterialType:
                case LandscapeTexture_FieldIndex.HavokData:
                case LandscapeTexture_FieldIndex.TextureSpecularExponent:
                case LandscapeTexture_FieldIndex.Grasses:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            LandscapeTexture_FieldIndex enu = (LandscapeTexture_FieldIndex)index;
            switch (enu)
            {
                case LandscapeTexture_FieldIndex.TextureSet:
                    return typeof(IFormLinkNullable<TextureSet>);
                case LandscapeTexture_FieldIndex.MaterialType:
                    return typeof(IFormLink<MaterialType>);
                case LandscapeTexture_FieldIndex.HavokData:
                    return typeof(HavokData);
                case LandscapeTexture_FieldIndex.TextureSpecularExponent:
                    return typeof(Byte);
                case LandscapeTexture_FieldIndex.Grasses:
                    return typeof(ExtendedList<IFormLink<Grass>>);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LandscapeTextureXmlWriteTranslation);
        public static readonly RecordType LTEX_HEADER = new RecordType("LTEX");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType GNAM_HEADER = new RecordType("GNAM");
        public static readonly RecordType TriggeringRecordType = LTEX_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        public static readonly Type BinaryWriteTranslation = typeof(LandscapeTextureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LandscapeTextureSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly LandscapeTextureSetterCommon Instance = new LandscapeTextureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILandscapeTextureInternal item)
        {
            ClearPartial();
            item.TextureSet.FormKey = null;
            item.MaterialType.FormKey = FormKey.Null;
            item.HavokData.Clear();
            item.TextureSpecularExponent = default;
            item.Grasses = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ILandscapeTextureInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILandscapeTextureInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ILandscapeTextureInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            ILandscapeTextureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    LandscapeTextureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (LandscapeTexture)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (LandscapeTexture)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => LandscapeTexture_Registration.LTEX_HEADER;
        protected static void FillBinaryStructs(
            ILandscapeTextureInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ILandscapeTextureInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E54: // TNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.TextureSet.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)LandscapeTexture_FieldIndex.TextureSet);
                }
                case 0x4D414E4D: // MNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MaterialType.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)LandscapeTexture_FieldIndex.MaterialType);
                }
                case 0x4D414E48: // HNAM
                {
                    item.HavokData = Mutagen.Bethesda.Skyrim.HavokData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)LandscapeTexture_FieldIndex.HavokData);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.TextureSpecularExponent = frame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)LandscapeTexture_FieldIndex.TextureSpecularExponent);
                }
                case 0x4D414E47: // GNAM
                {
                    item.Grasses = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Grass>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: LandscapeTexture_Registration.GNAM_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Grass>>();
                    return TryGet<int?>.Succeed((int)LandscapeTexture_FieldIndex.Grasses);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            ILandscapeTextureInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ILandscapeTextureInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (LandscapeTexture)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (LandscapeTexture)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class LandscapeTextureCommon : SkyrimMajorRecordCommon
    {
        public new static readonly LandscapeTextureCommon Instance = new LandscapeTextureCommon();

        public LandscapeTexture.Mask<bool> GetEqualsMask(
            ILandscapeTextureGetter item,
            ILandscapeTextureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LandscapeTexture.Mask<bool>(false);
            ((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILandscapeTextureGetter item,
            ILandscapeTextureGetter rhs,
            LandscapeTexture.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.TextureSet = object.Equals(item.TextureSet, rhs.TextureSet);
            ret.MaterialType = object.Equals(item.MaterialType, rhs.MaterialType);
            ret.HavokData = MaskItemExt.Factory(item.HavokData.GetEqualsMask(rhs.HavokData, include), include);
            ret.TextureSpecularExponent = item.TextureSpecularExponent == rhs.TextureSpecularExponent;
            ret.Grasses = item.Grasses.CollectionEqualsHelper(
                rhs.Grasses,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILandscapeTextureGetter item,
            string? name = null,
            LandscapeTexture.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILandscapeTextureGetter item,
            FileGeneration fg,
            string? name = null,
            LandscapeTexture.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LandscapeTexture =>");
            }
            else
            {
                fg.AppendLine($"{name} (LandscapeTexture) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILandscapeTextureGetter item,
            FileGeneration fg,
            LandscapeTexture.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.TextureSet ?? true)
                && item.TextureSet.TryGet(out var TextureSetItem))
            {
                fg.AppendItem(TextureSetItem, "TextureSet");
            }
            if (printMask?.MaterialType ?? true)
            {
                fg.AppendItem(item.MaterialType, "MaterialType");
            }
            if (printMask?.HavokData?.Overall ?? true)
            {
                item.HavokData?.ToString(fg, "HavokData");
            }
            if (printMask?.TextureSpecularExponent ?? true)
            {
                fg.AppendItem(item.TextureSpecularExponent, "TextureSpecularExponent");
            }
            if ((printMask?.Grasses?.Overall ?? true)
                && item.Grasses.TryGet(out var GrassesItem))
            {
                fg.AppendLine("Grasses =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in GrassesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ILandscapeTextureGetter item,
            LandscapeTexture.Mask<bool?> checkMask)
        {
            if (checkMask.TextureSet.HasValue && checkMask.TextureSet.Value != (item.TextureSet.FormKey != null)) return false;
            if (checkMask.Grasses?.Overall.HasValue ?? false && checkMask.Grasses!.Overall.Value != (item.Grasses != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ILandscapeTextureGetter item,
            LandscapeTexture.Mask<bool> mask)
        {
            mask.TextureSet = (item.TextureSet.FormKey != null);
            mask.MaterialType = true;
            mask.HavokData = new MaskItem<bool, HavokData.Mask<bool>?>(true, item.HavokData?.GetHasBeenSetMask());
            mask.TextureSpecularExponent = true;
            mask.Grasses = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Grasses != null), default);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static LandscapeTexture_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (LandscapeTexture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new LandscapeTexture_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (LandscapeTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LandscapeTexture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILandscapeTextureGetter? lhs,
            ILandscapeTextureGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.TextureSet.Equals(rhs.TextureSet)) return false;
            if (!lhs.MaterialType.Equals(rhs.MaterialType)) return false;
            if (!object.Equals(lhs.HavokData, rhs.HavokData)) return false;
            if (lhs.TextureSpecularExponent != rhs.TextureSpecularExponent) return false;
            if (!lhs.Grasses.SequenceEqual(rhs.Grasses)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILandscapeTextureGetter?)lhs,
                rhs: rhs as ILandscapeTextureGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILandscapeTextureGetter?)lhs,
                rhs: rhs as ILandscapeTextureGetter);
        }
        
        public virtual int GetHashCode(ILandscapeTextureGetter item)
        {
            var hash = new HashCode();
            if (item.TextureSet.TryGet(out var TextureSetitem))
            {
                hash.Add(TextureSetitem);
            }
            hash.Add(item.MaterialType);
            hash.Add(item.HavokData);
            hash.Add(item.TextureSpecularExponent);
            hash.Add(item.Grasses);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ILandscapeTextureGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILandscapeTextureGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LandscapeTexture.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ILandscapeTextureGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.TextureSet.FormKey.TryGet(out var TextureSetKey))
            {
                yield return TextureSetKey;
            }
            yield return obj.MaterialType.FormKey;
            if (obj.Grasses.TryGet(out var GrassesItem))
            {
                foreach (var item in GrassesItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(ILandscapeTextureGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(LandscapeTexture obj, LandscapeTexture rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new LandscapeTexture(getNextFormKey());
            ret.DeepCopyIn((LandscapeTexture)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (LandscapeTexture)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class LandscapeTextureSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly LandscapeTextureSetterTranslationCommon Instance = new LandscapeTextureSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ILandscapeTextureInternal item,
            ILandscapeTextureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ILandscapeTexture item,
            ILandscapeTextureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.TextureSet) ?? true))
            {
                item.TextureSet.FormKey = rhs.TextureSet.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.MaterialType) ?? true))
            {
                item.MaterialType.FormKey = rhs.MaterialType.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.HavokData) ?? true))
            {
                errorMask?.PushIndex((int)LandscapeTexture_FieldIndex.HavokData);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.HavokData) ?? true))
                    {
                        item.HavokData = rhs.HavokData.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)LandscapeTexture_FieldIndex.HavokData),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.TextureSpecularExponent) ?? true))
            {
                item.TextureSpecularExponent = rhs.TextureSpecularExponent;
            }
            if ((copyMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.Grasses) ?? true))
            {
                errorMask?.PushIndex((int)LandscapeTexture_FieldIndex.Grasses);
                try
                {
                    if ((rhs.Grasses != null))
                    {
                        item.Grasses = 
                            rhs.Grasses
                            .Select(r => new FormLink<Grass>(r.FormKey))
                            .ToExtendedList<IFormLink<Grass>>();
                    }
                    else
                    {
                        item.Grasses = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILandscapeTextureInternal)item,
                rhs: (ILandscapeTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILandscapeTexture)item,
                rhs: (ILandscapeTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILandscapeTextureInternal)item,
                rhs: (ILandscapeTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILandscapeTexture)item,
                rhs: (ILandscapeTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public LandscapeTexture DeepCopy(
            ILandscapeTextureGetter item,
            LandscapeTexture.TranslationMask? copyMask = null)
        {
            LandscapeTexture ret = (LandscapeTexture)((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public LandscapeTexture DeepCopy(
            ILandscapeTextureGetter item,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? copyMask = null)
        {
            LandscapeTexture ret = (LandscapeTexture)((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public LandscapeTexture DeepCopy(
            ILandscapeTextureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LandscapeTexture ret = (LandscapeTexture)((LandscapeTextureCommon)((ILandscapeTextureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class LandscapeTexture
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LandscapeTexture_Registration.Instance;
        public new static LandscapeTexture_Registration Registration => LandscapeTexture_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LandscapeTextureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LandscapeTextureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LandscapeTextureSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class LandscapeTextureXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static LandscapeTextureXmlWriteTranslation Instance = new LandscapeTextureXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILandscapeTextureGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.TextureSet.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.TextureSet) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TextureSet),
                    item: item.TextureSet.FormKey.Value,
                    fieldIndex: (int)LandscapeTexture_FieldIndex.TextureSet,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.MaterialType) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaterialType),
                    item: item.MaterialType.FormKey,
                    fieldIndex: (int)LandscapeTexture_FieldIndex.MaterialType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.HavokData) ?? true))
            {
                var HavokDataItem = item.HavokData;
                ((HavokDataXmlWriteTranslation)((IXmlItem)HavokDataItem).XmlWriteTranslator).Write(
                    item: HavokDataItem,
                    node: node,
                    name: nameof(item.HavokData),
                    fieldIndex: (int)LandscapeTexture_FieldIndex.HavokData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)LandscapeTexture_FieldIndex.HavokData));
            }
            if ((translationMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.TextureSpecularExponent) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TextureSpecularExponent),
                    item: item.TextureSpecularExponent,
                    fieldIndex: (int)LandscapeTexture_FieldIndex.TextureSpecularExponent,
                    errorMask: errorMask);
            }
            if ((item.Grasses != null)
                && (translationMask?.GetShouldTranslate((int)LandscapeTexture_FieldIndex.Grasses) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IGrassGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Grasses),
                    item: item.Grasses,
                    fieldIndex: (int)LandscapeTexture_FieldIndex.Grasses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)LandscapeTexture_FieldIndex.Grasses),
                    transl: (XElement subNode, IFormLinkGetter<IGrassGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ILandscapeTextureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.LandscapeTexture");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.LandscapeTexture");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILandscapeTextureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILandscapeTextureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILandscapeTextureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class LandscapeTextureXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static LandscapeTextureXmlCreateTranslation Instance = new LandscapeTextureXmlCreateTranslation();

        public static void FillPublicXml(
            ILandscapeTextureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LandscapeTextureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILandscapeTextureInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "TextureSet":
                    errorMask?.PushIndex((int)LandscapeTexture_FieldIndex.TextureSet);
                    try
                    {
                        item.TextureSet.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaterialType":
                    errorMask?.PushIndex((int)LandscapeTexture_FieldIndex.MaterialType);
                    try
                    {
                        item.MaterialType.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HavokData":
                    errorMask?.PushIndex((int)LandscapeTexture_FieldIndex.HavokData);
                    try
                    {
                        item.HavokData = LoquiXmlTranslation<HavokData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)LandscapeTexture_FieldIndex.HavokData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TextureSpecularExponent":
                    errorMask?.PushIndex((int)LandscapeTexture_FieldIndex.TextureSpecularExponent);
                    try
                    {
                        item.TextureSpecularExponent = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Grasses":
                    errorMask?.PushIndex((int)LandscapeTexture_FieldIndex.Grasses);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Grass>>.Instance.Parse(
                            node: node,
                            enumer: out var GrassesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Grasses = GrassesItem.ToExtendedList();
                        }
                        else
                        {
                            item.Grasses = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class LandscapeTextureXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILandscapeTextureGetter item,
            XElement node,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((LandscapeTextureXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LandscapeTexture.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILandscapeTextureGetter item,
            string path,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILandscapeTextureGetter item,
            Stream stream,
            out LandscapeTexture.ErrorMask errorMask,
            LandscapeTexture.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class LandscapeTextureBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LandscapeTextureBinaryWriteTranslation Instance = new LandscapeTextureBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ILandscapeTextureGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TextureSet,
                header: recordTypeConverter.ConvertToCustom(LandscapeTexture_Registration.TNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaterialType,
                header: recordTypeConverter.ConvertToCustom(LandscapeTexture_Registration.MNAM_HEADER));
            var HavokDataItem = item.HavokData;
            ((HavokDataBinaryWriteTranslation)((IBinaryItem)HavokDataItem).BinaryWriteTranslator).Write(
                item: HavokDataItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TextureSpecularExponent,
                header: recordTypeConverter.ConvertToCustom(LandscapeTexture_Registration.SNAM_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IGrassGetter>>.Instance.Write(
                writer: writer,
                items: item.Grasses,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IGrassGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(LandscapeTexture_Registration.GNAM_HEADER));
                });
        }

        public void Write(
            MutagenWriter writer,
            ILandscapeTextureGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(LandscapeTexture_Registration.LTEX_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILandscapeTextureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILandscapeTextureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILandscapeTextureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LandscapeTextureBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static LandscapeTextureBinaryCreateTranslation Instance = new LandscapeTextureBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class LandscapeTextureBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class LandscapeTextureBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ILandscapeTextureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LandscapeTexture_Registration.Instance;
        public new static LandscapeTexture_Registration Registration => LandscapeTexture_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LandscapeTextureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LandscapeTextureSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILandscapeTextureGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => LandscapeTextureCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => LandscapeTextureCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LandscapeTextureCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LandscapeTextureCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => LandscapeTextureXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LandscapeTextureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LandscapeTextureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LandscapeTextureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region TextureSet
        private int? _TextureSetLocation;
        public bool TextureSet_IsSet => _TextureSetLocation.HasValue;
        public IFormLinkNullableGetter<ITextureSetGetter> TextureSet => _TextureSetLocation.HasValue ? new FormLinkNullable<ITextureSetGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _TextureSetLocation.Value, _package.Meta)))) : FormLinkNullable<ITextureSetGetter>.Empty;
        #endregion
        #region MaterialType
        private int? _MaterialTypeLocation;
        public bool MaterialType_IsSet => _MaterialTypeLocation.HasValue;
        public IFormLinkGetter<IMaterialTypeGetter> MaterialType => _MaterialTypeLocation.HasValue ? new FormLink<IMaterialTypeGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _MaterialTypeLocation.Value, _package.Meta)))) : FormLink<IMaterialTypeGetter>.Empty;
        #endregion
        #region HavokData
        private RangeInt32? _HavokDataLocation;
        public IHavokDataGetter? _HavokData => _HavokDataLocation.HasValue ? HavokDataBinaryOverlay.HavokDataFactory(new BinaryMemoryReadStream(_data.Slice(_HavokDataLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public IHavokDataGetter HavokData => _HavokData ?? new HavokData();
        #endregion
        #region TextureSpecularExponent
        private int? _TextureSpecularExponentLocation;
        public Byte TextureSpecularExponent => _TextureSpecularExponentLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _TextureSpecularExponentLocation.Value, _package.Meta)[0] : default(Byte);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IGrassGetter>>? Grasses { get; private set; }
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected LandscapeTextureBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LandscapeTextureBinaryOverlay LandscapeTextureFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new LandscapeTextureBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static LandscapeTextureBinaryOverlay LandscapeTextureFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return LandscapeTextureFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4D414E54: // TNAM
                {
                    _TextureSetLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LandscapeTexture_FieldIndex.TextureSet);
                }
                case 0x4D414E4D: // MNAM
                {
                    _MaterialTypeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LandscapeTexture_FieldIndex.MaterialType);
                }
                case 0x4D414E48: // HNAM
                {
                    _HavokDataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)LandscapeTexture_FieldIndex.HavokData);
                }
                case 0x4D414E53: // SNAM
                {
                    _TextureSpecularExponentLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LandscapeTexture_FieldIndex.TextureSpecularExponent);
                }
                case 0x4D414E47: // GNAM
                {
                    this.Grasses = BinaryOverlaySetList<IFormLinkGetter<IGrassGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IGrassGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return TryGet<int?>.Succeed((int)LandscapeTexture_FieldIndex.Grasses);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LandscapeTextureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

