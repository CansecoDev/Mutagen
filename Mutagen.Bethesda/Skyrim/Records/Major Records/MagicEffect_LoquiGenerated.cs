/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class MagicEffect :
        SkyrimMajorRecord,
        IMagicEffectInternal,
        ILoquiObjectSetter<MagicEffect>,
        IEquatable<MagicEffect>,
        IEqualsMask
    {
        #region Ctor
        protected MagicEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IMagicEffectGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMagicEffectGetter.Name => this.Name;
        #endregion
        #region MenuDisplayObject
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Static> _MenuDisplayObject = new FormLinkNullable<Static>();
        public IFormLinkNullable<Static> MenuDisplayObject => this._MenuDisplayObject;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IStaticGetter> IMagicEffectGetter.MenuDisplayObject => this.MenuDisplayObject;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Keyword>>? _Keywords;
        public ExtendedList<IFormLink<Keyword>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IMagicEffectGetter.Keywords => _Keywords;
        #endregion

        #endregion
        #region Data
        public MagicEffectData Data { get; set; } = new MagicEffectData();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMagicEffectDataGetter IMagicEffectGetter.Data => Data;
        #endregion
        #region CounterEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<MagicEffect>>? _CounterEffects;
        public ExtendedList<IFormLink<MagicEffect>>? CounterEffects
        {
            get => this._CounterEffects;
            set => this._CounterEffects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IMagicEffectGetter>>? IMagicEffectGetter.CounterEffects => _CounterEffects;
        #endregion

        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MagicEffectSound>? _Sounds;
        public ExtendedList<MagicEffectSound>? Sounds
        {
            get => this._Sounds;
            set => this._Sounds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMagicEffectSoundGetter>? IMagicEffectGetter.Sounds => _Sounds;
        #endregion

        #endregion
        #region MagicItemDescription
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _MagicItemDescription;
        public String? MagicItemDescription
        {
            get => this._MagicItemDescription;
            set => this._MagicItemDescription = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMagicEffectGetter.MagicItemDescription => this.MagicItemDescription;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IMagicEffectGetter.Conditions => _Conditions;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MagicEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IMagicEffectGetter rhs)) return false;
            return ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(MagicEffect obj)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => MagicEffectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((MagicEffectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new MagicEffect CreateFromXml(
            XElement node,
            MagicEffect.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MagicEffect CreateFromXml(
            XElement node,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static MagicEffect CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new MagicEffect();
            ((MagicEffectSetterCommon)((IMagicEffectGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static MagicEffect CreateFromXml(
            string path,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static MagicEffect CreateFromXml(
            string path,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MagicEffect CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MagicEffect CreateFromXml(
            Stream stream,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static MagicEffect CreateFromXml(
            Stream stream,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MagicEffect CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.MenuDisplayObject = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Data = new MaskItem<TItem, MagicEffectData.Mask<TItem>?>(initialValue, new MagicEffectData.Mask<TItem>(initialValue));
                this.CounterEffects = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>());
                this.MagicItemDescription = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem Name,
                TItem MenuDisplayObject,
                TItem Keywords,
                TItem Data,
                TItem CounterEffects,
                TItem Sounds,
                TItem MagicItemDescription,
                TItem Conditions)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Name = Name;
                this.MenuDisplayObject = MenuDisplayObject;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Data = new MaskItem<TItem, MagicEffectData.Mask<TItem>?>(Data, new MagicEffectData.Mask<TItem>(Data));
                this.CounterEffects = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(CounterEffects, Enumerable.Empty<(int Index, TItem Value)>());
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>?>(Sounds, Enumerable.Empty<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>());
                this.MagicItemDescription = MagicItemDescription;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Name;
            public TItem MenuDisplayObject;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, MagicEffectData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? CounterEffects;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>?>? Sounds;
            public TItem MagicItemDescription;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.MenuDisplayObject, rhs.MenuDisplayObject)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.CounterEffects, rhs.CounterEffects)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                if (!object.Equals(this.MagicItemDescription, rhs.MagicItemDescription)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Name);
                hash.Add(this.MenuDisplayObject);
                hash.Add(this.Keywords);
                hash.Add(this.Data);
                hash.Add(this.CounterEffects);
                hash.Add(this.Sounds);
                hash.Add(this.MagicItemDescription);
                hash.Add(this.Conditions);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.MenuDisplayObject)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (this.CounterEffects != null)
                {
                    if (!eval(this.CounterEffects.Overall)) return false;
                    if (this.CounterEffects.Specific != null)
                    {
                        foreach (var item in this.CounterEffects.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.MagicItemDescription)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.MenuDisplayObject)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (this.CounterEffects != null)
                {
                    if (eval(this.CounterEffects.Overall)) return true;
                    if (this.CounterEffects.Specific != null)
                    {
                        foreach (var item in this.CounterEffects.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.MagicItemDescription)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MagicEffect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.MenuDisplayObject = eval(this.MenuDisplayObject);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Data = this.Data == null ? null : new MaskItem<R, MagicEffectData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                if (CounterEffects != null)
                {
                    obj.CounterEffects = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.CounterEffects.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (CounterEffects.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.CounterEffects.Specific = l;
                        foreach (var item in CounterEffects.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Sounds != null)
                {
                    obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MagicEffectSound.Mask<R>?>>?>(eval(this.Sounds.Overall), Enumerable.Empty<MaskItemIndexed<R, MagicEffectSound.Mask<R>?>>());
                    if (Sounds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MagicEffectSound.Mask<R>?>>();
                        obj.Sounds.Specific = l;
                        foreach (var item in Sounds.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, MagicEffectSound.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, MagicEffectSound.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.MagicItemDescription = eval(this.MagicItemDescription);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(MagicEffect.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, MagicEffect.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(MagicEffect.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.MenuDisplayObject ?? true)
                    {
                        fg.AppendItem(MenuDisplayObject, "MenuDisplayObject");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords.TryGet(out var KeywordsItem))
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                    if ((printMask?.CounterEffects?.Overall ?? true)
                        && CounterEffects.TryGet(out var CounterEffectsItem))
                    {
                        fg.AppendLine("CounterEffects =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(CounterEffectsItem.Overall);
                            if (CounterEffectsItem.Specific != null)
                            {
                                foreach (var subItem in CounterEffectsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Sounds?.Overall ?? true)
                        && Sounds.TryGet(out var SoundsItem))
                    {
                        fg.AppendLine("Sounds =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SoundsItem.Overall);
                            if (SoundsItem.Specific != null)
                            {
                                foreach (var subItem in SoundsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.MagicItemDescription ?? true)
                    {
                        fg.AppendItem(MagicItemDescription, "MagicItemDescription");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Name;
            public Exception? MenuDisplayObject;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, MagicEffectData.ErrorMask?>? Data;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? CounterEffects;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MagicEffectSound.ErrorMask?>>?>? Sounds;
            public Exception? MagicItemDescription;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffect_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case MagicEffect_FieldIndex.Name:
                        return Name;
                    case MagicEffect_FieldIndex.MenuDisplayObject:
                        return MenuDisplayObject;
                    case MagicEffect_FieldIndex.Keywords:
                        return Keywords;
                    case MagicEffect_FieldIndex.Data:
                        return Data;
                    case MagicEffect_FieldIndex.CounterEffects:
                        return CounterEffects;
                    case MagicEffect_FieldIndex.Sounds:
                        return Sounds;
                    case MagicEffect_FieldIndex.MagicItemDescription:
                        return MagicItemDescription;
                    case MagicEffect_FieldIndex.Conditions:
                        return Conditions;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffect_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case MagicEffect_FieldIndex.MenuDisplayObject:
                        this.MenuDisplayObject = ex;
                        break;
                    case MagicEffect_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, MagicEffectData.ErrorMask?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.CounterEffects:
                        this.CounterEffects = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MagicEffectSound.ErrorMask?>>?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.MagicItemDescription:
                        this.MagicItemDescription = ex;
                        break;
                    case MagicEffect_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffect_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case MagicEffect_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.MenuDisplayObject:
                        this.MenuDisplayObject = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case MagicEffect_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, MagicEffectData.ErrorMask?>?)obj;
                        break;
                    case MagicEffect_FieldIndex.CounterEffects:
                        this.CounterEffects = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case MagicEffect_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MagicEffectSound.ErrorMask?>>?>)obj;
                        break;
                    case MagicEffect_FieldIndex.MagicItemDescription:
                        this.MagicItemDescription = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Name != null) return true;
                if (MenuDisplayObject != null) return true;
                if (Keywords != null) return true;
                if (Data != null) return true;
                if (CounterEffects != null) return true;
                if (Sounds != null) return true;
                if (MagicItemDescription != null) return true;
                if (Conditions != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(MenuDisplayObject, "MenuDisplayObject");
                if (Keywords.TryGet(out var KeywordsItem))
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Data?.ToString(fg);
                if (CounterEffects.TryGet(out var CounterEffectsItem))
                {
                    fg.AppendLine("CounterEffects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(CounterEffectsItem.Overall);
                        if (CounterEffectsItem.Specific != null)
                        {
                            foreach (var subItem in CounterEffectsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Sounds.TryGet(out var SoundsItem))
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SoundsItem.Overall);
                        if (SoundsItem.Specific != null)
                        {
                            foreach (var subItem in SoundsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(MagicItemDescription, "MagicItemDescription");
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.MenuDisplayObject = this.MenuDisplayObject.Combine(rhs.MenuDisplayObject);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.CounterEffects = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.CounterEffects?.Overall, rhs.CounterEffects?.Overall), ExceptionExt.Combine(this.CounterEffects?.Specific, rhs.CounterEffects?.Specific));
                ret.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MagicEffectSound.ErrorMask?>>?>(ExceptionExt.Combine(this.Sounds?.Overall, rhs.Sounds?.Overall), ExceptionExt.Combine(this.Sounds?.Specific, rhs.Sounds?.Specific));
                ret.MagicItemDescription = this.MagicItemDescription.Combine(rhs.MagicItemDescription);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, VirtualMachineAdapter.TranslationMask?> VirtualMachineAdapter;
            public bool Name;
            public bool MenuDisplayObject;
            public bool Keywords;
            public MaskItem<bool, MagicEffectData.TranslationMask?> Data;
            public bool CounterEffects;
            public MaskItem<bool, MagicEffectSound.TranslationMask?> Sounds;
            public bool MagicItemDescription;
            public MaskItem<bool, Condition.TranslationMask?> Conditions;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.VirtualMachineAdapter = new MaskItem<bool, VirtualMachineAdapter.TranslationMask?>(defaultOn, null);
                this.Name = defaultOn;
                this.MenuDisplayObject = defaultOn;
                this.Keywords = defaultOn;
                this.Data = new MaskItem<bool, MagicEffectData.TranslationMask?>(defaultOn, null);
                this.CounterEffects = defaultOn;
                this.Sounds = new MaskItem<bool, MagicEffectSound.TranslationMask?>(defaultOn, null);
                this.MagicItemDescription = defaultOn;
                this.Conditions = new MaskItem<bool, Condition.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter?.Overall ?? true, VirtualMachineAdapter?.Specific?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((MenuDisplayObject, null));
                ret.Add((Keywords, null));
                ret.Add((Data?.Overall ?? true, Data?.Specific?.GetCrystal()));
                ret.Add((CounterEffects, null));
                ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
                ret.Add((MagicItemDescription, null));
                ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = MagicEffect_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => MagicEffectCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => MagicEffectCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MagicEffectCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MagicEffectCommon.Instance.RemapLinks(this, mapping);
        public MagicEffect(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public MagicEffect(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public MagicEffect(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MagicEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MagicEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new MagicEffect CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static MagicEffect CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new MagicEffect();
            ((MagicEffectSetterCommon)((IMagicEffectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMagicEffectGetter)rhs, include);

        void IClearable.Clear()
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new MagicEffect GetNew()
        {
            return new MagicEffect();
        }

    }
    #endregion

    #region Interface
    public partial interface IMagicEffect :
        IMagicEffectGetter,
        ISkyrimMajorRecord,
        INamed,
        ILoquiObjectSetter<IMagicEffectInternal>
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new String? Name { get; set; }
        new IFormLinkNullable<Static> MenuDisplayObject { get; }
        new ExtendedList<IFormLink<Keyword>>? Keywords { get; set; }
        new MagicEffectData Data { get; set; }
        new ExtendedList<IFormLink<MagicEffect>>? CounterEffects { get; set; }
        new ExtendedList<MagicEffectSound>? Sounds { get; set; }
        new String? MagicItemDescription { get; set; }
        new ExtendedList<Condition> Conditions { get; }
    }

    public partial interface IMagicEffectInternal :
        ISkyrimMajorRecordInternal,
        IMagicEffect,
        IMagicEffectGetter
    {
    }

    public partial interface IMagicEffectGetter :
        ISkyrimMajorRecordGetter,
        INamedGetter,
        ILoquiObject<IMagicEffectGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => MagicEffect_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        String? Name { get; }
        IFormLinkNullableGetter<IStaticGetter> MenuDisplayObject { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        IMagicEffectDataGetter Data { get; }
        IReadOnlyList<IFormLinkGetter<IMagicEffectGetter>>? CounterEffects { get; }
        IReadOnlyList<IMagicEffectSoundGetter>? Sounds { get; }
        String? MagicItemDescription { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MagicEffectMixIn
    {
        public static void Clear(this IMagicEffectInternal item)
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MagicEffect.Mask<bool> GetEqualsMask(
            this IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMagicEffectGetter item,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMagicEffectGetter item,
            FileGeneration fg,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IMagicEffectGetter item,
            MagicEffect.Mask<bool?> checkMask)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static MagicEffect.Mask<bool> GetHasBeenSetMask(this IMagicEffectGetter item)
        {
            var ret = new MagicEffect.Mask<bool>(false);
            ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IMagicEffectGetter item,
            IMagicEffectGetter rhs)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IMagicEffectInternal lhs,
            IMagicEffectGetter rhs,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = MagicEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMagicEffectInternal lhs,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            MagicEffect.TranslationMask? copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            XElement node,
            MagicEffect.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            XElement node,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            string path,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            string path,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            Stream stream,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            Stream stream,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IMagicEffectInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IMagicEffectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum MagicEffect_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        Name = 7,
        MenuDisplayObject = 8,
        Keywords = 9,
        Data = 10,
        CounterEffects = 11,
        Sounds = 12,
        MagicItemDescription = 13,
        Conditions = 14,
    }
    #endregion

    #region Registration
    public partial class MagicEffect_Registration : ILoquiRegistration
    {
        public static readonly MagicEffect_Registration Instance = new MagicEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 90,
            version: 0);

        public const string GUID = "6f4b3983-51e3-47e9-894e-9c442948e6d1";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(MagicEffect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MagicEffect.ErrorMask);

        public static readonly Type ClassType = typeof(MagicEffect);

        public static readonly Type GetterType = typeof(IMagicEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMagicEffect);

        public static readonly Type? InternalSetterType = typeof(IMagicEffectInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.MagicEffect";

        public const string Name = "MagicEffect";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VIRTUALMACHINEADAPTER":
                    return (ushort)MagicEffect_FieldIndex.VirtualMachineAdapter;
                case "NAME":
                    return (ushort)MagicEffect_FieldIndex.Name;
                case "MENUDISPLAYOBJECT":
                    return (ushort)MagicEffect_FieldIndex.MenuDisplayObject;
                case "KEYWORDS":
                    return (ushort)MagicEffect_FieldIndex.Keywords;
                case "DATA":
                    return (ushort)MagicEffect_FieldIndex.Data;
                case "COUNTEREFFECTS":
                    return (ushort)MagicEffect_FieldIndex.CounterEffects;
                case "SOUNDS":
                    return (ushort)MagicEffect_FieldIndex.Sounds;
                case "MAGICITEMDESCRIPTION":
                    return (ushort)MagicEffect_FieldIndex.MagicItemDescription;
                case "CONDITIONS":
                    return (ushort)MagicEffect_FieldIndex.Conditions;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Keywords:
                case MagicEffect_FieldIndex.CounterEffects:
                case MagicEffect_FieldIndex.Sounds:
                case MagicEffect_FieldIndex.Conditions:
                    return true;
                case MagicEffect_FieldIndex.VirtualMachineAdapter:
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.MenuDisplayObject:
                case MagicEffect_FieldIndex.Data:
                case MagicEffect_FieldIndex.MagicItemDescription:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.VirtualMachineAdapter:
                case MagicEffect_FieldIndex.Data:
                case MagicEffect_FieldIndex.Sounds:
                case MagicEffect_FieldIndex.Conditions:
                    return true;
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.MenuDisplayObject:
                case MagicEffect_FieldIndex.Keywords:
                case MagicEffect_FieldIndex.CounterEffects:
                case MagicEffect_FieldIndex.MagicItemDescription:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.VirtualMachineAdapter:
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.MenuDisplayObject:
                case MagicEffect_FieldIndex.Keywords:
                case MagicEffect_FieldIndex.Data:
                case MagicEffect_FieldIndex.CounterEffects:
                case MagicEffect_FieldIndex.Sounds:
                case MagicEffect_FieldIndex.MagicItemDescription:
                case MagicEffect_FieldIndex.Conditions:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.VirtualMachineAdapter:
                    return "VirtualMachineAdapter";
                case MagicEffect_FieldIndex.Name:
                    return "Name";
                case MagicEffect_FieldIndex.MenuDisplayObject:
                    return "MenuDisplayObject";
                case MagicEffect_FieldIndex.Keywords:
                    return "Keywords";
                case MagicEffect_FieldIndex.Data:
                    return "Data";
                case MagicEffect_FieldIndex.CounterEffects:
                    return "CounterEffects";
                case MagicEffect_FieldIndex.Sounds:
                    return "Sounds";
                case MagicEffect_FieldIndex.MagicItemDescription:
                    return "MagicItemDescription";
                case MagicEffect_FieldIndex.Conditions:
                    return "Conditions";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.VirtualMachineAdapter:
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.MenuDisplayObject:
                case MagicEffect_FieldIndex.Keywords:
                case MagicEffect_FieldIndex.Data:
                case MagicEffect_FieldIndex.CounterEffects:
                case MagicEffect_FieldIndex.Sounds:
                case MagicEffect_FieldIndex.MagicItemDescription:
                case MagicEffect_FieldIndex.Conditions:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.VirtualMachineAdapter:
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.MenuDisplayObject:
                case MagicEffect_FieldIndex.Keywords:
                case MagicEffect_FieldIndex.Data:
                case MagicEffect_FieldIndex.CounterEffects:
                case MagicEffect_FieldIndex.Sounds:
                case MagicEffect_FieldIndex.MagicItemDescription:
                case MagicEffect_FieldIndex.Conditions:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.VirtualMachineAdapter:
                    return typeof(VirtualMachineAdapter);
                case MagicEffect_FieldIndex.Name:
                    return typeof(String);
                case MagicEffect_FieldIndex.MenuDisplayObject:
                    return typeof(IFormLinkNullable<Static>);
                case MagicEffect_FieldIndex.Keywords:
                    return typeof(ExtendedList<IFormLink<Keyword>>);
                case MagicEffect_FieldIndex.Data:
                    return typeof(MagicEffectData);
                case MagicEffect_FieldIndex.CounterEffects:
                    return typeof(ExtendedList<IFormLink<MagicEffect>>);
                case MagicEffect_FieldIndex.Sounds:
                    return typeof(ExtendedList<MagicEffectSound>);
                case MagicEffect_FieldIndex.MagicItemDescription:
                    return typeof(String);
                case MagicEffect_FieldIndex.Conditions:
                    return typeof(ExtendedList<Condition>);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(MagicEffectXmlWriteTranslation);
        public static readonly RecordType MGEF_HEADER = new RecordType("MGEF");
        public static readonly RecordType VMAD_HEADER = new RecordType("VMAD");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MDOB_HEADER = new RecordType("MDOB");
        public static readonly RecordType KWDA_HEADER = new RecordType("KWDA");
        public static readonly RecordType KSIZ_HEADER = new RecordType("KSIZ");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType ESCE_HEADER = new RecordType("ESCE");
        public static readonly RecordType SNDD_HEADER = new RecordType("SNDD");
        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType TriggeringRecordType = MGEF_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 9;
        public static readonly Type BinaryWriteTranslation = typeof(MagicEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class MagicEffectSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly MagicEffectSetterCommon Instance = new MagicEffectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMagicEffectInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Name = default;
            item.MenuDisplayObject.FormKey = null;
            item.Keywords = null;
            item.Data.Clear();
            item.CounterEffects = null;
            item.Sounds = null;
            item.MagicItemDescription = default;
            item.Conditions.Clear();
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IMagicEffectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IMagicEffectInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IMagicEffectInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IMagicEffectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    MagicEffectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (MagicEffect)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (MagicEffect)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => MagicEffect_Registration.MGEF_HEADER;
        protected static void FillBinaryStructs(
            IMagicEffectInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IMagicEffectInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x44414D56: // VMAD
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.VirtualMachineAdapter);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Name);
                }
                case 0x424F444D: // MDOB
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MenuDisplayObject.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.MenuDisplayObject);
                }
                case 0x5A49534B: // KSIZ
                {
                    var amount = BinaryPrimitives.ReadInt32LittleEndian(frame.ReadSubrecordFrame().Content);
                    item.Keywords = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Keyword>>.Instance.Parse(
                            frame: frame,
                            amount: amount,
                            triggeringRecord: MagicEffect_Registration.KWDA_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Keyword>>();
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Keywords);
                }
                case 0x41544144: // DATA
                {
                    item.Data = Mutagen.Bethesda.Skyrim.MagicEffectData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Data);
                }
                case 0x45435345: // ESCE
                {
                    item.CounterEffects = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<MagicEffect>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: MagicEffect_Registration.ESCE_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<MagicEffect>>();
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.CounterEffects);
                }
                case 0x44444E53: // SNDD
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Sounds = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<MagicEffectSound>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: (MutagenFrame r, out MagicEffectSound listSubItem) =>
                            {
                                return LoquiBinaryTranslation<MagicEffectSound>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!);
                            })
                        .ToExtendedList<MagicEffectSound>();
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Sounds);
                }
                case 0x4D414E44: // DNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MagicItemDescription = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.MagicItemDescription);
                }
                case 0x41445443: // CTDA
                {
                    MagicEffectBinaryCreateTranslation.FillBinaryConditionsCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Conditions);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            IMagicEffectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IMagicEffectInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (MagicEffect)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (MagicEffect)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class MagicEffectCommon : SkyrimMajorRecordCommon
    {
        public new static readonly MagicEffectCommon Instance = new MagicEffectCommon();

        public MagicEffect.Mask<bool> GetEqualsMask(
            IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MagicEffect.Mask<bool>(false);
            ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            MagicEffect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.MenuDisplayObject = object.Equals(item.MenuDisplayObject, rhs.MenuDisplayObject);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Data = MaskItemExt.Factory(item.Data.GetEqualsMask(rhs.Data, include), include);
            ret.CounterEffects = item.CounterEffects.CollectionEqualsHelper(
                rhs.CounterEffects,
                (l, r) => object.Equals(l, r),
                include);
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.MagicItemDescription = string.Equals(item.MagicItemDescription, rhs.MagicItemDescription);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IMagicEffectGetter item,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMagicEffectGetter item,
            FileGeneration fg,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MagicEffect =>");
            }
            else
            {
                fg.AppendLine($"{name} (MagicEffect) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMagicEffectGetter item,
            FileGeneration fg,
            MagicEffect.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.MenuDisplayObject ?? true)
                && item.MenuDisplayObject.TryGet(out var MenuDisplayObjectItem))
            {
                fg.AppendItem(MenuDisplayObjectItem, "MenuDisplayObject");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords.TryGet(out var KeywordsItem))
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Data?.Overall ?? true)
            {
                item.Data?.ToString(fg, "Data");
            }
            if ((printMask?.CounterEffects?.Overall ?? true)
                && item.CounterEffects.TryGet(out var CounterEffectsItem))
            {
                fg.AppendLine("CounterEffects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in CounterEffectsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Sounds?.Overall ?? true)
                && item.Sounds.TryGet(out var SoundsItem))
            {
                fg.AppendLine("Sounds =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in SoundsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.MagicItemDescription ?? true)
                && item.MagicItemDescription.TryGet(out var MagicItemDescriptionItem))
            {
                fg.AppendItem(MagicItemDescriptionItem, "MagicItemDescription");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IMagicEffectGetter item,
            MagicEffect.Mask<bool?> checkMask)
        {
            if (checkMask.VirtualMachineAdapter?.Overall.HasValue ?? false && checkMask.VirtualMachineAdapter.Overall.Value != (item.VirtualMachineAdapter != null)) return false;
            if (checkMask.VirtualMachineAdapter?.Specific != null && (item.VirtualMachineAdapter == null || !item.VirtualMachineAdapter.HasBeenSet(checkMask.VirtualMachineAdapter.Specific))) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.MenuDisplayObject.HasValue && checkMask.MenuDisplayObject.Value != (item.MenuDisplayObject.FormKey != null)) return false;
            if (checkMask.Keywords?.Overall.HasValue ?? false && checkMask.Keywords!.Overall.Value != (item.Keywords != null)) return false;
            if (checkMask.CounterEffects?.Overall.HasValue ?? false && checkMask.CounterEffects!.Overall.Value != (item.CounterEffects != null)) return false;
            if (checkMask.Sounds?.Overall.HasValue ?? false && checkMask.Sounds!.Overall.Value != (item.Sounds != null)) return false;
            if (checkMask.MagicItemDescription.HasValue && checkMask.MagicItemDescription.Value != (item.MagicItemDescription != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IMagicEffectGetter item,
            MagicEffect.Mask<bool> mask)
        {
            var itemVirtualMachineAdapter = item.VirtualMachineAdapter;
            mask.VirtualMachineAdapter = new MaskItem<bool, VirtualMachineAdapter.Mask<bool>?>(itemVirtualMachineAdapter != null, itemVirtualMachineAdapter?.GetHasBeenSetMask());
            mask.Name = (item.Name != null);
            mask.MenuDisplayObject = (item.MenuDisplayObject.FormKey != null);
            mask.Keywords = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Keywords != null), default);
            mask.Data = new MaskItem<bool, MagicEffectData.Mask<bool>?>(true, item.Data?.GetHasBeenSetMask());
            mask.CounterEffects = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.CounterEffects != null), default);
            if (item.Sounds.TryGet(out var SoundsItem))
            {
                mask.Sounds = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, MagicEffectSound.Mask<bool>?>>?>(true, SoundsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, MagicEffectSound.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            mask.MagicItemDescription = (item.MagicItemDescription != null);
            var ConditionsItem = item.Conditions;
            mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition.Mask<bool>?>>?>(true, ConditionsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static MagicEffect_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MagicEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (MagicEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (MagicEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (MagicEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (MagicEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (MagicEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new MagicEffect_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (MagicEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMagicEffectGetter? lhs,
            IMagicEffectGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.MenuDisplayObject.Equals(rhs.MenuDisplayObject)) return false;
            if (!lhs.Keywords.SequenceEqual(rhs.Keywords)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            if (!lhs.CounterEffects.SequenceEqual(rhs.CounterEffects)) return false;
            if (!lhs.Sounds.SequenceEqual(rhs.Sounds)) return false;
            if (!string.Equals(lhs.MagicItemDescription, rhs.MagicItemDescription)) return false;
            if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IMagicEffectGetter?)lhs,
                rhs: rhs as IMagicEffectGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IMagicEffectGetter?)lhs,
                rhs: rhs as IMagicEffectGetter);
        }
        
        public virtual int GetHashCode(IMagicEffectGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.MenuDisplayObject.TryGet(out var MenuDisplayObjectitem))
            {
                hash.Add(MenuDisplayObjectitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.Data);
            hash.Add(item.CounterEffects);
            hash.Add(item.Sounds);
            if (item.MagicItemDescription.TryGet(out var MagicItemDescriptionitem))
            {
                hash.Add(MagicItemDescriptionitem);
            }
            hash.Add(item.Conditions);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IMagicEffectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IMagicEffectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return MagicEffect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IMagicEffectGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is ILinkedFormKeyContainer VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.MenuDisplayObject.FormKey.TryGet(out var MenuDisplayObjectKey))
            {
                yield return MenuDisplayObjectKey;
            }
            if (obj.Keywords.TryGet(out var KeywordsItem))
            {
                foreach (var item in KeywordsItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.Data.TryGet(out var DataItems))
            {
                foreach (var item in DataItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.CounterEffects.TryGet(out var CounterEffectsItem))
            {
                foreach (var item in CounterEffectsItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.Sounds.TryGet(out var SoundsItem))
            {
                foreach (var item in SoundsItem.SelectMany(f => f.LinkFormKeys))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, ILinkedFormKeyContainer> ()
                .SelectMany((f) => f.LinkFormKeys))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IMagicEffectGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(MagicEffect obj, MagicEffect rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new MagicEffect(getNextFormKey());
            ret.DeepCopyIn((MagicEffect)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (MagicEffect)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class MagicEffectSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly MagicEffectSetterTranslationCommon Instance = new MagicEffectSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IMagicEffectInternal item,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IMagicEffect item,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)MagicEffect_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.MenuDisplayObject) ?? true))
            {
                item.MenuDisplayObject.FormKey = rhs.MenuDisplayObject.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => new FormLink<Keyword>(r.FormKey))
                            .ToExtendedList<IFormLink<Keyword>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Data);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Data) ?? true))
                    {
                        item.Data = rhs.Data.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Data),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CounterEffects) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.CounterEffects);
                try
                {
                    if ((rhs.CounterEffects != null))
                    {
                        item.CounterEffects = 
                            rhs.CounterEffects
                            .Select(r => new FormLink<MagicEffect>(r.FormKey))
                            .ToExtendedList<IFormLink<MagicEffect>>();
                    }
                    else
                    {
                        item.CounterEffects = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Sounds);
                try
                {
                    if ((rhs.Sounds != null))
                    {
                        item.Sounds = 
                            rhs.Sounds
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<MagicEffectSound>();
                    }
                    else
                    {
                        item.Sounds = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.MagicItemDescription) ?? true))
            {
                item.MagicItemDescription = rhs.MagicItemDescription;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IMagicEffectInternal)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IMagicEffect)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IMagicEffectInternal)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IMagicEffect)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            MagicEffect.TranslationMask? copyMask = null)
        {
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? copyMask = null)
        {
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class MagicEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffect_Registration.Instance;
        public new static MagicEffect_Registration Registration => MagicEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MagicEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MagicEffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MagicEffectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class MagicEffectXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static MagicEffectXmlWriteTranslation Instance = new MagicEffectXmlWriteTranslation();

        public static void WriteToNodeXml(
            IMagicEffectGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.VirtualMachineAdapter != null)
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
                {
                    ((VirtualMachineAdapterXmlWriteTranslation)((IXmlItem)VirtualMachineAdapterItem).XmlWriteTranslator).Write(
                        item: VirtualMachineAdapterItem,
                        node: node,
                        name: nameof(item.VirtualMachineAdapter),
                        fieldIndex: (int)MagicEffect_FieldIndex.VirtualMachineAdapter,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.VirtualMachineAdapter));
                }
            }
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)MagicEffect_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.MenuDisplayObject.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.MenuDisplayObject) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MenuDisplayObject),
                    item: item.MenuDisplayObject.FormKey.Value,
                    fieldIndex: (int)MagicEffect_FieldIndex.MenuDisplayObject,
                    errorMask: errorMask);
            }
            if ((item.Keywords != null)
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Keywords) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Keywords),
                    item: item.Keywords,
                    fieldIndex: (int)MagicEffect_FieldIndex.Keywords,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Keywords),
                    transl: (XElement subNode, IFormLinkGetter<IKeywordGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Data) ?? true))
            {
                var DataItem = item.Data;
                ((MagicEffectDataXmlWriteTranslation)((IXmlItem)DataItem).XmlWriteTranslator).Write(
                    item: DataItem,
                    node: node,
                    name: nameof(item.Data),
                    fieldIndex: (int)MagicEffect_FieldIndex.Data,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Data));
            }
            if ((item.CounterEffects != null)
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CounterEffects) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IMagicEffectGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.CounterEffects),
                    item: item.CounterEffects,
                    fieldIndex: (int)MagicEffect_FieldIndex.CounterEffects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.CounterEffects),
                    transl: (XElement subNode, IFormLinkGetter<IMagicEffectGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Sounds != null)
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Sounds) ?? true))
            {
                ListXmlTranslation<IMagicEffectSoundGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Sounds),
                    item: item.Sounds,
                    fieldIndex: (int)MagicEffect_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Sounds),
                    transl: (XElement subNode, IMagicEffectSoundGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((MagicEffectSoundXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.MagicItemDescription != null)
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.MagicItemDescription) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MagicItemDescription),
                    item: item.MagicItemDescription,
                    fieldIndex: (int)MagicEffect_FieldIndex.MagicItemDescription,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)MagicEffect_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((ConditionXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
        }

        public void Write(
            XElement node,
            IMagicEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.MagicEffect");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.MagicEffect");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class MagicEffectXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static MagicEffectXmlCreateTranslation Instance = new MagicEffectXmlCreateTranslation();

        public static void FillPublicXml(
            IMagicEffectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MagicEffectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IMagicEffectInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "VirtualMachineAdapter":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.VirtualMachineAdapter);
                    try
                    {
                        item.VirtualMachineAdapter = LoquiXmlTranslation<VirtualMachineAdapter>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.VirtualMachineAdapter));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MenuDisplayObject":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.MenuDisplayObject);
                    try
                    {
                        item.MenuDisplayObject.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keywords":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.Keywords);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Keyword>>.Instance.Parse(
                            node: node,
                            enumer: out var KeywordsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Keywords = KeywordsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Keywords = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Data":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.Data);
                    try
                    {
                        item.Data = LoquiXmlTranslation<MagicEffectData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Data));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CounterEffects":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.CounterEffects);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<MagicEffect>>.Instance.Parse(
                            node: node,
                            enumer: out var CounterEffectsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.CounterEffects = CounterEffectsItem.ToExtendedList();
                        }
                        else
                        {
                            item.CounterEffects = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.Sounds);
                    try
                    {
                        if (ListXmlTranslation<MagicEffectSound>.Instance.Parse(
                            node: node,
                            enumer: out var SoundsItem,
                            transl: LoquiXmlTranslation<MagicEffectSound>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Sounds = SoundsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Sounds = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagicItemDescription":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.MagicItemDescription);
                    try
                    {
                        item.MagicItemDescription = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.Conditions);
                    try
                    {
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class MagicEffectXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IMagicEffectGetter item,
            XElement node,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((MagicEffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IMagicEffectGetter item,
            string path,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMagicEffectGetter item,
            Stream stream,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class MagicEffectBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static MagicEffectBinaryWriteTranslation Instance = new MagicEffectBinaryWriteTranslation();

        static partial void WriteBinaryConditionsCustom(
            MutagenWriter writer,
            IMagicEffectGetter item);

        public static void WriteBinaryConditions(
            MutagenWriter writer,
            IMagicEffectGetter item)
        {
            WriteBinaryConditionsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IMagicEffectGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MenuDisplayObject,
                header: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.MDOB_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: MagicEffect_Registration.KSIZ_HEADER,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.KWDA_HEADER),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            var DataItem = item.Data;
            ((MagicEffectDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                item: DataItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IMagicEffectGetter>>.Instance.Write(
                writer: writer,
                items: item.CounterEffects,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IMagicEffectGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.ESCE_HEADER));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IMagicEffectSoundGetter>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                recordType: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.SNDD_HEADER),
                transl: (MutagenWriter subWriter, IMagicEffectSoundGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((MagicEffectSoundBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MagicItemDescription,
                header: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.DNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            MagicEffectBinaryWriteTranslation.WriteBinaryConditions(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IMagicEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.MGEF_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class MagicEffectBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static MagicEffectBinaryCreateTranslation Instance = new MagicEffectBinaryCreateTranslation();

        static partial void FillBinaryConditionsCustom(
            MutagenFrame frame,
            IMagicEffectInternal item);

        public static void FillBinaryConditionsCustomPublic(
            MutagenFrame frame,
            IMagicEffectInternal item)
        {
            FillBinaryConditionsCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class MagicEffectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class MagicEffectBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IMagicEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffect_Registration.Instance;
        public new static MagicEffect_Registration Registration => MagicEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MagicEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MagicEffectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMagicEffectGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => MagicEffectCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => MagicEffectCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MagicEffectCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MagicEffectCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => MagicEffectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((MagicEffectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MagicEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MagicEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new BinaryMemoryReadStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool VirtualMachineAdapter_IsSet => _VirtualMachineAdapterLocation.HasValue;
        #endregion
        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region MenuDisplayObject
        private int? _MenuDisplayObjectLocation;
        public bool MenuDisplayObject_IsSet => _MenuDisplayObjectLocation.HasValue;
        public IFormLinkNullableGetter<IStaticGetter> MenuDisplayObject => _MenuDisplayObjectLocation.HasValue ? new FormLinkNullable<IStaticGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _MenuDisplayObjectLocation.Value, _package.Meta)))) : FormLinkNullable<IStaticGetter>.Empty;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        #region Data
        private RangeInt32? _DataLocation;
        public IMagicEffectDataGetter? _Data => _DataLocation.HasValue ? MagicEffectDataBinaryOverlay.MagicEffectDataFactory(new BinaryMemoryReadStream(_data.Slice(_DataLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public IMagicEffectDataGetter Data => _Data ?? new MagicEffectData();
        #endregion
        public IReadOnlyList<IFormLinkGetter<IMagicEffectGetter>>? CounterEffects { get; private set; }
        public IReadOnlyList<IMagicEffectSoundGetter>? Sounds { get; private set; }
        #region MagicItemDescription
        private int? _MagicItemDescriptionLocation;
        public String? MagicItemDescription => _MagicItemDescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _MagicItemDescriptionLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Conditions
        partial void ConditionsCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected MagicEffectBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static MagicEffectBinaryOverlay MagicEffectFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new MagicEffectBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static MagicEffectBinaryOverlay MagicEffectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return MagicEffectFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x44414D56: // VMAD
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.VirtualMachineAdapter);
                }
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Name);
                }
                case 0x424F444D: // MDOB
                {
                    _MenuDisplayObjectLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.MenuDisplayObject);
                }
                case 0x5A49534B: // KSIZ
                {
                    var count = BinaryPrimitives.ReadUInt32LittleEndian(_package.Meta.ReadSubrecordFrame(stream).Content);
                    var subMeta = _package.Meta.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Keywords = BinaryOverlaySetList<IFormLinkGetter<IKeywordGetter>>.FactoryByCount(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 0x4,
                        count: count,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Keywords);
                }
                case 0x41544144: // DATA
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Data);
                }
                case 0x45435345: // ESCE
                {
                    this.CounterEffects = BinaryOverlaySetList<IFormLinkGetter<IMagicEffectGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IMagicEffectGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.CounterEffects);
                }
                case 0x44444E53: // SNDD
                {
                    var subMeta = _package.Meta.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Sounds = BinaryOverlaySetList<MagicEffectSoundBinaryOverlay>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 8,
                        getter: (s, p) => MagicEffectSoundBinaryOverlay.MagicEffectSoundFactory(s, p));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Sounds);
                }
                case 0x4D414E44: // DNAM
                {
                    _MagicItemDescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.MagicItemDescription);
                }
                case 0x41445443: // CTDA
                {
                    ConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Conditions);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MagicEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

