/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class NpcConfiguration :
        INpcConfiguration,
        ILoquiObjectSetter<NpcConfiguration>,
        IEquatable<NpcConfiguration>,
        IEqualsMask
    {
        #region Ctor
        public NpcConfiguration()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public NpcConfiguration.Flag Flags { get; set; } = default;
        #endregion
        #region MagickaOffset
        public Int16 MagickaOffset { get; set; } = default;
        #endregion
        #region StaminaOffset
        public Int16 StaminaOffset { get; set; } = default;
        #endregion
        #region CalcMinLevel
        public Int16 CalcMinLevel { get; set; } = default;
        #endregion
        #region CalcMaxLevel
        public Int16 CalcMaxLevel { get; set; } = default;
        #endregion
        #region SpeedMultiplier
        public Int16 SpeedMultiplier { get; set; } = default;
        #endregion
        #region DispositionBase
        public Int16 DispositionBase { get; set; } = default;
        #endregion
        #region TemplateFlags
        public NpcConfiguration.TemplateFlag TemplateFlags { get; set; } = default;
        #endregion
        #region HealthOffset
        public Int16 HealthOffset { get; set; } = default;
        #endregion
        #region BleedoutOverride
        public Int16 BleedoutOverride { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NpcConfigurationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INpcConfigurationGetter rhs)) return false;
            return ((NpcConfigurationCommon)((INpcConfigurationGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(NpcConfiguration obj)
        {
            return ((NpcConfigurationCommon)((INpcConfigurationGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NpcConfigurationCommon)((INpcConfigurationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => NpcConfigurationXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((NpcConfigurationXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static NpcConfiguration CreateFromXml(
            XElement node,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static NpcConfiguration CreateFromXml(
            XElement node,
            out NpcConfiguration.ErrorMask errorMask,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = NpcConfiguration.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static NpcConfiguration CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new NpcConfiguration();
            ((NpcConfigurationSetterCommon)((INpcConfigurationGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static NpcConfiguration CreateFromXml(
            string path,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static NpcConfiguration CreateFromXml(
            string path,
            out NpcConfiguration.ErrorMask errorMask,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static NpcConfiguration CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static NpcConfiguration CreateFromXml(
            Stream stream,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static NpcConfiguration CreateFromXml(
            Stream stream,
            out NpcConfiguration.ErrorMask errorMask,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static NpcConfiguration CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Flags = initialValue;
                this.MagickaOffset = initialValue;
                this.StaminaOffset = initialValue;
                this.Level = new MaskItem<TItem, ANpcLevel.Mask<TItem>?>(initialValue, new ANpcLevel.Mask<TItem>(initialValue));
                this.CalcMinLevel = initialValue;
                this.CalcMaxLevel = initialValue;
                this.SpeedMultiplier = initialValue;
                this.DispositionBase = initialValue;
                this.TemplateFlags = initialValue;
                this.HealthOffset = initialValue;
                this.BleedoutOverride = initialValue;
            }

            public Mask(
                TItem Flags,
                TItem MagickaOffset,
                TItem StaminaOffset,
                TItem Level,
                TItem CalcMinLevel,
                TItem CalcMaxLevel,
                TItem SpeedMultiplier,
                TItem DispositionBase,
                TItem TemplateFlags,
                TItem HealthOffset,
                TItem BleedoutOverride)
            {
                this.Flags = Flags;
                this.MagickaOffset = MagickaOffset;
                this.StaminaOffset = StaminaOffset;
                this.Level = new MaskItem<TItem, ANpcLevel.Mask<TItem>?>(Level, new ANpcLevel.Mask<TItem>(Level));
                this.CalcMinLevel = CalcMinLevel;
                this.CalcMaxLevel = CalcMaxLevel;
                this.SpeedMultiplier = SpeedMultiplier;
                this.DispositionBase = DispositionBase;
                this.TemplateFlags = TemplateFlags;
                this.HealthOffset = HealthOffset;
                this.BleedoutOverride = BleedoutOverride;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public TItem MagickaOffset;
            public TItem StaminaOffset;
            public MaskItem<TItem, ANpcLevel.Mask<TItem>?>? Level { get; set; }
            public TItem CalcMinLevel;
            public TItem CalcMaxLevel;
            public TItem SpeedMultiplier;
            public TItem DispositionBase;
            public TItem TemplateFlags;
            public TItem HealthOffset;
            public TItem BleedoutOverride;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.MagickaOffset, rhs.MagickaOffset)) return false;
                if (!object.Equals(this.StaminaOffset, rhs.StaminaOffset)) return false;
                if (!object.Equals(this.Level, rhs.Level)) return false;
                if (!object.Equals(this.CalcMinLevel, rhs.CalcMinLevel)) return false;
                if (!object.Equals(this.CalcMaxLevel, rhs.CalcMaxLevel)) return false;
                if (!object.Equals(this.SpeedMultiplier, rhs.SpeedMultiplier)) return false;
                if (!object.Equals(this.DispositionBase, rhs.DispositionBase)) return false;
                if (!object.Equals(this.TemplateFlags, rhs.TemplateFlags)) return false;
                if (!object.Equals(this.HealthOffset, rhs.HealthOffset)) return false;
                if (!object.Equals(this.BleedoutOverride, rhs.BleedoutOverride)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.MagickaOffset);
                hash.Add(this.StaminaOffset);
                hash.Add(this.Level);
                hash.Add(this.CalcMinLevel);
                hash.Add(this.CalcMaxLevel);
                hash.Add(this.SpeedMultiplier);
                hash.Add(this.DispositionBase);
                hash.Add(this.TemplateFlags);
                hash.Add(this.HealthOffset);
                hash.Add(this.BleedoutOverride);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Flags)) return false;
                if (!eval(this.MagickaOffset)) return false;
                if (!eval(this.StaminaOffset)) return false;
                if (Level != null)
                {
                    if (!eval(this.Level.Overall)) return false;
                    if (this.Level.Specific != null && !this.Level.Specific.All(eval)) return false;
                }
                if (!eval(this.CalcMinLevel)) return false;
                if (!eval(this.CalcMaxLevel)) return false;
                if (!eval(this.SpeedMultiplier)) return false;
                if (!eval(this.DispositionBase)) return false;
                if (!eval(this.TemplateFlags)) return false;
                if (!eval(this.HealthOffset)) return false;
                if (!eval(this.BleedoutOverride)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Flags)) return true;
                if (eval(this.MagickaOffset)) return true;
                if (eval(this.StaminaOffset)) return true;
                if (Level != null)
                {
                    if (eval(this.Level.Overall)) return true;
                    if (this.Level.Specific != null && this.Level.Specific.Any(eval)) return true;
                }
                if (eval(this.CalcMinLevel)) return true;
                if (eval(this.CalcMaxLevel)) return true;
                if (eval(this.SpeedMultiplier)) return true;
                if (eval(this.DispositionBase)) return true;
                if (eval(this.TemplateFlags)) return true;
                if (eval(this.HealthOffset)) return true;
                if (eval(this.BleedoutOverride)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NpcConfiguration.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Flags = eval(this.Flags);
                obj.MagickaOffset = eval(this.MagickaOffset);
                obj.StaminaOffset = eval(this.StaminaOffset);
                obj.Level = this.Level == null ? null : new MaskItem<R, ANpcLevel.Mask<R>?>(eval(this.Level.Overall), this.Level.Specific?.Translate(eval));
                obj.CalcMinLevel = eval(this.CalcMinLevel);
                obj.CalcMaxLevel = eval(this.CalcMaxLevel);
                obj.SpeedMultiplier = eval(this.SpeedMultiplier);
                obj.DispositionBase = eval(this.DispositionBase);
                obj.TemplateFlags = eval(this.TemplateFlags);
                obj.HealthOffset = eval(this.HealthOffset);
                obj.BleedoutOverride = eval(this.BleedoutOverride);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(NpcConfiguration.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, NpcConfiguration.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(NpcConfiguration.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.MagickaOffset ?? true)
                    {
                        fg.AppendItem(MagickaOffset, "MagickaOffset");
                    }
                    if (printMask?.StaminaOffset ?? true)
                    {
                        fg.AppendItem(StaminaOffset, "StaminaOffset");
                    }
                    if (printMask?.Level?.Overall ?? true)
                    {
                        Level?.ToString(fg);
                    }
                    if (printMask?.CalcMinLevel ?? true)
                    {
                        fg.AppendItem(CalcMinLevel, "CalcMinLevel");
                    }
                    if (printMask?.CalcMaxLevel ?? true)
                    {
                        fg.AppendItem(CalcMaxLevel, "CalcMaxLevel");
                    }
                    if (printMask?.SpeedMultiplier ?? true)
                    {
                        fg.AppendItem(SpeedMultiplier, "SpeedMultiplier");
                    }
                    if (printMask?.DispositionBase ?? true)
                    {
                        fg.AppendItem(DispositionBase, "DispositionBase");
                    }
                    if (printMask?.TemplateFlags ?? true)
                    {
                        fg.AppendItem(TemplateFlags, "TemplateFlags");
                    }
                    if (printMask?.HealthOffset ?? true)
                    {
                        fg.AppendItem(HealthOffset, "HealthOffset");
                    }
                    if (printMask?.BleedoutOverride ?? true)
                    {
                        fg.AppendItem(BleedoutOverride, "BleedoutOverride");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Flags;
            public Exception? MagickaOffset;
            public Exception? StaminaOffset;
            public MaskItem<Exception?, ANpcLevel.ErrorMask?>? Level;
            public Exception? CalcMinLevel;
            public Exception? CalcMaxLevel;
            public Exception? SpeedMultiplier;
            public Exception? DispositionBase;
            public Exception? TemplateFlags;
            public Exception? HealthOffset;
            public Exception? BleedoutOverride;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NpcConfiguration_FieldIndex enu = (NpcConfiguration_FieldIndex)index;
                switch (enu)
                {
                    case NpcConfiguration_FieldIndex.Flags:
                        return Flags;
                    case NpcConfiguration_FieldIndex.MagickaOffset:
                        return MagickaOffset;
                    case NpcConfiguration_FieldIndex.StaminaOffset:
                        return StaminaOffset;
                    case NpcConfiguration_FieldIndex.Level:
                        return Level;
                    case NpcConfiguration_FieldIndex.CalcMinLevel:
                        return CalcMinLevel;
                    case NpcConfiguration_FieldIndex.CalcMaxLevel:
                        return CalcMaxLevel;
                    case NpcConfiguration_FieldIndex.SpeedMultiplier:
                        return SpeedMultiplier;
                    case NpcConfiguration_FieldIndex.DispositionBase:
                        return DispositionBase;
                    case NpcConfiguration_FieldIndex.TemplateFlags:
                        return TemplateFlags;
                    case NpcConfiguration_FieldIndex.HealthOffset:
                        return HealthOffset;
                    case NpcConfiguration_FieldIndex.BleedoutOverride:
                        return BleedoutOverride;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NpcConfiguration_FieldIndex enu = (NpcConfiguration_FieldIndex)index;
                switch (enu)
                {
                    case NpcConfiguration_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case NpcConfiguration_FieldIndex.MagickaOffset:
                        this.MagickaOffset = ex;
                        break;
                    case NpcConfiguration_FieldIndex.StaminaOffset:
                        this.StaminaOffset = ex;
                        break;
                    case NpcConfiguration_FieldIndex.Level:
                        this.Level = new MaskItem<Exception?, ANpcLevel.ErrorMask?>(ex, null);
                        break;
                    case NpcConfiguration_FieldIndex.CalcMinLevel:
                        this.CalcMinLevel = ex;
                        break;
                    case NpcConfiguration_FieldIndex.CalcMaxLevel:
                        this.CalcMaxLevel = ex;
                        break;
                    case NpcConfiguration_FieldIndex.SpeedMultiplier:
                        this.SpeedMultiplier = ex;
                        break;
                    case NpcConfiguration_FieldIndex.DispositionBase:
                        this.DispositionBase = ex;
                        break;
                    case NpcConfiguration_FieldIndex.TemplateFlags:
                        this.TemplateFlags = ex;
                        break;
                    case NpcConfiguration_FieldIndex.HealthOffset:
                        this.HealthOffset = ex;
                        break;
                    case NpcConfiguration_FieldIndex.BleedoutOverride:
                        this.BleedoutOverride = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NpcConfiguration_FieldIndex enu = (NpcConfiguration_FieldIndex)index;
                switch (enu)
                {
                    case NpcConfiguration_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case NpcConfiguration_FieldIndex.MagickaOffset:
                        this.MagickaOffset = (Exception?)obj;
                        break;
                    case NpcConfiguration_FieldIndex.StaminaOffset:
                        this.StaminaOffset = (Exception?)obj;
                        break;
                    case NpcConfiguration_FieldIndex.Level:
                        this.Level = (MaskItem<Exception?, ANpcLevel.ErrorMask?>?)obj;
                        break;
                    case NpcConfiguration_FieldIndex.CalcMinLevel:
                        this.CalcMinLevel = (Exception?)obj;
                        break;
                    case NpcConfiguration_FieldIndex.CalcMaxLevel:
                        this.CalcMaxLevel = (Exception?)obj;
                        break;
                    case NpcConfiguration_FieldIndex.SpeedMultiplier:
                        this.SpeedMultiplier = (Exception?)obj;
                        break;
                    case NpcConfiguration_FieldIndex.DispositionBase:
                        this.DispositionBase = (Exception?)obj;
                        break;
                    case NpcConfiguration_FieldIndex.TemplateFlags:
                        this.TemplateFlags = (Exception?)obj;
                        break;
                    case NpcConfiguration_FieldIndex.HealthOffset:
                        this.HealthOffset = (Exception?)obj;
                        break;
                    case NpcConfiguration_FieldIndex.BleedoutOverride:
                        this.BleedoutOverride = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (MagickaOffset != null) return true;
                if (StaminaOffset != null) return true;
                if (Level != null) return true;
                if (CalcMinLevel != null) return true;
                if (CalcMaxLevel != null) return true;
                if (SpeedMultiplier != null) return true;
                if (DispositionBase != null) return true;
                if (TemplateFlags != null) return true;
                if (HealthOffset != null) return true;
                if (BleedoutOverride != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(MagickaOffset, "MagickaOffset");
                fg.AppendItem(StaminaOffset, "StaminaOffset");
                Level?.ToString(fg);
                fg.AppendItem(CalcMinLevel, "CalcMinLevel");
                fg.AppendItem(CalcMaxLevel, "CalcMaxLevel");
                fg.AppendItem(SpeedMultiplier, "SpeedMultiplier");
                fg.AppendItem(DispositionBase, "DispositionBase");
                fg.AppendItem(TemplateFlags, "TemplateFlags");
                fg.AppendItem(HealthOffset, "HealthOffset");
                fg.AppendItem(BleedoutOverride, "BleedoutOverride");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.MagickaOffset = this.MagickaOffset.Combine(rhs.MagickaOffset);
                ret.StaminaOffset = this.StaminaOffset.Combine(rhs.StaminaOffset);
                ret.Level = this.Level.Combine(rhs.Level, (l, r) => l.Combine(r));
                ret.CalcMinLevel = this.CalcMinLevel.Combine(rhs.CalcMinLevel);
                ret.CalcMaxLevel = this.CalcMaxLevel.Combine(rhs.CalcMaxLevel);
                ret.SpeedMultiplier = this.SpeedMultiplier.Combine(rhs.SpeedMultiplier);
                ret.DispositionBase = this.DispositionBase.Combine(rhs.DispositionBase);
                ret.TemplateFlags = this.TemplateFlags.Combine(rhs.TemplateFlags);
                ret.HealthOffset = this.HealthOffset.Combine(rhs.HealthOffset);
                ret.BleedoutOverride = this.BleedoutOverride.Combine(rhs.BleedoutOverride);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Flags;
            public bool MagickaOffset;
            public bool StaminaOffset;
            public MaskItem<bool, ANpcLevel.TranslationMask?> Level;
            public bool CalcMinLevel;
            public bool CalcMaxLevel;
            public bool SpeedMultiplier;
            public bool DispositionBase;
            public bool TemplateFlags;
            public bool HealthOffset;
            public bool BleedoutOverride;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Flags = defaultOn;
                this.MagickaOffset = defaultOn;
                this.StaminaOffset = defaultOn;
                this.Level = new MaskItem<bool, ANpcLevel.TranslationMask?>(defaultOn, null);
                this.CalcMinLevel = defaultOn;
                this.CalcMaxLevel = defaultOn;
                this.SpeedMultiplier = defaultOn;
                this.DispositionBase = defaultOn;
                this.TemplateFlags = defaultOn;
                this.HealthOffset = defaultOn;
                this.BleedoutOverride = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Flags, null));
                ret.Add((MagickaOffset, null));
                ret.Add((StaminaOffset, null));
                ret.Add((Level?.Overall ?? true, Level?.Specific?.GetCrystal()));
                ret.Add((CalcMinLevel, null));
                ret.Add((CalcMaxLevel, null));
                ret.Add((SpeedMultiplier, null));
                ret.Add((DispositionBase, null));
                ret.Add((TemplateFlags, null));
                ret.Add((HealthOffset, null));
                ret.Add((BleedoutOverride, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = NpcConfiguration_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcConfigurationBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcConfigurationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static NpcConfiguration CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static NpcConfiguration CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new NpcConfiguration();
            ((NpcConfigurationSetterCommon)((INpcConfigurationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((INpcConfigurationGetter)rhs, include);

        void IClearable.Clear()
        {
            ((NpcConfigurationSetterCommon)((INpcConfigurationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NpcConfiguration GetNew()
        {
            return new NpcConfiguration();
        }

    }
    #endregion

    #region Interface
    public partial interface INpcConfiguration :
        INpcConfigurationGetter,
        ILoquiObjectSetter<INpcConfiguration>
    {
        new NpcConfiguration.Flag Flags { get; set; }
        new Int16 MagickaOffset { get; set; }
        new Int16 StaminaOffset { get; set; }
        new ANpcLevel Level { get; set; }
        new Int16 CalcMinLevel { get; set; }
        new Int16 CalcMaxLevel { get; set; }
        new Int16 SpeedMultiplier { get; set; }
        new Int16 DispositionBase { get; set; }
        new NpcConfiguration.TemplateFlag TemplateFlags { get; set; }
        new Int16 HealthOffset { get; set; }
        new Int16 BleedoutOverride { get; set; }
    }

    public partial interface INpcConfigurationGetter :
        ILoquiObject,
        ILoquiObject<INpcConfigurationGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => NpcConfiguration_Registration.Instance;
        NpcConfiguration.Flag Flags { get; }
        Int16 MagickaOffset { get; }
        Int16 StaminaOffset { get; }
        IANpcLevelGetter Level { get; }
        Int16 CalcMinLevel { get; }
        Int16 CalcMaxLevel { get; }
        Int16 SpeedMultiplier { get; }
        Int16 DispositionBase { get; }
        NpcConfiguration.TemplateFlag TemplateFlags { get; }
        Int16 HealthOffset { get; }
        Int16 BleedoutOverride { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcConfigurationMixIn
    {
        public static void Clear(this INpcConfiguration item)
        {
            ((NpcConfigurationSetterCommon)((INpcConfigurationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NpcConfiguration.Mask<bool> GetEqualsMask(
            this INpcConfigurationGetter item,
            INpcConfigurationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcConfigurationCommon)((INpcConfigurationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INpcConfigurationGetter item,
            string? name = null,
            NpcConfiguration.Mask<bool>? printMask = null)
        {
            return ((NpcConfigurationCommon)((INpcConfigurationGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INpcConfigurationGetter item,
            FileGeneration fg,
            string? name = null,
            NpcConfiguration.Mask<bool>? printMask = null)
        {
            ((NpcConfigurationCommon)((INpcConfigurationGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this INpcConfigurationGetter item,
            NpcConfiguration.Mask<bool?> checkMask)
        {
            return ((NpcConfigurationCommon)((INpcConfigurationGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static NpcConfiguration.Mask<bool> GetHasBeenSetMask(this INpcConfigurationGetter item)
        {
            var ret = new NpcConfiguration.Mask<bool>(false);
            ((NpcConfigurationCommon)((INpcConfigurationGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this INpcConfigurationGetter item,
            INpcConfigurationGetter rhs)
        {
            return ((NpcConfigurationCommon)((INpcConfigurationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this INpcConfiguration lhs,
            INpcConfigurationGetter rhs)
        {
            ((NpcConfigurationSetterTranslationCommon)((INpcConfigurationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this INpcConfiguration lhs,
            INpcConfigurationGetter rhs,
            NpcConfiguration.TranslationMask? copyMask = null)
        {
            ((NpcConfigurationSetterTranslationCommon)((INpcConfigurationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INpcConfiguration lhs,
            INpcConfigurationGetter rhs,
            out NpcConfiguration.ErrorMask errorMask,
            NpcConfiguration.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcConfigurationSetterTranslationCommon)((INpcConfigurationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = NpcConfiguration.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcConfiguration lhs,
            INpcConfigurationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcConfigurationSetterTranslationCommon)((INpcConfigurationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static NpcConfiguration DeepCopy(
            this INpcConfigurationGetter item,
            NpcConfiguration.TranslationMask? copyMask = null)
        {
            return ((NpcConfigurationSetterTranslationCommon)((INpcConfigurationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NpcConfiguration DeepCopy(
            this INpcConfigurationGetter item,
            out NpcConfiguration.ErrorMask errorMask,
            NpcConfiguration.TranslationMask? copyMask = null)
        {
            return ((NpcConfigurationSetterTranslationCommon)((INpcConfigurationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NpcConfiguration DeepCopy(
            this INpcConfigurationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcConfigurationSetterTranslationCommon)((INpcConfigurationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this INpcConfiguration item,
            XElement node,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this INpcConfiguration item,
            XElement node,
            out NpcConfiguration.ErrorMask errorMask,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = NpcConfiguration.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this INpcConfiguration item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((NpcConfigurationSetterCommon)((INpcConfigurationGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INpcConfiguration item,
            string path,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INpcConfiguration item,
            string path,
            out NpcConfiguration.ErrorMask errorMask,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INpcConfiguration item,
            string path,
            ErrorMaskBuilder? errorMask,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this INpcConfiguration item,
            Stream stream,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INpcConfiguration item,
            Stream stream,
            out NpcConfiguration.ErrorMask errorMask,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INpcConfiguration item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this INpcConfiguration item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this INpcConfiguration item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcConfigurationSetterCommon)((INpcConfigurationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum NpcConfiguration_FieldIndex
    {
        Flags = 0,
        MagickaOffset = 1,
        StaminaOffset = 2,
        Level = 3,
        CalcMinLevel = 4,
        CalcMaxLevel = 5,
        SpeedMultiplier = 6,
        DispositionBase = 7,
        TemplateFlags = 8,
        HealthOffset = 9,
        BleedoutOverride = 10,
    }
    #endregion

    #region Registration
    public partial class NpcConfiguration_Registration : ILoquiRegistration
    {
        public static readonly NpcConfiguration_Registration Instance = new NpcConfiguration_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 201,
            version: 0);

        public const string GUID = "32c58c3d-5a6e-4382-8bf1-7e6633863702";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(NpcConfiguration.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NpcConfiguration.ErrorMask);

        public static readonly Type ClassType = typeof(NpcConfiguration);

        public static readonly Type GetterType = typeof(INpcConfigurationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpcConfiguration);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.NpcConfiguration";

        public const string Name = "NpcConfiguration";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)NpcConfiguration_FieldIndex.Flags;
                case "MAGICKAOFFSET":
                    return (ushort)NpcConfiguration_FieldIndex.MagickaOffset;
                case "STAMINAOFFSET":
                    return (ushort)NpcConfiguration_FieldIndex.StaminaOffset;
                case "LEVEL":
                    return (ushort)NpcConfiguration_FieldIndex.Level;
                case "CALCMINLEVEL":
                    return (ushort)NpcConfiguration_FieldIndex.CalcMinLevel;
                case "CALCMAXLEVEL":
                    return (ushort)NpcConfiguration_FieldIndex.CalcMaxLevel;
                case "SPEEDMULTIPLIER":
                    return (ushort)NpcConfiguration_FieldIndex.SpeedMultiplier;
                case "DISPOSITIONBASE":
                    return (ushort)NpcConfiguration_FieldIndex.DispositionBase;
                case "TEMPLATEFLAGS":
                    return (ushort)NpcConfiguration_FieldIndex.TemplateFlags;
                case "HEALTHOFFSET":
                    return (ushort)NpcConfiguration_FieldIndex.HealthOffset;
                case "BLEEDOUTOVERRIDE":
                    return (ushort)NpcConfiguration_FieldIndex.BleedoutOverride;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            NpcConfiguration_FieldIndex enu = (NpcConfiguration_FieldIndex)index;
            switch (enu)
            {
                case NpcConfiguration_FieldIndex.Flags:
                case NpcConfiguration_FieldIndex.MagickaOffset:
                case NpcConfiguration_FieldIndex.StaminaOffset:
                case NpcConfiguration_FieldIndex.Level:
                case NpcConfiguration_FieldIndex.CalcMinLevel:
                case NpcConfiguration_FieldIndex.CalcMaxLevel:
                case NpcConfiguration_FieldIndex.SpeedMultiplier:
                case NpcConfiguration_FieldIndex.DispositionBase:
                case NpcConfiguration_FieldIndex.TemplateFlags:
                case NpcConfiguration_FieldIndex.HealthOffset:
                case NpcConfiguration_FieldIndex.BleedoutOverride:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            NpcConfiguration_FieldIndex enu = (NpcConfiguration_FieldIndex)index;
            switch (enu)
            {
                case NpcConfiguration_FieldIndex.Level:
                    return true;
                case NpcConfiguration_FieldIndex.Flags:
                case NpcConfiguration_FieldIndex.MagickaOffset:
                case NpcConfiguration_FieldIndex.StaminaOffset:
                case NpcConfiguration_FieldIndex.CalcMinLevel:
                case NpcConfiguration_FieldIndex.CalcMaxLevel:
                case NpcConfiguration_FieldIndex.SpeedMultiplier:
                case NpcConfiguration_FieldIndex.DispositionBase:
                case NpcConfiguration_FieldIndex.TemplateFlags:
                case NpcConfiguration_FieldIndex.HealthOffset:
                case NpcConfiguration_FieldIndex.BleedoutOverride:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            NpcConfiguration_FieldIndex enu = (NpcConfiguration_FieldIndex)index;
            switch (enu)
            {
                case NpcConfiguration_FieldIndex.Flags:
                case NpcConfiguration_FieldIndex.MagickaOffset:
                case NpcConfiguration_FieldIndex.StaminaOffset:
                case NpcConfiguration_FieldIndex.Level:
                case NpcConfiguration_FieldIndex.CalcMinLevel:
                case NpcConfiguration_FieldIndex.CalcMaxLevel:
                case NpcConfiguration_FieldIndex.SpeedMultiplier:
                case NpcConfiguration_FieldIndex.DispositionBase:
                case NpcConfiguration_FieldIndex.TemplateFlags:
                case NpcConfiguration_FieldIndex.HealthOffset:
                case NpcConfiguration_FieldIndex.BleedoutOverride:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            NpcConfiguration_FieldIndex enu = (NpcConfiguration_FieldIndex)index;
            switch (enu)
            {
                case NpcConfiguration_FieldIndex.Flags:
                    return "Flags";
                case NpcConfiguration_FieldIndex.MagickaOffset:
                    return "MagickaOffset";
                case NpcConfiguration_FieldIndex.StaminaOffset:
                    return "StaminaOffset";
                case NpcConfiguration_FieldIndex.Level:
                    return "Level";
                case NpcConfiguration_FieldIndex.CalcMinLevel:
                    return "CalcMinLevel";
                case NpcConfiguration_FieldIndex.CalcMaxLevel:
                    return "CalcMaxLevel";
                case NpcConfiguration_FieldIndex.SpeedMultiplier:
                    return "SpeedMultiplier";
                case NpcConfiguration_FieldIndex.DispositionBase:
                    return "DispositionBase";
                case NpcConfiguration_FieldIndex.TemplateFlags:
                    return "TemplateFlags";
                case NpcConfiguration_FieldIndex.HealthOffset:
                    return "HealthOffset";
                case NpcConfiguration_FieldIndex.BleedoutOverride:
                    return "BleedoutOverride";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            NpcConfiguration_FieldIndex enu = (NpcConfiguration_FieldIndex)index;
            switch (enu)
            {
                case NpcConfiguration_FieldIndex.Flags:
                case NpcConfiguration_FieldIndex.MagickaOffset:
                case NpcConfiguration_FieldIndex.StaminaOffset:
                case NpcConfiguration_FieldIndex.Level:
                case NpcConfiguration_FieldIndex.CalcMinLevel:
                case NpcConfiguration_FieldIndex.CalcMaxLevel:
                case NpcConfiguration_FieldIndex.SpeedMultiplier:
                case NpcConfiguration_FieldIndex.DispositionBase:
                case NpcConfiguration_FieldIndex.TemplateFlags:
                case NpcConfiguration_FieldIndex.HealthOffset:
                case NpcConfiguration_FieldIndex.BleedoutOverride:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            NpcConfiguration_FieldIndex enu = (NpcConfiguration_FieldIndex)index;
            switch (enu)
            {
                case NpcConfiguration_FieldIndex.Flags:
                case NpcConfiguration_FieldIndex.MagickaOffset:
                case NpcConfiguration_FieldIndex.StaminaOffset:
                case NpcConfiguration_FieldIndex.Level:
                case NpcConfiguration_FieldIndex.CalcMinLevel:
                case NpcConfiguration_FieldIndex.CalcMaxLevel:
                case NpcConfiguration_FieldIndex.SpeedMultiplier:
                case NpcConfiguration_FieldIndex.DispositionBase:
                case NpcConfiguration_FieldIndex.TemplateFlags:
                case NpcConfiguration_FieldIndex.HealthOffset:
                case NpcConfiguration_FieldIndex.BleedoutOverride:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            NpcConfiguration_FieldIndex enu = (NpcConfiguration_FieldIndex)index;
            switch (enu)
            {
                case NpcConfiguration_FieldIndex.Flags:
                    return typeof(NpcConfiguration.Flag);
                case NpcConfiguration_FieldIndex.MagickaOffset:
                    return typeof(Int16);
                case NpcConfiguration_FieldIndex.StaminaOffset:
                    return typeof(Int16);
                case NpcConfiguration_FieldIndex.Level:
                    return typeof(ANpcLevel);
                case NpcConfiguration_FieldIndex.CalcMinLevel:
                    return typeof(Int16);
                case NpcConfiguration_FieldIndex.CalcMaxLevel:
                    return typeof(Int16);
                case NpcConfiguration_FieldIndex.SpeedMultiplier:
                    return typeof(Int16);
                case NpcConfiguration_FieldIndex.DispositionBase:
                    return typeof(Int16);
                case NpcConfiguration_FieldIndex.TemplateFlags:
                    return typeof(NpcConfiguration.TemplateFlag);
                case NpcConfiguration_FieldIndex.HealthOffset:
                    return typeof(Int16);
                case NpcConfiguration_FieldIndex.BleedoutOverride:
                    return typeof(Int16);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(NpcConfigurationXmlWriteTranslation);
        public static readonly RecordType ACBS_HEADER = new RecordType("ACBS");
        public static readonly RecordType TriggeringRecordType = ACBS_HEADER;
        public const int NumStructFields = 11;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(NpcConfigurationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class NpcConfigurationSetterCommon
    {
        public static readonly NpcConfigurationSetterCommon Instance = new NpcConfigurationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcConfiguration item)
        {
            ClearPartial();
            item.Flags = default;
            item.MagickaOffset = default;
            item.StaminaOffset = default;
            item.Level.Clear();
            item.CalcMinLevel = default;
            item.CalcMaxLevel = default;
            item.SpeedMultiplier = default;
            item.DispositionBase = default;
            item.TemplateFlags = default;
            item.HealthOffset = default;
            item.BleedoutOverride = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            INpcConfiguration item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    NpcConfigurationXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            INpcConfiguration item,
            MutagenFrame frame)
        {
            NpcConfigurationBinaryCreateTranslation.FillBinaryFlagsCustomPublic(
                frame: frame,
                item: item);
            item.MagickaOffset = frame.ReadInt16();
            item.StaminaOffset = frame.ReadInt16();
            NpcConfigurationBinaryCreateTranslation.FillBinaryLevelCustomPublic(
                frame: frame,
                item: item);
            item.CalcMinLevel = frame.ReadInt16();
            item.CalcMaxLevel = frame.ReadInt16();
            item.SpeedMultiplier = frame.ReadInt16();
            item.DispositionBase = frame.ReadInt16();
            item.TemplateFlags = EnumBinaryTranslation<NpcConfiguration.TemplateFlag>.Instance.Parse(frame: frame.SpawnWithLength(2));
            item.HealthOffset = frame.ReadInt16();
            item.BleedoutOverride = frame.ReadInt16();
        }
        
        public virtual void CopyInFromBinary(
            INpcConfiguration item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(NpcConfiguration_Registration.ACBS_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class NpcConfigurationCommon
    {
        public static readonly NpcConfigurationCommon Instance = new NpcConfigurationCommon();

        public NpcConfiguration.Mask<bool> GetEqualsMask(
            INpcConfigurationGetter item,
            INpcConfigurationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NpcConfiguration.Mask<bool>(false);
            ((NpcConfigurationCommon)((INpcConfigurationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcConfigurationGetter item,
            INpcConfigurationGetter rhs,
            NpcConfiguration.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags == rhs.Flags;
            ret.MagickaOffset = item.MagickaOffset == rhs.MagickaOffset;
            ret.StaminaOffset = item.StaminaOffset == rhs.StaminaOffset;
            ret.Level = MaskItemExt.Factory(item.Level.GetEqualsMask(rhs.Level, include), include);
            ret.CalcMinLevel = item.CalcMinLevel == rhs.CalcMinLevel;
            ret.CalcMaxLevel = item.CalcMaxLevel == rhs.CalcMaxLevel;
            ret.SpeedMultiplier = item.SpeedMultiplier == rhs.SpeedMultiplier;
            ret.DispositionBase = item.DispositionBase == rhs.DispositionBase;
            ret.TemplateFlags = item.TemplateFlags == rhs.TemplateFlags;
            ret.HealthOffset = item.HealthOffset == rhs.HealthOffset;
            ret.BleedoutOverride = item.BleedoutOverride == rhs.BleedoutOverride;
        }
        
        public string ToString(
            INpcConfigurationGetter item,
            string? name = null,
            NpcConfiguration.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INpcConfigurationGetter item,
            FileGeneration fg,
            string? name = null,
            NpcConfiguration.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"NpcConfiguration =>");
            }
            else
            {
                fg.AppendLine($"{name} (NpcConfiguration) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INpcConfigurationGetter item,
            FileGeneration fg,
            NpcConfiguration.Mask<bool>? printMask = null)
        {
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.MagickaOffset ?? true)
            {
                fg.AppendItem(item.MagickaOffset, "MagickaOffset");
            }
            if (printMask?.StaminaOffset ?? true)
            {
                fg.AppendItem(item.StaminaOffset, "StaminaOffset");
            }
            if (printMask?.Level?.Overall ?? true)
            {
                item.Level?.ToString(fg, "Level");
            }
            if (printMask?.CalcMinLevel ?? true)
            {
                fg.AppendItem(item.CalcMinLevel, "CalcMinLevel");
            }
            if (printMask?.CalcMaxLevel ?? true)
            {
                fg.AppendItem(item.CalcMaxLevel, "CalcMaxLevel");
            }
            if (printMask?.SpeedMultiplier ?? true)
            {
                fg.AppendItem(item.SpeedMultiplier, "SpeedMultiplier");
            }
            if (printMask?.DispositionBase ?? true)
            {
                fg.AppendItem(item.DispositionBase, "DispositionBase");
            }
            if (printMask?.TemplateFlags ?? true)
            {
                fg.AppendItem(item.TemplateFlags, "TemplateFlags");
            }
            if (printMask?.HealthOffset ?? true)
            {
                fg.AppendItem(item.HealthOffset, "HealthOffset");
            }
            if (printMask?.BleedoutOverride ?? true)
            {
                fg.AppendItem(item.BleedoutOverride, "BleedoutOverride");
            }
        }
        
        public bool HasBeenSet(
            INpcConfigurationGetter item,
            NpcConfiguration.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            INpcConfigurationGetter item,
            NpcConfiguration.Mask<bool> mask)
        {
            mask.Flags = true;
            mask.MagickaOffset = true;
            mask.StaminaOffset = true;
            mask.Level = new MaskItem<bool, ANpcLevel.Mask<bool>?>(true, item.Level?.GetHasBeenSetMask());
            mask.CalcMinLevel = true;
            mask.CalcMaxLevel = true;
            mask.SpeedMultiplier = true;
            mask.DispositionBase = true;
            mask.TemplateFlags = true;
            mask.HealthOffset = true;
            mask.BleedoutOverride = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcConfigurationGetter? lhs,
            INpcConfigurationGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.MagickaOffset != rhs.MagickaOffset) return false;
            if (lhs.StaminaOffset != rhs.StaminaOffset) return false;
            if (!object.Equals(lhs.Level, rhs.Level)) return false;
            if (lhs.CalcMinLevel != rhs.CalcMinLevel) return false;
            if (lhs.CalcMaxLevel != rhs.CalcMaxLevel) return false;
            if (lhs.SpeedMultiplier != rhs.SpeedMultiplier) return false;
            if (lhs.DispositionBase != rhs.DispositionBase) return false;
            if (lhs.TemplateFlags != rhs.TemplateFlags) return false;
            if (lhs.HealthOffset != rhs.HealthOffset) return false;
            if (lhs.BleedoutOverride != rhs.BleedoutOverride) return false;
            return true;
        }
        
        public virtual int GetHashCode(INpcConfigurationGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Flags);
            hash.Add(item.MagickaOffset);
            hash.Add(item.StaminaOffset);
            hash.Add(item.Level);
            hash.Add(item.CalcMinLevel);
            hash.Add(item.CalcMaxLevel);
            hash.Add(item.SpeedMultiplier);
            hash.Add(item.DispositionBase);
            hash.Add(item.TemplateFlags);
            hash.Add(item.HealthOffset);
            hash.Add(item.BleedoutOverride);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NpcConfiguration.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(INpcConfigurationGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class NpcConfigurationSetterTranslationCommon
    {
        public static readonly NpcConfigurationSetterTranslationCommon Instance = new NpcConfigurationSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            INpcConfiguration item,
            INpcConfigurationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.MagickaOffset) ?? true))
            {
                item.MagickaOffset = rhs.MagickaOffset;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.StaminaOffset) ?? true))
            {
                item.StaminaOffset = rhs.StaminaOffset;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.Level) ?? true))
            {
                errorMask?.PushIndex((int)NpcConfiguration_FieldIndex.Level);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.Level) ?? true))
                    {
                        item.Level = rhs.Level.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)NpcConfiguration_FieldIndex.Level),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.CalcMinLevel) ?? true))
            {
                item.CalcMinLevel = rhs.CalcMinLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.CalcMaxLevel) ?? true))
            {
                item.CalcMaxLevel = rhs.CalcMaxLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.SpeedMultiplier) ?? true))
            {
                item.SpeedMultiplier = rhs.SpeedMultiplier;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.DispositionBase) ?? true))
            {
                item.DispositionBase = rhs.DispositionBase;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.TemplateFlags) ?? true))
            {
                item.TemplateFlags = rhs.TemplateFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.HealthOffset) ?? true))
            {
                item.HealthOffset = rhs.HealthOffset;
            }
            if ((copyMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.BleedoutOverride) ?? true))
            {
                item.BleedoutOverride = rhs.BleedoutOverride;
            }
        }
        
        #endregion
        
        public NpcConfiguration DeepCopy(
            INpcConfigurationGetter item,
            NpcConfiguration.TranslationMask? copyMask = null)
        {
            NpcConfiguration ret = (NpcConfiguration)((NpcConfigurationCommon)((INpcConfigurationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public NpcConfiguration DeepCopy(
            INpcConfigurationGetter item,
            out NpcConfiguration.ErrorMask errorMask,
            NpcConfiguration.TranslationMask? copyMask = null)
        {
            NpcConfiguration ret = (NpcConfiguration)((NpcConfigurationCommon)((INpcConfigurationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public NpcConfiguration DeepCopy(
            INpcConfigurationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NpcConfiguration ret = (NpcConfiguration)((NpcConfigurationCommon)((INpcConfigurationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class NpcConfiguration
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcConfiguration_Registration.Instance;
        public static NpcConfiguration_Registration Registration => NpcConfiguration_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcConfigurationCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NpcConfigurationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcConfigurationSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcConfigurationGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INpcConfigurationGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INpcConfigurationGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class NpcConfigurationXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static NpcConfigurationXmlWriteTranslation Instance = new NpcConfigurationXmlWriteTranslation();

        public static void WriteToNodeXml(
            INpcConfigurationGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<NpcConfiguration.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)NpcConfiguration_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.MagickaOffset) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MagickaOffset),
                    item: item.MagickaOffset,
                    fieldIndex: (int)NpcConfiguration_FieldIndex.MagickaOffset,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.StaminaOffset) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StaminaOffset),
                    item: item.StaminaOffset,
                    fieldIndex: (int)NpcConfiguration_FieldIndex.StaminaOffset,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.Level) ?? true))
            {
                var LevelItem = item.Level;
                ((ANpcLevelXmlWriteTranslation)((IXmlItem)LevelItem).XmlWriteTranslator).Write(
                    item: LevelItem,
                    node: node,
                    name: nameof(item.Level),
                    fieldIndex: (int)NpcConfiguration_FieldIndex.Level,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)NpcConfiguration_FieldIndex.Level));
            }
            if ((translationMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.CalcMinLevel) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CalcMinLevel),
                    item: item.CalcMinLevel,
                    fieldIndex: (int)NpcConfiguration_FieldIndex.CalcMinLevel,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.CalcMaxLevel) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CalcMaxLevel),
                    item: item.CalcMaxLevel,
                    fieldIndex: (int)NpcConfiguration_FieldIndex.CalcMaxLevel,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.SpeedMultiplier) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SpeedMultiplier),
                    item: item.SpeedMultiplier,
                    fieldIndex: (int)NpcConfiguration_FieldIndex.SpeedMultiplier,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.DispositionBase) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DispositionBase),
                    item: item.DispositionBase,
                    fieldIndex: (int)NpcConfiguration_FieldIndex.DispositionBase,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.TemplateFlags) ?? true))
            {
                EnumXmlTranslation<NpcConfiguration.TemplateFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.TemplateFlags),
                    item: item.TemplateFlags,
                    fieldIndex: (int)NpcConfiguration_FieldIndex.TemplateFlags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.HealthOffset) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HealthOffset),
                    item: item.HealthOffset,
                    fieldIndex: (int)NpcConfiguration_FieldIndex.HealthOffset,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)NpcConfiguration_FieldIndex.BleedoutOverride) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BleedoutOverride),
                    item: item.BleedoutOverride,
                    fieldIndex: (int)NpcConfiguration_FieldIndex.BleedoutOverride,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            INpcConfigurationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.NpcConfiguration");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.NpcConfiguration");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (INpcConfigurationGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            INpcConfigurationGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (INpcConfigurationGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class NpcConfigurationXmlCreateTranslation
    {
        public readonly static NpcConfigurationXmlCreateTranslation Instance = new NpcConfigurationXmlCreateTranslation();

        public static void FillPublicXml(
            INpcConfiguration item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    NpcConfigurationXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            INpcConfiguration item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Flags":
                    errorMask?.PushIndex((int)NpcConfiguration_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<NpcConfiguration.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagickaOffset":
                    errorMask?.PushIndex((int)NpcConfiguration_FieldIndex.MagickaOffset);
                    try
                    {
                        item.MagickaOffset = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StaminaOffset":
                    errorMask?.PushIndex((int)NpcConfiguration_FieldIndex.StaminaOffset);
                    try
                    {
                        item.StaminaOffset = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Level":
                    errorMask?.PushIndex((int)NpcConfiguration_FieldIndex.Level);
                    try
                    {
                        item.Level = LoquiXmlTranslation<ANpcLevel>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)NpcConfiguration_FieldIndex.Level));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CalcMinLevel":
                    errorMask?.PushIndex((int)NpcConfiguration_FieldIndex.CalcMinLevel);
                    try
                    {
                        item.CalcMinLevel = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CalcMaxLevel":
                    errorMask?.PushIndex((int)NpcConfiguration_FieldIndex.CalcMaxLevel);
                    try
                    {
                        item.CalcMaxLevel = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SpeedMultiplier":
                    errorMask?.PushIndex((int)NpcConfiguration_FieldIndex.SpeedMultiplier);
                    try
                    {
                        item.SpeedMultiplier = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DispositionBase":
                    errorMask?.PushIndex((int)NpcConfiguration_FieldIndex.DispositionBase);
                    try
                    {
                        item.DispositionBase = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TemplateFlags":
                    errorMask?.PushIndex((int)NpcConfiguration_FieldIndex.TemplateFlags);
                    try
                    {
                        item.TemplateFlags = EnumXmlTranslation<NpcConfiguration.TemplateFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HealthOffset":
                    errorMask?.PushIndex((int)NpcConfiguration_FieldIndex.HealthOffset);
                    try
                    {
                        item.HealthOffset = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BleedoutOverride":
                    errorMask?.PushIndex((int)NpcConfiguration_FieldIndex.BleedoutOverride);
                    try
                    {
                        item.BleedoutOverride = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class NpcConfigurationXmlTranslationMixIn
    {
        public static void WriteToXml(
            this INpcConfigurationGetter item,
            XElement node,
            out NpcConfiguration.ErrorMask errorMask,
            NpcConfiguration.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcConfigurationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = NpcConfiguration.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this INpcConfigurationGetter item,
            string path,
            out NpcConfiguration.ErrorMask errorMask,
            NpcConfiguration.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this INpcConfigurationGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this INpcConfigurationGetter item,
            Stream stream,
            out NpcConfiguration.ErrorMask errorMask,
            NpcConfiguration.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this INpcConfigurationGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this INpcConfigurationGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((NpcConfigurationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this INpcConfigurationGetter item,
            XElement node,
            string? name = null,
            NpcConfiguration.TranslationMask? translationMask = null)
        {
            ((NpcConfigurationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this INpcConfigurationGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((NpcConfigurationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this INpcConfigurationGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((NpcConfigurationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class NpcConfigurationBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static NpcConfigurationBinaryWriteTranslation Instance = new NpcConfigurationBinaryWriteTranslation();

        static partial void WriteBinaryFlagsCustom(
            MutagenWriter writer,
            INpcConfigurationGetter item);

        public static void WriteBinaryFlags(
            MutagenWriter writer,
            INpcConfigurationGetter item)
        {
            WriteBinaryFlagsCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryLevelCustom(
            MutagenWriter writer,
            INpcConfigurationGetter item);

        public static void WriteBinaryLevel(
            MutagenWriter writer,
            INpcConfigurationGetter item)
        {
            WriteBinaryLevelCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            INpcConfigurationGetter item,
            MutagenWriter writer)
        {
            NpcConfigurationBinaryWriteTranslation.WriteBinaryFlags(
                writer: writer,
                item: item);
            writer.Write(item.MagickaOffset);
            writer.Write(item.StaminaOffset);
            NpcConfigurationBinaryWriteTranslation.WriteBinaryLevel(
                writer: writer,
                item: item);
            writer.Write(item.CalcMinLevel);
            writer.Write(item.CalcMaxLevel);
            writer.Write(item.SpeedMultiplier);
            writer.Write(item.DispositionBase);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<NpcConfiguration.TemplateFlag>.Instance.Write(
                writer,
                item.TemplateFlags,
                length: 2);
            writer.Write(item.HealthOffset);
            writer.Write(item.BleedoutOverride);
        }

        public void Write(
            MutagenWriter writer,
            INpcConfigurationGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(NpcConfiguration_Registration.ACBS_HEADER),
                type: ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INpcConfigurationGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class NpcConfigurationBinaryCreateTranslation
    {
        public readonly static NpcConfigurationBinaryCreateTranslation Instance = new NpcConfigurationBinaryCreateTranslation();

        static partial void FillBinaryFlagsCustom(
            MutagenFrame frame,
            INpcConfiguration item);

        public static void FillBinaryFlagsCustomPublic(
            MutagenFrame frame,
            INpcConfiguration item)
        {
            FillBinaryFlagsCustom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryLevelCustom(
            MutagenFrame frame,
            INpcConfiguration item);

        public static void FillBinaryLevelCustomPublic(
            MutagenFrame frame,
            INpcConfiguration item)
        {
            FillBinaryLevelCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class NpcConfigurationBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INpcConfigurationGetter item,
            MutagenWriter writer)
        {
            ((NpcConfigurationBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class NpcConfigurationBinaryOverlay :
        BinaryOverlay,
        INpcConfigurationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NpcConfiguration_Registration.Instance;
        public static NpcConfiguration_Registration Registration => NpcConfiguration_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NpcConfigurationCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NpcConfigurationSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INpcConfigurationGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INpcConfigurationGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INpcConfigurationGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((INpcConfigurationGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => NpcConfigurationXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((NpcConfigurationXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NpcConfigurationBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcConfigurationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public NpcConfiguration.Flag Flags => GetFlagsCustom(location: 0x0);
        public Int16 MagickaOffset => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0x4, 0x2));
        public Int16 StaminaOffset => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0x6, 0x2));
        public IANpcLevelGetter Level => GetLevelCustom(location: 0x8);
        public Int16 CalcMinLevel => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0xA, 0x2));
        public Int16 CalcMaxLevel => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0xC, 0x2));
        public Int16 SpeedMultiplier => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0xE, 0x2));
        public Int16 DispositionBase => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0x10, 0x2));
        public NpcConfiguration.TemplateFlag TemplateFlags => (NpcConfiguration.TemplateFlag)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(0x12, 0x2));
        public Int16 HealthOffset => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0x14, 0x2));
        public Int16 BleedoutOverride => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0x16, 0x2));
        private int LevelEndingPos;
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected NpcConfigurationBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static NpcConfigurationBinaryOverlay NpcConfigurationFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new NpcConfigurationBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0xE + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static NpcConfigurationBinaryOverlay NpcConfigurationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return NpcConfigurationFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NpcConfigurationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

