/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class ObjectEffectData :
        IObjectEffectData,
        ILoquiObjectSetter<ObjectEffectData>,
        IEquatable<ObjectEffectData>,
        IEqualsMask
    {
        #region Ctor
        public ObjectEffectData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public ObjectEffectData.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region EnchantmentCost
        public UInt32 EnchantmentCost { get; set; } = default;
        #endregion
        #region Flags
        public ObjectEffect.Flag Flags { get; set; } = default;
        #endregion
        #region CastType
        public CastType CastType { get; set; } = default;
        #endregion
        #region EnchantmentAmount
        public Int32 EnchantmentAmount { get; set; } = default;
        #endregion
        #region TargetType
        public TargetType TargetType { get; set; } = default;
        #endregion
        #region EnchantType
        public ObjectEffect.EnchantType EnchantType { get; set; } = default;
        #endregion
        #region ChargeTime
        public Single ChargeTime { get; set; } = default;
        #endregion
        #region BaseEnchantment
        public FormLink<ObjectEffect> BaseEnchantment { get; set; } = new FormLink<ObjectEffect>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IObjectEffectGetter> IObjectEffectDataGetter.BaseEnchantment => this.BaseEnchantment;
        #endregion
        #region WornRestrictions
        public FormLink<FormList> WornRestrictions { get; set; } = new FormLink<FormList>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IFormListGetter> IObjectEffectDataGetter.WornRestrictions => this.WornRestrictions;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ObjectEffectDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IObjectEffectDataGetter rhs)) return false;
            return ((ObjectEffectDataCommon)((IObjectEffectDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ObjectEffectData obj)
        {
            return ((ObjectEffectDataCommon)((IObjectEffectDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ObjectEffectDataCommon)((IObjectEffectDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ObjectEffectDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ObjectEffectDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ObjectEffectData CreateFromXml(
            XElement node,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ObjectEffectData CreateFromXml(
            XElement node,
            out ObjectEffectData.ErrorMask errorMask,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ObjectEffectData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ObjectEffectData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new ObjectEffectData();
            ((ObjectEffectDataSetterCommon)((IObjectEffectDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ObjectEffectData CreateFromXml(
            string path,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ObjectEffectData CreateFromXml(
            string path,
            out ObjectEffectData.ErrorMask errorMask,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ObjectEffectData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ObjectEffectData CreateFromXml(
            Stream stream,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ObjectEffectData CreateFromXml(
            Stream stream,
            out ObjectEffectData.ErrorMask errorMask,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ObjectEffectData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.EnchantmentCost = initialValue;
                this.Flags = initialValue;
                this.CastType = initialValue;
                this.EnchantmentAmount = initialValue;
                this.TargetType = initialValue;
                this.EnchantType = initialValue;
                this.ChargeTime = initialValue;
                this.BaseEnchantment = initialValue;
                this.WornRestrictions = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem EnchantmentCost,
                TItem Flags,
                TItem CastType,
                TItem EnchantmentAmount,
                TItem TargetType,
                TItem EnchantType,
                TItem ChargeTime,
                TItem BaseEnchantment,
                TItem WornRestrictions)
            {
                this.Versioning = Versioning;
                this.EnchantmentCost = EnchantmentCost;
                this.Flags = Flags;
                this.CastType = CastType;
                this.EnchantmentAmount = EnchantmentAmount;
                this.TargetType = TargetType;
                this.EnchantType = EnchantType;
                this.ChargeTime = ChargeTime;
                this.BaseEnchantment = BaseEnchantment;
                this.WornRestrictions = WornRestrictions;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem EnchantmentCost;
            public TItem Flags;
            public TItem CastType;
            public TItem EnchantmentAmount;
            public TItem TargetType;
            public TItem EnchantType;
            public TItem ChargeTime;
            public TItem BaseEnchantment;
            public TItem WornRestrictions;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.EnchantmentCost, rhs.EnchantmentCost)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.CastType, rhs.CastType)) return false;
                if (!object.Equals(this.EnchantmentAmount, rhs.EnchantmentAmount)) return false;
                if (!object.Equals(this.TargetType, rhs.TargetType)) return false;
                if (!object.Equals(this.EnchantType, rhs.EnchantType)) return false;
                if (!object.Equals(this.ChargeTime, rhs.ChargeTime)) return false;
                if (!object.Equals(this.BaseEnchantment, rhs.BaseEnchantment)) return false;
                if (!object.Equals(this.WornRestrictions, rhs.WornRestrictions)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.EnchantmentCost);
                hash.Add(this.Flags);
                hash.Add(this.CastType);
                hash.Add(this.EnchantmentAmount);
                hash.Add(this.TargetType);
                hash.Add(this.EnchantType);
                hash.Add(this.ChargeTime);
                hash.Add(this.BaseEnchantment);
                hash.Add(this.WornRestrictions);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.EnchantmentCost)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.CastType)) return false;
                if (!eval(this.EnchantmentAmount)) return false;
                if (!eval(this.TargetType)) return false;
                if (!eval(this.EnchantType)) return false;
                if (!eval(this.ChargeTime)) return false;
                if (!eval(this.BaseEnchantment)) return false;
                if (!eval(this.WornRestrictions)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.EnchantmentCost)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.CastType)) return true;
                if (eval(this.EnchantmentAmount)) return true;
                if (eval(this.TargetType)) return true;
                if (eval(this.EnchantType)) return true;
                if (eval(this.ChargeTime)) return true;
                if (eval(this.BaseEnchantment)) return true;
                if (eval(this.WornRestrictions)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ObjectEffectData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.EnchantmentCost = eval(this.EnchantmentCost);
                obj.Flags = eval(this.Flags);
                obj.CastType = eval(this.CastType);
                obj.EnchantmentAmount = eval(this.EnchantmentAmount);
                obj.TargetType = eval(this.TargetType);
                obj.EnchantType = eval(this.EnchantType);
                obj.ChargeTime = eval(this.ChargeTime);
                obj.BaseEnchantment = eval(this.BaseEnchantment);
                obj.WornRestrictions = eval(this.WornRestrictions);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ObjectEffectData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ObjectEffectData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ObjectEffectData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.EnchantmentCost ?? true)
                    {
                        fg.AppendItem(EnchantmentCost, "EnchantmentCost");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.CastType ?? true)
                    {
                        fg.AppendItem(CastType, "CastType");
                    }
                    if (printMask?.EnchantmentAmount ?? true)
                    {
                        fg.AppendItem(EnchantmentAmount, "EnchantmentAmount");
                    }
                    if (printMask?.TargetType ?? true)
                    {
                        fg.AppendItem(TargetType, "TargetType");
                    }
                    if (printMask?.EnchantType ?? true)
                    {
                        fg.AppendItem(EnchantType, "EnchantType");
                    }
                    if (printMask?.ChargeTime ?? true)
                    {
                        fg.AppendItem(ChargeTime, "ChargeTime");
                    }
                    if (printMask?.BaseEnchantment ?? true)
                    {
                        fg.AppendItem(BaseEnchantment, "BaseEnchantment");
                    }
                    if (printMask?.WornRestrictions ?? true)
                    {
                        fg.AppendItem(WornRestrictions, "WornRestrictions");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? EnchantmentCost;
            public Exception? Flags;
            public Exception? CastType;
            public Exception? EnchantmentAmount;
            public Exception? TargetType;
            public Exception? EnchantType;
            public Exception? ChargeTime;
            public Exception? BaseEnchantment;
            public Exception? WornRestrictions;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ObjectEffectData_FieldIndex enu = (ObjectEffectData_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffectData_FieldIndex.Versioning:
                        return Versioning;
                    case ObjectEffectData_FieldIndex.EnchantmentCost:
                        return EnchantmentCost;
                    case ObjectEffectData_FieldIndex.Flags:
                        return Flags;
                    case ObjectEffectData_FieldIndex.CastType:
                        return CastType;
                    case ObjectEffectData_FieldIndex.EnchantmentAmount:
                        return EnchantmentAmount;
                    case ObjectEffectData_FieldIndex.TargetType:
                        return TargetType;
                    case ObjectEffectData_FieldIndex.EnchantType:
                        return EnchantType;
                    case ObjectEffectData_FieldIndex.ChargeTime:
                        return ChargeTime;
                    case ObjectEffectData_FieldIndex.BaseEnchantment:
                        return BaseEnchantment;
                    case ObjectEffectData_FieldIndex.WornRestrictions:
                        return WornRestrictions;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ObjectEffectData_FieldIndex enu = (ObjectEffectData_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffectData_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case ObjectEffectData_FieldIndex.EnchantmentCost:
                        this.EnchantmentCost = ex;
                        break;
                    case ObjectEffectData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case ObjectEffectData_FieldIndex.CastType:
                        this.CastType = ex;
                        break;
                    case ObjectEffectData_FieldIndex.EnchantmentAmount:
                        this.EnchantmentAmount = ex;
                        break;
                    case ObjectEffectData_FieldIndex.TargetType:
                        this.TargetType = ex;
                        break;
                    case ObjectEffectData_FieldIndex.EnchantType:
                        this.EnchantType = ex;
                        break;
                    case ObjectEffectData_FieldIndex.ChargeTime:
                        this.ChargeTime = ex;
                        break;
                    case ObjectEffectData_FieldIndex.BaseEnchantment:
                        this.BaseEnchantment = ex;
                        break;
                    case ObjectEffectData_FieldIndex.WornRestrictions:
                        this.WornRestrictions = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ObjectEffectData_FieldIndex enu = (ObjectEffectData_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffectData_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case ObjectEffectData_FieldIndex.EnchantmentCost:
                        this.EnchantmentCost = (Exception?)obj;
                        break;
                    case ObjectEffectData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case ObjectEffectData_FieldIndex.CastType:
                        this.CastType = (Exception?)obj;
                        break;
                    case ObjectEffectData_FieldIndex.EnchantmentAmount:
                        this.EnchantmentAmount = (Exception?)obj;
                        break;
                    case ObjectEffectData_FieldIndex.TargetType:
                        this.TargetType = (Exception?)obj;
                        break;
                    case ObjectEffectData_FieldIndex.EnchantType:
                        this.EnchantType = (Exception?)obj;
                        break;
                    case ObjectEffectData_FieldIndex.ChargeTime:
                        this.ChargeTime = (Exception?)obj;
                        break;
                    case ObjectEffectData_FieldIndex.BaseEnchantment:
                        this.BaseEnchantment = (Exception?)obj;
                        break;
                    case ObjectEffectData_FieldIndex.WornRestrictions:
                        this.WornRestrictions = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (EnchantmentCost != null) return true;
                if (Flags != null) return true;
                if (CastType != null) return true;
                if (EnchantmentAmount != null) return true;
                if (TargetType != null) return true;
                if (EnchantType != null) return true;
                if (ChargeTime != null) return true;
                if (BaseEnchantment != null) return true;
                if (WornRestrictions != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Versioning, "Versioning");
                fg.AppendItem(EnchantmentCost, "EnchantmentCost");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(CastType, "CastType");
                fg.AppendItem(EnchantmentAmount, "EnchantmentAmount");
                fg.AppendItem(TargetType, "TargetType");
                fg.AppendItem(EnchantType, "EnchantType");
                fg.AppendItem(ChargeTime, "ChargeTime");
                fg.AppendItem(BaseEnchantment, "BaseEnchantment");
                fg.AppendItem(WornRestrictions, "WornRestrictions");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.EnchantmentCost = this.EnchantmentCost.Combine(rhs.EnchantmentCost);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.CastType = this.CastType.Combine(rhs.CastType);
                ret.EnchantmentAmount = this.EnchantmentAmount.Combine(rhs.EnchantmentAmount);
                ret.TargetType = this.TargetType.Combine(rhs.TargetType);
                ret.EnchantType = this.EnchantType.Combine(rhs.EnchantType);
                ret.ChargeTime = this.ChargeTime.Combine(rhs.ChargeTime);
                ret.BaseEnchantment = this.BaseEnchantment.Combine(rhs.BaseEnchantment);
                ret.WornRestrictions = this.WornRestrictions.Combine(rhs.WornRestrictions);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Versioning;
            public bool EnchantmentCost;
            public bool Flags;
            public bool CastType;
            public bool EnchantmentAmount;
            public bool TargetType;
            public bool EnchantType;
            public bool ChargeTime;
            public bool BaseEnchantment;
            public bool WornRestrictions;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Versioning = defaultOn;
                this.EnchantmentCost = defaultOn;
                this.Flags = defaultOn;
                this.CastType = defaultOn;
                this.EnchantmentAmount = defaultOn;
                this.TargetType = defaultOn;
                this.EnchantType = defaultOn;
                this.ChargeTime = defaultOn;
                this.BaseEnchantment = defaultOn;
                this.WornRestrictions = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((EnchantmentCost, null));
                ret.Add((Flags, null));
                ret.Add((CastType, null));
                ret.Add((EnchantmentAmount, null));
                ret.Add((TargetType, null));
                ret.Add((EnchantType, null));
                ret.Add((ChargeTime, null));
                ret.Add((BaseEnchantment, null));
                ret.Add((WornRestrictions, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = ObjectEffectData_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => ObjectEffectDataCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ObjectEffectDataCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ObjectEffectDataCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ObjectEffectDataCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ObjectEffectDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ObjectEffectDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ObjectEffectData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static ObjectEffectData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ObjectEffectData();
            ((ObjectEffectDataSetterCommon)((IObjectEffectDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IObjectEffectDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ObjectEffectDataSetterCommon)((IObjectEffectDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ObjectEffectData GetNew()
        {
            return new ObjectEffectData();
        }

    }
    #endregion

    #region Interface
    public partial interface IObjectEffectData :
        IObjectEffectDataGetter,
        ILoquiObjectSetter<IObjectEffectData>
    {
        new ObjectEffectData.VersioningBreaks Versioning { get; set; }
        new UInt32 EnchantmentCost { get; set; }
        new ObjectEffect.Flag Flags { get; set; }
        new CastType CastType { get; set; }
        new Int32 EnchantmentAmount { get; set; }
        new TargetType TargetType { get; set; }
        new ObjectEffect.EnchantType EnchantType { get; set; }
        new Single ChargeTime { get; set; }
        new FormLink<ObjectEffect> BaseEnchantment { get; set; }
        new FormLink<FormList> WornRestrictions { get; set; }
    }

    public partial interface IObjectEffectDataGetter :
        ILoquiObject,
        ILoquiObject<IObjectEffectDataGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ObjectEffectData_Registration.Instance;
        ObjectEffectData.VersioningBreaks Versioning { get; }
        UInt32 EnchantmentCost { get; }
        ObjectEffect.Flag Flags { get; }
        CastType CastType { get; }
        Int32 EnchantmentAmount { get; }
        TargetType TargetType { get; }
        ObjectEffect.EnchantType EnchantType { get; }
        Single ChargeTime { get; }
        IFormLinkGetter<IObjectEffectGetter> BaseEnchantment { get; }
        IFormLinkGetter<IFormListGetter> WornRestrictions { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ObjectEffectDataMixIn
    {
        public static void Clear(this IObjectEffectData item)
        {
            ((ObjectEffectDataSetterCommon)((IObjectEffectDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ObjectEffectData.Mask<bool> GetEqualsMask(
            this IObjectEffectDataGetter item,
            IObjectEffectDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ObjectEffectDataCommon)((IObjectEffectDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IObjectEffectDataGetter item,
            string? name = null,
            ObjectEffectData.Mask<bool>? printMask = null)
        {
            return ((ObjectEffectDataCommon)((IObjectEffectDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IObjectEffectDataGetter item,
            FileGeneration fg,
            string? name = null,
            ObjectEffectData.Mask<bool>? printMask = null)
        {
            ((ObjectEffectDataCommon)((IObjectEffectDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IObjectEffectDataGetter item,
            ObjectEffectData.Mask<bool?> checkMask)
        {
            return ((ObjectEffectDataCommon)((IObjectEffectDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ObjectEffectData.Mask<bool> GetHasBeenSetMask(this IObjectEffectDataGetter item)
        {
            var ret = new ObjectEffectData.Mask<bool>(false);
            ((ObjectEffectDataCommon)((IObjectEffectDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IObjectEffectDataGetter item,
            IObjectEffectDataGetter rhs)
        {
            return ((ObjectEffectDataCommon)((IObjectEffectDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IObjectEffectData lhs,
            IObjectEffectDataGetter rhs)
        {
            ((ObjectEffectDataSetterTranslationCommon)((IObjectEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IObjectEffectData lhs,
            IObjectEffectDataGetter rhs,
            ObjectEffectData.TranslationMask? copyMask = null)
        {
            ((ObjectEffectDataSetterTranslationCommon)((IObjectEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IObjectEffectData lhs,
            IObjectEffectDataGetter rhs,
            out ObjectEffectData.ErrorMask errorMask,
            ObjectEffectData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectEffectDataSetterTranslationCommon)((IObjectEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ObjectEffectData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IObjectEffectData lhs,
            IObjectEffectDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ObjectEffectDataSetterTranslationCommon)((IObjectEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ObjectEffectData DeepCopy(
            this IObjectEffectDataGetter item,
            ObjectEffectData.TranslationMask? copyMask = null)
        {
            return ((ObjectEffectDataSetterTranslationCommon)((IObjectEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ObjectEffectData DeepCopy(
            this IObjectEffectDataGetter item,
            out ObjectEffectData.ErrorMask errorMask,
            ObjectEffectData.TranslationMask? copyMask = null)
        {
            return ((ObjectEffectDataSetterTranslationCommon)((IObjectEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ObjectEffectData DeepCopy(
            this IObjectEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ObjectEffectDataSetterTranslationCommon)((IObjectEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IObjectEffectData item,
            XElement node,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IObjectEffectData item,
            XElement node,
            out ObjectEffectData.ErrorMask errorMask,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ObjectEffectData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IObjectEffectData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ObjectEffectDataSetterCommon)((IObjectEffectDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IObjectEffectData item,
            string path,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IObjectEffectData item,
            string path,
            out ObjectEffectData.ErrorMask errorMask,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IObjectEffectData item,
            string path,
            ErrorMaskBuilder? errorMask,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IObjectEffectData item,
            Stream stream,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IObjectEffectData item,
            Stream stream,
            out ObjectEffectData.ErrorMask errorMask,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IObjectEffectData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IObjectEffectData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IObjectEffectData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ObjectEffectDataSetterCommon)((IObjectEffectDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum ObjectEffectData_FieldIndex
    {
        Versioning = 0,
        EnchantmentCost = 1,
        Flags = 2,
        CastType = 3,
        EnchantmentAmount = 4,
        TargetType = 5,
        EnchantType = 6,
        ChargeTime = 7,
        BaseEnchantment = 8,
        WornRestrictions = 9,
    }
    #endregion

    #region Registration
    public partial class ObjectEffectData_Registration : ILoquiRegistration
    {
        public static readonly ObjectEffectData_Registration Instance = new ObjectEffectData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 136,
            version: 0);

        public const string GUID = "edc0fcfa-9555-4856-a0c4-1a12c1a35802";

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(ObjectEffectData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectEffectData.ErrorMask);

        public static readonly Type ClassType = typeof(ObjectEffectData);

        public static readonly Type GetterType = typeof(IObjectEffectDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IObjectEffectData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.ObjectEffectData";

        public const string Name = "ObjectEffectData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VERSIONING":
                    return (ushort)ObjectEffectData_FieldIndex.Versioning;
                case "ENCHANTMENTCOST":
                    return (ushort)ObjectEffectData_FieldIndex.EnchantmentCost;
                case "FLAGS":
                    return (ushort)ObjectEffectData_FieldIndex.Flags;
                case "CASTTYPE":
                    return (ushort)ObjectEffectData_FieldIndex.CastType;
                case "ENCHANTMENTAMOUNT":
                    return (ushort)ObjectEffectData_FieldIndex.EnchantmentAmount;
                case "TARGETTYPE":
                    return (ushort)ObjectEffectData_FieldIndex.TargetType;
                case "ENCHANTTYPE":
                    return (ushort)ObjectEffectData_FieldIndex.EnchantType;
                case "CHARGETIME":
                    return (ushort)ObjectEffectData_FieldIndex.ChargeTime;
                case "BASEENCHANTMENT":
                    return (ushort)ObjectEffectData_FieldIndex.BaseEnchantment;
                case "WORNRESTRICTIONS":
                    return (ushort)ObjectEffectData_FieldIndex.WornRestrictions;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ObjectEffectData_FieldIndex enu = (ObjectEffectData_FieldIndex)index;
            switch (enu)
            {
                case ObjectEffectData_FieldIndex.Versioning:
                case ObjectEffectData_FieldIndex.EnchantmentCost:
                case ObjectEffectData_FieldIndex.Flags:
                case ObjectEffectData_FieldIndex.CastType:
                case ObjectEffectData_FieldIndex.EnchantmentAmount:
                case ObjectEffectData_FieldIndex.TargetType:
                case ObjectEffectData_FieldIndex.EnchantType:
                case ObjectEffectData_FieldIndex.ChargeTime:
                case ObjectEffectData_FieldIndex.BaseEnchantment:
                case ObjectEffectData_FieldIndex.WornRestrictions:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ObjectEffectData_FieldIndex enu = (ObjectEffectData_FieldIndex)index;
            switch (enu)
            {
                case ObjectEffectData_FieldIndex.Versioning:
                case ObjectEffectData_FieldIndex.EnchantmentCost:
                case ObjectEffectData_FieldIndex.Flags:
                case ObjectEffectData_FieldIndex.CastType:
                case ObjectEffectData_FieldIndex.EnchantmentAmount:
                case ObjectEffectData_FieldIndex.TargetType:
                case ObjectEffectData_FieldIndex.EnchantType:
                case ObjectEffectData_FieldIndex.ChargeTime:
                case ObjectEffectData_FieldIndex.BaseEnchantment:
                case ObjectEffectData_FieldIndex.WornRestrictions:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ObjectEffectData_FieldIndex enu = (ObjectEffectData_FieldIndex)index;
            switch (enu)
            {
                case ObjectEffectData_FieldIndex.Versioning:
                case ObjectEffectData_FieldIndex.EnchantmentCost:
                case ObjectEffectData_FieldIndex.Flags:
                case ObjectEffectData_FieldIndex.CastType:
                case ObjectEffectData_FieldIndex.EnchantmentAmount:
                case ObjectEffectData_FieldIndex.TargetType:
                case ObjectEffectData_FieldIndex.EnchantType:
                case ObjectEffectData_FieldIndex.ChargeTime:
                case ObjectEffectData_FieldIndex.BaseEnchantment:
                case ObjectEffectData_FieldIndex.WornRestrictions:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ObjectEffectData_FieldIndex enu = (ObjectEffectData_FieldIndex)index;
            switch (enu)
            {
                case ObjectEffectData_FieldIndex.Versioning:
                    return "Versioning";
                case ObjectEffectData_FieldIndex.EnchantmentCost:
                    return "EnchantmentCost";
                case ObjectEffectData_FieldIndex.Flags:
                    return "Flags";
                case ObjectEffectData_FieldIndex.CastType:
                    return "CastType";
                case ObjectEffectData_FieldIndex.EnchantmentAmount:
                    return "EnchantmentAmount";
                case ObjectEffectData_FieldIndex.TargetType:
                    return "TargetType";
                case ObjectEffectData_FieldIndex.EnchantType:
                    return "EnchantType";
                case ObjectEffectData_FieldIndex.ChargeTime:
                    return "ChargeTime";
                case ObjectEffectData_FieldIndex.BaseEnchantment:
                    return "BaseEnchantment";
                case ObjectEffectData_FieldIndex.WornRestrictions:
                    return "WornRestrictions";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ObjectEffectData_FieldIndex enu = (ObjectEffectData_FieldIndex)index;
            switch (enu)
            {
                case ObjectEffectData_FieldIndex.Versioning:
                case ObjectEffectData_FieldIndex.EnchantmentCost:
                case ObjectEffectData_FieldIndex.Flags:
                case ObjectEffectData_FieldIndex.CastType:
                case ObjectEffectData_FieldIndex.EnchantmentAmount:
                case ObjectEffectData_FieldIndex.TargetType:
                case ObjectEffectData_FieldIndex.EnchantType:
                case ObjectEffectData_FieldIndex.ChargeTime:
                case ObjectEffectData_FieldIndex.BaseEnchantment:
                case ObjectEffectData_FieldIndex.WornRestrictions:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ObjectEffectData_FieldIndex enu = (ObjectEffectData_FieldIndex)index;
            switch (enu)
            {
                case ObjectEffectData_FieldIndex.Versioning:
                case ObjectEffectData_FieldIndex.EnchantmentCost:
                case ObjectEffectData_FieldIndex.Flags:
                case ObjectEffectData_FieldIndex.CastType:
                case ObjectEffectData_FieldIndex.EnchantmentAmount:
                case ObjectEffectData_FieldIndex.TargetType:
                case ObjectEffectData_FieldIndex.EnchantType:
                case ObjectEffectData_FieldIndex.ChargeTime:
                case ObjectEffectData_FieldIndex.BaseEnchantment:
                case ObjectEffectData_FieldIndex.WornRestrictions:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ObjectEffectData_FieldIndex enu = (ObjectEffectData_FieldIndex)index;
            switch (enu)
            {
                case ObjectEffectData_FieldIndex.Versioning:
                    return typeof(ObjectEffectData.VersioningBreaks);
                case ObjectEffectData_FieldIndex.EnchantmentCost:
                    return typeof(UInt32);
                case ObjectEffectData_FieldIndex.Flags:
                    return typeof(ObjectEffect.Flag);
                case ObjectEffectData_FieldIndex.CastType:
                    return typeof(CastType);
                case ObjectEffectData_FieldIndex.EnchantmentAmount:
                    return typeof(Int32);
                case ObjectEffectData_FieldIndex.TargetType:
                    return typeof(TargetType);
                case ObjectEffectData_FieldIndex.EnchantType:
                    return typeof(ObjectEffect.EnchantType);
                case ObjectEffectData_FieldIndex.ChargeTime:
                    return typeof(Single);
                case ObjectEffectData_FieldIndex.BaseEnchantment:
                    return typeof(FormLink<ObjectEffect>);
                case ObjectEffectData_FieldIndex.WornRestrictions:
                    return typeof(FormLink<FormList>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ObjectEffectDataXmlWriteTranslation);
        public static readonly RecordType ENIT_HEADER = new RecordType("ENIT");
        public static readonly RecordType TriggeringRecordType = ENIT_HEADER;
        public const int NumStructFields = 9;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(ObjectEffectDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ObjectEffectDataSetterCommon
    {
        public static readonly ObjectEffectDataSetterCommon Instance = new ObjectEffectDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IObjectEffectData item)
        {
            ClearPartial();
            item.Versioning = default;
            item.EnchantmentCost = default;
            item.Flags = default;
            item.CastType = default;
            item.EnchantmentAmount = default;
            item.TargetType = default;
            item.EnchantType = default;
            item.ChargeTime = default;
            item.BaseEnchantment = new FormLink<ObjectEffect>(FormKey.Null);
            item.WornRestrictions = new FormLink<FormList>(FormKey.Null);
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IObjectEffectData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ObjectEffectDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IObjectEffectData item,
            MutagenFrame frame)
        {
            item.EnchantmentCost = frame.ReadUInt32();
            item.Flags = EnumBinaryTranslation<ObjectEffect.Flag>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.CastType = EnumBinaryTranslation<CastType>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.EnchantmentAmount = frame.ReadInt32();
            item.TargetType = EnumBinaryTranslation<TargetType>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.EnchantType = EnumBinaryTranslation<ObjectEffect.EnchantType>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.ChargeTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BaseEnchantment = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            if (frame.Complete)
            {
                item.Versioning |= ObjectEffectData.VersioningBreaks.Break0;
                return;
            }
            item.WornRestrictions = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
        }
        
        public virtual void CopyInFromBinary(
            IObjectEffectData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ObjectEffectData_Registration.ENIT_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class ObjectEffectDataCommon
    {
        public static readonly ObjectEffectDataCommon Instance = new ObjectEffectDataCommon();

        public ObjectEffectData.Mask<bool> GetEqualsMask(
            IObjectEffectDataGetter item,
            IObjectEffectDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectEffectData.Mask<bool>(false);
            ((ObjectEffectDataCommon)((IObjectEffectDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectEffectDataGetter item,
            IObjectEffectDataGetter rhs,
            ObjectEffectData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.EnchantmentCost = item.EnchantmentCost == rhs.EnchantmentCost;
            ret.Flags = item.Flags == rhs.Flags;
            ret.CastType = item.CastType == rhs.CastType;
            ret.EnchantmentAmount = item.EnchantmentAmount == rhs.EnchantmentAmount;
            ret.TargetType = item.TargetType == rhs.TargetType;
            ret.EnchantType = item.EnchantType == rhs.EnchantType;
            ret.ChargeTime = item.ChargeTime.EqualsWithin(rhs.ChargeTime);
            ret.BaseEnchantment = object.Equals(item.BaseEnchantment, rhs.BaseEnchantment);
            ret.WornRestrictions = object.Equals(item.WornRestrictions, rhs.WornRestrictions);
        }
        
        public string ToString(
            IObjectEffectDataGetter item,
            string? name = null,
            ObjectEffectData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IObjectEffectDataGetter item,
            FileGeneration fg,
            string? name = null,
            ObjectEffectData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ObjectEffectData =>");
            }
            else
            {
                fg.AppendLine($"{name} (ObjectEffectData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IObjectEffectDataGetter item,
            FileGeneration fg,
            ObjectEffectData.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.EnchantmentCost ?? true)
            {
                fg.AppendItem(item.EnchantmentCost, "EnchantmentCost");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.CastType ?? true)
            {
                fg.AppendItem(item.CastType, "CastType");
            }
            if (printMask?.EnchantmentAmount ?? true)
            {
                fg.AppendItem(item.EnchantmentAmount, "EnchantmentAmount");
            }
            if (printMask?.TargetType ?? true)
            {
                fg.AppendItem(item.TargetType, "TargetType");
            }
            if (printMask?.EnchantType ?? true)
            {
                fg.AppendItem(item.EnchantType, "EnchantType");
            }
            if (printMask?.ChargeTime ?? true)
            {
                fg.AppendItem(item.ChargeTime, "ChargeTime");
            }
            if (printMask?.BaseEnchantment ?? true)
            {
                fg.AppendItem(item.BaseEnchantment, "BaseEnchantment");
            }
            if (printMask?.WornRestrictions ?? true)
            {
                fg.AppendItem(item.WornRestrictions, "WornRestrictions");
            }
        }
        
        public bool HasBeenSet(
            IObjectEffectDataGetter item,
            ObjectEffectData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IObjectEffectDataGetter item,
            ObjectEffectData.Mask<bool> mask)
        {
            mask.Versioning = true;
            mask.EnchantmentCost = true;
            mask.Flags = true;
            mask.CastType = true;
            mask.EnchantmentAmount = true;
            mask.TargetType = true;
            mask.EnchantType = true;
            mask.ChargeTime = true;
            mask.BaseEnchantment = true;
            mask.WornRestrictions = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectEffectDataGetter? lhs,
            IObjectEffectDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Versioning != rhs.Versioning) return false;
            if (lhs.EnchantmentCost != rhs.EnchantmentCost) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.CastType != rhs.CastType) return false;
            if (lhs.EnchantmentAmount != rhs.EnchantmentAmount) return false;
            if (lhs.TargetType != rhs.TargetType) return false;
            if (lhs.EnchantType != rhs.EnchantType) return false;
            if (!lhs.ChargeTime.EqualsWithin(rhs.ChargeTime)) return false;
            if (!lhs.BaseEnchantment.Equals(rhs.BaseEnchantment)) return false;
            if (!lhs.WornRestrictions.Equals(rhs.WornRestrictions)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IObjectEffectDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.EnchantmentCost);
            hash.Add(item.Flags);
            hash.Add(item.CastType);
            hash.Add(item.EnchantmentAmount);
            hash.Add(item.TargetType);
            hash.Add(item.EnchantType);
            hash.Add(item.ChargeTime);
            hash.Add(item.BaseEnchantment);
            hash.Add(item.WornRestrictions);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ObjectEffectData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IObjectEffectDataGetter obj)
        {
            yield return obj.BaseEnchantment.FormKey;
            yield return obj.WornRestrictions.FormKey;
            yield break;
        }
        
        public void RemapLinks(IObjectEffectDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class ObjectEffectDataSetterTranslationCommon
    {
        public static readonly ObjectEffectDataSetterTranslationCommon Instance = new ObjectEffectDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IObjectEffectData item,
            IObjectEffectDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.EnchantmentCost) ?? true))
            {
                item.EnchantmentCost = rhs.EnchantmentCost;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.CastType) ?? true))
            {
                item.CastType = rhs.CastType;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.EnchantmentAmount) ?? true))
            {
                item.EnchantmentAmount = rhs.EnchantmentAmount;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.TargetType) ?? true))
            {
                item.TargetType = rhs.TargetType;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.EnchantType) ?? true))
            {
                item.EnchantType = rhs.EnchantType;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.ChargeTime) ?? true))
            {
                item.ChargeTime = rhs.ChargeTime;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.BaseEnchantment) ?? true))
            {
                item.BaseEnchantment = rhs.BaseEnchantment.FormKey;
            }
            if (rhs.Versioning.HasFlag(ObjectEffectData.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.WornRestrictions) ?? true))
            {
                item.WornRestrictions = rhs.WornRestrictions.FormKey;
            }
        }
        
        #endregion
        
        public ObjectEffectData DeepCopy(
            IObjectEffectDataGetter item,
            ObjectEffectData.TranslationMask? copyMask = null)
        {
            ObjectEffectData ret = (ObjectEffectData)((ObjectEffectDataCommon)((IObjectEffectDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ObjectEffectData DeepCopy(
            IObjectEffectDataGetter item,
            out ObjectEffectData.ErrorMask errorMask,
            ObjectEffectData.TranslationMask? copyMask = null)
        {
            ObjectEffectData ret = (ObjectEffectData)((ObjectEffectDataCommon)((IObjectEffectDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ObjectEffectData DeepCopy(
            IObjectEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ObjectEffectData ret = (ObjectEffectData)((ObjectEffectDataCommon)((IObjectEffectDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class ObjectEffectData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectEffectData_Registration.Instance;
        public static ObjectEffectData_Registration Registration => ObjectEffectData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ObjectEffectDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ObjectEffectDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ObjectEffectDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IObjectEffectDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IObjectEffectDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IObjectEffectDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ObjectEffectDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ObjectEffectDataXmlWriteTranslation Instance = new ObjectEffectDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IObjectEffectDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.Versioning) ?? true))
            {
                EnumXmlTranslation<ObjectEffectData.VersioningBreaks>.Instance.Write(
                    node: node,
                    name: nameof(item.Versioning),
                    item: item.Versioning,
                    fieldIndex: (int)ObjectEffectData_FieldIndex.Versioning,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.EnchantmentCost) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EnchantmentCost),
                    item: item.EnchantmentCost,
                    fieldIndex: (int)ObjectEffectData_FieldIndex.EnchantmentCost,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<ObjectEffect.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)ObjectEffectData_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.CastType) ?? true))
            {
                EnumXmlTranslation<CastType>.Instance.Write(
                    node: node,
                    name: nameof(item.CastType),
                    item: item.CastType,
                    fieldIndex: (int)ObjectEffectData_FieldIndex.CastType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.EnchantmentAmount) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EnchantmentAmount),
                    item: item.EnchantmentAmount,
                    fieldIndex: (int)ObjectEffectData_FieldIndex.EnchantmentAmount,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.TargetType) ?? true))
            {
                EnumXmlTranslation<TargetType>.Instance.Write(
                    node: node,
                    name: nameof(item.TargetType),
                    item: item.TargetType,
                    fieldIndex: (int)ObjectEffectData_FieldIndex.TargetType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.EnchantType) ?? true))
            {
                EnumXmlTranslation<ObjectEffect.EnchantType>.Instance.Write(
                    node: node,
                    name: nameof(item.EnchantType),
                    item: item.EnchantType,
                    fieldIndex: (int)ObjectEffectData_FieldIndex.EnchantType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.ChargeTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ChargeTime),
                    item: item.ChargeTime,
                    fieldIndex: (int)ObjectEffectData_FieldIndex.ChargeTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.BaseEnchantment) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseEnchantment),
                    item: item.BaseEnchantment.FormKey,
                    fieldIndex: (int)ObjectEffectData_FieldIndex.BaseEnchantment,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ObjectEffectData_FieldIndex.WornRestrictions) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.WornRestrictions),
                    item: item.WornRestrictions.FormKey,
                    fieldIndex: (int)ObjectEffectData_FieldIndex.WornRestrictions,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IObjectEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.ObjectEffectData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.ObjectEffectData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IObjectEffectDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IObjectEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IObjectEffectDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ObjectEffectDataXmlCreateTranslation
    {
        public readonly static ObjectEffectDataXmlCreateTranslation Instance = new ObjectEffectDataXmlCreateTranslation();

        public static void FillPublicXml(
            IObjectEffectData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ObjectEffectDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IObjectEffectData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Versioning":
                    errorMask?.PushIndex((int)ObjectEffectData_FieldIndex.Versioning);
                    try
                    {
                        item.Versioning = EnumXmlTranslation<ObjectEffectData.VersioningBreaks>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnchantmentCost":
                    errorMask?.PushIndex((int)ObjectEffectData_FieldIndex.EnchantmentCost);
                    try
                    {
                        item.EnchantmentCost = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)ObjectEffectData_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<ObjectEffect.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CastType":
                    errorMask?.PushIndex((int)ObjectEffectData_FieldIndex.CastType);
                    try
                    {
                        item.CastType = EnumXmlTranslation<CastType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnchantmentAmount":
                    errorMask?.PushIndex((int)ObjectEffectData_FieldIndex.EnchantmentAmount);
                    try
                    {
                        item.EnchantmentAmount = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TargetType":
                    errorMask?.PushIndex((int)ObjectEffectData_FieldIndex.TargetType);
                    try
                    {
                        item.TargetType = EnumXmlTranslation<TargetType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnchantType":
                    errorMask?.PushIndex((int)ObjectEffectData_FieldIndex.EnchantType);
                    try
                    {
                        item.EnchantType = EnumXmlTranslation<ObjectEffect.EnchantType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ChargeTime":
                    errorMask?.PushIndex((int)ObjectEffectData_FieldIndex.ChargeTime);
                    try
                    {
                        item.ChargeTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BaseEnchantment":
                    errorMask?.PushIndex((int)ObjectEffectData_FieldIndex.BaseEnchantment);
                    try
                    {
                        item.BaseEnchantment = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WornRestrictions":
                    errorMask?.PushIndex((int)ObjectEffectData_FieldIndex.WornRestrictions);
                    try
                    {
                        item.WornRestrictions = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ObjectEffectDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IObjectEffectDataGetter item,
            XElement node,
            out ObjectEffectData.ErrorMask errorMask,
            ObjectEffectData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ObjectEffectData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IObjectEffectDataGetter item,
            string path,
            out ObjectEffectData.ErrorMask errorMask,
            ObjectEffectData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IObjectEffectDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IObjectEffectDataGetter item,
            Stream stream,
            out ObjectEffectData.ErrorMask errorMask,
            ObjectEffectData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IObjectEffectDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IObjectEffectDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((ObjectEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IObjectEffectDataGetter item,
            XElement node,
            string? name = null,
            ObjectEffectData.TranslationMask? translationMask = null)
        {
            ((ObjectEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IObjectEffectDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ObjectEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IObjectEffectDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ObjectEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ObjectEffectDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ObjectEffectDataBinaryWriteTranslation Instance = new ObjectEffectDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IObjectEffectDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.EnchantmentCost);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ObjectEffect.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<CastType>.Instance.Write(
                writer,
                item.CastType,
                length: 4);
            writer.Write(item.EnchantmentAmount);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<TargetType>.Instance.Write(
                writer,
                item.TargetType,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ObjectEffect.EnchantType>.Instance.Write(
                writer,
                item.EnchantType,
                length: 4);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ChargeTime);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BaseEnchantment);
            if (!item.Versioning.HasFlag(ObjectEffectData.VersioningBreaks.Break0))
            {
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.WornRestrictions);
            }
        }

        public void Write(
            MutagenWriter writer,
            IObjectEffectDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(ObjectEffectData_Registration.ENIT_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IObjectEffectDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ObjectEffectDataBinaryCreateTranslation
    {
        public readonly static ObjectEffectDataBinaryCreateTranslation Instance = new ObjectEffectDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ObjectEffectDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IObjectEffectDataGetter item,
            MutagenWriter writer)
        {
            ((ObjectEffectDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ObjectEffectDataBinaryOverlay :
        BinaryOverlay,
        IObjectEffectDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectEffectData_Registration.Instance;
        public static ObjectEffectData_Registration Registration => ObjectEffectData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ObjectEffectDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ObjectEffectDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IObjectEffectDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IObjectEffectDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IObjectEffectDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IObjectEffectDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => ObjectEffectDataCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ObjectEffectDataCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ObjectEffectDataCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ObjectEffectDataCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ObjectEffectDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ObjectEffectDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ObjectEffectDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ObjectEffectDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public ObjectEffectData.VersioningBreaks Versioning { get; private set; }
        public UInt32 EnchantmentCost => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x0, 0x4));
        public ObjectEffect.Flag Flags => (ObjectEffect.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x4, 0x4));
        public CastType CastType => (CastType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x8, 0x4));
        public Int32 EnchantmentAmount => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0xC, 0x4));
        public TargetType TargetType => (TargetType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x10, 0x4));
        public ObjectEffect.EnchantType EnchantType => (ObjectEffect.EnchantType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x14, 0x4));
        public Single ChargeTime => SpanExt.GetFloat(_data.Slice(0x18, 0x4));
        public IFormLinkGetter<IObjectEffectGetter> BaseEnchantment => new FormLink<IObjectEffectGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x1C, 0x4))));
        public IFormLinkGetter<IFormListGetter> WornRestrictions => new FormLink<IFormListGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x20, 0x4))));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ObjectEffectDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ObjectEffectDataBinaryOverlay ObjectEffectDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ObjectEffectDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            if (ret._data.Length <= 0x20)
            {
                ret.Versioning |= ObjectEffectData.VersioningBreaks.Break0;
            }
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ObjectEffectDataBinaryOverlay ObjectEffectDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ObjectEffectDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ObjectEffectDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

