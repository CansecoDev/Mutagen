/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class ObjectEffect :
        SkyrimMajorRecord,
        IObjectEffectInternal,
        ILoquiObjectSetter<ObjectEffect>,
        IEquatable<ObjectEffect>,
        IEqualsMask
    {
        #region Ctor
        protected ObjectEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectBounds _ObjectBounds = new ObjectBounds();
        public ObjectBounds ObjectBounds
        {
            get => _ObjectBounds;
            set => _ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectEffectGetter.ObjectBounds => _ObjectBounds;
        #endregion
        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IObjectEffectGetter.Name => this.Name;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectEffectData? _Data;
        public ObjectEffectData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectEffectDataGetter? IObjectEffectGetter.Data => this.Data;
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Effect> _Effects = new ExtendedList<Effect>();
        public ExtendedList<Effect> Effects
        {
            get => this._Effects;
            protected set => this._Effects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEffectGetter> IObjectEffectGetter.Effects => _Effects;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ObjectEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IObjectEffectGetter rhs)) return false;
            return ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ObjectEffect obj)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ObjectEffectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ObjectEffectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new ObjectEffect CreateFromXml(
            XElement node,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ObjectEffect CreateFromXml(
            XElement node,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ObjectEffect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static ObjectEffect CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new ObjectEffect();
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ObjectEffect CreateFromXml(
            string path,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ObjectEffect CreateFromXml(
            string path,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ObjectEffect CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ObjectEffect CreateFromXml(
            Stream stream,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ObjectEffect CreateFromXml(
            Stream stream,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ObjectEffect CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Data = new MaskItem<TItem, ObjectEffectData.Mask<TItem>?>(initialValue, new ObjectEffectData.Mask<TItem>(initialValue));
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Name,
                TItem Data,
                TItem Effects)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Data = new MaskItem<TItem, ObjectEffectData.Mask<TItem>?>(Data, new ObjectEffectData.Mask<TItem>(Data));
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(Effects, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, ObjectEffectData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>? Effects;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.Effects, rhs.Effects)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Data);
                hash.Add(this.Effects);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (this.Effects != null)
                {
                    if (!eval(this.Effects.Overall)) return false;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (this.Effects != null)
                {
                    if (eval(this.Effects.Overall)) return true;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ObjectEffect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Data = this.Data == null ? null : new MaskItem<R, ObjectEffectData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                if (Effects != null)
                {
                    obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect.Mask<R>?>>?>(eval(this.Effects.Overall), Enumerable.Empty<MaskItemIndexed<R, Effect.Mask<R>?>>());
                    if (Effects.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Effect.Mask<R>?>>();
                        obj.Effects.Specific = l;
                        foreach (var item in Effects.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Effect.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Effect.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ObjectEffect.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ObjectEffect.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ObjectEffect.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                    if ((printMask?.Effects?.Overall ?? true)
                        && Effects.TryGet(out var EffectsItem))
                    {
                        fg.AppendLine("Effects =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(EffectsItem.Overall);
                            if (EffectsItem.Specific != null)
                            {
                                foreach (var subItem in EffectsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, ObjectEffectData.ErrorMask?>? Data;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>? Effects;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffect_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case ObjectEffect_FieldIndex.Name:
                        return Name;
                    case ObjectEffect_FieldIndex.Data:
                        return Data;
                    case ObjectEffect_FieldIndex.Effects:
                        return Effects;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffect_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case ObjectEffect_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ObjectEffect_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, ObjectEffectData.ErrorMask?>(ex, null);
                        break;
                    case ObjectEffect_FieldIndex.Effects:
                        this.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffect_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case ObjectEffect_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, ObjectEffectData.ErrorMask?>?)obj;
                        break;
                    case ObjectEffect_FieldIndex.Effects:
                        this.Effects = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Data != null) return true;
                if (Effects != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                Data?.ToString(fg);
                if (Effects.TryGet(out var EffectsItem))
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(EffectsItem.Overall);
                        if (EffectsItem.Specific != null)
                        {
                            foreach (var subItem in EffectsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ExceptionExt.Combine(this.Effects?.Overall, rhs.Effects?.Overall), ExceptionExt.Combine(this.Effects?.Specific, rhs.Effects?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, ObjectBounds.TranslationMask?> ObjectBounds;
            public bool Name;
            public MaskItem<bool, ObjectEffectData.TranslationMask?> Data;
            public MaskItem<bool, Effect.TranslationMask?> Effects;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.ObjectBounds = new MaskItem<bool, ObjectBounds.TranslationMask?>(defaultOn, null);
                this.Name = defaultOn;
                this.Data = new MaskItem<bool, ObjectEffectData.TranslationMask?>(defaultOn, null);
                this.Effects = new MaskItem<bool, Effect.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Data?.Overall ?? true, Data?.Specific?.GetCrystal()));
                ret.Add((Effects?.Overall ?? true, Effects?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = ObjectEffect_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => ObjectEffectCommon.Instance.GetLinks(this);
        public ObjectEffect(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public ObjectEffect(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public ObjectEffect(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ObjectEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ObjectEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new ObjectEffect CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static ObjectEffect CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ObjectEffect();
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IObjectEffectGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ObjectEffect GetNew()
        {
            return new ObjectEffect();
        }

    }
    #endregion

    #region Interface
    public partial interface IObjectEffect :
        IObjectEffectGetter,
        ISkyrimMajorRecord,
        INamed,
        IEffectRecord,
        IObjectBounded,
        ILoquiObjectSetter<IObjectEffectInternal>
    {
        new ObjectBounds ObjectBounds { get; set; }
        new String? Name { get; set; }
        new ObjectEffectData? Data { get; set; }
        new ExtendedList<Effect> Effects { get; }
    }

    public partial interface IObjectEffectInternal :
        ISkyrimMajorRecordInternal,
        IObjectEffect,
        IObjectEffectGetter
    {
    }

    public partial interface IObjectEffectGetter :
        ISkyrimMajorRecordGetter,
        INamedGetter,
        IEffectRecordGetter,
        IObjectBoundedGetter,
        ILoquiObject<IObjectEffectGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => ObjectEffect_Registration.Instance;
        IObjectBoundsGetter ObjectBounds { get; }
        String? Name { get; }
        IObjectEffectDataGetter? Data { get; }
        IReadOnlyList<IEffectGetter> Effects { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ObjectEffectMixIn
    {
        public static void Clear(this IObjectEffectInternal item)
        {
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ObjectEffect.Mask<bool> GetEqualsMask(
            this IObjectEffectGetter item,
            IObjectEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IObjectEffectGetter item,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IObjectEffectGetter item,
            FileGeneration fg,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IObjectEffectGetter item,
            ObjectEffect.Mask<bool?> checkMask)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ObjectEffect.Mask<bool> GetHasBeenSetMask(this IObjectEffectGetter item)
        {
            var ret = new ObjectEffect.Mask<bool>(false);
            ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IObjectEffectGetter item,
            IObjectEffectGetter rhs)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IObjectEffectInternal lhs,
            IObjectEffectGetter rhs,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ObjectEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IObjectEffectInternal lhs,
            IObjectEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ObjectEffect DeepCopy(
            this IObjectEffectGetter item,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            return ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ObjectEffect DeepCopy(
            this IObjectEffectGetter item,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            return ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ObjectEffect DeepCopy(
            this IObjectEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IObjectEffectInternal item,
            XElement node,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IObjectEffectInternal item,
            XElement node,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ObjectEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IObjectEffectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IObjectEffectInternal item,
            string path,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IObjectEffectInternal item,
            string path,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IObjectEffectInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IObjectEffectInternal item,
            Stream stream,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IObjectEffectInternal item,
            Stream stream,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IObjectEffectInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ObjectEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IObjectEffectInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IObjectEffectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum ObjectEffect_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Name = 7,
        Data = 8,
        Effects = 9,
    }
    #endregion

    #region Registration
    public partial class ObjectEffect_Registration : ILoquiRegistration
    {
        public static readonly ObjectEffect_Registration Instance = new ObjectEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 128,
            version: 0);

        public const string GUID = "0f27c016-189e-43f2-8328-927b0ace82d4";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(ObjectEffect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectEffect.ErrorMask);

        public static readonly Type ClassType = typeof(ObjectEffect);

        public static readonly Type GetterType = typeof(IObjectEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IObjectEffect);

        public static readonly Type? InternalSetterType = typeof(IObjectEffectInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.ObjectEffect";

        public const string Name = "ObjectEffect";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECTBOUNDS":
                    return (ushort)ObjectEffect_FieldIndex.ObjectBounds;
                case "NAME":
                    return (ushort)ObjectEffect_FieldIndex.Name;
                case "DATA":
                    return (ushort)ObjectEffect_FieldIndex.Data;
                case "EFFECTS":
                    return (ushort)ObjectEffect_FieldIndex.Effects;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
            switch (enu)
            {
                case ObjectEffect_FieldIndex.Effects:
                    return true;
                case ObjectEffect_FieldIndex.ObjectBounds:
                case ObjectEffect_FieldIndex.Name:
                case ObjectEffect_FieldIndex.Data:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
            switch (enu)
            {
                case ObjectEffect_FieldIndex.ObjectBounds:
                case ObjectEffect_FieldIndex.Data:
                case ObjectEffect_FieldIndex.Effects:
                    return true;
                case ObjectEffect_FieldIndex.Name:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
            switch (enu)
            {
                case ObjectEffect_FieldIndex.ObjectBounds:
                case ObjectEffect_FieldIndex.Name:
                case ObjectEffect_FieldIndex.Data:
                case ObjectEffect_FieldIndex.Effects:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
            switch (enu)
            {
                case ObjectEffect_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case ObjectEffect_FieldIndex.Name:
                    return "Name";
                case ObjectEffect_FieldIndex.Data:
                    return "Data";
                case ObjectEffect_FieldIndex.Effects:
                    return "Effects";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
            switch (enu)
            {
                case ObjectEffect_FieldIndex.ObjectBounds:
                case ObjectEffect_FieldIndex.Name:
                case ObjectEffect_FieldIndex.Data:
                case ObjectEffect_FieldIndex.Effects:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
            switch (enu)
            {
                case ObjectEffect_FieldIndex.ObjectBounds:
                case ObjectEffect_FieldIndex.Name:
                case ObjectEffect_FieldIndex.Data:
                case ObjectEffect_FieldIndex.Effects:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
            switch (enu)
            {
                case ObjectEffect_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case ObjectEffect_FieldIndex.Name:
                    return typeof(String);
                case ObjectEffect_FieldIndex.Data:
                    return typeof(ObjectEffectData);
                case ObjectEffect_FieldIndex.Effects:
                    return typeof(ExtendedList<Effect>);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ObjectEffectXmlWriteTranslation);
        public static readonly RecordType ENCH_HEADER = new RecordType("ENCH");
        public static readonly RecordType OBND_HEADER = new RecordType("OBND");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType ENIT_HEADER = new RecordType("ENIT");
        public static readonly RecordType EFID_HEADER = new RecordType("EFID");
        public static readonly RecordType EFIT_HEADER = new RecordType("EFIT");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType TriggeringRecordType = ENCH_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(ObjectEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ObjectEffectSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ObjectEffectSetterCommon Instance = new ObjectEffectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IObjectEffectInternal item)
        {
            ClearPartial();
            item.ObjectBounds = new ObjectBounds();
            item.Name = default;
            item.Data = null;
            item.Effects.Clear();
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IObjectEffectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IObjectEffectInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IObjectEffectInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IObjectEffectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ObjectEffectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (ObjectEffect)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (ObjectEffect)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => ObjectEffect_Registration.ENCH_HEADER;
        protected static void FillBinaryStructs(
            IObjectEffectInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IObjectEffectInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x444E424F: // OBND
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)ObjectEffect_FieldIndex.ObjectBounds);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)ObjectEffect_FieldIndex.Name);
                }
                case 0x54494E45: // ENIT
                {
                    item.Data = Mutagen.Bethesda.Skyrim.ObjectEffectData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)ObjectEffect_FieldIndex.Data);
                }
                case 0x44494645: // EFID
                case 0x54494645: // EFIT
                case 0x41445443: // CTDA
                {
                    item.Effects.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Effect_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out Effect listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<Effect>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)ObjectEffect_FieldIndex.Effects);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            IObjectEffectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IObjectEffectInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ObjectEffect)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (ObjectEffect)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ObjectEffectCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ObjectEffectCommon Instance = new ObjectEffectCommon();

        public ObjectEffect.Mask<bool> GetEqualsMask(
            IObjectEffectGetter item,
            IObjectEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectEffect.Mask<bool>(false);
            ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectEffectGetter item,
            IObjectEffectGetter rhs,
            ObjectEffect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IObjectEffectGetter item,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IObjectEffectGetter item,
            FileGeneration fg,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ObjectEffect =>");
            }
            else
            {
                fg.AppendLine($"{name} (ObjectEffect) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IObjectEffectGetter item,
            FileGeneration fg,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data.TryGet(out var DataItem))
            {
                DataItem?.ToString(fg, "Data");
            }
            if (printMask?.Effects?.Overall ?? true)
            {
                fg.AppendLine("Effects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Effects)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IObjectEffectGetter item,
            ObjectEffect.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Data?.Overall.HasValue ?? false && checkMask.Data.Overall.Value != (item.Data != null)) return false;
            if (checkMask.Data?.Specific != null && (item.Data == null || !item.Data.HasBeenSet(checkMask.Data.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IObjectEffectGetter item,
            ObjectEffect.Mask<bool> mask)
        {
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds.Mask<bool>?>(true, item.ObjectBounds?.GetHasBeenSetMask());
            mask.Name = (item.Name != null);
            var itemData = item.Data;
            mask.Data = new MaskItem<bool, ObjectEffectData.Mask<bool>?>(itemData != null, itemData?.GetHasBeenSetMask());
            var EffectsItem = item.Effects;
            mask.Effects = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Effect.Mask<bool>?>>?>(true, EffectsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Effect.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static ObjectEffect_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ObjectEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (ObjectEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (ObjectEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (ObjectEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (ObjectEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (ObjectEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new ObjectEffect_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ObjectEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ObjectEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (ObjectEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ObjectEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectEffectGetter? lhs,
            IObjectEffectGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            if (!lhs.Effects.SequenceEqual(rhs.Effects)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IObjectEffectGetter?)lhs,
                rhs: rhs as IObjectEffectGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IObjectEffectGetter?)lhs,
                rhs: rhs as IObjectEffectGetter);
        }
        
        public virtual int GetHashCode(IObjectEffectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Data.TryGet(out var Dataitem))
            {
                hash.Add(Dataitem);
            }
            hash.Add(item.Effects);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IObjectEffectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IObjectEffectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ObjectEffect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IObjectEffectGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            if (obj.Data != null)
            {
                foreach (var item in obj.Data.Links)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Effects.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(ObjectEffect obj, ObjectEffect rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new ObjectEffect(getNextFormKey());
            ret.DeepCopyIn((ObjectEffect)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (ObjectEffect)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class ObjectEffectSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ObjectEffectSetterTranslationCommon Instance = new ObjectEffectSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IObjectEffectInternal item,
            IObjectEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IObjectEffect item,
            IObjectEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)ObjectEffect_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)ObjectEffect_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)ObjectEffect_FieldIndex.Data);
                try
                {
                    if(rhs.Data.TryGet(out var rhsData))
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ObjectEffect_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Effects) ?? true))
            {
                errorMask?.PushIndex((int)ObjectEffect_FieldIndex.Effects);
                try
                {
                    item.Effects.SetTo(
                        rhs.Effects
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IObjectEffectInternal)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IObjectEffect)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IObjectEffectInternal)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IObjectEffect)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public ObjectEffect DeepCopy(
            IObjectEffectGetter item,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            ObjectEffect ret = (ObjectEffect)((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ObjectEffect DeepCopy(
            IObjectEffectGetter item,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            ObjectEffect ret = (ObjectEffect)((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ObjectEffect DeepCopy(
            IObjectEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ObjectEffect ret = (ObjectEffect)((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class ObjectEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectEffect_Registration.Instance;
        public new static ObjectEffect_Registration Registration => ObjectEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ObjectEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ObjectEffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ObjectEffectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ObjectEffectXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ObjectEffectXmlWriteTranslation Instance = new ObjectEffectXmlWriteTranslation();

        public static void WriteToNodeXml(
            IObjectEffectGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ObjectBounds) ?? true))
            {
                var ObjectBoundsItem = item.ObjectBounds;
                ((ObjectBoundsXmlWriteTranslation)((IXmlItem)ObjectBoundsItem).XmlWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    node: node,
                    name: nameof(item.ObjectBounds),
                    fieldIndex: (int)ObjectEffect_FieldIndex.ObjectBounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ObjectEffect_FieldIndex.ObjectBounds));
            }
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)ObjectEffect_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Data != null)
                && (translationMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Data) ?? true))
            {
                if (item.Data.TryGet(out var DataItem))
                {
                    ((ObjectEffectDataXmlWriteTranslation)((IXmlItem)DataItem).XmlWriteTranslator).Write(
                        item: DataItem,
                        node: node,
                        name: nameof(item.Data),
                        fieldIndex: (int)ObjectEffect_FieldIndex.Data,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)ObjectEffect_FieldIndex.Data));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Effects) ?? true))
            {
                ListXmlTranslation<IEffectGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Effects),
                    item: item.Effects,
                    fieldIndex: (int)ObjectEffect_FieldIndex.Effects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ObjectEffect_FieldIndex.Effects),
                    transl: (XElement subNode, IEffectGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((EffectXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IObjectEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.ObjectEffect");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.ObjectEffect");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IObjectEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IObjectEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IObjectEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ObjectEffectXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static ObjectEffectXmlCreateTranslation Instance = new ObjectEffectXmlCreateTranslation();

        public static void FillPublicXml(
            IObjectEffectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ObjectEffectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IObjectEffectInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ObjectBounds":
                    errorMask?.PushIndex((int)ObjectEffect_FieldIndex.ObjectBounds);
                    try
                    {
                        item.ObjectBounds = LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ObjectEffect_FieldIndex.ObjectBounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    errorMask?.PushIndex((int)ObjectEffect_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Data":
                    errorMask?.PushIndex((int)ObjectEffect_FieldIndex.Data);
                    try
                    {
                        item.Data = LoquiXmlTranslation<ObjectEffectData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ObjectEffect_FieldIndex.Data));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Effects":
                    errorMask?.PushIndex((int)ObjectEffect_FieldIndex.Effects);
                    try
                    {
                        if (ListXmlTranslation<Effect>.Instance.Parse(
                            node: node,
                            enumer: out var EffectsItem,
                            transl: LoquiXmlTranslation<Effect>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Effects.SetTo(EffectsItem);
                        }
                        else
                        {
                            item.Effects.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ObjectEffectXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IObjectEffectGetter item,
            XElement node,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectEffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ObjectEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IObjectEffectGetter item,
            string path,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IObjectEffectGetter item,
            Stream stream,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ObjectEffectBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ObjectEffectBinaryWriteTranslation Instance = new ObjectEffectBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IObjectEffectGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(ObjectEffect_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Data.TryGet(out var DataItem))
            {
                ((ObjectEffectDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IEffectGetter>.Instance.Write(
                writer: writer,
                items: item.Effects,
                transl: (MutagenWriter subWriter, IEffectGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((EffectBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IObjectEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(ObjectEffect_Registration.ENCH_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IObjectEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IObjectEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IObjectEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ObjectEffectBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static ObjectEffectBinaryCreateTranslation Instance = new ObjectEffectBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ObjectEffectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ObjectEffectBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IObjectEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectEffect_Registration.Instance;
        public new static ObjectEffect_Registration Registration => ObjectEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ObjectEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ObjectEffectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IObjectEffectGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => ObjectEffectCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ObjectEffectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ObjectEffectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ObjectEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ObjectEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new BinaryMemoryReadStream(_data.Slice(_ObjectBoundsLocation!.Value.Min)), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Data
        private RangeInt32? _DataLocation;
        public IObjectEffectDataGetter? Data => _DataLocation.HasValue ? ObjectEffectDataBinaryOverlay.ObjectEffectDataFactory(new BinaryMemoryReadStream(_data.Slice(_DataLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool Data_IsSet => _DataLocation.HasValue;
        #endregion
        public IReadOnlyList<IEffectGetter> Effects { get; private set; } = ListExt.Empty<EffectBinaryOverlay>();
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ObjectEffectBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ObjectEffectBinaryOverlay ObjectEffectFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new ObjectEffectBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ObjectEffectBinaryOverlay ObjectEffectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ObjectEffectFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x444E424F: // OBND
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)ObjectEffect_FieldIndex.ObjectBounds);
                }
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ObjectEffect_FieldIndex.Name);
                }
                case 0x54494E45: // ENIT
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)ObjectEffect_FieldIndex.Data);
                }
                case 0x44494645: // EFID
                case 0x54494645: // EFIT
                case 0x41445443: // CTDA
                {
                    this.Effects = this.ParseRepeatedTypelessSubrecord<EffectBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: Effect_Registration.TriggeringRecordTypes,
                        factory:  EffectBinaryOverlay.EffectFactory);
                    return TryGet<int?>.Succeed((int)ObjectEffect_FieldIndex.Effects);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ObjectEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

