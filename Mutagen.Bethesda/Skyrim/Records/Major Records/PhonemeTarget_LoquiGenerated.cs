/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class PhonemeTarget :
        IPhonemeTarget,
        ILoquiObjectSetter<PhonemeTarget>,
        IEquatable<PhonemeTarget>,
        IEqualsMask
    {
        #region Ctor
        public PhonemeTarget()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Aah_LipBigAah
        public Single Aah_LipBigAah { get; set; } = default;
        #endregion
        #region BigAah_LipDST
        public Single BigAah_LipDST { get; set; } = default;
        #endregion
        #region BMP_LipEee
        public Single BMP_LipEee { get; set; } = default;
        #endregion
        #region ChJsh_LipFV
        public Single ChJsh_LipFV { get; set; } = default;
        #endregion
        #region DST_LipK
        public Single DST_LipK { get; set; } = default;
        #endregion
        #region Eee_LipL
        public Single Eee_LipL { get; set; } = default;
        #endregion
        #region Eh_LipR
        public Single Eh_LipR { get; set; } = default;
        #endregion
        #region FV_LipTh
        public Single FV_LipTh { get; set; } = default;
        #endregion
        #region I
        public Single I { get; set; } = default;
        #endregion
        #region K
        public Single K { get; set; } = default;
        #endregion
        #region N
        public Single N { get; set; } = default;
        #endregion
        #region Oh
        public Single Oh { get; set; } = default;
        #endregion
        #region OohQ
        public Single OohQ { get; set; } = default;
        #endregion
        #region R
        public Single R { get; set; } = default;
        #endregion
        #region TH
        public Single TH { get; set; } = default;
        #endregion
        #region W
        public Single W { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PhonemeTargetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPhonemeTargetGetter rhs)) return false;
            return ((PhonemeTargetCommon)((IPhonemeTargetGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(PhonemeTarget obj)
        {
            return ((PhonemeTargetCommon)((IPhonemeTargetGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PhonemeTargetCommon)((IPhonemeTargetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => PhonemeTargetXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PhonemeTargetXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static PhonemeTarget CreateFromXml(
            XElement node,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PhonemeTarget CreateFromXml(
            XElement node,
            out PhonemeTarget.ErrorMask errorMask,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PhonemeTarget.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static PhonemeTarget CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new PhonemeTarget();
            ((PhonemeTargetSetterCommon)((IPhonemeTargetGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static PhonemeTarget CreateFromXml(
            string path,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static PhonemeTarget CreateFromXml(
            string path,
            out PhonemeTarget.ErrorMask errorMask,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PhonemeTarget CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PhonemeTarget CreateFromXml(
            Stream stream,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static PhonemeTarget CreateFromXml(
            Stream stream,
            out PhonemeTarget.ErrorMask errorMask,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PhonemeTarget CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Aah_LipBigAah = initialValue;
                this.BigAah_LipDST = initialValue;
                this.BMP_LipEee = initialValue;
                this.ChJsh_LipFV = initialValue;
                this.DST_LipK = initialValue;
                this.Eee_LipL = initialValue;
                this.Eh_LipR = initialValue;
                this.FV_LipTh = initialValue;
                this.I = initialValue;
                this.K = initialValue;
                this.N = initialValue;
                this.Oh = initialValue;
                this.OohQ = initialValue;
                this.R = initialValue;
                this.TH = initialValue;
                this.W = initialValue;
            }

            public Mask(
                TItem Aah_LipBigAah,
                TItem BigAah_LipDST,
                TItem BMP_LipEee,
                TItem ChJsh_LipFV,
                TItem DST_LipK,
                TItem Eee_LipL,
                TItem Eh_LipR,
                TItem FV_LipTh,
                TItem I,
                TItem K,
                TItem N,
                TItem Oh,
                TItem OohQ,
                TItem R,
                TItem TH,
                TItem W)
            {
                this.Aah_LipBigAah = Aah_LipBigAah;
                this.BigAah_LipDST = BigAah_LipDST;
                this.BMP_LipEee = BMP_LipEee;
                this.ChJsh_LipFV = ChJsh_LipFV;
                this.DST_LipK = DST_LipK;
                this.Eee_LipL = Eee_LipL;
                this.Eh_LipR = Eh_LipR;
                this.FV_LipTh = FV_LipTh;
                this.I = I;
                this.K = K;
                this.N = N;
                this.Oh = Oh;
                this.OohQ = OohQ;
                this.R = R;
                this.TH = TH;
                this.W = W;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Aah_LipBigAah;
            public TItem BigAah_LipDST;
            public TItem BMP_LipEee;
            public TItem ChJsh_LipFV;
            public TItem DST_LipK;
            public TItem Eee_LipL;
            public TItem Eh_LipR;
            public TItem FV_LipTh;
            public TItem I;
            public TItem K;
            public TItem N;
            public TItem Oh;
            public TItem OohQ;
            public TItem R;
            public TItem TH;
            public TItem W;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Aah_LipBigAah, rhs.Aah_LipBigAah)) return false;
                if (!object.Equals(this.BigAah_LipDST, rhs.BigAah_LipDST)) return false;
                if (!object.Equals(this.BMP_LipEee, rhs.BMP_LipEee)) return false;
                if (!object.Equals(this.ChJsh_LipFV, rhs.ChJsh_LipFV)) return false;
                if (!object.Equals(this.DST_LipK, rhs.DST_LipK)) return false;
                if (!object.Equals(this.Eee_LipL, rhs.Eee_LipL)) return false;
                if (!object.Equals(this.Eh_LipR, rhs.Eh_LipR)) return false;
                if (!object.Equals(this.FV_LipTh, rhs.FV_LipTh)) return false;
                if (!object.Equals(this.I, rhs.I)) return false;
                if (!object.Equals(this.K, rhs.K)) return false;
                if (!object.Equals(this.N, rhs.N)) return false;
                if (!object.Equals(this.Oh, rhs.Oh)) return false;
                if (!object.Equals(this.OohQ, rhs.OohQ)) return false;
                if (!object.Equals(this.R, rhs.R)) return false;
                if (!object.Equals(this.TH, rhs.TH)) return false;
                if (!object.Equals(this.W, rhs.W)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Aah_LipBigAah?.GetHashCode());
                ret = ret.CombineHashCode(this.BigAah_LipDST?.GetHashCode());
                ret = ret.CombineHashCode(this.BMP_LipEee?.GetHashCode());
                ret = ret.CombineHashCode(this.ChJsh_LipFV?.GetHashCode());
                ret = ret.CombineHashCode(this.DST_LipK?.GetHashCode());
                ret = ret.CombineHashCode(this.Eee_LipL?.GetHashCode());
                ret = ret.CombineHashCode(this.Eh_LipR?.GetHashCode());
                ret = ret.CombineHashCode(this.FV_LipTh?.GetHashCode());
                ret = ret.CombineHashCode(this.I?.GetHashCode());
                ret = ret.CombineHashCode(this.K?.GetHashCode());
                ret = ret.CombineHashCode(this.N?.GetHashCode());
                ret = ret.CombineHashCode(this.Oh?.GetHashCode());
                ret = ret.CombineHashCode(this.OohQ?.GetHashCode());
                ret = ret.CombineHashCode(this.R?.GetHashCode());
                ret = ret.CombineHashCode(this.TH?.GetHashCode());
                ret = ret.CombineHashCode(this.W?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Aah_LipBigAah)) return false;
                if (!eval(this.BigAah_LipDST)) return false;
                if (!eval(this.BMP_LipEee)) return false;
                if (!eval(this.ChJsh_LipFV)) return false;
                if (!eval(this.DST_LipK)) return false;
                if (!eval(this.Eee_LipL)) return false;
                if (!eval(this.Eh_LipR)) return false;
                if (!eval(this.FV_LipTh)) return false;
                if (!eval(this.I)) return false;
                if (!eval(this.K)) return false;
                if (!eval(this.N)) return false;
                if (!eval(this.Oh)) return false;
                if (!eval(this.OohQ)) return false;
                if (!eval(this.R)) return false;
                if (!eval(this.TH)) return false;
                if (!eval(this.W)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Aah_LipBigAah)) return true;
                if (eval(this.BigAah_LipDST)) return true;
                if (eval(this.BMP_LipEee)) return true;
                if (eval(this.ChJsh_LipFV)) return true;
                if (eval(this.DST_LipK)) return true;
                if (eval(this.Eee_LipL)) return true;
                if (eval(this.Eh_LipR)) return true;
                if (eval(this.FV_LipTh)) return true;
                if (eval(this.I)) return true;
                if (eval(this.K)) return true;
                if (eval(this.N)) return true;
                if (eval(this.Oh)) return true;
                if (eval(this.OohQ)) return true;
                if (eval(this.R)) return true;
                if (eval(this.TH)) return true;
                if (eval(this.W)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PhonemeTarget.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Aah_LipBigAah = eval(this.Aah_LipBigAah);
                obj.BigAah_LipDST = eval(this.BigAah_LipDST);
                obj.BMP_LipEee = eval(this.BMP_LipEee);
                obj.ChJsh_LipFV = eval(this.ChJsh_LipFV);
                obj.DST_LipK = eval(this.DST_LipK);
                obj.Eee_LipL = eval(this.Eee_LipL);
                obj.Eh_LipR = eval(this.Eh_LipR);
                obj.FV_LipTh = eval(this.FV_LipTh);
                obj.I = eval(this.I);
                obj.K = eval(this.K);
                obj.N = eval(this.N);
                obj.Oh = eval(this.Oh);
                obj.OohQ = eval(this.OohQ);
                obj.R = eval(this.R);
                obj.TH = eval(this.TH);
                obj.W = eval(this.W);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PhonemeTarget.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PhonemeTarget.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PhonemeTarget.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Aah_LipBigAah ?? true)
                    {
                        fg.AppendItem(Aah_LipBigAah, "Aah_LipBigAah");
                    }
                    if (printMask?.BigAah_LipDST ?? true)
                    {
                        fg.AppendItem(BigAah_LipDST, "BigAah_LipDST");
                    }
                    if (printMask?.BMP_LipEee ?? true)
                    {
                        fg.AppendItem(BMP_LipEee, "BMP_LipEee");
                    }
                    if (printMask?.ChJsh_LipFV ?? true)
                    {
                        fg.AppendItem(ChJsh_LipFV, "ChJsh_LipFV");
                    }
                    if (printMask?.DST_LipK ?? true)
                    {
                        fg.AppendItem(DST_LipK, "DST_LipK");
                    }
                    if (printMask?.Eee_LipL ?? true)
                    {
                        fg.AppendItem(Eee_LipL, "Eee_LipL");
                    }
                    if (printMask?.Eh_LipR ?? true)
                    {
                        fg.AppendItem(Eh_LipR, "Eh_LipR");
                    }
                    if (printMask?.FV_LipTh ?? true)
                    {
                        fg.AppendItem(FV_LipTh, "FV_LipTh");
                    }
                    if (printMask?.I ?? true)
                    {
                        fg.AppendItem(I, "I");
                    }
                    if (printMask?.K ?? true)
                    {
                        fg.AppendItem(K, "K");
                    }
                    if (printMask?.N ?? true)
                    {
                        fg.AppendItem(N, "N");
                    }
                    if (printMask?.Oh ?? true)
                    {
                        fg.AppendItem(Oh, "Oh");
                    }
                    if (printMask?.OohQ ?? true)
                    {
                        fg.AppendItem(OohQ, "OohQ");
                    }
                    if (printMask?.R ?? true)
                    {
                        fg.AppendItem(R, "R");
                    }
                    if (printMask?.TH ?? true)
                    {
                        fg.AppendItem(TH, "TH");
                    }
                    if (printMask?.W ?? true)
                    {
                        fg.AppendItem(W, "W");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Aah_LipBigAah;
            public Exception? BigAah_LipDST;
            public Exception? BMP_LipEee;
            public Exception? ChJsh_LipFV;
            public Exception? DST_LipK;
            public Exception? Eee_LipL;
            public Exception? Eh_LipR;
            public Exception? FV_LipTh;
            public Exception? I;
            public Exception? K;
            public Exception? N;
            public Exception? Oh;
            public Exception? OohQ;
            public Exception? R;
            public Exception? TH;
            public Exception? W;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PhonemeTarget_FieldIndex enu = (PhonemeTarget_FieldIndex)index;
                switch (enu)
                {
                    case PhonemeTarget_FieldIndex.Aah_LipBigAah:
                        return Aah_LipBigAah;
                    case PhonemeTarget_FieldIndex.BigAah_LipDST:
                        return BigAah_LipDST;
                    case PhonemeTarget_FieldIndex.BMP_LipEee:
                        return BMP_LipEee;
                    case PhonemeTarget_FieldIndex.ChJsh_LipFV:
                        return ChJsh_LipFV;
                    case PhonemeTarget_FieldIndex.DST_LipK:
                        return DST_LipK;
                    case PhonemeTarget_FieldIndex.Eee_LipL:
                        return Eee_LipL;
                    case PhonemeTarget_FieldIndex.Eh_LipR:
                        return Eh_LipR;
                    case PhonemeTarget_FieldIndex.FV_LipTh:
                        return FV_LipTh;
                    case PhonemeTarget_FieldIndex.I:
                        return I;
                    case PhonemeTarget_FieldIndex.K:
                        return K;
                    case PhonemeTarget_FieldIndex.N:
                        return N;
                    case PhonemeTarget_FieldIndex.Oh:
                        return Oh;
                    case PhonemeTarget_FieldIndex.OohQ:
                        return OohQ;
                    case PhonemeTarget_FieldIndex.R:
                        return R;
                    case PhonemeTarget_FieldIndex.TH:
                        return TH;
                    case PhonemeTarget_FieldIndex.W:
                        return W;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PhonemeTarget_FieldIndex enu = (PhonemeTarget_FieldIndex)index;
                switch (enu)
                {
                    case PhonemeTarget_FieldIndex.Aah_LipBigAah:
                        this.Aah_LipBigAah = ex;
                        break;
                    case PhonemeTarget_FieldIndex.BigAah_LipDST:
                        this.BigAah_LipDST = ex;
                        break;
                    case PhonemeTarget_FieldIndex.BMP_LipEee:
                        this.BMP_LipEee = ex;
                        break;
                    case PhonemeTarget_FieldIndex.ChJsh_LipFV:
                        this.ChJsh_LipFV = ex;
                        break;
                    case PhonemeTarget_FieldIndex.DST_LipK:
                        this.DST_LipK = ex;
                        break;
                    case PhonemeTarget_FieldIndex.Eee_LipL:
                        this.Eee_LipL = ex;
                        break;
                    case PhonemeTarget_FieldIndex.Eh_LipR:
                        this.Eh_LipR = ex;
                        break;
                    case PhonemeTarget_FieldIndex.FV_LipTh:
                        this.FV_LipTh = ex;
                        break;
                    case PhonemeTarget_FieldIndex.I:
                        this.I = ex;
                        break;
                    case PhonemeTarget_FieldIndex.K:
                        this.K = ex;
                        break;
                    case PhonemeTarget_FieldIndex.N:
                        this.N = ex;
                        break;
                    case PhonemeTarget_FieldIndex.Oh:
                        this.Oh = ex;
                        break;
                    case PhonemeTarget_FieldIndex.OohQ:
                        this.OohQ = ex;
                        break;
                    case PhonemeTarget_FieldIndex.R:
                        this.R = ex;
                        break;
                    case PhonemeTarget_FieldIndex.TH:
                        this.TH = ex;
                        break;
                    case PhonemeTarget_FieldIndex.W:
                        this.W = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PhonemeTarget_FieldIndex enu = (PhonemeTarget_FieldIndex)index;
                switch (enu)
                {
                    case PhonemeTarget_FieldIndex.Aah_LipBigAah:
                        this.Aah_LipBigAah = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.BigAah_LipDST:
                        this.BigAah_LipDST = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.BMP_LipEee:
                        this.BMP_LipEee = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.ChJsh_LipFV:
                        this.ChJsh_LipFV = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.DST_LipK:
                        this.DST_LipK = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.Eee_LipL:
                        this.Eee_LipL = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.Eh_LipR:
                        this.Eh_LipR = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.FV_LipTh:
                        this.FV_LipTh = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.I:
                        this.I = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.K:
                        this.K = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.N:
                        this.N = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.Oh:
                        this.Oh = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.OohQ:
                        this.OohQ = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.R:
                        this.R = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.TH:
                        this.TH = (Exception?)obj;
                        break;
                    case PhonemeTarget_FieldIndex.W:
                        this.W = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Aah_LipBigAah != null) return true;
                if (BigAah_LipDST != null) return true;
                if (BMP_LipEee != null) return true;
                if (ChJsh_LipFV != null) return true;
                if (DST_LipK != null) return true;
                if (Eee_LipL != null) return true;
                if (Eh_LipR != null) return true;
                if (FV_LipTh != null) return true;
                if (I != null) return true;
                if (K != null) return true;
                if (N != null) return true;
                if (Oh != null) return true;
                if (OohQ != null) return true;
                if (R != null) return true;
                if (TH != null) return true;
                if (W != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Aah_LipBigAah, "Aah_LipBigAah");
                fg.AppendItem(BigAah_LipDST, "BigAah_LipDST");
                fg.AppendItem(BMP_LipEee, "BMP_LipEee");
                fg.AppendItem(ChJsh_LipFV, "ChJsh_LipFV");
                fg.AppendItem(DST_LipK, "DST_LipK");
                fg.AppendItem(Eee_LipL, "Eee_LipL");
                fg.AppendItem(Eh_LipR, "Eh_LipR");
                fg.AppendItem(FV_LipTh, "FV_LipTh");
                fg.AppendItem(I, "I");
                fg.AppendItem(K, "K");
                fg.AppendItem(N, "N");
                fg.AppendItem(Oh, "Oh");
                fg.AppendItem(OohQ, "OohQ");
                fg.AppendItem(R, "R");
                fg.AppendItem(TH, "TH");
                fg.AppendItem(W, "W");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Aah_LipBigAah = this.Aah_LipBigAah.Combine(rhs.Aah_LipBigAah);
                ret.BigAah_LipDST = this.BigAah_LipDST.Combine(rhs.BigAah_LipDST);
                ret.BMP_LipEee = this.BMP_LipEee.Combine(rhs.BMP_LipEee);
                ret.ChJsh_LipFV = this.ChJsh_LipFV.Combine(rhs.ChJsh_LipFV);
                ret.DST_LipK = this.DST_LipK.Combine(rhs.DST_LipK);
                ret.Eee_LipL = this.Eee_LipL.Combine(rhs.Eee_LipL);
                ret.Eh_LipR = this.Eh_LipR.Combine(rhs.Eh_LipR);
                ret.FV_LipTh = this.FV_LipTh.Combine(rhs.FV_LipTh);
                ret.I = this.I.Combine(rhs.I);
                ret.K = this.K.Combine(rhs.K);
                ret.N = this.N.Combine(rhs.N);
                ret.Oh = this.Oh.Combine(rhs.Oh);
                ret.OohQ = this.OohQ.Combine(rhs.OohQ);
                ret.R = this.R.Combine(rhs.R);
                ret.TH = this.TH.Combine(rhs.TH);
                ret.W = this.W.Combine(rhs.W);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Aah_LipBigAah;
            public bool BigAah_LipDST;
            public bool BMP_LipEee;
            public bool ChJsh_LipFV;
            public bool DST_LipK;
            public bool Eee_LipL;
            public bool Eh_LipR;
            public bool FV_LipTh;
            public bool I;
            public bool K;
            public bool N;
            public bool Oh;
            public bool OohQ;
            public bool R;
            public bool TH;
            public bool W;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Aah_LipBigAah = defaultOn;
                this.BigAah_LipDST = defaultOn;
                this.BMP_LipEee = defaultOn;
                this.ChJsh_LipFV = defaultOn;
                this.DST_LipK = defaultOn;
                this.Eee_LipL = defaultOn;
                this.Eh_LipR = defaultOn;
                this.FV_LipTh = defaultOn;
                this.I = defaultOn;
                this.K = defaultOn;
                this.N = defaultOn;
                this.Oh = defaultOn;
                this.OohQ = defaultOn;
                this.R = defaultOn;
                this.TH = defaultOn;
                this.W = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Aah_LipBigAah, null));
                ret.Add((BigAah_LipDST, null));
                ret.Add((BMP_LipEee, null));
                ret.Add((ChJsh_LipFV, null));
                ret.Add((DST_LipK, null));
                ret.Add((Eee_LipL, null));
                ret.Add((Eh_LipR, null));
                ret.Add((FV_LipTh, null));
                ret.Add((I, null));
                ret.Add((K, null));
                ret.Add((N, null));
                ret.Add((Oh, null));
                ret.Add((OohQ, null));
                ret.Add((R, null));
                ret.Add((TH, null));
                ret.Add((W, null));
            }
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PhonemeTargetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PhonemeTargetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static PhonemeTarget CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static PhonemeTarget CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PhonemeTarget();
            ((PhonemeTargetSetterCommon)((IPhonemeTargetGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPhonemeTargetGetter)rhs, include);

        void IClearable.Clear()
        {
            ((PhonemeTargetSetterCommon)((IPhonemeTargetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PhonemeTarget GetNew()
        {
            return new PhonemeTarget();
        }

    }
    #endregion

    #region Interface
    public partial interface IPhonemeTarget :
        IPhonemeTargetGetter,
        ILoquiObjectSetter<IPhonemeTarget>
    {
        new Single Aah_LipBigAah { get; set; }
        new Single BigAah_LipDST { get; set; }
        new Single BMP_LipEee { get; set; }
        new Single ChJsh_LipFV { get; set; }
        new Single DST_LipK { get; set; }
        new Single Eee_LipL { get; set; }
        new Single Eh_LipR { get; set; }
        new Single FV_LipTh { get; set; }
        new Single I { get; set; }
        new Single K { get; set; }
        new Single N { get; set; }
        new Single Oh { get; set; }
        new Single OohQ { get; set; }
        new Single R { get; set; }
        new Single TH { get; set; }
        new Single W { get; set; }
    }

    public partial interface IPhonemeTargetGetter :
        ILoquiObject,
        ILoquiObject<IPhonemeTargetGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        Single Aah_LipBigAah { get; }
        Single BigAah_LipDST { get; }
        Single BMP_LipEee { get; }
        Single ChJsh_LipFV { get; }
        Single DST_LipK { get; }
        Single Eee_LipL { get; }
        Single Eh_LipR { get; }
        Single FV_LipTh { get; }
        Single I { get; }
        Single K { get; }
        Single N { get; }
        Single Oh { get; }
        Single OohQ { get; }
        Single R { get; }
        Single TH { get; }
        Single W { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PhonemeTargetMixIn
    {
        public static void Clear(this IPhonemeTarget item)
        {
            ((PhonemeTargetSetterCommon)((IPhonemeTargetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PhonemeTarget.Mask<bool> GetEqualsMask(
            this IPhonemeTargetGetter item,
            IPhonemeTargetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PhonemeTargetCommon)((IPhonemeTargetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPhonemeTargetGetter item,
            string? name = null,
            PhonemeTarget.Mask<bool>? printMask = null)
        {
            return ((PhonemeTargetCommon)((IPhonemeTargetGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPhonemeTargetGetter item,
            FileGeneration fg,
            string? name = null,
            PhonemeTarget.Mask<bool>? printMask = null)
        {
            ((PhonemeTargetCommon)((IPhonemeTargetGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPhonemeTargetGetter item,
            PhonemeTarget.Mask<bool?> checkMask)
        {
            return ((PhonemeTargetCommon)((IPhonemeTargetGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static PhonemeTarget.Mask<bool> GetHasBeenSetMask(this IPhonemeTargetGetter item)
        {
            var ret = new PhonemeTarget.Mask<bool>(false);
            ((PhonemeTargetCommon)((IPhonemeTargetGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPhonemeTargetGetter item,
            IPhonemeTargetGetter rhs)
        {
            return ((PhonemeTargetCommon)((IPhonemeTargetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPhonemeTarget lhs,
            IPhonemeTargetGetter rhs,
            PhonemeTarget.TranslationMask? copyMask = null)
        {
            ((PhonemeTargetSetterTranslationCommon)((IPhonemeTargetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IPhonemeTarget lhs,
            IPhonemeTargetGetter rhs,
            out PhonemeTarget.ErrorMask errorMask,
            PhonemeTarget.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PhonemeTargetSetterTranslationCommon)((IPhonemeTargetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = PhonemeTarget.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPhonemeTarget lhs,
            IPhonemeTargetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PhonemeTargetSetterTranslationCommon)((IPhonemeTargetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static PhonemeTarget DeepCopy(
            this IPhonemeTargetGetter item,
            PhonemeTarget.TranslationMask? copyMask = null)
        {
            return ((PhonemeTargetSetterTranslationCommon)((IPhonemeTargetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PhonemeTarget DeepCopy(
            this IPhonemeTargetGetter item,
            out PhonemeTarget.ErrorMask errorMask,
            PhonemeTarget.TranslationMask? copyMask = null)
        {
            return ((PhonemeTargetSetterTranslationCommon)((IPhonemeTargetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PhonemeTarget DeepCopy(
            this IPhonemeTargetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PhonemeTargetSetterTranslationCommon)((IPhonemeTargetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPhonemeTarget item,
            XElement node,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPhonemeTarget item,
            XElement node,
            out PhonemeTarget.ErrorMask errorMask,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PhonemeTarget.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IPhonemeTarget item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((PhonemeTargetSetterCommon)((IPhonemeTargetGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPhonemeTarget item,
            string path,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPhonemeTarget item,
            string path,
            out PhonemeTarget.ErrorMask errorMask,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPhonemeTarget item,
            string path,
            ErrorMaskBuilder? errorMask,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IPhonemeTarget item,
            Stream stream,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPhonemeTarget item,
            Stream stream,
            out PhonemeTarget.ErrorMask errorMask,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPhonemeTarget item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IPhonemeTarget item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IPhonemeTarget item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PhonemeTargetSetterCommon)((IPhonemeTargetGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum PhonemeTarget_FieldIndex
    {
        Aah_LipBigAah = 0,
        BigAah_LipDST = 1,
        BMP_LipEee = 2,
        ChJsh_LipFV = 3,
        DST_LipK = 4,
        Eee_LipL = 5,
        Eh_LipR = 6,
        FV_LipTh = 7,
        I = 8,
        K = 9,
        N = 10,
        Oh = 11,
        OohQ = 12,
        R = 13,
        TH = 14,
        W = 15,
    }
    #endregion

    #region Registration
    public partial class PhonemeTarget_Registration : ILoquiRegistration
    {
        public static readonly PhonemeTarget_Registration Instance = new PhonemeTarget_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 71,
            version: 0);

        public const string GUID = "de2d7619-85dc-497e-b8a2-b955f9340a93";

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(PhonemeTarget.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PhonemeTarget.ErrorMask);

        public static readonly Type ClassType = typeof(PhonemeTarget);

        public static readonly Type GetterType = typeof(IPhonemeTargetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPhonemeTarget);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.PhonemeTarget";

        public const string Name = "PhonemeTarget";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "AAH_LIPBIGAAH":
                    return (ushort)PhonemeTarget_FieldIndex.Aah_LipBigAah;
                case "BIGAAH_LIPDST":
                    return (ushort)PhonemeTarget_FieldIndex.BigAah_LipDST;
                case "BMP_LIPEEE":
                    return (ushort)PhonemeTarget_FieldIndex.BMP_LipEee;
                case "CHJSH_LIPFV":
                    return (ushort)PhonemeTarget_FieldIndex.ChJsh_LipFV;
                case "DST_LIPK":
                    return (ushort)PhonemeTarget_FieldIndex.DST_LipK;
                case "EEE_LIPL":
                    return (ushort)PhonemeTarget_FieldIndex.Eee_LipL;
                case "EH_LIPR":
                    return (ushort)PhonemeTarget_FieldIndex.Eh_LipR;
                case "FV_LIPTH":
                    return (ushort)PhonemeTarget_FieldIndex.FV_LipTh;
                case "I":
                    return (ushort)PhonemeTarget_FieldIndex.I;
                case "K":
                    return (ushort)PhonemeTarget_FieldIndex.K;
                case "N":
                    return (ushort)PhonemeTarget_FieldIndex.N;
                case "OH":
                    return (ushort)PhonemeTarget_FieldIndex.Oh;
                case "OOHQ":
                    return (ushort)PhonemeTarget_FieldIndex.OohQ;
                case "R":
                    return (ushort)PhonemeTarget_FieldIndex.R;
                case "TH":
                    return (ushort)PhonemeTarget_FieldIndex.TH;
                case "W":
                    return (ushort)PhonemeTarget_FieldIndex.W;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PhonemeTarget_FieldIndex enu = (PhonemeTarget_FieldIndex)index;
            switch (enu)
            {
                case PhonemeTarget_FieldIndex.Aah_LipBigAah:
                case PhonemeTarget_FieldIndex.BigAah_LipDST:
                case PhonemeTarget_FieldIndex.BMP_LipEee:
                case PhonemeTarget_FieldIndex.ChJsh_LipFV:
                case PhonemeTarget_FieldIndex.DST_LipK:
                case PhonemeTarget_FieldIndex.Eee_LipL:
                case PhonemeTarget_FieldIndex.Eh_LipR:
                case PhonemeTarget_FieldIndex.FV_LipTh:
                case PhonemeTarget_FieldIndex.I:
                case PhonemeTarget_FieldIndex.K:
                case PhonemeTarget_FieldIndex.N:
                case PhonemeTarget_FieldIndex.Oh:
                case PhonemeTarget_FieldIndex.OohQ:
                case PhonemeTarget_FieldIndex.R:
                case PhonemeTarget_FieldIndex.TH:
                case PhonemeTarget_FieldIndex.W:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PhonemeTarget_FieldIndex enu = (PhonemeTarget_FieldIndex)index;
            switch (enu)
            {
                case PhonemeTarget_FieldIndex.Aah_LipBigAah:
                case PhonemeTarget_FieldIndex.BigAah_LipDST:
                case PhonemeTarget_FieldIndex.BMP_LipEee:
                case PhonemeTarget_FieldIndex.ChJsh_LipFV:
                case PhonemeTarget_FieldIndex.DST_LipK:
                case PhonemeTarget_FieldIndex.Eee_LipL:
                case PhonemeTarget_FieldIndex.Eh_LipR:
                case PhonemeTarget_FieldIndex.FV_LipTh:
                case PhonemeTarget_FieldIndex.I:
                case PhonemeTarget_FieldIndex.K:
                case PhonemeTarget_FieldIndex.N:
                case PhonemeTarget_FieldIndex.Oh:
                case PhonemeTarget_FieldIndex.OohQ:
                case PhonemeTarget_FieldIndex.R:
                case PhonemeTarget_FieldIndex.TH:
                case PhonemeTarget_FieldIndex.W:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PhonemeTarget_FieldIndex enu = (PhonemeTarget_FieldIndex)index;
            switch (enu)
            {
                case PhonemeTarget_FieldIndex.Aah_LipBigAah:
                case PhonemeTarget_FieldIndex.BigAah_LipDST:
                case PhonemeTarget_FieldIndex.BMP_LipEee:
                case PhonemeTarget_FieldIndex.ChJsh_LipFV:
                case PhonemeTarget_FieldIndex.DST_LipK:
                case PhonemeTarget_FieldIndex.Eee_LipL:
                case PhonemeTarget_FieldIndex.Eh_LipR:
                case PhonemeTarget_FieldIndex.FV_LipTh:
                case PhonemeTarget_FieldIndex.I:
                case PhonemeTarget_FieldIndex.K:
                case PhonemeTarget_FieldIndex.N:
                case PhonemeTarget_FieldIndex.Oh:
                case PhonemeTarget_FieldIndex.OohQ:
                case PhonemeTarget_FieldIndex.R:
                case PhonemeTarget_FieldIndex.TH:
                case PhonemeTarget_FieldIndex.W:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            PhonemeTarget_FieldIndex enu = (PhonemeTarget_FieldIndex)index;
            switch (enu)
            {
                case PhonemeTarget_FieldIndex.Aah_LipBigAah:
                    return "Aah_LipBigAah";
                case PhonemeTarget_FieldIndex.BigAah_LipDST:
                    return "BigAah_LipDST";
                case PhonemeTarget_FieldIndex.BMP_LipEee:
                    return "BMP_LipEee";
                case PhonemeTarget_FieldIndex.ChJsh_LipFV:
                    return "ChJsh_LipFV";
                case PhonemeTarget_FieldIndex.DST_LipK:
                    return "DST_LipK";
                case PhonemeTarget_FieldIndex.Eee_LipL:
                    return "Eee_LipL";
                case PhonemeTarget_FieldIndex.Eh_LipR:
                    return "Eh_LipR";
                case PhonemeTarget_FieldIndex.FV_LipTh:
                    return "FV_LipTh";
                case PhonemeTarget_FieldIndex.I:
                    return "I";
                case PhonemeTarget_FieldIndex.K:
                    return "K";
                case PhonemeTarget_FieldIndex.N:
                    return "N";
                case PhonemeTarget_FieldIndex.Oh:
                    return "Oh";
                case PhonemeTarget_FieldIndex.OohQ:
                    return "OohQ";
                case PhonemeTarget_FieldIndex.R:
                    return "R";
                case PhonemeTarget_FieldIndex.TH:
                    return "TH";
                case PhonemeTarget_FieldIndex.W:
                    return "W";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PhonemeTarget_FieldIndex enu = (PhonemeTarget_FieldIndex)index;
            switch (enu)
            {
                case PhonemeTarget_FieldIndex.Aah_LipBigAah:
                case PhonemeTarget_FieldIndex.BigAah_LipDST:
                case PhonemeTarget_FieldIndex.BMP_LipEee:
                case PhonemeTarget_FieldIndex.ChJsh_LipFV:
                case PhonemeTarget_FieldIndex.DST_LipK:
                case PhonemeTarget_FieldIndex.Eee_LipL:
                case PhonemeTarget_FieldIndex.Eh_LipR:
                case PhonemeTarget_FieldIndex.FV_LipTh:
                case PhonemeTarget_FieldIndex.I:
                case PhonemeTarget_FieldIndex.K:
                case PhonemeTarget_FieldIndex.N:
                case PhonemeTarget_FieldIndex.Oh:
                case PhonemeTarget_FieldIndex.OohQ:
                case PhonemeTarget_FieldIndex.R:
                case PhonemeTarget_FieldIndex.TH:
                case PhonemeTarget_FieldIndex.W:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            PhonemeTarget_FieldIndex enu = (PhonemeTarget_FieldIndex)index;
            switch (enu)
            {
                case PhonemeTarget_FieldIndex.Aah_LipBigAah:
                case PhonemeTarget_FieldIndex.BigAah_LipDST:
                case PhonemeTarget_FieldIndex.BMP_LipEee:
                case PhonemeTarget_FieldIndex.ChJsh_LipFV:
                case PhonemeTarget_FieldIndex.DST_LipK:
                case PhonemeTarget_FieldIndex.Eee_LipL:
                case PhonemeTarget_FieldIndex.Eh_LipR:
                case PhonemeTarget_FieldIndex.FV_LipTh:
                case PhonemeTarget_FieldIndex.I:
                case PhonemeTarget_FieldIndex.K:
                case PhonemeTarget_FieldIndex.N:
                case PhonemeTarget_FieldIndex.Oh:
                case PhonemeTarget_FieldIndex.OohQ:
                case PhonemeTarget_FieldIndex.R:
                case PhonemeTarget_FieldIndex.TH:
                case PhonemeTarget_FieldIndex.W:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            PhonemeTarget_FieldIndex enu = (PhonemeTarget_FieldIndex)index;
            switch (enu)
            {
                case PhonemeTarget_FieldIndex.Aah_LipBigAah:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.BigAah_LipDST:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.BMP_LipEee:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.ChJsh_LipFV:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.DST_LipK:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.Eee_LipL:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.Eh_LipR:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.FV_LipTh:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.I:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.K:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.N:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.Oh:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.OohQ:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.R:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.TH:
                    return typeof(Single);
                case PhonemeTarget_FieldIndex.W:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PhonemeTargetXmlWriteTranslation);
        public const int NumStructFields = 16;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(PhonemeTargetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PhonemeTargetSetterCommon
    {
        public static readonly PhonemeTargetSetterCommon Instance = new PhonemeTargetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPhonemeTarget item)
        {
            ClearPartial();
            item.Aah_LipBigAah = default;
            item.BigAah_LipDST = default;
            item.BMP_LipEee = default;
            item.ChJsh_LipFV = default;
            item.DST_LipK = default;
            item.Eee_LipL = default;
            item.Eh_LipR = default;
            item.FV_LipTh = default;
            item.I = default;
            item.K = default;
            item.N = default;
            item.Oh = default;
            item.OohQ = default;
            item.R = default;
            item.TH = default;
            item.W = default;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IPhonemeTarget item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PhonemeTargetXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IPhonemeTarget item,
            MutagenFrame frame)
        {
            item.Aah_LipBigAah = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BigAah_LipDST = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BMP_LipEee = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ChJsh_LipFV = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.DST_LipK = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Eee_LipL = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Eh_LipR = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FV_LipTh = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.I = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.K = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.N = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Oh = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.OohQ = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.R = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.TH = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.W = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }
        
        public void CopyInFromBinary(
            IPhonemeTarget item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class PhonemeTargetCommon
    {
        public static readonly PhonemeTargetCommon Instance = new PhonemeTargetCommon();

        public PhonemeTarget.Mask<bool> GetEqualsMask(
            IPhonemeTargetGetter item,
            IPhonemeTargetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PhonemeTarget.Mask<bool>(false);
            ((PhonemeTargetCommon)((IPhonemeTargetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPhonemeTargetGetter item,
            IPhonemeTargetGetter rhs,
            PhonemeTarget.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Aah_LipBigAah = item.Aah_LipBigAah.EqualsWithin(rhs.Aah_LipBigAah);
            ret.BigAah_LipDST = item.BigAah_LipDST.EqualsWithin(rhs.BigAah_LipDST);
            ret.BMP_LipEee = item.BMP_LipEee.EqualsWithin(rhs.BMP_LipEee);
            ret.ChJsh_LipFV = item.ChJsh_LipFV.EqualsWithin(rhs.ChJsh_LipFV);
            ret.DST_LipK = item.DST_LipK.EqualsWithin(rhs.DST_LipK);
            ret.Eee_LipL = item.Eee_LipL.EqualsWithin(rhs.Eee_LipL);
            ret.Eh_LipR = item.Eh_LipR.EqualsWithin(rhs.Eh_LipR);
            ret.FV_LipTh = item.FV_LipTh.EqualsWithin(rhs.FV_LipTh);
            ret.I = item.I.EqualsWithin(rhs.I);
            ret.K = item.K.EqualsWithin(rhs.K);
            ret.N = item.N.EqualsWithin(rhs.N);
            ret.Oh = item.Oh.EqualsWithin(rhs.Oh);
            ret.OohQ = item.OohQ.EqualsWithin(rhs.OohQ);
            ret.R = item.R.EqualsWithin(rhs.R);
            ret.TH = item.TH.EqualsWithin(rhs.TH);
            ret.W = item.W.EqualsWithin(rhs.W);
        }
        
        public string ToString(
            IPhonemeTargetGetter item,
            string? name = null,
            PhonemeTarget.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPhonemeTargetGetter item,
            FileGeneration fg,
            string? name = null,
            PhonemeTarget.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PhonemeTarget =>");
            }
            else
            {
                fg.AppendLine($"{name} (PhonemeTarget) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPhonemeTargetGetter item,
            FileGeneration fg,
            PhonemeTarget.Mask<bool>? printMask = null)
        {
            if (printMask?.Aah_LipBigAah ?? true)
            {
                fg.AppendItem(item.Aah_LipBigAah, "Aah_LipBigAah");
            }
            if (printMask?.BigAah_LipDST ?? true)
            {
                fg.AppendItem(item.BigAah_LipDST, "BigAah_LipDST");
            }
            if (printMask?.BMP_LipEee ?? true)
            {
                fg.AppendItem(item.BMP_LipEee, "BMP_LipEee");
            }
            if (printMask?.ChJsh_LipFV ?? true)
            {
                fg.AppendItem(item.ChJsh_LipFV, "ChJsh_LipFV");
            }
            if (printMask?.DST_LipK ?? true)
            {
                fg.AppendItem(item.DST_LipK, "DST_LipK");
            }
            if (printMask?.Eee_LipL ?? true)
            {
                fg.AppendItem(item.Eee_LipL, "Eee_LipL");
            }
            if (printMask?.Eh_LipR ?? true)
            {
                fg.AppendItem(item.Eh_LipR, "Eh_LipR");
            }
            if (printMask?.FV_LipTh ?? true)
            {
                fg.AppendItem(item.FV_LipTh, "FV_LipTh");
            }
            if (printMask?.I ?? true)
            {
                fg.AppendItem(item.I, "I");
            }
            if (printMask?.K ?? true)
            {
                fg.AppendItem(item.K, "K");
            }
            if (printMask?.N ?? true)
            {
                fg.AppendItem(item.N, "N");
            }
            if (printMask?.Oh ?? true)
            {
                fg.AppendItem(item.Oh, "Oh");
            }
            if (printMask?.OohQ ?? true)
            {
                fg.AppendItem(item.OohQ, "OohQ");
            }
            if (printMask?.R ?? true)
            {
                fg.AppendItem(item.R, "R");
            }
            if (printMask?.TH ?? true)
            {
                fg.AppendItem(item.TH, "TH");
            }
            if (printMask?.W ?? true)
            {
                fg.AppendItem(item.W, "W");
            }
        }
        
        public bool HasBeenSet(
            IPhonemeTargetGetter item,
            PhonemeTarget.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IPhonemeTargetGetter item,
            PhonemeTarget.Mask<bool> mask)
        {
            mask.Aah_LipBigAah = true;
            mask.BigAah_LipDST = true;
            mask.BMP_LipEee = true;
            mask.ChJsh_LipFV = true;
            mask.DST_LipK = true;
            mask.Eee_LipL = true;
            mask.Eh_LipR = true;
            mask.FV_LipTh = true;
            mask.I = true;
            mask.K = true;
            mask.N = true;
            mask.Oh = true;
            mask.OohQ = true;
            mask.R = true;
            mask.TH = true;
            mask.W = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPhonemeTargetGetter? lhs,
            IPhonemeTargetGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Aah_LipBigAah.EqualsWithin(rhs.Aah_LipBigAah)) return false;
            if (!lhs.BigAah_LipDST.EqualsWithin(rhs.BigAah_LipDST)) return false;
            if (!lhs.BMP_LipEee.EqualsWithin(rhs.BMP_LipEee)) return false;
            if (!lhs.ChJsh_LipFV.EqualsWithin(rhs.ChJsh_LipFV)) return false;
            if (!lhs.DST_LipK.EqualsWithin(rhs.DST_LipK)) return false;
            if (!lhs.Eee_LipL.EqualsWithin(rhs.Eee_LipL)) return false;
            if (!lhs.Eh_LipR.EqualsWithin(rhs.Eh_LipR)) return false;
            if (!lhs.FV_LipTh.EqualsWithin(rhs.FV_LipTh)) return false;
            if (!lhs.I.EqualsWithin(rhs.I)) return false;
            if (!lhs.K.EqualsWithin(rhs.K)) return false;
            if (!lhs.N.EqualsWithin(rhs.N)) return false;
            if (!lhs.Oh.EqualsWithin(rhs.Oh)) return false;
            if (!lhs.OohQ.EqualsWithin(rhs.OohQ)) return false;
            if (!lhs.R.EqualsWithin(rhs.R)) return false;
            if (!lhs.TH.EqualsWithin(rhs.TH)) return false;
            if (!lhs.W.EqualsWithin(rhs.W)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IPhonemeTargetGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Aah_LipBigAah).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BigAah_LipDST).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BMP_LipEee).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ChJsh_LipFV).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DST_LipK).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Eee_LipL).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Eh_LipR).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FV_LipTh).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.I).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.K).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Oh).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.OohQ).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.R).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TH).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.W).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PhonemeTarget.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IPhonemeTargetGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class PhonemeTargetSetterTranslationCommon
    {
        public static readonly PhonemeTargetSetterTranslationCommon Instance = new PhonemeTargetSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IPhonemeTarget item,
            IPhonemeTargetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.Aah_LipBigAah) ?? true))
            {
                item.Aah_LipBigAah = rhs.Aah_LipBigAah;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.BigAah_LipDST) ?? true))
            {
                item.BigAah_LipDST = rhs.BigAah_LipDST;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.BMP_LipEee) ?? true))
            {
                item.BMP_LipEee = rhs.BMP_LipEee;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.ChJsh_LipFV) ?? true))
            {
                item.ChJsh_LipFV = rhs.ChJsh_LipFV;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.DST_LipK) ?? true))
            {
                item.DST_LipK = rhs.DST_LipK;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.Eee_LipL) ?? true))
            {
                item.Eee_LipL = rhs.Eee_LipL;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.Eh_LipR) ?? true))
            {
                item.Eh_LipR = rhs.Eh_LipR;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.FV_LipTh) ?? true))
            {
                item.FV_LipTh = rhs.FV_LipTh;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.I) ?? true))
            {
                item.I = rhs.I;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.K) ?? true))
            {
                item.K = rhs.K;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.N) ?? true))
            {
                item.N = rhs.N;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.Oh) ?? true))
            {
                item.Oh = rhs.Oh;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.OohQ) ?? true))
            {
                item.OohQ = rhs.OohQ;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.R) ?? true))
            {
                item.R = rhs.R;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.TH) ?? true))
            {
                item.TH = rhs.TH;
            }
            if ((copyMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.W) ?? true))
            {
                item.W = rhs.W;
            }
        }
        
        #endregion
        
        public PhonemeTarget DeepCopy(
            IPhonemeTargetGetter item,
            PhonemeTarget.TranslationMask? copyMask = null)
        {
            PhonemeTarget ret = (PhonemeTarget)((PhonemeTargetCommon)((IPhonemeTargetGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public PhonemeTarget DeepCopy(
            IPhonemeTargetGetter item,
            out PhonemeTarget.ErrorMask errorMask,
            PhonemeTarget.TranslationMask? copyMask = null)
        {
            PhonemeTarget ret = (PhonemeTarget)((PhonemeTargetCommon)((IPhonemeTargetGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public PhonemeTarget DeepCopy(
            IPhonemeTargetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PhonemeTarget ret = (PhonemeTarget)((PhonemeTargetCommon)((IPhonemeTargetGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class PhonemeTarget
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PhonemeTarget_Registration.Instance;
        public static PhonemeTarget_Registration Registration => PhonemeTarget_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PhonemeTargetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PhonemeTargetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PhonemeTargetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPhonemeTargetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPhonemeTargetGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPhonemeTargetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PhonemeTargetXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static PhonemeTargetXmlWriteTranslation Instance = new PhonemeTargetXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPhonemeTargetGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.Aah_LipBigAah) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Aah_LipBigAah),
                    item: item.Aah_LipBigAah,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.Aah_LipBigAah,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.BigAah_LipDST) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BigAah_LipDST),
                    item: item.BigAah_LipDST,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.BigAah_LipDST,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.BMP_LipEee) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BMP_LipEee),
                    item: item.BMP_LipEee,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.BMP_LipEee,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.ChJsh_LipFV) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ChJsh_LipFV),
                    item: item.ChJsh_LipFV,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.ChJsh_LipFV,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.DST_LipK) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DST_LipK),
                    item: item.DST_LipK,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.DST_LipK,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.Eee_LipL) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Eee_LipL),
                    item: item.Eee_LipL,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.Eee_LipL,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.Eh_LipR) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Eh_LipR),
                    item: item.Eh_LipR,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.Eh_LipR,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.FV_LipTh) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FV_LipTh),
                    item: item.FV_LipTh,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.FV_LipTh,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.I) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.I),
                    item: item.I,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.I,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.K) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.K),
                    item: item.K,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.K,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.N) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.N),
                    item: item.N,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.N,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.Oh) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Oh),
                    item: item.Oh,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.Oh,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.OohQ) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.OohQ),
                    item: item.OohQ,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.OohQ,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.R) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.R),
                    item: item.R,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.R,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.TH) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TH),
                    item: item.TH,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.TH,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PhonemeTarget_FieldIndex.W) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.W),
                    item: item.W,
                    fieldIndex: (int)PhonemeTarget_FieldIndex.W,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IPhonemeTargetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.PhonemeTarget");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.PhonemeTarget");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPhonemeTargetGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IPhonemeTargetGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IPhonemeTargetGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class PhonemeTargetXmlCreateTranslation
    {
        public readonly static PhonemeTargetXmlCreateTranslation Instance = new PhonemeTargetXmlCreateTranslation();

        public static void FillPublicXml(
            IPhonemeTarget item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PhonemeTargetXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPhonemeTarget item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Aah_LipBigAah":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.Aah_LipBigAah);
                    try
                    {
                        item.Aah_LipBigAah = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BigAah_LipDST":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.BigAah_LipDST);
                    try
                    {
                        item.BigAah_LipDST = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BMP_LipEee":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.BMP_LipEee);
                    try
                    {
                        item.BMP_LipEee = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ChJsh_LipFV":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.ChJsh_LipFV);
                    try
                    {
                        item.ChJsh_LipFV = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DST_LipK":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.DST_LipK);
                    try
                    {
                        item.DST_LipK = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eee_LipL":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.Eee_LipL);
                    try
                    {
                        item.Eee_LipL = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eh_LipR":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.Eh_LipR);
                    try
                    {
                        item.Eh_LipR = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FV_LipTh":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.FV_LipTh);
                    try
                    {
                        item.FV_LipTh = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "I":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.I);
                    try
                    {
                        item.I = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "K":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.K);
                    try
                    {
                        item.K = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "N":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.N);
                    try
                    {
                        item.N = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Oh":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.Oh);
                    try
                    {
                        item.Oh = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OohQ":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.OohQ);
                    try
                    {
                        item.OohQ = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "R":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.R);
                    try
                    {
                        item.R = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TH":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.TH);
                    try
                    {
                        item.TH = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "W":
                    errorMask?.PushIndex((int)PhonemeTarget_FieldIndex.W);
                    try
                    {
                        item.W = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class PhonemeTargetXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPhonemeTargetGetter item,
            XElement node,
            out PhonemeTarget.ErrorMask errorMask,
            PhonemeTarget.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((PhonemeTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PhonemeTarget.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPhonemeTargetGetter item,
            string path,
            out PhonemeTarget.ErrorMask errorMask,
            PhonemeTarget.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPhonemeTargetGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPhonemeTargetGetter item,
            Stream stream,
            out PhonemeTarget.ErrorMask errorMask,
            PhonemeTarget.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPhonemeTargetGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPhonemeTargetGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((PhonemeTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IPhonemeTargetGetter item,
            XElement node,
            string? name = null,
            PhonemeTarget.TranslationMask? translationMask = null)
        {
            ((PhonemeTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IPhonemeTargetGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((PhonemeTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPhonemeTargetGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((PhonemeTargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PhonemeTargetBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static PhonemeTargetBinaryWriteTranslation Instance = new PhonemeTargetBinaryWriteTranslation();

        public static void WriteEmbedded(
            IPhonemeTargetGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Aah_LipBigAah);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BigAah_LipDST);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BMP_LipEee);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ChJsh_LipFV);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DST_LipK);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Eee_LipL);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Eh_LipR);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FV_LipTh);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.I);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.K);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.N);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Oh);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.OohQ);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.R);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TH);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.W);
        }

        public void Write(
            MutagenWriter writer,
            IPhonemeTargetGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPhonemeTargetGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PhonemeTargetBinaryCreateTranslation
    {
        public readonly static PhonemeTargetBinaryCreateTranslation Instance = new PhonemeTargetBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class PhonemeTargetBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPhonemeTargetGetter item,
            MutagenWriter writer)
        {
            ((PhonemeTargetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class PhonemeTargetBinaryOverlay :
        BinaryOverlay,
        IPhonemeTargetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PhonemeTarget_Registration.Instance;
        public static PhonemeTarget_Registration Registration => PhonemeTarget_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PhonemeTargetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PhonemeTargetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPhonemeTargetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPhonemeTargetGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPhonemeTargetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPhonemeTargetGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => PhonemeTargetXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PhonemeTargetXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PhonemeTargetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PhonemeTargetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        public Single Aah_LipBigAah => SpanExt.GetFloat(_data.Span.Slice(0, 4));
        public Single BigAah_LipDST => SpanExt.GetFloat(_data.Span.Slice(4, 4));
        public Single BMP_LipEee => SpanExt.GetFloat(_data.Span.Slice(8, 4));
        public Single ChJsh_LipFV => SpanExt.GetFloat(_data.Span.Slice(12, 4));
        public Single DST_LipK => SpanExt.GetFloat(_data.Span.Slice(16, 4));
        public Single Eee_LipL => SpanExt.GetFloat(_data.Span.Slice(20, 4));
        public Single Eh_LipR => SpanExt.GetFloat(_data.Span.Slice(24, 4));
        public Single FV_LipTh => SpanExt.GetFloat(_data.Span.Slice(28, 4));
        public Single I => SpanExt.GetFloat(_data.Span.Slice(32, 4));
        public Single K => SpanExt.GetFloat(_data.Span.Slice(36, 4));
        public Single N => SpanExt.GetFloat(_data.Span.Slice(40, 4));
        public Single Oh => SpanExt.GetFloat(_data.Span.Slice(44, 4));
        public Single OohQ => SpanExt.GetFloat(_data.Span.Slice(48, 4));
        public Single R => SpanExt.GetFloat(_data.Span.Slice(52, 4));
        public Single TH => SpanExt.GetFloat(_data.Span.Slice(56, 4));
        public Single W => SpanExt.GetFloat(_data.Span.Slice(60, 4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected PhonemeTargetBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static PhonemeTargetBinaryOverlay PhonemeTargetFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PhonemeTargetBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 64),
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

