/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Projectile :
        SkyrimMajorRecord,
        IProjectileInternal,
        ILoquiObjectSetter<Projectile>,
        IEquatable<Projectile>,
        IEqualsMask
    {
        #region Ctor
        protected Projectile()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IProjectileGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Name
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString? IProjectileGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IProjectileGetter.Model => this.Model;
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IProjectileGetter.Destructible => this.Destructible;
        #endregion
        #region Flags
        public Projectile.Flag Flags { get; set; } = default;
        #endregion
        #region Type
        public Projectile.TypeEnum Type { get; set; } = default;
        #endregion
        #region Gravity
        public Single Gravity { get; set; } = default;
        #endregion
        #region Speed
        public Single Speed { get; set; } = default;
        #endregion
        #region Range
        public Single Range { get; set; } = default;
        #endregion
        #region Light
        public FormLink<Light> Light { get; set; } = new FormLink<Light>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<ILightGetter> IProjectileGetter.Light => this.Light;
        #endregion
        #region MuzzleFlash
        public FormLink<Light> MuzzleFlash { get; set; } = new FormLink<Light>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<ILightGetter> IProjectileGetter.MuzzleFlash => this.MuzzleFlash;
        #endregion
        #region TracerChance
        public Single TracerChance { get; set; } = default;
        #endregion
        #region ExplosionAltTriggerProximity
        public Single ExplosionAltTriggerProximity { get; set; } = default;
        #endregion
        #region ExplosionAltTriggerTimer
        public Single ExplosionAltTriggerTimer { get; set; } = default;
        #endregion
        #region Explosion
        public FormLink<Explosion> Explosion { get; set; } = new FormLink<Explosion>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<IExplosionGetter> IProjectileGetter.Explosion => this.Explosion;
        #endregion
        #region Sound
        public FormLink<SoundDescriptor> Sound { get; set; } = new FormLink<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<ISoundDescriptorGetter> IProjectileGetter.Sound => this.Sound;
        #endregion
        #region MuzzleFlashDuration
        public Single MuzzleFlashDuration { get; set; } = default;
        #endregion
        #region FadeDuration
        public Single FadeDuration { get; set; } = default;
        #endregion
        #region ImpactForce
        public Single ImpactForce { get; set; } = default;
        #endregion
        #region CountdownSound
        public FormLink<SoundDescriptor> CountdownSound { get; set; } = new FormLink<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<ISoundDescriptorGetter> IProjectileGetter.CountdownSound => this.CountdownSound;
        #endregion
        #region DisaleSound
        public FormLink<SoundDescriptor> DisaleSound { get; set; } = new FormLink<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<ISoundDescriptorGetter> IProjectileGetter.DisaleSound => this.DisaleSound;
        #endregion
        #region DefaultWeaponSource
        public FormLink<Weapon> DefaultWeaponSource { get; set; } = new FormLink<Weapon>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<IWeaponGetter> IProjectileGetter.DefaultWeaponSource => this.DefaultWeaponSource;
        #endregion
        #region ConeSpread
        public Single ConeSpread { get; set; } = default;
        #endregion
        #region CollisionRadius
        public Single CollisionRadius { get; set; } = default;
        #endregion
        #region Lifetime
        public Single Lifetime { get; set; } = default;
        #endregion
        #region RelaunchInterval
        public Single RelaunchInterval { get; set; } = default;
        #endregion
        #region DecalData
        public FormLink<TextureSet> DecalData { get; set; } = new FormLink<TextureSet>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<ITextureSetGetter> IProjectileGetter.DecalData => this.DecalData;
        #endregion
        #region CollisionLayer
        public FormLink<CollisionLayer> CollisionLayer { get; set; } = new FormLink<CollisionLayer>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<ICollisionLayerGetter> IProjectileGetter.CollisionLayer => this.CollisionLayer;
        #endregion
        #region MuzzleFlashModel
        public String MuzzleFlashModel { get; set; } = string.Empty;
        #endregion
        #region TextureFilesHashes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TextureFilesHashes;
        public MemorySlice<Byte>? TextureFilesHashes
        {
            get => this._TextureFilesHashes;
            set => this._TextureFilesHashes = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IProjectileGetter.TextureFilesHashes => this.TextureFilesHashes;
        #endregion
        #region SoundLevel
        public UInt32 SoundLevel { get; set; } = default;
        #endregion
        #region DATADataTypeState
        public Projectile.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ProjectileMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IProjectileGetter rhs)) return false;
            return ((ProjectileCommon)((IProjectileGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Projectile obj)
        {
            return ((ProjectileCommon)((IProjectileGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ProjectileCommon)((IProjectileGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ProjectileXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ProjectileXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Projectile CreateFromXml(
            XElement node,
            Projectile.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Projectile CreateFromXml(
            XElement node,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Projectile.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Projectile CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Projectile();
            ((ProjectileSetterCommon)((IProjectileGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Projectile CreateFromXml(
            string path,
            Projectile.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Projectile CreateFromXml(
            string path,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Projectile CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Projectile.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Projectile CreateFromXml(
            Stream stream,
            Projectile.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Projectile CreateFromXml(
            Stream stream,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Projectile CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Projectile.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.Type = initialValue;
                this.Gravity = initialValue;
                this.Speed = initialValue;
                this.Range = initialValue;
                this.Light = initialValue;
                this.MuzzleFlash = initialValue;
                this.TracerChance = initialValue;
                this.ExplosionAltTriggerProximity = initialValue;
                this.ExplosionAltTriggerTimer = initialValue;
                this.Explosion = initialValue;
                this.Sound = initialValue;
                this.MuzzleFlashDuration = initialValue;
                this.FadeDuration = initialValue;
                this.ImpactForce = initialValue;
                this.CountdownSound = initialValue;
                this.DisaleSound = initialValue;
                this.DefaultWeaponSource = initialValue;
                this.ConeSpread = initialValue;
                this.CollisionRadius = initialValue;
                this.Lifetime = initialValue;
                this.RelaunchInterval = initialValue;
                this.DecalData = initialValue;
                this.CollisionLayer = initialValue;
                this.MuzzleFlashModel = initialValue;
                this.TextureFilesHashes = initialValue;
                this.SoundLevel = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Name,
                TItem Model,
                TItem Destructible,
                TItem Flags,
                TItem Type,
                TItem Gravity,
                TItem Speed,
                TItem Range,
                TItem Light,
                TItem MuzzleFlash,
                TItem TracerChance,
                TItem ExplosionAltTriggerProximity,
                TItem ExplosionAltTriggerTimer,
                TItem Explosion,
                TItem Sound,
                TItem MuzzleFlashDuration,
                TItem FadeDuration,
                TItem ImpactForce,
                TItem CountdownSound,
                TItem DisaleSound,
                TItem DefaultWeaponSource,
                TItem ConeSpread,
                TItem CollisionRadius,
                TItem Lifetime,
                TItem RelaunchInterval,
                TItem DecalData,
                TItem CollisionLayer,
                TItem MuzzleFlashModel,
                TItem TextureFilesHashes,
                TItem SoundLevel,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.Flags = Flags;
                this.Type = Type;
                this.Gravity = Gravity;
                this.Speed = Speed;
                this.Range = Range;
                this.Light = Light;
                this.MuzzleFlash = MuzzleFlash;
                this.TracerChance = TracerChance;
                this.ExplosionAltTriggerProximity = ExplosionAltTriggerProximity;
                this.ExplosionAltTriggerTimer = ExplosionAltTriggerTimer;
                this.Explosion = Explosion;
                this.Sound = Sound;
                this.MuzzleFlashDuration = MuzzleFlashDuration;
                this.FadeDuration = FadeDuration;
                this.ImpactForce = ImpactForce;
                this.CountdownSound = CountdownSound;
                this.DisaleSound = DisaleSound;
                this.DefaultWeaponSource = DefaultWeaponSource;
                this.ConeSpread = ConeSpread;
                this.CollisionRadius = CollisionRadius;
                this.Lifetime = Lifetime;
                this.RelaunchInterval = RelaunchInterval;
                this.DecalData = DecalData;
                this.CollisionLayer = CollisionLayer;
                this.MuzzleFlashModel = MuzzleFlashModel;
                this.TextureFilesHashes = TextureFilesHashes;
                this.SoundLevel = SoundLevel;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem Flags;
            public TItem Type;
            public TItem Gravity;
            public TItem Speed;
            public TItem Range;
            public TItem Light;
            public TItem MuzzleFlash;
            public TItem TracerChance;
            public TItem ExplosionAltTriggerProximity;
            public TItem ExplosionAltTriggerTimer;
            public TItem Explosion;
            public TItem Sound;
            public TItem MuzzleFlashDuration;
            public TItem FadeDuration;
            public TItem ImpactForce;
            public TItem CountdownSound;
            public TItem DisaleSound;
            public TItem DefaultWeaponSource;
            public TItem ConeSpread;
            public TItem CollisionRadius;
            public TItem Lifetime;
            public TItem RelaunchInterval;
            public TItem DecalData;
            public TItem CollisionLayer;
            public TItem MuzzleFlashModel;
            public TItem TextureFilesHashes;
            public TItem SoundLevel;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.Gravity, rhs.Gravity)) return false;
                if (!object.Equals(this.Speed, rhs.Speed)) return false;
                if (!object.Equals(this.Range, rhs.Range)) return false;
                if (!object.Equals(this.Light, rhs.Light)) return false;
                if (!object.Equals(this.MuzzleFlash, rhs.MuzzleFlash)) return false;
                if (!object.Equals(this.TracerChance, rhs.TracerChance)) return false;
                if (!object.Equals(this.ExplosionAltTriggerProximity, rhs.ExplosionAltTriggerProximity)) return false;
                if (!object.Equals(this.ExplosionAltTriggerTimer, rhs.ExplosionAltTriggerTimer)) return false;
                if (!object.Equals(this.Explosion, rhs.Explosion)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.MuzzleFlashDuration, rhs.MuzzleFlashDuration)) return false;
                if (!object.Equals(this.FadeDuration, rhs.FadeDuration)) return false;
                if (!object.Equals(this.ImpactForce, rhs.ImpactForce)) return false;
                if (!object.Equals(this.CountdownSound, rhs.CountdownSound)) return false;
                if (!object.Equals(this.DisaleSound, rhs.DisaleSound)) return false;
                if (!object.Equals(this.DefaultWeaponSource, rhs.DefaultWeaponSource)) return false;
                if (!object.Equals(this.ConeSpread, rhs.ConeSpread)) return false;
                if (!object.Equals(this.CollisionRadius, rhs.CollisionRadius)) return false;
                if (!object.Equals(this.Lifetime, rhs.Lifetime)) return false;
                if (!object.Equals(this.RelaunchInterval, rhs.RelaunchInterval)) return false;
                if (!object.Equals(this.DecalData, rhs.DecalData)) return false;
                if (!object.Equals(this.CollisionLayer, rhs.CollisionLayer)) return false;
                if (!object.Equals(this.MuzzleFlashModel, rhs.MuzzleFlashModel)) return false;
                if (!object.Equals(this.TextureFilesHashes, rhs.TextureFilesHashes)) return false;
                if (!object.Equals(this.SoundLevel, rhs.SoundLevel)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Destructible);
                hash.Add(this.Flags);
                hash.Add(this.Type);
                hash.Add(this.Gravity);
                hash.Add(this.Speed);
                hash.Add(this.Range);
                hash.Add(this.Light);
                hash.Add(this.MuzzleFlash);
                hash.Add(this.TracerChance);
                hash.Add(this.ExplosionAltTriggerProximity);
                hash.Add(this.ExplosionAltTriggerTimer);
                hash.Add(this.Explosion);
                hash.Add(this.Sound);
                hash.Add(this.MuzzleFlashDuration);
                hash.Add(this.FadeDuration);
                hash.Add(this.ImpactForce);
                hash.Add(this.CountdownSound);
                hash.Add(this.DisaleSound);
                hash.Add(this.DefaultWeaponSource);
                hash.Add(this.ConeSpread);
                hash.Add(this.CollisionRadius);
                hash.Add(this.Lifetime);
                hash.Add(this.RelaunchInterval);
                hash.Add(this.DecalData);
                hash.Add(this.CollisionLayer);
                hash.Add(this.MuzzleFlashModel);
                hash.Add(this.TextureFilesHashes);
                hash.Add(this.SoundLevel);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.Gravity)) return false;
                if (!eval(this.Speed)) return false;
                if (!eval(this.Range)) return false;
                if (!eval(this.Light)) return false;
                if (!eval(this.MuzzleFlash)) return false;
                if (!eval(this.TracerChance)) return false;
                if (!eval(this.ExplosionAltTriggerProximity)) return false;
                if (!eval(this.ExplosionAltTriggerTimer)) return false;
                if (!eval(this.Explosion)) return false;
                if (!eval(this.Sound)) return false;
                if (!eval(this.MuzzleFlashDuration)) return false;
                if (!eval(this.FadeDuration)) return false;
                if (!eval(this.ImpactForce)) return false;
                if (!eval(this.CountdownSound)) return false;
                if (!eval(this.DisaleSound)) return false;
                if (!eval(this.DefaultWeaponSource)) return false;
                if (!eval(this.ConeSpread)) return false;
                if (!eval(this.CollisionRadius)) return false;
                if (!eval(this.Lifetime)) return false;
                if (!eval(this.RelaunchInterval)) return false;
                if (!eval(this.DecalData)) return false;
                if (!eval(this.CollisionLayer)) return false;
                if (!eval(this.MuzzleFlashModel)) return false;
                if (!eval(this.TextureFilesHashes)) return false;
                if (!eval(this.SoundLevel)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.Gravity)) return true;
                if (eval(this.Speed)) return true;
                if (eval(this.Range)) return true;
                if (eval(this.Light)) return true;
                if (eval(this.MuzzleFlash)) return true;
                if (eval(this.TracerChance)) return true;
                if (eval(this.ExplosionAltTriggerProximity)) return true;
                if (eval(this.ExplosionAltTriggerTimer)) return true;
                if (eval(this.Explosion)) return true;
                if (eval(this.Sound)) return true;
                if (eval(this.MuzzleFlashDuration)) return true;
                if (eval(this.FadeDuration)) return true;
                if (eval(this.ImpactForce)) return true;
                if (eval(this.CountdownSound)) return true;
                if (eval(this.DisaleSound)) return true;
                if (eval(this.DefaultWeaponSource)) return true;
                if (eval(this.ConeSpread)) return true;
                if (eval(this.CollisionRadius)) return true;
                if (eval(this.Lifetime)) return true;
                if (eval(this.RelaunchInterval)) return true;
                if (eval(this.DecalData)) return true;
                if (eval(this.CollisionLayer)) return true;
                if (eval(this.MuzzleFlashModel)) return true;
                if (eval(this.TextureFilesHashes)) return true;
                if (eval(this.SoundLevel)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Projectile.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                obj.Gravity = eval(this.Gravity);
                obj.Speed = eval(this.Speed);
                obj.Range = eval(this.Range);
                obj.Light = eval(this.Light);
                obj.MuzzleFlash = eval(this.MuzzleFlash);
                obj.TracerChance = eval(this.TracerChance);
                obj.ExplosionAltTriggerProximity = eval(this.ExplosionAltTriggerProximity);
                obj.ExplosionAltTriggerTimer = eval(this.ExplosionAltTriggerTimer);
                obj.Explosion = eval(this.Explosion);
                obj.Sound = eval(this.Sound);
                obj.MuzzleFlashDuration = eval(this.MuzzleFlashDuration);
                obj.FadeDuration = eval(this.FadeDuration);
                obj.ImpactForce = eval(this.ImpactForce);
                obj.CountdownSound = eval(this.CountdownSound);
                obj.DisaleSound = eval(this.DisaleSound);
                obj.DefaultWeaponSource = eval(this.DefaultWeaponSource);
                obj.ConeSpread = eval(this.ConeSpread);
                obj.CollisionRadius = eval(this.CollisionRadius);
                obj.Lifetime = eval(this.Lifetime);
                obj.RelaunchInterval = eval(this.RelaunchInterval);
                obj.DecalData = eval(this.DecalData);
                obj.CollisionLayer = eval(this.CollisionLayer);
                obj.MuzzleFlashModel = eval(this.MuzzleFlashModel);
                obj.TextureFilesHashes = eval(this.TextureFilesHashes);
                obj.SoundLevel = eval(this.SoundLevel);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Projectile.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Projectile.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Projectile.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if (printMask?.Gravity ?? true)
                    {
                        fg.AppendItem(Gravity, "Gravity");
                    }
                    if (printMask?.Speed ?? true)
                    {
                        fg.AppendItem(Speed, "Speed");
                    }
                    if (printMask?.Range ?? true)
                    {
                        fg.AppendItem(Range, "Range");
                    }
                    if (printMask?.Light ?? true)
                    {
                        fg.AppendItem(Light, "Light");
                    }
                    if (printMask?.MuzzleFlash ?? true)
                    {
                        fg.AppendItem(MuzzleFlash, "MuzzleFlash");
                    }
                    if (printMask?.TracerChance ?? true)
                    {
                        fg.AppendItem(TracerChance, "TracerChance");
                    }
                    if (printMask?.ExplosionAltTriggerProximity ?? true)
                    {
                        fg.AppendItem(ExplosionAltTriggerProximity, "ExplosionAltTriggerProximity");
                    }
                    if (printMask?.ExplosionAltTriggerTimer ?? true)
                    {
                        fg.AppendItem(ExplosionAltTriggerTimer, "ExplosionAltTriggerTimer");
                    }
                    if (printMask?.Explosion ?? true)
                    {
                        fg.AppendItem(Explosion, "Explosion");
                    }
                    if (printMask?.Sound ?? true)
                    {
                        fg.AppendItem(Sound, "Sound");
                    }
                    if (printMask?.MuzzleFlashDuration ?? true)
                    {
                        fg.AppendItem(MuzzleFlashDuration, "MuzzleFlashDuration");
                    }
                    if (printMask?.FadeDuration ?? true)
                    {
                        fg.AppendItem(FadeDuration, "FadeDuration");
                    }
                    if (printMask?.ImpactForce ?? true)
                    {
                        fg.AppendItem(ImpactForce, "ImpactForce");
                    }
                    if (printMask?.CountdownSound ?? true)
                    {
                        fg.AppendItem(CountdownSound, "CountdownSound");
                    }
                    if (printMask?.DisaleSound ?? true)
                    {
                        fg.AppendItem(DisaleSound, "DisaleSound");
                    }
                    if (printMask?.DefaultWeaponSource ?? true)
                    {
                        fg.AppendItem(DefaultWeaponSource, "DefaultWeaponSource");
                    }
                    if (printMask?.ConeSpread ?? true)
                    {
                        fg.AppendItem(ConeSpread, "ConeSpread");
                    }
                    if (printMask?.CollisionRadius ?? true)
                    {
                        fg.AppendItem(CollisionRadius, "CollisionRadius");
                    }
                    if (printMask?.Lifetime ?? true)
                    {
                        fg.AppendItem(Lifetime, "Lifetime");
                    }
                    if (printMask?.RelaunchInterval ?? true)
                    {
                        fg.AppendItem(RelaunchInterval, "RelaunchInterval");
                    }
                    if (printMask?.DecalData ?? true)
                    {
                        fg.AppendItem(DecalData, "DecalData");
                    }
                    if (printMask?.CollisionLayer ?? true)
                    {
                        fg.AppendItem(CollisionLayer, "CollisionLayer");
                    }
                    if (printMask?.MuzzleFlashModel ?? true)
                    {
                        fg.AppendItem(MuzzleFlashModel, "MuzzleFlashModel");
                    }
                    if (printMask?.TextureFilesHashes ?? true)
                    {
                        fg.AppendItem(TextureFilesHashes, "TextureFilesHashes");
                    }
                    if (printMask?.SoundLevel ?? true)
                    {
                        fg.AppendItem(SoundLevel, "SoundLevel");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? Flags;
            public Exception? Type;
            public Exception? Gravity;
            public Exception? Speed;
            public Exception? Range;
            public Exception? Light;
            public Exception? MuzzleFlash;
            public Exception? TracerChance;
            public Exception? ExplosionAltTriggerProximity;
            public Exception? ExplosionAltTriggerTimer;
            public Exception? Explosion;
            public Exception? Sound;
            public Exception? MuzzleFlashDuration;
            public Exception? FadeDuration;
            public Exception? ImpactForce;
            public Exception? CountdownSound;
            public Exception? DisaleSound;
            public Exception? DefaultWeaponSource;
            public Exception? ConeSpread;
            public Exception? CollisionRadius;
            public Exception? Lifetime;
            public Exception? RelaunchInterval;
            public Exception? DecalData;
            public Exception? CollisionLayer;
            public Exception? MuzzleFlashModel;
            public Exception? TextureFilesHashes;
            public Exception? SoundLevel;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Projectile_FieldIndex enu = (Projectile_FieldIndex)index;
                switch (enu)
                {
                    case Projectile_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Projectile_FieldIndex.Name:
                        return Name;
                    case Projectile_FieldIndex.Model:
                        return Model;
                    case Projectile_FieldIndex.Destructible:
                        return Destructible;
                    case Projectile_FieldIndex.Flags:
                        return Flags;
                    case Projectile_FieldIndex.Type:
                        return Type;
                    case Projectile_FieldIndex.Gravity:
                        return Gravity;
                    case Projectile_FieldIndex.Speed:
                        return Speed;
                    case Projectile_FieldIndex.Range:
                        return Range;
                    case Projectile_FieldIndex.Light:
                        return Light;
                    case Projectile_FieldIndex.MuzzleFlash:
                        return MuzzleFlash;
                    case Projectile_FieldIndex.TracerChance:
                        return TracerChance;
                    case Projectile_FieldIndex.ExplosionAltTriggerProximity:
                        return ExplosionAltTriggerProximity;
                    case Projectile_FieldIndex.ExplosionAltTriggerTimer:
                        return ExplosionAltTriggerTimer;
                    case Projectile_FieldIndex.Explosion:
                        return Explosion;
                    case Projectile_FieldIndex.Sound:
                        return Sound;
                    case Projectile_FieldIndex.MuzzleFlashDuration:
                        return MuzzleFlashDuration;
                    case Projectile_FieldIndex.FadeDuration:
                        return FadeDuration;
                    case Projectile_FieldIndex.ImpactForce:
                        return ImpactForce;
                    case Projectile_FieldIndex.CountdownSound:
                        return CountdownSound;
                    case Projectile_FieldIndex.DisaleSound:
                        return DisaleSound;
                    case Projectile_FieldIndex.DefaultWeaponSource:
                        return DefaultWeaponSource;
                    case Projectile_FieldIndex.ConeSpread:
                        return ConeSpread;
                    case Projectile_FieldIndex.CollisionRadius:
                        return CollisionRadius;
                    case Projectile_FieldIndex.Lifetime:
                        return Lifetime;
                    case Projectile_FieldIndex.RelaunchInterval:
                        return RelaunchInterval;
                    case Projectile_FieldIndex.DecalData:
                        return DecalData;
                    case Projectile_FieldIndex.CollisionLayer:
                        return CollisionLayer;
                    case Projectile_FieldIndex.MuzzleFlashModel:
                        return MuzzleFlashModel;
                    case Projectile_FieldIndex.TextureFilesHashes:
                        return TextureFilesHashes;
                    case Projectile_FieldIndex.SoundLevel:
                        return SoundLevel;
                    case Projectile_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Projectile_FieldIndex enu = (Projectile_FieldIndex)index;
                switch (enu)
                {
                    case Projectile_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Projectile_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Projectile_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Projectile_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Projectile_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Projectile_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case Projectile_FieldIndex.Gravity:
                        this.Gravity = ex;
                        break;
                    case Projectile_FieldIndex.Speed:
                        this.Speed = ex;
                        break;
                    case Projectile_FieldIndex.Range:
                        this.Range = ex;
                        break;
                    case Projectile_FieldIndex.Light:
                        this.Light = ex;
                        break;
                    case Projectile_FieldIndex.MuzzleFlash:
                        this.MuzzleFlash = ex;
                        break;
                    case Projectile_FieldIndex.TracerChance:
                        this.TracerChance = ex;
                        break;
                    case Projectile_FieldIndex.ExplosionAltTriggerProximity:
                        this.ExplosionAltTriggerProximity = ex;
                        break;
                    case Projectile_FieldIndex.ExplosionAltTriggerTimer:
                        this.ExplosionAltTriggerTimer = ex;
                        break;
                    case Projectile_FieldIndex.Explosion:
                        this.Explosion = ex;
                        break;
                    case Projectile_FieldIndex.Sound:
                        this.Sound = ex;
                        break;
                    case Projectile_FieldIndex.MuzzleFlashDuration:
                        this.MuzzleFlashDuration = ex;
                        break;
                    case Projectile_FieldIndex.FadeDuration:
                        this.FadeDuration = ex;
                        break;
                    case Projectile_FieldIndex.ImpactForce:
                        this.ImpactForce = ex;
                        break;
                    case Projectile_FieldIndex.CountdownSound:
                        this.CountdownSound = ex;
                        break;
                    case Projectile_FieldIndex.DisaleSound:
                        this.DisaleSound = ex;
                        break;
                    case Projectile_FieldIndex.DefaultWeaponSource:
                        this.DefaultWeaponSource = ex;
                        break;
                    case Projectile_FieldIndex.ConeSpread:
                        this.ConeSpread = ex;
                        break;
                    case Projectile_FieldIndex.CollisionRadius:
                        this.CollisionRadius = ex;
                        break;
                    case Projectile_FieldIndex.Lifetime:
                        this.Lifetime = ex;
                        break;
                    case Projectile_FieldIndex.RelaunchInterval:
                        this.RelaunchInterval = ex;
                        break;
                    case Projectile_FieldIndex.DecalData:
                        this.DecalData = ex;
                        break;
                    case Projectile_FieldIndex.CollisionLayer:
                        this.CollisionLayer = ex;
                        break;
                    case Projectile_FieldIndex.MuzzleFlashModel:
                        this.MuzzleFlashModel = ex;
                        break;
                    case Projectile_FieldIndex.TextureFilesHashes:
                        this.TextureFilesHashes = ex;
                        break;
                    case Projectile_FieldIndex.SoundLevel:
                        this.SoundLevel = ex;
                        break;
                    case Projectile_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Projectile_FieldIndex enu = (Projectile_FieldIndex)index;
                switch (enu)
                {
                    case Projectile_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Projectile_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Projectile_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Projectile_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Gravity:
                        this.Gravity = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Speed:
                        this.Speed = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Range:
                        this.Range = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Light:
                        this.Light = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.MuzzleFlash:
                        this.MuzzleFlash = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.TracerChance:
                        this.TracerChance = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.ExplosionAltTriggerProximity:
                        this.ExplosionAltTriggerProximity = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.ExplosionAltTriggerTimer:
                        this.ExplosionAltTriggerTimer = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Explosion:
                        this.Explosion = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Sound:
                        this.Sound = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.MuzzleFlashDuration:
                        this.MuzzleFlashDuration = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.FadeDuration:
                        this.FadeDuration = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.ImpactForce:
                        this.ImpactForce = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.CountdownSound:
                        this.CountdownSound = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.DisaleSound:
                        this.DisaleSound = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.DefaultWeaponSource:
                        this.DefaultWeaponSource = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.ConeSpread:
                        this.ConeSpread = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.CollisionRadius:
                        this.CollisionRadius = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Lifetime:
                        this.Lifetime = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.RelaunchInterval:
                        this.RelaunchInterval = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.DecalData:
                        this.DecalData = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.CollisionLayer:
                        this.CollisionLayer = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.MuzzleFlashModel:
                        this.MuzzleFlashModel = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.TextureFilesHashes:
                        this.TextureFilesHashes = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.SoundLevel:
                        this.SoundLevel = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Destructible != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (Gravity != null) return true;
                if (Speed != null) return true;
                if (Range != null) return true;
                if (Light != null) return true;
                if (MuzzleFlash != null) return true;
                if (TracerChance != null) return true;
                if (ExplosionAltTriggerProximity != null) return true;
                if (ExplosionAltTriggerTimer != null) return true;
                if (Explosion != null) return true;
                if (Sound != null) return true;
                if (MuzzleFlashDuration != null) return true;
                if (FadeDuration != null) return true;
                if (ImpactForce != null) return true;
                if (CountdownSound != null) return true;
                if (DisaleSound != null) return true;
                if (DefaultWeaponSource != null) return true;
                if (ConeSpread != null) return true;
                if (CollisionRadius != null) return true;
                if (Lifetime != null) return true;
                if (RelaunchInterval != null) return true;
                if (DecalData != null) return true;
                if (CollisionLayer != null) return true;
                if (MuzzleFlashModel != null) return true;
                if (TextureFilesHashes != null) return true;
                if (SoundLevel != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                Destructible?.ToString(fg);
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Type, "Type");
                fg.AppendItem(Gravity, "Gravity");
                fg.AppendItem(Speed, "Speed");
                fg.AppendItem(Range, "Range");
                fg.AppendItem(Light, "Light");
                fg.AppendItem(MuzzleFlash, "MuzzleFlash");
                fg.AppendItem(TracerChance, "TracerChance");
                fg.AppendItem(ExplosionAltTriggerProximity, "ExplosionAltTriggerProximity");
                fg.AppendItem(ExplosionAltTriggerTimer, "ExplosionAltTriggerTimer");
                fg.AppendItem(Explosion, "Explosion");
                fg.AppendItem(Sound, "Sound");
                fg.AppendItem(MuzzleFlashDuration, "MuzzleFlashDuration");
                fg.AppendItem(FadeDuration, "FadeDuration");
                fg.AppendItem(ImpactForce, "ImpactForce");
                fg.AppendItem(CountdownSound, "CountdownSound");
                fg.AppendItem(DisaleSound, "DisaleSound");
                fg.AppendItem(DefaultWeaponSource, "DefaultWeaponSource");
                fg.AppendItem(ConeSpread, "ConeSpread");
                fg.AppendItem(CollisionRadius, "CollisionRadius");
                fg.AppendItem(Lifetime, "Lifetime");
                fg.AppendItem(RelaunchInterval, "RelaunchInterval");
                fg.AppendItem(DecalData, "DecalData");
                fg.AppendItem(CollisionLayer, "CollisionLayer");
                fg.AppendItem(MuzzleFlashModel, "MuzzleFlashModel");
                fg.AppendItem(TextureFilesHashes, "TextureFilesHashes");
                fg.AppendItem(SoundLevel, "SoundLevel");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.Gravity = this.Gravity.Combine(rhs.Gravity);
                ret.Speed = this.Speed.Combine(rhs.Speed);
                ret.Range = this.Range.Combine(rhs.Range);
                ret.Light = this.Light.Combine(rhs.Light);
                ret.MuzzleFlash = this.MuzzleFlash.Combine(rhs.MuzzleFlash);
                ret.TracerChance = this.TracerChance.Combine(rhs.TracerChance);
                ret.ExplosionAltTriggerProximity = this.ExplosionAltTriggerProximity.Combine(rhs.ExplosionAltTriggerProximity);
                ret.ExplosionAltTriggerTimer = this.ExplosionAltTriggerTimer.Combine(rhs.ExplosionAltTriggerTimer);
                ret.Explosion = this.Explosion.Combine(rhs.Explosion);
                ret.Sound = this.Sound.Combine(rhs.Sound);
                ret.MuzzleFlashDuration = this.MuzzleFlashDuration.Combine(rhs.MuzzleFlashDuration);
                ret.FadeDuration = this.FadeDuration.Combine(rhs.FadeDuration);
                ret.ImpactForce = this.ImpactForce.Combine(rhs.ImpactForce);
                ret.CountdownSound = this.CountdownSound.Combine(rhs.CountdownSound);
                ret.DisaleSound = this.DisaleSound.Combine(rhs.DisaleSound);
                ret.DefaultWeaponSource = this.DefaultWeaponSource.Combine(rhs.DefaultWeaponSource);
                ret.ConeSpread = this.ConeSpread.Combine(rhs.ConeSpread);
                ret.CollisionRadius = this.CollisionRadius.Combine(rhs.CollisionRadius);
                ret.Lifetime = this.Lifetime.Combine(rhs.Lifetime);
                ret.RelaunchInterval = this.RelaunchInterval.Combine(rhs.RelaunchInterval);
                ret.DecalData = this.DecalData.Combine(rhs.DecalData);
                ret.CollisionLayer = this.CollisionLayer.Combine(rhs.CollisionLayer);
                ret.MuzzleFlashModel = this.MuzzleFlashModel.Combine(rhs.MuzzleFlashModel);
                ret.TextureFilesHashes = this.TextureFilesHashes.Combine(rhs.TextureFilesHashes);
                ret.SoundLevel = this.SoundLevel.Combine(rhs.SoundLevel);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, ObjectBounds.TranslationMask?> ObjectBounds;
            public bool Name;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public MaskItem<bool, Destructible.TranslationMask?> Destructible;
            public bool Flags;
            public bool Type;
            public bool Gravity;
            public bool Speed;
            public bool Range;
            public bool Light;
            public bool MuzzleFlash;
            public bool TracerChance;
            public bool ExplosionAltTriggerProximity;
            public bool ExplosionAltTriggerTimer;
            public bool Explosion;
            public bool Sound;
            public bool MuzzleFlashDuration;
            public bool FadeDuration;
            public bool ImpactForce;
            public bool CountdownSound;
            public bool DisaleSound;
            public bool DefaultWeaponSource;
            public bool ConeSpread;
            public bool CollisionRadius;
            public bool Lifetime;
            public bool RelaunchInterval;
            public bool DecalData;
            public bool CollisionLayer;
            public bool MuzzleFlashModel;
            public bool TextureFilesHashes;
            public bool SoundLevel;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.ObjectBounds = new MaskItem<bool, ObjectBounds.TranslationMask?>(defaultOn, null);
                this.Name = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Destructible = new MaskItem<bool, Destructible.TranslationMask?>(defaultOn, null);
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.Gravity = defaultOn;
                this.Speed = defaultOn;
                this.Range = defaultOn;
                this.Light = defaultOn;
                this.MuzzleFlash = defaultOn;
                this.TracerChance = defaultOn;
                this.ExplosionAltTriggerProximity = defaultOn;
                this.ExplosionAltTriggerTimer = defaultOn;
                this.Explosion = defaultOn;
                this.Sound = defaultOn;
                this.MuzzleFlashDuration = defaultOn;
                this.FadeDuration = defaultOn;
                this.ImpactForce = defaultOn;
                this.CountdownSound = defaultOn;
                this.DisaleSound = defaultOn;
                this.DefaultWeaponSource = defaultOn;
                this.ConeSpread = defaultOn;
                this.CollisionRadius = defaultOn;
                this.Lifetime = defaultOn;
                this.RelaunchInterval = defaultOn;
                this.DecalData = defaultOn;
                this.CollisionLayer = defaultOn;
                this.MuzzleFlashModel = defaultOn;
                this.TextureFilesHashes = defaultOn;
                this.SoundLevel = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Destructible?.Overall ?? true, Destructible?.Specific?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((Gravity, null));
                ret.Add((Speed, null));
                ret.Add((Range, null));
                ret.Add((Light, null));
                ret.Add((MuzzleFlash, null));
                ret.Add((TracerChance, null));
                ret.Add((ExplosionAltTriggerProximity, null));
                ret.Add((ExplosionAltTriggerTimer, null));
                ret.Add((Explosion, null));
                ret.Add((Sound, null));
                ret.Add((MuzzleFlashDuration, null));
                ret.Add((FadeDuration, null));
                ret.Add((ImpactForce, null));
                ret.Add((CountdownSound, null));
                ret.Add((DisaleSound, null));
                ret.Add((DefaultWeaponSource, null));
                ret.Add((ConeSpread, null));
                ret.Add((CollisionRadius, null));
                ret.Add((Lifetime, null));
                ret.Add((RelaunchInterval, null));
                ret.Add((DecalData, null));
                ret.Add((CollisionLayer, null));
                ret.Add((MuzzleFlashModel, null));
                ret.Add((TextureFilesHashes, null));
                ret.Add((SoundLevel, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Projectile_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => ProjectileCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ProjectileCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ProjectileCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ProjectileCommon.Instance.RemapLinks(this, mapping);
        public Projectile(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Projectile(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Projectile(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DATADataType
        {
            Break0 = 1,
            Break1 = 2
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ProjectileBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ProjectileBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Projectile CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Projectile CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Projectile();
            ((ProjectileSetterCommon)((IProjectileGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IProjectileGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ProjectileSetterCommon)((IProjectileGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Projectile GetNew()
        {
            return new Projectile();
        }

    }
    #endregion

    #region Interface
    public partial interface IProjectile :
        IProjectileGetter,
        ISkyrimMajorRecord,
        IObjectBounded,
        IPlacedTrapTarget,
        ILoquiObjectSetter<IProjectileInternal>
    {
        new ObjectBounds ObjectBounds { get; set; }
        new TranslatedString? Name { get; set; }
        new Model? Model { get; set; }
        new Destructible? Destructible { get; set; }
        new Projectile.Flag Flags { get; set; }
        new Projectile.TypeEnum Type { get; set; }
        new Single Gravity { get; set; }
        new Single Speed { get; set; }
        new Single Range { get; set; }
        new FormLink<Light> Light { get; set; }
        new FormLink<Light> MuzzleFlash { get; set; }
        new Single TracerChance { get; set; }
        new Single ExplosionAltTriggerProximity { get; set; }
        new Single ExplosionAltTriggerTimer { get; set; }
        new FormLink<Explosion> Explosion { get; set; }
        new FormLink<SoundDescriptor> Sound { get; set; }
        new Single MuzzleFlashDuration { get; set; }
        new Single FadeDuration { get; set; }
        new Single ImpactForce { get; set; }
        new FormLink<SoundDescriptor> CountdownSound { get; set; }
        new FormLink<SoundDescriptor> DisaleSound { get; set; }
        new FormLink<Weapon> DefaultWeaponSource { get; set; }
        new Single ConeSpread { get; set; }
        new Single CollisionRadius { get; set; }
        new Single Lifetime { get; set; }
        new Single RelaunchInterval { get; set; }
        new FormLink<TextureSet> DecalData { get; set; }
        new FormLink<CollisionLayer> CollisionLayer { get; set; }
        new String MuzzleFlashModel { get; set; }
        new MemorySlice<Byte>? TextureFilesHashes { get; set; }
        new UInt32 SoundLevel { get; set; }
        new Projectile.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IProjectileInternal :
        ISkyrimMajorRecordInternal,
        IProjectile,
        IProjectileGetter
    {
    }

    public partial interface IProjectileGetter :
        ISkyrimMajorRecordGetter,
        IObjectBoundedGetter,
        IPlacedTrapTargetGetter,
        ILoquiObject<IProjectileGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Projectile_Registration.Instance;
        IObjectBoundsGetter ObjectBounds { get; }
        TranslatedString? Name { get; }
        IModelGetter? Model { get; }
        IDestructibleGetter? Destructible { get; }
        Projectile.Flag Flags { get; }
        Projectile.TypeEnum Type { get; }
        Single Gravity { get; }
        Single Speed { get; }
        Single Range { get; }
        IFormLink<ILightGetter> Light { get; }
        IFormLink<ILightGetter> MuzzleFlash { get; }
        Single TracerChance { get; }
        Single ExplosionAltTriggerProximity { get; }
        Single ExplosionAltTriggerTimer { get; }
        IFormLink<IExplosionGetter> Explosion { get; }
        IFormLink<ISoundDescriptorGetter> Sound { get; }
        Single MuzzleFlashDuration { get; }
        Single FadeDuration { get; }
        Single ImpactForce { get; }
        IFormLink<ISoundDescriptorGetter> CountdownSound { get; }
        IFormLink<ISoundDescriptorGetter> DisaleSound { get; }
        IFormLink<IWeaponGetter> DefaultWeaponSource { get; }
        Single ConeSpread { get; }
        Single CollisionRadius { get; }
        Single Lifetime { get; }
        Single RelaunchInterval { get; }
        IFormLink<ITextureSetGetter> DecalData { get; }
        IFormLink<ICollisionLayerGetter> CollisionLayer { get; }
        String MuzzleFlashModel { get; }
        ReadOnlyMemorySlice<Byte>? TextureFilesHashes { get; }
        UInt32 SoundLevel { get; }
        Projectile.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ProjectileMixIn
    {
        public static void Clear(this IProjectileInternal item)
        {
            ((ProjectileSetterCommon)((IProjectileGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Projectile.Mask<bool> GetEqualsMask(
            this IProjectileGetter item,
            IProjectileGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IProjectileGetter item,
            string? name = null,
            Projectile.Mask<bool>? printMask = null)
        {
            return ((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IProjectileGetter item,
            FileGeneration fg,
            string? name = null,
            Projectile.Mask<bool>? printMask = null)
        {
            ((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IProjectileGetter item,
            Projectile.Mask<bool?> checkMask)
        {
            return ((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Projectile.Mask<bool> GetHasBeenSetMask(this IProjectileGetter item)
        {
            var ret = new Projectile.Mask<bool>(false);
            ((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IProjectileGetter item,
            IProjectileGetter rhs)
        {
            return ((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IProjectileInternal lhs,
            IProjectileGetter rhs,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ProjectileSetterTranslationCommon)((IProjectileGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Projectile.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IProjectileInternal lhs,
            IProjectileGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ProjectileSetterTranslationCommon)((IProjectileGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Projectile DeepCopy(
            this IProjectileGetter item,
            Projectile.TranslationMask? copyMask = null)
        {
            return ((ProjectileSetterTranslationCommon)((IProjectileGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Projectile DeepCopy(
            this IProjectileGetter item,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? copyMask = null)
        {
            return ((ProjectileSetterTranslationCommon)((IProjectileGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Projectile DeepCopy(
            this IProjectileGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ProjectileSetterTranslationCommon)((IProjectileGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IProjectileInternal item,
            XElement node,
            Projectile.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IProjectileInternal item,
            XElement node,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Projectile.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IProjectileInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ProjectileSetterCommon)((IProjectileGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IProjectileInternal item,
            string path,
            Projectile.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IProjectileInternal item,
            string path,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IProjectileInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Projectile.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IProjectileInternal item,
            Stream stream,
            Projectile.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IProjectileInternal item,
            Stream stream,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IProjectileInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Projectile.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IProjectileInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IProjectileInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ProjectileSetterCommon)((IProjectileGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Projectile_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Name = 7,
        Model = 8,
        Destructible = 9,
        Flags = 10,
        Type = 11,
        Gravity = 12,
        Speed = 13,
        Range = 14,
        Light = 15,
        MuzzleFlash = 16,
        TracerChance = 17,
        ExplosionAltTriggerProximity = 18,
        ExplosionAltTriggerTimer = 19,
        Explosion = 20,
        Sound = 21,
        MuzzleFlashDuration = 22,
        FadeDuration = 23,
        ImpactForce = 24,
        CountdownSound = 25,
        DisaleSound = 26,
        DefaultWeaponSource = 27,
        ConeSpread = 28,
        CollisionRadius = 29,
        Lifetime = 30,
        RelaunchInterval = 31,
        DecalData = 32,
        CollisionLayer = 33,
        MuzzleFlashModel = 34,
        TextureFilesHashes = 35,
        SoundLevel = 36,
        DATADataTypeState = 37,
    }
    #endregion

    #region Registration
    public partial class Projectile_Registration : ILoquiRegistration
    {
        public static readonly Projectile_Registration Instance = new Projectile_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 111,
            version: 0);

        public const string GUID = "ddfea8a6-86fc-4134-a352-a2fecdacda31";

        public const ushort AdditionalFieldCount = 32;

        public const ushort FieldCount = 38;

        public static readonly Type MaskType = typeof(Projectile.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Projectile.ErrorMask);

        public static readonly Type ClassType = typeof(Projectile);

        public static readonly Type GetterType = typeof(IProjectileGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IProjectile);

        public static readonly Type? InternalSetterType = typeof(IProjectileInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Projectile";

        public const string Name = "Projectile";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECTBOUNDS":
                    return (ushort)Projectile_FieldIndex.ObjectBounds;
                case "NAME":
                    return (ushort)Projectile_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Projectile_FieldIndex.Model;
                case "DESTRUCTIBLE":
                    return (ushort)Projectile_FieldIndex.Destructible;
                case "FLAGS":
                    return (ushort)Projectile_FieldIndex.Flags;
                case "TYPE":
                    return (ushort)Projectile_FieldIndex.Type;
                case "GRAVITY":
                    return (ushort)Projectile_FieldIndex.Gravity;
                case "SPEED":
                    return (ushort)Projectile_FieldIndex.Speed;
                case "RANGE":
                    return (ushort)Projectile_FieldIndex.Range;
                case "LIGHT":
                    return (ushort)Projectile_FieldIndex.Light;
                case "MUZZLEFLASH":
                    return (ushort)Projectile_FieldIndex.MuzzleFlash;
                case "TRACERCHANCE":
                    return (ushort)Projectile_FieldIndex.TracerChance;
                case "EXPLOSIONALTTRIGGERPROXIMITY":
                    return (ushort)Projectile_FieldIndex.ExplosionAltTriggerProximity;
                case "EXPLOSIONALTTRIGGERTIMER":
                    return (ushort)Projectile_FieldIndex.ExplosionAltTriggerTimer;
                case "EXPLOSION":
                    return (ushort)Projectile_FieldIndex.Explosion;
                case "SOUND":
                    return (ushort)Projectile_FieldIndex.Sound;
                case "MUZZLEFLASHDURATION":
                    return (ushort)Projectile_FieldIndex.MuzzleFlashDuration;
                case "FADEDURATION":
                    return (ushort)Projectile_FieldIndex.FadeDuration;
                case "IMPACTFORCE":
                    return (ushort)Projectile_FieldIndex.ImpactForce;
                case "COUNTDOWNSOUND":
                    return (ushort)Projectile_FieldIndex.CountdownSound;
                case "DISALESOUND":
                    return (ushort)Projectile_FieldIndex.DisaleSound;
                case "DEFAULTWEAPONSOURCE":
                    return (ushort)Projectile_FieldIndex.DefaultWeaponSource;
                case "CONESPREAD":
                    return (ushort)Projectile_FieldIndex.ConeSpread;
                case "COLLISIONRADIUS":
                    return (ushort)Projectile_FieldIndex.CollisionRadius;
                case "LIFETIME":
                    return (ushort)Projectile_FieldIndex.Lifetime;
                case "RELAUNCHINTERVAL":
                    return (ushort)Projectile_FieldIndex.RelaunchInterval;
                case "DECALDATA":
                    return (ushort)Projectile_FieldIndex.DecalData;
                case "COLLISIONLAYER":
                    return (ushort)Projectile_FieldIndex.CollisionLayer;
                case "MUZZLEFLASHMODEL":
                    return (ushort)Projectile_FieldIndex.MuzzleFlashModel;
                case "TEXTUREFILESHASHES":
                    return (ushort)Projectile_FieldIndex.TextureFilesHashes;
                case "SOUNDLEVEL":
                    return (ushort)Projectile_FieldIndex.SoundLevel;
                case "DATADATATYPESTATE":
                    return (ushort)Projectile_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Projectile_FieldIndex enu = (Projectile_FieldIndex)index;
            switch (enu)
            {
                case Projectile_FieldIndex.ObjectBounds:
                case Projectile_FieldIndex.Name:
                case Projectile_FieldIndex.Model:
                case Projectile_FieldIndex.Destructible:
                case Projectile_FieldIndex.Flags:
                case Projectile_FieldIndex.Type:
                case Projectile_FieldIndex.Gravity:
                case Projectile_FieldIndex.Speed:
                case Projectile_FieldIndex.Range:
                case Projectile_FieldIndex.Light:
                case Projectile_FieldIndex.MuzzleFlash:
                case Projectile_FieldIndex.TracerChance:
                case Projectile_FieldIndex.ExplosionAltTriggerProximity:
                case Projectile_FieldIndex.ExplosionAltTriggerTimer:
                case Projectile_FieldIndex.Explosion:
                case Projectile_FieldIndex.Sound:
                case Projectile_FieldIndex.MuzzleFlashDuration:
                case Projectile_FieldIndex.FadeDuration:
                case Projectile_FieldIndex.ImpactForce:
                case Projectile_FieldIndex.CountdownSound:
                case Projectile_FieldIndex.DisaleSound:
                case Projectile_FieldIndex.DefaultWeaponSource:
                case Projectile_FieldIndex.ConeSpread:
                case Projectile_FieldIndex.CollisionRadius:
                case Projectile_FieldIndex.Lifetime:
                case Projectile_FieldIndex.RelaunchInterval:
                case Projectile_FieldIndex.DecalData:
                case Projectile_FieldIndex.CollisionLayer:
                case Projectile_FieldIndex.MuzzleFlashModel:
                case Projectile_FieldIndex.TextureFilesHashes:
                case Projectile_FieldIndex.SoundLevel:
                case Projectile_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Projectile_FieldIndex enu = (Projectile_FieldIndex)index;
            switch (enu)
            {
                case Projectile_FieldIndex.ObjectBounds:
                case Projectile_FieldIndex.Model:
                case Projectile_FieldIndex.Destructible:
                    return true;
                case Projectile_FieldIndex.Name:
                case Projectile_FieldIndex.Flags:
                case Projectile_FieldIndex.Type:
                case Projectile_FieldIndex.Gravity:
                case Projectile_FieldIndex.Speed:
                case Projectile_FieldIndex.Range:
                case Projectile_FieldIndex.Light:
                case Projectile_FieldIndex.MuzzleFlash:
                case Projectile_FieldIndex.TracerChance:
                case Projectile_FieldIndex.ExplosionAltTriggerProximity:
                case Projectile_FieldIndex.ExplosionAltTriggerTimer:
                case Projectile_FieldIndex.Explosion:
                case Projectile_FieldIndex.Sound:
                case Projectile_FieldIndex.MuzzleFlashDuration:
                case Projectile_FieldIndex.FadeDuration:
                case Projectile_FieldIndex.ImpactForce:
                case Projectile_FieldIndex.CountdownSound:
                case Projectile_FieldIndex.DisaleSound:
                case Projectile_FieldIndex.DefaultWeaponSource:
                case Projectile_FieldIndex.ConeSpread:
                case Projectile_FieldIndex.CollisionRadius:
                case Projectile_FieldIndex.Lifetime:
                case Projectile_FieldIndex.RelaunchInterval:
                case Projectile_FieldIndex.DecalData:
                case Projectile_FieldIndex.CollisionLayer:
                case Projectile_FieldIndex.MuzzleFlashModel:
                case Projectile_FieldIndex.TextureFilesHashes:
                case Projectile_FieldIndex.SoundLevel:
                case Projectile_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Projectile_FieldIndex enu = (Projectile_FieldIndex)index;
            switch (enu)
            {
                case Projectile_FieldIndex.ObjectBounds:
                case Projectile_FieldIndex.Name:
                case Projectile_FieldIndex.Model:
                case Projectile_FieldIndex.Destructible:
                case Projectile_FieldIndex.Flags:
                case Projectile_FieldIndex.Type:
                case Projectile_FieldIndex.Gravity:
                case Projectile_FieldIndex.Speed:
                case Projectile_FieldIndex.Range:
                case Projectile_FieldIndex.Light:
                case Projectile_FieldIndex.MuzzleFlash:
                case Projectile_FieldIndex.TracerChance:
                case Projectile_FieldIndex.ExplosionAltTriggerProximity:
                case Projectile_FieldIndex.ExplosionAltTriggerTimer:
                case Projectile_FieldIndex.Explosion:
                case Projectile_FieldIndex.Sound:
                case Projectile_FieldIndex.MuzzleFlashDuration:
                case Projectile_FieldIndex.FadeDuration:
                case Projectile_FieldIndex.ImpactForce:
                case Projectile_FieldIndex.CountdownSound:
                case Projectile_FieldIndex.DisaleSound:
                case Projectile_FieldIndex.DefaultWeaponSource:
                case Projectile_FieldIndex.ConeSpread:
                case Projectile_FieldIndex.CollisionRadius:
                case Projectile_FieldIndex.Lifetime:
                case Projectile_FieldIndex.RelaunchInterval:
                case Projectile_FieldIndex.DecalData:
                case Projectile_FieldIndex.CollisionLayer:
                case Projectile_FieldIndex.MuzzleFlashModel:
                case Projectile_FieldIndex.TextureFilesHashes:
                case Projectile_FieldIndex.SoundLevel:
                case Projectile_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Projectile_FieldIndex enu = (Projectile_FieldIndex)index;
            switch (enu)
            {
                case Projectile_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case Projectile_FieldIndex.Name:
                    return "Name";
                case Projectile_FieldIndex.Model:
                    return "Model";
                case Projectile_FieldIndex.Destructible:
                    return "Destructible";
                case Projectile_FieldIndex.Flags:
                    return "Flags";
                case Projectile_FieldIndex.Type:
                    return "Type";
                case Projectile_FieldIndex.Gravity:
                    return "Gravity";
                case Projectile_FieldIndex.Speed:
                    return "Speed";
                case Projectile_FieldIndex.Range:
                    return "Range";
                case Projectile_FieldIndex.Light:
                    return "Light";
                case Projectile_FieldIndex.MuzzleFlash:
                    return "MuzzleFlash";
                case Projectile_FieldIndex.TracerChance:
                    return "TracerChance";
                case Projectile_FieldIndex.ExplosionAltTriggerProximity:
                    return "ExplosionAltTriggerProximity";
                case Projectile_FieldIndex.ExplosionAltTriggerTimer:
                    return "ExplosionAltTriggerTimer";
                case Projectile_FieldIndex.Explosion:
                    return "Explosion";
                case Projectile_FieldIndex.Sound:
                    return "Sound";
                case Projectile_FieldIndex.MuzzleFlashDuration:
                    return "MuzzleFlashDuration";
                case Projectile_FieldIndex.FadeDuration:
                    return "FadeDuration";
                case Projectile_FieldIndex.ImpactForce:
                    return "ImpactForce";
                case Projectile_FieldIndex.CountdownSound:
                    return "CountdownSound";
                case Projectile_FieldIndex.DisaleSound:
                    return "DisaleSound";
                case Projectile_FieldIndex.DefaultWeaponSource:
                    return "DefaultWeaponSource";
                case Projectile_FieldIndex.ConeSpread:
                    return "ConeSpread";
                case Projectile_FieldIndex.CollisionRadius:
                    return "CollisionRadius";
                case Projectile_FieldIndex.Lifetime:
                    return "Lifetime";
                case Projectile_FieldIndex.RelaunchInterval:
                    return "RelaunchInterval";
                case Projectile_FieldIndex.DecalData:
                    return "DecalData";
                case Projectile_FieldIndex.CollisionLayer:
                    return "CollisionLayer";
                case Projectile_FieldIndex.MuzzleFlashModel:
                    return "MuzzleFlashModel";
                case Projectile_FieldIndex.TextureFilesHashes:
                    return "TextureFilesHashes";
                case Projectile_FieldIndex.SoundLevel:
                    return "SoundLevel";
                case Projectile_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Projectile_FieldIndex enu = (Projectile_FieldIndex)index;
            switch (enu)
            {
                case Projectile_FieldIndex.ObjectBounds:
                case Projectile_FieldIndex.Name:
                case Projectile_FieldIndex.Model:
                case Projectile_FieldIndex.Destructible:
                case Projectile_FieldIndex.Flags:
                case Projectile_FieldIndex.Type:
                case Projectile_FieldIndex.Gravity:
                case Projectile_FieldIndex.Speed:
                case Projectile_FieldIndex.Range:
                case Projectile_FieldIndex.Light:
                case Projectile_FieldIndex.MuzzleFlash:
                case Projectile_FieldIndex.TracerChance:
                case Projectile_FieldIndex.ExplosionAltTriggerProximity:
                case Projectile_FieldIndex.ExplosionAltTriggerTimer:
                case Projectile_FieldIndex.Explosion:
                case Projectile_FieldIndex.Sound:
                case Projectile_FieldIndex.MuzzleFlashDuration:
                case Projectile_FieldIndex.FadeDuration:
                case Projectile_FieldIndex.ImpactForce:
                case Projectile_FieldIndex.CountdownSound:
                case Projectile_FieldIndex.DisaleSound:
                case Projectile_FieldIndex.DefaultWeaponSource:
                case Projectile_FieldIndex.ConeSpread:
                case Projectile_FieldIndex.CollisionRadius:
                case Projectile_FieldIndex.Lifetime:
                case Projectile_FieldIndex.RelaunchInterval:
                case Projectile_FieldIndex.DecalData:
                case Projectile_FieldIndex.CollisionLayer:
                case Projectile_FieldIndex.MuzzleFlashModel:
                case Projectile_FieldIndex.TextureFilesHashes:
                case Projectile_FieldIndex.SoundLevel:
                case Projectile_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Projectile_FieldIndex enu = (Projectile_FieldIndex)index;
            switch (enu)
            {
                case Projectile_FieldIndex.ObjectBounds:
                case Projectile_FieldIndex.Name:
                case Projectile_FieldIndex.Model:
                case Projectile_FieldIndex.Destructible:
                case Projectile_FieldIndex.Flags:
                case Projectile_FieldIndex.Type:
                case Projectile_FieldIndex.Gravity:
                case Projectile_FieldIndex.Speed:
                case Projectile_FieldIndex.Range:
                case Projectile_FieldIndex.Light:
                case Projectile_FieldIndex.MuzzleFlash:
                case Projectile_FieldIndex.TracerChance:
                case Projectile_FieldIndex.ExplosionAltTriggerProximity:
                case Projectile_FieldIndex.ExplosionAltTriggerTimer:
                case Projectile_FieldIndex.Explosion:
                case Projectile_FieldIndex.Sound:
                case Projectile_FieldIndex.MuzzleFlashDuration:
                case Projectile_FieldIndex.FadeDuration:
                case Projectile_FieldIndex.ImpactForce:
                case Projectile_FieldIndex.CountdownSound:
                case Projectile_FieldIndex.DisaleSound:
                case Projectile_FieldIndex.DefaultWeaponSource:
                case Projectile_FieldIndex.ConeSpread:
                case Projectile_FieldIndex.CollisionRadius:
                case Projectile_FieldIndex.Lifetime:
                case Projectile_FieldIndex.RelaunchInterval:
                case Projectile_FieldIndex.DecalData:
                case Projectile_FieldIndex.CollisionLayer:
                case Projectile_FieldIndex.MuzzleFlashModel:
                case Projectile_FieldIndex.TextureFilesHashes:
                case Projectile_FieldIndex.SoundLevel:
                case Projectile_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Projectile_FieldIndex enu = (Projectile_FieldIndex)index;
            switch (enu)
            {
                case Projectile_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case Projectile_FieldIndex.Name:
                    return typeof(TranslatedString);
                case Projectile_FieldIndex.Model:
                    return typeof(Model);
                case Projectile_FieldIndex.Destructible:
                    return typeof(Destructible);
                case Projectile_FieldIndex.Flags:
                    return typeof(Projectile.Flag);
                case Projectile_FieldIndex.Type:
                    return typeof(Projectile.TypeEnum);
                case Projectile_FieldIndex.Gravity:
                    return typeof(Single);
                case Projectile_FieldIndex.Speed:
                    return typeof(Single);
                case Projectile_FieldIndex.Range:
                    return typeof(Single);
                case Projectile_FieldIndex.Light:
                    return typeof(FormLink<Light>);
                case Projectile_FieldIndex.MuzzleFlash:
                    return typeof(FormLink<Light>);
                case Projectile_FieldIndex.TracerChance:
                    return typeof(Single);
                case Projectile_FieldIndex.ExplosionAltTriggerProximity:
                    return typeof(Single);
                case Projectile_FieldIndex.ExplosionAltTriggerTimer:
                    return typeof(Single);
                case Projectile_FieldIndex.Explosion:
                    return typeof(FormLink<Explosion>);
                case Projectile_FieldIndex.Sound:
                    return typeof(FormLink<SoundDescriptor>);
                case Projectile_FieldIndex.MuzzleFlashDuration:
                    return typeof(Single);
                case Projectile_FieldIndex.FadeDuration:
                    return typeof(Single);
                case Projectile_FieldIndex.ImpactForce:
                    return typeof(Single);
                case Projectile_FieldIndex.CountdownSound:
                    return typeof(FormLink<SoundDescriptor>);
                case Projectile_FieldIndex.DisaleSound:
                    return typeof(FormLink<SoundDescriptor>);
                case Projectile_FieldIndex.DefaultWeaponSource:
                    return typeof(FormLink<Weapon>);
                case Projectile_FieldIndex.ConeSpread:
                    return typeof(Single);
                case Projectile_FieldIndex.CollisionRadius:
                    return typeof(Single);
                case Projectile_FieldIndex.Lifetime:
                    return typeof(Single);
                case Projectile_FieldIndex.RelaunchInterval:
                    return typeof(Single);
                case Projectile_FieldIndex.DecalData:
                    return typeof(FormLink<TextureSet>);
                case Projectile_FieldIndex.CollisionLayer:
                    return typeof(FormLink<CollisionLayer>);
                case Projectile_FieldIndex.MuzzleFlashModel:
                    return typeof(String);
                case Projectile_FieldIndex.TextureFilesHashes:
                    return typeof(MemorySlice<Byte>);
                case Projectile_FieldIndex.SoundLevel:
                    return typeof(UInt32);
                case Projectile_FieldIndex.DATADataTypeState:
                    return typeof(Projectile.DATADataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ProjectileXmlWriteTranslation);
        public static readonly RecordType PROJ_HEADER = new RecordType("PROJ");
        public static readonly RecordType OBND_HEADER = new RecordType("OBND");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType DEST_HEADER = new RecordType("DEST");
        public static readonly RecordType DSTD_HEADER = new RecordType("DSTD");
        public static readonly RecordType DMDL_HEADER = new RecordType("DMDL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType NAM2_HEADER = new RecordType("NAM2");
        public static readonly RecordType VNAM_HEADER = new RecordType("VNAM");
        public static readonly RecordType TriggeringRecordType = PROJ_HEADER;
        public static readonly Type BinaryWriteTranslation = typeof(ProjectileBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ProjectileSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ProjectileSetterCommon Instance = new ProjectileSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IProjectileInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Name = default;
            item.Model = null;
            item.Destructible = null;
            item.Flags = default;
            item.Type = default;
            item.Gravity = default;
            item.Speed = default;
            item.Range = default;
            item.Light = FormLink<Light>.Null;
            item.MuzzleFlash = FormLink<Light>.Null;
            item.TracerChance = default;
            item.ExplosionAltTriggerProximity = default;
            item.ExplosionAltTriggerTimer = default;
            item.Explosion = FormLink<Explosion>.Null;
            item.Sound = FormLink<SoundDescriptor>.Null;
            item.MuzzleFlashDuration = default;
            item.FadeDuration = default;
            item.ImpactForce = default;
            item.CountdownSound = FormLink<SoundDescriptor>.Null;
            item.DisaleSound = FormLink<SoundDescriptor>.Null;
            item.DefaultWeaponSource = FormLink<Weapon>.Null;
            item.ConeSpread = default;
            item.CollisionRadius = default;
            item.Lifetime = default;
            item.RelaunchInterval = default;
            item.DecalData = FormLink<TextureSet>.Null;
            item.CollisionLayer = FormLink<CollisionLayer>.Null;
            item.MuzzleFlashModel = string.Empty;
            item.TextureFilesHashes = default;
            item.SoundLevel = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IProjectileInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IProjectileInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IProjectileInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IProjectileInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                item.DATADataTypeState |= Projectile.DATADataType.Break0;
                item.DATADataTypeState |= Projectile.DATADataType.Break1;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ProjectileXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Projectile)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Projectile)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IProjectileInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IProjectileInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ProjectileBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ProjectileBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Projectile)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Projectile)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ProjectileCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ProjectileCommon Instance = new ProjectileCommon();

        public Projectile.Mask<bool> GetEqualsMask(
            IProjectileGetter item,
            IProjectileGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Projectile.Mask<bool>(false);
            ((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IProjectileGetter item,
            IProjectileGetter rhs,
            Projectile.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.Gravity = item.Gravity.EqualsWithin(rhs.Gravity);
            ret.Speed = item.Speed.EqualsWithin(rhs.Speed);
            ret.Range = item.Range.EqualsWithin(rhs.Range);
            ret.Light = object.Equals(item.Light, rhs.Light);
            ret.MuzzleFlash = object.Equals(item.MuzzleFlash, rhs.MuzzleFlash);
            ret.TracerChance = item.TracerChance.EqualsWithin(rhs.TracerChance);
            ret.ExplosionAltTriggerProximity = item.ExplosionAltTriggerProximity.EqualsWithin(rhs.ExplosionAltTriggerProximity);
            ret.ExplosionAltTriggerTimer = item.ExplosionAltTriggerTimer.EqualsWithin(rhs.ExplosionAltTriggerTimer);
            ret.Explosion = object.Equals(item.Explosion, rhs.Explosion);
            ret.Sound = object.Equals(item.Sound, rhs.Sound);
            ret.MuzzleFlashDuration = item.MuzzleFlashDuration.EqualsWithin(rhs.MuzzleFlashDuration);
            ret.FadeDuration = item.FadeDuration.EqualsWithin(rhs.FadeDuration);
            ret.ImpactForce = item.ImpactForce.EqualsWithin(rhs.ImpactForce);
            ret.CountdownSound = object.Equals(item.CountdownSound, rhs.CountdownSound);
            ret.DisaleSound = object.Equals(item.DisaleSound, rhs.DisaleSound);
            ret.DefaultWeaponSource = object.Equals(item.DefaultWeaponSource, rhs.DefaultWeaponSource);
            ret.ConeSpread = item.ConeSpread.EqualsWithin(rhs.ConeSpread);
            ret.CollisionRadius = item.CollisionRadius.EqualsWithin(rhs.CollisionRadius);
            ret.Lifetime = item.Lifetime.EqualsWithin(rhs.Lifetime);
            ret.RelaunchInterval = item.RelaunchInterval.EqualsWithin(rhs.RelaunchInterval);
            ret.DecalData = object.Equals(item.DecalData, rhs.DecalData);
            ret.CollisionLayer = object.Equals(item.CollisionLayer, rhs.CollisionLayer);
            ret.MuzzleFlashModel = string.Equals(item.MuzzleFlashModel, rhs.MuzzleFlashModel);
            ret.TextureFilesHashes = MemorySliceExt.Equal(item.TextureFilesHashes, rhs.TextureFilesHashes);
            ret.SoundLevel = item.SoundLevel == rhs.SoundLevel;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IProjectileGetter item,
            string? name = null,
            Projectile.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IProjectileGetter item,
            FileGeneration fg,
            string? name = null,
            Projectile.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Projectile =>");
            }
            else
            {
                fg.AppendLine($"{name} (Projectile) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IProjectileGetter item,
            FileGeneration fg,
            Projectile.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible.TryGet(out var DestructibleItem))
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendItem(item.Type, "Type");
            }
            if (printMask?.Gravity ?? true)
            {
                fg.AppendItem(item.Gravity, "Gravity");
            }
            if (printMask?.Speed ?? true)
            {
                fg.AppendItem(item.Speed, "Speed");
            }
            if (printMask?.Range ?? true)
            {
                fg.AppendItem(item.Range, "Range");
            }
            if (printMask?.Light ?? true)
            {
                fg.AppendItem(item.Light, "Light");
            }
            if (printMask?.MuzzleFlash ?? true)
            {
                fg.AppendItem(item.MuzzleFlash, "MuzzleFlash");
            }
            if (printMask?.TracerChance ?? true)
            {
                fg.AppendItem(item.TracerChance, "TracerChance");
            }
            if (printMask?.ExplosionAltTriggerProximity ?? true)
            {
                fg.AppendItem(item.ExplosionAltTriggerProximity, "ExplosionAltTriggerProximity");
            }
            if (printMask?.ExplosionAltTriggerTimer ?? true)
            {
                fg.AppendItem(item.ExplosionAltTriggerTimer, "ExplosionAltTriggerTimer");
            }
            if (printMask?.Explosion ?? true)
            {
                fg.AppendItem(item.Explosion, "Explosion");
            }
            if (printMask?.Sound ?? true)
            {
                fg.AppendItem(item.Sound, "Sound");
            }
            if (printMask?.MuzzleFlashDuration ?? true)
            {
                fg.AppendItem(item.MuzzleFlashDuration, "MuzzleFlashDuration");
            }
            if (printMask?.FadeDuration ?? true)
            {
                fg.AppendItem(item.FadeDuration, "FadeDuration");
            }
            if (printMask?.ImpactForce ?? true)
            {
                fg.AppendItem(item.ImpactForce, "ImpactForce");
            }
            if (printMask?.CountdownSound ?? true)
            {
                fg.AppendItem(item.CountdownSound, "CountdownSound");
            }
            if (printMask?.DisaleSound ?? true)
            {
                fg.AppendItem(item.DisaleSound, "DisaleSound");
            }
            if (printMask?.DefaultWeaponSource ?? true)
            {
                fg.AppendItem(item.DefaultWeaponSource, "DefaultWeaponSource");
            }
            if (printMask?.ConeSpread ?? true)
            {
                fg.AppendItem(item.ConeSpread, "ConeSpread");
            }
            if (printMask?.CollisionRadius ?? true)
            {
                fg.AppendItem(item.CollisionRadius, "CollisionRadius");
            }
            if (printMask?.Lifetime ?? true)
            {
                fg.AppendItem(item.Lifetime, "Lifetime");
            }
            if (printMask?.RelaunchInterval ?? true)
            {
                fg.AppendItem(item.RelaunchInterval, "RelaunchInterval");
            }
            if (printMask?.DecalData ?? true)
            {
                fg.AppendItem(item.DecalData, "DecalData");
            }
            if (printMask?.CollisionLayer ?? true)
            {
                fg.AppendItem(item.CollisionLayer, "CollisionLayer");
            }
            if (printMask?.MuzzleFlashModel ?? true)
            {
                fg.AppendItem(item.MuzzleFlashModel, "MuzzleFlashModel");
            }
            if ((printMask?.TextureFilesHashes ?? true)
                && item.TextureFilesHashes.TryGet(out var TextureFilesHashesItem))
            {
                fg.AppendLine($"TextureFilesHashes => {SpanExt.ToHexString(TextureFilesHashesItem)}");
            }
            if (printMask?.SoundLevel ?? true)
            {
                fg.AppendItem(item.SoundLevel, "SoundLevel");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IProjectileGetter item,
            Projectile.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Destructible?.Overall.HasValue ?? false && checkMask.Destructible.Overall.Value != (item.Destructible != null)) return false;
            if (checkMask.Destructible?.Specific != null && (item.Destructible == null || !item.Destructible.HasBeenSet(checkMask.Destructible.Specific))) return false;
            if (checkMask.TextureFilesHashes.HasValue && checkMask.TextureFilesHashes.Value != (item.TextureFilesHashes != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IProjectileGetter item,
            Projectile.Mask<bool> mask)
        {
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds.Mask<bool>?>(true, item.ObjectBounds?.GetHasBeenSetMask());
            mask.Name = (item.Name != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            var itemDestructible = item.Destructible;
            mask.Destructible = new MaskItem<bool, Destructible.Mask<bool>?>(itemDestructible != null, itemDestructible?.GetHasBeenSetMask());
            mask.Flags = true;
            mask.Type = true;
            mask.Gravity = true;
            mask.Speed = true;
            mask.Range = true;
            mask.Light = true;
            mask.MuzzleFlash = true;
            mask.TracerChance = true;
            mask.ExplosionAltTriggerProximity = true;
            mask.ExplosionAltTriggerTimer = true;
            mask.Explosion = true;
            mask.Sound = true;
            mask.MuzzleFlashDuration = true;
            mask.FadeDuration = true;
            mask.ImpactForce = true;
            mask.CountdownSound = true;
            mask.DisaleSound = true;
            mask.DefaultWeaponSource = true;
            mask.ConeSpread = true;
            mask.CollisionRadius = true;
            mask.Lifetime = true;
            mask.RelaunchInterval = true;
            mask.DecalData = true;
            mask.CollisionLayer = true;
            mask.MuzzleFlashModel = true;
            mask.TextureFilesHashes = (item.TextureFilesHashes != null);
            mask.SoundLevel = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Projectile_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Projectile_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Projectile_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Projectile_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Projectile_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Projectile_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Projectile_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Projectile_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Projectile_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Projectile_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Projectile_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Projectile_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IProjectileGetter? lhs,
            IProjectileGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!object.Equals(lhs.Destructible, rhs.Destructible)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Type != rhs.Type) return false;
            if (!lhs.Gravity.EqualsWithin(rhs.Gravity)) return false;
            if (!lhs.Speed.EqualsWithin(rhs.Speed)) return false;
            if (!lhs.Range.EqualsWithin(rhs.Range)) return false;
            if (!lhs.Light.Equals(rhs.Light)) return false;
            if (!lhs.MuzzleFlash.Equals(rhs.MuzzleFlash)) return false;
            if (!lhs.TracerChance.EqualsWithin(rhs.TracerChance)) return false;
            if (!lhs.ExplosionAltTriggerProximity.EqualsWithin(rhs.ExplosionAltTriggerProximity)) return false;
            if (!lhs.ExplosionAltTriggerTimer.EqualsWithin(rhs.ExplosionAltTriggerTimer)) return false;
            if (!lhs.Explosion.Equals(rhs.Explosion)) return false;
            if (!lhs.Sound.Equals(rhs.Sound)) return false;
            if (!lhs.MuzzleFlashDuration.EqualsWithin(rhs.MuzzleFlashDuration)) return false;
            if (!lhs.FadeDuration.EqualsWithin(rhs.FadeDuration)) return false;
            if (!lhs.ImpactForce.EqualsWithin(rhs.ImpactForce)) return false;
            if (!lhs.CountdownSound.Equals(rhs.CountdownSound)) return false;
            if (!lhs.DisaleSound.Equals(rhs.DisaleSound)) return false;
            if (!lhs.DefaultWeaponSource.Equals(rhs.DefaultWeaponSource)) return false;
            if (!lhs.ConeSpread.EqualsWithin(rhs.ConeSpread)) return false;
            if (!lhs.CollisionRadius.EqualsWithin(rhs.CollisionRadius)) return false;
            if (!lhs.Lifetime.EqualsWithin(rhs.Lifetime)) return false;
            if (!lhs.RelaunchInterval.EqualsWithin(rhs.RelaunchInterval)) return false;
            if (!lhs.DecalData.Equals(rhs.DecalData)) return false;
            if (!lhs.CollisionLayer.Equals(rhs.CollisionLayer)) return false;
            if (!string.Equals(lhs.MuzzleFlashModel, rhs.MuzzleFlashModel)) return false;
            if (!MemorySliceExt.Equal(lhs.TextureFilesHashes, rhs.TextureFilesHashes)) return false;
            if (lhs.SoundLevel != rhs.SoundLevel) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IProjectileGetter?)lhs,
                rhs: rhs as IProjectileGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IProjectileGetter?)lhs,
                rhs: rhs as IProjectileGetter);
        }
        
        public virtual int GetHashCode(IProjectileGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Destructible.TryGet(out var Destructibleitem))
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.Flags);
            hash.Add(item.Type);
            hash.Add(item.Gravity);
            hash.Add(item.Speed);
            hash.Add(item.Range);
            hash.Add(item.Light);
            hash.Add(item.MuzzleFlash);
            hash.Add(item.TracerChance);
            hash.Add(item.ExplosionAltTriggerProximity);
            hash.Add(item.ExplosionAltTriggerTimer);
            hash.Add(item.Explosion);
            hash.Add(item.Sound);
            hash.Add(item.MuzzleFlashDuration);
            hash.Add(item.FadeDuration);
            hash.Add(item.ImpactForce);
            hash.Add(item.CountdownSound);
            hash.Add(item.DisaleSound);
            hash.Add(item.DefaultWeaponSource);
            hash.Add(item.ConeSpread);
            hash.Add(item.CollisionRadius);
            hash.Add(item.Lifetime);
            hash.Add(item.RelaunchInterval);
            hash.Add(item.DecalData);
            hash.Add(item.CollisionLayer);
            hash.Add(item.MuzzleFlashModel);
            if (item.TextureFilesHashes.TryGet(out var TextureFilesHashesItem))
            {
                hash.Add(TextureFilesHashesItem);
            }
            hash.Add(item.SoundLevel);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IProjectileGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IProjectileGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Projectile.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IProjectileGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Destructible.TryGet(out var DestructibleItems))
            {
                foreach (var item in DestructibleItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            yield return obj.Light.FormKey;
            yield return obj.MuzzleFlash.FormKey;
            yield return obj.Explosion.FormKey;
            yield return obj.Sound.FormKey;
            yield return obj.CountdownSound.FormKey;
            yield return obj.DisaleSound.FormKey;
            yield return obj.DefaultWeaponSource.FormKey;
            yield return obj.DecalData.FormKey;
            yield return obj.CollisionLayer.FormKey;
            yield break;
        }
        
        public void RemapLinks(IProjectileGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Projectile obj, Projectile rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Projectile(getNextFormKey());
            ret.DeepCopyIn((Projectile)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Projectile)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class ProjectileSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ProjectileSetterTranslationCommon Instance = new ProjectileSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IProjectileInternal item,
            IProjectileGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IProjectile item,
            IProjectileGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Projectile_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Projectile_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Projectile_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Projectile_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Projectile_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible.TryGet(out var rhsDestructible))
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Projectile_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Gravity) ?? true))
            {
                item.Gravity = rhs.Gravity;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Speed) ?? true))
            {
                item.Speed = rhs.Speed;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Range) ?? true))
            {
                item.Range = rhs.Range;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Light) ?? true))
            {
                item.Light = rhs.Light.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.MuzzleFlash) ?? true))
            {
                item.MuzzleFlash = rhs.MuzzleFlash.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.TracerChance) ?? true))
            {
                item.TracerChance = rhs.TracerChance;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.ExplosionAltTriggerProximity) ?? true))
            {
                item.ExplosionAltTriggerProximity = rhs.ExplosionAltTriggerProximity;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.ExplosionAltTriggerTimer) ?? true))
            {
                item.ExplosionAltTriggerTimer = rhs.ExplosionAltTriggerTimer;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Explosion) ?? true))
            {
                item.Explosion = rhs.Explosion.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Sound) ?? true))
            {
                item.Sound = rhs.Sound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.MuzzleFlashDuration) ?? true))
            {
                item.MuzzleFlashDuration = rhs.MuzzleFlashDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.FadeDuration) ?? true))
            {
                item.FadeDuration = rhs.FadeDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.ImpactForce) ?? true))
            {
                item.ImpactForce = rhs.ImpactForce;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.CountdownSound) ?? true))
            {
                item.CountdownSound = rhs.CountdownSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.DisaleSound) ?? true))
            {
                item.DisaleSound = rhs.DisaleSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.DefaultWeaponSource) ?? true))
            {
                item.DefaultWeaponSource = rhs.DefaultWeaponSource.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.ConeSpread) ?? true))
            {
                item.ConeSpread = rhs.ConeSpread;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.CollisionRadius) ?? true))
            {
                item.CollisionRadius = rhs.CollisionRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Lifetime) ?? true))
            {
                item.Lifetime = rhs.Lifetime;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.RelaunchInterval) ?? true))
            {
                item.RelaunchInterval = rhs.RelaunchInterval;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.DecalData) ?? true))
            {
                item.DecalData = rhs.DecalData.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.CollisionLayer) ?? true))
            {
                item.CollisionLayer = rhs.CollisionLayer.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.MuzzleFlashModel) ?? true))
            {
                item.MuzzleFlashModel = rhs.MuzzleFlashModel;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.TextureFilesHashes) ?? true))
            {
                if(rhs.TextureFilesHashes.TryGet(out var TextureFilesHashesrhs))
                {
                    item.TextureFilesHashes = TextureFilesHashesrhs.ToArray();
                }
                else
                {
                    item.TextureFilesHashes = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.SoundLevel) ?? true))
            {
                item.SoundLevel = rhs.SoundLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IProjectileInternal)item,
                rhs: (IProjectileGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IProjectile)item,
                rhs: (IProjectileGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IProjectileInternal)item,
                rhs: (IProjectileGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IProjectile)item,
                rhs: (IProjectileGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Projectile DeepCopy(
            IProjectileGetter item,
            Projectile.TranslationMask? copyMask = null)
        {
            Projectile ret = (Projectile)((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Projectile DeepCopy(
            IProjectileGetter item,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? copyMask = null)
        {
            Projectile ret = (Projectile)((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Projectile DeepCopy(
            IProjectileGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Projectile ret = (Projectile)((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Projectile
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Projectile_Registration.Instance;
        public new static Projectile_Registration Registration => Projectile_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ProjectileCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ProjectileSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ProjectileSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ProjectileXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ProjectileXmlWriteTranslation Instance = new ProjectileXmlWriteTranslation();

        public static void WriteToNodeXml(
            IProjectileGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.ObjectBounds) ?? true))
            {
                var ObjectBoundsItem = item.ObjectBounds;
                ((ObjectBoundsXmlWriteTranslation)((IXmlItem)ObjectBoundsItem).XmlWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    node: node,
                    name: nameof(item.ObjectBounds),
                    fieldIndex: (int)Projectile_FieldIndex.ObjectBounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Projectile_FieldIndex.ObjectBounds));
            }
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.Name) ?? true))
            {
                Mutagen.Bethesda.Xml.TranslatedStringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Projectile_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Projectile_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Projectile_FieldIndex.Model));
                }
            }
            if ((item.Destructible != null)
                && (translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.Destructible) ?? true))
            {
                if (item.Destructible.TryGet(out var DestructibleItem))
                {
                    ((DestructibleXmlWriteTranslation)((IXmlItem)DestructibleItem).XmlWriteTranslator).Write(
                        item: DestructibleItem,
                        node: node,
                        name: nameof(item.Destructible),
                        fieldIndex: (int)Projectile_FieldIndex.Destructible,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Projectile_FieldIndex.Destructible));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Projectile.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Projectile_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.Type) ?? true))
            {
                EnumXmlTranslation<Projectile.TypeEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.Type),
                    item: item.Type,
                    fieldIndex: (int)Projectile_FieldIndex.Type,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.Gravity) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Gravity),
                    item: item.Gravity,
                    fieldIndex: (int)Projectile_FieldIndex.Gravity,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.Speed) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Speed),
                    item: item.Speed,
                    fieldIndex: (int)Projectile_FieldIndex.Speed,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.Range) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Range),
                    item: item.Range,
                    fieldIndex: (int)Projectile_FieldIndex.Range,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.Light) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Light),
                    item: item.Light.FormKey,
                    fieldIndex: (int)Projectile_FieldIndex.Light,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.MuzzleFlash) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MuzzleFlash),
                    item: item.MuzzleFlash.FormKey,
                    fieldIndex: (int)Projectile_FieldIndex.MuzzleFlash,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.TracerChance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TracerChance),
                    item: item.TracerChance,
                    fieldIndex: (int)Projectile_FieldIndex.TracerChance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.ExplosionAltTriggerProximity) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ExplosionAltTriggerProximity),
                    item: item.ExplosionAltTriggerProximity,
                    fieldIndex: (int)Projectile_FieldIndex.ExplosionAltTriggerProximity,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.ExplosionAltTriggerTimer) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ExplosionAltTriggerTimer),
                    item: item.ExplosionAltTriggerTimer,
                    fieldIndex: (int)Projectile_FieldIndex.ExplosionAltTriggerTimer,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.Explosion) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Explosion),
                    item: item.Explosion.FormKey,
                    fieldIndex: (int)Projectile_FieldIndex.Explosion,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.Sound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sound),
                    item: item.Sound.FormKey,
                    fieldIndex: (int)Projectile_FieldIndex.Sound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.MuzzleFlashDuration) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MuzzleFlashDuration),
                    item: item.MuzzleFlashDuration,
                    fieldIndex: (int)Projectile_FieldIndex.MuzzleFlashDuration,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.FadeDuration) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FadeDuration),
                    item: item.FadeDuration,
                    fieldIndex: (int)Projectile_FieldIndex.FadeDuration,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.ImpactForce) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ImpactForce),
                    item: item.ImpactForce,
                    fieldIndex: (int)Projectile_FieldIndex.ImpactForce,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.CountdownSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CountdownSound),
                    item: item.CountdownSound.FormKey,
                    fieldIndex: (int)Projectile_FieldIndex.CountdownSound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.DisaleSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DisaleSound),
                    item: item.DisaleSound.FormKey,
                    fieldIndex: (int)Projectile_FieldIndex.DisaleSound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.DefaultWeaponSource) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DefaultWeaponSource),
                    item: item.DefaultWeaponSource.FormKey,
                    fieldIndex: (int)Projectile_FieldIndex.DefaultWeaponSource,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.ConeSpread) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ConeSpread),
                    item: item.ConeSpread,
                    fieldIndex: (int)Projectile_FieldIndex.ConeSpread,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.CollisionRadius) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CollisionRadius),
                    item: item.CollisionRadius,
                    fieldIndex: (int)Projectile_FieldIndex.CollisionRadius,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.Lifetime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Lifetime),
                    item: item.Lifetime,
                    fieldIndex: (int)Projectile_FieldIndex.Lifetime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.RelaunchInterval) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RelaunchInterval),
                    item: item.RelaunchInterval,
                    fieldIndex: (int)Projectile_FieldIndex.RelaunchInterval,
                    errorMask: errorMask);
            }
            if (!item.DATADataTypeState.HasFlag(Projectile.DATADataType.Break0))
            {
                if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.DecalData) ?? true))
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DecalData),
                        item: item.DecalData.FormKey,
                        fieldIndex: (int)Projectile_FieldIndex.DecalData,
                        errorMask: errorMask);
                }
                if (!item.DATADataTypeState.HasFlag(Projectile.DATADataType.Break1))
                {
                    if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.CollisionLayer) ?? true))
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.CollisionLayer),
                            item: item.CollisionLayer.FormKey,
                            fieldIndex: (int)Projectile_FieldIndex.CollisionLayer,
                            errorMask: errorMask);
                    }
                }
            }
            else
            {
                node.Add(new XElement("HasDATADataType"));
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.MuzzleFlashModel) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MuzzleFlashModel),
                    item: item.MuzzleFlashModel,
                    fieldIndex: (int)Projectile_FieldIndex.MuzzleFlashModel,
                    errorMask: errorMask);
            }
            if ((item.TextureFilesHashes != null)
                && (translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.TextureFilesHashes) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TextureFilesHashes),
                    item: item.TextureFilesHashes.Value,
                    fieldIndex: (int)Projectile_FieldIndex.TextureFilesHashes,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.SoundLevel) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SoundLevel),
                    item: item.SoundLevel,
                    fieldIndex: (int)Projectile_FieldIndex.SoundLevel,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Projectile_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Projectile.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Projectile_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IProjectileGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Projectile");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Projectile");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IProjectileGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IProjectileGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IProjectileGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ProjectileXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static ProjectileXmlCreateTranslation Instance = new ProjectileXmlCreateTranslation();

        public static void FillPublicXml(
            IProjectileInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ProjectileXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IProjectileInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ObjectBounds":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.ObjectBounds);
                    try
                    {
                        item.ObjectBounds = LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Projectile_FieldIndex.ObjectBounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Projectile_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Destructible":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.Destructible);
                    try
                    {
                        item.Destructible = LoquiXmlTranslation<Destructible>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Projectile_FieldIndex.Destructible));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Projectile.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Type":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.Type);
                    try
                    {
                        item.Type = EnumXmlTranslation<Projectile.TypeEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Gravity":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.Gravity);
                    try
                    {
                        item.Gravity = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Speed":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.Speed);
                    try
                    {
                        item.Speed = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Range":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.Range);
                    try
                    {
                        item.Range = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Light":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.Light);
                    try
                    {
                        item.Light = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MuzzleFlash":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.MuzzleFlash);
                    try
                    {
                        item.MuzzleFlash = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TracerChance":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.TracerChance);
                    try
                    {
                        item.TracerChance = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ExplosionAltTriggerProximity":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.ExplosionAltTriggerProximity);
                    try
                    {
                        item.ExplosionAltTriggerProximity = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ExplosionAltTriggerTimer":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.ExplosionAltTriggerTimer);
                    try
                    {
                        item.ExplosionAltTriggerTimer = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Explosion":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.Explosion);
                    try
                    {
                        item.Explosion = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sound":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.Sound);
                    try
                    {
                        item.Sound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MuzzleFlashDuration":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.MuzzleFlashDuration);
                    try
                    {
                        item.MuzzleFlashDuration = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FadeDuration":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.FadeDuration);
                    try
                    {
                        item.FadeDuration = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ImpactForce":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.ImpactForce);
                    try
                    {
                        item.ImpactForce = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CountdownSound":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.CountdownSound);
                    try
                    {
                        item.CountdownSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DisaleSound":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.DisaleSound);
                    try
                    {
                        item.DisaleSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DefaultWeaponSource":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.DefaultWeaponSource);
                    try
                    {
                        item.DefaultWeaponSource = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ConeSpread":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.ConeSpread);
                    try
                    {
                        item.ConeSpread = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CollisionRadius":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.CollisionRadius);
                    try
                    {
                        item.CollisionRadius = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lifetime":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.Lifetime);
                    try
                    {
                        item.Lifetime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RelaunchInterval":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.RelaunchInterval);
                    try
                    {
                        item.RelaunchInterval = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DecalData":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.DecalData);
                    try
                    {
                        item.DecalData = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~Projectile.DATADataType.Break0;
                    break;
                case "CollisionLayer":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.CollisionLayer);
                    try
                    {
                        item.CollisionLayer = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~Projectile.DATADataType.Break1;
                    break;
                case "MuzzleFlashModel":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.MuzzleFlashModel);
                    try
                    {
                        item.MuzzleFlashModel = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TextureFilesHashes":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.TextureFilesHashes);
                    try
                    {
                        item.TextureFilesHashes = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoundLevel":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.SoundLevel);
                    try
                    {
                        item.SoundLevel = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)Projectile_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<Projectile.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ProjectileXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IProjectileGetter item,
            XElement node,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ProjectileXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Projectile.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IProjectileGetter item,
            string path,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IProjectileGetter item,
            Stream stream,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ProjectileBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ProjectileBinaryWriteTranslation Instance = new ProjectileBinaryWriteTranslation();

        public static void WriteEmbedded(
            IProjectileGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IProjectileGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Projectile_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Destructible.TryGet(out var DestructibleItem))
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(Projectile_Registration.DATA_HEADER)))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Projectile.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 2);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Projectile.TypeEnum>.Instance.Write(
                    writer,
                    item.Type,
                    length: 2);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Gravity);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Speed);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Range);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Light);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MuzzleFlash);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.TracerChance);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplosionAltTriggerProximity);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplosionAltTriggerTimer);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Explosion);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Sound);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MuzzleFlashDuration);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FadeDuration);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ImpactForce);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CountdownSound);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DisaleSound);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DefaultWeaponSource);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ConeSpread);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CollisionRadius);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Lifetime);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.RelaunchInterval);
                if (!item.DATADataTypeState.HasFlag(Projectile.DATADataType.Break0))
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DecalData);
                    if (!item.DATADataTypeState.HasFlag(Projectile.DATADataType.Break1))
                    {
                        Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.CollisionLayer);
                    }
                }
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MuzzleFlashModel,
                header: recordTypeConverter.ConvertToCustom(Projectile_Registration.NAM1_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TextureFilesHashes,
                header: recordTypeConverter.ConvertToCustom(Projectile_Registration.NAM2_HEADER));
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SoundLevel,
                header: recordTypeConverter.ConvertToCustom(Projectile_Registration.VNAM_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            IProjectileGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(Projectile_Registration.PROJ_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IProjectileGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IProjectileGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IProjectileGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ProjectileBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static ProjectileBinaryCreateTranslation Instance = new ProjectileBinaryCreateTranslation();

        public override RecordType RecordType => Projectile_Registration.PROJ_HEADER;
        public static void FillBinaryStructs(
            IProjectileInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IProjectileInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x444E424F: // OBND
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.ObjectBounds);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.Model);
                }
                case 0x54534544: // DEST
                case 0x44545344: // DSTD
                case 0x4C444D44: // DMDL
                {
                    item.Destructible = Mutagen.Bethesda.Skyrim.Destructible.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.Destructible);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Flags = EnumBinaryTranslation<Projectile.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    item.Type = EnumBinaryTranslation<Projectile.TypeEnum>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    item.Gravity = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Speed = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Range = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Light = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.MuzzleFlash = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.TracerChance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ExplosionAltTriggerProximity = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ExplosionAltTriggerTimer = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Explosion = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.Sound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.MuzzleFlashDuration = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FadeDuration = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ImpactForce = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.CountdownSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.DisaleSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.DefaultWeaponSource = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.ConeSpread = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.CollisionRadius = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Lifetime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.RelaunchInterval = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= Projectile.DATADataType.Break0;
                        return TryGet<int?>.Succeed((int)Projectile_FieldIndex.RelaunchInterval);
                    }
                    item.DecalData = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= Projectile.DATADataType.Break1;
                        return TryGet<int?>.Succeed((int)Projectile_FieldIndex.DecalData);
                    }
                    item.CollisionLayer = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.CollisionLayer);
                }
                case 0x314D414E: // NAM1
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MuzzleFlashModel = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.MuzzleFlashModel);
                }
                case 0x324D414E: // NAM2
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureFilesHashes = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.TextureFilesHashes);
                }
                case 0x4D414E56: // VNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SoundLevel = frame.ReadUInt32();
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.SoundLevel);
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ProjectileBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ProjectileBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IProjectileGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Projectile_Registration.Instance;
        public new static Projectile_Registration Registration => Projectile_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ProjectileCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ProjectileSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IProjectileGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => ProjectileCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ProjectileCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ProjectileCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ProjectileCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ProjectileXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ProjectileXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ProjectileBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ProjectileBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new BinaryMemoryReadStream(_data.Slice(_ObjectBoundsLocation!.Value.Min)), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public TranslatedString? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, _package.MetaData.StringsLookup) : default(TranslatedString?);
        #endregion
        public IModelGetter? Model { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        private int? _DATALocation;
        public Projectile.DATADataType DATADataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0x0;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Projectile.Flag Flags => _Flags_IsSet ? (Projectile.Flag)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_FlagsLocation, 0x2)) : default;
        #endregion
        #region Type
        private int _TypeLocation => _DATALocation!.Value + 0x2;
        private bool _Type_IsSet => _DATALocation.HasValue;
        public Projectile.TypeEnum Type => _Type_IsSet ? (Projectile.TypeEnum)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_TypeLocation, 0x2)) : default;
        #endregion
        #region Gravity
        private int _GravityLocation => _DATALocation!.Value + 0x4;
        private bool _Gravity_IsSet => _DATALocation.HasValue;
        public Single Gravity => _Gravity_IsSet ? SpanExt.GetFloat(_data.Slice(_GravityLocation, 4)) : default;
        #endregion
        #region Speed
        private int _SpeedLocation => _DATALocation!.Value + 0x8;
        private bool _Speed_IsSet => _DATALocation.HasValue;
        public Single Speed => _Speed_IsSet ? SpanExt.GetFloat(_data.Slice(_SpeedLocation, 4)) : default;
        #endregion
        #region Range
        private int _RangeLocation => _DATALocation!.Value + 0xC;
        private bool _Range_IsSet => _DATALocation.HasValue;
        public Single Range => _Range_IsSet ? SpanExt.GetFloat(_data.Slice(_RangeLocation, 4)) : default;
        #endregion
        #region Light
        private int _LightLocation => _DATALocation!.Value + 0x10;
        private bool _Light_IsSet => _DATALocation.HasValue;
        public IFormLink<ILightGetter> Light => _Light_IsSet ? new FormLink<ILightGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_LightLocation, 0x4)))) : FormLink<ILightGetter>.Null;
        #endregion
        #region MuzzleFlash
        private int _MuzzleFlashLocation => _DATALocation!.Value + 0x14;
        private bool _MuzzleFlash_IsSet => _DATALocation.HasValue;
        public IFormLink<ILightGetter> MuzzleFlash => _MuzzleFlash_IsSet ? new FormLink<ILightGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_MuzzleFlashLocation, 0x4)))) : FormLink<ILightGetter>.Null;
        #endregion
        #region TracerChance
        private int _TracerChanceLocation => _DATALocation!.Value + 0x18;
        private bool _TracerChance_IsSet => _DATALocation.HasValue;
        public Single TracerChance => _TracerChance_IsSet ? SpanExt.GetFloat(_data.Slice(_TracerChanceLocation, 4)) : default;
        #endregion
        #region ExplosionAltTriggerProximity
        private int _ExplosionAltTriggerProximityLocation => _DATALocation!.Value + 0x1C;
        private bool _ExplosionAltTriggerProximity_IsSet => _DATALocation.HasValue;
        public Single ExplosionAltTriggerProximity => _ExplosionAltTriggerProximity_IsSet ? SpanExt.GetFloat(_data.Slice(_ExplosionAltTriggerProximityLocation, 4)) : default;
        #endregion
        #region ExplosionAltTriggerTimer
        private int _ExplosionAltTriggerTimerLocation => _DATALocation!.Value + 0x20;
        private bool _ExplosionAltTriggerTimer_IsSet => _DATALocation.HasValue;
        public Single ExplosionAltTriggerTimer => _ExplosionAltTriggerTimer_IsSet ? SpanExt.GetFloat(_data.Slice(_ExplosionAltTriggerTimerLocation, 4)) : default;
        #endregion
        #region Explosion
        private int _ExplosionLocation => _DATALocation!.Value + 0x24;
        private bool _Explosion_IsSet => _DATALocation.HasValue;
        public IFormLink<IExplosionGetter> Explosion => _Explosion_IsSet ? new FormLink<IExplosionGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ExplosionLocation, 0x4)))) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region Sound
        private int _SoundLocation => _DATALocation!.Value + 0x28;
        private bool _Sound_IsSet => _DATALocation.HasValue;
        public IFormLink<ISoundDescriptorGetter> Sound => _Sound_IsSet ? new FormLink<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_SoundLocation, 0x4)))) : FormLink<ISoundDescriptorGetter>.Null;
        #endregion
        #region MuzzleFlashDuration
        private int _MuzzleFlashDurationLocation => _DATALocation!.Value + 0x2C;
        private bool _MuzzleFlashDuration_IsSet => _DATALocation.HasValue;
        public Single MuzzleFlashDuration => _MuzzleFlashDuration_IsSet ? SpanExt.GetFloat(_data.Slice(_MuzzleFlashDurationLocation, 4)) : default;
        #endregion
        #region FadeDuration
        private int _FadeDurationLocation => _DATALocation!.Value + 0x30;
        private bool _FadeDuration_IsSet => _DATALocation.HasValue;
        public Single FadeDuration => _FadeDuration_IsSet ? SpanExt.GetFloat(_data.Slice(_FadeDurationLocation, 4)) : default;
        #endregion
        #region ImpactForce
        private int _ImpactForceLocation => _DATALocation!.Value + 0x34;
        private bool _ImpactForce_IsSet => _DATALocation.HasValue;
        public Single ImpactForce => _ImpactForce_IsSet ? SpanExt.GetFloat(_data.Slice(_ImpactForceLocation, 4)) : default;
        #endregion
        #region CountdownSound
        private int _CountdownSoundLocation => _DATALocation!.Value + 0x38;
        private bool _CountdownSound_IsSet => _DATALocation.HasValue;
        public IFormLink<ISoundDescriptorGetter> CountdownSound => _CountdownSound_IsSet ? new FormLink<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_CountdownSoundLocation, 0x4)))) : FormLink<ISoundDescriptorGetter>.Null;
        #endregion
        #region DisaleSound
        private int _DisaleSoundLocation => _DATALocation!.Value + 0x3C;
        private bool _DisaleSound_IsSet => _DATALocation.HasValue;
        public IFormLink<ISoundDescriptorGetter> DisaleSound => _DisaleSound_IsSet ? new FormLink<ISoundDescriptorGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_DisaleSoundLocation, 0x4)))) : FormLink<ISoundDescriptorGetter>.Null;
        #endregion
        #region DefaultWeaponSource
        private int _DefaultWeaponSourceLocation => _DATALocation!.Value + 0x40;
        private bool _DefaultWeaponSource_IsSet => _DATALocation.HasValue;
        public IFormLink<IWeaponGetter> DefaultWeaponSource => _DefaultWeaponSource_IsSet ? new FormLink<IWeaponGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_DefaultWeaponSourceLocation, 0x4)))) : FormLink<IWeaponGetter>.Null;
        #endregion
        #region ConeSpread
        private int _ConeSpreadLocation => _DATALocation!.Value + 0x44;
        private bool _ConeSpread_IsSet => _DATALocation.HasValue;
        public Single ConeSpread => _ConeSpread_IsSet ? SpanExt.GetFloat(_data.Slice(_ConeSpreadLocation, 4)) : default;
        #endregion
        #region CollisionRadius
        private int _CollisionRadiusLocation => _DATALocation!.Value + 0x48;
        private bool _CollisionRadius_IsSet => _DATALocation.HasValue;
        public Single CollisionRadius => _CollisionRadius_IsSet ? SpanExt.GetFloat(_data.Slice(_CollisionRadiusLocation, 4)) : default;
        #endregion
        #region Lifetime
        private int _LifetimeLocation => _DATALocation!.Value + 0x4C;
        private bool _Lifetime_IsSet => _DATALocation.HasValue;
        public Single Lifetime => _Lifetime_IsSet ? SpanExt.GetFloat(_data.Slice(_LifetimeLocation, 4)) : default;
        #endregion
        #region RelaunchInterval
        private int _RelaunchIntervalLocation => _DATALocation!.Value + 0x50;
        private bool _RelaunchInterval_IsSet => _DATALocation.HasValue;
        public Single RelaunchInterval => _RelaunchInterval_IsSet ? SpanExt.GetFloat(_data.Slice(_RelaunchIntervalLocation, 4)) : default;
        #endregion
        #region DecalData
        private int _DecalDataLocation => _DATALocation!.Value + 0x54;
        private bool _DecalData_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Projectile.DATADataType.Break0);
        public IFormLink<ITextureSetGetter> DecalData => _DecalData_IsSet ? new FormLink<ITextureSetGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_DecalDataLocation, 0x4)))) : FormLink<ITextureSetGetter>.Null;
        #endregion
        #region CollisionLayer
        private int _CollisionLayerLocation => _DATALocation!.Value + 0x58;
        private bool _CollisionLayer_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Projectile.DATADataType.Break1);
        public IFormLink<ICollisionLayerGetter> CollisionLayer => _CollisionLayer_IsSet ? new FormLink<ICollisionLayerGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_CollisionLayerLocation, 0x4)))) : FormLink<ICollisionLayerGetter>.Null;
        #endregion
        #region MuzzleFlashModel
        private int? _MuzzleFlashModelLocation;
        public String MuzzleFlashModel => _MuzzleFlashModelLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _MuzzleFlashModelLocation.Value, _package.MetaData.Constants)) : string.Empty;
        #endregion
        #region TextureFilesHashes
        private int? _TextureFilesHashesLocation;
        public ReadOnlyMemorySlice<Byte>? TextureFilesHashes => _TextureFilesHashesLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _TextureFilesHashesLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region SoundLevel
        private int? _SoundLevelLocation;
        public UInt32 SoundLevel => _SoundLevelLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _SoundLevelLocation.Value, _package.MetaData.Constants)) : default;
        #endregion
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ProjectileBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ProjectileBinaryOverlay ProjectileFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.MetaData.Constants);
            var ret = new ProjectileBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ProjectileBinaryOverlay ProjectileFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ProjectileFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x444E424F: // OBND
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.ObjectBounds);
                }
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.Model);
                }
                case 0x54534544: // DEST
                case 0x44545344: // DSTD
                case 0x4C444D44: // DMDL
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.Destructible);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    var subLen = _package.MetaData.Constants.Subrecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x54)
                    {
                        this.DATADataTypeState |= Projectile.DATADataType.Break0;
                    }
                    if (subLen <= 0x58)
                    {
                        this.DATADataTypeState |= Projectile.DATADataType.Break1;
                    }
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.CollisionLayer);
                }
                case 0x314D414E: // NAM1
                {
                    _MuzzleFlashModelLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.MuzzleFlashModel);
                }
                case 0x324D414E: // NAM2
                {
                    _TextureFilesHashesLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.TextureFilesHashes);
                }
                case 0x4D414E56: // VNAM
                {
                    _SoundLevelLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Projectile_FieldIndex.SoundLevel);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ProjectileMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

