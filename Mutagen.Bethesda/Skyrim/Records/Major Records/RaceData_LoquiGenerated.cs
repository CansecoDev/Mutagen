/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class RaceData :
        IRaceData,
        ILoquiObjectSetter<RaceData>,
        IEquatable<RaceData>,
        IEqualsMask
    {
        #region Ctor
        public RaceData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SkillBoost0
        public SkillBoost SkillBoost0 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceDataGetter.SkillBoost0 => SkillBoost0;
        #endregion
        #region SkillBoost1
        public SkillBoost SkillBoost1 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceDataGetter.SkillBoost1 => SkillBoost1;
        #endregion
        #region SkillBoost2
        public SkillBoost SkillBoost2 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceDataGetter.SkillBoost2 => SkillBoost2;
        #endregion
        #region SkillBoost3
        public SkillBoost SkillBoost3 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceDataGetter.SkillBoost3 => SkillBoost3;
        #endregion
        #region SkillBoost4
        public SkillBoost SkillBoost4 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceDataGetter.SkillBoost4 => SkillBoost4;
        #endregion
        #region SkillBoost5
        public SkillBoost SkillBoost5 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceDataGetter.SkillBoost5 => SkillBoost5;
        #endregion
        #region SkillBoost6
        public SkillBoost SkillBoost6 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceDataGetter.SkillBoost6 => SkillBoost6;
        #endregion
        #region Unknown
        public Int16 Unknown { get; set; } = default;
        #endregion
        #region Height
        public GenderedItem<Single> Height { get; set; } = new GenderedItem<Single>(default, default);
        IGenderedItemGetter<Single> IRaceDataGetter.Height => this.Height;
        #endregion
        #region Weight
        public GenderedItem<Single> Weight { get; set; } = new GenderedItem<Single>(default, default);
        IGenderedItemGetter<Single> IRaceDataGetter.Weight => this.Weight;
        #endregion
        #region Flags
        public RaceData.Flag Flags { get; set; } = default;
        #endregion
        #region StartingHealth
        public Single StartingHealth { get; set; } = default;
        #endregion
        #region StartingMagicka
        public Single StartingMagicka { get; set; } = default;
        #endregion
        #region StartingStamina
        public Single StartingStamina { get; set; } = default;
        #endregion
        #region BaseCarryWeight
        public Single BaseCarryWeight { get; set; } = default;
        #endregion
        #region BaseMass
        public Single BaseMass { get; set; } = default;
        #endregion
        #region AccelerationRate
        public Single AccelerationRate { get; set; } = default;
        #endregion
        #region DecelerationRate
        public Single DecelerationRate { get; set; } = default;
        #endregion
        #region Size
        public Race.Size Size { get; set; } = default;
        #endregion
        #region HeadBipedObject
        public readonly static BipedObject _HeadBipedObject_Default = BipedObject.None;
        public BipedObject HeadBipedObject { get; set; } = default;
        #endregion
        #region HairBipedObject
        public readonly static BipedObject _HairBipedObject_Default = BipedObject.None;
        public BipedObject HairBipedObject { get; set; } = default;
        #endregion
        #region InjuredHealthPercent
        public Single InjuredHealthPercent { get; set; } = default;
        #endregion
        #region ShieldBipedObject
        public readonly static BipedObject _ShieldBipedObject_Default = BipedObject.None;
        public BipedObject ShieldBipedObject { get; set; } = default;
        #endregion
        #region HealthRegen
        public Single HealthRegen { get; set; } = default;
        #endregion
        #region MagickaRegen
        public Single MagickaRegen { get; set; } = default;
        #endregion
        #region StaminaRegen
        public Single StaminaRegen { get; set; } = default;
        #endregion
        #region UnarmedDamage
        public Single UnarmedDamage { get; set; } = default;
        #endregion
        #region UnarmedReach
        public Single UnarmedReach { get; set; } = default;
        #endregion
        #region BodyBipedObject
        public readonly static BipedObject _BodyBipedObject_Default = BipedObject.None;
        public BipedObject BodyBipedObject { get; set; } = default;
        #endregion
        #region AimAngleTolerance
        public Single AimAngleTolerance { get; set; } = default;
        #endregion
        #region FlightRadius
        public Single FlightRadius { get; set; } = default;
        #endregion
        #region AngularAccelerationRate
        public Single AngularAccelerationRate { get; set; } = default;
        #endregion
        #region AngularTolerance
        public Single AngularTolerance { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRaceDataGetter rhs)) return false;
            return ((RaceDataCommon)((IRaceDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(RaceData obj)
        {
            return ((RaceDataCommon)((IRaceDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RaceDataCommon)((IRaceDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => RaceDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RaceDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static RaceData CreateFromXml(
            XElement node,
            RaceData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RaceData CreateFromXml(
            XElement node,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RaceData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RaceData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new RaceData();
            ((RaceDataSetterCommon)((IRaceDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static RaceData CreateFromXml(
            string path,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static RaceData CreateFromXml(
            string path,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RaceData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RaceData CreateFromXml(
            Stream stream,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static RaceData CreateFromXml(
            Stream stream,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RaceData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.SkillBoost0 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost1 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost2 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost3 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost4 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost5 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost6 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.Unknown = initialValue;
                this.Height = new GenderedItem<TItem>(initialValue, initialValue);
                this.Weight = new GenderedItem<TItem>(initialValue, initialValue);
                this.Flags = initialValue;
                this.StartingHealth = initialValue;
                this.StartingMagicka = initialValue;
                this.StartingStamina = initialValue;
                this.BaseCarryWeight = initialValue;
                this.BaseMass = initialValue;
                this.AccelerationRate = initialValue;
                this.DecelerationRate = initialValue;
                this.Size = initialValue;
                this.HeadBipedObject = initialValue;
                this.HairBipedObject = initialValue;
                this.InjuredHealthPercent = initialValue;
                this.ShieldBipedObject = initialValue;
                this.HealthRegen = initialValue;
                this.MagickaRegen = initialValue;
                this.StaminaRegen = initialValue;
                this.UnarmedDamage = initialValue;
                this.UnarmedReach = initialValue;
                this.BodyBipedObject = initialValue;
                this.AimAngleTolerance = initialValue;
                this.FlightRadius = initialValue;
                this.AngularAccelerationRate = initialValue;
                this.AngularTolerance = initialValue;
            }

            public Mask(
                TItem SkillBoost0,
                TItem SkillBoost1,
                TItem SkillBoost2,
                TItem SkillBoost3,
                TItem SkillBoost4,
                TItem SkillBoost5,
                TItem SkillBoost6,
                TItem Unknown,
                TItem Height,
                TItem Weight,
                TItem Flags,
                TItem StartingHealth,
                TItem StartingMagicka,
                TItem StartingStamina,
                TItem BaseCarryWeight,
                TItem BaseMass,
                TItem AccelerationRate,
                TItem DecelerationRate,
                TItem Size,
                TItem HeadBipedObject,
                TItem HairBipedObject,
                TItem InjuredHealthPercent,
                TItem ShieldBipedObject,
                TItem HealthRegen,
                TItem MagickaRegen,
                TItem StaminaRegen,
                TItem UnarmedDamage,
                TItem UnarmedReach,
                TItem BodyBipedObject,
                TItem AimAngleTolerance,
                TItem FlightRadius,
                TItem AngularAccelerationRate,
                TItem AngularTolerance)
            {
                this.SkillBoost0 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost0, new SkillBoost.Mask<TItem>(SkillBoost0));
                this.SkillBoost1 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost1, new SkillBoost.Mask<TItem>(SkillBoost1));
                this.SkillBoost2 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost2, new SkillBoost.Mask<TItem>(SkillBoost2));
                this.SkillBoost3 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost3, new SkillBoost.Mask<TItem>(SkillBoost3));
                this.SkillBoost4 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost4, new SkillBoost.Mask<TItem>(SkillBoost4));
                this.SkillBoost5 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost5, new SkillBoost.Mask<TItem>(SkillBoost5));
                this.SkillBoost6 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost6, new SkillBoost.Mask<TItem>(SkillBoost6));
                this.Unknown = Unknown;
                this.Height = new GenderedItem<TItem>(Height, Height);
                this.Weight = new GenderedItem<TItem>(Weight, Weight);
                this.Flags = Flags;
                this.StartingHealth = StartingHealth;
                this.StartingMagicka = StartingMagicka;
                this.StartingStamina = StartingStamina;
                this.BaseCarryWeight = BaseCarryWeight;
                this.BaseMass = BaseMass;
                this.AccelerationRate = AccelerationRate;
                this.DecelerationRate = DecelerationRate;
                this.Size = Size;
                this.HeadBipedObject = HeadBipedObject;
                this.HairBipedObject = HairBipedObject;
                this.InjuredHealthPercent = InjuredHealthPercent;
                this.ShieldBipedObject = ShieldBipedObject;
                this.HealthRegen = HealthRegen;
                this.MagickaRegen = MagickaRegen;
                this.StaminaRegen = StaminaRegen;
                this.UnarmedDamage = UnarmedDamage;
                this.UnarmedReach = UnarmedReach;
                this.BodyBipedObject = BodyBipedObject;
                this.AimAngleTolerance = AimAngleTolerance;
                this.FlightRadius = FlightRadius;
                this.AngularAccelerationRate = AngularAccelerationRate;
                this.AngularTolerance = AngularTolerance;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost0 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost1 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost2 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost3 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost4 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost5 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost6 { get; set; }
            public TItem Unknown;
            public GenderedItem<TItem> Height;
            public GenderedItem<TItem> Weight;
            public TItem Flags;
            public TItem StartingHealth;
            public TItem StartingMagicka;
            public TItem StartingStamina;
            public TItem BaseCarryWeight;
            public TItem BaseMass;
            public TItem AccelerationRate;
            public TItem DecelerationRate;
            public TItem Size;
            public TItem HeadBipedObject;
            public TItem HairBipedObject;
            public TItem InjuredHealthPercent;
            public TItem ShieldBipedObject;
            public TItem HealthRegen;
            public TItem MagickaRegen;
            public TItem StaminaRegen;
            public TItem UnarmedDamage;
            public TItem UnarmedReach;
            public TItem BodyBipedObject;
            public TItem AimAngleTolerance;
            public TItem FlightRadius;
            public TItem AngularAccelerationRate;
            public TItem AngularTolerance;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.SkillBoost0, rhs.SkillBoost0)) return false;
                if (!object.Equals(this.SkillBoost1, rhs.SkillBoost1)) return false;
                if (!object.Equals(this.SkillBoost2, rhs.SkillBoost2)) return false;
                if (!object.Equals(this.SkillBoost3, rhs.SkillBoost3)) return false;
                if (!object.Equals(this.SkillBoost4, rhs.SkillBoost4)) return false;
                if (!object.Equals(this.SkillBoost5, rhs.SkillBoost5)) return false;
                if (!object.Equals(this.SkillBoost6, rhs.SkillBoost6)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Height, rhs.Height)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.StartingHealth, rhs.StartingHealth)) return false;
                if (!object.Equals(this.StartingMagicka, rhs.StartingMagicka)) return false;
                if (!object.Equals(this.StartingStamina, rhs.StartingStamina)) return false;
                if (!object.Equals(this.BaseCarryWeight, rhs.BaseCarryWeight)) return false;
                if (!object.Equals(this.BaseMass, rhs.BaseMass)) return false;
                if (!object.Equals(this.AccelerationRate, rhs.AccelerationRate)) return false;
                if (!object.Equals(this.DecelerationRate, rhs.DecelerationRate)) return false;
                if (!object.Equals(this.Size, rhs.Size)) return false;
                if (!object.Equals(this.HeadBipedObject, rhs.HeadBipedObject)) return false;
                if (!object.Equals(this.HairBipedObject, rhs.HairBipedObject)) return false;
                if (!object.Equals(this.InjuredHealthPercent, rhs.InjuredHealthPercent)) return false;
                if (!object.Equals(this.ShieldBipedObject, rhs.ShieldBipedObject)) return false;
                if (!object.Equals(this.HealthRegen, rhs.HealthRegen)) return false;
                if (!object.Equals(this.MagickaRegen, rhs.MagickaRegen)) return false;
                if (!object.Equals(this.StaminaRegen, rhs.StaminaRegen)) return false;
                if (!object.Equals(this.UnarmedDamage, rhs.UnarmedDamage)) return false;
                if (!object.Equals(this.UnarmedReach, rhs.UnarmedReach)) return false;
                if (!object.Equals(this.BodyBipedObject, rhs.BodyBipedObject)) return false;
                if (!object.Equals(this.AimAngleTolerance, rhs.AimAngleTolerance)) return false;
                if (!object.Equals(this.FlightRadius, rhs.FlightRadius)) return false;
                if (!object.Equals(this.AngularAccelerationRate, rhs.AngularAccelerationRate)) return false;
                if (!object.Equals(this.AngularTolerance, rhs.AngularTolerance)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.SkillBoost0);
                hash.Add(this.SkillBoost1);
                hash.Add(this.SkillBoost2);
                hash.Add(this.SkillBoost3);
                hash.Add(this.SkillBoost4);
                hash.Add(this.SkillBoost5);
                hash.Add(this.SkillBoost6);
                hash.Add(this.Unknown);
                hash.Add(this.Height);
                hash.Add(this.Weight);
                hash.Add(this.Flags);
                hash.Add(this.StartingHealth);
                hash.Add(this.StartingMagicka);
                hash.Add(this.StartingStamina);
                hash.Add(this.BaseCarryWeight);
                hash.Add(this.BaseMass);
                hash.Add(this.AccelerationRate);
                hash.Add(this.DecelerationRate);
                hash.Add(this.Size);
                hash.Add(this.HeadBipedObject);
                hash.Add(this.HairBipedObject);
                hash.Add(this.InjuredHealthPercent);
                hash.Add(this.ShieldBipedObject);
                hash.Add(this.HealthRegen);
                hash.Add(this.MagickaRegen);
                hash.Add(this.StaminaRegen);
                hash.Add(this.UnarmedDamage);
                hash.Add(this.UnarmedReach);
                hash.Add(this.BodyBipedObject);
                hash.Add(this.AimAngleTolerance);
                hash.Add(this.FlightRadius);
                hash.Add(this.AngularAccelerationRate);
                hash.Add(this.AngularTolerance);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (SkillBoost0 != null)
                {
                    if (!eval(this.SkillBoost0.Overall)) return false;
                    if (this.SkillBoost0.Specific != null && !this.SkillBoost0.Specific.All(eval)) return false;
                }
                if (SkillBoost1 != null)
                {
                    if (!eval(this.SkillBoost1.Overall)) return false;
                    if (this.SkillBoost1.Specific != null && !this.SkillBoost1.Specific.All(eval)) return false;
                }
                if (SkillBoost2 != null)
                {
                    if (!eval(this.SkillBoost2.Overall)) return false;
                    if (this.SkillBoost2.Specific != null && !this.SkillBoost2.Specific.All(eval)) return false;
                }
                if (SkillBoost3 != null)
                {
                    if (!eval(this.SkillBoost3.Overall)) return false;
                    if (this.SkillBoost3.Specific != null && !this.SkillBoost3.Specific.All(eval)) return false;
                }
                if (SkillBoost4 != null)
                {
                    if (!eval(this.SkillBoost4.Overall)) return false;
                    if (this.SkillBoost4.Specific != null && !this.SkillBoost4.Specific.All(eval)) return false;
                }
                if (SkillBoost5 != null)
                {
                    if (!eval(this.SkillBoost5.Overall)) return false;
                    if (this.SkillBoost5.Specific != null && !this.SkillBoost5.Specific.All(eval)) return false;
                }
                if (SkillBoost6 != null)
                {
                    if (!eval(this.SkillBoost6.Overall)) return false;
                    if (this.SkillBoost6.Specific != null && !this.SkillBoost6.Specific.All(eval)) return false;
                }
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Height.Male) || !eval(this.Height.Female)) return false;
                if (!eval(this.Weight.Male) || !eval(this.Weight.Female)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.StartingHealth)) return false;
                if (!eval(this.StartingMagicka)) return false;
                if (!eval(this.StartingStamina)) return false;
                if (!eval(this.BaseCarryWeight)) return false;
                if (!eval(this.BaseMass)) return false;
                if (!eval(this.AccelerationRate)) return false;
                if (!eval(this.DecelerationRate)) return false;
                if (!eval(this.Size)) return false;
                if (!eval(this.HeadBipedObject)) return false;
                if (!eval(this.HairBipedObject)) return false;
                if (!eval(this.InjuredHealthPercent)) return false;
                if (!eval(this.ShieldBipedObject)) return false;
                if (!eval(this.HealthRegen)) return false;
                if (!eval(this.MagickaRegen)) return false;
                if (!eval(this.StaminaRegen)) return false;
                if (!eval(this.UnarmedDamage)) return false;
                if (!eval(this.UnarmedReach)) return false;
                if (!eval(this.BodyBipedObject)) return false;
                if (!eval(this.AimAngleTolerance)) return false;
                if (!eval(this.FlightRadius)) return false;
                if (!eval(this.AngularAccelerationRate)) return false;
                if (!eval(this.AngularTolerance)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (SkillBoost0 != null)
                {
                    if (eval(this.SkillBoost0.Overall)) return true;
                    if (this.SkillBoost0.Specific != null && this.SkillBoost0.Specific.Any(eval)) return true;
                }
                if (SkillBoost1 != null)
                {
                    if (eval(this.SkillBoost1.Overall)) return true;
                    if (this.SkillBoost1.Specific != null && this.SkillBoost1.Specific.Any(eval)) return true;
                }
                if (SkillBoost2 != null)
                {
                    if (eval(this.SkillBoost2.Overall)) return true;
                    if (this.SkillBoost2.Specific != null && this.SkillBoost2.Specific.Any(eval)) return true;
                }
                if (SkillBoost3 != null)
                {
                    if (eval(this.SkillBoost3.Overall)) return true;
                    if (this.SkillBoost3.Specific != null && this.SkillBoost3.Specific.Any(eval)) return true;
                }
                if (SkillBoost4 != null)
                {
                    if (eval(this.SkillBoost4.Overall)) return true;
                    if (this.SkillBoost4.Specific != null && this.SkillBoost4.Specific.Any(eval)) return true;
                }
                if (SkillBoost5 != null)
                {
                    if (eval(this.SkillBoost5.Overall)) return true;
                    if (this.SkillBoost5.Specific != null && this.SkillBoost5.Specific.Any(eval)) return true;
                }
                if (SkillBoost6 != null)
                {
                    if (eval(this.SkillBoost6.Overall)) return true;
                    if (this.SkillBoost6.Specific != null && this.SkillBoost6.Specific.Any(eval)) return true;
                }
                if (eval(this.Unknown)) return true;
                if (eval(this.Height.Male) || eval(this.Height.Female)) return true;
                if (eval(this.Weight.Male) || eval(this.Weight.Female)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.StartingHealth)) return true;
                if (eval(this.StartingMagicka)) return true;
                if (eval(this.StartingStamina)) return true;
                if (eval(this.BaseCarryWeight)) return true;
                if (eval(this.BaseMass)) return true;
                if (eval(this.AccelerationRate)) return true;
                if (eval(this.DecelerationRate)) return true;
                if (eval(this.Size)) return true;
                if (eval(this.HeadBipedObject)) return true;
                if (eval(this.HairBipedObject)) return true;
                if (eval(this.InjuredHealthPercent)) return true;
                if (eval(this.ShieldBipedObject)) return true;
                if (eval(this.HealthRegen)) return true;
                if (eval(this.MagickaRegen)) return true;
                if (eval(this.StaminaRegen)) return true;
                if (eval(this.UnarmedDamage)) return true;
                if (eval(this.UnarmedReach)) return true;
                if (eval(this.BodyBipedObject)) return true;
                if (eval(this.AimAngleTolerance)) return true;
                if (eval(this.FlightRadius)) return true;
                if (eval(this.AngularAccelerationRate)) return true;
                if (eval(this.AngularTolerance)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new RaceData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.SkillBoost0 = this.SkillBoost0 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost0.Overall), this.SkillBoost0.Specific?.Translate(eval));
                obj.SkillBoost1 = this.SkillBoost1 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost1.Overall), this.SkillBoost1.Specific?.Translate(eval));
                obj.SkillBoost2 = this.SkillBoost2 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost2.Overall), this.SkillBoost2.Specific?.Translate(eval));
                obj.SkillBoost3 = this.SkillBoost3 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost3.Overall), this.SkillBoost3.Specific?.Translate(eval));
                obj.SkillBoost4 = this.SkillBoost4 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost4.Overall), this.SkillBoost4.Specific?.Translate(eval));
                obj.SkillBoost5 = this.SkillBoost5 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost5.Overall), this.SkillBoost5.Specific?.Translate(eval));
                obj.SkillBoost6 = this.SkillBoost6 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost6.Overall), this.SkillBoost6.Specific?.Translate(eval));
                obj.Unknown = eval(this.Unknown);
                obj.Height = new GenderedItem<R>(
                    eval(this.Height.Male),
                    eval(this.Height.Female));
                obj.Weight = new GenderedItem<R>(
                    eval(this.Weight.Male),
                    eval(this.Weight.Female));
                obj.Flags = eval(this.Flags);
                obj.StartingHealth = eval(this.StartingHealth);
                obj.StartingMagicka = eval(this.StartingMagicka);
                obj.StartingStamina = eval(this.StartingStamina);
                obj.BaseCarryWeight = eval(this.BaseCarryWeight);
                obj.BaseMass = eval(this.BaseMass);
                obj.AccelerationRate = eval(this.AccelerationRate);
                obj.DecelerationRate = eval(this.DecelerationRate);
                obj.Size = eval(this.Size);
                obj.HeadBipedObject = eval(this.HeadBipedObject);
                obj.HairBipedObject = eval(this.HairBipedObject);
                obj.InjuredHealthPercent = eval(this.InjuredHealthPercent);
                obj.ShieldBipedObject = eval(this.ShieldBipedObject);
                obj.HealthRegen = eval(this.HealthRegen);
                obj.MagickaRegen = eval(this.MagickaRegen);
                obj.StaminaRegen = eval(this.StaminaRegen);
                obj.UnarmedDamage = eval(this.UnarmedDamage);
                obj.UnarmedReach = eval(this.UnarmedReach);
                obj.BodyBipedObject = eval(this.BodyBipedObject);
                obj.AimAngleTolerance = eval(this.AimAngleTolerance);
                obj.FlightRadius = eval(this.FlightRadius);
                obj.AngularAccelerationRate = eval(this.AngularAccelerationRate);
                obj.AngularTolerance = eval(this.AngularTolerance);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(RaceData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, RaceData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(RaceData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.SkillBoost0?.Overall ?? true)
                    {
                        SkillBoost0?.ToString(fg);
                    }
                    if (printMask?.SkillBoost1?.Overall ?? true)
                    {
                        SkillBoost1?.ToString(fg);
                    }
                    if (printMask?.SkillBoost2?.Overall ?? true)
                    {
                        SkillBoost2?.ToString(fg);
                    }
                    if (printMask?.SkillBoost3?.Overall ?? true)
                    {
                        SkillBoost3?.ToString(fg);
                    }
                    if (printMask?.SkillBoost4?.Overall ?? true)
                    {
                        SkillBoost4?.ToString(fg);
                    }
                    if (printMask?.SkillBoost5?.Overall ?? true)
                    {
                        SkillBoost5?.ToString(fg);
                    }
                    if (printMask?.SkillBoost6?.Overall ?? true)
                    {
                        SkillBoost6?.ToString(fg);
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if ((true))
                    {
                        fg.AppendLine($"Height => {Height}");
                    }
                    if ((true))
                    {
                        fg.AppendLine($"Weight => {Weight}");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.StartingHealth ?? true)
                    {
                        fg.AppendItem(StartingHealth, "StartingHealth");
                    }
                    if (printMask?.StartingMagicka ?? true)
                    {
                        fg.AppendItem(StartingMagicka, "StartingMagicka");
                    }
                    if (printMask?.StartingStamina ?? true)
                    {
                        fg.AppendItem(StartingStamina, "StartingStamina");
                    }
                    if (printMask?.BaseCarryWeight ?? true)
                    {
                        fg.AppendItem(BaseCarryWeight, "BaseCarryWeight");
                    }
                    if (printMask?.BaseMass ?? true)
                    {
                        fg.AppendItem(BaseMass, "BaseMass");
                    }
                    if (printMask?.AccelerationRate ?? true)
                    {
                        fg.AppendItem(AccelerationRate, "AccelerationRate");
                    }
                    if (printMask?.DecelerationRate ?? true)
                    {
                        fg.AppendItem(DecelerationRate, "DecelerationRate");
                    }
                    if (printMask?.Size ?? true)
                    {
                        fg.AppendItem(Size, "Size");
                    }
                    if (printMask?.HeadBipedObject ?? true)
                    {
                        fg.AppendItem(HeadBipedObject, "HeadBipedObject");
                    }
                    if (printMask?.HairBipedObject ?? true)
                    {
                        fg.AppendItem(HairBipedObject, "HairBipedObject");
                    }
                    if (printMask?.InjuredHealthPercent ?? true)
                    {
                        fg.AppendItem(InjuredHealthPercent, "InjuredHealthPercent");
                    }
                    if (printMask?.ShieldBipedObject ?? true)
                    {
                        fg.AppendItem(ShieldBipedObject, "ShieldBipedObject");
                    }
                    if (printMask?.HealthRegen ?? true)
                    {
                        fg.AppendItem(HealthRegen, "HealthRegen");
                    }
                    if (printMask?.MagickaRegen ?? true)
                    {
                        fg.AppendItem(MagickaRegen, "MagickaRegen");
                    }
                    if (printMask?.StaminaRegen ?? true)
                    {
                        fg.AppendItem(StaminaRegen, "StaminaRegen");
                    }
                    if (printMask?.UnarmedDamage ?? true)
                    {
                        fg.AppendItem(UnarmedDamage, "UnarmedDamage");
                    }
                    if (printMask?.UnarmedReach ?? true)
                    {
                        fg.AppendItem(UnarmedReach, "UnarmedReach");
                    }
                    if (printMask?.BodyBipedObject ?? true)
                    {
                        fg.AppendItem(BodyBipedObject, "BodyBipedObject");
                    }
                    if (printMask?.AimAngleTolerance ?? true)
                    {
                        fg.AppendItem(AimAngleTolerance, "AimAngleTolerance");
                    }
                    if (printMask?.FlightRadius ?? true)
                    {
                        fg.AppendItem(FlightRadius, "FlightRadius");
                    }
                    if (printMask?.AngularAccelerationRate ?? true)
                    {
                        fg.AppendItem(AngularAccelerationRate, "AngularAccelerationRate");
                    }
                    if (printMask?.AngularTolerance ?? true)
                    {
                        fg.AppendItem(AngularTolerance, "AngularTolerance");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost0;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost1;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost2;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost3;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost4;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost5;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost6;
            public Exception? Unknown;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Height;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Weight;
            public Exception? Flags;
            public Exception? StartingHealth;
            public Exception? StartingMagicka;
            public Exception? StartingStamina;
            public Exception? BaseCarryWeight;
            public Exception? BaseMass;
            public Exception? AccelerationRate;
            public Exception? DecelerationRate;
            public Exception? Size;
            public Exception? HeadBipedObject;
            public Exception? HairBipedObject;
            public Exception? InjuredHealthPercent;
            public Exception? ShieldBipedObject;
            public Exception? HealthRegen;
            public Exception? MagickaRegen;
            public Exception? StaminaRegen;
            public Exception? UnarmedDamage;
            public Exception? UnarmedReach;
            public Exception? BodyBipedObject;
            public Exception? AimAngleTolerance;
            public Exception? FlightRadius;
            public Exception? AngularAccelerationRate;
            public Exception? AngularTolerance;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
                switch (enu)
                {
                    case RaceData_FieldIndex.SkillBoost0:
                        return SkillBoost0;
                    case RaceData_FieldIndex.SkillBoost1:
                        return SkillBoost1;
                    case RaceData_FieldIndex.SkillBoost2:
                        return SkillBoost2;
                    case RaceData_FieldIndex.SkillBoost3:
                        return SkillBoost3;
                    case RaceData_FieldIndex.SkillBoost4:
                        return SkillBoost4;
                    case RaceData_FieldIndex.SkillBoost5:
                        return SkillBoost5;
                    case RaceData_FieldIndex.SkillBoost6:
                        return SkillBoost6;
                    case RaceData_FieldIndex.Unknown:
                        return Unknown;
                    case RaceData_FieldIndex.Height:
                        return Height;
                    case RaceData_FieldIndex.Weight:
                        return Weight;
                    case RaceData_FieldIndex.Flags:
                        return Flags;
                    case RaceData_FieldIndex.StartingHealth:
                        return StartingHealth;
                    case RaceData_FieldIndex.StartingMagicka:
                        return StartingMagicka;
                    case RaceData_FieldIndex.StartingStamina:
                        return StartingStamina;
                    case RaceData_FieldIndex.BaseCarryWeight:
                        return BaseCarryWeight;
                    case RaceData_FieldIndex.BaseMass:
                        return BaseMass;
                    case RaceData_FieldIndex.AccelerationRate:
                        return AccelerationRate;
                    case RaceData_FieldIndex.DecelerationRate:
                        return DecelerationRate;
                    case RaceData_FieldIndex.Size:
                        return Size;
                    case RaceData_FieldIndex.HeadBipedObject:
                        return HeadBipedObject;
                    case RaceData_FieldIndex.HairBipedObject:
                        return HairBipedObject;
                    case RaceData_FieldIndex.InjuredHealthPercent:
                        return InjuredHealthPercent;
                    case RaceData_FieldIndex.ShieldBipedObject:
                        return ShieldBipedObject;
                    case RaceData_FieldIndex.HealthRegen:
                        return HealthRegen;
                    case RaceData_FieldIndex.MagickaRegen:
                        return MagickaRegen;
                    case RaceData_FieldIndex.StaminaRegen:
                        return StaminaRegen;
                    case RaceData_FieldIndex.UnarmedDamage:
                        return UnarmedDamage;
                    case RaceData_FieldIndex.UnarmedReach:
                        return UnarmedReach;
                    case RaceData_FieldIndex.BodyBipedObject:
                        return BodyBipedObject;
                    case RaceData_FieldIndex.AimAngleTolerance:
                        return AimAngleTolerance;
                    case RaceData_FieldIndex.FlightRadius:
                        return FlightRadius;
                    case RaceData_FieldIndex.AngularAccelerationRate:
                        return AngularAccelerationRate;
                    case RaceData_FieldIndex.AngularTolerance:
                        return AngularTolerance;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
                switch (enu)
                {
                    case RaceData_FieldIndex.SkillBoost0:
                        this.SkillBoost0 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case RaceData_FieldIndex.SkillBoost1:
                        this.SkillBoost1 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case RaceData_FieldIndex.SkillBoost2:
                        this.SkillBoost2 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case RaceData_FieldIndex.SkillBoost3:
                        this.SkillBoost3 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case RaceData_FieldIndex.SkillBoost4:
                        this.SkillBoost4 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case RaceData_FieldIndex.SkillBoost5:
                        this.SkillBoost5 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case RaceData_FieldIndex.SkillBoost6:
                        this.SkillBoost6 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case RaceData_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case RaceData_FieldIndex.Height:
                        this.Height = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case RaceData_FieldIndex.Weight:
                        this.Weight = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case RaceData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case RaceData_FieldIndex.StartingHealth:
                        this.StartingHealth = ex;
                        break;
                    case RaceData_FieldIndex.StartingMagicka:
                        this.StartingMagicka = ex;
                        break;
                    case RaceData_FieldIndex.StartingStamina:
                        this.StartingStamina = ex;
                        break;
                    case RaceData_FieldIndex.BaseCarryWeight:
                        this.BaseCarryWeight = ex;
                        break;
                    case RaceData_FieldIndex.BaseMass:
                        this.BaseMass = ex;
                        break;
                    case RaceData_FieldIndex.AccelerationRate:
                        this.AccelerationRate = ex;
                        break;
                    case RaceData_FieldIndex.DecelerationRate:
                        this.DecelerationRate = ex;
                        break;
                    case RaceData_FieldIndex.Size:
                        this.Size = ex;
                        break;
                    case RaceData_FieldIndex.HeadBipedObject:
                        this.HeadBipedObject = ex;
                        break;
                    case RaceData_FieldIndex.HairBipedObject:
                        this.HairBipedObject = ex;
                        break;
                    case RaceData_FieldIndex.InjuredHealthPercent:
                        this.InjuredHealthPercent = ex;
                        break;
                    case RaceData_FieldIndex.ShieldBipedObject:
                        this.ShieldBipedObject = ex;
                        break;
                    case RaceData_FieldIndex.HealthRegen:
                        this.HealthRegen = ex;
                        break;
                    case RaceData_FieldIndex.MagickaRegen:
                        this.MagickaRegen = ex;
                        break;
                    case RaceData_FieldIndex.StaminaRegen:
                        this.StaminaRegen = ex;
                        break;
                    case RaceData_FieldIndex.UnarmedDamage:
                        this.UnarmedDamage = ex;
                        break;
                    case RaceData_FieldIndex.UnarmedReach:
                        this.UnarmedReach = ex;
                        break;
                    case RaceData_FieldIndex.BodyBipedObject:
                        this.BodyBipedObject = ex;
                        break;
                    case RaceData_FieldIndex.AimAngleTolerance:
                        this.AimAngleTolerance = ex;
                        break;
                    case RaceData_FieldIndex.FlightRadius:
                        this.FlightRadius = ex;
                        break;
                    case RaceData_FieldIndex.AngularAccelerationRate:
                        this.AngularAccelerationRate = ex;
                        break;
                    case RaceData_FieldIndex.AngularTolerance:
                        this.AngularTolerance = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
                switch (enu)
                {
                    case RaceData_FieldIndex.SkillBoost0:
                        this.SkillBoost0 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case RaceData_FieldIndex.SkillBoost1:
                        this.SkillBoost1 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case RaceData_FieldIndex.SkillBoost2:
                        this.SkillBoost2 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case RaceData_FieldIndex.SkillBoost3:
                        this.SkillBoost3 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case RaceData_FieldIndex.SkillBoost4:
                        this.SkillBoost4 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case RaceData_FieldIndex.SkillBoost5:
                        this.SkillBoost5 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case RaceData_FieldIndex.SkillBoost6:
                        this.SkillBoost6 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case RaceData_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.Height:
                        this.Height = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case RaceData_FieldIndex.Weight:
                        this.Weight = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case RaceData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.StartingHealth:
                        this.StartingHealth = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.StartingMagicka:
                        this.StartingMagicka = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.StartingStamina:
                        this.StartingStamina = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.BaseCarryWeight:
                        this.BaseCarryWeight = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.BaseMass:
                        this.BaseMass = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.AccelerationRate:
                        this.AccelerationRate = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.DecelerationRate:
                        this.DecelerationRate = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.Size:
                        this.Size = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.HeadBipedObject:
                        this.HeadBipedObject = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.HairBipedObject:
                        this.HairBipedObject = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.InjuredHealthPercent:
                        this.InjuredHealthPercent = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.ShieldBipedObject:
                        this.ShieldBipedObject = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.HealthRegen:
                        this.HealthRegen = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.MagickaRegen:
                        this.MagickaRegen = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.StaminaRegen:
                        this.StaminaRegen = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.UnarmedDamage:
                        this.UnarmedDamage = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.UnarmedReach:
                        this.UnarmedReach = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.BodyBipedObject:
                        this.BodyBipedObject = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.AimAngleTolerance:
                        this.AimAngleTolerance = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.FlightRadius:
                        this.FlightRadius = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.AngularAccelerationRate:
                        this.AngularAccelerationRate = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.AngularTolerance:
                        this.AngularTolerance = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (SkillBoost0 != null) return true;
                if (SkillBoost1 != null) return true;
                if (SkillBoost2 != null) return true;
                if (SkillBoost3 != null) return true;
                if (SkillBoost4 != null) return true;
                if (SkillBoost5 != null) return true;
                if (SkillBoost6 != null) return true;
                if (Unknown != null) return true;
                if (Height != null) return true;
                if (Weight != null) return true;
                if (Flags != null) return true;
                if (StartingHealth != null) return true;
                if (StartingMagicka != null) return true;
                if (StartingStamina != null) return true;
                if (BaseCarryWeight != null) return true;
                if (BaseMass != null) return true;
                if (AccelerationRate != null) return true;
                if (DecelerationRate != null) return true;
                if (Size != null) return true;
                if (HeadBipedObject != null) return true;
                if (HairBipedObject != null) return true;
                if (InjuredHealthPercent != null) return true;
                if (ShieldBipedObject != null) return true;
                if (HealthRegen != null) return true;
                if (MagickaRegen != null) return true;
                if (StaminaRegen != null) return true;
                if (UnarmedDamage != null) return true;
                if (UnarmedReach != null) return true;
                if (BodyBipedObject != null) return true;
                if (AimAngleTolerance != null) return true;
                if (FlightRadius != null) return true;
                if (AngularAccelerationRate != null) return true;
                if (AngularTolerance != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                SkillBoost0?.ToString(fg);
                SkillBoost1?.ToString(fg);
                SkillBoost2?.ToString(fg);
                SkillBoost3?.ToString(fg);
                SkillBoost4?.ToString(fg);
                SkillBoost5?.ToString(fg);
                SkillBoost6?.ToString(fg);
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendLine($"Height => {Height}");
                fg.AppendLine($"Weight => {Weight}");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(StartingHealth, "StartingHealth");
                fg.AppendItem(StartingMagicka, "StartingMagicka");
                fg.AppendItem(StartingStamina, "StartingStamina");
                fg.AppendItem(BaseCarryWeight, "BaseCarryWeight");
                fg.AppendItem(BaseMass, "BaseMass");
                fg.AppendItem(AccelerationRate, "AccelerationRate");
                fg.AppendItem(DecelerationRate, "DecelerationRate");
                fg.AppendItem(Size, "Size");
                fg.AppendItem(HeadBipedObject, "HeadBipedObject");
                fg.AppendItem(HairBipedObject, "HairBipedObject");
                fg.AppendItem(InjuredHealthPercent, "InjuredHealthPercent");
                fg.AppendItem(ShieldBipedObject, "ShieldBipedObject");
                fg.AppendItem(HealthRegen, "HealthRegen");
                fg.AppendItem(MagickaRegen, "MagickaRegen");
                fg.AppendItem(StaminaRegen, "StaminaRegen");
                fg.AppendItem(UnarmedDamage, "UnarmedDamage");
                fg.AppendItem(UnarmedReach, "UnarmedReach");
                fg.AppendItem(BodyBipedObject, "BodyBipedObject");
                fg.AppendItem(AimAngleTolerance, "AimAngleTolerance");
                fg.AppendItem(FlightRadius, "FlightRadius");
                fg.AppendItem(AngularAccelerationRate, "AngularAccelerationRate");
                fg.AppendItem(AngularTolerance, "AngularTolerance");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.SkillBoost0 = this.SkillBoost0.Combine(rhs.SkillBoost0, (l, r) => l.Combine(r));
                ret.SkillBoost1 = this.SkillBoost1.Combine(rhs.SkillBoost1, (l, r) => l.Combine(r));
                ret.SkillBoost2 = this.SkillBoost2.Combine(rhs.SkillBoost2, (l, r) => l.Combine(r));
                ret.SkillBoost3 = this.SkillBoost3.Combine(rhs.SkillBoost3, (l, r) => l.Combine(r));
                ret.SkillBoost4 = this.SkillBoost4.Combine(rhs.SkillBoost4, (l, r) => l.Combine(r));
                ret.SkillBoost5 = this.SkillBoost5.Combine(rhs.SkillBoost5, (l, r) => l.Combine(r));
                ret.SkillBoost6 = this.SkillBoost6.Combine(rhs.SkillBoost6, (l, r) => l.Combine(r));
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Height = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.Height?.Overall, rhs.Height?.Overall), GenderedItem.Combine(this.Height?.Specific, rhs.Height?.Specific));
                ret.Weight = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.Weight?.Overall, rhs.Weight?.Overall), GenderedItem.Combine(this.Weight?.Specific, rhs.Weight?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.StartingHealth = this.StartingHealth.Combine(rhs.StartingHealth);
                ret.StartingMagicka = this.StartingMagicka.Combine(rhs.StartingMagicka);
                ret.StartingStamina = this.StartingStamina.Combine(rhs.StartingStamina);
                ret.BaseCarryWeight = this.BaseCarryWeight.Combine(rhs.BaseCarryWeight);
                ret.BaseMass = this.BaseMass.Combine(rhs.BaseMass);
                ret.AccelerationRate = this.AccelerationRate.Combine(rhs.AccelerationRate);
                ret.DecelerationRate = this.DecelerationRate.Combine(rhs.DecelerationRate);
                ret.Size = this.Size.Combine(rhs.Size);
                ret.HeadBipedObject = this.HeadBipedObject.Combine(rhs.HeadBipedObject);
                ret.HairBipedObject = this.HairBipedObject.Combine(rhs.HairBipedObject);
                ret.InjuredHealthPercent = this.InjuredHealthPercent.Combine(rhs.InjuredHealthPercent);
                ret.ShieldBipedObject = this.ShieldBipedObject.Combine(rhs.ShieldBipedObject);
                ret.HealthRegen = this.HealthRegen.Combine(rhs.HealthRegen);
                ret.MagickaRegen = this.MagickaRegen.Combine(rhs.MagickaRegen);
                ret.StaminaRegen = this.StaminaRegen.Combine(rhs.StaminaRegen);
                ret.UnarmedDamage = this.UnarmedDamage.Combine(rhs.UnarmedDamage);
                ret.UnarmedReach = this.UnarmedReach.Combine(rhs.UnarmedReach);
                ret.BodyBipedObject = this.BodyBipedObject.Combine(rhs.BodyBipedObject);
                ret.AimAngleTolerance = this.AimAngleTolerance.Combine(rhs.AimAngleTolerance);
                ret.FlightRadius = this.FlightRadius.Combine(rhs.FlightRadius);
                ret.AngularAccelerationRate = this.AngularAccelerationRate.Combine(rhs.AngularAccelerationRate);
                ret.AngularTolerance = this.AngularTolerance.Combine(rhs.AngularTolerance);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost0;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost1;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost2;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost3;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost4;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost5;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost6;
            public bool Unknown;
            public MaskItem<bool, GenderedItem<bool>?> Height;
            public MaskItem<bool, GenderedItem<bool>?> Weight;
            public bool Flags;
            public bool StartingHealth;
            public bool StartingMagicka;
            public bool StartingStamina;
            public bool BaseCarryWeight;
            public bool BaseMass;
            public bool AccelerationRate;
            public bool DecelerationRate;
            public bool Size;
            public bool HeadBipedObject;
            public bool HairBipedObject;
            public bool InjuredHealthPercent;
            public bool ShieldBipedObject;
            public bool HealthRegen;
            public bool MagickaRegen;
            public bool StaminaRegen;
            public bool UnarmedDamage;
            public bool UnarmedReach;
            public bool BodyBipedObject;
            public bool AimAngleTolerance;
            public bool FlightRadius;
            public bool AngularAccelerationRate;
            public bool AngularTolerance;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.SkillBoost0 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost1 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost2 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost3 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost4 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost5 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost6 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.Unknown = defaultOn;
                this.Height = new MaskItem<bool, GenderedItem<bool>?>(defaultOn, default);
                this.Weight = new MaskItem<bool, GenderedItem<bool>?>(defaultOn, default);
                this.Flags = defaultOn;
                this.StartingHealth = defaultOn;
                this.StartingMagicka = defaultOn;
                this.StartingStamina = defaultOn;
                this.BaseCarryWeight = defaultOn;
                this.BaseMass = defaultOn;
                this.AccelerationRate = defaultOn;
                this.DecelerationRate = defaultOn;
                this.Size = defaultOn;
                this.HeadBipedObject = defaultOn;
                this.HairBipedObject = defaultOn;
                this.InjuredHealthPercent = defaultOn;
                this.ShieldBipedObject = defaultOn;
                this.HealthRegen = defaultOn;
                this.MagickaRegen = defaultOn;
                this.StaminaRegen = defaultOn;
                this.UnarmedDamage = defaultOn;
                this.UnarmedReach = defaultOn;
                this.BodyBipedObject = defaultOn;
                this.AimAngleTolerance = defaultOn;
                this.FlightRadius = defaultOn;
                this.AngularAccelerationRate = defaultOn;
                this.AngularTolerance = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((SkillBoost0?.Overall ?? true, SkillBoost0?.Specific?.GetCrystal()));
                ret.Add((SkillBoost1?.Overall ?? true, SkillBoost1?.Specific?.GetCrystal()));
                ret.Add((SkillBoost2?.Overall ?? true, SkillBoost2?.Specific?.GetCrystal()));
                ret.Add((SkillBoost3?.Overall ?? true, SkillBoost3?.Specific?.GetCrystal()));
                ret.Add((SkillBoost4?.Overall ?? true, SkillBoost4?.Specific?.GetCrystal()));
                ret.Add((SkillBoost5?.Overall ?? true, SkillBoost5?.Specific?.GetCrystal()));
                ret.Add((SkillBoost6?.Overall ?? true, SkillBoost6?.Specific?.GetCrystal()));
                ret.Add((Unknown, null));
                ret.Add((Height?.Overall ?? true, null));
                ret.Add((Weight?.Overall ?? true, null));
                ret.Add((Flags, null));
                ret.Add((StartingHealth, null));
                ret.Add((StartingMagicka, null));
                ret.Add((StartingStamina, null));
                ret.Add((BaseCarryWeight, null));
                ret.Add((BaseMass, null));
                ret.Add((AccelerationRate, null));
                ret.Add((DecelerationRate, null));
                ret.Add((Size, null));
                ret.Add((HeadBipedObject, null));
                ret.Add((HairBipedObject, null));
                ret.Add((InjuredHealthPercent, null));
                ret.Add((ShieldBipedObject, null));
                ret.Add((HealthRegen, null));
                ret.Add((MagickaRegen, null));
                ret.Add((StaminaRegen, null));
                ret.Add((UnarmedDamage, null));
                ret.Add((UnarmedReach, null));
                ret.Add((BodyBipedObject, null));
                ret.Add((AimAngleTolerance, null));
                ret.Add((FlightRadius, null));
                ret.Add((AngularAccelerationRate, null));
                ret.Add((AngularTolerance, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = RaceData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RaceDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static RaceData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static RaceData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RaceData();
            ((RaceDataSetterCommon)((IRaceDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RaceDataSetterCommon)((IRaceDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static RaceData GetNew()
        {
            return new RaceData();
        }

    }
    #endregion

    #region Interface
    public partial interface IRaceData :
        IRaceDataGetter,
        ILoquiObjectSetter<IRaceData>
    {
        new SkillBoost SkillBoost0 { get; set; }
        new SkillBoost SkillBoost1 { get; set; }
        new SkillBoost SkillBoost2 { get; set; }
        new SkillBoost SkillBoost3 { get; set; }
        new SkillBoost SkillBoost4 { get; set; }
        new SkillBoost SkillBoost5 { get; set; }
        new SkillBoost SkillBoost6 { get; set; }
        new Int16 Unknown { get; set; }
        new GenderedItem<Single> Height { get; set; }
        new GenderedItem<Single> Weight { get; set; }
        new RaceData.Flag Flags { get; set; }
        new Single StartingHealth { get; set; }
        new Single StartingMagicka { get; set; }
        new Single StartingStamina { get; set; }
        new Single BaseCarryWeight { get; set; }
        new Single BaseMass { get; set; }
        new Single AccelerationRate { get; set; }
        new Single DecelerationRate { get; set; }
        new Race.Size Size { get; set; }
        new BipedObject HeadBipedObject { get; set; }
        new BipedObject HairBipedObject { get; set; }
        new Single InjuredHealthPercent { get; set; }
        new BipedObject ShieldBipedObject { get; set; }
        new Single HealthRegen { get; set; }
        new Single MagickaRegen { get; set; }
        new Single StaminaRegen { get; set; }
        new Single UnarmedDamage { get; set; }
        new Single UnarmedReach { get; set; }
        new BipedObject BodyBipedObject { get; set; }
        new Single AimAngleTolerance { get; set; }
        new Single FlightRadius { get; set; }
        new Single AngularAccelerationRate { get; set; }
        new Single AngularTolerance { get; set; }
    }

    public partial interface IRaceDataGetter :
        ILoquiObject,
        ILoquiObject<IRaceDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => RaceData_Registration.Instance;
        ISkillBoostGetter SkillBoost0 { get; }
        ISkillBoostGetter SkillBoost1 { get; }
        ISkillBoostGetter SkillBoost2 { get; }
        ISkillBoostGetter SkillBoost3 { get; }
        ISkillBoostGetter SkillBoost4 { get; }
        ISkillBoostGetter SkillBoost5 { get; }
        ISkillBoostGetter SkillBoost6 { get; }
        Int16 Unknown { get; }
        IGenderedItemGetter<Single> Height { get; }
        IGenderedItemGetter<Single> Weight { get; }
        RaceData.Flag Flags { get; }
        Single StartingHealth { get; }
        Single StartingMagicka { get; }
        Single StartingStamina { get; }
        Single BaseCarryWeight { get; }
        Single BaseMass { get; }
        Single AccelerationRate { get; }
        Single DecelerationRate { get; }
        Race.Size Size { get; }
        BipedObject HeadBipedObject { get; }
        BipedObject HairBipedObject { get; }
        Single InjuredHealthPercent { get; }
        BipedObject ShieldBipedObject { get; }
        Single HealthRegen { get; }
        Single MagickaRegen { get; }
        Single StaminaRegen { get; }
        Single UnarmedDamage { get; }
        Single UnarmedReach { get; }
        BipedObject BodyBipedObject { get; }
        Single AimAngleTolerance { get; }
        Single FlightRadius { get; }
        Single AngularAccelerationRate { get; }
        Single AngularTolerance { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RaceDataMixIn
    {
        public static void Clear(this IRaceData item)
        {
            ((RaceDataSetterCommon)((IRaceDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static RaceData.Mask<bool> GetEqualsMask(
            this IRaceDataGetter item,
            IRaceDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRaceDataGetter item,
            string? name = null,
            RaceData.Mask<bool>? printMask = null)
        {
            return ((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRaceDataGetter item,
            FileGeneration fg,
            string? name = null,
            RaceData.Mask<bool>? printMask = null)
        {
            ((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRaceDataGetter item,
            RaceData.Mask<bool?> checkMask)
        {
            return ((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RaceData.Mask<bool> GetHasBeenSetMask(this IRaceDataGetter item)
        {
            var ret = new RaceData.Mask<bool>(false);
            ((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRaceDataGetter item,
            IRaceDataGetter rhs)
        {
            return ((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRaceData lhs,
            IRaceDataGetter rhs)
        {
            ((RaceDataSetterTranslationCommon)((IRaceDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IRaceData lhs,
            IRaceDataGetter rhs,
            RaceData.TranslationMask? copyMask = null)
        {
            ((RaceDataSetterTranslationCommon)((IRaceDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRaceData lhs,
            IRaceDataGetter rhs,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceDataSetterTranslationCommon)((IRaceDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = RaceData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRaceData lhs,
            IRaceDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RaceDataSetterTranslationCommon)((IRaceDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static RaceData DeepCopy(
            this IRaceDataGetter item,
            RaceData.TranslationMask? copyMask = null)
        {
            return ((RaceDataSetterTranslationCommon)((IRaceDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RaceData DeepCopy(
            this IRaceDataGetter item,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? copyMask = null)
        {
            return ((RaceDataSetterTranslationCommon)((IRaceDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RaceData DeepCopy(
            this IRaceDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RaceDataSetterTranslationCommon)((IRaceDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRaceData item,
            XElement node,
            RaceData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRaceData item,
            XElement node,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RaceData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRaceData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((RaceDataSetterCommon)((IRaceDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceData item,
            string path,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceData item,
            string path,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceData item,
            string path,
            ErrorMaskBuilder? errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRaceData item,
            Stream stream,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceData item,
            Stream stream,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRaceData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRaceData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceDataSetterCommon)((IRaceDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum RaceData_FieldIndex
    {
        SkillBoost0 = 0,
        SkillBoost1 = 1,
        SkillBoost2 = 2,
        SkillBoost3 = 3,
        SkillBoost4 = 4,
        SkillBoost5 = 5,
        SkillBoost6 = 6,
        Unknown = 7,
        Height = 8,
        Weight = 9,
        Flags = 10,
        StartingHealth = 11,
        StartingMagicka = 12,
        StartingStamina = 13,
        BaseCarryWeight = 14,
        BaseMass = 15,
        AccelerationRate = 16,
        DecelerationRate = 17,
        Size = 18,
        HeadBipedObject = 19,
        HairBipedObject = 20,
        InjuredHealthPercent = 21,
        ShieldBipedObject = 22,
        HealthRegen = 23,
        MagickaRegen = 24,
        StaminaRegen = 25,
        UnarmedDamage = 26,
        UnarmedReach = 27,
        BodyBipedObject = 28,
        AimAngleTolerance = 29,
        FlightRadius = 30,
        AngularAccelerationRate = 31,
        AngularTolerance = 32,
    }
    #endregion

    #region Registration
    public partial class RaceData_Registration : ILoquiRegistration
    {
        public static readonly RaceData_Registration Instance = new RaceData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 52,
            version: 0);

        public const string GUID = "b455e069-05b6-4f16-b587-b7f1530d620b";

        public const ushort AdditionalFieldCount = 33;

        public const ushort FieldCount = 33;

        public static readonly Type MaskType = typeof(RaceData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceData.ErrorMask);

        public static readonly Type ClassType = typeof(RaceData);

        public static readonly Type GetterType = typeof(IRaceDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRaceData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.RaceData";

        public const string Name = "RaceData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SKILLBOOST0":
                    return (ushort)RaceData_FieldIndex.SkillBoost0;
                case "SKILLBOOST1":
                    return (ushort)RaceData_FieldIndex.SkillBoost1;
                case "SKILLBOOST2":
                    return (ushort)RaceData_FieldIndex.SkillBoost2;
                case "SKILLBOOST3":
                    return (ushort)RaceData_FieldIndex.SkillBoost3;
                case "SKILLBOOST4":
                    return (ushort)RaceData_FieldIndex.SkillBoost4;
                case "SKILLBOOST5":
                    return (ushort)RaceData_FieldIndex.SkillBoost5;
                case "SKILLBOOST6":
                    return (ushort)RaceData_FieldIndex.SkillBoost6;
                case "UNKNOWN":
                    return (ushort)RaceData_FieldIndex.Unknown;
                case "HEIGHT":
                    return (ushort)RaceData_FieldIndex.Height;
                case "WEIGHT":
                    return (ushort)RaceData_FieldIndex.Weight;
                case "FLAGS":
                    return (ushort)RaceData_FieldIndex.Flags;
                case "STARTINGHEALTH":
                    return (ushort)RaceData_FieldIndex.StartingHealth;
                case "STARTINGMAGICKA":
                    return (ushort)RaceData_FieldIndex.StartingMagicka;
                case "STARTINGSTAMINA":
                    return (ushort)RaceData_FieldIndex.StartingStamina;
                case "BASECARRYWEIGHT":
                    return (ushort)RaceData_FieldIndex.BaseCarryWeight;
                case "BASEMASS":
                    return (ushort)RaceData_FieldIndex.BaseMass;
                case "ACCELERATIONRATE":
                    return (ushort)RaceData_FieldIndex.AccelerationRate;
                case "DECELERATIONRATE":
                    return (ushort)RaceData_FieldIndex.DecelerationRate;
                case "SIZE":
                    return (ushort)RaceData_FieldIndex.Size;
                case "HEADBIPEDOBJECT":
                    return (ushort)RaceData_FieldIndex.HeadBipedObject;
                case "HAIRBIPEDOBJECT":
                    return (ushort)RaceData_FieldIndex.HairBipedObject;
                case "INJUREDHEALTHPERCENT":
                    return (ushort)RaceData_FieldIndex.InjuredHealthPercent;
                case "SHIELDBIPEDOBJECT":
                    return (ushort)RaceData_FieldIndex.ShieldBipedObject;
                case "HEALTHREGEN":
                    return (ushort)RaceData_FieldIndex.HealthRegen;
                case "MAGICKAREGEN":
                    return (ushort)RaceData_FieldIndex.MagickaRegen;
                case "STAMINAREGEN":
                    return (ushort)RaceData_FieldIndex.StaminaRegen;
                case "UNARMEDDAMAGE":
                    return (ushort)RaceData_FieldIndex.UnarmedDamage;
                case "UNARMEDREACH":
                    return (ushort)RaceData_FieldIndex.UnarmedReach;
                case "BODYBIPEDOBJECT":
                    return (ushort)RaceData_FieldIndex.BodyBipedObject;
                case "AIMANGLETOLERANCE":
                    return (ushort)RaceData_FieldIndex.AimAngleTolerance;
                case "FLIGHTRADIUS":
                    return (ushort)RaceData_FieldIndex.FlightRadius;
                case "ANGULARACCELERATIONRATE":
                    return (ushort)RaceData_FieldIndex.AngularAccelerationRate;
                case "ANGULARTOLERANCE":
                    return (ushort)RaceData_FieldIndex.AngularTolerance;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoost0:
                case RaceData_FieldIndex.SkillBoost1:
                case RaceData_FieldIndex.SkillBoost2:
                case RaceData_FieldIndex.SkillBoost3:
                case RaceData_FieldIndex.SkillBoost4:
                case RaceData_FieldIndex.SkillBoost5:
                case RaceData_FieldIndex.SkillBoost6:
                case RaceData_FieldIndex.Unknown:
                case RaceData_FieldIndex.Height:
                case RaceData_FieldIndex.Weight:
                case RaceData_FieldIndex.Flags:
                case RaceData_FieldIndex.StartingHealth:
                case RaceData_FieldIndex.StartingMagicka:
                case RaceData_FieldIndex.StartingStamina:
                case RaceData_FieldIndex.BaseCarryWeight:
                case RaceData_FieldIndex.BaseMass:
                case RaceData_FieldIndex.AccelerationRate:
                case RaceData_FieldIndex.DecelerationRate:
                case RaceData_FieldIndex.Size:
                case RaceData_FieldIndex.HeadBipedObject:
                case RaceData_FieldIndex.HairBipedObject:
                case RaceData_FieldIndex.InjuredHealthPercent:
                case RaceData_FieldIndex.ShieldBipedObject:
                case RaceData_FieldIndex.HealthRegen:
                case RaceData_FieldIndex.MagickaRegen:
                case RaceData_FieldIndex.StaminaRegen:
                case RaceData_FieldIndex.UnarmedDamage:
                case RaceData_FieldIndex.UnarmedReach:
                case RaceData_FieldIndex.BodyBipedObject:
                case RaceData_FieldIndex.AimAngleTolerance:
                case RaceData_FieldIndex.FlightRadius:
                case RaceData_FieldIndex.AngularAccelerationRate:
                case RaceData_FieldIndex.AngularTolerance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoost0:
                case RaceData_FieldIndex.SkillBoost1:
                case RaceData_FieldIndex.SkillBoost2:
                case RaceData_FieldIndex.SkillBoost3:
                case RaceData_FieldIndex.SkillBoost4:
                case RaceData_FieldIndex.SkillBoost5:
                case RaceData_FieldIndex.SkillBoost6:
                    return true;
                case RaceData_FieldIndex.Unknown:
                case RaceData_FieldIndex.Height:
                case RaceData_FieldIndex.Weight:
                case RaceData_FieldIndex.Flags:
                case RaceData_FieldIndex.StartingHealth:
                case RaceData_FieldIndex.StartingMagicka:
                case RaceData_FieldIndex.StartingStamina:
                case RaceData_FieldIndex.BaseCarryWeight:
                case RaceData_FieldIndex.BaseMass:
                case RaceData_FieldIndex.AccelerationRate:
                case RaceData_FieldIndex.DecelerationRate:
                case RaceData_FieldIndex.Size:
                case RaceData_FieldIndex.HeadBipedObject:
                case RaceData_FieldIndex.HairBipedObject:
                case RaceData_FieldIndex.InjuredHealthPercent:
                case RaceData_FieldIndex.ShieldBipedObject:
                case RaceData_FieldIndex.HealthRegen:
                case RaceData_FieldIndex.MagickaRegen:
                case RaceData_FieldIndex.StaminaRegen:
                case RaceData_FieldIndex.UnarmedDamage:
                case RaceData_FieldIndex.UnarmedReach:
                case RaceData_FieldIndex.BodyBipedObject:
                case RaceData_FieldIndex.AimAngleTolerance:
                case RaceData_FieldIndex.FlightRadius:
                case RaceData_FieldIndex.AngularAccelerationRate:
                case RaceData_FieldIndex.AngularTolerance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoost0:
                case RaceData_FieldIndex.SkillBoost1:
                case RaceData_FieldIndex.SkillBoost2:
                case RaceData_FieldIndex.SkillBoost3:
                case RaceData_FieldIndex.SkillBoost4:
                case RaceData_FieldIndex.SkillBoost5:
                case RaceData_FieldIndex.SkillBoost6:
                case RaceData_FieldIndex.Unknown:
                case RaceData_FieldIndex.Height:
                case RaceData_FieldIndex.Weight:
                case RaceData_FieldIndex.Flags:
                case RaceData_FieldIndex.StartingHealth:
                case RaceData_FieldIndex.StartingMagicka:
                case RaceData_FieldIndex.StartingStamina:
                case RaceData_FieldIndex.BaseCarryWeight:
                case RaceData_FieldIndex.BaseMass:
                case RaceData_FieldIndex.AccelerationRate:
                case RaceData_FieldIndex.DecelerationRate:
                case RaceData_FieldIndex.Size:
                case RaceData_FieldIndex.HeadBipedObject:
                case RaceData_FieldIndex.HairBipedObject:
                case RaceData_FieldIndex.InjuredHealthPercent:
                case RaceData_FieldIndex.ShieldBipedObject:
                case RaceData_FieldIndex.HealthRegen:
                case RaceData_FieldIndex.MagickaRegen:
                case RaceData_FieldIndex.StaminaRegen:
                case RaceData_FieldIndex.UnarmedDamage:
                case RaceData_FieldIndex.UnarmedReach:
                case RaceData_FieldIndex.BodyBipedObject:
                case RaceData_FieldIndex.AimAngleTolerance:
                case RaceData_FieldIndex.FlightRadius:
                case RaceData_FieldIndex.AngularAccelerationRate:
                case RaceData_FieldIndex.AngularTolerance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoost0:
                    return "SkillBoost0";
                case RaceData_FieldIndex.SkillBoost1:
                    return "SkillBoost1";
                case RaceData_FieldIndex.SkillBoost2:
                    return "SkillBoost2";
                case RaceData_FieldIndex.SkillBoost3:
                    return "SkillBoost3";
                case RaceData_FieldIndex.SkillBoost4:
                    return "SkillBoost4";
                case RaceData_FieldIndex.SkillBoost5:
                    return "SkillBoost5";
                case RaceData_FieldIndex.SkillBoost6:
                    return "SkillBoost6";
                case RaceData_FieldIndex.Unknown:
                    return "Unknown";
                case RaceData_FieldIndex.Height:
                    return "Height";
                case RaceData_FieldIndex.Weight:
                    return "Weight";
                case RaceData_FieldIndex.Flags:
                    return "Flags";
                case RaceData_FieldIndex.StartingHealth:
                    return "StartingHealth";
                case RaceData_FieldIndex.StartingMagicka:
                    return "StartingMagicka";
                case RaceData_FieldIndex.StartingStamina:
                    return "StartingStamina";
                case RaceData_FieldIndex.BaseCarryWeight:
                    return "BaseCarryWeight";
                case RaceData_FieldIndex.BaseMass:
                    return "BaseMass";
                case RaceData_FieldIndex.AccelerationRate:
                    return "AccelerationRate";
                case RaceData_FieldIndex.DecelerationRate:
                    return "DecelerationRate";
                case RaceData_FieldIndex.Size:
                    return "Size";
                case RaceData_FieldIndex.HeadBipedObject:
                    return "HeadBipedObject";
                case RaceData_FieldIndex.HairBipedObject:
                    return "HairBipedObject";
                case RaceData_FieldIndex.InjuredHealthPercent:
                    return "InjuredHealthPercent";
                case RaceData_FieldIndex.ShieldBipedObject:
                    return "ShieldBipedObject";
                case RaceData_FieldIndex.HealthRegen:
                    return "HealthRegen";
                case RaceData_FieldIndex.MagickaRegen:
                    return "MagickaRegen";
                case RaceData_FieldIndex.StaminaRegen:
                    return "StaminaRegen";
                case RaceData_FieldIndex.UnarmedDamage:
                    return "UnarmedDamage";
                case RaceData_FieldIndex.UnarmedReach:
                    return "UnarmedReach";
                case RaceData_FieldIndex.BodyBipedObject:
                    return "BodyBipedObject";
                case RaceData_FieldIndex.AimAngleTolerance:
                    return "AimAngleTolerance";
                case RaceData_FieldIndex.FlightRadius:
                    return "FlightRadius";
                case RaceData_FieldIndex.AngularAccelerationRate:
                    return "AngularAccelerationRate";
                case RaceData_FieldIndex.AngularTolerance:
                    return "AngularTolerance";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoost0:
                case RaceData_FieldIndex.SkillBoost1:
                case RaceData_FieldIndex.SkillBoost2:
                case RaceData_FieldIndex.SkillBoost3:
                case RaceData_FieldIndex.SkillBoost4:
                case RaceData_FieldIndex.SkillBoost5:
                case RaceData_FieldIndex.SkillBoost6:
                case RaceData_FieldIndex.Unknown:
                case RaceData_FieldIndex.Height:
                case RaceData_FieldIndex.Weight:
                case RaceData_FieldIndex.Flags:
                case RaceData_FieldIndex.StartingHealth:
                case RaceData_FieldIndex.StartingMagicka:
                case RaceData_FieldIndex.StartingStamina:
                case RaceData_FieldIndex.BaseCarryWeight:
                case RaceData_FieldIndex.BaseMass:
                case RaceData_FieldIndex.AccelerationRate:
                case RaceData_FieldIndex.DecelerationRate:
                case RaceData_FieldIndex.Size:
                case RaceData_FieldIndex.HeadBipedObject:
                case RaceData_FieldIndex.HairBipedObject:
                case RaceData_FieldIndex.InjuredHealthPercent:
                case RaceData_FieldIndex.ShieldBipedObject:
                case RaceData_FieldIndex.HealthRegen:
                case RaceData_FieldIndex.MagickaRegen:
                case RaceData_FieldIndex.StaminaRegen:
                case RaceData_FieldIndex.UnarmedDamage:
                case RaceData_FieldIndex.UnarmedReach:
                case RaceData_FieldIndex.BodyBipedObject:
                case RaceData_FieldIndex.AimAngleTolerance:
                case RaceData_FieldIndex.FlightRadius:
                case RaceData_FieldIndex.AngularAccelerationRate:
                case RaceData_FieldIndex.AngularTolerance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoost0:
                case RaceData_FieldIndex.SkillBoost1:
                case RaceData_FieldIndex.SkillBoost2:
                case RaceData_FieldIndex.SkillBoost3:
                case RaceData_FieldIndex.SkillBoost4:
                case RaceData_FieldIndex.SkillBoost5:
                case RaceData_FieldIndex.SkillBoost6:
                case RaceData_FieldIndex.Unknown:
                case RaceData_FieldIndex.Height:
                case RaceData_FieldIndex.Weight:
                case RaceData_FieldIndex.Flags:
                case RaceData_FieldIndex.StartingHealth:
                case RaceData_FieldIndex.StartingMagicka:
                case RaceData_FieldIndex.StartingStamina:
                case RaceData_FieldIndex.BaseCarryWeight:
                case RaceData_FieldIndex.BaseMass:
                case RaceData_FieldIndex.AccelerationRate:
                case RaceData_FieldIndex.DecelerationRate:
                case RaceData_FieldIndex.Size:
                case RaceData_FieldIndex.HeadBipedObject:
                case RaceData_FieldIndex.HairBipedObject:
                case RaceData_FieldIndex.InjuredHealthPercent:
                case RaceData_FieldIndex.ShieldBipedObject:
                case RaceData_FieldIndex.HealthRegen:
                case RaceData_FieldIndex.MagickaRegen:
                case RaceData_FieldIndex.StaminaRegen:
                case RaceData_FieldIndex.UnarmedDamage:
                case RaceData_FieldIndex.UnarmedReach:
                case RaceData_FieldIndex.BodyBipedObject:
                case RaceData_FieldIndex.AimAngleTolerance:
                case RaceData_FieldIndex.FlightRadius:
                case RaceData_FieldIndex.AngularAccelerationRate:
                case RaceData_FieldIndex.AngularTolerance:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoost0:
                    return typeof(SkillBoost);
                case RaceData_FieldIndex.SkillBoost1:
                    return typeof(SkillBoost);
                case RaceData_FieldIndex.SkillBoost2:
                    return typeof(SkillBoost);
                case RaceData_FieldIndex.SkillBoost3:
                    return typeof(SkillBoost);
                case RaceData_FieldIndex.SkillBoost4:
                    return typeof(SkillBoost);
                case RaceData_FieldIndex.SkillBoost5:
                    return typeof(SkillBoost);
                case RaceData_FieldIndex.SkillBoost6:
                    return typeof(SkillBoost);
                case RaceData_FieldIndex.Unknown:
                    return typeof(Int16);
                case RaceData_FieldIndex.Height:
                    return typeof(GenderedItem<Single>);
                case RaceData_FieldIndex.Weight:
                    return typeof(GenderedItem<Single>);
                case RaceData_FieldIndex.Flags:
                    return typeof(RaceData.Flag);
                case RaceData_FieldIndex.StartingHealth:
                    return typeof(Single);
                case RaceData_FieldIndex.StartingMagicka:
                    return typeof(Single);
                case RaceData_FieldIndex.StartingStamina:
                    return typeof(Single);
                case RaceData_FieldIndex.BaseCarryWeight:
                    return typeof(Single);
                case RaceData_FieldIndex.BaseMass:
                    return typeof(Single);
                case RaceData_FieldIndex.AccelerationRate:
                    return typeof(Single);
                case RaceData_FieldIndex.DecelerationRate:
                    return typeof(Single);
                case RaceData_FieldIndex.Size:
                    return typeof(Race.Size);
                case RaceData_FieldIndex.HeadBipedObject:
                    return typeof(BipedObject);
                case RaceData_FieldIndex.HairBipedObject:
                    return typeof(BipedObject);
                case RaceData_FieldIndex.InjuredHealthPercent:
                    return typeof(Single);
                case RaceData_FieldIndex.ShieldBipedObject:
                    return typeof(BipedObject);
                case RaceData_FieldIndex.HealthRegen:
                    return typeof(Single);
                case RaceData_FieldIndex.MagickaRegen:
                    return typeof(Single);
                case RaceData_FieldIndex.StaminaRegen:
                    return typeof(Single);
                case RaceData_FieldIndex.UnarmedDamage:
                    return typeof(Single);
                case RaceData_FieldIndex.UnarmedReach:
                    return typeof(Single);
                case RaceData_FieldIndex.BodyBipedObject:
                    return typeof(BipedObject);
                case RaceData_FieldIndex.AimAngleTolerance:
                    return typeof(Single);
                case RaceData_FieldIndex.FlightRadius:
                    return typeof(Single);
                case RaceData_FieldIndex.AngularAccelerationRate:
                    return typeof(Single);
                case RaceData_FieldIndex.AngularTolerance:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RaceDataXmlWriteTranslation);
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = DATA_HEADER;
        public const int NumStructFields = 33;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(RaceDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RaceDataSetterCommon
    {
        public static readonly RaceDataSetterCommon Instance = new RaceDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRaceData item)
        {
            ClearPartial();
            item.SkillBoost0.Clear();
            item.SkillBoost1.Clear();
            item.SkillBoost2.Clear();
            item.SkillBoost3.Clear();
            item.SkillBoost4.Clear();
            item.SkillBoost5.Clear();
            item.SkillBoost6.Clear();
            item.Unknown = default;
            item.Height.Male = default;
            item.Height.Female = default;
            item.Weight.Male = default;
            item.Weight.Female = default;
            item.Flags = default;
            item.StartingHealth = default;
            item.StartingMagicka = default;
            item.StartingStamina = default;
            item.BaseCarryWeight = default;
            item.BaseMass = default;
            item.AccelerationRate = default;
            item.DecelerationRate = default;
            item.Size = default;
            item.HeadBipedObject = RaceData._HeadBipedObject_Default;
            item.HairBipedObject = RaceData._HairBipedObject_Default;
            item.InjuredHealthPercent = default;
            item.ShieldBipedObject = RaceData._ShieldBipedObject_Default;
            item.HealthRegen = default;
            item.MagickaRegen = default;
            item.StaminaRegen = default;
            item.UnarmedDamage = default;
            item.UnarmedReach = default;
            item.BodyBipedObject = RaceData._BodyBipedObject_Default;
            item.AimAngleTolerance = default;
            item.FlightRadius = default;
            item.AngularAccelerationRate = default;
            item.AngularTolerance = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IRaceData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IRaceData item,
            MutagenFrame frame)
        {
            item.SkillBoost0 = Mutagen.Bethesda.Skyrim.SkillBoost.CreateFromBinary(frame: frame);
            item.SkillBoost1 = Mutagen.Bethesda.Skyrim.SkillBoost.CreateFromBinary(frame: frame);
            item.SkillBoost2 = Mutagen.Bethesda.Skyrim.SkillBoost.CreateFromBinary(frame: frame);
            item.SkillBoost3 = Mutagen.Bethesda.Skyrim.SkillBoost.CreateFromBinary(frame: frame);
            item.SkillBoost4 = Mutagen.Bethesda.Skyrim.SkillBoost.CreateFromBinary(frame: frame);
            item.SkillBoost5 = Mutagen.Bethesda.Skyrim.SkillBoost.CreateFromBinary(frame: frame);
            item.SkillBoost6 = Mutagen.Bethesda.Skyrim.SkillBoost.CreateFromBinary(frame: frame);
            item.Unknown = frame.ReadInt16();
            item.Height = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<Single>(
                frame: frame,
                transl: FloatBinaryTranslation.Instance.Parse);
            item.Weight = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<Single>(
                frame: frame,
                transl: FloatBinaryTranslation.Instance.Parse);
            item.Flags = EnumBinaryTranslation<RaceData.Flag>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.StartingHealth = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.StartingMagicka = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.StartingStamina = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BaseCarryWeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BaseMass = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.AccelerationRate = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.DecelerationRate = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Size = EnumBinaryTranslation<Race.Size>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.HeadBipedObject = EnumBinaryTranslation<BipedObject>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.HairBipedObject = EnumBinaryTranslation<BipedObject>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.InjuredHealthPercent = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.ShieldBipedObject = EnumBinaryTranslation<BipedObject>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.HealthRegen = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.MagickaRegen = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.StaminaRegen = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.UnarmedDamage = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.UnarmedReach = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BodyBipedObject = EnumBinaryTranslation<BipedObject>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.AimAngleTolerance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FlightRadius = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.AngularAccelerationRate = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.AngularTolerance = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            RaceDataBinaryCreateTranslation.FillBinaryFlags2CustomPublic(
                frame: frame,
                item: item);
            RaceDataBinaryCreateTranslation.FillBinaryMountDataCustomPublic(
                frame: frame,
                item: item);
        }
        
        public virtual void CopyInFromBinary(
            IRaceData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RaceData_Registration.DATA_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class RaceDataCommon
    {
        public static readonly RaceDataCommon Instance = new RaceDataCommon();

        public RaceData.Mask<bool> GetEqualsMask(
            IRaceDataGetter item,
            IRaceDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RaceData.Mask<bool>(false);
            ((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRaceDataGetter item,
            IRaceDataGetter rhs,
            RaceData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.SkillBoost0 = MaskItemExt.Factory(item.SkillBoost0.GetEqualsMask(rhs.SkillBoost0, include), include);
            ret.SkillBoost1 = MaskItemExt.Factory(item.SkillBoost1.GetEqualsMask(rhs.SkillBoost1, include), include);
            ret.SkillBoost2 = MaskItemExt.Factory(item.SkillBoost2.GetEqualsMask(rhs.SkillBoost2, include), include);
            ret.SkillBoost3 = MaskItemExt.Factory(item.SkillBoost3.GetEqualsMask(rhs.SkillBoost3, include), include);
            ret.SkillBoost4 = MaskItemExt.Factory(item.SkillBoost4.GetEqualsMask(rhs.SkillBoost4, include), include);
            ret.SkillBoost5 = MaskItemExt.Factory(item.SkillBoost5.GetEqualsMask(rhs.SkillBoost5, include), include);
            ret.SkillBoost6 = MaskItemExt.Factory(item.SkillBoost6.GetEqualsMask(rhs.SkillBoost6, include), include);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Height = new GenderedItem<bool>(
                male: item.Height.Male.EqualsWithin(rhs.Height.Male),
                female: item.Height.Female.EqualsWithin(rhs.Height.Female));
            ret.Weight = new GenderedItem<bool>(
                male: item.Weight.Male.EqualsWithin(rhs.Weight.Male),
                female: item.Weight.Female.EqualsWithin(rhs.Weight.Female));
            ret.Flags = item.Flags == rhs.Flags;
            ret.StartingHealth = item.StartingHealth.EqualsWithin(rhs.StartingHealth);
            ret.StartingMagicka = item.StartingMagicka.EqualsWithin(rhs.StartingMagicka);
            ret.StartingStamina = item.StartingStamina.EqualsWithin(rhs.StartingStamina);
            ret.BaseCarryWeight = item.BaseCarryWeight.EqualsWithin(rhs.BaseCarryWeight);
            ret.BaseMass = item.BaseMass.EqualsWithin(rhs.BaseMass);
            ret.AccelerationRate = item.AccelerationRate.EqualsWithin(rhs.AccelerationRate);
            ret.DecelerationRate = item.DecelerationRate.EqualsWithin(rhs.DecelerationRate);
            ret.Size = item.Size == rhs.Size;
            ret.HeadBipedObject = item.HeadBipedObject == rhs.HeadBipedObject;
            ret.HairBipedObject = item.HairBipedObject == rhs.HairBipedObject;
            ret.InjuredHealthPercent = item.InjuredHealthPercent.EqualsWithin(rhs.InjuredHealthPercent);
            ret.ShieldBipedObject = item.ShieldBipedObject == rhs.ShieldBipedObject;
            ret.HealthRegen = item.HealthRegen.EqualsWithin(rhs.HealthRegen);
            ret.MagickaRegen = item.MagickaRegen.EqualsWithin(rhs.MagickaRegen);
            ret.StaminaRegen = item.StaminaRegen.EqualsWithin(rhs.StaminaRegen);
            ret.UnarmedDamage = item.UnarmedDamage.EqualsWithin(rhs.UnarmedDamage);
            ret.UnarmedReach = item.UnarmedReach.EqualsWithin(rhs.UnarmedReach);
            ret.BodyBipedObject = item.BodyBipedObject == rhs.BodyBipedObject;
            ret.AimAngleTolerance = item.AimAngleTolerance.EqualsWithin(rhs.AimAngleTolerance);
            ret.FlightRadius = item.FlightRadius.EqualsWithin(rhs.FlightRadius);
            ret.AngularAccelerationRate = item.AngularAccelerationRate.EqualsWithin(rhs.AngularAccelerationRate);
            ret.AngularTolerance = item.AngularTolerance.EqualsWithin(rhs.AngularTolerance);
        }
        
        public string ToString(
            IRaceDataGetter item,
            string? name = null,
            RaceData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRaceDataGetter item,
            FileGeneration fg,
            string? name = null,
            RaceData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RaceData =>");
            }
            else
            {
                fg.AppendLine($"{name} (RaceData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRaceDataGetter item,
            FileGeneration fg,
            RaceData.Mask<bool>? printMask = null)
        {
            if (printMask?.SkillBoost0?.Overall ?? true)
            {
                item.SkillBoost0?.ToString(fg, "SkillBoost0");
            }
            if (printMask?.SkillBoost1?.Overall ?? true)
            {
                item.SkillBoost1?.ToString(fg, "SkillBoost1");
            }
            if (printMask?.SkillBoost2?.Overall ?? true)
            {
                item.SkillBoost2?.ToString(fg, "SkillBoost2");
            }
            if (printMask?.SkillBoost3?.Overall ?? true)
            {
                item.SkillBoost3?.ToString(fg, "SkillBoost3");
            }
            if (printMask?.SkillBoost4?.Overall ?? true)
            {
                item.SkillBoost4?.ToString(fg, "SkillBoost4");
            }
            if (printMask?.SkillBoost5?.Overall ?? true)
            {
                item.SkillBoost5?.ToString(fg, "SkillBoost5");
            }
            if (printMask?.SkillBoost6?.Overall ?? true)
            {
                item.SkillBoost6?.ToString(fg, "SkillBoost6");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (true)
            {
                item.Height.ToString(fg, "Height");
            }
            if (true)
            {
                item.Weight.ToString(fg, "Weight");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.StartingHealth ?? true)
            {
                fg.AppendItem(item.StartingHealth, "StartingHealth");
            }
            if (printMask?.StartingMagicka ?? true)
            {
                fg.AppendItem(item.StartingMagicka, "StartingMagicka");
            }
            if (printMask?.StartingStamina ?? true)
            {
                fg.AppendItem(item.StartingStamina, "StartingStamina");
            }
            if (printMask?.BaseCarryWeight ?? true)
            {
                fg.AppendItem(item.BaseCarryWeight, "BaseCarryWeight");
            }
            if (printMask?.BaseMass ?? true)
            {
                fg.AppendItem(item.BaseMass, "BaseMass");
            }
            if (printMask?.AccelerationRate ?? true)
            {
                fg.AppendItem(item.AccelerationRate, "AccelerationRate");
            }
            if (printMask?.DecelerationRate ?? true)
            {
                fg.AppendItem(item.DecelerationRate, "DecelerationRate");
            }
            if (printMask?.Size ?? true)
            {
                fg.AppendItem(item.Size, "Size");
            }
            if (printMask?.HeadBipedObject ?? true)
            {
                fg.AppendItem(item.HeadBipedObject, "HeadBipedObject");
            }
            if (printMask?.HairBipedObject ?? true)
            {
                fg.AppendItem(item.HairBipedObject, "HairBipedObject");
            }
            if (printMask?.InjuredHealthPercent ?? true)
            {
                fg.AppendItem(item.InjuredHealthPercent, "InjuredHealthPercent");
            }
            if (printMask?.ShieldBipedObject ?? true)
            {
                fg.AppendItem(item.ShieldBipedObject, "ShieldBipedObject");
            }
            if (printMask?.HealthRegen ?? true)
            {
                fg.AppendItem(item.HealthRegen, "HealthRegen");
            }
            if (printMask?.MagickaRegen ?? true)
            {
                fg.AppendItem(item.MagickaRegen, "MagickaRegen");
            }
            if (printMask?.StaminaRegen ?? true)
            {
                fg.AppendItem(item.StaminaRegen, "StaminaRegen");
            }
            if (printMask?.UnarmedDamage ?? true)
            {
                fg.AppendItem(item.UnarmedDamage, "UnarmedDamage");
            }
            if (printMask?.UnarmedReach ?? true)
            {
                fg.AppendItem(item.UnarmedReach, "UnarmedReach");
            }
            if (printMask?.BodyBipedObject ?? true)
            {
                fg.AppendItem(item.BodyBipedObject, "BodyBipedObject");
            }
            if (printMask?.AimAngleTolerance ?? true)
            {
                fg.AppendItem(item.AimAngleTolerance, "AimAngleTolerance");
            }
            if (printMask?.FlightRadius ?? true)
            {
                fg.AppendItem(item.FlightRadius, "FlightRadius");
            }
            if (printMask?.AngularAccelerationRate ?? true)
            {
                fg.AppendItem(item.AngularAccelerationRate, "AngularAccelerationRate");
            }
            if (printMask?.AngularTolerance ?? true)
            {
                fg.AppendItem(item.AngularTolerance, "AngularTolerance");
            }
        }
        
        public bool HasBeenSet(
            IRaceDataGetter item,
            RaceData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IRaceDataGetter item,
            RaceData.Mask<bool> mask)
        {
            mask.SkillBoost0 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost0?.GetHasBeenSetMask());
            mask.SkillBoost1 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost1?.GetHasBeenSetMask());
            mask.SkillBoost2 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost2?.GetHasBeenSetMask());
            mask.SkillBoost3 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost3?.GetHasBeenSetMask());
            mask.SkillBoost4 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost4?.GetHasBeenSetMask());
            mask.SkillBoost5 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost5?.GetHasBeenSetMask());
            mask.SkillBoost6 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost6?.GetHasBeenSetMask());
            mask.Unknown = true;
            mask.Height = new GenderedItem<bool>(true, true);
            mask.Weight = new GenderedItem<bool>(true, true);
            mask.Flags = true;
            mask.StartingHealth = true;
            mask.StartingMagicka = true;
            mask.StartingStamina = true;
            mask.BaseCarryWeight = true;
            mask.BaseMass = true;
            mask.AccelerationRate = true;
            mask.DecelerationRate = true;
            mask.Size = true;
            mask.HeadBipedObject = true;
            mask.HairBipedObject = true;
            mask.InjuredHealthPercent = true;
            mask.ShieldBipedObject = true;
            mask.HealthRegen = true;
            mask.MagickaRegen = true;
            mask.StaminaRegen = true;
            mask.UnarmedDamage = true;
            mask.UnarmedReach = true;
            mask.BodyBipedObject = true;
            mask.AimAngleTolerance = true;
            mask.FlightRadius = true;
            mask.AngularAccelerationRate = true;
            mask.AngularTolerance = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRaceDataGetter? lhs,
            IRaceDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.SkillBoost0, rhs.SkillBoost0)) return false;
            if (!object.Equals(lhs.SkillBoost1, rhs.SkillBoost1)) return false;
            if (!object.Equals(lhs.SkillBoost2, rhs.SkillBoost2)) return false;
            if (!object.Equals(lhs.SkillBoost3, rhs.SkillBoost3)) return false;
            if (!object.Equals(lhs.SkillBoost4, rhs.SkillBoost4)) return false;
            if (!object.Equals(lhs.SkillBoost5, rhs.SkillBoost5)) return false;
            if (!object.Equals(lhs.SkillBoost6, rhs.SkillBoost6)) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (!Equals(lhs.Height, rhs.Height)) return false;
            if (!Equals(lhs.Weight, rhs.Weight)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.StartingHealth.EqualsWithin(rhs.StartingHealth)) return false;
            if (!lhs.StartingMagicka.EqualsWithin(rhs.StartingMagicka)) return false;
            if (!lhs.StartingStamina.EqualsWithin(rhs.StartingStamina)) return false;
            if (!lhs.BaseCarryWeight.EqualsWithin(rhs.BaseCarryWeight)) return false;
            if (!lhs.BaseMass.EqualsWithin(rhs.BaseMass)) return false;
            if (!lhs.AccelerationRate.EqualsWithin(rhs.AccelerationRate)) return false;
            if (!lhs.DecelerationRate.EqualsWithin(rhs.DecelerationRate)) return false;
            if (lhs.Size != rhs.Size) return false;
            if (lhs.HeadBipedObject != rhs.HeadBipedObject) return false;
            if (lhs.HairBipedObject != rhs.HairBipedObject) return false;
            if (!lhs.InjuredHealthPercent.EqualsWithin(rhs.InjuredHealthPercent)) return false;
            if (lhs.ShieldBipedObject != rhs.ShieldBipedObject) return false;
            if (!lhs.HealthRegen.EqualsWithin(rhs.HealthRegen)) return false;
            if (!lhs.MagickaRegen.EqualsWithin(rhs.MagickaRegen)) return false;
            if (!lhs.StaminaRegen.EqualsWithin(rhs.StaminaRegen)) return false;
            if (!lhs.UnarmedDamage.EqualsWithin(rhs.UnarmedDamage)) return false;
            if (!lhs.UnarmedReach.EqualsWithin(rhs.UnarmedReach)) return false;
            if (lhs.BodyBipedObject != rhs.BodyBipedObject) return false;
            if (!lhs.AimAngleTolerance.EqualsWithin(rhs.AimAngleTolerance)) return false;
            if (!lhs.FlightRadius.EqualsWithin(rhs.FlightRadius)) return false;
            if (!lhs.AngularAccelerationRate.EqualsWithin(rhs.AngularAccelerationRate)) return false;
            if (!lhs.AngularTolerance.EqualsWithin(rhs.AngularTolerance)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IRaceDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.SkillBoost0);
            hash.Add(item.SkillBoost1);
            hash.Add(item.SkillBoost2);
            hash.Add(item.SkillBoost3);
            hash.Add(item.SkillBoost4);
            hash.Add(item.SkillBoost5);
            hash.Add(item.SkillBoost6);
            hash.Add(item.Unknown);
            hash.Add(HashCode.Combine(item.Height.Male, item.Height.Female));
            hash.Add(HashCode.Combine(item.Weight.Male, item.Weight.Female));
            hash.Add(item.Flags);
            hash.Add(item.StartingHealth);
            hash.Add(item.StartingMagicka);
            hash.Add(item.StartingStamina);
            hash.Add(item.BaseCarryWeight);
            hash.Add(item.BaseMass);
            hash.Add(item.AccelerationRate);
            hash.Add(item.DecelerationRate);
            hash.Add(item.Size);
            hash.Add(item.HeadBipedObject);
            hash.Add(item.HairBipedObject);
            hash.Add(item.InjuredHealthPercent);
            hash.Add(item.ShieldBipedObject);
            hash.Add(item.HealthRegen);
            hash.Add(item.MagickaRegen);
            hash.Add(item.StaminaRegen);
            hash.Add(item.UnarmedDamage);
            hash.Add(item.UnarmedReach);
            hash.Add(item.BodyBipedObject);
            hash.Add(item.AimAngleTolerance);
            hash.Add(item.FlightRadius);
            hash.Add(item.AngularAccelerationRate);
            hash.Add(item.AngularTolerance);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return RaceData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IRaceDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class RaceDataSetterTranslationCommon
    {
        public static readonly RaceDataSetterTranslationCommon Instance = new RaceDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IRaceData item,
            IRaceDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost0) ?? true))
            {
                errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost0);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost0) ?? true))
                    {
                        item.SkillBoost0 = rhs.SkillBoost0.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost0),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost1) ?? true))
            {
                errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost1);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost1) ?? true))
                    {
                        item.SkillBoost1 = rhs.SkillBoost1.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost1),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost2) ?? true))
            {
                errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost2);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost2) ?? true))
                    {
                        item.SkillBoost2 = rhs.SkillBoost2.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost2),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost3) ?? true))
            {
                errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost3);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost3) ?? true))
                    {
                        item.SkillBoost3 = rhs.SkillBoost3.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost3),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost4) ?? true))
            {
                errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost4);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost4) ?? true))
                    {
                        item.SkillBoost4 = rhs.SkillBoost4.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost4),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost5) ?? true))
            {
                errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost5);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost5) ?? true))
                    {
                        item.SkillBoost5 = rhs.SkillBoost5.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost5),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost6) ?? true))
            {
                errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost6);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost6) ?? true))
                    {
                        item.SkillBoost6 = rhs.SkillBoost6.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost6),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            item.Height = new GenderedItem<Single>(
                male: rhs.Height.Male,
                female: rhs.Height.Female);
            item.Weight = new GenderedItem<Single>(
                male: rhs.Weight.Male,
                female: rhs.Weight.Female);
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.StartingHealth) ?? true))
            {
                item.StartingHealth = rhs.StartingHealth;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.StartingMagicka) ?? true))
            {
                item.StartingMagicka = rhs.StartingMagicka;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.StartingStamina) ?? true))
            {
                item.StartingStamina = rhs.StartingStamina;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.BaseCarryWeight) ?? true))
            {
                item.BaseCarryWeight = rhs.BaseCarryWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.BaseMass) ?? true))
            {
                item.BaseMass = rhs.BaseMass;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.AccelerationRate) ?? true))
            {
                item.AccelerationRate = rhs.AccelerationRate;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.DecelerationRate) ?? true))
            {
                item.DecelerationRate = rhs.DecelerationRate;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.Size) ?? true))
            {
                item.Size = rhs.Size;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.HeadBipedObject) ?? true))
            {
                item.HeadBipedObject = rhs.HeadBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.HairBipedObject) ?? true))
            {
                item.HairBipedObject = rhs.HairBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.InjuredHealthPercent) ?? true))
            {
                item.InjuredHealthPercent = rhs.InjuredHealthPercent;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.ShieldBipedObject) ?? true))
            {
                item.ShieldBipedObject = rhs.ShieldBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.HealthRegen) ?? true))
            {
                item.HealthRegen = rhs.HealthRegen;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.MagickaRegen) ?? true))
            {
                item.MagickaRegen = rhs.MagickaRegen;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.StaminaRegen) ?? true))
            {
                item.StaminaRegen = rhs.StaminaRegen;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.UnarmedDamage) ?? true))
            {
                item.UnarmedDamage = rhs.UnarmedDamage;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.UnarmedReach) ?? true))
            {
                item.UnarmedReach = rhs.UnarmedReach;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.BodyBipedObject) ?? true))
            {
                item.BodyBipedObject = rhs.BodyBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.AimAngleTolerance) ?? true))
            {
                item.AimAngleTolerance = rhs.AimAngleTolerance;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.FlightRadius) ?? true))
            {
                item.FlightRadius = rhs.FlightRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.AngularAccelerationRate) ?? true))
            {
                item.AngularAccelerationRate = rhs.AngularAccelerationRate;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.AngularTolerance) ?? true))
            {
                item.AngularTolerance = rhs.AngularTolerance;
            }
        }
        
        #endregion
        
        public RaceData DeepCopy(
            IRaceDataGetter item,
            RaceData.TranslationMask? copyMask = null)
        {
            RaceData ret = (RaceData)((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public RaceData DeepCopy(
            IRaceDataGetter item,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? copyMask = null)
        {
            RaceData ret = (RaceData)((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public RaceData DeepCopy(
            IRaceDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            RaceData ret = (RaceData)((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class RaceData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceData_Registration.Instance;
        public static RaceData_Registration Registration => RaceData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RaceDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return RaceDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RaceDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRaceDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRaceDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRaceDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RaceDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RaceDataXmlWriteTranslation Instance = new RaceDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRaceDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost0) ?? true))
            {
                var SkillBoost0Item = item.SkillBoost0;
                ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost0Item).XmlWriteTranslator).Write(
                    item: SkillBoost0Item,
                    node: node,
                    name: nameof(item.SkillBoost0),
                    fieldIndex: (int)RaceData_FieldIndex.SkillBoost0,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost0));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost1) ?? true))
            {
                var SkillBoost1Item = item.SkillBoost1;
                ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost1Item).XmlWriteTranslator).Write(
                    item: SkillBoost1Item,
                    node: node,
                    name: nameof(item.SkillBoost1),
                    fieldIndex: (int)RaceData_FieldIndex.SkillBoost1,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost1));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost2) ?? true))
            {
                var SkillBoost2Item = item.SkillBoost2;
                ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost2Item).XmlWriteTranslator).Write(
                    item: SkillBoost2Item,
                    node: node,
                    name: nameof(item.SkillBoost2),
                    fieldIndex: (int)RaceData_FieldIndex.SkillBoost2,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost2));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost3) ?? true))
            {
                var SkillBoost3Item = item.SkillBoost3;
                ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost3Item).XmlWriteTranslator).Write(
                    item: SkillBoost3Item,
                    node: node,
                    name: nameof(item.SkillBoost3),
                    fieldIndex: (int)RaceData_FieldIndex.SkillBoost3,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost3));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost4) ?? true))
            {
                var SkillBoost4Item = item.SkillBoost4;
                ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost4Item).XmlWriteTranslator).Write(
                    item: SkillBoost4Item,
                    node: node,
                    name: nameof(item.SkillBoost4),
                    fieldIndex: (int)RaceData_FieldIndex.SkillBoost4,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost4));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost5) ?? true))
            {
                var SkillBoost5Item = item.SkillBoost5;
                ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost5Item).XmlWriteTranslator).Write(
                    item: SkillBoost5Item,
                    node: node,
                    name: nameof(item.SkillBoost5),
                    fieldIndex: (int)RaceData_FieldIndex.SkillBoost5,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost5));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost6) ?? true))
            {
                var SkillBoost6Item = item.SkillBoost6;
                ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost6Item).XmlWriteTranslator).Write(
                    item: SkillBoost6Item,
                    node: node,
                    name: nameof(item.SkillBoost6),
                    fieldIndex: (int)RaceData_FieldIndex.SkillBoost6,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost6));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.Unknown) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)RaceData_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.Height) ?? true))
            {
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Height),
                        item: item.Height.Male,
                        errorMask: errorMask);
                }
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Height),
                        item: item.Height.Female,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.Weight) ?? true))
            {
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Weight),
                        item: item.Weight.Male,
                        errorMask: errorMask);
                }
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Weight),
                        item: item.Weight.Female,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<RaceData.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)RaceData_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.StartingHealth) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StartingHealth),
                    item: item.StartingHealth,
                    fieldIndex: (int)RaceData_FieldIndex.StartingHealth,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.StartingMagicka) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StartingMagicka),
                    item: item.StartingMagicka,
                    fieldIndex: (int)RaceData_FieldIndex.StartingMagicka,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.StartingStamina) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StartingStamina),
                    item: item.StartingStamina,
                    fieldIndex: (int)RaceData_FieldIndex.StartingStamina,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.BaseCarryWeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseCarryWeight),
                    item: item.BaseCarryWeight,
                    fieldIndex: (int)RaceData_FieldIndex.BaseCarryWeight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.BaseMass) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseMass),
                    item: item.BaseMass,
                    fieldIndex: (int)RaceData_FieldIndex.BaseMass,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.AccelerationRate) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AccelerationRate),
                    item: item.AccelerationRate,
                    fieldIndex: (int)RaceData_FieldIndex.AccelerationRate,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.DecelerationRate) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DecelerationRate),
                    item: item.DecelerationRate,
                    fieldIndex: (int)RaceData_FieldIndex.DecelerationRate,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.Size) ?? true))
            {
                EnumXmlTranslation<Race.Size>.Instance.Write(
                    node: node,
                    name: nameof(item.Size),
                    item: item.Size,
                    fieldIndex: (int)RaceData_FieldIndex.Size,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.HeadBipedObject) ?? true))
            {
                EnumXmlTranslation<BipedObject>.Instance.Write(
                    node: node,
                    name: nameof(item.HeadBipedObject),
                    item: item.HeadBipedObject,
                    fieldIndex: (int)RaceData_FieldIndex.HeadBipedObject,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.HairBipedObject) ?? true))
            {
                EnumXmlTranslation<BipedObject>.Instance.Write(
                    node: node,
                    name: nameof(item.HairBipedObject),
                    item: item.HairBipedObject,
                    fieldIndex: (int)RaceData_FieldIndex.HairBipedObject,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.InjuredHealthPercent) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.InjuredHealthPercent),
                    item: item.InjuredHealthPercent,
                    fieldIndex: (int)RaceData_FieldIndex.InjuredHealthPercent,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.ShieldBipedObject) ?? true))
            {
                EnumXmlTranslation<BipedObject>.Instance.Write(
                    node: node,
                    name: nameof(item.ShieldBipedObject),
                    item: item.ShieldBipedObject,
                    fieldIndex: (int)RaceData_FieldIndex.ShieldBipedObject,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.HealthRegen) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HealthRegen),
                    item: item.HealthRegen,
                    fieldIndex: (int)RaceData_FieldIndex.HealthRegen,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.MagickaRegen) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MagickaRegen),
                    item: item.MagickaRegen,
                    fieldIndex: (int)RaceData_FieldIndex.MagickaRegen,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.StaminaRegen) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StaminaRegen),
                    item: item.StaminaRegen,
                    fieldIndex: (int)RaceData_FieldIndex.StaminaRegen,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.UnarmedDamage) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.UnarmedDamage),
                    item: item.UnarmedDamage,
                    fieldIndex: (int)RaceData_FieldIndex.UnarmedDamage,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.UnarmedReach) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.UnarmedReach),
                    item: item.UnarmedReach,
                    fieldIndex: (int)RaceData_FieldIndex.UnarmedReach,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.BodyBipedObject) ?? true))
            {
                EnumXmlTranslation<BipedObject>.Instance.Write(
                    node: node,
                    name: nameof(item.BodyBipedObject),
                    item: item.BodyBipedObject,
                    fieldIndex: (int)RaceData_FieldIndex.BodyBipedObject,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.AimAngleTolerance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AimAngleTolerance),
                    item: item.AimAngleTolerance,
                    fieldIndex: (int)RaceData_FieldIndex.AimAngleTolerance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.FlightRadius) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FlightRadius),
                    item: item.FlightRadius,
                    fieldIndex: (int)RaceData_FieldIndex.FlightRadius,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.AngularAccelerationRate) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AngularAccelerationRate),
                    item: item.AngularAccelerationRate,
                    fieldIndex: (int)RaceData_FieldIndex.AngularAccelerationRate,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.AngularTolerance) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AngularTolerance),
                    item: item.AngularTolerance,
                    fieldIndex: (int)RaceData_FieldIndex.AngularTolerance,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRaceDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.RaceData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.RaceData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRaceDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IRaceDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RaceDataXmlCreateTranslation
    {
        public readonly static RaceDataXmlCreateTranslation Instance = new RaceDataXmlCreateTranslation();

        public static void FillPublicXml(
            IRaceData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRaceData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "SkillBoost0":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost0);
                    try
                    {
                        item.SkillBoost0 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost0));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost1":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost1);
                    try
                    {
                        item.SkillBoost1 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost1));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost2":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost2);
                    try
                    {
                        item.SkillBoost2 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost2));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost3":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost3);
                    try
                    {
                        item.SkillBoost3 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost3));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost4":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost4);
                    try
                    {
                        item.SkillBoost4 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost4));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost5":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost5);
                    try
                    {
                        item.SkillBoost5 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost5));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost6":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost6);
                    try
                    {
                        item.SkillBoost6 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost6));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Height":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.Height);
                    try
                    {
                        item.Height = new GenderedItem<Single>(
                            male: FloatXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask),
                            female: FloatXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weight":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.Weight);
                    try
                    {
                        item.Weight = new GenderedItem<Single>(
                            male: FloatXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask),
                            female: FloatXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<RaceData.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StartingHealth":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.StartingHealth);
                    try
                    {
                        item.StartingHealth = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StartingMagicka":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.StartingMagicka);
                    try
                    {
                        item.StartingMagicka = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StartingStamina":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.StartingStamina);
                    try
                    {
                        item.StartingStamina = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BaseCarryWeight":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.BaseCarryWeight);
                    try
                    {
                        item.BaseCarryWeight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BaseMass":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.BaseMass);
                    try
                    {
                        item.BaseMass = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AccelerationRate":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.AccelerationRate);
                    try
                    {
                        item.AccelerationRate = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DecelerationRate":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.DecelerationRate);
                    try
                    {
                        item.DecelerationRate = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Size":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.Size);
                    try
                    {
                        item.Size = EnumXmlTranslation<Race.Size>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HeadBipedObject":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.HeadBipedObject);
                    try
                    {
                        item.HeadBipedObject = EnumXmlTranslation<BipedObject>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HairBipedObject":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.HairBipedObject);
                    try
                    {
                        item.HairBipedObject = EnumXmlTranslation<BipedObject>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "InjuredHealthPercent":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.InjuredHealthPercent);
                    try
                    {
                        item.InjuredHealthPercent = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ShieldBipedObject":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.ShieldBipedObject);
                    try
                    {
                        item.ShieldBipedObject = EnumXmlTranslation<BipedObject>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HealthRegen":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.HealthRegen);
                    try
                    {
                        item.HealthRegen = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagickaRegen":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.MagickaRegen);
                    try
                    {
                        item.MagickaRegen = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StaminaRegen":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.StaminaRegen);
                    try
                    {
                        item.StaminaRegen = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnarmedDamage":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.UnarmedDamage);
                    try
                    {
                        item.UnarmedDamage = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnarmedReach":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.UnarmedReach);
                    try
                    {
                        item.UnarmedReach = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BodyBipedObject":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.BodyBipedObject);
                    try
                    {
                        item.BodyBipedObject = EnumXmlTranslation<BipedObject>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AimAngleTolerance":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.AimAngleTolerance);
                    try
                    {
                        item.AimAngleTolerance = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FlightRadius":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.FlightRadius);
                    try
                    {
                        item.FlightRadius = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AngularAccelerationRate":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.AngularAccelerationRate);
                    try
                    {
                        item.AngularAccelerationRate = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AngularTolerance":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.AngularTolerance);
                    try
                    {
                        item.AngularTolerance = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class RaceDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRaceDataGetter item,
            XElement node,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RaceData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            string path,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            Stream stream,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((RaceDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            XElement node,
            string? name = null,
            RaceData.TranslationMask? translationMask = null)
        {
            ((RaceDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((RaceDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((RaceDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RaceDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RaceDataBinaryWriteTranslation Instance = new RaceDataBinaryWriteTranslation();

        static partial void WriteBinaryFlags2Custom(
            MutagenWriter writer,
            IRaceDataGetter item);

        public static void WriteBinaryFlags2(
            MutagenWriter writer,
            IRaceDataGetter item)
        {
            WriteBinaryFlags2Custom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryMountDataCustom(
            MutagenWriter writer,
            IRaceDataGetter item);

        public static void WriteBinaryMountData(
            MutagenWriter writer,
            IRaceDataGetter item)
        {
            WriteBinaryMountDataCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IRaceDataGetter item,
            MutagenWriter writer)
        {
            var SkillBoost0Item = item.SkillBoost0;
            ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost0Item).BinaryWriteTranslator).Write(
                item: SkillBoost0Item,
                writer: writer);
            var SkillBoost1Item = item.SkillBoost1;
            ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost1Item).BinaryWriteTranslator).Write(
                item: SkillBoost1Item,
                writer: writer);
            var SkillBoost2Item = item.SkillBoost2;
            ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost2Item).BinaryWriteTranslator).Write(
                item: SkillBoost2Item,
                writer: writer);
            var SkillBoost3Item = item.SkillBoost3;
            ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost3Item).BinaryWriteTranslator).Write(
                item: SkillBoost3Item,
                writer: writer);
            var SkillBoost4Item = item.SkillBoost4;
            ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost4Item).BinaryWriteTranslator).Write(
                item: SkillBoost4Item,
                writer: writer);
            var SkillBoost5Item = item.SkillBoost5;
            ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost5Item).BinaryWriteTranslator).Write(
                item: SkillBoost5Item,
                writer: writer);
            var SkillBoost6Item = item.SkillBoost6;
            ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost6Item).BinaryWriteTranslator).Write(
                item: SkillBoost6Item,
                writer: writer);
            writer.Write(item.Unknown);
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.Height,
                transl: FloatBinaryTranslation.Instance.Write);
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.Weight,
                transl: FloatBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<RaceData.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.StartingHealth);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.StartingMagicka);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.StartingStamina);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BaseCarryWeight);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BaseMass);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AccelerationRate);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DecelerationRate);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Race.Size>.Instance.Write(
                writer,
                item.Size,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<BipedObject>.Instance.Write(
                writer,
                item.HeadBipedObject,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<BipedObject>.Instance.Write(
                writer,
                item.HairBipedObject,
                length: 4);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.InjuredHealthPercent);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<BipedObject>.Instance.Write(
                writer,
                item.ShieldBipedObject,
                length: 4);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.HealthRegen);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MagickaRegen);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.StaminaRegen);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnarmedDamage);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UnarmedReach);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<BipedObject>.Instance.Write(
                writer,
                item.BodyBipedObject,
                length: 4);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AimAngleTolerance);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FlightRadius);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AngularAccelerationRate);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AngularTolerance);
            RaceDataBinaryWriteTranslation.WriteBinaryFlags2(
                writer: writer,
                item: item);
            RaceDataBinaryWriteTranslation.WriteBinaryMountData(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IRaceDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RaceData_Registration.DATA_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRaceDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RaceDataBinaryCreateTranslation
    {
        public readonly static RaceDataBinaryCreateTranslation Instance = new RaceDataBinaryCreateTranslation();

        static partial void FillBinaryFlags2Custom(
            MutagenFrame frame,
            IRaceData item);

        public static void FillBinaryFlags2CustomPublic(
            MutagenFrame frame,
            IRaceData item)
        {
            FillBinaryFlags2Custom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryMountDataCustom(
            MutagenFrame frame,
            IRaceData item);

        public static void FillBinaryMountDataCustomPublic(
            MutagenFrame frame,
            IRaceData item)
        {
            FillBinaryMountDataCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class RaceDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRaceDataGetter item,
            MutagenWriter writer)
        {
            ((RaceDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RaceDataBinaryOverlay :
        BinaryOverlay,
        IRaceDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceData_Registration.Instance;
        public static RaceData_Registration Registration => RaceData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RaceDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RaceDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRaceDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRaceDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRaceDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => RaceDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RaceDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RaceDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public ISkillBoostGetter SkillBoost0 => SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(0x0)), _package, default(RecordTypeConverter));
        public ISkillBoostGetter SkillBoost1 => SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(0x2)), _package, default(RecordTypeConverter));
        public ISkillBoostGetter SkillBoost2 => SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(0x4)), _package, default(RecordTypeConverter));
        public ISkillBoostGetter SkillBoost3 => SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(0x6)), _package, default(RecordTypeConverter));
        public ISkillBoostGetter SkillBoost4 => SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(0x8)), _package, default(RecordTypeConverter));
        public ISkillBoostGetter SkillBoost5 => SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(0xA)), _package, default(RecordTypeConverter));
        public ISkillBoostGetter SkillBoost6 => SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(0xC)), _package, default(RecordTypeConverter));
        public Int16 Unknown => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0xE, 0x2));
        #region Height
        public IGenderedItemGetter<Single> Height
        {
            get
            {
                var data = _data.Span.Slice(0x10, 8);
                return new GenderedItem<Single>(
                    SpanExt.GetFloat(data),
                    SpanExt.GetFloat(data.Slice(4)));
            }
        }
        #endregion
        #region Weight
        public IGenderedItemGetter<Single> Weight
        {
            get
            {
                var data = _data.Span.Slice(0x18, 8);
                return new GenderedItem<Single>(
                    SpanExt.GetFloat(data),
                    SpanExt.GetFloat(data.Slice(4)));
            }
        }
        #endregion
        public RaceData.Flag Flags => GetFlagsCustom(location: 0x20);
        public Single StartingHealth => SpanExt.GetFloat(_data.Slice(0x24, 0x4));
        public Single StartingMagicka => SpanExt.GetFloat(_data.Slice(0x28, 0x4));
        public Single StartingStamina => SpanExt.GetFloat(_data.Slice(0x2C, 0x4));
        public Single BaseCarryWeight => SpanExt.GetFloat(_data.Slice(0x30, 0x4));
        public Single BaseMass => SpanExt.GetFloat(_data.Slice(0x34, 0x4));
        public Single AccelerationRate => SpanExt.GetFloat(_data.Slice(0x38, 0x4));
        public Single DecelerationRate => SpanExt.GetFloat(_data.Slice(0x3C, 0x4));
        public Race.Size Size => (Race.Size)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x40, 0x4));
        public BipedObject HeadBipedObject => (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x44, 0x4));
        public BipedObject HairBipedObject => (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x48, 0x4));
        public Single InjuredHealthPercent => SpanExt.GetFloat(_data.Slice(0x4C, 0x4));
        public BipedObject ShieldBipedObject => (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x50, 0x4));
        public Single HealthRegen => SpanExt.GetFloat(_data.Slice(0x54, 0x4));
        public Single MagickaRegen => SpanExt.GetFloat(_data.Slice(0x58, 0x4));
        public Single StaminaRegen => SpanExt.GetFloat(_data.Slice(0x5C, 0x4));
        public Single UnarmedDamage => SpanExt.GetFloat(_data.Slice(0x60, 0x4));
        public Single UnarmedReach => SpanExt.GetFloat(_data.Slice(0x64, 0x4));
        public BipedObject BodyBipedObject => (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x68, 0x4));
        public Single AimAngleTolerance => SpanExt.GetFloat(_data.Slice(0x6C, 0x4));
        public Single FlightRadius => SpanExt.GetFloat(_data.Slice(0x70, 0x4));
        public Single AngularAccelerationRate => SpanExt.GetFloat(_data.Slice(0x74, 0x4));
        public Single AngularTolerance => SpanExt.GetFloat(_data.Slice(0x78, 0x4));
        #region Flags2
        partial void Flags2CustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region MountData
        partial void MountDataCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        private int Flags2EndingPos;
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RaceDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RaceDataBinaryOverlay RaceDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RaceDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x7C + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static RaceDataBinaryOverlay RaceDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return RaceDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

