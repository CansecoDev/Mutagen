/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Race :
        SkyrimMajorRecord,
        IRaceInternal,
        ILoquiObjectSetter<Race>,
        IEquatable<Race>,
        IEqualsMask
    {
        #region Ctor
        protected Race()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRaceGetter.Name => this.Name;
        #endregion
        #region Description
        public String Description { get; set; } = string.Empty;
        #endregion
        #region ActorEffect
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<ASpell>>? _ActorEffect;
        public ExtendedList<IFormLink<ASpell>>? ActorEffect
        {
            get => this._ActorEffect;
            set => this._ActorEffect = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IASpellGetter>>? IRaceGetter.ActorEffect => _ActorEffect;
        #endregion

        #endregion
        #region Skin
        public FormLinkNullable<Armor> Skin { get; set; } = new FormLinkNullable<Armor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArmorGetter> IRaceGetter.Skin => this.Skin;
        #endregion
        #region BodyTemplate
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BodyTemplate? _BodyTemplate;
        public BodyTemplate? BodyTemplate
        {
            get => _BodyTemplate;
            set => _BodyTemplate = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBodyTemplateGetter? IRaceGetter.BodyTemplate => this.BodyTemplate;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Keyword>>? _Keywords;
        public ExtendedList<IFormLink<Keyword>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IRaceGetter.Keywords => _Keywords;
        #endregion

        #endregion
        #region Data
        public RaceData Data { get; set; } = new RaceData();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRaceDataGetter IRaceGetter.Data => Data;
        #endregion
        #region SkeletalModel
        public GenderedItem<SimpleModel?>? SkeletalModel { get; set; }
        IGenderedItemGetter<ISimpleModelGetter?>? IRaceGetter.SkeletalModel => this.SkeletalModel;
        #endregion
        #region MovementTypeNames
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String>? _MovementTypeNames;
        public ExtendedList<String>? MovementTypeNames
        {
            get => this._MovementTypeNames;
            set => this._MovementTypeNames = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String>? IRaceGetter.MovementTypeNames => _MovementTypeNames;
        #endregion

        #endregion
        #region Voices
        public GenderedItem<IFormLink<VoiceType>> Voices { get; set; } = new GenderedItem<IFormLink<VoiceType>>(new FormLink<VoiceType>(FormKey.Null), new FormLink<VoiceType>(FormKey.Null));
        IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>> IRaceGetter.Voices => this.Voices;
        #endregion
        #region DecapitateArmors
        public GenderedItem<IFormLink<Armor>>? DecapitateArmors { get; set; }
        IGenderedItemGetter<IFormLinkGetter<IArmorGetter>>? IRaceGetter.DecapitateArmors => this.DecapitateArmors;
        #endregion
        #region DefaultHairColors
        public GenderedItem<IFormLink<ColorRecord>>? DefaultHairColors { get; set; }
        IGenderedItemGetter<IFormLinkGetter<IColorRecordGetter>>? IRaceGetter.DefaultHairColors => this.DefaultHairColors;
        #endregion
        #region NumberOfTintsInList
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16? _NumberOfTintsInList;
        public UInt16? NumberOfTintsInList
        {
            get => this._NumberOfTintsInList;
            set => this._NumberOfTintsInList = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IRaceGetter.NumberOfTintsInList => this.NumberOfTintsInList;
        #endregion
        #region FacegenMainClamp
        public Single FacegenMainClamp { get; set; } = default;
        #endregion
        #region FacegenFaceClamp
        public Single FacegenFaceClamp { get; set; } = default;
        #endregion
        #region AttackRace
        public FormLinkNullable<Race> AttackRace { get; set; } = new FormLinkNullable<Race>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IRaceGetter.AttackRace => this.AttackRace;
        #endregion
        #region Attacks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Attack> _Attacks = new ExtendedList<Attack>();
        public ExtendedList<Attack> Attacks
        {
            get => this._Attacks;
            protected set => this._Attacks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAttackGetter> IRaceGetter.Attacks => _Attacks;
        #endregion

        #endregion
        #region BodyData
        public GenderedItem<BodyData?> BodyData { get; set; } = new GenderedItem<BodyData?>(default(BodyData?), default(BodyData?));
        IGenderedItemGetter<IBodyDataGetter?> IRaceGetter.BodyData => this.BodyData;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Hair>>? _Hairs;
        public ExtendedList<IFormLink<Hair>>? Hairs
        {
            get => this._Hairs;
            set => this._Hairs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IHairGetter>>? IRaceGetter.Hairs => _Hairs;
        #endregion

        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Eyes>>? _Eyes;
        public ExtendedList<IFormLink<Eyes>>? Eyes
        {
            get => this._Eyes;
            set => this._Eyes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IEyesGetter>>? IRaceGetter.Eyes => _Eyes;
        #endregion

        #endregion
        #region BodyPartData
        public FormLinkNullable<BodyPartData> BodyPartData { get; set; } = new FormLinkNullable<BodyPartData>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IBodyPartDataGetter> IRaceGetter.BodyPartData => this.BodyPartData;
        #endregion
        #region BehaviorGraph
        public GenderedItem<Model?> BehaviorGraph { get; set; } = new GenderedItem<Model?>(default(Model?), default(Model?));
        IGenderedItemGetter<IModelGetter?> IRaceGetter.BehaviorGraph => this.BehaviorGraph;
        #endregion
        #region MaterialType
        public FormLinkNullable<MaterialType> MaterialType { get; set; } = new FormLinkNullable<MaterialType>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMaterialTypeGetter> IRaceGetter.MaterialType => this.MaterialType;
        #endregion
        #region ImpactDataSet
        public FormLinkNullable<ImpactDataSet> ImpactDataSet { get; set; } = new FormLinkNullable<ImpactDataSet>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IImpactDataSetGetter> IRaceGetter.ImpactDataSet => this.ImpactDataSet;
        #endregion
        #region DecapitationFX
        public FormLinkNullable<ArtObject> DecapitationFX { get; set; } = new FormLinkNullable<ArtObject>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArtObjectGetter> IRaceGetter.DecapitationFX => this.DecapitationFX;
        #endregion
        #region OpenLootSound
        public FormLinkNullable<SoundDescriptor> OpenLootSound { get; set; } = new FormLinkNullable<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IRaceGetter.OpenLootSound => this.OpenLootSound;
        #endregion
        #region CloseLootSound
        public FormLinkNullable<SoundDescriptor> CloseLootSound { get; set; } = new FormLinkNullable<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IRaceGetter.CloseLootSound => this.CloseLootSound;
        #endregion
        #region BipedObjectNames
        private readonly Dictionary<BipedObject, String> _BipedObjectNames = new Dictionary<BipedObject, String>();
        public IDictionary<BipedObject, String> BipedObjectNames => _BipedObjectNames;
        #region Interface Members
        IDictionary<BipedObject, String> IRace.BipedObjectNames => _BipedObjectNames;
        IReadOnlyDictionary<BipedObject, String> IRaceGetter.BipedObjectNames => _BipedObjectNames;
        #endregion

        #endregion
        #region MovementTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RaceMovementType> _MovementTypes = new ExtendedList<RaceMovementType>();
        public ExtendedList<RaceMovementType> MovementTypes
        {
            get => this._MovementTypes;
            protected set => this._MovementTypes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRaceMovementTypeGetter> IRaceGetter.MovementTypes => _MovementTypes;
        #endregion

        #endregion
        #region EquipmentFlags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EquipTypeFlag? _EquipmentFlags;
        public EquipTypeFlag? EquipmentFlags
        {
            get => this._EquipmentFlags;
            set => this._EquipmentFlags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        EquipTypeFlag? IRaceGetter.EquipmentFlags => this.EquipmentFlags;
        #endregion
        #region EquipmentSlots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<EquipType>>? _EquipmentSlots;
        public ExtendedList<IFormLink<EquipType>>? EquipmentSlots
        {
            get => this._EquipmentSlots;
            set => this._EquipmentSlots = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IEquipTypeGetter>>? IRaceGetter.EquipmentSlots => _EquipmentSlots;
        #endregion

        #endregion
        #region UnarmedEquipSlot
        public FormLinkNullable<EquipType> UnarmedEquipSlot { get; set; } = new FormLinkNullable<EquipType>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEquipTypeGetter> IRaceGetter.UnarmedEquipSlot => this.UnarmedEquipSlot;
        #endregion
        #region FaceFxPhonemes
        public FaceFxPhonemes FaceFxPhonemes { get; set; } = new FaceFxPhonemes();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFaceFxPhonemesGetter IRaceGetter.FaceFxPhonemes => FaceFxPhonemes;
        #endregion
        #region BaseMovementDefaultWalk
        public FormLinkNullable<MovementType> BaseMovementDefaultWalk { get; set; } = new FormLinkNullable<MovementType>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultWalk => this.BaseMovementDefaultWalk;
        #endregion
        #region BaseMovementDefaultRun
        public FormLinkNullable<MovementType> BaseMovementDefaultRun { get; set; } = new FormLinkNullable<MovementType>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultRun => this.BaseMovementDefaultRun;
        #endregion
        #region BaseMovementDefaultSwim
        public FormLinkNullable<MovementType> BaseMovementDefaultSwim { get; set; } = new FormLinkNullable<MovementType>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultSwim => this.BaseMovementDefaultSwim;
        #endregion
        #region BaseMovementDefaultFly
        public FormLinkNullable<MovementType> BaseMovementDefaultFly { get; set; } = new FormLinkNullable<MovementType>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultFly => this.BaseMovementDefaultFly;
        #endregion
        #region BaseMovementDefaultSneak
        public FormLinkNullable<MovementType> BaseMovementDefaultSneak { get; set; } = new FormLinkNullable<MovementType>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultSneak => this.BaseMovementDefaultSneak;
        #endregion
        #region BaseMovementDefaultSprint
        public FormLinkNullable<MovementType> BaseMovementDefaultSprint { get; set; } = new FormLinkNullable<MovementType>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultSprint => this.BaseMovementDefaultSprint;
        #endregion
        #region HeadData
        public GenderedItem<HeadData?>? HeadData { get; set; }
        IGenderedItemGetter<IHeadDataGetter?>? IRaceGetter.HeadData => this.HeadData;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRaceGetter rhs)) return false;
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Race obj)
        {
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RaceCommon)((IRaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => RaceXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RaceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Race CreateFromXml(
            XElement node,
            Race.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Race CreateFromXml(
            XElement node,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Race CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Race();
            ((RaceSetterCommon)((IRaceGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Race CreateFromXml(
            string path,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            string path,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Race CreateFromXml(
            Stream stream,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            Stream stream,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Race CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Skin = initialValue;
                this.BodyTemplate = new MaskItem<TItem, BodyTemplate.Mask<TItem>?>(initialValue, new BodyTemplate.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Data = new MaskItem<TItem, RaceData.Mask<TItem>?>(initialValue, new RaceData.Mask<TItem>(initialValue));
                this.SkeletalModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, SimpleModel.Mask<TItem>?>?>?>(initialValue, default);
                this.MovementTypeNames = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Voices = new GenderedItem<TItem>(initialValue, initialValue);
                this.DecapitateArmors = new MaskItem<TItem, GenderedItem<TItem>?>(initialValue, default);
                this.DefaultHairColors = new MaskItem<TItem, GenderedItem<TItem>?>(initialValue, default);
                this.NumberOfTintsInList = initialValue;
                this.FacegenMainClamp = initialValue;
                this.FacegenFaceClamp = initialValue;
                this.AttackRace = initialValue;
                this.Attacks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>());
                this.BodyData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>(initialValue, default);
                this.Hairs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Eyes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.BodyPartData = initialValue;
                this.BehaviorGraph = new MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>(initialValue, default);
                this.MaterialType = initialValue;
                this.ImpactDataSet = initialValue;
                this.DecapitationFX = initialValue;
                this.OpenLootSound = initialValue;
                this.CloseLootSound = initialValue;
                this.BipedObjectNames = new MaskItem<TItem, IEnumerable<KeyValuePair<TItem, TItem>>?>(initialValue, null);
                this.MovementTypes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RaceMovementType.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RaceMovementType.Mask<TItem>?>>());
                this.EquipmentFlags = initialValue;
                this.EquipmentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.UnarmedEquipSlot = initialValue;
                this.FaceFxPhonemes = new MaskItem<TItem, FaceFxPhonemes.Mask<TItem>?>(initialValue, new FaceFxPhonemes.Mask<TItem>(initialValue));
                this.BaseMovementDefaultWalk = initialValue;
                this.BaseMovementDefaultRun = initialValue;
                this.BaseMovementDefaultSwim = initialValue;
                this.BaseMovementDefaultFly = initialValue;
                this.BaseMovementDefaultSneak = initialValue;
                this.BaseMovementDefaultSprint = initialValue;
                this.HeadData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, HeadData.Mask<TItem>?>?>?>(initialValue, default);
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Name,
                TItem Description,
                TItem ActorEffect,
                TItem Skin,
                TItem BodyTemplate,
                TItem Keywords,
                TItem Data,
                TItem SkeletalModel,
                TItem MovementTypeNames,
                TItem Voices,
                TItem DecapitateArmors,
                TItem DefaultHairColors,
                TItem NumberOfTintsInList,
                TItem FacegenMainClamp,
                TItem FacegenFaceClamp,
                TItem AttackRace,
                TItem Attacks,
                TItem BodyData,
                TItem Hairs,
                TItem Eyes,
                TItem BodyPartData,
                TItem BehaviorGraph,
                TItem MaterialType,
                TItem ImpactDataSet,
                TItem DecapitationFX,
                TItem OpenLootSound,
                TItem CloseLootSound,
                TItem BipedObjectNames,
                TItem MovementTypes,
                TItem EquipmentFlags,
                TItem EquipmentSlots,
                TItem UnarmedEquipSlot,
                TItem FaceFxPhonemes,
                TItem BaseMovementDefaultWalk,
                TItem BaseMovementDefaultRun,
                TItem BaseMovementDefaultSwim,
                TItem BaseMovementDefaultFly,
                TItem BaseMovementDefaultSneak,
                TItem BaseMovementDefaultSprint,
                TItem HeadData)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.Name = Name;
                this.Description = Description;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ActorEffect, Enumerable.Empty<(int Index, TItem Value)>());
                this.Skin = Skin;
                this.BodyTemplate = new MaskItem<TItem, BodyTemplate.Mask<TItem>?>(BodyTemplate, new BodyTemplate.Mask<TItem>(BodyTemplate));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Data = new MaskItem<TItem, RaceData.Mask<TItem>?>(Data, new RaceData.Mask<TItem>(Data));
                this.SkeletalModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, SimpleModel.Mask<TItem>?>?>?>(SkeletalModel, default);
                this.MovementTypeNames = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(MovementTypeNames, Enumerable.Empty<(int Index, TItem Value)>());
                this.Voices = new GenderedItem<TItem>(Voices, Voices);
                this.DecapitateArmors = new MaskItem<TItem, GenderedItem<TItem>?>(DecapitateArmors, default);
                this.DefaultHairColors = new MaskItem<TItem, GenderedItem<TItem>?>(DefaultHairColors, default);
                this.NumberOfTintsInList = NumberOfTintsInList;
                this.FacegenMainClamp = FacegenMainClamp;
                this.FacegenFaceClamp = FacegenFaceClamp;
                this.AttackRace = AttackRace;
                this.Attacks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>(Attacks, Enumerable.Empty<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>());
                this.BodyData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>(BodyData, default);
                this.Hairs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Hairs, Enumerable.Empty<(int Index, TItem Value)>());
                this.Eyes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Eyes, Enumerable.Empty<(int Index, TItem Value)>());
                this.BodyPartData = BodyPartData;
                this.BehaviorGraph = new MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>(BehaviorGraph, default);
                this.MaterialType = MaterialType;
                this.ImpactDataSet = ImpactDataSet;
                this.DecapitationFX = DecapitationFX;
                this.OpenLootSound = OpenLootSound;
                this.CloseLootSound = CloseLootSound;
                this.BipedObjectNames = new MaskItem<TItem, IEnumerable<KeyValuePair<TItem, TItem>>?>(BipedObjectNames, null);
                this.MovementTypes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RaceMovementType.Mask<TItem>?>>?>(MovementTypes, Enumerable.Empty<MaskItemIndexed<TItem, RaceMovementType.Mask<TItem>?>>());
                this.EquipmentFlags = EquipmentFlags;
                this.EquipmentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(EquipmentSlots, Enumerable.Empty<(int Index, TItem Value)>());
                this.UnarmedEquipSlot = UnarmedEquipSlot;
                this.FaceFxPhonemes = new MaskItem<TItem, FaceFxPhonemes.Mask<TItem>?>(FaceFxPhonemes, new FaceFxPhonemes.Mask<TItem>(FaceFxPhonemes));
                this.BaseMovementDefaultWalk = BaseMovementDefaultWalk;
                this.BaseMovementDefaultRun = BaseMovementDefaultRun;
                this.BaseMovementDefaultSwim = BaseMovementDefaultSwim;
                this.BaseMovementDefaultFly = BaseMovementDefaultFly;
                this.BaseMovementDefaultSneak = BaseMovementDefaultSneak;
                this.BaseMovementDefaultSprint = BaseMovementDefaultSprint;
                this.HeadData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, HeadData.Mask<TItem>?>?>?>(HeadData, default);
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ActorEffect;
            public TItem Skin;
            public MaskItem<TItem, BodyTemplate.Mask<TItem>?>? BodyTemplate { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, RaceData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, SimpleModel.Mask<TItem>?>?>?>? SkeletalModel;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? MovementTypeNames;
            public GenderedItem<TItem> Voices;
            public MaskItem<TItem, GenderedItem<TItem>?>? DecapitateArmors;
            public MaskItem<TItem, GenderedItem<TItem>?>? DefaultHairColors;
            public TItem NumberOfTintsInList;
            public TItem FacegenMainClamp;
            public TItem FacegenFaceClamp;
            public TItem AttackRace;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>? Attacks;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>? BodyData;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Hairs;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Eyes;
            public TItem BodyPartData;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>? BehaviorGraph;
            public TItem MaterialType;
            public TItem ImpactDataSet;
            public TItem DecapitationFX;
            public TItem OpenLootSound;
            public TItem CloseLootSound;
            public MaskItem<TItem, IEnumerable<KeyValuePair<TItem, TItem>>?>? BipedObjectNames;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RaceMovementType.Mask<TItem>?>>?>? MovementTypes;
            public TItem EquipmentFlags;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? EquipmentSlots;
            public TItem UnarmedEquipSlot;
            public MaskItem<TItem, FaceFxPhonemes.Mask<TItem>?>? FaceFxPhonemes { get; set; }
            public TItem BaseMovementDefaultWalk;
            public TItem BaseMovementDefaultRun;
            public TItem BaseMovementDefaultSwim;
            public TItem BaseMovementDefaultFly;
            public TItem BaseMovementDefaultSneak;
            public TItem BaseMovementDefaultSprint;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, HeadData.Mask<TItem>?>?>?>? HeadData;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.ActorEffect, rhs.ActorEffect)) return false;
                if (!object.Equals(this.Skin, rhs.Skin)) return false;
                if (!object.Equals(this.BodyTemplate, rhs.BodyTemplate)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.SkeletalModel, rhs.SkeletalModel)) return false;
                if (!object.Equals(this.MovementTypeNames, rhs.MovementTypeNames)) return false;
                if (!object.Equals(this.Voices, rhs.Voices)) return false;
                if (!object.Equals(this.DecapitateArmors, rhs.DecapitateArmors)) return false;
                if (!object.Equals(this.DefaultHairColors, rhs.DefaultHairColors)) return false;
                if (!object.Equals(this.NumberOfTintsInList, rhs.NumberOfTintsInList)) return false;
                if (!object.Equals(this.FacegenMainClamp, rhs.FacegenMainClamp)) return false;
                if (!object.Equals(this.FacegenFaceClamp, rhs.FacegenFaceClamp)) return false;
                if (!object.Equals(this.AttackRace, rhs.AttackRace)) return false;
                if (!object.Equals(this.Attacks, rhs.Attacks)) return false;
                if (!object.Equals(this.BodyData, rhs.BodyData)) return false;
                if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.BodyPartData, rhs.BodyPartData)) return false;
                if (!object.Equals(this.BehaviorGraph, rhs.BehaviorGraph)) return false;
                if (!object.Equals(this.MaterialType, rhs.MaterialType)) return false;
                if (!object.Equals(this.ImpactDataSet, rhs.ImpactDataSet)) return false;
                if (!object.Equals(this.DecapitationFX, rhs.DecapitationFX)) return false;
                if (!object.Equals(this.OpenLootSound, rhs.OpenLootSound)) return false;
                if (!object.Equals(this.CloseLootSound, rhs.CloseLootSound)) return false;
                if (!object.Equals(this.BipedObjectNames, rhs.BipedObjectNames)) return false;
                if (!object.Equals(this.MovementTypes, rhs.MovementTypes)) return false;
                if (!object.Equals(this.EquipmentFlags, rhs.EquipmentFlags)) return false;
                if (!object.Equals(this.EquipmentSlots, rhs.EquipmentSlots)) return false;
                if (!object.Equals(this.UnarmedEquipSlot, rhs.UnarmedEquipSlot)) return false;
                if (!object.Equals(this.FaceFxPhonemes, rhs.FaceFxPhonemes)) return false;
                if (!object.Equals(this.BaseMovementDefaultWalk, rhs.BaseMovementDefaultWalk)) return false;
                if (!object.Equals(this.BaseMovementDefaultRun, rhs.BaseMovementDefaultRun)) return false;
                if (!object.Equals(this.BaseMovementDefaultSwim, rhs.BaseMovementDefaultSwim)) return false;
                if (!object.Equals(this.BaseMovementDefaultFly, rhs.BaseMovementDefaultFly)) return false;
                if (!object.Equals(this.BaseMovementDefaultSneak, rhs.BaseMovementDefaultSneak)) return false;
                if (!object.Equals(this.BaseMovementDefaultSprint, rhs.BaseMovementDefaultSprint)) return false;
                if (!object.Equals(this.HeadData, rhs.HeadData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Description);
                hash.Add(this.ActorEffect);
                hash.Add(this.Skin);
                hash.Add(this.BodyTemplate);
                hash.Add(this.Keywords);
                hash.Add(this.Data);
                hash.Add(this.SkeletalModel);
                hash.Add(this.MovementTypeNames);
                hash.Add(this.Voices);
                hash.Add(this.DecapitateArmors);
                hash.Add(this.DefaultHairColors);
                hash.Add(this.NumberOfTintsInList);
                hash.Add(this.FacegenMainClamp);
                hash.Add(this.FacegenFaceClamp);
                hash.Add(this.AttackRace);
                hash.Add(this.Attacks);
                hash.Add(this.BodyData);
                hash.Add(this.Hairs);
                hash.Add(this.Eyes);
                hash.Add(this.BodyPartData);
                hash.Add(this.BehaviorGraph);
                hash.Add(this.MaterialType);
                hash.Add(this.ImpactDataSet);
                hash.Add(this.DecapitationFX);
                hash.Add(this.OpenLootSound);
                hash.Add(this.CloseLootSound);
                hash.Add(this.BipedObjectNames);
                hash.Add(this.MovementTypes);
                hash.Add(this.EquipmentFlags);
                hash.Add(this.EquipmentSlots);
                hash.Add(this.UnarmedEquipSlot);
                hash.Add(this.FaceFxPhonemes);
                hash.Add(this.BaseMovementDefaultWalk);
                hash.Add(this.BaseMovementDefaultRun);
                hash.Add(this.BaseMovementDefaultSwim);
                hash.Add(this.BaseMovementDefaultFly);
                hash.Add(this.BaseMovementDefaultSneak);
                hash.Add(this.BaseMovementDefaultSprint);
                hash.Add(this.HeadData);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (this.ActorEffect != null)
                {
                    if (!eval(this.ActorEffect.Overall)) return false;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Skin)) return false;
                if (BodyTemplate != null)
                {
                    if (!eval(this.BodyTemplate.Overall)) return false;
                    if (this.BodyTemplate.Specific != null && !this.BodyTemplate.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (!GenderedItem.AllMask(
                    this.SkeletalModel,
                    eval: eval)) return false;
                if (this.MovementTypeNames != null)
                {
                    if (!eval(this.MovementTypeNames.Overall)) return false;
                    if (this.MovementTypeNames.Specific != null)
                    {
                        foreach (var item in this.MovementTypeNames.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Voices.Male) || !eval(this.Voices.Female)) return false;
                if (!GenderedItem.All(
                    this.DecapitateArmors,
                    eval: eval)) return false;
                if (!GenderedItem.All(
                    this.DefaultHairColors,
                    eval: eval)) return false;
                if (!eval(this.NumberOfTintsInList)) return false;
                if (!eval(this.FacegenMainClamp)) return false;
                if (!eval(this.FacegenFaceClamp)) return false;
                if (!eval(this.AttackRace)) return false;
                if (this.Attacks != null)
                {
                    if (!eval(this.Attacks.Overall)) return false;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!GenderedItem.AllMask(
                    this.BodyData,
                    eval: eval)) return false;
                if (this.Hairs != null)
                {
                    if (!eval(this.Hairs.Overall)) return false;
                    if (this.Hairs.Specific != null)
                    {
                        foreach (var item in this.Hairs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.BodyPartData)) return false;
                if (!GenderedItem.AllMask(
                    this.BehaviorGraph,
                    eval: eval)) return false;
                if (!eval(this.MaterialType)) return false;
                if (!eval(this.ImpactDataSet)) return false;
                if (!eval(this.DecapitationFX)) return false;
                if (!eval(this.OpenLootSound)) return false;
                if (!eval(this.CloseLootSound)) return false;
                if (this.BipedObjectNames != null)
                {
                    if (!eval(this.BipedObjectNames.Overall)) return false;
                    if (this.BipedObjectNames.Specific != null)
                    {
                        foreach (var item in this.BipedObjectNames.Specific)
                        {
                            if (!eval(item.Key)) return false;
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MovementTypes != null)
                {
                    if (!eval(this.MovementTypes.Overall)) return false;
                    if (this.MovementTypes.Specific != null)
                    {
                        foreach (var item in this.MovementTypes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.EquipmentFlags)) return false;
                if (this.EquipmentSlots != null)
                {
                    if (!eval(this.EquipmentSlots.Overall)) return false;
                    if (this.EquipmentSlots.Specific != null)
                    {
                        foreach (var item in this.EquipmentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.UnarmedEquipSlot)) return false;
                if (FaceFxPhonemes != null)
                {
                    if (!eval(this.FaceFxPhonemes.Overall)) return false;
                    if (this.FaceFxPhonemes.Specific != null && !this.FaceFxPhonemes.Specific.All(eval)) return false;
                }
                if (!eval(this.BaseMovementDefaultWalk)) return false;
                if (!eval(this.BaseMovementDefaultRun)) return false;
                if (!eval(this.BaseMovementDefaultSwim)) return false;
                if (!eval(this.BaseMovementDefaultFly)) return false;
                if (!eval(this.BaseMovementDefaultSneak)) return false;
                if (!eval(this.BaseMovementDefaultSprint)) return false;
                if (!GenderedItem.AllMask(
                    this.HeadData,
                    eval: eval)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (this.ActorEffect != null)
                {
                    if (eval(this.ActorEffect.Overall)) return true;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Skin)) return true;
                if (BodyTemplate != null)
                {
                    if (eval(this.BodyTemplate.Overall)) return true;
                    if (this.BodyTemplate.Specific != null && this.BodyTemplate.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (GenderedItem.AnyMask(
                    this.SkeletalModel,
                    eval: eval)) return true;
                if (this.MovementTypeNames != null)
                {
                    if (eval(this.MovementTypeNames.Overall)) return true;
                    if (this.MovementTypeNames.Specific != null)
                    {
                        foreach (var item in this.MovementTypeNames.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Voices.Male) || eval(this.Voices.Female)) return true;
                if (GenderedItem.Any(
                    this.DecapitateArmors,
                    eval: eval)) return true;
                if (GenderedItem.Any(
                    this.DefaultHairColors,
                    eval: eval)) return true;
                if (eval(this.NumberOfTintsInList)) return true;
                if (eval(this.FacegenMainClamp)) return true;
                if (eval(this.FacegenFaceClamp)) return true;
                if (eval(this.AttackRace)) return true;
                if (this.Attacks != null)
                {
                    if (eval(this.Attacks.Overall)) return true;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (GenderedItem.AnyMask(
                    this.BodyData,
                    eval: eval)) return true;
                if (this.Hairs != null)
                {
                    if (eval(this.Hairs.Overall)) return true;
                    if (this.Hairs.Specific != null)
                    {
                        foreach (var item in this.Hairs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Eyes != null)
                {
                    if (eval(this.Eyes.Overall)) return true;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.BodyPartData)) return true;
                if (GenderedItem.AnyMask(
                    this.BehaviorGraph,
                    eval: eval)) return true;
                if (eval(this.MaterialType)) return true;
                if (eval(this.ImpactDataSet)) return true;
                if (eval(this.DecapitationFX)) return true;
                if (eval(this.OpenLootSound)) return true;
                if (eval(this.CloseLootSound)) return true;
                if (this.BipedObjectNames != null)
                {
                    if (eval(this.BipedObjectNames.Overall)) return true;
                    if (this.BipedObjectNames.Specific != null)
                    {
                        foreach (var item in this.BipedObjectNames.Specific)
                        {
                            if (!eval(item.Key)) return false;
                            if (eval(item.Value)) return true;
                        }
                    }
                }
                if (this.MovementTypes != null)
                {
                    if (eval(this.MovementTypes.Overall)) return true;
                    if (this.MovementTypes.Specific != null)
                    {
                        foreach (var item in this.MovementTypes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.EquipmentFlags)) return true;
                if (this.EquipmentSlots != null)
                {
                    if (eval(this.EquipmentSlots.Overall)) return true;
                    if (this.EquipmentSlots.Specific != null)
                    {
                        foreach (var item in this.EquipmentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.UnarmedEquipSlot)) return true;
                if (FaceFxPhonemes != null)
                {
                    if (eval(this.FaceFxPhonemes.Overall)) return true;
                    if (this.FaceFxPhonemes.Specific != null && this.FaceFxPhonemes.Specific.Any(eval)) return true;
                }
                if (eval(this.BaseMovementDefaultWalk)) return true;
                if (eval(this.BaseMovementDefaultRun)) return true;
                if (eval(this.BaseMovementDefaultSwim)) return true;
                if (eval(this.BaseMovementDefaultFly)) return true;
                if (eval(this.BaseMovementDefaultSneak)) return true;
                if (eval(this.BaseMovementDefaultSprint)) return true;
                if (GenderedItem.AnyMask(
                    this.HeadData,
                    eval: eval)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Race.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                if (ActorEffect != null)
                {
                    obj.ActorEffect = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ActorEffect.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ActorEffect.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ActorEffect.Specific = l;
                        foreach (var item in ActorEffect.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Skin = eval(this.Skin);
                obj.BodyTemplate = this.BodyTemplate == null ? null : new MaskItem<R, BodyTemplate.Mask<R>?>(eval(this.BodyTemplate.Overall), this.BodyTemplate.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Data = this.Data == null ? null : new MaskItem<R, RaceData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.SkeletalModel = GenderedItem.TranslateHelper(
                    this.SkeletalModel,
                    eval,
                    (m, e) => m?.Translate(e));
                if (MovementTypeNames != null)
                {
                    obj.MovementTypeNames = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.MovementTypeNames.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (MovementTypeNames.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.MovementTypeNames.Specific = l;
                        foreach (var item in MovementTypeNames.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Voices = new GenderedItem<R>(
                    eval(this.Voices.Male),
                    eval(this.Voices.Female));
                obj.DecapitateArmors = GenderedItem.TranslateHelper(
                    this.DecapitateArmors,
                    eval);
                obj.DefaultHairColors = GenderedItem.TranslateHelper(
                    this.DefaultHairColors,
                    eval);
                obj.NumberOfTintsInList = eval(this.NumberOfTintsInList);
                obj.FacegenMainClamp = eval(this.FacegenMainClamp);
                obj.FacegenFaceClamp = eval(this.FacegenFaceClamp);
                obj.AttackRace = eval(this.AttackRace);
                if (Attacks != null)
                {
                    obj.Attacks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Attack.Mask<R>?>>?>(eval(this.Attacks.Overall), Enumerable.Empty<MaskItemIndexed<R, Attack.Mask<R>?>>());
                    if (Attacks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Attack.Mask<R>?>>();
                        obj.Attacks.Specific = l;
                        foreach (var item in Attacks.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Attack.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Attack.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.BodyData = GenderedItem.TranslateHelper(
                    this.BodyData,
                    eval,
                    (m, e) => m?.Translate(e));
                if (Hairs != null)
                {
                    obj.Hairs = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Hairs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Hairs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Hairs.Specific = l;
                        foreach (var item in Hairs.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Eyes != null)
                {
                    obj.Eyes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Eyes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Eyes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Eyes.Specific = l;
                        foreach (var item in Eyes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.BodyPartData = eval(this.BodyPartData);
                obj.BehaviorGraph = GenderedItem.TranslateHelper(
                    this.BehaviorGraph,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.MaterialType = eval(this.MaterialType);
                obj.ImpactDataSet = eval(this.ImpactDataSet);
                obj.DecapitationFX = eval(this.DecapitationFX);
                obj.OpenLootSound = eval(this.OpenLootSound);
                obj.CloseLootSound = eval(this.CloseLootSound);
                if (BipedObjectNames != null)
                {
                    obj.BipedObjectNames = new MaskItem<R, IEnumerable<KeyValuePair<R, R>>?>(eval(this.BipedObjectNames.Overall), default);
                    if (BipedObjectNames.Specific != null)
                    {
                        List<KeyValuePair<R, R>> l = new List<KeyValuePair<R, R>>();
                        obj.BipedObjectNames.Specific = l;
                        foreach (var item in BipedObjectNames.Specific)
                        {
                            R keyVal = eval(item.Key);
                            R valVal = eval(item.Value);
                            l.Add(new KeyValuePair<R, R>(keyVal, valVal));
                        }
                    }
                }
                if (MovementTypes != null)
                {
                    obj.MovementTypes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RaceMovementType.Mask<R>?>>?>(eval(this.MovementTypes.Overall), Enumerable.Empty<MaskItemIndexed<R, RaceMovementType.Mask<R>?>>());
                    if (MovementTypes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RaceMovementType.Mask<R>?>>();
                        obj.MovementTypes.Specific = l;
                        foreach (var item in MovementTypes.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, RaceMovementType.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, RaceMovementType.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.EquipmentFlags = eval(this.EquipmentFlags);
                if (EquipmentSlots != null)
                {
                    obj.EquipmentSlots = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.EquipmentSlots.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (EquipmentSlots.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.EquipmentSlots.Specific = l;
                        foreach (var item in EquipmentSlots.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.UnarmedEquipSlot = eval(this.UnarmedEquipSlot);
                obj.FaceFxPhonemes = this.FaceFxPhonemes == null ? null : new MaskItem<R, FaceFxPhonemes.Mask<R>?>(eval(this.FaceFxPhonemes.Overall), this.FaceFxPhonemes.Specific?.Translate(eval));
                obj.BaseMovementDefaultWalk = eval(this.BaseMovementDefaultWalk);
                obj.BaseMovementDefaultRun = eval(this.BaseMovementDefaultRun);
                obj.BaseMovementDefaultSwim = eval(this.BaseMovementDefaultSwim);
                obj.BaseMovementDefaultFly = eval(this.BaseMovementDefaultFly);
                obj.BaseMovementDefaultSneak = eval(this.BaseMovementDefaultSneak);
                obj.BaseMovementDefaultSprint = eval(this.BaseMovementDefaultSprint);
                obj.HeadData = GenderedItem.TranslateHelper(
                    this.HeadData,
                    eval,
                    (m, e) => m?.Translate(e));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Race.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Race.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Race.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if ((printMask?.ActorEffect?.Overall ?? true)
                        && ActorEffect.TryGet(out var ActorEffectItem))
                    {
                        fg.AppendLine("ActorEffect =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ActorEffectItem.Overall);
                            if (ActorEffectItem.Specific != null)
                            {
                                foreach (var subItem in ActorEffectItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Skin ?? true)
                    {
                        fg.AppendItem(Skin, "Skin");
                    }
                    if (printMask?.BodyTemplate?.Overall ?? true)
                    {
                        BodyTemplate?.ToString(fg);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords.TryGet(out var KeywordsItem))
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                    if (SkeletalModel != null
                        && (printMask?.SkeletalModel?.Overall ?? true))
                    {
                        fg.AppendLine($"SkeletalModel => {SkeletalModel}");
                    }
                    if ((printMask?.MovementTypeNames?.Overall ?? true)
                        && MovementTypeNames.TryGet(out var MovementTypeNamesItem))
                    {
                        fg.AppendLine("MovementTypeNames =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(MovementTypeNamesItem.Overall);
                            if (MovementTypeNamesItem.Specific != null)
                            {
                                foreach (var subItem in MovementTypeNamesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((true))
                    {
                        fg.AppendLine($"Voices => {Voices}");
                    }
                    if (DecapitateArmors != null
                        && (printMask?.DecapitateArmors?.Overall ?? true))
                    {
                        fg.AppendLine($"DecapitateArmors => {DecapitateArmors}");
                    }
                    if (DefaultHairColors != null
                        && (printMask?.DefaultHairColors?.Overall ?? true))
                    {
                        fg.AppendLine($"DefaultHairColors => {DefaultHairColors}");
                    }
                    if (printMask?.NumberOfTintsInList ?? true)
                    {
                        fg.AppendItem(NumberOfTintsInList, "NumberOfTintsInList");
                    }
                    if (printMask?.FacegenMainClamp ?? true)
                    {
                        fg.AppendItem(FacegenMainClamp, "FacegenMainClamp");
                    }
                    if (printMask?.FacegenFaceClamp ?? true)
                    {
                        fg.AppendItem(FacegenFaceClamp, "FacegenFaceClamp");
                    }
                    if (printMask?.AttackRace ?? true)
                    {
                        fg.AppendItem(AttackRace, "AttackRace");
                    }
                    if ((printMask?.Attacks?.Overall ?? true)
                        && Attacks.TryGet(out var AttacksItem))
                    {
                        fg.AppendLine("Attacks =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AttacksItem.Overall);
                            if (AttacksItem.Specific != null)
                            {
                                foreach (var subItem in AttacksItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((true))
                    {
                        fg.AppendLine($"BodyData => {BodyData}");
                    }
                    if ((printMask?.Hairs?.Overall ?? true)
                        && Hairs.TryGet(out var HairsItem))
                    {
                        fg.AppendLine("Hairs =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(HairsItem.Overall);
                            if (HairsItem.Specific != null)
                            {
                                foreach (var subItem in HairsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Eyes?.Overall ?? true)
                        && Eyes.TryGet(out var EyesItem))
                    {
                        fg.AppendLine("Eyes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(EyesItem.Overall);
                            if (EyesItem.Specific != null)
                            {
                                foreach (var subItem in EyesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.BodyPartData ?? true)
                    {
                        fg.AppendItem(BodyPartData, "BodyPartData");
                    }
                    if ((true))
                    {
                        fg.AppendLine($"BehaviorGraph => {BehaviorGraph}");
                    }
                    if (printMask?.MaterialType ?? true)
                    {
                        fg.AppendItem(MaterialType, "MaterialType");
                    }
                    if (printMask?.ImpactDataSet ?? true)
                    {
                        fg.AppendItem(ImpactDataSet, "ImpactDataSet");
                    }
                    if (printMask?.DecapitationFX ?? true)
                    {
                        fg.AppendItem(DecapitationFX, "DecapitationFX");
                    }
                    if (printMask?.OpenLootSound ?? true)
                    {
                        fg.AppendItem(OpenLootSound, "OpenLootSound");
                    }
                    if (printMask?.CloseLootSound ?? true)
                    {
                        fg.AppendItem(CloseLootSound, "CloseLootSound");
                    }
                    if (printMask?.BipedObjectNames?.Overall ?? true)
                    {
                        fg.AppendLine("BipedObjectNames =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (BipedObjectNames != null)
                            {
                                if (BipedObjectNames.Overall != null)
                                {
                                    fg.AppendLine(BipedObjectNames.Overall.ToString());
                                }
                                if (BipedObjectNames.Specific != null)
                                {
                                    foreach (var subItem in BipedObjectNames.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine("Key => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Key);
                                            }
                                            fg.AppendLine("]");
                                            fg.AppendLine("Value => [");
                                            using (new DepthWrapper(fg))
                                            {
                                                fg.AppendItem(subItem.Value);
                                            }
                                            fg.AppendLine("]");
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.MovementTypes?.Overall ?? true)
                        && MovementTypes.TryGet(out var MovementTypesItem))
                    {
                        fg.AppendLine("MovementTypes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(MovementTypesItem.Overall);
                            if (MovementTypesItem.Specific != null)
                            {
                                foreach (var subItem in MovementTypesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.EquipmentFlags ?? true)
                    {
                        fg.AppendItem(EquipmentFlags, "EquipmentFlags");
                    }
                    if ((printMask?.EquipmentSlots?.Overall ?? true)
                        && EquipmentSlots.TryGet(out var EquipmentSlotsItem))
                    {
                        fg.AppendLine("EquipmentSlots =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(EquipmentSlotsItem.Overall);
                            if (EquipmentSlotsItem.Specific != null)
                            {
                                foreach (var subItem in EquipmentSlotsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.UnarmedEquipSlot ?? true)
                    {
                        fg.AppendItem(UnarmedEquipSlot, "UnarmedEquipSlot");
                    }
                    if (printMask?.FaceFxPhonemes?.Overall ?? true)
                    {
                        FaceFxPhonemes?.ToString(fg);
                    }
                    if (printMask?.BaseMovementDefaultWalk ?? true)
                    {
                        fg.AppendItem(BaseMovementDefaultWalk, "BaseMovementDefaultWalk");
                    }
                    if (printMask?.BaseMovementDefaultRun ?? true)
                    {
                        fg.AppendItem(BaseMovementDefaultRun, "BaseMovementDefaultRun");
                    }
                    if (printMask?.BaseMovementDefaultSwim ?? true)
                    {
                        fg.AppendItem(BaseMovementDefaultSwim, "BaseMovementDefaultSwim");
                    }
                    if (printMask?.BaseMovementDefaultFly ?? true)
                    {
                        fg.AppendItem(BaseMovementDefaultFly, "BaseMovementDefaultFly");
                    }
                    if (printMask?.BaseMovementDefaultSneak ?? true)
                    {
                        fg.AppendItem(BaseMovementDefaultSneak, "BaseMovementDefaultSneak");
                    }
                    if (printMask?.BaseMovementDefaultSprint ?? true)
                    {
                        fg.AppendItem(BaseMovementDefaultSprint, "BaseMovementDefaultSprint");
                    }
                    if (HeadData != null
                        && (printMask?.HeadData?.Overall ?? true))
                    {
                        fg.AppendLine($"HeadData => {HeadData}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ActorEffect;
            public Exception? Skin;
            public MaskItem<Exception?, BodyTemplate.ErrorMask?>? BodyTemplate;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, RaceData.ErrorMask?>? Data;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? SkeletalModel;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? MovementTypeNames;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Voices;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? DecapitateArmors;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? DefaultHairColors;
            public Exception? NumberOfTintsInList;
            public Exception? FacegenMainClamp;
            public Exception? FacegenFaceClamp;
            public Exception? AttackRace;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>? Attacks;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? BodyData;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Hairs;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Eyes;
            public Exception? BodyPartData;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? BehaviorGraph;
            public Exception? MaterialType;
            public Exception? ImpactDataSet;
            public Exception? DecapitationFX;
            public Exception? OpenLootSound;
            public Exception? CloseLootSound;
            public MaskItem<Exception?, IEnumerable<KeyValuePair<Exception?, Exception?>>?>? BipedObjectNames;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceMovementType.ErrorMask?>>?>? MovementTypes;
            public Exception? EquipmentFlags;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? EquipmentSlots;
            public Exception? UnarmedEquipSlot;
            public MaskItem<Exception?, FaceFxPhonemes.ErrorMask?>? FaceFxPhonemes;
            public Exception? BaseMovementDefaultWalk;
            public Exception? BaseMovementDefaultRun;
            public Exception? BaseMovementDefaultSwim;
            public Exception? BaseMovementDefaultFly;
            public Exception? BaseMovementDefaultSneak;
            public Exception? BaseMovementDefaultSprint;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? HeadData;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        return Name;
                    case Race_FieldIndex.Description:
                        return Description;
                    case Race_FieldIndex.ActorEffect:
                        return ActorEffect;
                    case Race_FieldIndex.Skin:
                        return Skin;
                    case Race_FieldIndex.BodyTemplate:
                        return BodyTemplate;
                    case Race_FieldIndex.Keywords:
                        return Keywords;
                    case Race_FieldIndex.Data:
                        return Data;
                    case Race_FieldIndex.SkeletalModel:
                        return SkeletalModel;
                    case Race_FieldIndex.MovementTypeNames:
                        return MovementTypeNames;
                    case Race_FieldIndex.Voices:
                        return Voices;
                    case Race_FieldIndex.DecapitateArmors:
                        return DecapitateArmors;
                    case Race_FieldIndex.DefaultHairColors:
                        return DefaultHairColors;
                    case Race_FieldIndex.NumberOfTintsInList:
                        return NumberOfTintsInList;
                    case Race_FieldIndex.FacegenMainClamp:
                        return FacegenMainClamp;
                    case Race_FieldIndex.FacegenFaceClamp:
                        return FacegenFaceClamp;
                    case Race_FieldIndex.AttackRace:
                        return AttackRace;
                    case Race_FieldIndex.Attacks:
                        return Attacks;
                    case Race_FieldIndex.BodyData:
                        return BodyData;
                    case Race_FieldIndex.Hairs:
                        return Hairs;
                    case Race_FieldIndex.Eyes:
                        return Eyes;
                    case Race_FieldIndex.BodyPartData:
                        return BodyPartData;
                    case Race_FieldIndex.BehaviorGraph:
                        return BehaviorGraph;
                    case Race_FieldIndex.MaterialType:
                        return MaterialType;
                    case Race_FieldIndex.ImpactDataSet:
                        return ImpactDataSet;
                    case Race_FieldIndex.DecapitationFX:
                        return DecapitationFX;
                    case Race_FieldIndex.OpenLootSound:
                        return OpenLootSound;
                    case Race_FieldIndex.CloseLootSound:
                        return CloseLootSound;
                    case Race_FieldIndex.BipedObjectNames:
                        return BipedObjectNames;
                    case Race_FieldIndex.MovementTypes:
                        return MovementTypes;
                    case Race_FieldIndex.EquipmentFlags:
                        return EquipmentFlags;
                    case Race_FieldIndex.EquipmentSlots:
                        return EquipmentSlots;
                    case Race_FieldIndex.UnarmedEquipSlot:
                        return UnarmedEquipSlot;
                    case Race_FieldIndex.FaceFxPhonemes:
                        return FaceFxPhonemes;
                    case Race_FieldIndex.BaseMovementDefaultWalk:
                        return BaseMovementDefaultWalk;
                    case Race_FieldIndex.BaseMovementDefaultRun:
                        return BaseMovementDefaultRun;
                    case Race_FieldIndex.BaseMovementDefaultSwim:
                        return BaseMovementDefaultSwim;
                    case Race_FieldIndex.BaseMovementDefaultFly:
                        return BaseMovementDefaultFly;
                    case Race_FieldIndex.BaseMovementDefaultSneak:
                        return BaseMovementDefaultSneak;
                    case Race_FieldIndex.BaseMovementDefaultSprint:
                        return BaseMovementDefaultSprint;
                    case Race_FieldIndex.HeadData:
                        return HeadData;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Race_FieldIndex.ActorEffect:
                        this.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Skin:
                        this.Skin = ex;
                        break;
                    case Race_FieldIndex.BodyTemplate:
                        this.BodyTemplate = new MaskItem<Exception?, BodyTemplate.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, RaceData.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SkeletalModel:
                        this.SkeletalModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.MovementTypeNames:
                        this.MovementTypeNames = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.DecapitateArmors:
                        this.DecapitateArmors = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.DefaultHairColors:
                        this.DefaultHairColors = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.NumberOfTintsInList:
                        this.NumberOfTintsInList = ex;
                        break;
                    case Race_FieldIndex.FacegenMainClamp:
                        this.FacegenMainClamp = ex;
                        break;
                    case Race_FieldIndex.FacegenFaceClamp:
                        this.FacegenFaceClamp = ex;
                        break;
                    case Race_FieldIndex.AttackRace:
                        this.AttackRace = ex;
                        break;
                    case Race_FieldIndex.Attacks:
                        this.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.Hairs:
                        this.Hairs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.BodyPartData:
                        this.BodyPartData = ex;
                        break;
                    case Race_FieldIndex.BehaviorGraph:
                        this.BehaviorGraph = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.MaterialType:
                        this.MaterialType = ex;
                        break;
                    case Race_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = ex;
                        break;
                    case Race_FieldIndex.DecapitationFX:
                        this.DecapitationFX = ex;
                        break;
                    case Race_FieldIndex.OpenLootSound:
                        this.OpenLootSound = ex;
                        break;
                    case Race_FieldIndex.CloseLootSound:
                        this.CloseLootSound = ex;
                        break;
                    case Race_FieldIndex.BipedObjectNames:
                        this.BipedObjectNames = new MaskItem<Exception?, IEnumerable<KeyValuePair<Exception?, Exception?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.MovementTypes:
                        this.MovementTypes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceMovementType.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.EquipmentFlags:
                        this.EquipmentFlags = ex;
                        break;
                    case Race_FieldIndex.EquipmentSlots:
                        this.EquipmentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.UnarmedEquipSlot:
                        this.UnarmedEquipSlot = ex;
                        break;
                    case Race_FieldIndex.FaceFxPhonemes:
                        this.FaceFxPhonemes = new MaskItem<Exception?, FaceFxPhonemes.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.BaseMovementDefaultWalk:
                        this.BaseMovementDefaultWalk = ex;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultRun:
                        this.BaseMovementDefaultRun = ex;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSwim:
                        this.BaseMovementDefaultSwim = ex;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultFly:
                        this.BaseMovementDefaultFly = ex;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSneak:
                        this.BaseMovementDefaultSneak = ex;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSprint:
                        this.BaseMovementDefaultSprint = ex;
                        break;
                    case Race_FieldIndex.HeadData:
                        this.HeadData = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ActorEffect:
                        this.ActorEffect = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Skin:
                        this.Skin = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BodyTemplate:
                        this.BodyTemplate = (MaskItem<Exception?, BodyTemplate.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, RaceData.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SkeletalModel:
                        this.SkeletalModel = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.MovementTypeNames:
                        this.MovementTypeNames = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.DecapitateArmors:
                        this.DecapitateArmors = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.DefaultHairColors:
                        this.DefaultHairColors = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.NumberOfTintsInList:
                        this.NumberOfTintsInList = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FacegenMainClamp:
                        this.FacegenMainClamp = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FacegenFaceClamp:
                        this.FacegenFaceClamp = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AttackRace:
                        this.AttackRace = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Attacks:
                        this.Attacks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.Hairs:
                        this.Hairs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.BodyPartData:
                        this.BodyPartData = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BehaviorGraph:
                        this.BehaviorGraph = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.MaterialType:
                        this.MaterialType = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DecapitationFX:
                        this.DecapitationFX = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OpenLootSound:
                        this.OpenLootSound = (Exception?)obj;
                        break;
                    case Race_FieldIndex.CloseLootSound:
                        this.CloseLootSound = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BipedObjectNames:
                        this.BipedObjectNames = (MaskItem<Exception?, IEnumerable<KeyValuePair<Exception?, Exception?>>?>)obj;
                        break;
                    case Race_FieldIndex.MovementTypes:
                        this.MovementTypes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceMovementType.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.EquipmentFlags:
                        this.EquipmentFlags = (Exception?)obj;
                        break;
                    case Race_FieldIndex.EquipmentSlots:
                        this.EquipmentSlots = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.UnarmedEquipSlot:
                        this.UnarmedEquipSlot = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FaceFxPhonemes:
                        this.FaceFxPhonemes = (MaskItem<Exception?, FaceFxPhonemes.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultWalk:
                        this.BaseMovementDefaultWalk = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultRun:
                        this.BaseMovementDefaultRun = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSwim:
                        this.BaseMovementDefaultSwim = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultFly:
                        this.BaseMovementDefaultFly = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSneak:
                        this.BaseMovementDefaultSneak = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSprint:
                        this.BaseMovementDefaultSprint = (Exception?)obj;
                        break;
                    case Race_FieldIndex.HeadData:
                        this.HeadData = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (ActorEffect != null) return true;
                if (Skin != null) return true;
                if (BodyTemplate != null) return true;
                if (Keywords != null) return true;
                if (Data != null) return true;
                if (SkeletalModel != null) return true;
                if (MovementTypeNames != null) return true;
                if (Voices != null) return true;
                if (DecapitateArmors != null) return true;
                if (DefaultHairColors != null) return true;
                if (NumberOfTintsInList != null) return true;
                if (FacegenMainClamp != null) return true;
                if (FacegenFaceClamp != null) return true;
                if (AttackRace != null) return true;
                if (Attacks != null) return true;
                if (BodyData != null) return true;
                if (Hairs != null) return true;
                if (Eyes != null) return true;
                if (BodyPartData != null) return true;
                if (BehaviorGraph != null) return true;
                if (MaterialType != null) return true;
                if (ImpactDataSet != null) return true;
                if (DecapitationFX != null) return true;
                if (OpenLootSound != null) return true;
                if (CloseLootSound != null) return true;
                if (BipedObjectNames != null) return true;
                if (MovementTypes != null) return true;
                if (EquipmentFlags != null) return true;
                if (EquipmentSlots != null) return true;
                if (UnarmedEquipSlot != null) return true;
                if (FaceFxPhonemes != null) return true;
                if (BaseMovementDefaultWalk != null) return true;
                if (BaseMovementDefaultRun != null) return true;
                if (BaseMovementDefaultSwim != null) return true;
                if (BaseMovementDefaultFly != null) return true;
                if (BaseMovementDefaultSneak != null) return true;
                if (BaseMovementDefaultSprint != null) return true;
                if (HeadData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Description, "Description");
                if (ActorEffect.TryGet(out var ActorEffectItem))
                {
                    fg.AppendLine("ActorEffect =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ActorEffectItem.Overall);
                        if (ActorEffectItem.Specific != null)
                        {
                            foreach (var subItem in ActorEffectItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Skin, "Skin");
                BodyTemplate?.ToString(fg);
                if (Keywords.TryGet(out var KeywordsItem))
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Data?.ToString(fg);
                if (SkeletalModel != null)
                {
                    fg.AppendLine($"SkeletalModel => {SkeletalModel}");
                }
                if (MovementTypeNames.TryGet(out var MovementTypeNamesItem))
                {
                    fg.AppendLine("MovementTypeNames =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(MovementTypeNamesItem.Overall);
                        if (MovementTypeNamesItem.Specific != null)
                        {
                            foreach (var subItem in MovementTypeNamesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendLine($"Voices => {Voices}");
                if (DecapitateArmors != null)
                {
                    fg.AppendLine($"DecapitateArmors => {DecapitateArmors}");
                }
                if (DefaultHairColors != null)
                {
                    fg.AppendLine($"DefaultHairColors => {DefaultHairColors}");
                }
                fg.AppendItem(NumberOfTintsInList, "NumberOfTintsInList");
                fg.AppendItem(FacegenMainClamp, "FacegenMainClamp");
                fg.AppendItem(FacegenFaceClamp, "FacegenFaceClamp");
                fg.AppendItem(AttackRace, "AttackRace");
                if (Attacks.TryGet(out var AttacksItem))
                {
                    fg.AppendLine("Attacks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AttacksItem.Overall);
                        if (AttacksItem.Specific != null)
                        {
                            foreach (var subItem in AttacksItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendLine($"BodyData => {BodyData}");
                if (Hairs.TryGet(out var HairsItem))
                {
                    fg.AppendLine("Hairs =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(HairsItem.Overall);
                        if (HairsItem.Specific != null)
                        {
                            foreach (var subItem in HairsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Eyes.TryGet(out var EyesItem))
                {
                    fg.AppendLine("Eyes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(EyesItem.Overall);
                        if (EyesItem.Specific != null)
                        {
                            foreach (var subItem in EyesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(BodyPartData, "BodyPartData");
                fg.AppendLine($"BehaviorGraph => {BehaviorGraph}");
                fg.AppendItem(MaterialType, "MaterialType");
                fg.AppendItem(ImpactDataSet, "ImpactDataSet");
                fg.AppendItem(DecapitationFX, "DecapitationFX");
                fg.AppendItem(OpenLootSound, "OpenLootSound");
                fg.AppendItem(CloseLootSound, "CloseLootSound");
                fg.AppendLine("BipedObjectNames =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (BipedObjectNames != null)
                    {
                        if (BipedObjectNames.Overall != null)
                        {
                            fg.AppendLine(BipedObjectNames.Overall.ToString());
                        }
                        if (BipedObjectNames.Specific != null)
                        {
                            foreach (var subItem in BipedObjectNames.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Key);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem.Value);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
                if (MovementTypes.TryGet(out var MovementTypesItem))
                {
                    fg.AppendLine("MovementTypes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(MovementTypesItem.Overall);
                        if (MovementTypesItem.Specific != null)
                        {
                            foreach (var subItem in MovementTypesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(EquipmentFlags, "EquipmentFlags");
                if (EquipmentSlots.TryGet(out var EquipmentSlotsItem))
                {
                    fg.AppendLine("EquipmentSlots =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(EquipmentSlotsItem.Overall);
                        if (EquipmentSlotsItem.Specific != null)
                        {
                            foreach (var subItem in EquipmentSlotsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(UnarmedEquipSlot, "UnarmedEquipSlot");
                FaceFxPhonemes?.ToString(fg);
                fg.AppendItem(BaseMovementDefaultWalk, "BaseMovementDefaultWalk");
                fg.AppendItem(BaseMovementDefaultRun, "BaseMovementDefaultRun");
                fg.AppendItem(BaseMovementDefaultSwim, "BaseMovementDefaultSwim");
                fg.AppendItem(BaseMovementDefaultFly, "BaseMovementDefaultFly");
                fg.AppendItem(BaseMovementDefaultSneak, "BaseMovementDefaultSneak");
                fg.AppendItem(BaseMovementDefaultSprint, "BaseMovementDefaultSprint");
                if (HeadData != null)
                {
                    fg.AppendLine($"HeadData => {HeadData}");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.ActorEffect?.Overall, rhs.ActorEffect?.Overall), ExceptionExt.Combine(this.ActorEffect?.Specific, rhs.ActorEffect?.Specific));
                ret.Skin = this.Skin.Combine(rhs.Skin);
                ret.BodyTemplate = this.BodyTemplate.Combine(rhs.BodyTemplate, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.SkeletalModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.SkeletalModel?.Overall, rhs.SkeletalModel?.Overall), GenderedItem.Combine(this.SkeletalModel?.Specific, rhs.SkeletalModel?.Specific));
                ret.MovementTypeNames = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.MovementTypeNames?.Overall, rhs.MovementTypeNames?.Overall), ExceptionExt.Combine(this.MovementTypeNames?.Specific, rhs.MovementTypeNames?.Specific));
                ret.Voices = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.Voices?.Overall, rhs.Voices?.Overall), GenderedItem.Combine(this.Voices?.Specific, rhs.Voices?.Specific));
                ret.DecapitateArmors = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.DecapitateArmors?.Overall, rhs.DecapitateArmors?.Overall), GenderedItem.Combine(this.DecapitateArmors?.Specific, rhs.DecapitateArmors?.Specific));
                ret.DefaultHairColors = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.DefaultHairColors?.Overall, rhs.DefaultHairColors?.Overall), GenderedItem.Combine(this.DefaultHairColors?.Specific, rhs.DefaultHairColors?.Specific));
                ret.NumberOfTintsInList = this.NumberOfTintsInList.Combine(rhs.NumberOfTintsInList);
                ret.FacegenMainClamp = this.FacegenMainClamp.Combine(rhs.FacegenMainClamp);
                ret.FacegenFaceClamp = this.FacegenFaceClamp.Combine(rhs.FacegenFaceClamp);
                ret.AttackRace = this.AttackRace.Combine(rhs.AttackRace);
                ret.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(ExceptionExt.Combine(this.Attacks?.Overall, rhs.Attacks?.Overall), ExceptionExt.Combine(this.Attacks?.Specific, rhs.Attacks?.Specific));
                ret.BodyData = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.BodyData?.Overall, rhs.BodyData?.Overall), GenderedItem.Combine(this.BodyData?.Specific, rhs.BodyData?.Specific));
                ret.Hairs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Hairs?.Overall, rhs.Hairs?.Overall), ExceptionExt.Combine(this.Hairs?.Specific, rhs.Hairs?.Specific));
                ret.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Eyes?.Overall, rhs.Eyes?.Overall), ExceptionExt.Combine(this.Eyes?.Specific, rhs.Eyes?.Specific));
                ret.BodyPartData = this.BodyPartData.Combine(rhs.BodyPartData);
                ret.BehaviorGraph = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.BehaviorGraph?.Overall, rhs.BehaviorGraph?.Overall), GenderedItem.Combine(this.BehaviorGraph?.Specific, rhs.BehaviorGraph?.Specific));
                ret.MaterialType = this.MaterialType.Combine(rhs.MaterialType);
                ret.ImpactDataSet = this.ImpactDataSet.Combine(rhs.ImpactDataSet);
                ret.DecapitationFX = this.DecapitationFX.Combine(rhs.DecapitationFX);
                ret.OpenLootSound = this.OpenLootSound.Combine(rhs.OpenLootSound);
                ret.CloseLootSound = this.CloseLootSound.Combine(rhs.CloseLootSound);
                ret.BipedObjectNames = new MaskItem<Exception?, IEnumerable<KeyValuePair<Exception?, Exception?>>?>(ExceptionExt.Combine(this.BipedObjectNames?.Overall, rhs.BipedObjectNames?.Overall), new List<KeyValuePair<Exception?, Exception?>>(ExceptionExt.Combine(this.BipedObjectNames?.Specific, rhs.BipedObjectNames?.Specific)));
                ret.MovementTypes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceMovementType.ErrorMask?>>?>(ExceptionExt.Combine(this.MovementTypes?.Overall, rhs.MovementTypes?.Overall), ExceptionExt.Combine(this.MovementTypes?.Specific, rhs.MovementTypes?.Specific));
                ret.EquipmentFlags = this.EquipmentFlags.Combine(rhs.EquipmentFlags);
                ret.EquipmentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.EquipmentSlots?.Overall, rhs.EquipmentSlots?.Overall), ExceptionExt.Combine(this.EquipmentSlots?.Specific, rhs.EquipmentSlots?.Specific));
                ret.UnarmedEquipSlot = this.UnarmedEquipSlot.Combine(rhs.UnarmedEquipSlot);
                ret.FaceFxPhonemes = this.FaceFxPhonemes.Combine(rhs.FaceFxPhonemes, (l, r) => l.Combine(r));
                ret.BaseMovementDefaultWalk = this.BaseMovementDefaultWalk.Combine(rhs.BaseMovementDefaultWalk);
                ret.BaseMovementDefaultRun = this.BaseMovementDefaultRun.Combine(rhs.BaseMovementDefaultRun);
                ret.BaseMovementDefaultSwim = this.BaseMovementDefaultSwim.Combine(rhs.BaseMovementDefaultSwim);
                ret.BaseMovementDefaultFly = this.BaseMovementDefaultFly.Combine(rhs.BaseMovementDefaultFly);
                ret.BaseMovementDefaultSneak = this.BaseMovementDefaultSneak.Combine(rhs.BaseMovementDefaultSneak);
                ret.BaseMovementDefaultSprint = this.BaseMovementDefaultSprint.Combine(rhs.BaseMovementDefaultSprint);
                ret.HeadData = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.HeadData?.Overall, rhs.HeadData?.Overall), GenderedItem.Combine(this.HeadData?.Specific, rhs.HeadData?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public bool ActorEffect;
            public bool Skin;
            public MaskItem<bool, BodyTemplate.TranslationMask?> BodyTemplate;
            public bool Keywords;
            public MaskItem<bool, RaceData.TranslationMask?> Data;
            public MaskItem<bool, GenderedItem<SimpleModel.TranslationMask?>?> SkeletalModel;
            public bool MovementTypeNames;
            public MaskItem<bool, GenderedItem<bool>?> Voices;
            public MaskItem<bool, GenderedItem<bool>?> DecapitateArmors;
            public MaskItem<bool, GenderedItem<bool>?> DefaultHairColors;
            public bool NumberOfTintsInList;
            public bool FacegenMainClamp;
            public bool FacegenFaceClamp;
            public bool AttackRace;
            public MaskItem<bool, Attack.TranslationMask?> Attacks;
            public MaskItem<bool, GenderedItem<BodyData.TranslationMask?>?> BodyData;
            public bool Hairs;
            public bool Eyes;
            public bool BodyPartData;
            public MaskItem<bool, GenderedItem<Model.TranslationMask?>?> BehaviorGraph;
            public bool MaterialType;
            public bool ImpactDataSet;
            public bool DecapitationFX;
            public bool OpenLootSound;
            public bool CloseLootSound;
            public bool BipedObjectNames;
            public MaskItem<bool, RaceMovementType.TranslationMask?> MovementTypes;
            public bool EquipmentFlags;
            public bool EquipmentSlots;
            public bool UnarmedEquipSlot;
            public MaskItem<bool, FaceFxPhonemes.TranslationMask?> FaceFxPhonemes;
            public bool BaseMovementDefaultWalk;
            public bool BaseMovementDefaultRun;
            public bool BaseMovementDefaultSwim;
            public bool BaseMovementDefaultFly;
            public bool BaseMovementDefaultSneak;
            public bool BaseMovementDefaultSprint;
            public MaskItem<bool, GenderedItem<HeadData.TranslationMask?>?> HeadData;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.ActorEffect = defaultOn;
                this.Skin = defaultOn;
                this.BodyTemplate = new MaskItem<bool, BodyTemplate.TranslationMask?>(defaultOn, null);
                this.Keywords = defaultOn;
                this.Data = new MaskItem<bool, RaceData.TranslationMask?>(defaultOn, null);
                this.SkeletalModel = new MaskItem<bool, GenderedItem<SimpleModel.TranslationMask?>?>(defaultOn, default);
                this.MovementTypeNames = defaultOn;
                this.Voices = new MaskItem<bool, GenderedItem<bool>?>(defaultOn, default);
                this.DecapitateArmors = new MaskItem<bool, GenderedItem<bool>?>(defaultOn, default);
                this.DefaultHairColors = new MaskItem<bool, GenderedItem<bool>?>(defaultOn, default);
                this.NumberOfTintsInList = defaultOn;
                this.FacegenMainClamp = defaultOn;
                this.FacegenFaceClamp = defaultOn;
                this.AttackRace = defaultOn;
                this.Attacks = new MaskItem<bool, Attack.TranslationMask?>(defaultOn, null);
                this.BodyData = new MaskItem<bool, GenderedItem<BodyData.TranslationMask?>?>(defaultOn, default);
                this.Hairs = defaultOn;
                this.Eyes = defaultOn;
                this.BodyPartData = defaultOn;
                this.BehaviorGraph = new MaskItem<bool, GenderedItem<Model.TranslationMask?>?>(defaultOn, default);
                this.MaterialType = defaultOn;
                this.ImpactDataSet = defaultOn;
                this.DecapitationFX = defaultOn;
                this.OpenLootSound = defaultOn;
                this.CloseLootSound = defaultOn;
                this.BipedObjectNames = defaultOn;
                this.MovementTypes = new MaskItem<bool, RaceMovementType.TranslationMask?>(defaultOn, null);
                this.EquipmentFlags = defaultOn;
                this.EquipmentSlots = defaultOn;
                this.UnarmedEquipSlot = defaultOn;
                this.FaceFxPhonemes = new MaskItem<bool, FaceFxPhonemes.TranslationMask?>(defaultOn, null);
                this.BaseMovementDefaultWalk = defaultOn;
                this.BaseMovementDefaultRun = defaultOn;
                this.BaseMovementDefaultSwim = defaultOn;
                this.BaseMovementDefaultFly = defaultOn;
                this.BaseMovementDefaultSneak = defaultOn;
                this.BaseMovementDefaultSprint = defaultOn;
                this.HeadData = new MaskItem<bool, GenderedItem<HeadData.TranslationMask?>?>(defaultOn, default);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((ActorEffect, null));
                ret.Add((Skin, null));
                ret.Add((BodyTemplate?.Overall ?? true, BodyTemplate?.Specific?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Data?.Overall ?? true, Data?.Specific?.GetCrystal()));
                ret.Add((SkeletalModel?.Overall ?? true, null));
                ret.Add((MovementTypeNames, null));
                ret.Add((Voices?.Overall ?? true, null));
                ret.Add((DecapitateArmors?.Overall ?? true, null));
                ret.Add((DefaultHairColors?.Overall ?? true, null));
                ret.Add((NumberOfTintsInList, null));
                ret.Add((FacegenMainClamp, null));
                ret.Add((FacegenFaceClamp, null));
                ret.Add((AttackRace, null));
                ret.Add((Attacks?.Overall ?? true, Attacks?.Specific?.GetCrystal()));
                ret.Add((BodyData?.Overall ?? true, null));
                ret.Add((Hairs, null));
                ret.Add((Eyes, null));
                ret.Add((BodyPartData, null));
                ret.Add((BehaviorGraph?.Overall ?? true, null));
                ret.Add((MaterialType, null));
                ret.Add((ImpactDataSet, null));
                ret.Add((DecapitationFX, null));
                ret.Add((OpenLootSound, null));
                ret.Add((CloseLootSound, null));
                ret.Add((BipedObjectNames, null));
                ret.Add((MovementTypes?.Overall ?? true, MovementTypes?.Specific?.GetCrystal()));
                ret.Add((EquipmentFlags, null));
                ret.Add((EquipmentSlots, null));
                ret.Add((UnarmedEquipSlot, null));
                ret.Add((FaceFxPhonemes?.Overall ?? true, FaceFxPhonemes?.Specific?.GetCrystal()));
                ret.Add((BaseMovementDefaultWalk, null));
                ret.Add((BaseMovementDefaultRun, null));
                ret.Add((BaseMovementDefaultSwim, null));
                ret.Add((BaseMovementDefaultFly, null));
                ret.Add((BaseMovementDefaultSneak, null));
                ret.Add((BaseMovementDefaultSprint, null));
                ret.Add((HeadData?.Overall ?? true, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Race_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => RaceCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => RaceCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceCommon.Instance.RemapLinks(this, mapping);
        public Race(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Race(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Race(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Race CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Race CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Race();
            ((RaceSetterCommon)((IRaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RaceSetterCommon)((IRaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Race GetNew()
        {
            return new Race();
        }

    }
    #endregion

    #region Interface
    public partial interface IRace :
        IRaceGetter,
        ISkyrimMajorRecord,
        INamed,
        IRelatable,
        ILoquiObjectSetter<IRaceInternal>
    {
        new String? Name { get; set; }
        new String Description { get; set; }
        new ExtendedList<IFormLink<ASpell>>? ActorEffect { get; set; }
        new FormLinkNullable<Armor> Skin { get; set; }
        new BodyTemplate? BodyTemplate { get; set; }
        new ExtendedList<IFormLink<Keyword>>? Keywords { get; set; }
        new RaceData Data { get; set; }
        new GenderedItem<SimpleModel?>? SkeletalModel { get; set; }
        new ExtendedList<String>? MovementTypeNames { get; set; }
        new GenderedItem<IFormLink<VoiceType>> Voices { get; set; }
        new GenderedItem<IFormLink<Armor>>? DecapitateArmors { get; set; }
        new GenderedItem<IFormLink<ColorRecord>>? DefaultHairColors { get; set; }
        new UInt16? NumberOfTintsInList { get; set; }
        new Single FacegenMainClamp { get; set; }
        new Single FacegenFaceClamp { get; set; }
        new FormLinkNullable<Race> AttackRace { get; set; }
        new ExtendedList<Attack> Attacks { get; }
        new GenderedItem<BodyData?> BodyData { get; set; }
        new ExtendedList<IFormLink<Hair>>? Hairs { get; set; }
        new ExtendedList<IFormLink<Eyes>>? Eyes { get; set; }
        new FormLinkNullable<BodyPartData> BodyPartData { get; set; }
        new GenderedItem<Model?> BehaviorGraph { get; set; }
        new FormLinkNullable<MaterialType> MaterialType { get; set; }
        new FormLinkNullable<ImpactDataSet> ImpactDataSet { get; set; }
        new FormLinkNullable<ArtObject> DecapitationFX { get; set; }
        new FormLinkNullable<SoundDescriptor> OpenLootSound { get; set; }
        new FormLinkNullable<SoundDescriptor> CloseLootSound { get; set; }
        new IDictionary<BipedObject, String> BipedObjectNames { get; }
        new ExtendedList<RaceMovementType> MovementTypes { get; }
        new EquipTypeFlag? EquipmentFlags { get; set; }
        new ExtendedList<IFormLink<EquipType>>? EquipmentSlots { get; set; }
        new FormLinkNullable<EquipType> UnarmedEquipSlot { get; set; }
        new FaceFxPhonemes FaceFxPhonemes { get; set; }
        new FormLinkNullable<MovementType> BaseMovementDefaultWalk { get; set; }
        new FormLinkNullable<MovementType> BaseMovementDefaultRun { get; set; }
        new FormLinkNullable<MovementType> BaseMovementDefaultSwim { get; set; }
        new FormLinkNullable<MovementType> BaseMovementDefaultFly { get; set; }
        new FormLinkNullable<MovementType> BaseMovementDefaultSneak { get; set; }
        new FormLinkNullable<MovementType> BaseMovementDefaultSprint { get; set; }
        new GenderedItem<HeadData?>? HeadData { get; set; }
        #region Mutagen
        new Race.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IRaceInternal :
        ISkyrimMajorRecordInternal,
        IRace,
        IRaceGetter
    {
        new GenderedItem<SimpleModel?>? SkeletalModel { get; set; }
        new GenderedItem<IFormLink<VoiceType>> Voices { get; set; }
        new GenderedItem<IFormLink<Armor>>? DecapitateArmors { get; set; }
        new GenderedItem<IFormLink<ColorRecord>>? DefaultHairColors { get; set; }
        new GenderedItem<BodyData?> BodyData { get; set; }
        new GenderedItem<Model?> BehaviorGraph { get; set; }
        new IDictionary<BipedObject, String> BipedObjectNames { get; }
        new GenderedItem<HeadData?>? HeadData { get; set; }
    }

    public partial interface IRaceGetter :
        ISkyrimMajorRecordGetter,
        INamedGetter,
        IRelatableGetter,
        ILoquiObject<IRaceGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Race_Registration.Instance;
        String? Name { get; }
        String Description { get; }
        IReadOnlyList<IFormLinkGetter<IASpellGetter>>? ActorEffect { get; }
        IFormLinkNullableGetter<IArmorGetter> Skin { get; }
        IBodyTemplateGetter? BodyTemplate { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        IRaceDataGetter Data { get; }
        IGenderedItemGetter<ISimpleModelGetter?>? SkeletalModel { get; }
        IReadOnlyList<String>? MovementTypeNames { get; }
        IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>> Voices { get; }
        IGenderedItemGetter<IFormLinkGetter<IArmorGetter>>? DecapitateArmors { get; }
        IGenderedItemGetter<IFormLinkGetter<IColorRecordGetter>>? DefaultHairColors { get; }
        UInt16? NumberOfTintsInList { get; }
        Single FacegenMainClamp { get; }
        Single FacegenFaceClamp { get; }
        IFormLinkNullableGetter<IRaceGetter> AttackRace { get; }
        IReadOnlyList<IAttackGetter> Attacks { get; }
        IGenderedItemGetter<IBodyDataGetter?> BodyData { get; }
        IReadOnlyList<IFormLinkGetter<IHairGetter>>? Hairs { get; }
        IReadOnlyList<IFormLinkGetter<IEyesGetter>>? Eyes { get; }
        IFormLinkNullableGetter<IBodyPartDataGetter> BodyPartData { get; }
        IGenderedItemGetter<IModelGetter?> BehaviorGraph { get; }
        IFormLinkNullableGetter<IMaterialTypeGetter> MaterialType { get; }
        IFormLinkNullableGetter<IImpactDataSetGetter> ImpactDataSet { get; }
        IFormLinkNullableGetter<IArtObjectGetter> DecapitationFX { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> OpenLootSound { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> CloseLootSound { get; }
        IReadOnlyDictionary<BipedObject, String> BipedObjectNames { get; }
        IReadOnlyList<IRaceMovementTypeGetter> MovementTypes { get; }
        EquipTypeFlag? EquipmentFlags { get; }
        IReadOnlyList<IFormLinkGetter<IEquipTypeGetter>>? EquipmentSlots { get; }
        IFormLinkNullableGetter<IEquipTypeGetter> UnarmedEquipSlot { get; }
        IFaceFxPhonemesGetter FaceFxPhonemes { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultWalk { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultRun { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSwim { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultFly { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSneak { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSprint { get; }
        IGenderedItemGetter<IHeadDataGetter?>? HeadData { get; }

        #region Mutagen
        Race.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class RaceMixIn
    {
        public static void Clear(this IRaceInternal item)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Race.Mask<bool> GetEqualsMask(
            this IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRaceGetter item,
            FileGeneration fg,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRaceGetter item,
            Race.Mask<bool?> checkMask)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Race.Mask<bool> GetHasBeenSetMask(this IRaceGetter item)
        {
            var ret = new Race.Mask<bool>(false);
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRaceGetter item,
            IRaceGetter rhs)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRaceInternal item,
            XElement node,
            Race.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRaceInternal item,
            XElement node,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            string path,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            string path,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            Stream stream,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            Stream stream,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Race.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRaceInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRaceInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Race_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Name = 6,
        Description = 7,
        ActorEffect = 8,
        Skin = 9,
        BodyTemplate = 10,
        Keywords = 11,
        Data = 12,
        SkeletalModel = 13,
        MovementTypeNames = 14,
        Voices = 15,
        DecapitateArmors = 16,
        DefaultHairColors = 17,
        NumberOfTintsInList = 18,
        FacegenMainClamp = 19,
        FacegenFaceClamp = 20,
        AttackRace = 21,
        Attacks = 22,
        BodyData = 23,
        Hairs = 24,
        Eyes = 25,
        BodyPartData = 26,
        BehaviorGraph = 27,
        MaterialType = 28,
        ImpactDataSet = 29,
        DecapitationFX = 30,
        OpenLootSound = 31,
        CloseLootSound = 32,
        BipedObjectNames = 33,
        MovementTypes = 34,
        EquipmentFlags = 35,
        EquipmentSlots = 36,
        UnarmedEquipSlot = 37,
        FaceFxPhonemes = 38,
        BaseMovementDefaultWalk = 39,
        BaseMovementDefaultRun = 40,
        BaseMovementDefaultSwim = 41,
        BaseMovementDefaultFly = 42,
        BaseMovementDefaultSneak = 43,
        BaseMovementDefaultSprint = 44,
        HeadData = 45,
    }
    #endregion

    #region Registration
    public partial class Race_Registration : ILoquiRegistration
    {
        public static readonly Race_Registration Instance = new Race_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 49,
            version: 0);

        public const string GUID = "54b1dfac-1494-41b6-b6d3-653bc47987eb";

        public const ushort AdditionalFieldCount = 40;

        public const ushort FieldCount = 46;

        public static readonly Type MaskType = typeof(Race.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Race.ErrorMask);

        public static readonly Type ClassType = typeof(Race);

        public static readonly Type GetterType = typeof(IRaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRace);

        public static readonly Type? InternalSetterType = typeof(IRaceInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Race";

        public const string Name = "Race";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Race_FieldIndex.Name;
                case "DESCRIPTION":
                    return (ushort)Race_FieldIndex.Description;
                case "ACTOREFFECT":
                    return (ushort)Race_FieldIndex.ActorEffect;
                case "SKIN":
                    return (ushort)Race_FieldIndex.Skin;
                case "BODYTEMPLATE":
                    return (ushort)Race_FieldIndex.BodyTemplate;
                case "KEYWORDS":
                    return (ushort)Race_FieldIndex.Keywords;
                case "DATA":
                    return (ushort)Race_FieldIndex.Data;
                case "SKELETALMODEL":
                    return (ushort)Race_FieldIndex.SkeletalModel;
                case "MOVEMENTTYPENAMES":
                    return (ushort)Race_FieldIndex.MovementTypeNames;
                case "VOICES":
                    return (ushort)Race_FieldIndex.Voices;
                case "DECAPITATEARMORS":
                    return (ushort)Race_FieldIndex.DecapitateArmors;
                case "DEFAULTHAIRCOLORS":
                    return (ushort)Race_FieldIndex.DefaultHairColors;
                case "NUMBEROFTINTSINLIST":
                    return (ushort)Race_FieldIndex.NumberOfTintsInList;
                case "FACEGENMAINCLAMP":
                    return (ushort)Race_FieldIndex.FacegenMainClamp;
                case "FACEGENFACECLAMP":
                    return (ushort)Race_FieldIndex.FacegenFaceClamp;
                case "ATTACKRACE":
                    return (ushort)Race_FieldIndex.AttackRace;
                case "ATTACKS":
                    return (ushort)Race_FieldIndex.Attacks;
                case "BODYDATA":
                    return (ushort)Race_FieldIndex.BodyData;
                case "HAIRS":
                    return (ushort)Race_FieldIndex.Hairs;
                case "EYES":
                    return (ushort)Race_FieldIndex.Eyes;
                case "BODYPARTDATA":
                    return (ushort)Race_FieldIndex.BodyPartData;
                case "BEHAVIORGRAPH":
                    return (ushort)Race_FieldIndex.BehaviorGraph;
                case "MATERIALTYPE":
                    return (ushort)Race_FieldIndex.MaterialType;
                case "IMPACTDATASET":
                    return (ushort)Race_FieldIndex.ImpactDataSet;
                case "DECAPITATIONFX":
                    return (ushort)Race_FieldIndex.DecapitationFX;
                case "OPENLOOTSOUND":
                    return (ushort)Race_FieldIndex.OpenLootSound;
                case "CLOSELOOTSOUND":
                    return (ushort)Race_FieldIndex.CloseLootSound;
                case "BIPEDOBJECTNAMES":
                    return (ushort)Race_FieldIndex.BipedObjectNames;
                case "MOVEMENTTYPES":
                    return (ushort)Race_FieldIndex.MovementTypes;
                case "EQUIPMENTFLAGS":
                    return (ushort)Race_FieldIndex.EquipmentFlags;
                case "EQUIPMENTSLOTS":
                    return (ushort)Race_FieldIndex.EquipmentSlots;
                case "UNARMEDEQUIPSLOT":
                    return (ushort)Race_FieldIndex.UnarmedEquipSlot;
                case "FACEFXPHONEMES":
                    return (ushort)Race_FieldIndex.FaceFxPhonemes;
                case "BASEMOVEMENTDEFAULTWALK":
                    return (ushort)Race_FieldIndex.BaseMovementDefaultWalk;
                case "BASEMOVEMENTDEFAULTRUN":
                    return (ushort)Race_FieldIndex.BaseMovementDefaultRun;
                case "BASEMOVEMENTDEFAULTSWIM":
                    return (ushort)Race_FieldIndex.BaseMovementDefaultSwim;
                case "BASEMOVEMENTDEFAULTFLY":
                    return (ushort)Race_FieldIndex.BaseMovementDefaultFly;
                case "BASEMOVEMENTDEFAULTSNEAK":
                    return (ushort)Race_FieldIndex.BaseMovementDefaultSneak;
                case "BASEMOVEMENTDEFAULTSPRINT":
                    return (ushort)Race_FieldIndex.BaseMovementDefaultSprint;
                case "HEADDATA":
                    return (ushort)Race_FieldIndex.HeadData;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.ActorEffect:
                case Race_FieldIndex.Keywords:
                case Race_FieldIndex.MovementTypeNames:
                case Race_FieldIndex.Attacks:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.MovementTypes:
                case Race_FieldIndex.EquipmentSlots:
                    return true;
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Skin:
                case Race_FieldIndex.BodyTemplate:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.SkeletalModel:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DecapitateArmors:
                case Race_FieldIndex.DefaultHairColors:
                case Race_FieldIndex.NumberOfTintsInList:
                case Race_FieldIndex.FacegenMainClamp:
                case Race_FieldIndex.FacegenFaceClamp:
                case Race_FieldIndex.AttackRace:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.BodyPartData:
                case Race_FieldIndex.BehaviorGraph:
                case Race_FieldIndex.MaterialType:
                case Race_FieldIndex.ImpactDataSet:
                case Race_FieldIndex.DecapitationFX:
                case Race_FieldIndex.OpenLootSound:
                case Race_FieldIndex.CloseLootSound:
                case Race_FieldIndex.BipedObjectNames:
                case Race_FieldIndex.EquipmentFlags:
                case Race_FieldIndex.UnarmedEquipSlot:
                case Race_FieldIndex.FaceFxPhonemes:
                case Race_FieldIndex.BaseMovementDefaultWalk:
                case Race_FieldIndex.BaseMovementDefaultRun:
                case Race_FieldIndex.BaseMovementDefaultSwim:
                case Race_FieldIndex.BaseMovementDefaultFly:
                case Race_FieldIndex.BaseMovementDefaultSneak:
                case Race_FieldIndex.BaseMovementDefaultSprint:
                case Race_FieldIndex.HeadData:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.BodyTemplate:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.SkeletalModel:
                case Race_FieldIndex.Attacks:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.BehaviorGraph:
                case Race_FieldIndex.MovementTypes:
                case Race_FieldIndex.FaceFxPhonemes:
                case Race_FieldIndex.HeadData:
                    return true;
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.ActorEffect:
                case Race_FieldIndex.Skin:
                case Race_FieldIndex.Keywords:
                case Race_FieldIndex.MovementTypeNames:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DecapitateArmors:
                case Race_FieldIndex.DefaultHairColors:
                case Race_FieldIndex.NumberOfTintsInList:
                case Race_FieldIndex.FacegenMainClamp:
                case Race_FieldIndex.FacegenFaceClamp:
                case Race_FieldIndex.AttackRace:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.BodyPartData:
                case Race_FieldIndex.MaterialType:
                case Race_FieldIndex.ImpactDataSet:
                case Race_FieldIndex.DecapitationFX:
                case Race_FieldIndex.OpenLootSound:
                case Race_FieldIndex.CloseLootSound:
                case Race_FieldIndex.BipedObjectNames:
                case Race_FieldIndex.EquipmentFlags:
                case Race_FieldIndex.EquipmentSlots:
                case Race_FieldIndex.UnarmedEquipSlot:
                case Race_FieldIndex.BaseMovementDefaultWalk:
                case Race_FieldIndex.BaseMovementDefaultRun:
                case Race_FieldIndex.BaseMovementDefaultSwim:
                case Race_FieldIndex.BaseMovementDefaultFly:
                case Race_FieldIndex.BaseMovementDefaultSneak:
                case Race_FieldIndex.BaseMovementDefaultSprint:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.ActorEffect:
                case Race_FieldIndex.Skin:
                case Race_FieldIndex.BodyTemplate:
                case Race_FieldIndex.Keywords:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.SkeletalModel:
                case Race_FieldIndex.MovementTypeNames:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DecapitateArmors:
                case Race_FieldIndex.DefaultHairColors:
                case Race_FieldIndex.NumberOfTintsInList:
                case Race_FieldIndex.FacegenMainClamp:
                case Race_FieldIndex.FacegenFaceClamp:
                case Race_FieldIndex.AttackRace:
                case Race_FieldIndex.Attacks:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.BodyPartData:
                case Race_FieldIndex.BehaviorGraph:
                case Race_FieldIndex.MaterialType:
                case Race_FieldIndex.ImpactDataSet:
                case Race_FieldIndex.DecapitationFX:
                case Race_FieldIndex.OpenLootSound:
                case Race_FieldIndex.CloseLootSound:
                case Race_FieldIndex.BipedObjectNames:
                case Race_FieldIndex.MovementTypes:
                case Race_FieldIndex.EquipmentFlags:
                case Race_FieldIndex.EquipmentSlots:
                case Race_FieldIndex.UnarmedEquipSlot:
                case Race_FieldIndex.FaceFxPhonemes:
                case Race_FieldIndex.BaseMovementDefaultWalk:
                case Race_FieldIndex.BaseMovementDefaultRun:
                case Race_FieldIndex.BaseMovementDefaultSwim:
                case Race_FieldIndex.BaseMovementDefaultFly:
                case Race_FieldIndex.BaseMovementDefaultSneak:
                case Race_FieldIndex.BaseMovementDefaultSprint:
                case Race_FieldIndex.HeadData:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    return "Name";
                case Race_FieldIndex.Description:
                    return "Description";
                case Race_FieldIndex.ActorEffect:
                    return "ActorEffect";
                case Race_FieldIndex.Skin:
                    return "Skin";
                case Race_FieldIndex.BodyTemplate:
                    return "BodyTemplate";
                case Race_FieldIndex.Keywords:
                    return "Keywords";
                case Race_FieldIndex.Data:
                    return "Data";
                case Race_FieldIndex.SkeletalModel:
                    return "SkeletalModel";
                case Race_FieldIndex.MovementTypeNames:
                    return "MovementTypeNames";
                case Race_FieldIndex.Voices:
                    return "Voices";
                case Race_FieldIndex.DecapitateArmors:
                    return "DecapitateArmors";
                case Race_FieldIndex.DefaultHairColors:
                    return "DefaultHairColors";
                case Race_FieldIndex.NumberOfTintsInList:
                    return "NumberOfTintsInList";
                case Race_FieldIndex.FacegenMainClamp:
                    return "FacegenMainClamp";
                case Race_FieldIndex.FacegenFaceClamp:
                    return "FacegenFaceClamp";
                case Race_FieldIndex.AttackRace:
                    return "AttackRace";
                case Race_FieldIndex.Attacks:
                    return "Attacks";
                case Race_FieldIndex.BodyData:
                    return "BodyData";
                case Race_FieldIndex.Hairs:
                    return "Hairs";
                case Race_FieldIndex.Eyes:
                    return "Eyes";
                case Race_FieldIndex.BodyPartData:
                    return "BodyPartData";
                case Race_FieldIndex.BehaviorGraph:
                    return "BehaviorGraph";
                case Race_FieldIndex.MaterialType:
                    return "MaterialType";
                case Race_FieldIndex.ImpactDataSet:
                    return "ImpactDataSet";
                case Race_FieldIndex.DecapitationFX:
                    return "DecapitationFX";
                case Race_FieldIndex.OpenLootSound:
                    return "OpenLootSound";
                case Race_FieldIndex.CloseLootSound:
                    return "CloseLootSound";
                case Race_FieldIndex.BipedObjectNames:
                    return "BipedObjectNames";
                case Race_FieldIndex.MovementTypes:
                    return "MovementTypes";
                case Race_FieldIndex.EquipmentFlags:
                    return "EquipmentFlags";
                case Race_FieldIndex.EquipmentSlots:
                    return "EquipmentSlots";
                case Race_FieldIndex.UnarmedEquipSlot:
                    return "UnarmedEquipSlot";
                case Race_FieldIndex.FaceFxPhonemes:
                    return "FaceFxPhonemes";
                case Race_FieldIndex.BaseMovementDefaultWalk:
                    return "BaseMovementDefaultWalk";
                case Race_FieldIndex.BaseMovementDefaultRun:
                    return "BaseMovementDefaultRun";
                case Race_FieldIndex.BaseMovementDefaultSwim:
                    return "BaseMovementDefaultSwim";
                case Race_FieldIndex.BaseMovementDefaultFly:
                    return "BaseMovementDefaultFly";
                case Race_FieldIndex.BaseMovementDefaultSneak:
                    return "BaseMovementDefaultSneak";
                case Race_FieldIndex.BaseMovementDefaultSprint:
                    return "BaseMovementDefaultSprint";
                case Race_FieldIndex.HeadData:
                    return "HeadData";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.ActorEffect:
                case Race_FieldIndex.Skin:
                case Race_FieldIndex.BodyTemplate:
                case Race_FieldIndex.Keywords:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.SkeletalModel:
                case Race_FieldIndex.MovementTypeNames:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DecapitateArmors:
                case Race_FieldIndex.DefaultHairColors:
                case Race_FieldIndex.NumberOfTintsInList:
                case Race_FieldIndex.FacegenMainClamp:
                case Race_FieldIndex.FacegenFaceClamp:
                case Race_FieldIndex.AttackRace:
                case Race_FieldIndex.Attacks:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.BodyPartData:
                case Race_FieldIndex.BehaviorGraph:
                case Race_FieldIndex.MaterialType:
                case Race_FieldIndex.ImpactDataSet:
                case Race_FieldIndex.DecapitationFX:
                case Race_FieldIndex.OpenLootSound:
                case Race_FieldIndex.CloseLootSound:
                case Race_FieldIndex.BipedObjectNames:
                case Race_FieldIndex.MovementTypes:
                case Race_FieldIndex.EquipmentFlags:
                case Race_FieldIndex.EquipmentSlots:
                case Race_FieldIndex.UnarmedEquipSlot:
                case Race_FieldIndex.FaceFxPhonemes:
                case Race_FieldIndex.BaseMovementDefaultWalk:
                case Race_FieldIndex.BaseMovementDefaultRun:
                case Race_FieldIndex.BaseMovementDefaultSwim:
                case Race_FieldIndex.BaseMovementDefaultFly:
                case Race_FieldIndex.BaseMovementDefaultSneak:
                case Race_FieldIndex.BaseMovementDefaultSprint:
                case Race_FieldIndex.HeadData:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                case Race_FieldIndex.Description:
                case Race_FieldIndex.ActorEffect:
                case Race_FieldIndex.Skin:
                case Race_FieldIndex.BodyTemplate:
                case Race_FieldIndex.Keywords:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.SkeletalModel:
                case Race_FieldIndex.MovementTypeNames:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DecapitateArmors:
                case Race_FieldIndex.DefaultHairColors:
                case Race_FieldIndex.NumberOfTintsInList:
                case Race_FieldIndex.FacegenMainClamp:
                case Race_FieldIndex.FacegenFaceClamp:
                case Race_FieldIndex.AttackRace:
                case Race_FieldIndex.Attacks:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.BodyPartData:
                case Race_FieldIndex.BehaviorGraph:
                case Race_FieldIndex.MaterialType:
                case Race_FieldIndex.ImpactDataSet:
                case Race_FieldIndex.DecapitationFX:
                case Race_FieldIndex.OpenLootSound:
                case Race_FieldIndex.CloseLootSound:
                case Race_FieldIndex.BipedObjectNames:
                case Race_FieldIndex.MovementTypes:
                case Race_FieldIndex.EquipmentFlags:
                case Race_FieldIndex.EquipmentSlots:
                case Race_FieldIndex.UnarmedEquipSlot:
                case Race_FieldIndex.FaceFxPhonemes:
                case Race_FieldIndex.BaseMovementDefaultWalk:
                case Race_FieldIndex.BaseMovementDefaultRun:
                case Race_FieldIndex.BaseMovementDefaultSwim:
                case Race_FieldIndex.BaseMovementDefaultFly:
                case Race_FieldIndex.BaseMovementDefaultSneak:
                case Race_FieldIndex.BaseMovementDefaultSprint:
                case Race_FieldIndex.HeadData:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Name:
                    return typeof(String);
                case Race_FieldIndex.Description:
                    return typeof(String);
                case Race_FieldIndex.ActorEffect:
                    return typeof(ExtendedList<IFormLink<ASpell>>);
                case Race_FieldIndex.Skin:
                    return typeof(FormLinkNullable<Armor>);
                case Race_FieldIndex.BodyTemplate:
                    return typeof(BodyTemplate);
                case Race_FieldIndex.Keywords:
                    return typeof(ExtendedList<IFormLink<Keyword>>);
                case Race_FieldIndex.Data:
                    return typeof(RaceData);
                case Race_FieldIndex.SkeletalModel:
                    return typeof(GenderedItem<SimpleModel?>);
                case Race_FieldIndex.MovementTypeNames:
                    return typeof(ExtendedList<String>);
                case Race_FieldIndex.Voices:
                    return typeof(GenderedItem<IFormLink<VoiceType>>);
                case Race_FieldIndex.DecapitateArmors:
                    return typeof(GenderedItem<IFormLink<Armor>>);
                case Race_FieldIndex.DefaultHairColors:
                    return typeof(GenderedItem<IFormLink<ColorRecord>>);
                case Race_FieldIndex.NumberOfTintsInList:
                    return typeof(UInt16);
                case Race_FieldIndex.FacegenMainClamp:
                    return typeof(Single);
                case Race_FieldIndex.FacegenFaceClamp:
                    return typeof(Single);
                case Race_FieldIndex.AttackRace:
                    return typeof(FormLinkNullable<Race>);
                case Race_FieldIndex.Attacks:
                    return typeof(ExtendedList<Attack>);
                case Race_FieldIndex.BodyData:
                    return typeof(GenderedItem<BodyData?>);
                case Race_FieldIndex.Hairs:
                    return typeof(ExtendedList<IFormLink<Hair>>);
                case Race_FieldIndex.Eyes:
                    return typeof(ExtendedList<IFormLink<Eyes>>);
                case Race_FieldIndex.BodyPartData:
                    return typeof(FormLinkNullable<BodyPartData>);
                case Race_FieldIndex.BehaviorGraph:
                    return typeof(GenderedItem<Model?>);
                case Race_FieldIndex.MaterialType:
                    return typeof(FormLinkNullable<MaterialType>);
                case Race_FieldIndex.ImpactDataSet:
                    return typeof(FormLinkNullable<ImpactDataSet>);
                case Race_FieldIndex.DecapitationFX:
                    return typeof(FormLinkNullable<ArtObject>);
                case Race_FieldIndex.OpenLootSound:
                    return typeof(FormLinkNullable<SoundDescriptor>);
                case Race_FieldIndex.CloseLootSound:
                    return typeof(FormLinkNullable<SoundDescriptor>);
                case Race_FieldIndex.BipedObjectNames:
                    return typeof(Dictionary<BipedObject, String>);
                case Race_FieldIndex.MovementTypes:
                    return typeof(ExtendedList<RaceMovementType>);
                case Race_FieldIndex.EquipmentFlags:
                    return typeof(EquipTypeFlag);
                case Race_FieldIndex.EquipmentSlots:
                    return typeof(ExtendedList<IFormLink<EquipType>>);
                case Race_FieldIndex.UnarmedEquipSlot:
                    return typeof(FormLinkNullable<EquipType>);
                case Race_FieldIndex.FaceFxPhonemes:
                    return typeof(FaceFxPhonemes);
                case Race_FieldIndex.BaseMovementDefaultWalk:
                    return typeof(FormLinkNullable<MovementType>);
                case Race_FieldIndex.BaseMovementDefaultRun:
                    return typeof(FormLinkNullable<MovementType>);
                case Race_FieldIndex.BaseMovementDefaultSwim:
                    return typeof(FormLinkNullable<MovementType>);
                case Race_FieldIndex.BaseMovementDefaultFly:
                    return typeof(FormLinkNullable<MovementType>);
                case Race_FieldIndex.BaseMovementDefaultSneak:
                    return typeof(FormLinkNullable<MovementType>);
                case Race_FieldIndex.BaseMovementDefaultSprint:
                    return typeof(FormLinkNullable<MovementType>);
                case Race_FieldIndex.HeadData:
                    return typeof(GenderedItem<HeadData?>);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RaceXmlWriteTranslation);
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType SPCT_HEADER = new RecordType("SPCT");
        public static readonly RecordType WNAM_HEADER = new RecordType("WNAM");
        public static readonly RecordType BODT_HEADER = new RecordType("BODT");
        public static readonly RecordType KWDA_HEADER = new RecordType("KWDA");
        public static readonly RecordType KSIZ_HEADER = new RecordType("KSIZ");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType NAM2_HEADER = new RecordType("NAM2");
        public static readonly RecordType MTNM_HEADER = new RecordType("MTNM");
        public static readonly RecordType VTCK_HEADER = new RecordType("VTCK");
        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType HCLF_HEADER = new RecordType("HCLF");
        public static readonly RecordType TINL_HEADER = new RecordType("TINL");
        public static readonly RecordType PNAM_HEADER = new RecordType("PNAM");
        public static readonly RecordType UNAM_HEADER = new RecordType("UNAM");
        public static readonly RecordType ATKR_HEADER = new RecordType("ATKR");
        public static readonly RecordType ATKD_HEADER = new RecordType("ATKD");
        public static readonly RecordType ATKE_HEADER = new RecordType("ATKE");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType GNAM_HEADER = new RecordType("GNAM");
        public static readonly RecordType NAM3_HEADER = new RecordType("NAM3");
        public static readonly RecordType NAM4_HEADER = new RecordType("NAM4");
        public static readonly RecordType NAM5_HEADER = new RecordType("NAM5");
        public static readonly RecordType NAM7_HEADER = new RecordType("NAM7");
        public static readonly RecordType ONAM_HEADER = new RecordType("ONAM");
        public static readonly RecordType LNAM_HEADER = new RecordType("LNAM");
        public static readonly RecordType NAME_HEADER = new RecordType("NAME");
        public static readonly RecordType MTYP_HEADER = new RecordType("MTYP");
        public static readonly RecordType SPED_HEADER = new RecordType("SPED");
        public static readonly RecordType VNAM_HEADER = new RecordType("VNAM");
        public static readonly RecordType QNAM_HEADER = new RecordType("QNAM");
        public static readonly RecordType UNES_HEADER = new RecordType("UNES");
        public static readonly RecordType PHTN_HEADER = new RecordType("PHTN");
        public static readonly RecordType PHWT_HEADER = new RecordType("PHWT");
        public static readonly RecordType WKMV_HEADER = new RecordType("WKMV");
        public static readonly RecordType RNMV_HEADER = new RecordType("RNMV");
        public static readonly RecordType SWMV_HEADER = new RecordType("SWMV");
        public static readonly RecordType FLMV_HEADER = new RecordType("FLMV");
        public static readonly RecordType SNMV_HEADER = new RecordType("SNMV");
        public static readonly RecordType SPMV_HEADER = new RecordType("SPMV");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType TriggeringRecordType = RACE_HEADER;
        public static RecordTypeConverter SkeletalModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODL"),
                new RecordType("ANAM")));
        public const int NumStructFields = 0;
        public const int NumTypedFields = 39;
        public static readonly Type BinaryWriteTranslation = typeof(RaceBinaryWriteTranslation);
        public static RecordTypeConverter HeadDataFemaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("RPRM"),
                new RecordType("RPRF")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("FTSM"),
                new RecordType("FTSF")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("AHCM"),
                new RecordType("AHCF")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("DFTM"),
                new RecordType("DFTF")));
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RaceSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly RaceSetterCommon Instance = new RaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRaceInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Description = string.Empty;
            item.ActorEffect = null;
            item.Skin = null;
            item.BodyTemplate = null;
            item.Keywords = null;
            item.Data.Clear();
            item.SkeletalModel = null;
            item.MovementTypeNames = null;
            item.Voices.Male = new FormLink<VoiceType>(FormKey.Null);
            item.Voices.Female = new FormLink<VoiceType>(FormKey.Null);
            item.DecapitateArmors = null;
            item.DefaultHairColors = null;
            item.NumberOfTintsInList = default;
            item.FacegenMainClamp = default;
            item.FacegenFaceClamp = default;
            item.AttackRace = null;
            item.Attacks.Clear();
            item.BodyData.Male = null;
            item.BodyData.Female = null;
            item.Hairs = null;
            item.Eyes = null;
            item.BodyPartData = null;
            item.BehaviorGraph.Male = null;
            item.BehaviorGraph.Female = null;
            item.MaterialType = null;
            item.ImpactDataSet = null;
            item.DecapitationFX = null;
            item.OpenLootSound = null;
            item.CloseLootSound = null;
            item.BipedObjectNames.Clear();
            item.MovementTypes.Clear();
            item.EquipmentFlags = default;
            item.EquipmentSlots = null;
            item.UnarmedEquipSlot = null;
            item.FaceFxPhonemes.Clear();
            item.BaseMovementDefaultWalk = null;
            item.BaseMovementDefaultRun = null;
            item.BaseMovementDefaultSwim = null;
            item.BaseMovementDefaultFly = null;
            item.BaseMovementDefaultSneak = null;
            item.BaseMovementDefaultSprint = null;
            item.HeadData = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IRaceInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IRaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Race)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Race)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Race_Registration.RACE_HEADER;
        protected static void FillBinaryStructs(
            IRaceInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
            RaceBinaryCreateTranslation.FillBinaryExtraNAM2CustomPublic(
                frame: frame,
                item: item);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IRaceInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Description);
                }
                case 0x54435053: // SPCT
                {
                    var amount = BinaryPrimitives.ReadInt32LittleEndian(frame.ReadSubrecordFrame().Content);
                    item.ActorEffect = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ASpell>>.Instance.ParsePerItem(
                            frame: frame,
                            amount: amount,
                            triggeringRecord: Race_Registration.SPLO_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<ASpell>>();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.ActorEffect);
                }
                case 0x4D414E57: // WNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Skin = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Skin);
                }
                case 0x54444F42: // BODT
                {
                    item.BodyTemplate = Mutagen.Bethesda.Skyrim.BodyTemplate.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyTemplate);
                }
                case 0x5A49534B: // KSIZ
                {
                    var amount = BinaryPrimitives.ReadInt32LittleEndian(frame.ReadSubrecordFrame().Content);
                    item.Keywords = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Keyword>>.Instance.Parse(
                            frame: frame,
                            amount: amount,
                            triggeringRecord: Race_Registration.KWDA_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Keyword>>();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Keywords);
                }
                case 0x41544144: // DATA
                {
                    item.Data = Mutagen.Bethesda.Skyrim.RaceData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Data);
                }
                case 0x4D414E4D: // MNAM
                case 0x4D414E46: // FNAM
                {
                    item.SkeletalModel = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<SimpleModel>(
                        frame: frame,
                        maleMarker: Race_Registration.MNAM_HEADER,
                        femaleMarker: Race_Registration.FNAM_HEADER,
                        recordTypeConverter: Race_Registration.SkeletalModelConverter,
                        transl: LoquiBinaryTranslation<SimpleModel>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.SkeletalModel);
                }
                case 0x4D4E544D: // MTNM
                {
                    item.MovementTypeNames = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Race_Registration.MTNM_HEADER,
                            transl: (MutagenFrame r, out String listSubItem) =>
                            {
                                return Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                                    r,
                                    item: out listSubItem,
                                    parseWhole: true);
                            })
                        .ToExtendedList<String>();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.MovementTypeNames);
                }
                case 0x4B435456: // VTCK
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Voices = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<IFormLink<VoiceType>>(
                        frame: frame,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Voices);
                }
                case 0x4D414E44: // DNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.DecapitateArmors = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<IFormLink<Armor>>(
                        frame: frame,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DecapitateArmors);
                }
                case 0x464C4348: // HCLF
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.DefaultHairColors = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<IFormLink<ColorRecord>>(
                        frame: frame,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DefaultHairColors);
                }
                case 0x4C4E4954: // TINL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.NumberOfTintsInList = frame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.NumberOfTintsInList);
                }
                case 0x4D414E50: // PNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FacegenMainClamp = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FacegenMainClamp);
                }
                case 0x4D414E55: // UNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FacegenFaceClamp = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FacegenFaceClamp);
                }
                case 0x524B5441: // ATKR
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.AttackRace = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.AttackRace);
                }
                case 0x444B5441: // ATKD
                case 0x454B5441: // ATKE
                {
                    item.Attacks.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Attack>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Attack_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out Attack listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<Attack>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Attacks);
                }
                case 0x314D414E: // NAM1
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.BodyData = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<BodyData>(
                        frame: frame,
                        maleMarker: Race_Registration.MNAM_HEADER,
                        femaleMarker: Race_Registration.FNAM_HEADER,
                        transl: LoquiBinaryTranslation<BodyData>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyData);
                }
                case 0x4D414E48: // HNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Hairs = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Hair>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Hair>>();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Hairs);
                }
                case 0x4D414E45: // ENAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Eyes = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Eyes>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Eyes>>();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Eyes);
                }
                case 0x4D414E47: // GNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.BodyPartData = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyPartData);
                }
                case 0x334D414E: // NAM3
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.BehaviorGraph = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<Model>(
                        frame: frame,
                        maleMarker: Race_Registration.MNAM_HEADER,
                        femaleMarker: Race_Registration.FNAM_HEADER,
                        transl: LoquiBinaryTranslation<Model>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BehaviorGraph);
                }
                case 0x344D414E: // NAM4
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MaterialType = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.MaterialType);
                }
                case 0x354D414E: // NAM5
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.ImpactDataSet = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.ImpactDataSet);
                }
                case 0x374D414E: // NAM7
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.DecapitationFX = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DecapitationFX);
                }
                case 0x4D414E4F: // ONAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.OpenLootSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.OpenLootSound);
                }
                case 0x4D414E4C: // LNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.CloseLootSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.CloseLootSound);
                }
                case 0x454D414E: // NAME
                {
                    RaceBinaryCreateTranslation.FillBinaryBipedObjectNamesCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BipedObjectNames);
                }
                case 0x5059544D: // MTYP
                case 0x44455053: // SPED
                {
                    item.MovementTypes.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<RaceMovementType>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RaceMovementType_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out RaceMovementType listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<RaceMovementType>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.MovementTypes);
                }
                case 0x4D414E56: // VNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.EquipmentFlags = EnumBinaryTranslation<EquipTypeFlag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.EquipmentFlags);
                }
                case 0x4D414E51: // QNAM
                {
                    item.EquipmentSlots = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<EquipType>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Race_Registration.QNAM_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<EquipType>>();
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.EquipmentSlots);
                }
                case 0x53454E55: // UNES
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.UnarmedEquipSlot = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.UnarmedEquipSlot);
                }
                case 0x4E544850: // PHTN
                {
                    RaceBinaryCreateTranslation.FillBinaryFaceFxPhonemesListingParsingCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed(null);
                }
                case 0x54574850: // PHWT
                {
                    RaceBinaryCreateTranslation.FillBinaryFaceFxPhonemesRawParsingCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed(null);
                }
                case 0x564D4B57: // WKMV
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.BaseMovementDefaultWalk = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BaseMovementDefaultWalk);
                }
                case 0x564D4E52: // RNMV
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.BaseMovementDefaultRun = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BaseMovementDefaultRun);
                }
                case 0x564D5753: // SWMV
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.BaseMovementDefaultSwim = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BaseMovementDefaultSwim);
                }
                case 0x564D4C46: // FLMV
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.BaseMovementDefaultFly = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BaseMovementDefaultFly);
                }
                case 0x564D4E53: // SNMV
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.BaseMovementDefaultSneak = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BaseMovementDefaultSneak);
                }
                case 0x564D5053: // SPMV
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.BaseMovementDefaultSprint = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BaseMovementDefaultSprint);
                }
                case 0x304D414E: // NAM0
                {
                    item.HeadData = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.ParseMarkerPerItem<HeadData>(
                        frame: frame,
                        maleMarker: Race_Registration.MNAM_HEADER,
                        femaleMarker: Race_Registration.FNAM_HEADER,
                        marker: Race_Registration.NAM0_HEADER,
                        femaleRecordConverter: Race_Registration.HeadDataFemaleConverter,
                        transl: LoquiBinaryTranslation<HeadData>.Instance.Parse);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.HeadData);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            IRaceInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IRaceInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Race)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Race)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class RaceCommon : SkyrimMajorRecordCommon
    {
        public new static readonly RaceCommon Instance = new RaceCommon();

        public Race.Mask<bool> GetEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Race.Mask<bool>(false);
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            Race.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.ActorEffect = item.ActorEffect.CollectionEqualsHelper(
                rhs.ActorEffect,
                (l, r) => object.Equals(l, r),
                include);
            ret.Skin = object.Equals(item.Skin, rhs.Skin);
            ret.BodyTemplate = EqualsMaskHelper.EqualsHelper(
                item.BodyTemplate,
                rhs.BodyTemplate,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Data = MaskItemExt.Factory(item.Data.GetEqualsMask(rhs.Data, include), include);
            ret.SkeletalModel = GenderedItem.EqualityMaskHelper(
                lhs: item.SkeletalModel,
                rhs: rhs.SkeletalModel,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.MovementTypeNames = item.MovementTypeNames.CollectionEqualsHelper(
                rhs.MovementTypeNames,
                (l, r) => string.Equals(l, r),
                include);
            ret.Voices = new GenderedItem<bool>(
                male: object.Equals(item.Voices.Male, rhs.Voices.Male),
                female: object.Equals(item.Voices.Female, rhs.Voices.Female));
            ret.DecapitateArmors = GenderedItem.EqualityMaskHelper(
                lhs: item.DecapitateArmors,
                rhs: rhs.DecapitateArmors,
                maskGetter: (l, r, i) => EqualityComparer<IFormLinkGetter<IArmorGetter>>.Default.Equals(l, r),
                include: include);
            ret.DefaultHairColors = GenderedItem.EqualityMaskHelper(
                lhs: item.DefaultHairColors,
                rhs: rhs.DefaultHairColors,
                maskGetter: (l, r, i) => EqualityComparer<IFormLinkGetter<IColorRecordGetter>>.Default.Equals(l, r),
                include: include);
            ret.NumberOfTintsInList = item.NumberOfTintsInList == rhs.NumberOfTintsInList;
            ret.FacegenMainClamp = item.FacegenMainClamp.EqualsWithin(rhs.FacegenMainClamp);
            ret.FacegenFaceClamp = item.FacegenFaceClamp.EqualsWithin(rhs.FacegenFaceClamp);
            ret.AttackRace = object.Equals(item.AttackRace, rhs.AttackRace);
            ret.Attacks = item.Attacks.CollectionEqualsHelper(
                rhs.Attacks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BodyData = GenderedItem.EqualityMaskHelper(
                lhs: item.BodyData,
                rhs: rhs.BodyData,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.Hairs = item.Hairs.CollectionEqualsHelper(
                rhs.Hairs,
                (l, r) => object.Equals(l, r),
                include);
            ret.Eyes = item.Eyes.CollectionEqualsHelper(
                rhs.Eyes,
                (l, r) => object.Equals(l, r),
                include);
            ret.BodyPartData = object.Equals(item.BodyPartData, rhs.BodyPartData);
            ret.BehaviorGraph = GenderedItem.EqualityMaskHelper(
                lhs: item.BehaviorGraph,
                rhs: rhs.BehaviorGraph,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.MaterialType = object.Equals(item.MaterialType, rhs.MaterialType);
            ret.ImpactDataSet = object.Equals(item.ImpactDataSet, rhs.ImpactDataSet);
            ret.DecapitationFX = object.Equals(item.DecapitationFX, rhs.DecapitationFX);
            ret.OpenLootSound = object.Equals(item.OpenLootSound, rhs.OpenLootSound);
            ret.CloseLootSound = object.Equals(item.CloseLootSound, rhs.CloseLootSound);
            {
                var specific = item.BipedObjectNames.SelectAgainst<KeyValuePair<BipedObject, String>, KeyValuePair<bool, bool>>(rhs.BipedObjectNames, ((l, r) => new KeyValuePair<bool, bool>(object.Equals(l.Key, r.Key), object.Equals(l.Value, r.Value))), out var countEqual);
                ret.BipedObjectNames = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>?>(countEqual && specific.All((b) => b.Key && b.Value), specific);
            }
            ret.MovementTypes = item.MovementTypes.CollectionEqualsHelper(
                rhs.MovementTypes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.EquipmentFlags = item.EquipmentFlags == rhs.EquipmentFlags;
            ret.EquipmentSlots = item.EquipmentSlots.CollectionEqualsHelper(
                rhs.EquipmentSlots,
                (l, r) => object.Equals(l, r),
                include);
            ret.UnarmedEquipSlot = object.Equals(item.UnarmedEquipSlot, rhs.UnarmedEquipSlot);
            ret.FaceFxPhonemes = MaskItemExt.Factory(item.FaceFxPhonemes.GetEqualsMask(rhs.FaceFxPhonemes, include), include);
            ret.BaseMovementDefaultWalk = object.Equals(item.BaseMovementDefaultWalk, rhs.BaseMovementDefaultWalk);
            ret.BaseMovementDefaultRun = object.Equals(item.BaseMovementDefaultRun, rhs.BaseMovementDefaultRun);
            ret.BaseMovementDefaultSwim = object.Equals(item.BaseMovementDefaultSwim, rhs.BaseMovementDefaultSwim);
            ret.BaseMovementDefaultFly = object.Equals(item.BaseMovementDefaultFly, rhs.BaseMovementDefaultFly);
            ret.BaseMovementDefaultSneak = object.Equals(item.BaseMovementDefaultSneak, rhs.BaseMovementDefaultSneak);
            ret.BaseMovementDefaultSprint = object.Equals(item.BaseMovementDefaultSprint, rhs.BaseMovementDefaultSprint);
            ret.HeadData = GenderedItem.EqualityMaskHelper(
                lhs: item.HeadData,
                rhs: rhs.HeadData,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRaceGetter item,
            FileGeneration fg,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Race =>");
            }
            else
            {
                fg.AppendLine($"{name} (Race) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRaceGetter item,
            FileGeneration fg,
            Race.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.Description ?? true)
            {
                fg.AppendItem(item.Description, "Description");
            }
            if ((printMask?.ActorEffect?.Overall ?? true)
                && item.ActorEffect.TryGet(out var ActorEffectItem))
            {
                fg.AppendLine("ActorEffect =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ActorEffectItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Skin ?? true)
                && item.Skin.TryGet(out var SkinItem))
            {
                fg.AppendItem(SkinItem, "Skin");
            }
            if ((printMask?.BodyTemplate?.Overall ?? true)
                && item.BodyTemplate.TryGet(out var BodyTemplateItem))
            {
                BodyTemplateItem?.ToString(fg, "BodyTemplate");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords.TryGet(out var KeywordsItem))
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Data?.Overall ?? true)
            {
                item.Data?.ToString(fg, "Data");
            }
            if ((printMask?.SkeletalModel?.Overall ?? true)
                && item.SkeletalModel.TryGet(out var SkeletalModelItem))
            {
                SkeletalModelItem?.ToString(fg, "SkeletalModel");
            }
            if ((printMask?.MovementTypeNames?.Overall ?? true)
                && item.MovementTypeNames.TryGet(out var MovementTypeNamesItem))
            {
                fg.AppendLine("MovementTypeNames =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in MovementTypeNamesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (true)
            {
                item.Voices.ToString(fg, "Voices");
            }
            if ((printMask?.DecapitateArmors?.Overall ?? true)
                && item.DecapitateArmors.TryGet(out var DecapitateArmorsItem))
            {
                DecapitateArmorsItem?.ToString(fg, "DecapitateArmors");
            }
            if ((printMask?.DefaultHairColors?.Overall ?? true)
                && item.DefaultHairColors.TryGet(out var DefaultHairColorsItem))
            {
                DefaultHairColorsItem?.ToString(fg, "DefaultHairColors");
            }
            if ((printMask?.NumberOfTintsInList ?? true)
                && item.NumberOfTintsInList.TryGet(out var NumberOfTintsInListItem))
            {
                fg.AppendItem(NumberOfTintsInListItem, "NumberOfTintsInList");
            }
            if (printMask?.FacegenMainClamp ?? true)
            {
                fg.AppendItem(item.FacegenMainClamp, "FacegenMainClamp");
            }
            if (printMask?.FacegenFaceClamp ?? true)
            {
                fg.AppendItem(item.FacegenFaceClamp, "FacegenFaceClamp");
            }
            if ((printMask?.AttackRace ?? true)
                && item.AttackRace.TryGet(out var AttackRaceItem))
            {
                fg.AppendItem(AttackRaceItem, "AttackRace");
            }
            if (printMask?.Attacks?.Overall ?? true)
            {
                fg.AppendLine("Attacks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Attacks)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (true)
            {
                item.BodyData.ToString(fg, "BodyData");
            }
            if ((printMask?.Hairs?.Overall ?? true)
                && item.Hairs.TryGet(out var HairsItem))
            {
                fg.AppendLine("Hairs =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in HairsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Eyes?.Overall ?? true)
                && item.Eyes.TryGet(out var EyesItem))
            {
                fg.AppendLine("Eyes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in EyesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.BodyPartData ?? true)
                && item.BodyPartData.TryGet(out var BodyPartDataItem))
            {
                fg.AppendItem(BodyPartDataItem, "BodyPartData");
            }
            if (true)
            {
                item.BehaviorGraph.ToString(fg, "BehaviorGraph");
            }
            if ((printMask?.MaterialType ?? true)
                && item.MaterialType.TryGet(out var MaterialTypeItem))
            {
                fg.AppendItem(MaterialTypeItem, "MaterialType");
            }
            if ((printMask?.ImpactDataSet ?? true)
                && item.ImpactDataSet.TryGet(out var ImpactDataSetItem))
            {
                fg.AppendItem(ImpactDataSetItem, "ImpactDataSet");
            }
            if ((printMask?.DecapitationFX ?? true)
                && item.DecapitationFX.TryGet(out var DecapitationFXItem))
            {
                fg.AppendItem(DecapitationFXItem, "DecapitationFX");
            }
            if ((printMask?.OpenLootSound ?? true)
                && item.OpenLootSound.TryGet(out var OpenLootSoundItem))
            {
                fg.AppendItem(OpenLootSoundItem, "OpenLootSound");
            }
            if ((printMask?.CloseLootSound ?? true)
                && item.CloseLootSound.TryGet(out var CloseLootSoundItem))
            {
                fg.AppendItem(CloseLootSoundItem, "CloseLootSound");
            }
            if ((printMask?.BipedObjectNames?.Overall ?? true)
                && item.BipedObjectNames.TryGet(out var BipedObjectNamesItem))
            {
                fg.AppendLine("BipedObjectNames =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in BipedObjectNamesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem.Key);
                            fg.AppendItem(subItem.Value);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.MovementTypes?.Overall ?? true)
            {
                fg.AppendLine("MovementTypes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.MovementTypes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.EquipmentFlags ?? true)
                && item.EquipmentFlags.TryGet(out var EquipmentFlagsItem))
            {
                fg.AppendItem(EquipmentFlagsItem, "EquipmentFlags");
            }
            if ((printMask?.EquipmentSlots?.Overall ?? true)
                && item.EquipmentSlots.TryGet(out var EquipmentSlotsItem))
            {
                fg.AppendLine("EquipmentSlots =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in EquipmentSlotsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.UnarmedEquipSlot ?? true)
                && item.UnarmedEquipSlot.TryGet(out var UnarmedEquipSlotItem))
            {
                fg.AppendItem(UnarmedEquipSlotItem, "UnarmedEquipSlot");
            }
            if (printMask?.FaceFxPhonemes?.Overall ?? true)
            {
                item.FaceFxPhonemes?.ToString(fg, "FaceFxPhonemes");
            }
            if ((printMask?.BaseMovementDefaultWalk ?? true)
                && item.BaseMovementDefaultWalk.TryGet(out var BaseMovementDefaultWalkItem))
            {
                fg.AppendItem(BaseMovementDefaultWalkItem, "BaseMovementDefaultWalk");
            }
            if ((printMask?.BaseMovementDefaultRun ?? true)
                && item.BaseMovementDefaultRun.TryGet(out var BaseMovementDefaultRunItem))
            {
                fg.AppendItem(BaseMovementDefaultRunItem, "BaseMovementDefaultRun");
            }
            if ((printMask?.BaseMovementDefaultSwim ?? true)
                && item.BaseMovementDefaultSwim.TryGet(out var BaseMovementDefaultSwimItem))
            {
                fg.AppendItem(BaseMovementDefaultSwimItem, "BaseMovementDefaultSwim");
            }
            if ((printMask?.BaseMovementDefaultFly ?? true)
                && item.BaseMovementDefaultFly.TryGet(out var BaseMovementDefaultFlyItem))
            {
                fg.AppendItem(BaseMovementDefaultFlyItem, "BaseMovementDefaultFly");
            }
            if ((printMask?.BaseMovementDefaultSneak ?? true)
                && item.BaseMovementDefaultSneak.TryGet(out var BaseMovementDefaultSneakItem))
            {
                fg.AppendItem(BaseMovementDefaultSneakItem, "BaseMovementDefaultSneak");
            }
            if ((printMask?.BaseMovementDefaultSprint ?? true)
                && item.BaseMovementDefaultSprint.TryGet(out var BaseMovementDefaultSprintItem))
            {
                fg.AppendItem(BaseMovementDefaultSprintItem, "BaseMovementDefaultSprint");
            }
            if ((printMask?.HeadData?.Overall ?? true)
                && item.HeadData.TryGet(out var HeadDataItem))
            {
                HeadDataItem?.ToString(fg, "HeadData");
            }
        }
        
        public bool HasBeenSet(
            IRaceGetter item,
            Race.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.ActorEffect?.Overall.HasValue ?? false && checkMask.ActorEffect!.Overall.Value != (item.ActorEffect != null)) return false;
            if (checkMask.Skin.HasValue && checkMask.Skin.Value != (item.Skin.FormKey != null)) return false;
            if (checkMask.BodyTemplate?.Overall.HasValue ?? false && checkMask.BodyTemplate.Overall.Value != (item.BodyTemplate != null)) return false;
            if (checkMask.BodyTemplate?.Specific != null && (item.BodyTemplate == null || !item.BodyTemplate.HasBeenSet(checkMask.BodyTemplate.Specific))) return false;
            if (checkMask.Keywords?.Overall.HasValue ?? false && checkMask.Keywords!.Overall.Value != (item.Keywords != null)) return false;
            if (checkMask.SkeletalModel?.Overall ?? false) return false;
            if (checkMask.MovementTypeNames?.Overall.HasValue ?? false && checkMask.MovementTypeNames!.Overall.Value != (item.MovementTypeNames != null)) return false;
            if (checkMask.DecapitateArmors?.Overall ?? false) return false;
            if (checkMask.DefaultHairColors?.Overall ?? false) return false;
            if (checkMask.NumberOfTintsInList.HasValue && checkMask.NumberOfTintsInList.Value != (item.NumberOfTintsInList != null)) return false;
            if (checkMask.AttackRace.HasValue && checkMask.AttackRace.Value != (item.AttackRace.FormKey != null)) return false;
            throw new NotImplementedException();
            if (checkMask.Hairs?.Overall.HasValue ?? false && checkMask.Hairs!.Overall.Value != (item.Hairs != null)) return false;
            if (checkMask.Eyes?.Overall.HasValue ?? false && checkMask.Eyes!.Overall.Value != (item.Eyes != null)) return false;
            if (checkMask.BodyPartData.HasValue && checkMask.BodyPartData.Value != (item.BodyPartData.FormKey != null)) return false;
            throw new NotImplementedException();
            if (checkMask.MaterialType.HasValue && checkMask.MaterialType.Value != (item.MaterialType.FormKey != null)) return false;
            if (checkMask.ImpactDataSet.HasValue && checkMask.ImpactDataSet.Value != (item.ImpactDataSet.FormKey != null)) return false;
            if (checkMask.DecapitationFX.HasValue && checkMask.DecapitationFX.Value != (item.DecapitationFX.FormKey != null)) return false;
            if (checkMask.OpenLootSound.HasValue && checkMask.OpenLootSound.Value != (item.OpenLootSound.FormKey != null)) return false;
            if (checkMask.CloseLootSound.HasValue && checkMask.CloseLootSound.Value != (item.CloseLootSound.FormKey != null)) return false;
            if (checkMask.BipedObjectNames?.Overall.HasValue ?? false) return false;
            if (checkMask.EquipmentFlags.HasValue && checkMask.EquipmentFlags.Value != (item.EquipmentFlags != null)) return false;
            if (checkMask.EquipmentSlots?.Overall.HasValue ?? false && checkMask.EquipmentSlots!.Overall.Value != (item.EquipmentSlots != null)) return false;
            if (checkMask.UnarmedEquipSlot.HasValue && checkMask.UnarmedEquipSlot.Value != (item.UnarmedEquipSlot.FormKey != null)) return false;
            if (checkMask.BaseMovementDefaultWalk.HasValue && checkMask.BaseMovementDefaultWalk.Value != (item.BaseMovementDefaultWalk.FormKey != null)) return false;
            if (checkMask.BaseMovementDefaultRun.HasValue && checkMask.BaseMovementDefaultRun.Value != (item.BaseMovementDefaultRun.FormKey != null)) return false;
            if (checkMask.BaseMovementDefaultSwim.HasValue && checkMask.BaseMovementDefaultSwim.Value != (item.BaseMovementDefaultSwim.FormKey != null)) return false;
            if (checkMask.BaseMovementDefaultFly.HasValue && checkMask.BaseMovementDefaultFly.Value != (item.BaseMovementDefaultFly.FormKey != null)) return false;
            if (checkMask.BaseMovementDefaultSneak.HasValue && checkMask.BaseMovementDefaultSneak.Value != (item.BaseMovementDefaultSneak.FormKey != null)) return false;
            if (checkMask.BaseMovementDefaultSprint.HasValue && checkMask.BaseMovementDefaultSprint.Value != (item.BaseMovementDefaultSprint.FormKey != null)) return false;
            if (checkMask.HeadData?.Overall ?? false) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IRaceGetter item,
            Race.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            mask.Description = true;
            mask.ActorEffect = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.ActorEffect != null), default);
            mask.Skin = (item.Skin.FormKey != null);
            var itemBodyTemplate = item.BodyTemplate;
            mask.BodyTemplate = new MaskItem<bool, BodyTemplate.Mask<bool>?>(itemBodyTemplate != null, itemBodyTemplate?.GetHasBeenSetMask());
            mask.Keywords = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Keywords != null), default);
            mask.Data = new MaskItem<bool, RaceData.Mask<bool>?>(true, item.Data?.GetHasBeenSetMask());
            mask.SkeletalModel = GenderedItem.HasBeenSetMaskHelper(
                item.SkeletalModel,
                (i) => i?.GetHasBeenSetMask());
            mask.MovementTypeNames = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.MovementTypeNames != null), default);
            mask.Voices = new GenderedItem<bool>(true, true);
            mask.DecapitateArmors = item.DecapitateArmors == null ? null : new MaskItem<bool, GenderedItem<bool>?>(true, default);
            mask.DefaultHairColors = item.DefaultHairColors == null ? null : new MaskItem<bool, GenderedItem<bool>?>(true, default);
            mask.NumberOfTintsInList = (item.NumberOfTintsInList != null);
            mask.FacegenMainClamp = true;
            mask.FacegenFaceClamp = true;
            mask.AttackRace = (item.AttackRace.FormKey != null);
            var AttacksItem = item.Attacks;
            mask.Attacks = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Attack.Mask<bool>?>>?>(true, AttacksItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Attack.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.BodyData = GenderedItem.HasBeenSetMaskHelper(
                item.BodyData,
                (i) => i?.GetHasBeenSetMask());
            mask.Hairs = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Hairs != null), default);
            mask.Eyes = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Eyes != null), default);
            mask.BodyPartData = (item.BodyPartData.FormKey != null);
            mask.BehaviorGraph = GenderedItem.HasBeenSetMaskHelper(
                item.BehaviorGraph,
                (i) => i?.GetHasBeenSetMask());
            mask.MaterialType = (item.MaterialType.FormKey != null);
            mask.ImpactDataSet = (item.ImpactDataSet.FormKey != null);
            mask.DecapitationFX = (item.DecapitationFX.FormKey != null);
            mask.OpenLootSound = (item.OpenLootSound.FormKey != null);
            mask.CloseLootSound = (item.CloseLootSound.FormKey != null);
            mask.BipedObjectNames = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>?>(item.BipedObjectNames != null, null);
            var MovementTypesItem = item.MovementTypes;
            mask.MovementTypes = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RaceMovementType.Mask<bool>?>>?>(true, MovementTypesItem.WithIndex().Select((i) => new MaskItemIndexed<bool, RaceMovementType.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.EquipmentFlags = (item.EquipmentFlags != null);
            mask.EquipmentSlots = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.EquipmentSlots != null), default);
            mask.UnarmedEquipSlot = (item.UnarmedEquipSlot.FormKey != null);
            mask.FaceFxPhonemes = new MaskItem<bool, FaceFxPhonemes.Mask<bool>?>(true, item.FaceFxPhonemes?.GetHasBeenSetMask());
            mask.BaseMovementDefaultWalk = (item.BaseMovementDefaultWalk.FormKey != null);
            mask.BaseMovementDefaultRun = (item.BaseMovementDefaultRun.FormKey != null);
            mask.BaseMovementDefaultSwim = (item.BaseMovementDefaultSwim.FormKey != null);
            mask.BaseMovementDefaultFly = (item.BaseMovementDefaultFly.FormKey != null);
            mask.BaseMovementDefaultSneak = (item.BaseMovementDefaultSneak.FormKey != null);
            mask.BaseMovementDefaultSprint = (item.BaseMovementDefaultSprint.FormKey != null);
            mask.HeadData = GenderedItem.HasBeenSetMaskHelper(
                item.HeadData,
                (i) => i?.GetHasBeenSetMask());
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Race_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Race_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRaceGetter? lhs,
            IRaceGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!string.Equals(lhs.Description, rhs.Description)) return false;
            if (!lhs.ActorEffect.SequenceEqual(rhs.ActorEffect)) return false;
            if (!lhs.Skin.Equals(rhs.Skin)) return false;
            if (!object.Equals(lhs.BodyTemplate, rhs.BodyTemplate)) return false;
            if (!lhs.Keywords.SequenceEqual(rhs.Keywords)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            if (!Equals(lhs.SkeletalModel, rhs.SkeletalModel)) return false;
            if (!lhs.MovementTypeNames.SequenceEqual(rhs.MovementTypeNames)) return false;
            if (!Equals(lhs.Voices, rhs.Voices)) return false;
            if (!Equals(lhs.DecapitateArmors, rhs.DecapitateArmors)) return false;
            if (!Equals(lhs.DefaultHairColors, rhs.DefaultHairColors)) return false;
            if (lhs.NumberOfTintsInList != rhs.NumberOfTintsInList) return false;
            if (!lhs.FacegenMainClamp.EqualsWithin(rhs.FacegenMainClamp)) return false;
            if (!lhs.FacegenFaceClamp.EqualsWithin(rhs.FacegenFaceClamp)) return false;
            if (!lhs.AttackRace.Equals(rhs.AttackRace)) return false;
            if (!lhs.Attacks.SequenceEqual(rhs.Attacks)) return false;
            if (!Equals(lhs.BodyData, rhs.BodyData)) return false;
            if (!lhs.Hairs.SequenceEqual(rhs.Hairs)) return false;
            if (!lhs.Eyes.SequenceEqual(rhs.Eyes)) return false;
            if (!lhs.BodyPartData.Equals(rhs.BodyPartData)) return false;
            if (!Equals(lhs.BehaviorGraph, rhs.BehaviorGraph)) return false;
            if (!lhs.MaterialType.Equals(rhs.MaterialType)) return false;
            if (!lhs.ImpactDataSet.Equals(rhs.ImpactDataSet)) return false;
            if (!lhs.DecapitationFX.Equals(rhs.DecapitationFX)) return false;
            if (!lhs.OpenLootSound.Equals(rhs.OpenLootSound)) return false;
            if (!lhs.CloseLootSound.Equals(rhs.CloseLootSound)) return false;
            if (!lhs.BipedObjectNames.SequenceEqual(rhs.BipedObjectNames)) return false;
            if (!lhs.MovementTypes.SequenceEqual(rhs.MovementTypes)) return false;
            if (lhs.EquipmentFlags != rhs.EquipmentFlags) return false;
            if (!lhs.EquipmentSlots.SequenceEqual(rhs.EquipmentSlots)) return false;
            if (!lhs.UnarmedEquipSlot.Equals(rhs.UnarmedEquipSlot)) return false;
            if (!object.Equals(lhs.FaceFxPhonemes, rhs.FaceFxPhonemes)) return false;
            if (!lhs.BaseMovementDefaultWalk.Equals(rhs.BaseMovementDefaultWalk)) return false;
            if (!lhs.BaseMovementDefaultRun.Equals(rhs.BaseMovementDefaultRun)) return false;
            if (!lhs.BaseMovementDefaultSwim.Equals(rhs.BaseMovementDefaultSwim)) return false;
            if (!lhs.BaseMovementDefaultFly.Equals(rhs.BaseMovementDefaultFly)) return false;
            if (!lhs.BaseMovementDefaultSneak.Equals(rhs.BaseMovementDefaultSneak)) return false;
            if (!lhs.BaseMovementDefaultSprint.Equals(rhs.BaseMovementDefaultSprint)) return false;
            if (!Equals(lhs.HeadData, rhs.HeadData)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter);
        }
        
        public virtual int GetHashCode(IRaceGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Description);
            hash.Add(item.ActorEffect);
            if (item.Skin.TryGet(out var Skinitem))
            {
                hash.Add(Skinitem);
            }
            if (item.BodyTemplate.TryGet(out var BodyTemplateitem))
            {
                hash.Add(BodyTemplateitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.Data);
            if (item.SkeletalModel.TryGet(out var SkeletalModelitem))
            {
                hash.Add(HashCode.Combine(SkeletalModelitem.Male, SkeletalModelitem.Female));
            }
            hash.Add(item.MovementTypeNames);
            hash.Add(HashCode.Combine(item.Voices.Male, item.Voices.Female));
            if (item.DecapitateArmors.TryGet(out var DecapitateArmorsitem))
            {
                hash.Add(HashCode.Combine(DecapitateArmorsitem.Male, DecapitateArmorsitem.Female));
            }
            if (item.DefaultHairColors.TryGet(out var DefaultHairColorsitem))
            {
                hash.Add(HashCode.Combine(DefaultHairColorsitem.Male, DefaultHairColorsitem.Female));
            }
            if (item.NumberOfTintsInList.TryGet(out var NumberOfTintsInListitem))
            {
                hash.Add(NumberOfTintsInListitem);
            }
            hash.Add(item.FacegenMainClamp);
            hash.Add(item.FacegenFaceClamp);
            if (item.AttackRace.TryGet(out var AttackRaceitem))
            {
                hash.Add(AttackRaceitem);
            }
            hash.Add(item.Attacks);
            hash.Add(HashCode.Combine(item.BodyData.Male, item.BodyData.Female));
            hash.Add(item.Hairs);
            hash.Add(item.Eyes);
            if (item.BodyPartData.TryGet(out var BodyPartDataitem))
            {
                hash.Add(BodyPartDataitem);
            }
            hash.Add(HashCode.Combine(item.BehaviorGraph.Male, item.BehaviorGraph.Female));
            if (item.MaterialType.TryGet(out var MaterialTypeitem))
            {
                hash.Add(MaterialTypeitem);
            }
            if (item.ImpactDataSet.TryGet(out var ImpactDataSetitem))
            {
                hash.Add(ImpactDataSetitem);
            }
            if (item.DecapitationFX.TryGet(out var DecapitationFXitem))
            {
                hash.Add(DecapitationFXitem);
            }
            if (item.OpenLootSound.TryGet(out var OpenLootSounditem))
            {
                hash.Add(OpenLootSounditem);
            }
            if (item.CloseLootSound.TryGet(out var CloseLootSounditem))
            {
                hash.Add(CloseLootSounditem);
            }
            hash.Add(item.BipedObjectNames);
            hash.Add(item.MovementTypes);
            if (item.EquipmentFlags.TryGet(out var EquipmentFlagsitem))
            {
                hash.Add(EquipmentFlagsitem);
            }
            hash.Add(item.EquipmentSlots);
            if (item.UnarmedEquipSlot.TryGet(out var UnarmedEquipSlotitem))
            {
                hash.Add(UnarmedEquipSlotitem);
            }
            hash.Add(item.FaceFxPhonemes);
            if (item.BaseMovementDefaultWalk.TryGet(out var BaseMovementDefaultWalkitem))
            {
                hash.Add(BaseMovementDefaultWalkitem);
            }
            if (item.BaseMovementDefaultRun.TryGet(out var BaseMovementDefaultRunitem))
            {
                hash.Add(BaseMovementDefaultRunitem);
            }
            if (item.BaseMovementDefaultSwim.TryGet(out var BaseMovementDefaultSwimitem))
            {
                hash.Add(BaseMovementDefaultSwimitem);
            }
            if (item.BaseMovementDefaultFly.TryGet(out var BaseMovementDefaultFlyitem))
            {
                hash.Add(BaseMovementDefaultFlyitem);
            }
            if (item.BaseMovementDefaultSneak.TryGet(out var BaseMovementDefaultSneakitem))
            {
                hash.Add(BaseMovementDefaultSneakitem);
            }
            if (item.BaseMovementDefaultSprint.TryGet(out var BaseMovementDefaultSprintitem))
            {
                hash.Add(BaseMovementDefaultSprintitem);
            }
            if (item.HeadData.TryGet(out var HeadDataitem))
            {
                hash.Add(HashCode.Combine(HeadDataitem.Male, HeadDataitem.Female));
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Race.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IRaceGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.ActorEffect.TryGet(out var ActorEffectItem))
            {
                foreach (var item in ActorEffectItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.Skin.FormKey.TryGet(out var SkinKey))
            {
                yield return SkinKey;
            }
            if (obj.Keywords.TryGet(out var KeywordsItem))
            {
                foreach (var item in KeywordsItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.AttackRace.FormKey.TryGet(out var AttackRaceKey))
            {
                yield return AttackRaceKey;
            }
            foreach (var item in obj.Attacks.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            if (obj.Hairs.TryGet(out var HairsItem))
            {
                foreach (var item in HairsItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.Eyes.TryGet(out var EyesItem))
            {
                foreach (var item in EyesItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.BodyPartData.FormKey.TryGet(out var BodyPartDataKey))
            {
                yield return BodyPartDataKey;
            }
            if (obj.MaterialType.FormKey.TryGet(out var MaterialTypeKey))
            {
                yield return MaterialTypeKey;
            }
            if (obj.ImpactDataSet.FormKey.TryGet(out var ImpactDataSetKey))
            {
                yield return ImpactDataSetKey;
            }
            if (obj.DecapitationFX.FormKey.TryGet(out var DecapitationFXKey))
            {
                yield return DecapitationFXKey;
            }
            if (obj.OpenLootSound.FormKey.TryGet(out var OpenLootSoundKey))
            {
                yield return OpenLootSoundKey;
            }
            if (obj.CloseLootSound.FormKey.TryGet(out var CloseLootSoundKey))
            {
                yield return CloseLootSoundKey;
            }
            foreach (var item in obj.MovementTypes.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            if (obj.EquipmentSlots.TryGet(out var EquipmentSlotsItem))
            {
                foreach (var item in EquipmentSlotsItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.UnarmedEquipSlot.FormKey.TryGet(out var UnarmedEquipSlotKey))
            {
                yield return UnarmedEquipSlotKey;
            }
            if (obj.BaseMovementDefaultWalk.FormKey.TryGet(out var BaseMovementDefaultWalkKey))
            {
                yield return BaseMovementDefaultWalkKey;
            }
            if (obj.BaseMovementDefaultRun.FormKey.TryGet(out var BaseMovementDefaultRunKey))
            {
                yield return BaseMovementDefaultRunKey;
            }
            if (obj.BaseMovementDefaultSwim.FormKey.TryGet(out var BaseMovementDefaultSwimKey))
            {
                yield return BaseMovementDefaultSwimKey;
            }
            if (obj.BaseMovementDefaultFly.FormKey.TryGet(out var BaseMovementDefaultFlyKey))
            {
                yield return BaseMovementDefaultFlyKey;
            }
            if (obj.BaseMovementDefaultSneak.FormKey.TryGet(out var BaseMovementDefaultSneakKey))
            {
                yield return BaseMovementDefaultSneakKey;
            }
            if (obj.BaseMovementDefaultSprint.FormKey.TryGet(out var BaseMovementDefaultSprintKey))
            {
                yield return BaseMovementDefaultSprintKey;
            }
            yield break;
        }
        
        public void RemapLinks(IRaceGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Race obj, Race rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Race(getNextFormKey());
            ret.DeepCopyIn((Race)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Race)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class RaceSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly RaceSetterTranslationCommon Instance = new RaceSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IRaceInternal item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IRace item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ActorEffect) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.ActorEffect);
                try
                {
                    if ((rhs.ActorEffect != null))
                    {
                        item.ActorEffect = 
                            rhs.ActorEffect
                            .Select(r => (IFormLink<ASpell>)new FormLink<ASpell>(r.FormKey))
                            .ToExtendedList<IFormLink<ASpell>>();
                    }
                    else
                    {
                        item.ActorEffect = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Skin) ?? true))
            {
                item.Skin = rhs.Skin.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BodyTemplate) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.BodyTemplate);
                try
                {
                    if(rhs.BodyTemplate.TryGet(out var rhsBodyTemplate))
                    {
                        item.BodyTemplate = rhsBodyTemplate.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.BodyTemplate));
                    }
                    else
                    {
                        item.BodyTemplate = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLink<Keyword>)new FormLink<Keyword>(r.FormKey))
                            .ToExtendedList<IFormLink<Keyword>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Data);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Data) ?? true))
                    {
                        item.Data = rhs.Data.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.Data),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (!rhs.SkeletalModel.TryGet(out var rhsSkeletalModelitem))
            {
                item.SkeletalModel = null;
            }
            else
            {
                item.SkeletalModel = new GenderedItem<SimpleModel?>(
                    male: rhsSkeletalModelitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsSkeletalModelitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MovementTypeNames) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.MovementTypeNames);
                try
                {
                    if ((rhs.MovementTypeNames != null))
                    {
                        item.MovementTypeNames = 
                            rhs.MovementTypeNames
                            .ToExtendedList<String>();
                    }
                    else
                    {
                        item.MovementTypeNames = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            item.Voices = new GenderedItem<IFormLink<VoiceType>>(
                male: new FormLink<VoiceType>(rhs.Voices.Male.FormKey),
                female: new FormLink<VoiceType>(rhs.Voices.Female.FormKey));
            if (!rhs.DecapitateArmors.TryGet(out var rhsDecapitateArmorsitem))
            {
                item.DecapitateArmors = null;
            }
            else
            {
                item.DecapitateArmors = new GenderedItem<IFormLink<Armor>>(
                    male: new FormLink<Armor>(rhsDecapitateArmorsitem.Male.FormKey),
                    female: new FormLink<Armor>(rhsDecapitateArmorsitem.Female.FormKey));
            }
            if (!rhs.DefaultHairColors.TryGet(out var rhsDefaultHairColorsitem))
            {
                item.DefaultHairColors = null;
            }
            else
            {
                item.DefaultHairColors = new GenderedItem<IFormLink<ColorRecord>>(
                    male: new FormLink<ColorRecord>(rhsDefaultHairColorsitem.Male.FormKey),
                    female: new FormLink<ColorRecord>(rhsDefaultHairColorsitem.Female.FormKey));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.NumberOfTintsInList) ?? true))
            {
                item.NumberOfTintsInList = rhs.NumberOfTintsInList;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenMainClamp) ?? true))
            {
                item.FacegenMainClamp = rhs.FacegenMainClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenFaceClamp) ?? true))
            {
                item.FacegenFaceClamp = rhs.FacegenFaceClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AttackRace) ?? true))
            {
                item.AttackRace = rhs.AttackRace.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Attacks) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Attacks);
                try
                {
                    item.Attacks.SetTo(
                        rhs.Attacks
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            item.BodyData = new GenderedItem<BodyData?>(
                male: rhs.BodyData.Male?.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)),
                female: rhs.BodyData.Female?.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)));
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Hairs) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Hairs);
                try
                {
                    if ((rhs.Hairs != null))
                    {
                        item.Hairs = 
                            rhs.Hairs
                            .Select(r => (IFormLink<Hair>)new FormLink<Hair>(r.FormKey))
                            .ToExtendedList<IFormLink<Hair>>();
                    }
                    else
                    {
                        item.Hairs = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Eyes);
                try
                {
                    if ((rhs.Eyes != null))
                    {
                        item.Eyes = 
                            rhs.Eyes
                            .Select(r => (IFormLink<Eyes>)new FormLink<Eyes>(r.FormKey))
                            .ToExtendedList<IFormLink<Eyes>>();
                    }
                    else
                    {
                        item.Eyes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BodyPartData) ?? true))
            {
                item.BodyPartData = rhs.BodyPartData.FormKey;
            }
            item.BehaviorGraph = new GenderedItem<Model?>(
                male: rhs.BehaviorGraph.Male?.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)),
                female: rhs.BehaviorGraph.Female?.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)));
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MaterialType) ?? true))
            {
                item.MaterialType = rhs.MaterialType.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ImpactDataSet) ?? true))
            {
                item.ImpactDataSet = rhs.ImpactDataSet.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DecapitationFX) ?? true))
            {
                item.DecapitationFX = rhs.DecapitationFX.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OpenLootSound) ?? true))
            {
                item.OpenLootSound = rhs.OpenLootSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.CloseLootSound) ?? true))
            {
                item.CloseLootSound = rhs.CloseLootSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BipedObjectNames) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.BipedObjectNames);
                try
                {
                    item.BipedObjectNames.SetTo(rhs.BipedObjectNames);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MovementTypes) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.MovementTypes);
                try
                {
                    item.MovementTypes.SetTo(
                        rhs.MovementTypes
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentFlags) ?? true))
            {
                item.EquipmentFlags = rhs.EquipmentFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentSlots) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.EquipmentSlots);
                try
                {
                    if ((rhs.EquipmentSlots != null))
                    {
                        item.EquipmentSlots = 
                            rhs.EquipmentSlots
                            .Select(r => (IFormLink<EquipType>)new FormLink<EquipType>(r.FormKey))
                            .ToExtendedList<IFormLink<EquipType>>();
                    }
                    else
                    {
                        item.EquipmentSlots = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.UnarmedEquipSlot) ?? true))
            {
                item.UnarmedEquipSlot = rhs.UnarmedEquipSlot.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceFxPhonemes) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FaceFxPhonemes);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceFxPhonemes) ?? true))
                    {
                        item.FaceFxPhonemes = rhs.FaceFxPhonemes.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.FaceFxPhonemes),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultWalk) ?? true))
            {
                item.BaseMovementDefaultWalk = rhs.BaseMovementDefaultWalk.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultRun) ?? true))
            {
                item.BaseMovementDefaultRun = rhs.BaseMovementDefaultRun.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSwim) ?? true))
            {
                item.BaseMovementDefaultSwim = rhs.BaseMovementDefaultSwim.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultFly) ?? true))
            {
                item.BaseMovementDefaultFly = rhs.BaseMovementDefaultFly.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSneak) ?? true))
            {
                item.BaseMovementDefaultSneak = rhs.BaseMovementDefaultSneak.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSprint) ?? true))
            {
                item.BaseMovementDefaultSprint = rhs.BaseMovementDefaultSprint.FormKey;
            }
            if (!rhs.HeadData.TryGet(out var rhsHeadDataitem))
            {
                item.HeadData = null;
            }
            else
            {
                item.HeadData = new GenderedItem<HeadData?>(
                    male: rhsHeadDataitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsHeadDataitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Race DeepCopy(
            IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Race
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static Race_Registration Registration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return RaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RaceXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static RaceXmlWriteTranslation Instance = new RaceXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRaceGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Race_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)Race_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if ((item.ActorEffect != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.ActorEffect) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IASpellGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.ActorEffect),
                    item: item.ActorEffect,
                    fieldIndex: (int)Race_FieldIndex.ActorEffect,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.ActorEffect),
                    transl: (XElement subNode, IFormLinkGetter<IASpellGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Skin.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Skin) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Skin),
                    item: item.Skin.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.Skin,
                    errorMask: errorMask);
            }
            if ((item.BodyTemplate != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BodyTemplate) ?? true))
            {
                if (item.BodyTemplate.TryGet(out var BodyTemplateItem))
                {
                    ((BodyTemplateXmlWriteTranslation)((IXmlItem)BodyTemplateItem).XmlWriteTranslator).Write(
                        item: BodyTemplateItem,
                        node: node,
                        name: nameof(item.BodyTemplate),
                        fieldIndex: (int)Race_FieldIndex.BodyTemplate,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.BodyTemplate));
                }
            }
            if ((item.Keywords != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Keywords) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Keywords),
                    item: item.Keywords,
                    fieldIndex: (int)Race_FieldIndex.Keywords,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Keywords),
                    transl: (XElement subNode, IFormLinkGetter<IKeywordGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.Data) ?? true))
            {
                var DataItem = item.Data;
                ((RaceDataXmlWriteTranslation)((IXmlItem)DataItem).XmlWriteTranslator).Write(
                    item: DataItem,
                    node: node,
                    name: nameof(item.Data),
                    fieldIndex: (int)Race_FieldIndex.Data,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Data));
            }
            if ((item.SkeletalModel != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.SkeletalModel) ?? true))
            {
                {
                    if (item.SkeletalModel.Male.TryGet(out var Item))
                    {
                        ((SimpleModelXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: node,
                            name: nameof(item.SkeletalModel),
                            errorMask: errorMask,
                            translationMask: translationMask);
                    }
                }
                {
                    if (item.SkeletalModel.Female.TryGet(out var Item))
                    {
                        ((SimpleModelXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: node,
                            name: nameof(item.SkeletalModel),
                            errorMask: errorMask,
                            translationMask: translationMask);
                    }
                }
            }
            if ((item.MovementTypeNames != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.MovementTypeNames) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: node,
                    name: nameof(item.MovementTypeNames),
                    item: item.MovementTypeNames,
                    fieldIndex: (int)Race_FieldIndex.MovementTypeNames,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.MovementTypeNames),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.Voices) ?? true))
            {
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Voices),
                        item: item.Voices.Male.FormKey,
                        errorMask: errorMask);
                }
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Voices),
                        item: item.Voices.Female.FormKey,
                        errorMask: errorMask);
                }
            }
            if ((item.DecapitateArmors != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.DecapitateArmors) ?? true))
            {
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DecapitateArmors),
                        item: item.DecapitateArmors.Male.FormKey,
                        errorMask: errorMask);
                }
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DecapitateArmors),
                        item: item.DecapitateArmors.Female.FormKey,
                        errorMask: errorMask);
                }
            }
            if ((item.DefaultHairColors != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHairColors) ?? true))
            {
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DefaultHairColors),
                        item: item.DefaultHairColors.Male.FormKey,
                        errorMask: errorMask);
                }
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.DefaultHairColors),
                        item: item.DefaultHairColors.Female.FormKey,
                        errorMask: errorMask);
                }
            }
            if ((item.NumberOfTintsInList != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.NumberOfTintsInList) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NumberOfTintsInList),
                    item: item.NumberOfTintsInList.Value,
                    fieldIndex: (int)Race_FieldIndex.NumberOfTintsInList,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenMainClamp) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FacegenMainClamp),
                    item: item.FacegenMainClamp,
                    fieldIndex: (int)Race_FieldIndex.FacegenMainClamp,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenFaceClamp) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FacegenFaceClamp),
                    item: item.FacegenFaceClamp,
                    fieldIndex: (int)Race_FieldIndex.FacegenFaceClamp,
                    errorMask: errorMask);
            }
            if ((item.AttackRace.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.AttackRace) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AttackRace),
                    item: item.AttackRace.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.AttackRace,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.Attacks) ?? true))
            {
                ListXmlTranslation<IAttackGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Attacks),
                    item: item.Attacks,
                    fieldIndex: (int)Race_FieldIndex.Attacks,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Attacks),
                    transl: (XElement subNode, IAttackGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((AttackXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.BodyData) ?? true))
            {
                {
                    if (item.BodyData.Male.TryGet(out var Item))
                    {
                        ((BodyDataXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: node,
                            name: nameof(item.BodyData),
                            errorMask: errorMask,
                            translationMask: translationMask);
                    }
                }
                {
                    if (item.BodyData.Female.TryGet(out var Item))
                    {
                        ((BodyDataXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: node,
                            name: nameof(item.BodyData),
                            errorMask: errorMask,
                            translationMask: translationMask);
                    }
                }
            }
            if ((item.Hairs != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Hairs) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IHairGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Hairs),
                    item: item.Hairs,
                    fieldIndex: (int)Race_FieldIndex.Hairs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Hairs),
                    transl: (XElement subNode, IFormLinkGetter<IHairGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Eyes != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.Eyes) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IEyesGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Eyes),
                    item: item.Eyes,
                    fieldIndex: (int)Race_FieldIndex.Eyes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Eyes),
                    transl: (XElement subNode, IFormLinkGetter<IEyesGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.BodyPartData.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BodyPartData) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BodyPartData),
                    item: item.BodyPartData.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.BodyPartData,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.BehaviorGraph) ?? true))
            {
                {
                    if (item.BehaviorGraph.Male.TryGet(out var Item))
                    {
                        ((ModelXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: node,
                            name: nameof(item.BehaviorGraph),
                            errorMask: errorMask,
                            translationMask: translationMask);
                    }
                }
                {
                    if (item.BehaviorGraph.Female.TryGet(out var Item))
                    {
                        ((ModelXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: node,
                            name: nameof(item.BehaviorGraph),
                            errorMask: errorMask,
                            translationMask: translationMask);
                    }
                }
            }
            if ((item.MaterialType.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.MaterialType) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaterialType),
                    item: item.MaterialType.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.MaterialType,
                    errorMask: errorMask);
            }
            if ((item.ImpactDataSet.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.ImpactDataSet) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ImpactDataSet),
                    item: item.ImpactDataSet.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.ImpactDataSet,
                    errorMask: errorMask);
            }
            if ((item.DecapitationFX.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.DecapitationFX) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DecapitationFX),
                    item: item.DecapitationFX.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.DecapitationFX,
                    errorMask: errorMask);
            }
            if ((item.OpenLootSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.OpenLootSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.OpenLootSound),
                    item: item.OpenLootSound.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.OpenLootSound,
                    errorMask: errorMask);
            }
            if ((item.CloseLootSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.CloseLootSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CloseLootSound),
                    item: item.CloseLootSound.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.CloseLootSound,
                    errorMask: errorMask);
            }
            if (item.BipedObjectNames != null
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BipedObjectNames) ?? true))
            {
                DictXmlTranslation<BipedObject, String>.Instance.Write(
                    node: node,
                    name: nameof(item.BipedObjectNames),
                    items: item.BipedObjectNames,
                    fieldIndex: (int)Race_FieldIndex.BipedObjectNames,
                    errorMask: errorMask,
                    translationMask: translationMask,
                    keyTransl: (XElement subNode, BipedObject subItem, ErrorMaskBuilder? dictSubMask, TranslationCrystal? dictSubTranslMask) =>
                    {
                        EnumXmlTranslation<BipedObject>.Instance.Write(
                            node: subNode,
                            name: "Key",
                            item: subItem,
                            errorMask: dictSubMask);
                    },
                    valTransl: (XElement subNode, String subItem, ErrorMaskBuilder? dictSubMask, TranslationCrystal? dictSubTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: "Value",
                            item: subItem,
                            errorMask: dictSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.MovementTypes) ?? true))
            {
                ListXmlTranslation<IRaceMovementTypeGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.MovementTypes),
                    item: item.MovementTypes,
                    fieldIndex: (int)Race_FieldIndex.MovementTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.MovementTypes),
                    transl: (XElement subNode, IRaceMovementTypeGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((RaceMovementTypeXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((item.EquipmentFlags != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentFlags) ?? true))
            {
                EnumXmlTranslation<EquipTypeFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.EquipmentFlags),
                    item: item.EquipmentFlags,
                    fieldIndex: (int)Race_FieldIndex.EquipmentFlags,
                    errorMask: errorMask);
            }
            if ((item.EquipmentSlots != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentSlots) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IEquipTypeGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.EquipmentSlots),
                    item: item.EquipmentSlots,
                    fieldIndex: (int)Race_FieldIndex.EquipmentSlots,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.EquipmentSlots),
                    transl: (XElement subNode, IFormLinkGetter<IEquipTypeGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.UnarmedEquipSlot.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.UnarmedEquipSlot) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.UnarmedEquipSlot),
                    item: item.UnarmedEquipSlot.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.UnarmedEquipSlot,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Race_FieldIndex.FaceFxPhonemes) ?? true))
            {
                var FaceFxPhonemesItem = item.FaceFxPhonemes;
                ((FaceFxPhonemesXmlWriteTranslation)((IXmlItem)FaceFxPhonemesItem).XmlWriteTranslator).Write(
                    item: FaceFxPhonemesItem,
                    node: node,
                    name: nameof(item.FaceFxPhonemes),
                    fieldIndex: (int)Race_FieldIndex.FaceFxPhonemes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.FaceFxPhonemes));
            }
            if ((item.BaseMovementDefaultWalk.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultWalk) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseMovementDefaultWalk),
                    item: item.BaseMovementDefaultWalk.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.BaseMovementDefaultWalk,
                    errorMask: errorMask);
            }
            if ((item.BaseMovementDefaultRun.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultRun) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseMovementDefaultRun),
                    item: item.BaseMovementDefaultRun.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.BaseMovementDefaultRun,
                    errorMask: errorMask);
            }
            if ((item.BaseMovementDefaultSwim.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSwim) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseMovementDefaultSwim),
                    item: item.BaseMovementDefaultSwim.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.BaseMovementDefaultSwim,
                    errorMask: errorMask);
            }
            if ((item.BaseMovementDefaultFly.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultFly) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseMovementDefaultFly),
                    item: item.BaseMovementDefaultFly.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.BaseMovementDefaultFly,
                    errorMask: errorMask);
            }
            if ((item.BaseMovementDefaultSneak.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSneak) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseMovementDefaultSneak),
                    item: item.BaseMovementDefaultSneak.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.BaseMovementDefaultSneak,
                    errorMask: errorMask);
            }
            if ((item.BaseMovementDefaultSprint.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSprint) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseMovementDefaultSprint),
                    item: item.BaseMovementDefaultSprint.FormKey.Value,
                    fieldIndex: (int)Race_FieldIndex.BaseMovementDefaultSprint,
                    errorMask: errorMask);
            }
            if ((item.HeadData != null)
                && (translationMask?.GetShouldTranslate((int)Race_FieldIndex.HeadData) ?? true))
            {
                {
                    if (item.HeadData.Male.TryGet(out var Item))
                    {
                        ((HeadDataXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: node,
                            name: nameof(item.HeadData),
                            errorMask: errorMask,
                            translationMask: translationMask);
                    }
                }
                {
                    if (item.HeadData.Female.TryGet(out var Item))
                    {
                        ((HeadDataXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: node,
                            name: nameof(item.HeadData),
                            errorMask: errorMask,
                            translationMask: translationMask);
                    }
                }
            }
        }

        public void Write(
            XElement node,
            IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Race");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Race");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class RaceXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static RaceXmlCreateTranslation Instance = new RaceXmlCreateTranslation();

        public static void FillPublicXml(
            IRaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRaceInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Race_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    errorMask?.PushIndex((int)Race_FieldIndex.Description);
                    try
                    {
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ActorEffect":
                    errorMask?.PushIndex((int)Race_FieldIndex.ActorEffect);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<ASpell>>.Instance.Parse(
                            node: node,
                            enumer: out var ActorEffectItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.ActorEffect = ActorEffectItem.ToExtendedList();
                        }
                        else
                        {
                            item.ActorEffect = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Skin":
                    errorMask?.PushIndex((int)Race_FieldIndex.Skin);
                    try
                    {
                        item.Skin = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BodyTemplate":
                    errorMask?.PushIndex((int)Race_FieldIndex.BodyTemplate);
                    try
                    {
                        item.BodyTemplate = LoquiXmlTranslation<BodyTemplate>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.BodyTemplate));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keywords":
                    errorMask?.PushIndex((int)Race_FieldIndex.Keywords);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Keyword>>.Instance.Parse(
                            node: node,
                            enumer: out var KeywordsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Keywords = KeywordsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Keywords = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Data":
                    errorMask?.PushIndex((int)Race_FieldIndex.Data);
                    try
                    {
                        item.Data = LoquiXmlTranslation<RaceData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.Data));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkeletalModel":
                    errorMask?.PushIndex((int)Race_FieldIndex.SkeletalModel);
                    try
                    {
                        item.SkeletalModel = new GenderedItem<SimpleModel?>(
                            male: LoquiXmlTranslation<SimpleModel>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: null),
                            female: LoquiXmlTranslation<SimpleModel>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: null));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MovementTypeNames":
                    errorMask?.PushIndex((int)Race_FieldIndex.MovementTypeNames);
                    try
                    {
                        if (ListXmlTranslation<String>.Instance.Parse(
                            node: node,
                            enumer: out var MovementTypeNamesItem,
                            transl: StringXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.MovementTypeNames = MovementTypeNamesItem.ToExtendedList();
                        }
                        else
                        {
                            item.MovementTypeNames = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Voices":
                    errorMask?.PushIndex((int)Race_FieldIndex.Voices);
                    try
                    {
                        item.Voices = new GenderedItem<IFormLink<VoiceType>>(
                            male: new FormLink<VoiceType>(FormKeyXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask)),
                            female: new FormLink<VoiceType>(FormKeyXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask)));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DecapitateArmors":
                    errorMask?.PushIndex((int)Race_FieldIndex.DecapitateArmors);
                    try
                    {
                        item.DecapitateArmors = new GenderedItem<IFormLink<Armor>>(
                            male: new FormLink<Armor>(FormKeyXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask)),
                            female: new FormLink<Armor>(FormKeyXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask)));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DefaultHairColors":
                    errorMask?.PushIndex((int)Race_FieldIndex.DefaultHairColors);
                    try
                    {
                        item.DefaultHairColors = new GenderedItem<IFormLink<ColorRecord>>(
                            male: new FormLink<ColorRecord>(FormKeyXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask)),
                            female: new FormLink<ColorRecord>(FormKeyXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask)));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NumberOfTintsInList":
                    errorMask?.PushIndex((int)Race_FieldIndex.NumberOfTintsInList);
                    try
                    {
                        item.NumberOfTintsInList = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FacegenMainClamp":
                    errorMask?.PushIndex((int)Race_FieldIndex.FacegenMainClamp);
                    try
                    {
                        item.FacegenMainClamp = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FacegenFaceClamp":
                    errorMask?.PushIndex((int)Race_FieldIndex.FacegenFaceClamp);
                    try
                    {
                        item.FacegenFaceClamp = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackRace":
                    errorMask?.PushIndex((int)Race_FieldIndex.AttackRace);
                    try
                    {
                        item.AttackRace = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Attacks":
                    errorMask?.PushIndex((int)Race_FieldIndex.Attacks);
                    try
                    {
                        if (ListXmlTranslation<Attack>.Instance.Parse(
                            node: node,
                            enumer: out var AttacksItem,
                            transl: LoquiXmlTranslation<Attack>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Attacks.SetTo(AttacksItem);
                        }
                        else
                        {
                            item.Attacks.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BodyData":
                    errorMask?.PushIndex((int)Race_FieldIndex.BodyData);
                    try
                    {
                        item.BodyData = new GenderedItem<BodyData?>(
                            male: LoquiXmlTranslation<BodyData>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: null),
                            female: LoquiXmlTranslation<BodyData>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: null));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hairs":
                    errorMask?.PushIndex((int)Race_FieldIndex.Hairs);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Hair>>.Instance.Parse(
                            node: node,
                            enumer: out var HairsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Hairs = HairsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Hairs = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eyes":
                    errorMask?.PushIndex((int)Race_FieldIndex.Eyes);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Eyes>>.Instance.Parse(
                            node: node,
                            enumer: out var EyesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Eyes = EyesItem.ToExtendedList();
                        }
                        else
                        {
                            item.Eyes = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BodyPartData":
                    errorMask?.PushIndex((int)Race_FieldIndex.BodyPartData);
                    try
                    {
                        item.BodyPartData = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BehaviorGraph":
                    errorMask?.PushIndex((int)Race_FieldIndex.BehaviorGraph);
                    try
                    {
                        item.BehaviorGraph = new GenderedItem<Model?>(
                            male: LoquiXmlTranslation<Model>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: null),
                            female: LoquiXmlTranslation<Model>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: null));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaterialType":
                    errorMask?.PushIndex((int)Race_FieldIndex.MaterialType);
                    try
                    {
                        item.MaterialType = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ImpactDataSet":
                    errorMask?.PushIndex((int)Race_FieldIndex.ImpactDataSet);
                    try
                    {
                        item.ImpactDataSet = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DecapitationFX":
                    errorMask?.PushIndex((int)Race_FieldIndex.DecapitationFX);
                    try
                    {
                        item.DecapitationFX = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OpenLootSound":
                    errorMask?.PushIndex((int)Race_FieldIndex.OpenLootSound);
                    try
                    {
                        item.OpenLootSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CloseLootSound":
                    errorMask?.PushIndex((int)Race_FieldIndex.CloseLootSound);
                    try
                    {
                        item.CloseLootSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BipedObjectNames":
                    DictXmlTranslation<BipedObject, String>.Instance.ParseInto(
                        node: node,
                        item: item.BipedObjectNames,
                        fieldIndex: (int)Race_FieldIndex.BipedObjectNames,
                        errorMask: errorMask,
                        translationMask: translationMask,
                        keyTransl: EnumXmlTranslation<BipedObject>.Instance.Parse,
                        valTransl: StringXmlTranslation.Instance.Parse);
                    break;
                case "MovementTypes":
                    errorMask?.PushIndex((int)Race_FieldIndex.MovementTypes);
                    try
                    {
                        if (ListXmlTranslation<RaceMovementType>.Instance.Parse(
                            node: node,
                            enumer: out var MovementTypesItem,
                            transl: LoquiXmlTranslation<RaceMovementType>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.MovementTypes.SetTo(MovementTypesItem);
                        }
                        else
                        {
                            item.MovementTypes.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EquipmentFlags":
                    errorMask?.PushIndex((int)Race_FieldIndex.EquipmentFlags);
                    try
                    {
                        item.EquipmentFlags = EnumXmlTranslation<EquipTypeFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EquipmentSlots":
                    errorMask?.PushIndex((int)Race_FieldIndex.EquipmentSlots);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<EquipType>>.Instance.Parse(
                            node: node,
                            enumer: out var EquipmentSlotsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.EquipmentSlots = EquipmentSlotsItem.ToExtendedList();
                        }
                        else
                        {
                            item.EquipmentSlots = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnarmedEquipSlot":
                    errorMask?.PushIndex((int)Race_FieldIndex.UnarmedEquipSlot);
                    try
                    {
                        item.UnarmedEquipSlot = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceFxPhonemes":
                    errorMask?.PushIndex((int)Race_FieldIndex.FaceFxPhonemes);
                    try
                    {
                        item.FaceFxPhonemes = LoquiXmlTranslation<FaceFxPhonemes>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Race_FieldIndex.FaceFxPhonemes));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BaseMovementDefaultWalk":
                    errorMask?.PushIndex((int)Race_FieldIndex.BaseMovementDefaultWalk);
                    try
                    {
                        item.BaseMovementDefaultWalk = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BaseMovementDefaultRun":
                    errorMask?.PushIndex((int)Race_FieldIndex.BaseMovementDefaultRun);
                    try
                    {
                        item.BaseMovementDefaultRun = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BaseMovementDefaultSwim":
                    errorMask?.PushIndex((int)Race_FieldIndex.BaseMovementDefaultSwim);
                    try
                    {
                        item.BaseMovementDefaultSwim = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BaseMovementDefaultFly":
                    errorMask?.PushIndex((int)Race_FieldIndex.BaseMovementDefaultFly);
                    try
                    {
                        item.BaseMovementDefaultFly = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BaseMovementDefaultSneak":
                    errorMask?.PushIndex((int)Race_FieldIndex.BaseMovementDefaultSneak);
                    try
                    {
                        item.BaseMovementDefaultSneak = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BaseMovementDefaultSprint":
                    errorMask?.PushIndex((int)Race_FieldIndex.BaseMovementDefaultSprint);
                    try
                    {
                        item.BaseMovementDefaultSprint = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HeadData":
                    errorMask?.PushIndex((int)Race_FieldIndex.HeadData);
                    try
                    {
                        item.HeadData = new GenderedItem<HeadData?>(
                            male: LoquiXmlTranslation<HeadData>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: null),
                            female: LoquiXmlTranslation<HeadData>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: null));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class RaceXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRaceGetter item,
            XElement node,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRaceGetter item,
            string path,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceGetter item,
            Stream stream,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RaceBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RaceBinaryWriteTranslation Instance = new RaceBinaryWriteTranslation();

        static partial void WriteBinaryExtraNAM2Custom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryExtraNAM2(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryExtraNAM2Custom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryBipedObjectNamesCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryBipedObjectNames(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryBipedObjectNamesCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryFaceFxPhonemesListingParsingCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryFaceFxPhonemesListingParsing(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryFaceFxPhonemesListingParsingCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryFaceFxPhonemesRawParsingCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryFaceFxPhonemesRawParsing(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryFaceFxPhonemesRawParsingCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IRaceGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            RaceBinaryWriteTranslation.WriteBinaryExtraNAM2(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IRaceGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.DESC_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IASpellGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.ActorEffect,
                counterType: Race_Registration.SPCT_HEADER,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(Race_Registration.SPLO_HEADER),
                subRecordPerItem: true,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IASpellGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Skin,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.WNAM_HEADER));
            if (item.BodyTemplate.TryGet(out var BodyTemplateItem))
            {
                ((BodyTemplateBinaryWriteTranslation)((IBinaryItem)BodyTemplateItem).BinaryWriteTranslator).Write(
                    item: BodyTemplateItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: Race_Registration.KSIZ_HEADER,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(Race_Registration.KWDA_HEADER),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            var DataItem = item.Data;
            ((RaceDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                item: DataItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.SkeletalModel,
                maleMarker: Race_Registration.MNAM_HEADER,
                femaleMarker: Race_Registration.FNAM_HEADER,
                markerWrap: false,
                transl: (MutagenWriter subWriter, ISimpleModelGetter? subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((SimpleModelBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            recordTypeConverter: Race_Registration.SkeletalModelConverter);
                    }
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.MovementTypeNames,
                transl: (MutagenWriter subWriter, String subItem) =>
                {
                    Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(Race_Registration.MTNM_HEADER),
                        binaryType: StringBinaryType.Plain);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.Voices,
                recordType: Race_Registration.VTCK_HEADER,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IVoiceTypeGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.DecapitateArmors,
                recordType: Race_Registration.DNAM_HEADER,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IArmorGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.DefaultHairColors,
                recordType: Race_Registration.HCLF_HEADER,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IColorRecordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NumberOfTintsInList,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.TINL_HEADER));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FacegenMainClamp,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.PNAM_HEADER));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FacegenFaceClamp,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.UNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttackRace,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.ATKR_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IAttackGetter>.Instance.Write(
                writer: writer,
                items: item.Attacks,
                transl: (MutagenWriter subWriter, IAttackGetter subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((AttackBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            recordTypeConverter: conv);
                    }
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.BodyData,
                markerType: Race_Registration.NAM1_HEADER,
                maleMarker: Race_Registration.MNAM_HEADER,
                femaleMarker: Race_Registration.FNAM_HEADER,
                markerWrap: false,
                transl: (MutagenWriter subWriter, IBodyDataGetter? subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((BodyDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            recordTypeConverter: conv);
                    }
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IHairGetter>>.Instance.Write(
                writer: writer,
                items: item.Hairs,
                recordType: recordTypeConverter.ConvertToCustom(Race_Registration.HNAM_HEADER),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IHairGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IEyesGetter>>.Instance.Write(
                writer: writer,
                items: item.Eyes,
                recordType: recordTypeConverter.ConvertToCustom(Race_Registration.ENAM_HEADER),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IEyesGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BodyPartData,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.GNAM_HEADER));
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.BehaviorGraph,
                markerType: Race_Registration.NAM3_HEADER,
                maleMarker: Race_Registration.MNAM_HEADER,
                femaleMarker: Race_Registration.FNAM_HEADER,
                markerWrap: false,
                transl: (MutagenWriter subWriter, IModelGetter? subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((ModelBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            recordTypeConverter: conv);
                    }
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaterialType,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.NAM4_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ImpactDataSet,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.NAM5_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DecapitationFX,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.NAM7_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.OpenLootSound,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.ONAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CloseLootSound,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.LNAM_HEADER));
            RaceBinaryWriteTranslation.WriteBinaryBipedObjectNames(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRaceMovementTypeGetter>.Instance.Write(
                writer: writer,
                items: item.MovementTypes,
                transl: (MutagenWriter subWriter, IRaceMovementTypeGetter subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((RaceMovementTypeBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            recordTypeConverter: conv);
                    }
                });
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<EquipTypeFlag>.Instance.WriteNullable(
                writer,
                item.EquipmentFlags,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.VNAM_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IEquipTypeGetter>>.Instance.Write(
                writer: writer,
                items: item.EquipmentSlots,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IEquipTypeGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(Race_Registration.QNAM_HEADER));
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UnarmedEquipSlot,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.UNES_HEADER));
            RaceBinaryWriteTranslation.WriteBinaryFaceFxPhonemesListingParsing(
                writer: writer,
                item: item);
            RaceBinaryWriteTranslation.WriteBinaryFaceFxPhonemesRawParsing(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultWalk,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.WKMV_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultRun,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.RNMV_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultSwim,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.SWMV_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultFly,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.FLMV_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultSneak,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.SNMV_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultSprint,
                header: recordTypeConverter.ConvertToCustom(Race_Registration.SPMV_HEADER));
            GenderedItemBinaryTranslation.WriteMarkerPerItem(
                writer: writer,
                item: item.HeadData,
                markerType: Race_Registration.NAM0_HEADER,
                maleMarker: Race_Registration.MNAM_HEADER,
                femaleMarker: Race_Registration.FNAM_HEADER,
                markerWrap: false,
                femaleRecordConverter: Race_Registration.HeadDataFemaleConverter,
                transl: (MutagenWriter subWriter, IHeadDataGetter? subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((HeadDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            recordTypeConverter: conv);
                    }
                });
        }

        public void Write(
            MutagenWriter writer,
            IRaceGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(Race_Registration.RACE_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RaceBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static RaceBinaryCreateTranslation Instance = new RaceBinaryCreateTranslation();

        static partial void FillBinaryExtraNAM2Custom(
            MutagenFrame frame,
            IRaceInternal item);

        public static void FillBinaryExtraNAM2CustomPublic(
            MutagenFrame frame,
            IRaceInternal item)
        {
            FillBinaryExtraNAM2Custom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryBipedObjectNamesCustom(
            MutagenFrame frame,
            IRaceInternal item);

        public static void FillBinaryBipedObjectNamesCustomPublic(
            MutagenFrame frame,
            IRaceInternal item)
        {
            FillBinaryBipedObjectNamesCustom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryFaceFxPhonemesListingParsingCustom(
            MutagenFrame frame,
            IRaceInternal item);

        public static void FillBinaryFaceFxPhonemesListingParsingCustomPublic(
            MutagenFrame frame,
            IRaceInternal item)
        {
            FillBinaryFaceFxPhonemesListingParsingCustom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryFaceFxPhonemesRawParsingCustom(
            MutagenFrame frame,
            IRaceInternal item);

        public static void FillBinaryFaceFxPhonemesRawParsingCustomPublic(
            MutagenFrame frame,
            IRaceInternal item)
        {
            FillBinaryFaceFxPhonemesRawParsingCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class RaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RaceBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IRaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static Race_Registration Registration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => RaceCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => RaceCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => RaceXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RaceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Race.MajorFlag MajorFlags => (Race.MajorFlag)this.MajorRecordFlagsRaw;

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.Meta)) : string.Empty;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IASpellGetter>>? ActorEffect { get; private set; }
        #region Skin
        private int? _SkinLocation;
        public bool Skin_IsSet => _SkinLocation.HasValue;
        public IFormLinkNullableGetter<IArmorGetter> Skin => _SkinLocation.HasValue ? new FormLinkNullable<IArmorGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _SkinLocation.Value, _package.Meta)))) : FormLinkNullable<IArmorGetter>.Null;
        #endregion
        #region BodyTemplate
        private RangeInt32? _BodyTemplateLocation;
        public IBodyTemplateGetter? BodyTemplate => _BodyTemplateLocation.HasValue ? BodyTemplateBinaryOverlay.BodyTemplateFactory(new BinaryMemoryReadStream(_data.Slice(_BodyTemplateLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool BodyTemplate_IsSet => _BodyTemplateLocation.HasValue;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        #region Data
        private RangeInt32? _DataLocation;
        public IRaceDataGetter? _Data => _DataLocation.HasValue ? RaceDataBinaryOverlay.RaceDataFactory(new BinaryMemoryReadStream(_data.Slice(_DataLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public IRaceDataGetter Data => _Data ?? new RaceData();
        #endregion
        #region SkeletalModel
        private IGenderedItemGetter<ISimpleModelGetter?>? _SkeletalModelOverlay;
        public IGenderedItemGetter<ISimpleModelGetter?>? SkeletalModel => _SkeletalModelOverlay;
        #endregion
        public IReadOnlyList<String>? MovementTypeNames { get; private set; }
        #region Voices
        private int? _VoicesLocation;
        public IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>> Voices
        {
            get
            {
                if (!_VoicesLocation.HasValue) return new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(new FormLink<IVoiceTypeGetter>(FormKey.Null), new FormLink<IVoiceTypeGetter>(FormKey.Null));
                var data = HeaderTranslation.ExtractSubrecordMemory(_data, _VoicesLocation.Value, _package.Meta);
                return new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(
                    new FormLink<IVoiceTypeGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(data))),
                    new FormLink<IVoiceTypeGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(data.Slice(4)))));
            }
        }
        #endregion
        #region DecapitateArmors
        private int? _DecapitateArmorsLocation;
        public IGenderedItemGetter<IFormLinkGetter<IArmorGetter>>? DecapitateArmors
        {
            get
            {
                if (!_DecapitateArmorsLocation.HasValue) return default;
                var data = HeaderTranslation.ExtractSubrecordMemory(_data, _DecapitateArmorsLocation.Value, _package.Meta);
                return new GenderedItem<IFormLinkGetter<IArmorGetter>>(
                    new FormLink<IArmorGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(data))),
                    new FormLink<IArmorGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(data.Slice(4)))));
            }
        }
        #endregion
        #region DefaultHairColors
        private int? _DefaultHairColorsLocation;
        public IGenderedItemGetter<IFormLinkGetter<IColorRecordGetter>>? DefaultHairColors
        {
            get
            {
                if (!_DefaultHairColorsLocation.HasValue) return default;
                var data = HeaderTranslation.ExtractSubrecordMemory(_data, _DefaultHairColorsLocation.Value, _package.Meta);
                return new GenderedItem<IFormLinkGetter<IColorRecordGetter>>(
                    new FormLink<IColorRecordGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(data))),
                    new FormLink<IColorRecordGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(data.Slice(4)))));
            }
        }
        #endregion
        #region NumberOfTintsInList
        private int? _NumberOfTintsInListLocation;
        public UInt16? NumberOfTintsInList => _NumberOfTintsInListLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _NumberOfTintsInListLocation.Value, _package.Meta)) : default(UInt16?);
        #endregion
        #region FacegenMainClamp
        private int? _FacegenMainClampLocation;
        public Single FacegenMainClamp => _FacegenMainClampLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _FacegenMainClampLocation.Value, _package.Meta)) : default;
        #endregion
        #region FacegenFaceClamp
        private int? _FacegenFaceClampLocation;
        public Single FacegenFaceClamp => _FacegenFaceClampLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _FacegenFaceClampLocation.Value, _package.Meta)) : default;
        #endregion
        #region AttackRace
        private int? _AttackRaceLocation;
        public bool AttackRace_IsSet => _AttackRaceLocation.HasValue;
        public IFormLinkNullableGetter<IRaceGetter> AttackRace => _AttackRaceLocation.HasValue ? new FormLinkNullable<IRaceGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _AttackRaceLocation.Value, _package.Meta)))) : FormLinkNullable<IRaceGetter>.Null;
        #endregion
        public IReadOnlyList<IAttackGetter> Attacks { get; private set; } = ListExt.Empty<AttackBinaryOverlay>();
        #region BodyData
        private IGenderedItemGetter<IBodyDataGetter?>? _BodyDataOverlay;
        public IGenderedItemGetter<IBodyDataGetter?> BodyData => _BodyDataOverlay ?? new GenderedItem<IBodyDataGetter?>(default, default);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IHairGetter>>? Hairs { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IEyesGetter>>? Eyes { get; private set; }
        #region BodyPartData
        private int? _BodyPartDataLocation;
        public bool BodyPartData_IsSet => _BodyPartDataLocation.HasValue;
        public IFormLinkNullableGetter<IBodyPartDataGetter> BodyPartData => _BodyPartDataLocation.HasValue ? new FormLinkNullable<IBodyPartDataGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _BodyPartDataLocation.Value, _package.Meta)))) : FormLinkNullable<IBodyPartDataGetter>.Null;
        #endregion
        #region ExtraNAM2
        partial void ExtraNAM2CustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region BehaviorGraph
        private IGenderedItemGetter<IModelGetter?>? _BehaviorGraphOverlay;
        public IGenderedItemGetter<IModelGetter?> BehaviorGraph => _BehaviorGraphOverlay ?? new GenderedItem<IModelGetter?>(default, default);
        #endregion
        #region MaterialType
        private int? _MaterialTypeLocation;
        public bool MaterialType_IsSet => _MaterialTypeLocation.HasValue;
        public IFormLinkNullableGetter<IMaterialTypeGetter> MaterialType => _MaterialTypeLocation.HasValue ? new FormLinkNullable<IMaterialTypeGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _MaterialTypeLocation.Value, _package.Meta)))) : FormLinkNullable<IMaterialTypeGetter>.Null;
        #endregion
        #region ImpactDataSet
        private int? _ImpactDataSetLocation;
        public bool ImpactDataSet_IsSet => _ImpactDataSetLocation.HasValue;
        public IFormLinkNullableGetter<IImpactDataSetGetter> ImpactDataSet => _ImpactDataSetLocation.HasValue ? new FormLinkNullable<IImpactDataSetGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ImpactDataSetLocation.Value, _package.Meta)))) : FormLinkNullable<IImpactDataSetGetter>.Null;
        #endregion
        #region DecapitationFX
        private int? _DecapitationFXLocation;
        public bool DecapitationFX_IsSet => _DecapitationFXLocation.HasValue;
        public IFormLinkNullableGetter<IArtObjectGetter> DecapitationFX => _DecapitationFXLocation.HasValue ? new FormLinkNullable<IArtObjectGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _DecapitationFXLocation.Value, _package.Meta)))) : FormLinkNullable<IArtObjectGetter>.Null;
        #endregion
        #region OpenLootSound
        private int? _OpenLootSoundLocation;
        public bool OpenLootSound_IsSet => _OpenLootSoundLocation.HasValue;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> OpenLootSound => _OpenLootSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _OpenLootSoundLocation.Value, _package.Meta)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region CloseLootSound
        private int? _CloseLootSoundLocation;
        public bool CloseLootSound_IsSet => _CloseLootSoundLocation.HasValue;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> CloseLootSound => _CloseLootSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _CloseLootSoundLocation.Value, _package.Meta)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        public IReadOnlyList<IRaceMovementTypeGetter> MovementTypes { get; private set; } = ListExt.Empty<RaceMovementTypeBinaryOverlay>();
        #region EquipmentFlags
        private int? _EquipmentFlagsLocation;
        public EquipTypeFlag? EquipmentFlags => _EquipmentFlagsLocation.HasValue ? (EquipTypeFlag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EquipmentFlagsLocation!.Value, _package.Meta)) : default(EquipTypeFlag?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IEquipTypeGetter>>? EquipmentSlots { get; private set; }
        #region UnarmedEquipSlot
        private int? _UnarmedEquipSlotLocation;
        public bool UnarmedEquipSlot_IsSet => _UnarmedEquipSlotLocation.HasValue;
        public IFormLinkNullableGetter<IEquipTypeGetter> UnarmedEquipSlot => _UnarmedEquipSlotLocation.HasValue ? new FormLinkNullable<IEquipTypeGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _UnarmedEquipSlotLocation.Value, _package.Meta)))) : FormLinkNullable<IEquipTypeGetter>.Null;
        #endregion
        #region FaceFxPhonemesListingParsing
        partial void FaceFxPhonemesListingParsingCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region FaceFxPhonemesRawParsing
        partial void FaceFxPhonemesRawParsingCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region BaseMovementDefaultWalk
        private int? _BaseMovementDefaultWalkLocation;
        public bool BaseMovementDefaultWalk_IsSet => _BaseMovementDefaultWalkLocation.HasValue;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultWalk => _BaseMovementDefaultWalkLocation.HasValue ? new FormLinkNullable<IMovementTypeGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _BaseMovementDefaultWalkLocation.Value, _package.Meta)))) : FormLinkNullable<IMovementTypeGetter>.Null;
        #endregion
        #region BaseMovementDefaultRun
        private int? _BaseMovementDefaultRunLocation;
        public bool BaseMovementDefaultRun_IsSet => _BaseMovementDefaultRunLocation.HasValue;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultRun => _BaseMovementDefaultRunLocation.HasValue ? new FormLinkNullable<IMovementTypeGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _BaseMovementDefaultRunLocation.Value, _package.Meta)))) : FormLinkNullable<IMovementTypeGetter>.Null;
        #endregion
        #region BaseMovementDefaultSwim
        private int? _BaseMovementDefaultSwimLocation;
        public bool BaseMovementDefaultSwim_IsSet => _BaseMovementDefaultSwimLocation.HasValue;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSwim => _BaseMovementDefaultSwimLocation.HasValue ? new FormLinkNullable<IMovementTypeGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _BaseMovementDefaultSwimLocation.Value, _package.Meta)))) : FormLinkNullable<IMovementTypeGetter>.Null;
        #endregion
        #region BaseMovementDefaultFly
        private int? _BaseMovementDefaultFlyLocation;
        public bool BaseMovementDefaultFly_IsSet => _BaseMovementDefaultFlyLocation.HasValue;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultFly => _BaseMovementDefaultFlyLocation.HasValue ? new FormLinkNullable<IMovementTypeGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _BaseMovementDefaultFlyLocation.Value, _package.Meta)))) : FormLinkNullable<IMovementTypeGetter>.Null;
        #endregion
        #region BaseMovementDefaultSneak
        private int? _BaseMovementDefaultSneakLocation;
        public bool BaseMovementDefaultSneak_IsSet => _BaseMovementDefaultSneakLocation.HasValue;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSneak => _BaseMovementDefaultSneakLocation.HasValue ? new FormLinkNullable<IMovementTypeGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _BaseMovementDefaultSneakLocation.Value, _package.Meta)))) : FormLinkNullable<IMovementTypeGetter>.Null;
        #endregion
        #region BaseMovementDefaultSprint
        private int? _BaseMovementDefaultSprintLocation;
        public bool BaseMovementDefaultSprint_IsSet => _BaseMovementDefaultSprintLocation.HasValue;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSprint => _BaseMovementDefaultSprintLocation.HasValue ? new FormLinkNullable<IMovementTypeGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _BaseMovementDefaultSprintLocation.Value, _package.Meta)))) : FormLinkNullable<IMovementTypeGetter>.Null;
        #endregion
        #region HeadData
        private IGenderedItemGetter<IHeadDataGetter?>? _HeadDataOverlay;
        public IGenderedItemGetter<IHeadDataGetter?>? HeadData => _HeadDataOverlay;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RaceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RaceBinaryOverlay RaceFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new RaceBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static RaceBinaryOverlay RaceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return RaceFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Description);
                }
                case 0x54435053: // SPCT
                {
                    var count = BinaryPrimitives.ReadUInt32LittleEndian(_package.Meta.ReadSubrecordFrame(stream).Content);
                    var subLen = checked((int)((4 + _package.Meta.SubConstants.HeaderLength) * count));
                    this.ActorEffect = BinaryOverlaySetList<IFormLinkGetter<IASpellGetter>>.FactoryByCount(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 0x4,
                        subrecordType: Race_Registration.SPLO_HEADER,
                        count: count,
                        getter: (s, p) => new FormLink<IASpellGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.ActorEffect);
                }
                case 0x4D414E57: // WNAM
                {
                    _SkinLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Skin);
                }
                case 0x54444F42: // BODT
                {
                    _BodyTemplateLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyTemplate);
                }
                case 0x5A49534B: // KSIZ
                {
                    var count = BinaryPrimitives.ReadUInt32LittleEndian(_package.Meta.ReadSubrecordFrame(stream).Content);
                    var subMeta = _package.Meta.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Keywords = BinaryOverlaySetList<IFormLinkGetter<IKeywordGetter>>.FactoryByCount(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 0x4,
                        count: count,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Keywords);
                }
                case 0x41544144: // DATA
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Data);
                }
                case 0x4D414E4D: // MNAM
                case 0x4D414E46: // FNAM
                {
                    _SkeletalModelOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<ISimpleModelGetter>(
                        package: _package,
                        male: Race_Registration.MNAM_HEADER,
                        female: Race_Registration.FNAM_HEADER,
                        stream: stream,
                        creator: (s, p, r) => SimpleModelBinaryOverlay.SimpleModelFactory(s, p, r),
                        recordTypeConverter: Race_Registration.SkeletalModelConverter);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.SkeletalModel);
                }
                case 0x4D4E544D: // MTNM
                {
                    this.MovementTypeNames = BinaryOverlaySetList<String>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ProcessWholeToZString(p.Meta.SubrecordFrame(s).Content),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: false,
                            recordTypeConverter: recordTypeConverter));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.MovementTypeNames);
                }
                case 0x4B435456: // VTCK
                {
                    _VoicesLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Voices);
                }
                case 0x4D414E44: // DNAM
                {
                    _DecapitateArmorsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DecapitateArmors);
                }
                case 0x464C4348: // HCLF
                {
                    _DefaultHairColorsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DefaultHairColors);
                }
                case 0x4C4E4954: // TINL
                {
                    _NumberOfTintsInListLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.NumberOfTintsInList);
                }
                case 0x4D414E50: // PNAM
                {
                    _FacegenMainClampLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FacegenMainClamp);
                }
                case 0x4D414E55: // UNAM
                {
                    _FacegenFaceClampLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.FacegenFaceClamp);
                }
                case 0x524B5441: // ATKR
                {
                    _AttackRaceLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.AttackRace);
                }
                case 0x444B5441: // ATKD
                case 0x454B5441: // ATKE
                {
                    this.Attacks = this.ParseRepeatedTypelessSubrecord<AttackBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: Attack_Registration.TriggeringRecordTypes,
                        factory:  AttackBinaryOverlay.AttackFactory);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Attacks);
                }
                case 0x314D414E: // NAM1
                {
                    stream.Position += _package.Meta.SubConstants.HeaderLength; // Skip marker
                    _BodyDataOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IBodyDataGetter>(
                        package: _package,
                        male: Race_Registration.MNAM_HEADER,
                        female: Race_Registration.FNAM_HEADER,
                        stream: stream,
                        creator: (s, p, r) => BodyDataBinaryOverlay.BodyDataFactory(s, p, r),
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyData);
                }
                case 0x4D414E48: // HNAM
                {
                    var subMeta = _package.Meta.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Hairs = BinaryOverlaySetList<IFormLinkGetter<IHairGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IHairGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Hairs);
                }
                case 0x4D414E45: // ENAM
                {
                    var subMeta = _package.Meta.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Eyes = BinaryOverlaySetList<IFormLinkGetter<IEyesGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IEyesGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.Eyes);
                }
                case 0x4D414E47: // GNAM
                {
                    _BodyPartDataLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BodyPartData);
                }
                case 0x334D414E: // NAM3
                {
                    stream.Position += _package.Meta.SubConstants.HeaderLength; // Skip marker
                    _BehaviorGraphOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IModelGetter>(
                        package: _package,
                        male: Race_Registration.MNAM_HEADER,
                        female: Race_Registration.FNAM_HEADER,
                        stream: stream,
                        creator: (s, p, r) => ModelBinaryOverlay.ModelFactory(s, p, r),
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BehaviorGraph);
                }
                case 0x344D414E: // NAM4
                {
                    _MaterialTypeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.MaterialType);
                }
                case 0x354D414E: // NAM5
                {
                    _ImpactDataSetLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.ImpactDataSet);
                }
                case 0x374D414E: // NAM7
                {
                    _DecapitationFXLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.DecapitationFX);
                }
                case 0x4D414E4F: // ONAM
                {
                    _OpenLootSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.OpenLootSound);
                }
                case 0x4D414E4C: // LNAM
                {
                    _CloseLootSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.CloseLootSound);
                }
                case 0x454D414E: // NAME
                {
                    BipedObjectNamesCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BipedObjectNames);
                }
                case 0x5059544D: // MTYP
                case 0x44455053: // SPED
                {
                    this.MovementTypes = this.ParseRepeatedTypelessSubrecord<RaceMovementTypeBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: RaceMovementType_Registration.TriggeringRecordTypes,
                        factory:  RaceMovementTypeBinaryOverlay.RaceMovementTypeFactory);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.MovementTypes);
                }
                case 0x4D414E56: // VNAM
                {
                    _EquipmentFlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.EquipmentFlags);
                }
                case 0x4D414E51: // QNAM
                {
                    this.EquipmentSlots = BinaryOverlaySetList<IFormLinkGetter<IEquipTypeGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IEquipTypeGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.EquipmentSlots);
                }
                case 0x53454E55: // UNES
                {
                    _UnarmedEquipSlotLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.UnarmedEquipSlot);
                }
                case 0x4E544850: // PHTN
                {
                    FaceFxPhonemesListingParsingCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(null);
                }
                case 0x54574850: // PHWT
                {
                    FaceFxPhonemesRawParsingCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(null);
                }
                case 0x564D4B57: // WKMV
                {
                    _BaseMovementDefaultWalkLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BaseMovementDefaultWalk);
                }
                case 0x564D4E52: // RNMV
                {
                    _BaseMovementDefaultRunLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BaseMovementDefaultRun);
                }
                case 0x564D5753: // SWMV
                {
                    _BaseMovementDefaultSwimLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BaseMovementDefaultSwim);
                }
                case 0x564D4C46: // FLMV
                {
                    _BaseMovementDefaultFlyLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BaseMovementDefaultFly);
                }
                case 0x564D4E53: // SNMV
                {
                    _BaseMovementDefaultSneakLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BaseMovementDefaultSneak);
                }
                case 0x564D5053: // SPMV
                {
                    _BaseMovementDefaultSprintLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.BaseMovementDefaultSprint);
                }
                case 0x304D414E: // NAM0
                {
                    _HeadDataOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IHeadDataGetter>(
                        package: _package,
                        male: Race_Registration.MNAM_HEADER,
                        female: Race_Registration.FNAM_HEADER,
                        marker: Race_Registration.NAM0_HEADER,
                        stream: stream,
                        creator: (s, p, r) => HeadDataBinaryOverlay.HeadDataFactory(s, p, r),
                        femaleRecordConverter: Race_Registration.HeadDataFemaleConverter);
                    return TryGet<int?>.Succeed((int)Race_FieldIndex.HeadData);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

