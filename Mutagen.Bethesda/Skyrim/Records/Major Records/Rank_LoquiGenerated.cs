/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Rank :
        IRank,
        ILoquiObjectSetter<Rank>,
        IEquatable<Rank>,
        IEqualsMask
    {
        #region Ctor
        public Rank()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region RankNumber
        public UInt32? RankNumber { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IRankGetter.RankNumber => this.RankNumber;
        #endregion
        #region MaleRankTitle
        public String? MaleRankTitle { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRankGetter.MaleRankTitle => this.MaleRankTitle;
        #endregion
        #region FemaleRankTitle
        public String? FemaleRankTitle { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRankGetter.FemaleRankTitle => this.FemaleRankTitle;
        #endregion
        #region Insignia
        public String? Insignia { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRankGetter.Insignia => this.Insignia;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RankMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRankGetter rhs)) return false;
            return ((RankCommon)((IRankGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Rank obj)
        {
            return ((RankCommon)((IRankGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RankCommon)((IRankGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => RankXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RankXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Rank CreateFromXml(
            XElement node,
            Rank.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Rank CreateFromXml(
            XElement node,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Rank.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Rank CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Rank();
            ((RankSetterCommon)((IRankGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Rank CreateFromXml(
            string path,
            Rank.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Rank CreateFromXml(
            string path,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Rank CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Rank.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Rank CreateFromXml(
            Stream stream,
            Rank.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Rank CreateFromXml(
            Stream stream,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Rank CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Rank.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.RankNumber = initialValue;
                this.MaleRankTitle = initialValue;
                this.FemaleRankTitle = initialValue;
                this.Insignia = initialValue;
            }

            public Mask(
                TItem RankNumber,
                TItem MaleRankTitle,
                TItem FemaleRankTitle,
                TItem Insignia)
            {
                this.RankNumber = RankNumber;
                this.MaleRankTitle = MaleRankTitle;
                this.FemaleRankTitle = FemaleRankTitle;
                this.Insignia = Insignia;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem RankNumber;
            public TItem MaleRankTitle;
            public TItem FemaleRankTitle;
            public TItem Insignia;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.RankNumber, rhs.RankNumber)) return false;
                if (!object.Equals(this.MaleRankTitle, rhs.MaleRankTitle)) return false;
                if (!object.Equals(this.FemaleRankTitle, rhs.FemaleRankTitle)) return false;
                if (!object.Equals(this.Insignia, rhs.Insignia)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.RankNumber);
                hash.Add(this.MaleRankTitle);
                hash.Add(this.FemaleRankTitle);
                hash.Add(this.Insignia);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.RankNumber)) return false;
                if (!eval(this.MaleRankTitle)) return false;
                if (!eval(this.FemaleRankTitle)) return false;
                if (!eval(this.Insignia)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.RankNumber)) return true;
                if (eval(this.MaleRankTitle)) return true;
                if (eval(this.FemaleRankTitle)) return true;
                if (eval(this.Insignia)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Rank.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.RankNumber = eval(this.RankNumber);
                obj.MaleRankTitle = eval(this.MaleRankTitle);
                obj.FemaleRankTitle = eval(this.FemaleRankTitle);
                obj.Insignia = eval(this.Insignia);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Rank.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Rank.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Rank.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.RankNumber ?? true)
                    {
                        fg.AppendItem(RankNumber, "RankNumber");
                    }
                    if (printMask?.MaleRankTitle ?? true)
                    {
                        fg.AppendItem(MaleRankTitle, "MaleRankTitle");
                    }
                    if (printMask?.FemaleRankTitle ?? true)
                    {
                        fg.AppendItem(FemaleRankTitle, "FemaleRankTitle");
                    }
                    if (printMask?.Insignia ?? true)
                    {
                        fg.AppendItem(Insignia, "Insignia");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? RankNumber;
            public Exception? MaleRankTitle;
            public Exception? FemaleRankTitle;
            public Exception? Insignia;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Rank_FieldIndex enu = (Rank_FieldIndex)index;
                switch (enu)
                {
                    case Rank_FieldIndex.RankNumber:
                        return RankNumber;
                    case Rank_FieldIndex.MaleRankTitle:
                        return MaleRankTitle;
                    case Rank_FieldIndex.FemaleRankTitle:
                        return FemaleRankTitle;
                    case Rank_FieldIndex.Insignia:
                        return Insignia;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Rank_FieldIndex enu = (Rank_FieldIndex)index;
                switch (enu)
                {
                    case Rank_FieldIndex.RankNumber:
                        this.RankNumber = ex;
                        break;
                    case Rank_FieldIndex.MaleRankTitle:
                        this.MaleRankTitle = ex;
                        break;
                    case Rank_FieldIndex.FemaleRankTitle:
                        this.FemaleRankTitle = ex;
                        break;
                    case Rank_FieldIndex.Insignia:
                        this.Insignia = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Rank_FieldIndex enu = (Rank_FieldIndex)index;
                switch (enu)
                {
                    case Rank_FieldIndex.RankNumber:
                        this.RankNumber = (Exception?)obj;
                        break;
                    case Rank_FieldIndex.MaleRankTitle:
                        this.MaleRankTitle = (Exception?)obj;
                        break;
                    case Rank_FieldIndex.FemaleRankTitle:
                        this.FemaleRankTitle = (Exception?)obj;
                        break;
                    case Rank_FieldIndex.Insignia:
                        this.Insignia = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (RankNumber != null) return true;
                if (MaleRankTitle != null) return true;
                if (FemaleRankTitle != null) return true;
                if (Insignia != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(RankNumber, "RankNumber");
                fg.AppendItem(MaleRankTitle, "MaleRankTitle");
                fg.AppendItem(FemaleRankTitle, "FemaleRankTitle");
                fg.AppendItem(Insignia, "Insignia");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.RankNumber = this.RankNumber.Combine(rhs.RankNumber);
                ret.MaleRankTitle = this.MaleRankTitle.Combine(rhs.MaleRankTitle);
                ret.FemaleRankTitle = this.FemaleRankTitle.Combine(rhs.FemaleRankTitle);
                ret.Insignia = this.Insignia.Combine(rhs.Insignia);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool RankNumber;
            public bool MaleRankTitle;
            public bool FemaleRankTitle;
            public bool Insignia;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.RankNumber = defaultOn;
                this.MaleRankTitle = defaultOn;
                this.FemaleRankTitle = defaultOn;
                this.Insignia = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((RankNumber, null));
                ret.Add((MaleRankTitle, null));
                ret.Add((FemaleRankTitle, null));
                ret.Add((Insignia, null));
            }
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RankBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RankBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Rank CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static Rank CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Rank();
            ((RankSetterCommon)((IRankGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRankGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RankSetterCommon)((IRankGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Rank GetNew()
        {
            return new Rank();
        }

    }
    #endregion

    #region Interface
    public partial interface IRank :
        IRankGetter,
        ILoquiObjectSetter<IRank>
    {
        new UInt32? RankNumber { get; set; }
        new String? MaleRankTitle { get; set; }
        new String? FemaleRankTitle { get; set; }
        new String? Insignia { get; set; }
    }

    public partial interface IRankGetter :
        ILoquiObject,
        ILoquiObject<IRankGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => Rank_Registration.Instance;
        UInt32? RankNumber { get; }
        String? MaleRankTitle { get; }
        String? FemaleRankTitle { get; }
        String? Insignia { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RankMixIn
    {
        public static void Clear(this IRank item)
        {
            ((RankSetterCommon)((IRankGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Rank.Mask<bool> GetEqualsMask(
            this IRankGetter item,
            IRankGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRankGetter item,
            string? name = null,
            Rank.Mask<bool>? printMask = null)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRankGetter item,
            FileGeneration fg,
            string? name = null,
            Rank.Mask<bool>? printMask = null)
        {
            ((RankCommon)((IRankGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRankGetter item,
            Rank.Mask<bool?> checkMask)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Rank.Mask<bool> GetHasBeenSetMask(this IRankGetter item)
        {
            var ret = new Rank.Mask<bool>(false);
            ((RankCommon)((IRankGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRankGetter item,
            IRankGetter rhs)
        {
            return ((RankCommon)((IRankGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRank lhs,
            IRankGetter rhs)
        {
            ((RankSetterTranslationCommon)((IRankGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IRank lhs,
            IRankGetter rhs,
            Rank.TranslationMask? copyMask = null)
        {
            ((RankSetterTranslationCommon)((IRankGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRank lhs,
            IRankGetter rhs,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RankSetterTranslationCommon)((IRankGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Rank.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRank lhs,
            IRankGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RankSetterTranslationCommon)((IRankGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Rank DeepCopy(
            this IRankGetter item,
            Rank.TranslationMask? copyMask = null)
        {
            return ((RankSetterTranslationCommon)((IRankGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Rank DeepCopy(
            this IRankGetter item,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? copyMask = null)
        {
            return ((RankSetterTranslationCommon)((IRankGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Rank DeepCopy(
            this IRankGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RankSetterTranslationCommon)((IRankGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRank item,
            XElement node,
            Rank.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRank item,
            XElement node,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Rank.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRank item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((RankSetterCommon)((IRankGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            string path,
            Rank.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            string path,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            string path,
            ErrorMaskBuilder? errorMask,
            Rank.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRank item,
            Stream stream,
            Rank.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            Stream stream,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRank item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Rank.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRank item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRank item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RankSetterCommon)((IRankGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Rank_FieldIndex
    {
        RankNumber = 0,
        MaleRankTitle = 1,
        FemaleRankTitle = 2,
        Insignia = 3,
    }
    #endregion

    #region Registration
    public partial class Rank_Registration : ILoquiRegistration
    {
        public static readonly Rank_Registration Instance = new Rank_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 32,
            version: 0);

        public const string GUID = "168a7e1e-9304-4604-b927-7b61cfa16730";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(Rank.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Rank.ErrorMask);

        public static readonly Type ClassType = typeof(Rank);

        public static readonly Type GetterType = typeof(IRankGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRank);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.Rank";

        public const string Name = "Rank";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "RANKNUMBER":
                    return (ushort)Rank_FieldIndex.RankNumber;
                case "MALERANKTITLE":
                    return (ushort)Rank_FieldIndex.MaleRankTitle;
                case "FEMALERANKTITLE":
                    return (ushort)Rank_FieldIndex.FemaleRankTitle;
                case "INSIGNIA":
                    return (ushort)Rank_FieldIndex.Insignia;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleRankTitle:
                case Rank_FieldIndex.FemaleRankTitle:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleRankTitle:
                case Rank_FieldIndex.FemaleRankTitle:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleRankTitle:
                case Rank_FieldIndex.FemaleRankTitle:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    return "RankNumber";
                case Rank_FieldIndex.MaleRankTitle:
                    return "MaleRankTitle";
                case Rank_FieldIndex.FemaleRankTitle:
                    return "FemaleRankTitle";
                case Rank_FieldIndex.Insignia:
                    return "Insignia";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleRankTitle:
                case Rank_FieldIndex.FemaleRankTitle:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleRankTitle:
                case Rank_FieldIndex.FemaleRankTitle:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    return typeof(UInt32);
                case Rank_FieldIndex.MaleRankTitle:
                    return typeof(String);
                case Rank_FieldIndex.FemaleRankTitle:
                    return typeof(String);
                case Rank_FieldIndex.Insignia:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RankXmlWriteTranslation);
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RNAM_HEADER,
                        MNAM_HEADER,
                        FNAM_HEADER,
                        INAM_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(RankBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RankSetterCommon
    {
        public static readonly RankSetterCommon Instance = new RankSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRank item)
        {
            ClearPartial();
            item.RankNumber = default;
            item.MaleRankTitle = default;
            item.FemaleRankTitle = default;
            item.Insignia = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IRank item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RankXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRank item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: RankBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RankBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class RankCommon
    {
        public static readonly RankCommon Instance = new RankCommon();

        public Rank.Mask<bool> GetEqualsMask(
            IRankGetter item,
            IRankGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Rank.Mask<bool>(false);
            ((RankCommon)((IRankGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRankGetter item,
            IRankGetter rhs,
            Rank.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.RankNumber = item.RankNumber == rhs.RankNumber;
            ret.MaleRankTitle = string.Equals(item.MaleRankTitle, rhs.MaleRankTitle);
            ret.FemaleRankTitle = string.Equals(item.FemaleRankTitle, rhs.FemaleRankTitle);
            ret.Insignia = string.Equals(item.Insignia, rhs.Insignia);
        }
        
        public string ToString(
            IRankGetter item,
            string? name = null,
            Rank.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRankGetter item,
            FileGeneration fg,
            string? name = null,
            Rank.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Rank =>");
            }
            else
            {
                fg.AppendLine($"{name} (Rank) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRankGetter item,
            FileGeneration fg,
            Rank.Mask<bool>? printMask = null)
        {
            if ((printMask?.RankNumber ?? true)
                && item.RankNumber.TryGet(out var RankNumberItem))
            {
                fg.AppendItem(RankNumberItem, "RankNumber");
            }
            if ((printMask?.MaleRankTitle ?? true)
                && item.MaleRankTitle.TryGet(out var MaleRankTitleItem))
            {
                fg.AppendItem(MaleRankTitleItem, "MaleRankTitle");
            }
            if ((printMask?.FemaleRankTitle ?? true)
                && item.FemaleRankTitle.TryGet(out var FemaleRankTitleItem))
            {
                fg.AppendItem(FemaleRankTitleItem, "FemaleRankTitle");
            }
            if ((printMask?.Insignia ?? true)
                && item.Insignia.TryGet(out var InsigniaItem))
            {
                fg.AppendItem(InsigniaItem, "Insignia");
            }
        }
        
        public bool HasBeenSet(
            IRankGetter item,
            Rank.Mask<bool?> checkMask)
        {
            if (checkMask.RankNumber.HasValue && checkMask.RankNumber.Value != (item.RankNumber != null)) return false;
            if (checkMask.MaleRankTitle.HasValue && checkMask.MaleRankTitle.Value != (item.MaleRankTitle != null)) return false;
            if (checkMask.FemaleRankTitle.HasValue && checkMask.FemaleRankTitle.Value != (item.FemaleRankTitle != null)) return false;
            if (checkMask.Insignia.HasValue && checkMask.Insignia.Value != (item.Insignia != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IRankGetter item,
            Rank.Mask<bool> mask)
        {
            mask.RankNumber = (item.RankNumber != null);
            mask.MaleRankTitle = (item.MaleRankTitle != null);
            mask.FemaleRankTitle = (item.FemaleRankTitle != null);
            mask.Insignia = (item.Insignia != null);
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRankGetter? lhs,
            IRankGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.RankNumber != rhs.RankNumber) return false;
            if (!string.Equals(lhs.MaleRankTitle, rhs.MaleRankTitle)) return false;
            if (!string.Equals(lhs.FemaleRankTitle, rhs.FemaleRankTitle)) return false;
            if (!string.Equals(lhs.Insignia, rhs.Insignia)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IRankGetter item)
        {
            var hash = new HashCode();
            if (item.RankNumber.TryGet(out var RankNumberitem))
            {
                hash.Add(RankNumberitem);
            }
            if (item.MaleRankTitle.TryGet(out var MaleRankTitleitem))
            {
                hash.Add(MaleRankTitleitem);
            }
            if (item.FemaleRankTitle.TryGet(out var FemaleRankTitleitem))
            {
                hash.Add(FemaleRankTitleitem);
            }
            if (item.Insignia.TryGet(out var Insigniaitem))
            {
                hash.Add(Insigniaitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Rank.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IRankGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IRankGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class RankSetterTranslationCommon
    {
        public static readonly RankSetterTranslationCommon Instance = new RankSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IRank item,
            IRankGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)Rank_FieldIndex.RankNumber) ?? true))
            {
                item.RankNumber = rhs.RankNumber;
            }
            if ((copyMask?.GetShouldTranslate((int)Rank_FieldIndex.MaleRankTitle) ?? true))
            {
                item.MaleRankTitle = rhs.MaleRankTitle;
            }
            if ((copyMask?.GetShouldTranslate((int)Rank_FieldIndex.FemaleRankTitle) ?? true))
            {
                item.FemaleRankTitle = rhs.FemaleRankTitle;
            }
            if ((copyMask?.GetShouldTranslate((int)Rank_FieldIndex.Insignia) ?? true))
            {
                item.Insignia = rhs.Insignia;
            }
        }
        
        #endregion
        
        public Rank DeepCopy(
            IRankGetter item,
            Rank.TranslationMask? copyMask = null)
        {
            Rank ret = (Rank)((RankCommon)((IRankGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Rank DeepCopy(
            IRankGetter item,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? copyMask = null)
        {
            Rank ret = (Rank)((RankCommon)((IRankGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Rank DeepCopy(
            IRankGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Rank ret = (Rank)((RankCommon)((IRankGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Rank
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Rank_Registration.Instance;
        public static Rank_Registration Registration => Rank_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RankCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return RankSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RankSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRankGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRankGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRankGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RankXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RankXmlWriteTranslation Instance = new RankXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRankGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((item.RankNumber != null)
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.RankNumber) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RankNumber),
                    item: item.RankNumber.Value,
                    fieldIndex: (int)Rank_FieldIndex.RankNumber,
                    errorMask: errorMask);
            }
            if ((item.MaleRankTitle != null)
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.MaleRankTitle) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaleRankTitle),
                    item: item.MaleRankTitle,
                    fieldIndex: (int)Rank_FieldIndex.MaleRankTitle,
                    errorMask: errorMask);
            }
            if ((item.FemaleRankTitle != null)
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.FemaleRankTitle) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FemaleRankTitle),
                    item: item.FemaleRankTitle,
                    fieldIndex: (int)Rank_FieldIndex.FemaleRankTitle,
                    errorMask: errorMask);
            }
            if ((item.Insignia != null)
                && (translationMask?.GetShouldTranslate((int)Rank_FieldIndex.Insignia) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Insignia),
                    item: item.Insignia,
                    fieldIndex: (int)Rank_FieldIndex.Insignia,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRankGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Rank");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Rank");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRankGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRankGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IRankGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RankXmlCreateTranslation
    {
        public readonly static RankXmlCreateTranslation Instance = new RankXmlCreateTranslation();

        public static void FillPublicXml(
            IRank item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RankXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRank item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "RankNumber":
                    errorMask?.PushIndex((int)Rank_FieldIndex.RankNumber);
                    try
                    {
                        item.RankNumber = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleRankTitle":
                    errorMask?.PushIndex((int)Rank_FieldIndex.MaleRankTitle);
                    try
                    {
                        item.MaleRankTitle = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleRankTitle":
                    errorMask?.PushIndex((int)Rank_FieldIndex.FemaleRankTitle);
                    try
                    {
                        item.FemaleRankTitle = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Insignia":
                    errorMask?.PushIndex((int)Rank_FieldIndex.Insignia);
                    try
                    {
                        item.Insignia = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class RankXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRankGetter item,
            XElement node,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Rank.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRankGetter item,
            string path,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRankGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRankGetter item,
            Stream stream,
            out Rank.ErrorMask errorMask,
            Rank.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRankGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRankGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRankGetter item,
            XElement node,
            string? name = null,
            Rank.TranslationMask? translationMask = null)
        {
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IRankGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRankGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((RankXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RankBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RankBinaryWriteTranslation Instance = new RankBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IRankGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.RankNumber,
                header: recordTypeConverter.ConvertToCustom(Rank_Registration.RNAM_HEADER));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaleRankTitle,
                header: recordTypeConverter.ConvertToCustom(Rank_Registration.MNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FemaleRankTitle,
                header: recordTypeConverter.ConvertToCustom(Rank_Registration.FNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Insignia,
                header: recordTypeConverter.ConvertToCustom(Rank_Registration.INAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IRankGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRankGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RankBinaryCreateTranslation
    {
        public readonly static RankBinaryCreateTranslation Instance = new RankBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IRank item,
            MutagenFrame frame)
        {
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IRank item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E52: // RNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.RankNumber) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RankNumber = frame.ReadUInt32();
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.RankNumber);
                }
                case 0x4D414E4D: // MNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.MaleRankTitle) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaleRankTitle = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.MaleRankTitle);
                }
                case 0x4D414E46: // FNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.FemaleRankTitle) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FemaleRankTitle = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.FemaleRankTitle);
                }
                case 0x4D414E49: // INAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.Insignia) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Insignia = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.Insignia);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class RankBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRankGetter item,
            MutagenWriter writer)
        {
            ((RankBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class RankBinaryOverlay :
        BinaryOverlay,
        IRankGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Rank_Registration.Instance;
        public static Rank_Registration Registration => Rank_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RankCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RankSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRankGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRankGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRankGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRankGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => RankXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RankXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RankBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RankBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region RankNumber
        private int? _RankNumberLocation;
        public UInt32? RankNumber => _RankNumberLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _RankNumberLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region MaleRankTitle
        private int? _MaleRankTitleLocation;
        public String? MaleRankTitle => _MaleRankTitleLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _MaleRankTitleLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region FemaleRankTitle
        private int? _FemaleRankTitleLocation;
        public String? FemaleRankTitle => _FemaleRankTitleLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _FemaleRankTitleLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Insignia
        private int? _InsigniaLocation;
        public String? Insignia => _InsigniaLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _InsigniaLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        protected RankBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RankBinaryOverlay RankFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RankBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static RankBinaryOverlay RankFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return RankFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4D414E52: // RNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.RankNumber) return TryGet<int?>.Failure;
                    _RankNumberLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.RankNumber);
                }
                case 0x4D414E4D: // MNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.MaleRankTitle) return TryGet<int?>.Failure;
                    _MaleRankTitleLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.MaleRankTitle);
                }
                case 0x4D414E46: // FNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.FemaleRankTitle) return TryGet<int?>.Failure;
                    _FemaleRankTitleLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.FemaleRankTitle);
                }
                case 0x4D414E49: // INAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Rank_FieldIndex.Insignia) return TryGet<int?>.Failure;
                    _InsigniaLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Rank_FieldIndex.Insignia);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RankMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

