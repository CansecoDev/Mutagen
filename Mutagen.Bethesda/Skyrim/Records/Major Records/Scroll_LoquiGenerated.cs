/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Scroll :
        SkyrimMajorRecord,
        IScrollInternal,
        ILoquiObjectSetter<Scroll>,
        IEquatable<Scroll>,
        IEqualsMask
    {
        #region Ctor
        protected Scroll()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IScrollGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TranslatedString? _Name;
        public TranslatedString? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString? IScrollGetter.Name => this.Name;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Keyword>>? _Keywords;
        public ExtendedList<IFormLink<Keyword>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IScrollGetter.Keywords => _Keywords;
        #endregion

        #endregion
        #region MenuDisplayObject
        public FormLinkNullable<Static> MenuDisplayObject { get; set; } = new FormLinkNullable<Static>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IStaticGetter> IScrollGetter.MenuDisplayObject => this.MenuDisplayObject;
        #endregion
        #region EquipmentType
        public FormLinkNullable<EquipType> EquipmentType { get; set; } = new FormLinkNullable<EquipType>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEquipTypeGetter> IScrollGetter.EquipmentType => this.EquipmentType;
        #endregion
        #region Description
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Description;
        public String? Description
        {
            get => this._Description;
            set => this._Description = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IScrollGetter.Description => this.Description;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IScrollGetter.Model => this.Model;
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IScrollGetter.Destructible => this.Destructible;
        #endregion
        #region PickUpSound
        public FormLinkNullable<SoundDescriptor> PickUpSound { get; set; } = new FormLinkNullable<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IScrollGetter.PickUpSound => this.PickUpSound;
        #endregion
        #region PutDownSound
        public FormLinkNullable<SoundDescriptor> PutDownSound { get; set; } = new FormLinkNullable<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IScrollGetter.PutDownSound => this.PutDownSound;
        #endregion
        #region Value
        public UInt32 Value { get; set; } = default;
        #endregion
        #region Weight
        public Single Weight { get; set; } = default;
        #endregion
        #region BaseCost
        public UInt32 BaseCost { get; set; } = default;
        #endregion
        #region Flags
        public SpellDataFlag Flags { get; set; } = default;
        #endregion
        #region Type
        public SpellType Type { get; set; } = default;
        #endregion
        #region ChargeTime
        public Single ChargeTime { get; set; } = default;
        #endregion
        #region CastType
        public CastType CastType { get; set; } = default;
        #endregion
        #region TargetType
        public TargetType TargetType { get; set; } = default;
        #endregion
        #region CastDuration
        public Single CastDuration { get; set; } = default;
        #endregion
        #region Range
        public Single Range { get; set; } = default;
        #endregion
        #region HalfCostPerk
        public FormLink<Perk> HalfCostPerk { get; set; } = new FormLink<Perk>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IPerkGetter> IScrollGetter.HalfCostPerk => this.HalfCostPerk;
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Effect> _Effects = new ExtendedList<Effect>();
        public ExtendedList<Effect> Effects
        {
            get => this._Effects;
            protected set => this._Effects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEffectGetter> IScrollGetter.Effects => _Effects;
        #endregion

        #endregion
        #region DATADataTypeState
        public Scroll.DATADataType DATADataTypeState { get; set; } = default;
        #endregion
        #region SPITDataTypeState
        public Scroll.SPITDataType SPITDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScrollMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IScrollGetter rhs)) return false;
            return ((ScrollCommon)((IScrollGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Scroll obj)
        {
            return ((ScrollCommon)((IScrollGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScrollCommon)((IScrollGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ScrollXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ScrollXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Scroll CreateFromXml(
            XElement node,
            Scroll.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Scroll CreateFromXml(
            XElement node,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Scroll.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Scroll CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Scroll();
            ((ScrollSetterCommon)((IScrollGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Scroll CreateFromXml(
            string path,
            Scroll.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Scroll CreateFromXml(
            string path,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Scroll CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Scroll.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Scroll CreateFromXml(
            Stream stream,
            Scroll.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Scroll CreateFromXml(
            Stream stream,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Scroll CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Scroll.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.MenuDisplayObject = initialValue;
                this.EquipmentType = initialValue;
                this.Description = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.PickUpSound = initialValue;
                this.PutDownSound = initialValue;
                this.Value = initialValue;
                this.Weight = initialValue;
                this.BaseCost = initialValue;
                this.Flags = initialValue;
                this.Type = initialValue;
                this.ChargeTime = initialValue;
                this.CastType = initialValue;
                this.TargetType = initialValue;
                this.CastDuration = initialValue;
                this.Range = initialValue;
                this.HalfCostPerk = initialValue;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
                this.DATADataTypeState = initialValue;
                this.SPITDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Name,
                TItem Keywords,
                TItem MenuDisplayObject,
                TItem EquipmentType,
                TItem Description,
                TItem Model,
                TItem Destructible,
                TItem PickUpSound,
                TItem PutDownSound,
                TItem Value,
                TItem Weight,
                TItem BaseCost,
                TItem Flags,
                TItem Type,
                TItem ChargeTime,
                TItem CastType,
                TItem TargetType,
                TItem CastDuration,
                TItem Range,
                TItem HalfCostPerk,
                TItem Effects,
                TItem DATADataTypeState,
                TItem SPITDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.MenuDisplayObject = MenuDisplayObject;
                this.EquipmentType = EquipmentType;
                this.Description = Description;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.PickUpSound = PickUpSound;
                this.PutDownSound = PutDownSound;
                this.Value = Value;
                this.Weight = Weight;
                this.BaseCost = BaseCost;
                this.Flags = Flags;
                this.Type = Type;
                this.ChargeTime = ChargeTime;
                this.CastType = CastType;
                this.TargetType = TargetType;
                this.CastDuration = CastDuration;
                this.Range = Range;
                this.HalfCostPerk = HalfCostPerk;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(Effects, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
                this.DATADataTypeState = DATADataTypeState;
                this.SPITDataTypeState = SPITDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem MenuDisplayObject;
            public TItem EquipmentType;
            public TItem Description;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem PickUpSound;
            public TItem PutDownSound;
            public TItem Value;
            public TItem Weight;
            public TItem BaseCost;
            public TItem Flags;
            public TItem Type;
            public TItem ChargeTime;
            public TItem CastType;
            public TItem TargetType;
            public TItem CastDuration;
            public TItem Range;
            public TItem HalfCostPerk;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>? Effects;
            public TItem DATADataTypeState;
            public TItem SPITDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.MenuDisplayObject, rhs.MenuDisplayObject)) return false;
                if (!object.Equals(this.EquipmentType, rhs.EquipmentType)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.PickUpSound, rhs.PickUpSound)) return false;
                if (!object.Equals(this.PutDownSound, rhs.PutDownSound)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.BaseCost, rhs.BaseCost)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.ChargeTime, rhs.ChargeTime)) return false;
                if (!object.Equals(this.CastType, rhs.CastType)) return false;
                if (!object.Equals(this.TargetType, rhs.TargetType)) return false;
                if (!object.Equals(this.CastDuration, rhs.CastDuration)) return false;
                if (!object.Equals(this.Range, rhs.Range)) return false;
                if (!object.Equals(this.HalfCostPerk, rhs.HalfCostPerk)) return false;
                if (!object.Equals(this.Effects, rhs.Effects)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                if (!object.Equals(this.SPITDataTypeState, rhs.SPITDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Keywords);
                hash.Add(this.MenuDisplayObject);
                hash.Add(this.EquipmentType);
                hash.Add(this.Description);
                hash.Add(this.Model);
                hash.Add(this.Destructible);
                hash.Add(this.PickUpSound);
                hash.Add(this.PutDownSound);
                hash.Add(this.Value);
                hash.Add(this.Weight);
                hash.Add(this.BaseCost);
                hash.Add(this.Flags);
                hash.Add(this.Type);
                hash.Add(this.ChargeTime);
                hash.Add(this.CastType);
                hash.Add(this.TargetType);
                hash.Add(this.CastDuration);
                hash.Add(this.Range);
                hash.Add(this.HalfCostPerk);
                hash.Add(this.Effects);
                hash.Add(this.DATADataTypeState);
                hash.Add(this.SPITDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.MenuDisplayObject)) return false;
                if (!eval(this.EquipmentType)) return false;
                if (!eval(this.Description)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.PickUpSound)) return false;
                if (!eval(this.PutDownSound)) return false;
                if (!eval(this.Value)) return false;
                if (!eval(this.Weight)) return false;
                if (!eval(this.BaseCost)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.ChargeTime)) return false;
                if (!eval(this.CastType)) return false;
                if (!eval(this.TargetType)) return false;
                if (!eval(this.CastDuration)) return false;
                if (!eval(this.Range)) return false;
                if (!eval(this.HalfCostPerk)) return false;
                if (this.Effects != null)
                {
                    if (!eval(this.Effects.Overall)) return false;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DATADataTypeState)) return false;
                if (!eval(this.SPITDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.MenuDisplayObject)) return true;
                if (eval(this.EquipmentType)) return true;
                if (eval(this.Description)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.PickUpSound)) return true;
                if (eval(this.PutDownSound)) return true;
                if (eval(this.Value)) return true;
                if (eval(this.Weight)) return true;
                if (eval(this.BaseCost)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.ChargeTime)) return true;
                if (eval(this.CastType)) return true;
                if (eval(this.TargetType)) return true;
                if (eval(this.CastDuration)) return true;
                if (eval(this.Range)) return true;
                if (eval(this.HalfCostPerk)) return true;
                if (this.Effects != null)
                {
                    if (eval(this.Effects.Overall)) return true;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DATADataTypeState)) return true;
                if (eval(this.SPITDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Scroll.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.MenuDisplayObject = eval(this.MenuDisplayObject);
                obj.EquipmentType = eval(this.EquipmentType);
                obj.Description = eval(this.Description);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.PickUpSound = eval(this.PickUpSound);
                obj.PutDownSound = eval(this.PutDownSound);
                obj.Value = eval(this.Value);
                obj.Weight = eval(this.Weight);
                obj.BaseCost = eval(this.BaseCost);
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                obj.ChargeTime = eval(this.ChargeTime);
                obj.CastType = eval(this.CastType);
                obj.TargetType = eval(this.TargetType);
                obj.CastDuration = eval(this.CastDuration);
                obj.Range = eval(this.Range);
                obj.HalfCostPerk = eval(this.HalfCostPerk);
                if (Effects != null)
                {
                    obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect.Mask<R>?>>?>(eval(this.Effects.Overall), Enumerable.Empty<MaskItemIndexed<R, Effect.Mask<R>?>>());
                    if (Effects.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Effect.Mask<R>?>>();
                        obj.Effects.Specific = l;
                        foreach (var item in Effects.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Effect.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Effect.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DATADataTypeState = eval(this.DATADataTypeState);
                obj.SPITDataTypeState = eval(this.SPITDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Scroll.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Scroll.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Scroll.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords.TryGet(out var KeywordsItem))
                    {
                        fg.AppendLine("Keywords =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.MenuDisplayObject ?? true)
                    {
                        fg.AppendItem(MenuDisplayObject, "MenuDisplayObject");
                    }
                    if (printMask?.EquipmentType ?? true)
                    {
                        fg.AppendItem(EquipmentType, "EquipmentType");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.ToString(fg);
                    }
                    if (printMask?.PickUpSound ?? true)
                    {
                        fg.AppendItem(PickUpSound, "PickUpSound");
                    }
                    if (printMask?.PutDownSound ?? true)
                    {
                        fg.AppendItem(PutDownSound, "PutDownSound");
                    }
                    if (printMask?.Value ?? true)
                    {
                        fg.AppendItem(Value, "Value");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        fg.AppendItem(Weight, "Weight");
                    }
                    if (printMask?.BaseCost ?? true)
                    {
                        fg.AppendItem(BaseCost, "BaseCost");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if (printMask?.ChargeTime ?? true)
                    {
                        fg.AppendItem(ChargeTime, "ChargeTime");
                    }
                    if (printMask?.CastType ?? true)
                    {
                        fg.AppendItem(CastType, "CastType");
                    }
                    if (printMask?.TargetType ?? true)
                    {
                        fg.AppendItem(TargetType, "TargetType");
                    }
                    if (printMask?.CastDuration ?? true)
                    {
                        fg.AppendItem(CastDuration, "CastDuration");
                    }
                    if (printMask?.Range ?? true)
                    {
                        fg.AppendItem(Range, "Range");
                    }
                    if (printMask?.HalfCostPerk ?? true)
                    {
                        fg.AppendItem(HalfCostPerk, "HalfCostPerk");
                    }
                    if ((printMask?.Effects?.Overall ?? true)
                        && Effects.TryGet(out var EffectsItem))
                    {
                        fg.AppendLine("Effects =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(EffectsItem.Overall);
                            if (EffectsItem.Specific != null)
                            {
                                foreach (var subItem in EffectsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                    if (printMask?.SPITDataTypeState ?? true)
                    {
                        fg.AppendItem(SPITDataTypeState, "SPITDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? MenuDisplayObject;
            public Exception? EquipmentType;
            public Exception? Description;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? PickUpSound;
            public Exception? PutDownSound;
            public Exception? Value;
            public Exception? Weight;
            public Exception? BaseCost;
            public Exception? Flags;
            public Exception? Type;
            public Exception? ChargeTime;
            public Exception? CastType;
            public Exception? TargetType;
            public Exception? CastDuration;
            public Exception? Range;
            public Exception? HalfCostPerk;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>? Effects;
            public Exception? DATADataTypeState;
            public Exception? SPITDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Scroll_FieldIndex enu = (Scroll_FieldIndex)index;
                switch (enu)
                {
                    case Scroll_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Scroll_FieldIndex.Name:
                        return Name;
                    case Scroll_FieldIndex.Keywords:
                        return Keywords;
                    case Scroll_FieldIndex.MenuDisplayObject:
                        return MenuDisplayObject;
                    case Scroll_FieldIndex.EquipmentType:
                        return EquipmentType;
                    case Scroll_FieldIndex.Description:
                        return Description;
                    case Scroll_FieldIndex.Model:
                        return Model;
                    case Scroll_FieldIndex.Destructible:
                        return Destructible;
                    case Scroll_FieldIndex.PickUpSound:
                        return PickUpSound;
                    case Scroll_FieldIndex.PutDownSound:
                        return PutDownSound;
                    case Scroll_FieldIndex.Value:
                        return Value;
                    case Scroll_FieldIndex.Weight:
                        return Weight;
                    case Scroll_FieldIndex.BaseCost:
                        return BaseCost;
                    case Scroll_FieldIndex.Flags:
                        return Flags;
                    case Scroll_FieldIndex.Type:
                        return Type;
                    case Scroll_FieldIndex.ChargeTime:
                        return ChargeTime;
                    case Scroll_FieldIndex.CastType:
                        return CastType;
                    case Scroll_FieldIndex.TargetType:
                        return TargetType;
                    case Scroll_FieldIndex.CastDuration:
                        return CastDuration;
                    case Scroll_FieldIndex.Range:
                        return Range;
                    case Scroll_FieldIndex.HalfCostPerk:
                        return HalfCostPerk;
                    case Scroll_FieldIndex.Effects:
                        return Effects;
                    case Scroll_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    case Scroll_FieldIndex.SPITDataTypeState:
                        return SPITDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Scroll_FieldIndex enu = (Scroll_FieldIndex)index;
                switch (enu)
                {
                    case Scroll_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Scroll_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Scroll_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Scroll_FieldIndex.MenuDisplayObject:
                        this.MenuDisplayObject = ex;
                        break;
                    case Scroll_FieldIndex.EquipmentType:
                        this.EquipmentType = ex;
                        break;
                    case Scroll_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Scroll_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Scroll_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Scroll_FieldIndex.PickUpSound:
                        this.PickUpSound = ex;
                        break;
                    case Scroll_FieldIndex.PutDownSound:
                        this.PutDownSound = ex;
                        break;
                    case Scroll_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case Scroll_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    case Scroll_FieldIndex.BaseCost:
                        this.BaseCost = ex;
                        break;
                    case Scroll_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Scroll_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case Scroll_FieldIndex.ChargeTime:
                        this.ChargeTime = ex;
                        break;
                    case Scroll_FieldIndex.CastType:
                        this.CastType = ex;
                        break;
                    case Scroll_FieldIndex.TargetType:
                        this.TargetType = ex;
                        break;
                    case Scroll_FieldIndex.CastDuration:
                        this.CastDuration = ex;
                        break;
                    case Scroll_FieldIndex.Range:
                        this.Range = ex;
                        break;
                    case Scroll_FieldIndex.HalfCostPerk:
                        this.HalfCostPerk = ex;
                        break;
                    case Scroll_FieldIndex.Effects:
                        this.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ex, null);
                        break;
                    case Scroll_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    case Scroll_FieldIndex.SPITDataTypeState:
                        this.SPITDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Scroll_FieldIndex enu = (Scroll_FieldIndex)index;
                switch (enu)
                {
                    case Scroll_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Scroll_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Scroll_FieldIndex.MenuDisplayObject:
                        this.MenuDisplayObject = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.EquipmentType:
                        this.EquipmentType = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Scroll_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Scroll_FieldIndex.PickUpSound:
                        this.PickUpSound = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.PutDownSound:
                        this.PutDownSound = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.BaseCost:
                        this.BaseCost = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.ChargeTime:
                        this.ChargeTime = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.CastType:
                        this.CastType = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.TargetType:
                        this.TargetType = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.CastDuration:
                        this.CastDuration = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Range:
                        this.Range = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.HalfCostPerk:
                        this.HalfCostPerk = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.Effects:
                        this.Effects = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>)obj;
                        break;
                    case Scroll_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    case Scroll_FieldIndex.SPITDataTypeState:
                        this.SPITDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Keywords != null) return true;
                if (MenuDisplayObject != null) return true;
                if (EquipmentType != null) return true;
                if (Description != null) return true;
                if (Model != null) return true;
                if (Destructible != null) return true;
                if (PickUpSound != null) return true;
                if (PutDownSound != null) return true;
                if (Value != null) return true;
                if (Weight != null) return true;
                if (BaseCost != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (ChargeTime != null) return true;
                if (CastType != null) return true;
                if (TargetType != null) return true;
                if (CastDuration != null) return true;
                if (Range != null) return true;
                if (HalfCostPerk != null) return true;
                if (Effects != null) return true;
                if (DATADataTypeState != null) return true;
                if (SPITDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(Name, "Name");
                if (Keywords.TryGet(out var KeywordsItem))
                {
                    fg.AppendLine("Keywords =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(MenuDisplayObject, "MenuDisplayObject");
                fg.AppendItem(EquipmentType, "EquipmentType");
                fg.AppendItem(Description, "Description");
                Model?.ToString(fg);
                Destructible?.ToString(fg);
                fg.AppendItem(PickUpSound, "PickUpSound");
                fg.AppendItem(PutDownSound, "PutDownSound");
                fg.AppendItem(Value, "Value");
                fg.AppendItem(Weight, "Weight");
                fg.AppendItem(BaseCost, "BaseCost");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Type, "Type");
                fg.AppendItem(ChargeTime, "ChargeTime");
                fg.AppendItem(CastType, "CastType");
                fg.AppendItem(TargetType, "TargetType");
                fg.AppendItem(CastDuration, "CastDuration");
                fg.AppendItem(Range, "Range");
                fg.AppendItem(HalfCostPerk, "HalfCostPerk");
                if (Effects.TryGet(out var EffectsItem))
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(EffectsItem.Overall);
                        if (EffectsItem.Specific != null)
                        {
                            foreach (var subItem in EffectsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                fg.AppendItem(SPITDataTypeState, "SPITDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.MenuDisplayObject = this.MenuDisplayObject.Combine(rhs.MenuDisplayObject);
                ret.EquipmentType = this.EquipmentType.Combine(rhs.EquipmentType);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.PickUpSound = this.PickUpSound.Combine(rhs.PickUpSound);
                ret.PutDownSound = this.PutDownSound.Combine(rhs.PutDownSound);
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                ret.BaseCost = this.BaseCost.Combine(rhs.BaseCost);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.ChargeTime = this.ChargeTime.Combine(rhs.ChargeTime);
                ret.CastType = this.CastType.Combine(rhs.CastType);
                ret.TargetType = this.TargetType.Combine(rhs.TargetType);
                ret.CastDuration = this.CastDuration.Combine(rhs.CastDuration);
                ret.Range = this.Range.Combine(rhs.Range);
                ret.HalfCostPerk = this.HalfCostPerk.Combine(rhs.HalfCostPerk);
                ret.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ExceptionExt.Combine(this.Effects?.Overall, rhs.Effects?.Overall), ExceptionExt.Combine(this.Effects?.Specific, rhs.Effects?.Specific));
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                ret.SPITDataTypeState = this.SPITDataTypeState.Combine(rhs.SPITDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, ObjectBounds.TranslationMask?> ObjectBounds;
            public bool Name;
            public bool Keywords;
            public bool MenuDisplayObject;
            public bool EquipmentType;
            public bool Description;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public MaskItem<bool, Destructible.TranslationMask?> Destructible;
            public bool PickUpSound;
            public bool PutDownSound;
            public bool Value;
            public bool Weight;
            public bool BaseCost;
            public bool Flags;
            public bool Type;
            public bool ChargeTime;
            public bool CastType;
            public bool TargetType;
            public bool CastDuration;
            public bool Range;
            public bool HalfCostPerk;
            public MaskItem<bool, Effect.TranslationMask?> Effects;
            public bool DATADataTypeState;
            public bool SPITDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.ObjectBounds = new MaskItem<bool, ObjectBounds.TranslationMask?>(defaultOn, null);
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.MenuDisplayObject = defaultOn;
                this.EquipmentType = defaultOn;
                this.Description = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Destructible = new MaskItem<bool, Destructible.TranslationMask?>(defaultOn, null);
                this.PickUpSound = defaultOn;
                this.PutDownSound = defaultOn;
                this.Value = defaultOn;
                this.Weight = defaultOn;
                this.BaseCost = defaultOn;
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.ChargeTime = defaultOn;
                this.CastType = defaultOn;
                this.TargetType = defaultOn;
                this.CastDuration = defaultOn;
                this.Range = defaultOn;
                this.HalfCostPerk = defaultOn;
                this.Effects = new MaskItem<bool, Effect.TranslationMask?>(defaultOn, null);
                this.DATADataTypeState = defaultOn;
                this.SPITDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Keywords, null));
                ret.Add((MenuDisplayObject, null));
                ret.Add((EquipmentType, null));
                ret.Add((Description, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Destructible?.Overall ?? true, Destructible?.Specific?.GetCrystal()));
                ret.Add((PickUpSound, null));
                ret.Add((PutDownSound, null));
                ret.Add((Value, null));
                ret.Add((Weight, null));
                ret.Add((BaseCost, null));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((ChargeTime, null));
                ret.Add((CastType, null));
                ret.Add((TargetType, null));
                ret.Add((CastDuration, null));
                ret.Add((Range, null));
                ret.Add((HalfCostPerk, null));
                ret.Add((Effects?.Overall ?? true, Effects?.Specific?.GetCrystal()));
                ret.Add((DATADataTypeState, null));
                ret.Add((SPITDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Scroll_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => ScrollCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ScrollCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScrollCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScrollCommon.Instance.RemapLinks(this, mapping);
        public Scroll(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Scroll(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Scroll(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum DATADataType
        {
        }
        [Flags]
        public enum SPITDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ScrollBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScrollBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Scroll CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Scroll CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Scroll();
            ((ScrollSetterCommon)((IScrollGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScrollGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ScrollSetterCommon)((IScrollGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Scroll GetNew()
        {
            return new Scroll();
        }

    }
    #endregion

    #region Interface
    public partial interface IScroll :
        IScrollGetter,
        ISkyrimMajorRecord,
        ITranslatedNamed,
        IItem,
        IModeled,
        IObjectBounded,
        IObjectId,
        IWeightValue,
        ILoquiObjectSetter<IScrollInternal>
    {
        new ObjectBounds ObjectBounds { get; set; }
        new TranslatedString? Name { get; set; }
        new ExtendedList<IFormLink<Keyword>>? Keywords { get; set; }
        new FormLinkNullable<Static> MenuDisplayObject { get; set; }
        new FormLinkNullable<EquipType> EquipmentType { get; set; }
        new String? Description { get; set; }
        new Model? Model { get; set; }
        new Destructible? Destructible { get; set; }
        new FormLinkNullable<SoundDescriptor> PickUpSound { get; set; }
        new FormLinkNullable<SoundDescriptor> PutDownSound { get; set; }
        new UInt32 Value { get; set; }
        new Single Weight { get; set; }
        new UInt32 BaseCost { get; set; }
        new SpellDataFlag Flags { get; set; }
        new SpellType Type { get; set; }
        new Single ChargeTime { get; set; }
        new CastType CastType { get; set; }
        new TargetType TargetType { get; set; }
        new Single CastDuration { get; set; }
        new Single Range { get; set; }
        new FormLink<Perk> HalfCostPerk { get; set; }
        new ExtendedList<Effect> Effects { get; }
        new Scroll.DATADataType DATADataTypeState { get; set; }
        new Scroll.SPITDataType SPITDataTypeState { get; set; }
    }

    public partial interface IScrollInternal :
        ISkyrimMajorRecordInternal,
        IScroll,
        IScrollGetter
    {
    }

    public partial interface IScrollGetter :
        ISkyrimMajorRecordGetter,
        ITranslatedNamedGetter,
        IItemGetter,
        IModeledGetter,
        IObjectBoundedGetter,
        IObjectIdGetter,
        IWeightValueGetter,
        ILoquiObject<IScrollGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Scroll_Registration.Instance;
        IObjectBoundsGetter ObjectBounds { get; }
        TranslatedString? Name { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        IFormLinkNullableGetter<IStaticGetter> MenuDisplayObject { get; }
        IFormLinkNullableGetter<IEquipTypeGetter> EquipmentType { get; }
        String? Description { get; }
        IModelGetter? Model { get; }
        IDestructibleGetter? Destructible { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> PickUpSound { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> PutDownSound { get; }
        UInt32 Value { get; }
        Single Weight { get; }
        UInt32 BaseCost { get; }
        SpellDataFlag Flags { get; }
        SpellType Type { get; }
        Single ChargeTime { get; }
        CastType CastType { get; }
        TargetType TargetType { get; }
        Single CastDuration { get; }
        Single Range { get; }
        IFormLinkGetter<IPerkGetter> HalfCostPerk { get; }
        IReadOnlyList<IEffectGetter> Effects { get; }
        Scroll.DATADataType DATADataTypeState { get; }
        Scroll.SPITDataType SPITDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ScrollMixIn
    {
        public static void Clear(this IScrollInternal item)
        {
            ((ScrollSetterCommon)((IScrollGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Scroll.Mask<bool> GetEqualsMask(
            this IScrollGetter item,
            IScrollGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScrollCommon)((IScrollGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScrollGetter item,
            string? name = null,
            Scroll.Mask<bool>? printMask = null)
        {
            return ((ScrollCommon)((IScrollGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScrollGetter item,
            FileGeneration fg,
            string? name = null,
            Scroll.Mask<bool>? printMask = null)
        {
            ((ScrollCommon)((IScrollGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IScrollGetter item,
            Scroll.Mask<bool?> checkMask)
        {
            return ((ScrollCommon)((IScrollGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Scroll.Mask<bool> GetHasBeenSetMask(this IScrollGetter item)
        {
            var ret = new Scroll.Mask<bool>(false);
            ((ScrollCommon)((IScrollGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IScrollGetter item,
            IScrollGetter rhs)
        {
            return ((ScrollCommon)((IScrollGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IScrollInternal lhs,
            IScrollGetter rhs,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ScrollSetterTranslationCommon)((IScrollGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Scroll.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IScrollInternal lhs,
            IScrollGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ScrollSetterTranslationCommon)((IScrollGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Scroll DeepCopy(
            this IScrollGetter item,
            Scroll.TranslationMask? copyMask = null)
        {
            return ((ScrollSetterTranslationCommon)((IScrollGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Scroll DeepCopy(
            this IScrollGetter item,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? copyMask = null)
        {
            return ((ScrollSetterTranslationCommon)((IScrollGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Scroll DeepCopy(
            this IScrollGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ScrollSetterTranslationCommon)((IScrollGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IScrollInternal item,
            XElement node,
            Scroll.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IScrollInternal item,
            XElement node,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Scroll.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IScrollInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ScrollSetterCommon)((IScrollGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScrollInternal item,
            string path,
            Scroll.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScrollInternal item,
            string path,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScrollInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Scroll.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IScrollInternal item,
            Stream stream,
            Scroll.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScrollInternal item,
            Stream stream,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScrollInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Scroll.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IScrollInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IScrollInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScrollSetterCommon)((IScrollGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Scroll_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Name = 7,
        Keywords = 8,
        MenuDisplayObject = 9,
        EquipmentType = 10,
        Description = 11,
        Model = 12,
        Destructible = 13,
        PickUpSound = 14,
        PutDownSound = 15,
        Value = 16,
        Weight = 17,
        BaseCost = 18,
        Flags = 19,
        Type = 20,
        ChargeTime = 21,
        CastType = 22,
        TargetType = 23,
        CastDuration = 24,
        Range = 25,
        HalfCostPerk = 26,
        Effects = 27,
        DATADataTypeState = 28,
        SPITDataTypeState = 29,
    }
    #endregion

    #region Registration
    public partial class Scroll_Registration : ILoquiRegistration
    {
        public static readonly Scroll_Registration Instance = new Scroll_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 139,
            version: 0);

        public const string GUID = "966367fb-9898-41f3-a250-d453749a138b";

        public const ushort AdditionalFieldCount = 24;

        public const ushort FieldCount = 30;

        public static readonly Type MaskType = typeof(Scroll.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Scroll.ErrorMask);

        public static readonly Type ClassType = typeof(Scroll);

        public static readonly Type GetterType = typeof(IScrollGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScroll);

        public static readonly Type? InternalSetterType = typeof(IScrollInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Scroll";

        public const string Name = "Scroll";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECTBOUNDS":
                    return (ushort)Scroll_FieldIndex.ObjectBounds;
                case "NAME":
                    return (ushort)Scroll_FieldIndex.Name;
                case "KEYWORDS":
                    return (ushort)Scroll_FieldIndex.Keywords;
                case "MENUDISPLAYOBJECT":
                    return (ushort)Scroll_FieldIndex.MenuDisplayObject;
                case "EQUIPMENTTYPE":
                    return (ushort)Scroll_FieldIndex.EquipmentType;
                case "DESCRIPTION":
                    return (ushort)Scroll_FieldIndex.Description;
                case "MODEL":
                    return (ushort)Scroll_FieldIndex.Model;
                case "DESTRUCTIBLE":
                    return (ushort)Scroll_FieldIndex.Destructible;
                case "PICKUPSOUND":
                    return (ushort)Scroll_FieldIndex.PickUpSound;
                case "PUTDOWNSOUND":
                    return (ushort)Scroll_FieldIndex.PutDownSound;
                case "VALUE":
                    return (ushort)Scroll_FieldIndex.Value;
                case "WEIGHT":
                    return (ushort)Scroll_FieldIndex.Weight;
                case "BASECOST":
                    return (ushort)Scroll_FieldIndex.BaseCost;
                case "FLAGS":
                    return (ushort)Scroll_FieldIndex.Flags;
                case "TYPE":
                    return (ushort)Scroll_FieldIndex.Type;
                case "CHARGETIME":
                    return (ushort)Scroll_FieldIndex.ChargeTime;
                case "CASTTYPE":
                    return (ushort)Scroll_FieldIndex.CastType;
                case "TARGETTYPE":
                    return (ushort)Scroll_FieldIndex.TargetType;
                case "CASTDURATION":
                    return (ushort)Scroll_FieldIndex.CastDuration;
                case "RANGE":
                    return (ushort)Scroll_FieldIndex.Range;
                case "HALFCOSTPERK":
                    return (ushort)Scroll_FieldIndex.HalfCostPerk;
                case "EFFECTS":
                    return (ushort)Scroll_FieldIndex.Effects;
                case "DATADATATYPESTATE":
                    return (ushort)Scroll_FieldIndex.DATADataTypeState;
                case "SPITDATATYPESTATE":
                    return (ushort)Scroll_FieldIndex.SPITDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Scroll_FieldIndex enu = (Scroll_FieldIndex)index;
            switch (enu)
            {
                case Scroll_FieldIndex.Keywords:
                case Scroll_FieldIndex.Effects:
                    return true;
                case Scroll_FieldIndex.ObjectBounds:
                case Scroll_FieldIndex.Name:
                case Scroll_FieldIndex.MenuDisplayObject:
                case Scroll_FieldIndex.EquipmentType:
                case Scroll_FieldIndex.Description:
                case Scroll_FieldIndex.Model:
                case Scroll_FieldIndex.Destructible:
                case Scroll_FieldIndex.PickUpSound:
                case Scroll_FieldIndex.PutDownSound:
                case Scroll_FieldIndex.Value:
                case Scroll_FieldIndex.Weight:
                case Scroll_FieldIndex.BaseCost:
                case Scroll_FieldIndex.Flags:
                case Scroll_FieldIndex.Type:
                case Scroll_FieldIndex.ChargeTime:
                case Scroll_FieldIndex.CastType:
                case Scroll_FieldIndex.TargetType:
                case Scroll_FieldIndex.CastDuration:
                case Scroll_FieldIndex.Range:
                case Scroll_FieldIndex.HalfCostPerk:
                case Scroll_FieldIndex.DATADataTypeState:
                case Scroll_FieldIndex.SPITDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Scroll_FieldIndex enu = (Scroll_FieldIndex)index;
            switch (enu)
            {
                case Scroll_FieldIndex.ObjectBounds:
                case Scroll_FieldIndex.Model:
                case Scroll_FieldIndex.Destructible:
                case Scroll_FieldIndex.Effects:
                    return true;
                case Scroll_FieldIndex.Name:
                case Scroll_FieldIndex.Keywords:
                case Scroll_FieldIndex.MenuDisplayObject:
                case Scroll_FieldIndex.EquipmentType:
                case Scroll_FieldIndex.Description:
                case Scroll_FieldIndex.PickUpSound:
                case Scroll_FieldIndex.PutDownSound:
                case Scroll_FieldIndex.Value:
                case Scroll_FieldIndex.Weight:
                case Scroll_FieldIndex.BaseCost:
                case Scroll_FieldIndex.Flags:
                case Scroll_FieldIndex.Type:
                case Scroll_FieldIndex.ChargeTime:
                case Scroll_FieldIndex.CastType:
                case Scroll_FieldIndex.TargetType:
                case Scroll_FieldIndex.CastDuration:
                case Scroll_FieldIndex.Range:
                case Scroll_FieldIndex.HalfCostPerk:
                case Scroll_FieldIndex.DATADataTypeState:
                case Scroll_FieldIndex.SPITDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Scroll_FieldIndex enu = (Scroll_FieldIndex)index;
            switch (enu)
            {
                case Scroll_FieldIndex.ObjectBounds:
                case Scroll_FieldIndex.Name:
                case Scroll_FieldIndex.Keywords:
                case Scroll_FieldIndex.MenuDisplayObject:
                case Scroll_FieldIndex.EquipmentType:
                case Scroll_FieldIndex.Description:
                case Scroll_FieldIndex.Model:
                case Scroll_FieldIndex.Destructible:
                case Scroll_FieldIndex.PickUpSound:
                case Scroll_FieldIndex.PutDownSound:
                case Scroll_FieldIndex.Value:
                case Scroll_FieldIndex.Weight:
                case Scroll_FieldIndex.BaseCost:
                case Scroll_FieldIndex.Flags:
                case Scroll_FieldIndex.Type:
                case Scroll_FieldIndex.ChargeTime:
                case Scroll_FieldIndex.CastType:
                case Scroll_FieldIndex.TargetType:
                case Scroll_FieldIndex.CastDuration:
                case Scroll_FieldIndex.Range:
                case Scroll_FieldIndex.HalfCostPerk:
                case Scroll_FieldIndex.Effects:
                case Scroll_FieldIndex.DATADataTypeState:
                case Scroll_FieldIndex.SPITDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Scroll_FieldIndex enu = (Scroll_FieldIndex)index;
            switch (enu)
            {
                case Scroll_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case Scroll_FieldIndex.Name:
                    return "Name";
                case Scroll_FieldIndex.Keywords:
                    return "Keywords";
                case Scroll_FieldIndex.MenuDisplayObject:
                    return "MenuDisplayObject";
                case Scroll_FieldIndex.EquipmentType:
                    return "EquipmentType";
                case Scroll_FieldIndex.Description:
                    return "Description";
                case Scroll_FieldIndex.Model:
                    return "Model";
                case Scroll_FieldIndex.Destructible:
                    return "Destructible";
                case Scroll_FieldIndex.PickUpSound:
                    return "PickUpSound";
                case Scroll_FieldIndex.PutDownSound:
                    return "PutDownSound";
                case Scroll_FieldIndex.Value:
                    return "Value";
                case Scroll_FieldIndex.Weight:
                    return "Weight";
                case Scroll_FieldIndex.BaseCost:
                    return "BaseCost";
                case Scroll_FieldIndex.Flags:
                    return "Flags";
                case Scroll_FieldIndex.Type:
                    return "Type";
                case Scroll_FieldIndex.ChargeTime:
                    return "ChargeTime";
                case Scroll_FieldIndex.CastType:
                    return "CastType";
                case Scroll_FieldIndex.TargetType:
                    return "TargetType";
                case Scroll_FieldIndex.CastDuration:
                    return "CastDuration";
                case Scroll_FieldIndex.Range:
                    return "Range";
                case Scroll_FieldIndex.HalfCostPerk:
                    return "HalfCostPerk";
                case Scroll_FieldIndex.Effects:
                    return "Effects";
                case Scroll_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                case Scroll_FieldIndex.SPITDataTypeState:
                    return "SPITDataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Scroll_FieldIndex enu = (Scroll_FieldIndex)index;
            switch (enu)
            {
                case Scroll_FieldIndex.ObjectBounds:
                case Scroll_FieldIndex.Name:
                case Scroll_FieldIndex.Keywords:
                case Scroll_FieldIndex.MenuDisplayObject:
                case Scroll_FieldIndex.EquipmentType:
                case Scroll_FieldIndex.Description:
                case Scroll_FieldIndex.Model:
                case Scroll_FieldIndex.Destructible:
                case Scroll_FieldIndex.PickUpSound:
                case Scroll_FieldIndex.PutDownSound:
                case Scroll_FieldIndex.Value:
                case Scroll_FieldIndex.Weight:
                case Scroll_FieldIndex.BaseCost:
                case Scroll_FieldIndex.Flags:
                case Scroll_FieldIndex.Type:
                case Scroll_FieldIndex.ChargeTime:
                case Scroll_FieldIndex.CastType:
                case Scroll_FieldIndex.TargetType:
                case Scroll_FieldIndex.CastDuration:
                case Scroll_FieldIndex.Range:
                case Scroll_FieldIndex.HalfCostPerk:
                case Scroll_FieldIndex.Effects:
                case Scroll_FieldIndex.DATADataTypeState:
                case Scroll_FieldIndex.SPITDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Scroll_FieldIndex enu = (Scroll_FieldIndex)index;
            switch (enu)
            {
                case Scroll_FieldIndex.ObjectBounds:
                case Scroll_FieldIndex.Name:
                case Scroll_FieldIndex.Keywords:
                case Scroll_FieldIndex.MenuDisplayObject:
                case Scroll_FieldIndex.EquipmentType:
                case Scroll_FieldIndex.Description:
                case Scroll_FieldIndex.Model:
                case Scroll_FieldIndex.Destructible:
                case Scroll_FieldIndex.PickUpSound:
                case Scroll_FieldIndex.PutDownSound:
                case Scroll_FieldIndex.Value:
                case Scroll_FieldIndex.Weight:
                case Scroll_FieldIndex.BaseCost:
                case Scroll_FieldIndex.Flags:
                case Scroll_FieldIndex.Type:
                case Scroll_FieldIndex.ChargeTime:
                case Scroll_FieldIndex.CastType:
                case Scroll_FieldIndex.TargetType:
                case Scroll_FieldIndex.CastDuration:
                case Scroll_FieldIndex.Range:
                case Scroll_FieldIndex.HalfCostPerk:
                case Scroll_FieldIndex.Effects:
                case Scroll_FieldIndex.DATADataTypeState:
                case Scroll_FieldIndex.SPITDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Scroll_FieldIndex enu = (Scroll_FieldIndex)index;
            switch (enu)
            {
                case Scroll_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case Scroll_FieldIndex.Name:
                    return typeof(TranslatedString);
                case Scroll_FieldIndex.Keywords:
                    return typeof(ExtendedList<IFormLink<Keyword>>);
                case Scroll_FieldIndex.MenuDisplayObject:
                    return typeof(FormLinkNullable<Static>);
                case Scroll_FieldIndex.EquipmentType:
                    return typeof(FormLinkNullable<EquipType>);
                case Scroll_FieldIndex.Description:
                    return typeof(String);
                case Scroll_FieldIndex.Model:
                    return typeof(Model);
                case Scroll_FieldIndex.Destructible:
                    return typeof(Destructible);
                case Scroll_FieldIndex.PickUpSound:
                    return typeof(FormLinkNullable<SoundDescriptor>);
                case Scroll_FieldIndex.PutDownSound:
                    return typeof(FormLinkNullable<SoundDescriptor>);
                case Scroll_FieldIndex.Value:
                    return typeof(UInt32);
                case Scroll_FieldIndex.Weight:
                    return typeof(Single);
                case Scroll_FieldIndex.BaseCost:
                    return typeof(UInt32);
                case Scroll_FieldIndex.Flags:
                    return typeof(SpellDataFlag);
                case Scroll_FieldIndex.Type:
                    return typeof(SpellType);
                case Scroll_FieldIndex.ChargeTime:
                    return typeof(Single);
                case Scroll_FieldIndex.CastType:
                    return typeof(CastType);
                case Scroll_FieldIndex.TargetType:
                    return typeof(TargetType);
                case Scroll_FieldIndex.CastDuration:
                    return typeof(Single);
                case Scroll_FieldIndex.Range:
                    return typeof(Single);
                case Scroll_FieldIndex.HalfCostPerk:
                    return typeof(FormLink<Perk>);
                case Scroll_FieldIndex.Effects:
                    return typeof(ExtendedList<Effect>);
                case Scroll_FieldIndex.DATADataTypeState:
                    return typeof(Scroll.DATADataType);
                case Scroll_FieldIndex.SPITDataTypeState:
                    return typeof(Scroll.SPITDataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ScrollXmlWriteTranslation);
        public static readonly RecordType SCRL_HEADER = new RecordType("SCRL");
        public static readonly RecordType OBND_HEADER = new RecordType("OBND");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType KWDA_HEADER = new RecordType("KWDA");
        public static readonly RecordType KSIZ_HEADER = new RecordType("KSIZ");
        public static readonly RecordType MDOB_HEADER = new RecordType("MDOB");
        public static readonly RecordType ETYP_HEADER = new RecordType("ETYP");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType DEST_HEADER = new RecordType("DEST");
        public static readonly RecordType DSTD_HEADER = new RecordType("DSTD");
        public static readonly RecordType DMDL_HEADER = new RecordType("DMDL");
        public static readonly RecordType YNAM_HEADER = new RecordType("YNAM");
        public static readonly RecordType ZNAM_HEADER = new RecordType("ZNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType SPIT_HEADER = new RecordType("SPIT");
        public static readonly RecordType EFID_HEADER = new RecordType("EFID");
        public static readonly RecordType EFIT_HEADER = new RecordType("EFIT");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType TriggeringRecordType = SCRL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 11;
        public static readonly Type BinaryWriteTranslation = typeof(ScrollBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ScrollSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ScrollSetterCommon Instance = new ScrollSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScrollInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Name = default;
            item.Keywords = null;
            item.MenuDisplayObject = null;
            item.EquipmentType = null;
            item.Description = default;
            item.Model = null;
            item.Destructible = null;
            item.PickUpSound = null;
            item.PutDownSound = null;
            item.Value = default;
            item.Weight = default;
            item.BaseCost = default;
            item.Flags = default;
            item.Type = default;
            item.ChargeTime = default;
            item.CastType = default;
            item.TargetType = default;
            item.CastDuration = default;
            item.Range = default;
            item.HalfCostPerk = new FormLink<Perk>(FormKey.Null);
            item.Effects.Clear();
            item.DATADataTypeState = default;
            item.SPITDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IScrollInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IScrollInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IScrollInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IScrollInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ScrollXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Scroll)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Scroll)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Scroll_Registration.SCRL_HEADER;
        protected static void FillBinaryStructs(
            IScrollInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IScrollInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x444E424F: // OBND
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.ObjectBounds);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.Name);
                }
                case 0x5A49534B: // KSIZ
                {
                    var amount = BinaryPrimitives.ReadInt32LittleEndian(frame.ReadSubrecordFrame().Content);
                    item.Keywords = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Keyword>>.Instance.Parse(
                            frame: frame,
                            amount: amount,
                            triggeringRecord: Scroll_Registration.KWDA_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Keyword>>();
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.Keywords);
                }
                case 0x424F444D: // MDOB
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MenuDisplayObject = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.MenuDisplayObject);
                }
                case 0x50595445: // ETYP
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.EquipmentType = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.EquipmentType);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.Description);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.Model);
                }
                case 0x54534544: // DEST
                case 0x44545344: // DSTD
                case 0x4C444D44: // DMDL
                {
                    item.Destructible = Mutagen.Bethesda.Skyrim.Destructible.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.Destructible);
                }
                case 0x4D414E59: // YNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.PickUpSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.PickUpSound);
                }
                case 0x4D414E5A: // ZNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.PutDownSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.PutDownSound);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.Value = dataFrame.ReadUInt32();
                    item.Weight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.Weight);
                }
                case 0x54495053: // SPIT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.BaseCost = dataFrame.ReadUInt32();
                    item.Flags = EnumBinaryTranslation<SpellDataFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Type = EnumBinaryTranslation<SpellType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.ChargeTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.CastType = EnumBinaryTranslation<CastType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.TargetType = EnumBinaryTranslation<TargetType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.CastDuration = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Range = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.HalfCostPerk = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.HalfCostPerk);
                }
                case 0x44494645: // EFID
                case 0x54494645: // EFIT
                case 0x41445443: // CTDA
                {
                    item.Effects.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Effect_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out Effect listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<Effect>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.Effects);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            IScrollInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IScrollInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Scroll)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Scroll)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ScrollCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ScrollCommon Instance = new ScrollCommon();

        public Scroll.Mask<bool> GetEqualsMask(
            IScrollGetter item,
            IScrollGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Scroll.Mask<bool>(false);
            ((ScrollCommon)((IScrollGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScrollGetter item,
            IScrollGetter rhs,
            Scroll.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.MenuDisplayObject = object.Equals(item.MenuDisplayObject, rhs.MenuDisplayObject);
            ret.EquipmentType = object.Equals(item.EquipmentType, rhs.EquipmentType);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PickUpSound = object.Equals(item.PickUpSound, rhs.PickUpSound);
            ret.PutDownSound = object.Equals(item.PutDownSound, rhs.PutDownSound);
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.BaseCost = item.BaseCost == rhs.BaseCost;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.ChargeTime = item.ChargeTime.EqualsWithin(rhs.ChargeTime);
            ret.CastType = item.CastType == rhs.CastType;
            ret.TargetType = item.TargetType == rhs.TargetType;
            ret.CastDuration = item.CastDuration.EqualsWithin(rhs.CastDuration);
            ret.Range = item.Range.EqualsWithin(rhs.Range);
            ret.HalfCostPerk = object.Equals(item.HalfCostPerk, rhs.HalfCostPerk);
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            ret.SPITDataTypeState = item.SPITDataTypeState == rhs.SPITDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IScrollGetter item,
            string? name = null,
            Scroll.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScrollGetter item,
            FileGeneration fg,
            string? name = null,
            Scroll.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Scroll =>");
            }
            else
            {
                fg.AppendLine($"{name} (Scroll) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScrollGetter item,
            FileGeneration fg,
            Scroll.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords.TryGet(out var KeywordsItem))
            {
                fg.AppendLine("Keywords =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.MenuDisplayObject ?? true)
                && item.MenuDisplayObject.TryGet(out var MenuDisplayObjectItem))
            {
                fg.AppendItem(MenuDisplayObjectItem, "MenuDisplayObject");
            }
            if ((printMask?.EquipmentType ?? true)
                && item.EquipmentType.TryGet(out var EquipmentTypeItem))
            {
                fg.AppendItem(EquipmentTypeItem, "EquipmentType");
            }
            if ((printMask?.Description ?? true)
                && item.Description.TryGet(out var DescriptionItem))
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible.TryGet(out var DestructibleItem))
            {
                DestructibleItem?.ToString(fg, "Destructible");
            }
            if ((printMask?.PickUpSound ?? true)
                && item.PickUpSound.TryGet(out var PickUpSoundItem))
            {
                fg.AppendItem(PickUpSoundItem, "PickUpSound");
            }
            if ((printMask?.PutDownSound ?? true)
                && item.PutDownSound.TryGet(out var PutDownSoundItem))
            {
                fg.AppendItem(PutDownSoundItem, "PutDownSound");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendItem(item.Value, "Value");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendItem(item.Weight, "Weight");
            }
            if (printMask?.BaseCost ?? true)
            {
                fg.AppendItem(item.BaseCost, "BaseCost");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendItem(item.Type, "Type");
            }
            if (printMask?.ChargeTime ?? true)
            {
                fg.AppendItem(item.ChargeTime, "ChargeTime");
            }
            if (printMask?.CastType ?? true)
            {
                fg.AppendItem(item.CastType, "CastType");
            }
            if (printMask?.TargetType ?? true)
            {
                fg.AppendItem(item.TargetType, "TargetType");
            }
            if (printMask?.CastDuration ?? true)
            {
                fg.AppendItem(item.CastDuration, "CastDuration");
            }
            if (printMask?.Range ?? true)
            {
                fg.AppendItem(item.Range, "Range");
            }
            if (printMask?.HalfCostPerk ?? true)
            {
                fg.AppendItem(item.HalfCostPerk, "HalfCostPerk");
            }
            if (printMask?.Effects?.Overall ?? true)
            {
                fg.AppendLine("Effects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Effects)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
            if (printMask?.SPITDataTypeState ?? true)
            {
                fg.AppendItem(item.SPITDataTypeState, "SPITDataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IScrollGetter item,
            Scroll.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Keywords?.Overall.HasValue ?? false && checkMask.Keywords!.Overall.Value != (item.Keywords != null)) return false;
            if (checkMask.MenuDisplayObject.HasValue && checkMask.MenuDisplayObject.Value != (item.MenuDisplayObject.FormKey != null)) return false;
            if (checkMask.EquipmentType.HasValue && checkMask.EquipmentType.Value != (item.EquipmentType.FormKey != null)) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != (item.Description != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Destructible?.Overall.HasValue ?? false && checkMask.Destructible.Overall.Value != (item.Destructible != null)) return false;
            if (checkMask.Destructible?.Specific != null && (item.Destructible == null || !item.Destructible.HasBeenSet(checkMask.Destructible.Specific))) return false;
            if (checkMask.PickUpSound.HasValue && checkMask.PickUpSound.Value != (item.PickUpSound.FormKey != null)) return false;
            if (checkMask.PutDownSound.HasValue && checkMask.PutDownSound.Value != (item.PutDownSound.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IScrollGetter item,
            Scroll.Mask<bool> mask)
        {
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds.Mask<bool>?>(true, item.ObjectBounds?.GetHasBeenSetMask());
            mask.Name = (item.Name != null);
            mask.Keywords = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Keywords != null), default);
            mask.MenuDisplayObject = (item.MenuDisplayObject.FormKey != null);
            mask.EquipmentType = (item.EquipmentType.FormKey != null);
            mask.Description = (item.Description != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            var itemDestructible = item.Destructible;
            mask.Destructible = new MaskItem<bool, Destructible.Mask<bool>?>(itemDestructible != null, itemDestructible?.GetHasBeenSetMask());
            mask.PickUpSound = (item.PickUpSound.FormKey != null);
            mask.PutDownSound = (item.PutDownSound.FormKey != null);
            mask.Value = true;
            mask.Weight = true;
            mask.BaseCost = true;
            mask.Flags = true;
            mask.Type = true;
            mask.ChargeTime = true;
            mask.CastType = true;
            mask.TargetType = true;
            mask.CastDuration = true;
            mask.Range = true;
            mask.HalfCostPerk = true;
            var EffectsItem = item.Effects;
            mask.Effects = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Effect.Mask<bool>?>>?>(true, EffectsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Effect.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.DATADataTypeState = true;
            mask.SPITDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Scroll_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Scroll_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Scroll_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Scroll_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Scroll_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Scroll_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Scroll_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Scroll_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Scroll_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Scroll_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Scroll_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Scroll_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScrollGetter? lhs,
            IScrollGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.Keywords.SequenceEqual(rhs.Keywords)) return false;
            if (!lhs.MenuDisplayObject.Equals(rhs.MenuDisplayObject)) return false;
            if (!lhs.EquipmentType.Equals(rhs.EquipmentType)) return false;
            if (!string.Equals(lhs.Description, rhs.Description)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!object.Equals(lhs.Destructible, rhs.Destructible)) return false;
            if (!lhs.PickUpSound.Equals(rhs.PickUpSound)) return false;
            if (!lhs.PutDownSound.Equals(rhs.PutDownSound)) return false;
            if (lhs.Value != rhs.Value) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            if (lhs.BaseCost != rhs.BaseCost) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Type != rhs.Type) return false;
            if (!lhs.ChargeTime.EqualsWithin(rhs.ChargeTime)) return false;
            if (lhs.CastType != rhs.CastType) return false;
            if (lhs.TargetType != rhs.TargetType) return false;
            if (!lhs.CastDuration.EqualsWithin(rhs.CastDuration)) return false;
            if (!lhs.Range.EqualsWithin(rhs.Range)) return false;
            if (!lhs.HalfCostPerk.Equals(rhs.HalfCostPerk)) return false;
            if (!lhs.Effects.SequenceEqual(rhs.Effects)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            if (lhs.SPITDataTypeState != rhs.SPITDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IScrollGetter?)lhs,
                rhs: rhs as IScrollGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IScrollGetter?)lhs,
                rhs: rhs as IScrollGetter);
        }
        
        public virtual int GetHashCode(IScrollGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Keywords);
            if (item.MenuDisplayObject.TryGet(out var MenuDisplayObjectitem))
            {
                hash.Add(MenuDisplayObjectitem);
            }
            if (item.EquipmentType.TryGet(out var EquipmentTypeitem))
            {
                hash.Add(EquipmentTypeitem);
            }
            if (item.Description.TryGet(out var Descriptionitem))
            {
                hash.Add(Descriptionitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Destructible.TryGet(out var Destructibleitem))
            {
                hash.Add(Destructibleitem);
            }
            if (item.PickUpSound.TryGet(out var PickUpSounditem))
            {
                hash.Add(PickUpSounditem);
            }
            if (item.PutDownSound.TryGet(out var PutDownSounditem))
            {
                hash.Add(PutDownSounditem);
            }
            hash.Add(item.Value);
            hash.Add(item.Weight);
            hash.Add(item.BaseCost);
            hash.Add(item.Flags);
            hash.Add(item.Type);
            hash.Add(item.ChargeTime);
            hash.Add(item.CastType);
            hash.Add(item.TargetType);
            hash.Add(item.CastDuration);
            hash.Add(item.Range);
            hash.Add(item.HalfCostPerk);
            hash.Add(item.Effects);
            hash.Add(item.DATADataTypeState);
            hash.Add(item.SPITDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IScrollGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IScrollGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Scroll.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IScrollGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Keywords.TryGet(out var KeywordsItem))
            {
                foreach (var item in KeywordsItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.MenuDisplayObject.FormKey.TryGet(out var MenuDisplayObjectKey))
            {
                yield return MenuDisplayObjectKey;
            }
            if (obj.EquipmentType.FormKey.TryGet(out var EquipmentTypeKey))
            {
                yield return EquipmentTypeKey;
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Destructible.TryGet(out var DestructibleItems))
            {
                foreach (var item in DestructibleItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.PickUpSound.FormKey.TryGet(out var PickUpSoundKey))
            {
                yield return PickUpSoundKey;
            }
            if (obj.PutDownSound.FormKey.TryGet(out var PutDownSoundKey))
            {
                yield return PutDownSoundKey;
            }
            yield return obj.HalfCostPerk.FormKey;
            foreach (var item in obj.Effects.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IScrollGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Scroll obj, Scroll rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Scroll(getNextFormKey());
            ret.DeepCopyIn((Scroll)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Scroll)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class ScrollSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ScrollSetterTranslationCommon Instance = new ScrollSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IScrollInternal item,
            IScrollGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IScroll item,
            IScrollGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Scroll_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Scroll_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Scroll_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                            .Select(r => (IFormLink<Keyword>)new FormLink<Keyword>(r.FormKey))
                            .ToExtendedList<IFormLink<Keyword>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.MenuDisplayObject) ?? true))
            {
                item.MenuDisplayObject = rhs.MenuDisplayObject.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.EquipmentType) ?? true))
            {
                item.EquipmentType = rhs.EquipmentType.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Scroll_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Scroll_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Scroll_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible.TryGet(out var rhsDestructible))
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Scroll_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.PickUpSound) ?? true))
            {
                item.PickUpSound = rhs.PickUpSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.PutDownSound) ?? true))
            {
                item.PutDownSound = rhs.PutDownSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.BaseCost) ?? true))
            {
                item.BaseCost = rhs.BaseCost;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.ChargeTime) ?? true))
            {
                item.ChargeTime = rhs.ChargeTime;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.CastType) ?? true))
            {
                item.CastType = rhs.CastType;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.TargetType) ?? true))
            {
                item.TargetType = rhs.TargetType;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.CastDuration) ?? true))
            {
                item.CastDuration = rhs.CastDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Range) ?? true))
            {
                item.Range = rhs.Range;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.HalfCostPerk) ?? true))
            {
                item.HalfCostPerk = rhs.HalfCostPerk.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.Effects) ?? true))
            {
                errorMask?.PushIndex((int)Scroll_FieldIndex.Effects);
                try
                {
                    item.Effects.SetTo(
                        rhs.Effects
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)Scroll_FieldIndex.SPITDataTypeState) ?? true))
            {
                item.SPITDataTypeState = rhs.SPITDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IScrollInternal)item,
                rhs: (IScrollGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IScroll)item,
                rhs: (IScrollGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IScrollInternal)item,
                rhs: (IScrollGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IScroll)item,
                rhs: (IScrollGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Scroll DeepCopy(
            IScrollGetter item,
            Scroll.TranslationMask? copyMask = null)
        {
            Scroll ret = (Scroll)((ScrollCommon)((IScrollGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Scroll DeepCopy(
            IScrollGetter item,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? copyMask = null)
        {
            Scroll ret = (Scroll)((ScrollCommon)((IScrollGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Scroll DeepCopy(
            IScrollGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Scroll ret = (Scroll)((ScrollCommon)((IScrollGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Scroll
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Scroll_Registration.Instance;
        public new static Scroll_Registration Registration => Scroll_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ScrollCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ScrollSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ScrollSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ScrollXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ScrollXmlWriteTranslation Instance = new ScrollXmlWriteTranslation();

        public static void WriteToNodeXml(
            IScrollGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.ObjectBounds) ?? true))
            {
                var ObjectBoundsItem = item.ObjectBounds;
                ((ObjectBoundsXmlWriteTranslation)((IXmlItem)ObjectBoundsItem).XmlWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    node: node,
                    name: nameof(item.ObjectBounds),
                    fieldIndex: (int)Scroll_FieldIndex.ObjectBounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Scroll_FieldIndex.ObjectBounds));
            }
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.Name) ?? true))
            {
                Mutagen.Bethesda.Xml.TranslatedStringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Scroll_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Keywords != null)
                && (translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.Keywords) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Keywords),
                    item: item.Keywords,
                    fieldIndex: (int)Scroll_FieldIndex.Keywords,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Scroll_FieldIndex.Keywords),
                    transl: (XElement subNode, IFormLinkGetter<IKeywordGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.MenuDisplayObject.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.MenuDisplayObject) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MenuDisplayObject),
                    item: item.MenuDisplayObject.FormKey.Value,
                    fieldIndex: (int)Scroll_FieldIndex.MenuDisplayObject,
                    errorMask: errorMask);
            }
            if ((item.EquipmentType.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.EquipmentType) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EquipmentType),
                    item: item.EquipmentType.FormKey.Value,
                    fieldIndex: (int)Scroll_FieldIndex.EquipmentType,
                    errorMask: errorMask);
            }
            if ((item.Description != null)
                && (translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)Scroll_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Scroll_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Scroll_FieldIndex.Model));
                }
            }
            if ((item.Destructible != null)
                && (translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.Destructible) ?? true))
            {
                if (item.Destructible.TryGet(out var DestructibleItem))
                {
                    ((DestructibleXmlWriteTranslation)((IXmlItem)DestructibleItem).XmlWriteTranslator).Write(
                        item: DestructibleItem,
                        node: node,
                        name: nameof(item.Destructible),
                        fieldIndex: (int)Scroll_FieldIndex.Destructible,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Scroll_FieldIndex.Destructible));
                }
            }
            if ((item.PickUpSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.PickUpSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PickUpSound),
                    item: item.PickUpSound.FormKey.Value,
                    fieldIndex: (int)Scroll_FieldIndex.PickUpSound,
                    errorMask: errorMask);
            }
            if ((item.PutDownSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.PutDownSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PutDownSound),
                    item: item.PutDownSound.FormKey.Value,
                    fieldIndex: (int)Scroll_FieldIndex.PutDownSound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.Value) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Value),
                    item: item.Value,
                    fieldIndex: (int)Scroll_FieldIndex.Value,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.Weight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Weight),
                    item: item.Weight,
                    fieldIndex: (int)Scroll_FieldIndex.Weight,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.BaseCost) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseCost),
                    item: item.BaseCost,
                    fieldIndex: (int)Scroll_FieldIndex.BaseCost,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<SpellDataFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Scroll_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.Type) ?? true))
            {
                EnumXmlTranslation<SpellType>.Instance.Write(
                    node: node,
                    name: nameof(item.Type),
                    item: item.Type,
                    fieldIndex: (int)Scroll_FieldIndex.Type,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.ChargeTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ChargeTime),
                    item: item.ChargeTime,
                    fieldIndex: (int)Scroll_FieldIndex.ChargeTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.CastType) ?? true))
            {
                EnumXmlTranslation<CastType>.Instance.Write(
                    node: node,
                    name: nameof(item.CastType),
                    item: item.CastType,
                    fieldIndex: (int)Scroll_FieldIndex.CastType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.TargetType) ?? true))
            {
                EnumXmlTranslation<TargetType>.Instance.Write(
                    node: node,
                    name: nameof(item.TargetType),
                    item: item.TargetType,
                    fieldIndex: (int)Scroll_FieldIndex.TargetType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.CastDuration) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CastDuration),
                    item: item.CastDuration,
                    fieldIndex: (int)Scroll_FieldIndex.CastDuration,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.Range) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Range),
                    item: item.Range,
                    fieldIndex: (int)Scroll_FieldIndex.Range,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.HalfCostPerk) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HalfCostPerk),
                    item: item.HalfCostPerk.FormKey,
                    fieldIndex: (int)Scroll_FieldIndex.HalfCostPerk,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.Effects) ?? true))
            {
                ListXmlTranslation<IEffectGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Effects),
                    item: item.Effects,
                    fieldIndex: (int)Scroll_FieldIndex.Effects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Scroll_FieldIndex.Effects),
                    transl: (XElement subNode, IEffectGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((EffectXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Scroll.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Scroll_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Scroll_FieldIndex.SPITDataTypeState) ?? true))
            {
                EnumXmlTranslation<Scroll.SPITDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.SPITDataTypeState),
                    item: item.SPITDataTypeState,
                    fieldIndex: (int)Scroll_FieldIndex.SPITDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IScrollGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Scroll");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Scroll");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IScrollGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IScrollGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IScrollGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ScrollXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static ScrollXmlCreateTranslation Instance = new ScrollXmlCreateTranslation();

        public static void FillPublicXml(
            IScrollInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ScrollXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IScrollInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ObjectBounds":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.ObjectBounds);
                    try
                    {
                        item.ObjectBounds = LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Scroll_FieldIndex.ObjectBounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keywords":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.Keywords);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Keyword>>.Instance.Parse(
                            node: node,
                            enumer: out var KeywordsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Keywords = KeywordsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Keywords = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MenuDisplayObject":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.MenuDisplayObject);
                    try
                    {
                        item.MenuDisplayObject = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EquipmentType":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.EquipmentType);
                    try
                    {
                        item.EquipmentType = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.Description);
                    try
                    {
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Scroll_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Destructible":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.Destructible);
                    try
                    {
                        item.Destructible = LoquiXmlTranslation<Destructible>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Scroll_FieldIndex.Destructible));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PickUpSound":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.PickUpSound);
                    try
                    {
                        item.PickUpSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PutDownSound":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.PutDownSound);
                    try
                    {
                        item.PutDownSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Value":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.Value);
                    try
                    {
                        item.Value = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weight":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.Weight);
                    try
                    {
                        item.Weight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BaseCost":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.BaseCost);
                    try
                    {
                        item.BaseCost = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<SpellDataFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Type":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.Type);
                    try
                    {
                        item.Type = EnumXmlTranslation<SpellType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ChargeTime":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.ChargeTime);
                    try
                    {
                        item.ChargeTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CastType":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.CastType);
                    try
                    {
                        item.CastType = EnumXmlTranslation<CastType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TargetType":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.TargetType);
                    try
                    {
                        item.TargetType = EnumXmlTranslation<TargetType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CastDuration":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.CastDuration);
                    try
                    {
                        item.CastDuration = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Range":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.Range);
                    try
                    {
                        item.Range = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HalfCostPerk":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.HalfCostPerk);
                    try
                    {
                        item.HalfCostPerk = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Effects":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.Effects);
                    try
                    {
                        if (ListXmlTranslation<Effect>.Instance.Parse(
                            node: node,
                            enumer: out var EffectsItem,
                            transl: LoquiXmlTranslation<Effect>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Effects.SetTo(EffectsItem);
                        }
                        else
                        {
                            item.Effects.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<Scroll.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SPITDataTypeState":
                    errorMask?.PushIndex((int)Scroll_FieldIndex.SPITDataTypeState);
                    try
                    {
                        item.SPITDataTypeState = EnumXmlTranslation<Scroll.SPITDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class ScrollXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IScrollGetter item,
            XElement node,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ScrollXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Scroll.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IScrollGetter item,
            string path,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScrollGetter item,
            Stream stream,
            out Scroll.ErrorMask errorMask,
            Scroll.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ScrollBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ScrollBinaryWriteTranslation Instance = new ScrollBinaryWriteTranslation();

        public static void WriteEmbedded(
            IScrollGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IScrollGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Scroll_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: Scroll_Registration.KSIZ_HEADER,
                counterLength: 4,
                recordType: recordTypeConverter.ConvertToCustom(Scroll_Registration.KWDA_HEADER),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MenuDisplayObject,
                header: recordTypeConverter.ConvertToCustom(Scroll_Registration.MDOB_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EquipmentType,
                header: recordTypeConverter.ConvertToCustom(Scroll_Registration.ETYP_HEADER));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(Scroll_Registration.DESC_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Destructible.TryGet(out var DestructibleItem))
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PickUpSound,
                header: recordTypeConverter.ConvertToCustom(Scroll_Registration.YNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PutDownSound,
                header: recordTypeConverter.ConvertToCustom(Scroll_Registration.ZNAM_HEADER));
            using (HeaderExport.ExportSubrecordHeader(writer, recordTypeConverter.ConvertToCustom(Scroll_Registration.DATA_HEADER)))
            {
                writer.Write(item.Value);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight);
            }
            using (HeaderExport.ExportSubrecordHeader(writer, recordTypeConverter.ConvertToCustom(Scroll_Registration.SPIT_HEADER)))
            {
                writer.Write(item.BaseCost);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<SpellDataFlag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<SpellType>.Instance.Write(
                    writer,
                    item.Type,
                    length: 4);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ChargeTime);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<CastType>.Instance.Write(
                    writer,
                    item.CastType,
                    length: 4);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<TargetType>.Instance.Write(
                    writer,
                    item.TargetType,
                    length: 4);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CastDuration);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Range);
                Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HalfCostPerk);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IEffectGetter>.Instance.Write(
                writer: writer,
                items: item.Effects,
                transl: (MutagenWriter subWriter, IEffectGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((EffectBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IScrollGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(Scroll_Registration.SCRL_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IScrollGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IScrollGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IScrollGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ScrollBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static ScrollBinaryCreateTranslation Instance = new ScrollBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ScrollBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class ScrollBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IScrollGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Scroll_Registration.Instance;
        public new static Scroll_Registration Registration => Scroll_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ScrollCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ScrollSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScrollGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => ScrollCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ScrollCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScrollCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScrollCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ScrollXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ScrollXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ScrollBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScrollBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new BinaryMemoryReadStream(_data.Slice(_ObjectBoundsLocation!.Value.Min)), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public TranslatedString? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(TranslatedString?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        #region MenuDisplayObject
        private int? _MenuDisplayObjectLocation;
        public bool MenuDisplayObject_IsSet => _MenuDisplayObjectLocation.HasValue;
        public IFormLinkNullableGetter<IStaticGetter> MenuDisplayObject => _MenuDisplayObjectLocation.HasValue ? new FormLinkNullable<IStaticGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _MenuDisplayObjectLocation.Value, _package.Meta)))) : FormLinkNullable<IStaticGetter>.Null;
        #endregion
        #region EquipmentType
        private int? _EquipmentTypeLocation;
        public bool EquipmentType_IsSet => _EquipmentTypeLocation.HasValue;
        public IFormLinkNullableGetter<IEquipTypeGetter> EquipmentType => _EquipmentTypeLocation.HasValue ? new FormLinkNullable<IEquipTypeGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EquipmentTypeLocation.Value, _package.Meta)))) : FormLinkNullable<IEquipTypeGetter>.Null;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.Meta)) : default(string?);
        #endregion
        public IModelGetter? Model { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        #region PickUpSound
        private int? _PickUpSoundLocation;
        public bool PickUpSound_IsSet => _PickUpSoundLocation.HasValue;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> PickUpSound => _PickUpSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PickUpSoundLocation.Value, _package.Meta)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region PutDownSound
        private int? _PutDownSoundLocation;
        public bool PutDownSound_IsSet => _PutDownSoundLocation.HasValue;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> PutDownSound => _PutDownSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PutDownSoundLocation.Value, _package.Meta)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        private int? _DATALocation;
        public Scroll.DATADataType DATADataTypeState { get; private set; }
        #region Value
        private int _ValueLocation => _DATALocation!.Value + 0x0;
        private bool _Value_IsSet => _DATALocation.HasValue;
        public UInt32 Value => _Value_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_ValueLocation, 4)) : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation!.Value + 0x4;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? SpanExt.GetFloat(_data.Slice(_WeightLocation, 4)) : default;
        #endregion
        private int? _SPITLocation;
        public Scroll.SPITDataType SPITDataTypeState { get; private set; }
        #region BaseCost
        private int _BaseCostLocation => _SPITLocation!.Value + 0x0;
        private bool _BaseCost_IsSet => _SPITLocation.HasValue;
        public UInt32 BaseCost => _BaseCost_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(_BaseCostLocation, 4)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _SPITLocation!.Value + 0x4;
        private bool _Flags_IsSet => _SPITLocation.HasValue;
        public SpellDataFlag Flags => _Flags_IsSet ? (SpellDataFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region Type
        private int _TypeLocation => _SPITLocation!.Value + 0x8;
        private bool _Type_IsSet => _SPITLocation.HasValue;
        public SpellType Type => _Type_IsSet ? (SpellType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TypeLocation, 0x4)) : default;
        #endregion
        #region ChargeTime
        private int _ChargeTimeLocation => _SPITLocation!.Value + 0xC;
        private bool _ChargeTime_IsSet => _SPITLocation.HasValue;
        public Single ChargeTime => _ChargeTime_IsSet ? SpanExt.GetFloat(_data.Slice(_ChargeTimeLocation, 4)) : default;
        #endregion
        #region CastType
        private int _CastTypeLocation => _SPITLocation!.Value + 0x10;
        private bool _CastType_IsSet => _SPITLocation.HasValue;
        public CastType CastType => _CastType_IsSet ? (CastType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_CastTypeLocation, 0x4)) : default;
        #endregion
        #region TargetType
        private int _TargetTypeLocation => _SPITLocation!.Value + 0x14;
        private bool _TargetType_IsSet => _SPITLocation.HasValue;
        public TargetType TargetType => _TargetType_IsSet ? (TargetType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TargetTypeLocation, 0x4)) : default;
        #endregion
        #region CastDuration
        private int _CastDurationLocation => _SPITLocation!.Value + 0x18;
        private bool _CastDuration_IsSet => _SPITLocation.HasValue;
        public Single CastDuration => _CastDuration_IsSet ? SpanExt.GetFloat(_data.Slice(_CastDurationLocation, 4)) : default;
        #endregion
        #region Range
        private int _RangeLocation => _SPITLocation!.Value + 0x1C;
        private bool _Range_IsSet => _SPITLocation.HasValue;
        public Single Range => _Range_IsSet ? SpanExt.GetFloat(_data.Slice(_RangeLocation, 4)) : default;
        #endregion
        #region HalfCostPerk
        private int _HalfCostPerkLocation => _SPITLocation!.Value + 0x20;
        private bool _HalfCostPerk_IsSet => _SPITLocation.HasValue;
        public IFormLinkGetter<IPerkGetter> HalfCostPerk => _HalfCostPerk_IsSet ? new FormLink<IPerkGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_HalfCostPerkLocation, 0x4)))) : FormLink<IPerkGetter>.Null;
        #endregion
        public IReadOnlyList<IEffectGetter> Effects { get; private set; } = ListExt.Empty<EffectBinaryOverlay>();
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ScrollBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ScrollBinaryOverlay ScrollFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new ScrollBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ScrollBinaryOverlay ScrollFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ScrollFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x444E424F: // OBND
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.ObjectBounds);
                }
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.Name);
                }
                case 0x5A49534B: // KSIZ
                {
                    var count = BinaryPrimitives.ReadUInt32LittleEndian(_package.Meta.ReadSubrecordFrame(stream).Content);
                    var subMeta = _package.Meta.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Keywords = BinaryOverlaySetList<IFormLinkGetter<IKeywordGetter>>.FactoryByCount(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 0x4,
                        count: count,
                        getter: (s, p) => new FormLink<IKeywordGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.Keywords);
                }
                case 0x424F444D: // MDOB
                {
                    _MenuDisplayObjectLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.MenuDisplayObject);
                }
                case 0x50595445: // ETYP
                {
                    _EquipmentTypeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.EquipmentType);
                }
                case 0x43534544: // DESC
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.Description);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.Model);
                }
                case 0x54534544: // DEST
                case 0x44545344: // DSTD
                case 0x4C444D44: // DMDL
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.Destructible);
                }
                case 0x4D414E59: // YNAM
                {
                    _PickUpSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.PickUpSound);
                }
                case 0x4D414E5A: // ZNAM
                {
                    _PutDownSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.PutDownSound);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.Weight);
                }
                case 0x54495053: // SPIT
                {
                    _SPITLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.HalfCostPerk);
                }
                case 0x44494645: // EFID
                case 0x54494645: // EFIT
                case 0x41445443: // CTDA
                {
                    this.Effects = this.ParseRepeatedTypelessSubrecord<EffectBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: Effect_Registration.TriggeringRecordTypes,
                        factory:  EffectBinaryOverlay.EffectFactory);
                    return TryGet<int?>.Succeed((int)Scroll_FieldIndex.Effects);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScrollMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

