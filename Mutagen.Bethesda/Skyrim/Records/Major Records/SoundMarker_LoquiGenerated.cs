/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class SoundMarker :
        SkyrimMajorRecord,
        ISoundMarkerInternal,
        ILoquiObjectSetter<SoundMarker>,
        IEquatable<SoundMarker>,
        IEqualsMask
    {
        #region Ctor
        protected SoundMarker()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectBounds? _ObjectBounds;
        public ObjectBounds? ObjectBounds
        {
            get => _ObjectBounds;
            set => _ObjectBounds = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? ISoundMarkerGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #region FNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _FNAM;
        public Byte[]? FNAM
        {
            get => this._FNAM;
            set => this._FNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISoundMarkerGetter.FNAM => this.FNAM;
        #endregion
        #region SNDD
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _SNDD;
        public Byte[]? SNDD
        {
            get => this._SNDD;
            set => this._SNDD = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISoundMarkerGetter.SNDD => this.SNDD;
        #endregion
        #region SoundDescriptor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<SoundDescriptor> _SoundDescriptor = new FormLinkNullable<SoundDescriptor>();
        public IFormLinkNullable<SoundDescriptor> SoundDescriptor => this._SoundDescriptor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> ISoundMarkerGetter.SoundDescriptor => this.SoundDescriptor;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SoundMarkerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISoundMarkerGetter rhs)) return false;
            return ((SoundMarkerCommon)((ISoundMarkerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(SoundMarker obj)
        {
            return ((SoundMarkerCommon)((ISoundMarkerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SoundMarkerCommon)((ISoundMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => SoundMarkerXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SoundMarkerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new SoundMarker CreateFromXml(
            XElement node,
            SoundMarker.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SoundMarker CreateFromXml(
            XElement node,
            out SoundMarker.ErrorMask errorMask,
            SoundMarker.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoundMarker.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SoundMarker CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new SoundMarker();
            ((SoundMarkerSetterCommon)((ISoundMarkerGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SoundMarker CreateFromXml(
            string path,
            SoundMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SoundMarker CreateFromXml(
            string path,
            out SoundMarker.ErrorMask errorMask,
            SoundMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoundMarker CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            SoundMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SoundMarker CreateFromXml(
            Stream stream,
            SoundMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SoundMarker CreateFromXml(
            Stream stream,
            out SoundMarker.ErrorMask errorMask,
            SoundMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoundMarker CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SoundMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.FNAM = initialValue;
                this.SNDD = initialValue;
                this.SoundDescriptor = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem SkyrimMajorRecordFlags,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem FNAM,
                TItem SNDD,
                TItem SoundDescriptor)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.FNAM = FNAM;
                this.SNDD = SNDD;
                this.SoundDescriptor = SoundDescriptor;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem FNAM;
            public TItem SNDD;
            public TItem SoundDescriptor;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                if (!object.Equals(this.SNDD, rhs.SNDD)) return false;
                if (!object.Equals(this.SoundDescriptor, rhs.SoundDescriptor)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.FNAM);
                hash.Add(this.SNDD);
                hash.Add(this.SoundDescriptor);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.FNAM)) return false;
                if (!eval(this.SNDD)) return false;
                if (!eval(this.SoundDescriptor)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.FNAM)) return true;
                if (eval(this.SNDD)) return true;
                if (eval(this.SoundDescriptor)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundMarker.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.FNAM = eval(this.FNAM);
                obj.SNDD = eval(this.SNDD);
                obj.SoundDescriptor = eval(this.SoundDescriptor);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SoundMarker.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SoundMarker.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SoundMarker.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.FNAM ?? true)
                    {
                        fg.AppendItem(FNAM, "FNAM");
                    }
                    if (printMask?.SNDD ?? true)
                    {
                        fg.AppendItem(SNDD, "SNDD");
                    }
                    if (printMask?.SoundDescriptor ?? true)
                    {
                        fg.AppendItem(SoundDescriptor, "SoundDescriptor");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? FNAM;
            public Exception? SNDD;
            public Exception? SoundDescriptor;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SoundMarker_FieldIndex enu = (SoundMarker_FieldIndex)index;
                switch (enu)
                {
                    case SoundMarker_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case SoundMarker_FieldIndex.FNAM:
                        return FNAM;
                    case SoundMarker_FieldIndex.SNDD:
                        return SNDD;
                    case SoundMarker_FieldIndex.SoundDescriptor:
                        return SoundDescriptor;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SoundMarker_FieldIndex enu = (SoundMarker_FieldIndex)index;
                switch (enu)
                {
                    case SoundMarker_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case SoundMarker_FieldIndex.FNAM:
                        this.FNAM = ex;
                        break;
                    case SoundMarker_FieldIndex.SNDD:
                        this.SNDD = ex;
                        break;
                    case SoundMarker_FieldIndex.SoundDescriptor:
                        this.SoundDescriptor = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SoundMarker_FieldIndex enu = (SoundMarker_FieldIndex)index;
                switch (enu)
                {
                    case SoundMarker_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case SoundMarker_FieldIndex.FNAM:
                        this.FNAM = (Exception?)obj;
                        break;
                    case SoundMarker_FieldIndex.SNDD:
                        this.SNDD = (Exception?)obj;
                        break;
                    case SoundMarker_FieldIndex.SoundDescriptor:
                        this.SoundDescriptor = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (FNAM != null) return true;
                if (SNDD != null) return true;
                if (SoundDescriptor != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                fg.AppendItem(FNAM, "FNAM");
                fg.AppendItem(SNDD, "SNDD");
                fg.AppendItem(SoundDescriptor, "SoundDescriptor");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.FNAM = this.FNAM.Combine(rhs.FNAM);
                ret.SNDD = this.SNDD.Combine(rhs.SNDD);
                ret.SoundDescriptor = this.SoundDescriptor.Combine(rhs.SoundDescriptor);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, ObjectBounds.TranslationMask?> ObjectBounds;
            public bool FNAM;
            public bool SNDD;
            public bool SoundDescriptor;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.ObjectBounds = new MaskItem<bool, ObjectBounds.TranslationMask?>(defaultOn, null);
                this.FNAM = defaultOn;
                this.SNDD = defaultOn;
                this.SoundDescriptor = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
                ret.Add((FNAM, null));
                ret.Add((SNDD, null));
                ret.Add((SoundDescriptor, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = SoundMarker_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => SoundMarkerCommon.Instance.GetLinks(this);
        public SoundMarker(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public SoundMarker(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public SoundMarker(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundMarkerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new SoundMarker CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static SoundMarker CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SoundMarker();
            ((SoundMarkerSetterCommon)((ISoundMarkerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISoundMarkerGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SoundMarkerSetterCommon)((ISoundMarkerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SoundMarker GetNew()
        {
            return new SoundMarker();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundMarker :
        ISoundMarkerGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<ISoundMarkerInternal>
    {
        new ObjectBounds? ObjectBounds { get; set; }
        new Byte[]? FNAM { get; set; }
        new Byte[]? SNDD { get; set; }
        new IFormLinkNullable<SoundDescriptor> SoundDescriptor { get; }
    }

    public partial interface ISoundMarkerInternal :
        ISkyrimMajorRecordInternal,
        ISoundMarker,
        ISoundMarkerGetter
    {
    }

    public partial interface ISoundMarkerGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<ISoundMarkerGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        IObjectBoundsGetter? ObjectBounds { get; }
        ReadOnlyMemorySlice<Byte>? FNAM { get; }
        ReadOnlyMemorySlice<Byte>? SNDD { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> SoundDescriptor { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SoundMarkerMixIn
    {
        public static void Clear(this ISoundMarkerInternal item)
        {
            ((SoundMarkerSetterCommon)((ISoundMarkerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundMarker.Mask<bool> GetEqualsMask(
            this ISoundMarkerGetter item,
            ISoundMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundMarkerCommon)((ISoundMarkerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISoundMarkerGetter item,
            string? name = null,
            SoundMarker.Mask<bool>? printMask = null)
        {
            return ((SoundMarkerCommon)((ISoundMarkerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISoundMarkerGetter item,
            FileGeneration fg,
            string? name = null,
            SoundMarker.Mask<bool>? printMask = null)
        {
            ((SoundMarkerCommon)((ISoundMarkerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISoundMarkerGetter item,
            SoundMarker.Mask<bool?> checkMask)
        {
            return ((SoundMarkerCommon)((ISoundMarkerGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SoundMarker.Mask<bool> GetHasBeenSetMask(this ISoundMarkerGetter item)
        {
            var ret = new SoundMarker.Mask<bool>(false);
            ((SoundMarkerCommon)((ISoundMarkerGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISoundMarkerGetter item,
            ISoundMarkerGetter rhs)
        {
            return ((SoundMarkerCommon)((ISoundMarkerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISoundMarkerInternal lhs,
            ISoundMarkerGetter rhs,
            out SoundMarker.ErrorMask errorMask,
            SoundMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundMarkerSetterTranslationCommon)((ISoundMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SoundMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundMarkerInternal lhs,
            ISoundMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundMarkerSetterTranslationCommon)((ISoundMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SoundMarker DeepCopy(
            this ISoundMarkerGetter item,
            SoundMarker.TranslationMask? copyMask = null)
        {
            return ((SoundMarkerSetterTranslationCommon)((ISoundMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundMarker DeepCopy(
            this ISoundMarkerGetter item,
            out SoundMarker.ErrorMask errorMask,
            SoundMarker.TranslationMask? copyMask = null)
        {
            return ((SoundMarkerSetterTranslationCommon)((ISoundMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundMarker DeepCopy(
            this ISoundMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundMarkerSetterTranslationCommon)((ISoundMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISoundMarkerInternal item,
            XElement node,
            SoundMarker.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISoundMarkerInternal item,
            XElement node,
            out SoundMarker.ErrorMask errorMask,
            SoundMarker.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoundMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ISoundMarkerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((SoundMarkerSetterCommon)((ISoundMarkerGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundMarkerInternal item,
            string path,
            SoundMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundMarkerInternal item,
            string path,
            out SoundMarker.ErrorMask errorMask,
            SoundMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundMarkerInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            SoundMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISoundMarkerInternal item,
            Stream stream,
            SoundMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundMarkerInternal item,
            Stream stream,
            out SoundMarker.ErrorMask errorMask,
            SoundMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoundMarkerInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SoundMarker.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISoundMarkerInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ISoundMarkerInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundMarkerSetterCommon)((ISoundMarkerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum SoundMarker_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        SkyrimMajorRecordFlags = 4,
        FormVersion = 5,
        Version2 = 6,
        ObjectBounds = 7,
        FNAM = 8,
        SNDD = 9,
        SoundDescriptor = 10,
    }
    #endregion

    #region Registration
    public partial class SoundMarker_Registration : ILoquiRegistration
    {
        public static readonly SoundMarker_Registration Instance = new SoundMarker_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 85,
            version: 0);

        public const string GUID = "2915cf72-d87a-4b5d-bb19-2ec3c3801d6f";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(SoundMarker.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundMarker.ErrorMask);

        public static readonly Type ClassType = typeof(SoundMarker);

        public static readonly Type GetterType = typeof(ISoundMarkerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundMarker);

        public static readonly Type? InternalSetterType = typeof(ISoundMarkerInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.SoundMarker";

        public const string Name = "SoundMarker";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECTBOUNDS":
                    return (ushort)SoundMarker_FieldIndex.ObjectBounds;
                case "FNAM":
                    return (ushort)SoundMarker_FieldIndex.FNAM;
                case "SNDD":
                    return (ushort)SoundMarker_FieldIndex.SNDD;
                case "SOUNDDESCRIPTOR":
                    return (ushort)SoundMarker_FieldIndex.SoundDescriptor;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SoundMarker_FieldIndex enu = (SoundMarker_FieldIndex)index;
            switch (enu)
            {
                case SoundMarker_FieldIndex.ObjectBounds:
                case SoundMarker_FieldIndex.FNAM:
                case SoundMarker_FieldIndex.SNDD:
                case SoundMarker_FieldIndex.SoundDescriptor:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SoundMarker_FieldIndex enu = (SoundMarker_FieldIndex)index;
            switch (enu)
            {
                case SoundMarker_FieldIndex.ObjectBounds:
                    return true;
                case SoundMarker_FieldIndex.FNAM:
                case SoundMarker_FieldIndex.SNDD:
                case SoundMarker_FieldIndex.SoundDescriptor:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SoundMarker_FieldIndex enu = (SoundMarker_FieldIndex)index;
            switch (enu)
            {
                case SoundMarker_FieldIndex.ObjectBounds:
                case SoundMarker_FieldIndex.FNAM:
                case SoundMarker_FieldIndex.SNDD:
                case SoundMarker_FieldIndex.SoundDescriptor:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SoundMarker_FieldIndex enu = (SoundMarker_FieldIndex)index;
            switch (enu)
            {
                case SoundMarker_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case SoundMarker_FieldIndex.FNAM:
                    return "FNAM";
                case SoundMarker_FieldIndex.SNDD:
                    return "SNDD";
                case SoundMarker_FieldIndex.SoundDescriptor:
                    return "SoundDescriptor";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SoundMarker_FieldIndex enu = (SoundMarker_FieldIndex)index;
            switch (enu)
            {
                case SoundMarker_FieldIndex.ObjectBounds:
                case SoundMarker_FieldIndex.FNAM:
                case SoundMarker_FieldIndex.SNDD:
                case SoundMarker_FieldIndex.SoundDescriptor:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SoundMarker_FieldIndex enu = (SoundMarker_FieldIndex)index;
            switch (enu)
            {
                case SoundMarker_FieldIndex.ObjectBounds:
                case SoundMarker_FieldIndex.FNAM:
                case SoundMarker_FieldIndex.SNDD:
                case SoundMarker_FieldIndex.SoundDescriptor:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SoundMarker_FieldIndex enu = (SoundMarker_FieldIndex)index;
            switch (enu)
            {
                case SoundMarker_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case SoundMarker_FieldIndex.FNAM:
                    return typeof(Byte[]);
                case SoundMarker_FieldIndex.SNDD:
                    return typeof(Byte[]);
                case SoundMarker_FieldIndex.SoundDescriptor:
                    return typeof(IFormLinkNullable<SoundDescriptor>);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SoundMarkerXmlWriteTranslation);
        public static readonly RecordType SOUN_HEADER = new RecordType("SOUN");
        public static readonly RecordType OBND_HEADER = new RecordType("OBND");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType SNDD_HEADER = new RecordType("SNDD");
        public static readonly RecordType SDSC_HEADER = new RecordType("SDSC");
        public static readonly RecordType TriggeringRecordType = SOUN_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(SoundMarkerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SoundMarkerSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly SoundMarkerSetterCommon Instance = new SoundMarkerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundMarkerInternal item)
        {
            ClearPartial();
            item.ObjectBounds = null;
            item.FNAM = default;
            item.SNDD = default;
            item.SoundDescriptor.FormKey = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ISoundMarkerInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISoundMarkerInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ISoundMarkerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            ISoundMarkerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    SoundMarkerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (SoundMarker)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (SoundMarker)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => SoundMarker_Registration.SOUN_HEADER;
        protected static void FillBinaryStructs(
            ISoundMarkerInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ISoundMarkerInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x444E424F: // OBND
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)SoundMarker_FieldIndex.ObjectBounds);
                }
                case 0x4D414E46: // FNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FNAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)SoundMarker_FieldIndex.FNAM);
                }
                case 0x44444E53: // SNDD
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.SNDD = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)SoundMarker_FieldIndex.SNDD);
                }
                case 0x43534453: // SDSC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.SoundDescriptor.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)SoundMarker_FieldIndex.SoundDescriptor);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            ISoundMarkerInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ISoundMarkerInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (SoundMarker)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (SoundMarker)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class SoundMarkerCommon : SkyrimMajorRecordCommon
    {
        public new static readonly SoundMarkerCommon Instance = new SoundMarkerCommon();

        public SoundMarker.Mask<bool> GetEqualsMask(
            ISoundMarkerGetter item,
            ISoundMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundMarker.Mask<bool>(false);
            ((SoundMarkerCommon)((ISoundMarkerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundMarkerGetter item,
            ISoundMarkerGetter rhs,
            SoundMarker.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = EqualsMaskHelper.EqualsHelper(
                item.ObjectBounds,
                rhs.ObjectBounds,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FNAM = MemorySliceExt.Equal(item.FNAM, rhs.FNAM);
            ret.SNDD = MemorySliceExt.Equal(item.SNDD, rhs.SNDD);
            ret.SoundDescriptor = object.Equals(item.SoundDescriptor, rhs.SoundDescriptor);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ISoundMarkerGetter item,
            string? name = null,
            SoundMarker.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISoundMarkerGetter item,
            FileGeneration fg,
            string? name = null,
            SoundMarker.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SoundMarker =>");
            }
            else
            {
                fg.AppendLine($"{name} (SoundMarker) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISoundMarkerGetter item,
            FileGeneration fg,
            SoundMarker.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.ObjectBounds?.Overall ?? true)
                && item.ObjectBounds.TryGet(out var ObjectBoundsItem))
            {
                ObjectBoundsItem?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.FNAM ?? true)
                && item.FNAM.TryGet(out var FNAMItem))
            {
                fg.AppendLine($"FNAM => {SpanExt.ToHexString(FNAMItem)}");
            }
            if ((printMask?.SNDD ?? true)
                && item.SNDD.TryGet(out var SNDDItem))
            {
                fg.AppendLine($"SNDD => {SpanExt.ToHexString(SNDDItem)}");
            }
            if ((printMask?.SoundDescriptor ?? true)
                && item.SoundDescriptor.TryGet(out var SoundDescriptorItem))
            {
                fg.AppendItem(SoundDescriptorItem, "SoundDescriptor");
            }
        }
        
        public bool HasBeenSet(
            ISoundMarkerGetter item,
            SoundMarker.Mask<bool?> checkMask)
        {
            if (checkMask.ObjectBounds?.Overall.HasValue ?? false && checkMask.ObjectBounds.Overall.Value != (item.ObjectBounds != null)) return false;
            if (checkMask.ObjectBounds?.Specific != null && (item.ObjectBounds == null || !item.ObjectBounds.HasBeenSet(checkMask.ObjectBounds.Specific))) return false;
            if (checkMask.FNAM.HasValue && checkMask.FNAM.Value != (item.FNAM != null)) return false;
            if (checkMask.SNDD.HasValue && checkMask.SNDD.Value != (item.SNDD != null)) return false;
            if (checkMask.SoundDescriptor.HasValue && checkMask.SoundDescriptor.Value != (item.SoundDescriptor.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ISoundMarkerGetter item,
            SoundMarker.Mask<bool> mask)
        {
            var itemObjectBounds = item.ObjectBounds;
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds.Mask<bool>?>(itemObjectBounds != null, itemObjectBounds?.GetHasBeenSetMask());
            mask.FNAM = (item.FNAM != null);
            mask.SNDD = (item.SNDD != null);
            mask.SoundDescriptor = (item.SoundDescriptor.FormKey != null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static SoundMarker_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundMarker_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (SoundMarker_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (SoundMarker_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (SoundMarker_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (SoundMarker_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (SoundMarker_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (SoundMarker_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new SoundMarker_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SoundMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (SoundMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SoundMarker_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundMarkerGetter? lhs,
            ISoundMarkerGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!MemorySliceExt.Equal(lhs.FNAM, rhs.FNAM)) return false;
            if (!MemorySliceExt.Equal(lhs.SNDD, rhs.SNDD)) return false;
            if (!lhs.SoundDescriptor.Equals(rhs.SoundDescriptor)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISoundMarkerGetter?)lhs,
                rhs: rhs as ISoundMarkerGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISoundMarkerGetter?)lhs,
                rhs: rhs as ISoundMarkerGetter);
        }
        
        public virtual int GetHashCode(ISoundMarkerGetter item)
        {
            var hash = new HashCode();
            if (item.ObjectBounds.TryGet(out var ObjectBoundsitem))
            {
                hash.Add(ObjectBoundsitem);
            }
            if (item.FNAM.TryGet(out var FNAMItem))
            {
                hash.Add(FNAMItem);
            }
            if (item.SNDD.TryGet(out var SNDDItem))
            {
                hash.Add(SNDDItem);
            }
            if (item.SoundDescriptor.TryGet(out var SoundDescriptoritem))
            {
                hash.Add(SoundDescriptoritem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundMarkerGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundMarkerGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SoundMarker.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ISoundMarkerGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.SoundDescriptor;
            yield break;
        }
        
        partial void PostDuplicate(SoundMarker obj, SoundMarker rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new SoundMarker(getNextFormKey());
            ret.DeepCopyIn((SoundMarker)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (SoundMarker)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class SoundMarkerSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly SoundMarkerSetterTranslationCommon Instance = new SoundMarkerSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ISoundMarkerInternal item,
            ISoundMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ISoundMarker item,
            ISoundMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)SoundMarker_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)SoundMarker_FieldIndex.ObjectBounds);
                try
                {
                    if(rhs.ObjectBounds.TryGet(out var rhsObjectBounds))
                    {
                        item.ObjectBounds = rhsObjectBounds.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SoundMarker_FieldIndex.ObjectBounds));
                    }
                    else
                    {
                        item.ObjectBounds = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundMarker_FieldIndex.FNAM) ?? true))
            {
                if(rhs.FNAM.TryGet(out var FNAMrhs))
                {
                    item.FNAM = FNAMrhs.ToArray();
                }
                else
                {
                    item.FNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundMarker_FieldIndex.SNDD) ?? true))
            {
                if(rhs.SNDD.TryGet(out var SNDDrhs))
                {
                    item.SNDD = SNDDrhs.ToArray();
                }
                else
                {
                    item.SNDD = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundMarker_FieldIndex.SoundDescriptor) ?? true))
            {
                item.SoundDescriptor.FormKey = rhs.SoundDescriptor.FormKey;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISoundMarkerInternal)item,
                rhs: (ISoundMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISoundMarker)item,
                rhs: (ISoundMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISoundMarkerInternal)item,
                rhs: (ISoundMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISoundMarker)item,
                rhs: (ISoundMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public SoundMarker DeepCopy(
            ISoundMarkerGetter item,
            SoundMarker.TranslationMask? copyMask = null)
        {
            SoundMarker ret = (SoundMarker)((SoundMarkerCommon)((ISoundMarkerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SoundMarker DeepCopy(
            ISoundMarkerGetter item,
            out SoundMarker.ErrorMask errorMask,
            SoundMarker.TranslationMask? copyMask = null)
        {
            SoundMarker ret = (SoundMarker)((SoundMarkerCommon)((ISoundMarkerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SoundMarker DeepCopy(
            ISoundMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundMarker ret = (SoundMarker)((SoundMarkerCommon)((ISoundMarkerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class SoundMarker
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundMarker_Registration.Instance;
        public new static SoundMarker_Registration Registration => SoundMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SoundMarkerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundMarkerSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SoundMarkerXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static SoundMarkerXmlWriteTranslation Instance = new SoundMarkerXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISoundMarkerGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.ObjectBounds != null)
                && (translationMask?.GetShouldTranslate((int)SoundMarker_FieldIndex.ObjectBounds) ?? true))
            {
                if (item.ObjectBounds.TryGet(out var ObjectBoundsItem))
                {
                    ((ObjectBoundsXmlWriteTranslation)((IXmlItem)ObjectBoundsItem).XmlWriteTranslator).Write(
                        item: ObjectBoundsItem,
                        node: node,
                        name: nameof(item.ObjectBounds),
                        fieldIndex: (int)SoundMarker_FieldIndex.ObjectBounds,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)SoundMarker_FieldIndex.ObjectBounds));
                }
            }
            if ((item.FNAM != null)
                && (translationMask?.GetShouldTranslate((int)SoundMarker_FieldIndex.FNAM) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FNAM),
                    item: item.FNAM.Value,
                    fieldIndex: (int)SoundMarker_FieldIndex.FNAM,
                    errorMask: errorMask);
            }
            if ((item.SNDD != null)
                && (translationMask?.GetShouldTranslate((int)SoundMarker_FieldIndex.SNDD) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SNDD),
                    item: item.SNDD.Value,
                    fieldIndex: (int)SoundMarker_FieldIndex.SNDD,
                    errorMask: errorMask);
            }
            if ((item.SoundDescriptor.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)SoundMarker_FieldIndex.SoundDescriptor) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SoundDescriptor),
                    item: item.SoundDescriptor.FormKey.Value,
                    fieldIndex: (int)SoundMarker_FieldIndex.SoundDescriptor,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ISoundMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.SoundMarker");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.SoundMarker");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISoundMarkerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISoundMarkerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISoundMarkerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class SoundMarkerXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static SoundMarkerXmlCreateTranslation Instance = new SoundMarkerXmlCreateTranslation();

        public static void FillPublicXml(
            ISoundMarkerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SoundMarkerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISoundMarkerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ObjectBounds":
                    errorMask?.PushIndex((int)SoundMarker_FieldIndex.ObjectBounds);
                    try
                    {
                        item.ObjectBounds = LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)SoundMarker_FieldIndex.ObjectBounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FNAM":
                    errorMask?.PushIndex((int)SoundMarker_FieldIndex.FNAM);
                    try
                    {
                        item.FNAM = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SNDD":
                    errorMask?.PushIndex((int)SoundMarker_FieldIndex.SNDD);
                    try
                    {
                        item.SNDD = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoundDescriptor":
                    errorMask?.PushIndex((int)SoundMarker_FieldIndex.SoundDescriptor);
                    try
                    {
                        item.SoundDescriptor.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class SoundMarkerXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISoundMarkerGetter item,
            XElement node,
            out SoundMarker.ErrorMask errorMask,
            SoundMarker.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundMarkerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoundMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISoundMarkerGetter item,
            string path,
            out SoundMarker.ErrorMask errorMask,
            SoundMarker.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISoundMarkerGetter item,
            Stream stream,
            out SoundMarker.ErrorMask errorMask,
            SoundMarker.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SoundMarkerBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static SoundMarkerBinaryWriteTranslation Instance = new SoundMarkerBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ISoundMarkerGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.ObjectBounds.TryGet(out var ObjectBoundsItem))
            {
                ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FNAM,
                header: recordTypeConverter.ConvertToCustom(SoundMarker_Registration.FNAM_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SNDD,
                header: recordTypeConverter.ConvertToCustom(SoundMarker_Registration.SNDD_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SoundDescriptor,
                header: recordTypeConverter.ConvertToCustom(SoundMarker_Registration.SDSC_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            ISoundMarkerGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(SoundMarker_Registration.SOUN_HEADER),
                type: ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISoundMarkerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISoundMarkerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISoundMarkerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SoundMarkerBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static SoundMarkerBinaryCreateTranslation Instance = new SoundMarkerBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class SoundMarkerBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SoundMarkerBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ISoundMarkerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundMarker_Registration.Instance;
        public new static SoundMarker_Registration Registration => SoundMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundMarkerSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISoundMarkerGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => SoundMarkerCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => SoundMarkerXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SoundMarkerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundMarkerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SoundMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private bool _ObjectBounds_IsSet => _ObjectBoundsLocation.HasValue;
        public IObjectBoundsGetter? ObjectBounds => _ObjectBounds_IsSet ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new BinaryMemoryReadStream(_data.Slice(_ObjectBoundsLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool ObjectBounds_IsSet => _ObjectBoundsLocation.HasValue;
        #endregion
        #region FNAM
        private int? _FNAMLocation;
        public ReadOnlyMemorySlice<Byte>? FNAM => _FNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _FNAMLocation.Value, _package.Meta).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region SNDD
        private int? _SNDDLocation;
        public ReadOnlyMemorySlice<Byte>? SNDD => _SNDDLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _SNDDLocation.Value, _package.Meta).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region SoundDescriptor
        private int? _SoundDescriptorLocation;
        public bool SoundDescriptor_IsSet => _SoundDescriptorLocation.HasValue;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> SoundDescriptor => _SoundDescriptorLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _SoundDescriptorLocation.Value, _package.Meta)))) : FormLinkNullable<ISoundDescriptorGetter>.Empty;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected SoundMarkerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static SoundMarkerBinaryOverlay SoundMarkerFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new SoundMarkerBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x444E424F: // OBND
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SoundMarker_FieldIndex.ObjectBounds);
                }
                case 0x4D414E46: // FNAM
                {
                    _FNAMLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SoundMarker_FieldIndex.FNAM);
                }
                case 0x44444E53: // SNDD
                {
                    _SNDDLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SoundMarker_FieldIndex.SNDD);
                }
                case 0x43534453: // SDSC
                {
                    _SoundDescriptorLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SoundMarker_FieldIndex.SoundDescriptor);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SoundMarkerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

