/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class SpellData :
        ISpellData,
        ILoquiObjectSetter<SpellData>,
        IEquatable<SpellData>,
        IEqualsMask
    {
        #region Ctor
        public SpellData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region BaseCost
        public UInt32 BaseCost { get; set; } = default;
        #endregion
        #region Flags
        public SpellData.Flag Flags { get; set; } = default;
        #endregion
        #region Type
        public SpellData.SpellType Type { get; set; } = default;
        #endregion
        #region ChargeTime
        public Single ChargeTime { get; set; } = default;
        #endregion
        #region CastType
        public CastType CastType { get; set; } = default;
        #endregion
        #region TargetType
        public TargetType TargetType { get; set; } = default;
        #endregion
        #region CastDuration
        public Single CastDuration { get; set; } = default;
        #endregion
        #region Range
        public Single Range { get; set; } = default;
        #endregion
        #region HalfCostPerk
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<Perk> _HalfCostPerk = new FormLink<Perk>();
        public IFormLink<Perk> HalfCostPerk => this._HalfCostPerk;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IPerkGetter> ISpellDataGetter.HalfCostPerk => this.HalfCostPerk;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SpellDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISpellDataGetter rhs)) return false;
            return ((SpellDataCommon)((ISpellDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(SpellData obj)
        {
            return ((SpellDataCommon)((ISpellDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SpellDataCommon)((ISpellDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => SpellDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SpellDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static SpellData CreateFromXml(
            XElement node,
            SpellData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SpellData CreateFromXml(
            XElement node,
            out SpellData.ErrorMask errorMask,
            SpellData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SpellData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static SpellData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new SpellData();
            ((SpellDataSetterCommon)((ISpellDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SpellData CreateFromXml(
            string path,
            SpellData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SpellData CreateFromXml(
            string path,
            out SpellData.ErrorMask errorMask,
            SpellData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SpellData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            SpellData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SpellData CreateFromXml(
            Stream stream,
            SpellData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SpellData CreateFromXml(
            Stream stream,
            out SpellData.ErrorMask errorMask,
            SpellData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SpellData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SpellData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.BaseCost = initialValue;
                this.Flags = initialValue;
                this.Type = initialValue;
                this.ChargeTime = initialValue;
                this.CastType = initialValue;
                this.TargetType = initialValue;
                this.CastDuration = initialValue;
                this.Range = initialValue;
                this.HalfCostPerk = initialValue;
            }

            public Mask(
                TItem BaseCost,
                TItem Flags,
                TItem Type,
                TItem ChargeTime,
                TItem CastType,
                TItem TargetType,
                TItem CastDuration,
                TItem Range,
                TItem HalfCostPerk)
            {
                this.BaseCost = BaseCost;
                this.Flags = Flags;
                this.Type = Type;
                this.ChargeTime = ChargeTime;
                this.CastType = CastType;
                this.TargetType = TargetType;
                this.CastDuration = CastDuration;
                this.Range = Range;
                this.HalfCostPerk = HalfCostPerk;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem BaseCost;
            public TItem Flags;
            public TItem Type;
            public TItem ChargeTime;
            public TItem CastType;
            public TItem TargetType;
            public TItem CastDuration;
            public TItem Range;
            public TItem HalfCostPerk;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.BaseCost, rhs.BaseCost)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.ChargeTime, rhs.ChargeTime)) return false;
                if (!object.Equals(this.CastType, rhs.CastType)) return false;
                if (!object.Equals(this.TargetType, rhs.TargetType)) return false;
                if (!object.Equals(this.CastDuration, rhs.CastDuration)) return false;
                if (!object.Equals(this.Range, rhs.Range)) return false;
                if (!object.Equals(this.HalfCostPerk, rhs.HalfCostPerk)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.BaseCost);
                hash.Add(this.Flags);
                hash.Add(this.Type);
                hash.Add(this.ChargeTime);
                hash.Add(this.CastType);
                hash.Add(this.TargetType);
                hash.Add(this.CastDuration);
                hash.Add(this.Range);
                hash.Add(this.HalfCostPerk);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.BaseCost)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.ChargeTime)) return false;
                if (!eval(this.CastType)) return false;
                if (!eval(this.TargetType)) return false;
                if (!eval(this.CastDuration)) return false;
                if (!eval(this.Range)) return false;
                if (!eval(this.HalfCostPerk)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.BaseCost)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.ChargeTime)) return true;
                if (eval(this.CastType)) return true;
                if (eval(this.TargetType)) return true;
                if (eval(this.CastDuration)) return true;
                if (eval(this.Range)) return true;
                if (eval(this.HalfCostPerk)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SpellData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.BaseCost = eval(this.BaseCost);
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                obj.ChargeTime = eval(this.ChargeTime);
                obj.CastType = eval(this.CastType);
                obj.TargetType = eval(this.TargetType);
                obj.CastDuration = eval(this.CastDuration);
                obj.Range = eval(this.Range);
                obj.HalfCostPerk = eval(this.HalfCostPerk);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SpellData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SpellData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SpellData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.BaseCost ?? true)
                    {
                        fg.AppendItem(BaseCost, "BaseCost");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if (printMask?.ChargeTime ?? true)
                    {
                        fg.AppendItem(ChargeTime, "ChargeTime");
                    }
                    if (printMask?.CastType ?? true)
                    {
                        fg.AppendItem(CastType, "CastType");
                    }
                    if (printMask?.TargetType ?? true)
                    {
                        fg.AppendItem(TargetType, "TargetType");
                    }
                    if (printMask?.CastDuration ?? true)
                    {
                        fg.AppendItem(CastDuration, "CastDuration");
                    }
                    if (printMask?.Range ?? true)
                    {
                        fg.AppendItem(Range, "Range");
                    }
                    if (printMask?.HalfCostPerk ?? true)
                    {
                        fg.AppendItem(HalfCostPerk, "HalfCostPerk");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? BaseCost;
            public Exception? Flags;
            public Exception? Type;
            public Exception? ChargeTime;
            public Exception? CastType;
            public Exception? TargetType;
            public Exception? CastDuration;
            public Exception? Range;
            public Exception? HalfCostPerk;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SpellData_FieldIndex enu = (SpellData_FieldIndex)index;
                switch (enu)
                {
                    case SpellData_FieldIndex.BaseCost:
                        return BaseCost;
                    case SpellData_FieldIndex.Flags:
                        return Flags;
                    case SpellData_FieldIndex.Type:
                        return Type;
                    case SpellData_FieldIndex.ChargeTime:
                        return ChargeTime;
                    case SpellData_FieldIndex.CastType:
                        return CastType;
                    case SpellData_FieldIndex.TargetType:
                        return TargetType;
                    case SpellData_FieldIndex.CastDuration:
                        return CastDuration;
                    case SpellData_FieldIndex.Range:
                        return Range;
                    case SpellData_FieldIndex.HalfCostPerk:
                        return HalfCostPerk;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                SpellData_FieldIndex enu = (SpellData_FieldIndex)index;
                switch (enu)
                {
                    case SpellData_FieldIndex.BaseCost:
                        this.BaseCost = ex;
                        break;
                    case SpellData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case SpellData_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case SpellData_FieldIndex.ChargeTime:
                        this.ChargeTime = ex;
                        break;
                    case SpellData_FieldIndex.CastType:
                        this.CastType = ex;
                        break;
                    case SpellData_FieldIndex.TargetType:
                        this.TargetType = ex;
                        break;
                    case SpellData_FieldIndex.CastDuration:
                        this.CastDuration = ex;
                        break;
                    case SpellData_FieldIndex.Range:
                        this.Range = ex;
                        break;
                    case SpellData_FieldIndex.HalfCostPerk:
                        this.HalfCostPerk = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                SpellData_FieldIndex enu = (SpellData_FieldIndex)index;
                switch (enu)
                {
                    case SpellData_FieldIndex.BaseCost:
                        this.BaseCost = (Exception?)obj;
                        break;
                    case SpellData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case SpellData_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case SpellData_FieldIndex.ChargeTime:
                        this.ChargeTime = (Exception?)obj;
                        break;
                    case SpellData_FieldIndex.CastType:
                        this.CastType = (Exception?)obj;
                        break;
                    case SpellData_FieldIndex.TargetType:
                        this.TargetType = (Exception?)obj;
                        break;
                    case SpellData_FieldIndex.CastDuration:
                        this.CastDuration = (Exception?)obj;
                        break;
                    case SpellData_FieldIndex.Range:
                        this.Range = (Exception?)obj;
                        break;
                    case SpellData_FieldIndex.HalfCostPerk:
                        this.HalfCostPerk = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (BaseCost != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (ChargeTime != null) return true;
                if (CastType != null) return true;
                if (TargetType != null) return true;
                if (CastDuration != null) return true;
                if (Range != null) return true;
                if (HalfCostPerk != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(BaseCost, "BaseCost");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Type, "Type");
                fg.AppendItem(ChargeTime, "ChargeTime");
                fg.AppendItem(CastType, "CastType");
                fg.AppendItem(TargetType, "TargetType");
                fg.AppendItem(CastDuration, "CastDuration");
                fg.AppendItem(Range, "Range");
                fg.AppendItem(HalfCostPerk, "HalfCostPerk");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.BaseCost = this.BaseCost.Combine(rhs.BaseCost);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.ChargeTime = this.ChargeTime.Combine(rhs.ChargeTime);
                ret.CastType = this.CastType.Combine(rhs.CastType);
                ret.TargetType = this.TargetType.Combine(rhs.TargetType);
                ret.CastDuration = this.CastDuration.Combine(rhs.CastDuration);
                ret.Range = this.Range.Combine(rhs.Range);
                ret.HalfCostPerk = this.HalfCostPerk.Combine(rhs.HalfCostPerk);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool BaseCost;
            public bool Flags;
            public bool Type;
            public bool ChargeTime;
            public bool CastType;
            public bool TargetType;
            public bool CastDuration;
            public bool Range;
            public bool HalfCostPerk;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.BaseCost = defaultOn;
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.ChargeTime = defaultOn;
                this.CastType = defaultOn;
                this.TargetType = defaultOn;
                this.CastDuration = defaultOn;
                this.Range = defaultOn;
                this.HalfCostPerk = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((BaseCost, null));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((ChargeTime, null));
                ret.Add((CastType, null));
                ret.Add((TargetType, null));
                ret.Add((CastDuration, null));
                ret.Add((Range, null));
                ret.Add((HalfCostPerk, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = SpellData_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => SpellDataCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SpellDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SpellDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static SpellData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static SpellData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SpellData();
            ((SpellDataSetterCommon)((ISpellDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISpellDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SpellDataSetterCommon)((ISpellDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SpellData GetNew()
        {
            return new SpellData();
        }

    }
    #endregion

    #region Interface
    public partial interface ISpellData :
        ISpellDataGetter,
        ILoquiObjectSetter<ISpellData>
    {
        new UInt32 BaseCost { get; set; }
        new SpellData.Flag Flags { get; set; }
        new SpellData.SpellType Type { get; set; }
        new Single ChargeTime { get; set; }
        new CastType CastType { get; set; }
        new TargetType TargetType { get; set; }
        new Single CastDuration { get; set; }
        new Single Range { get; set; }
        new IFormLink<Perk> HalfCostPerk { get; }
    }

    public partial interface ISpellDataGetter :
        ILoquiObject,
        ILoquiObject<ISpellDataGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        UInt32 BaseCost { get; }
        SpellData.Flag Flags { get; }
        SpellData.SpellType Type { get; }
        Single ChargeTime { get; }
        CastType CastType { get; }
        TargetType TargetType { get; }
        Single CastDuration { get; }
        Single Range { get; }
        IFormLinkGetter<IPerkGetter> HalfCostPerk { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SpellDataMixIn
    {
        public static void Clear(this ISpellData item)
        {
            ((SpellDataSetterCommon)((ISpellDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SpellData.Mask<bool> GetEqualsMask(
            this ISpellDataGetter item,
            ISpellDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SpellDataCommon)((ISpellDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISpellDataGetter item,
            string? name = null,
            SpellData.Mask<bool>? printMask = null)
        {
            return ((SpellDataCommon)((ISpellDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISpellDataGetter item,
            FileGeneration fg,
            string? name = null,
            SpellData.Mask<bool>? printMask = null)
        {
            ((SpellDataCommon)((ISpellDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISpellDataGetter item,
            SpellData.Mask<bool?> checkMask)
        {
            return ((SpellDataCommon)((ISpellDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SpellData.Mask<bool> GetHasBeenSetMask(this ISpellDataGetter item)
        {
            var ret = new SpellData.Mask<bool>(false);
            ((SpellDataCommon)((ISpellDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISpellDataGetter item,
            ISpellDataGetter rhs)
        {
            return ((SpellDataCommon)((ISpellDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISpellData lhs,
            ISpellDataGetter rhs,
            SpellData.TranslationMask? copyMask = null)
        {
            ((SpellDataSetterTranslationCommon)((ISpellDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ISpellData lhs,
            ISpellDataGetter rhs,
            out SpellData.ErrorMask errorMask,
            SpellData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SpellDataSetterTranslationCommon)((ISpellDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SpellData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISpellData lhs,
            ISpellDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SpellDataSetterTranslationCommon)((ISpellDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SpellData DeepCopy(
            this ISpellDataGetter item,
            SpellData.TranslationMask? copyMask = null)
        {
            return ((SpellDataSetterTranslationCommon)((ISpellDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SpellData DeepCopy(
            this ISpellDataGetter item,
            out SpellData.ErrorMask errorMask,
            SpellData.TranslationMask? copyMask = null)
        {
            return ((SpellDataSetterTranslationCommon)((ISpellDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SpellData DeepCopy(
            this ISpellDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SpellDataSetterTranslationCommon)((ISpellDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISpellData item,
            XElement node,
            SpellData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISpellData item,
            XElement node,
            out SpellData.ErrorMask errorMask,
            SpellData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SpellData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ISpellData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((SpellDataSetterCommon)((ISpellDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISpellData item,
            string path,
            SpellData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISpellData item,
            string path,
            out SpellData.ErrorMask errorMask,
            SpellData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISpellData item,
            string path,
            ErrorMaskBuilder? errorMask,
            SpellData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISpellData item,
            Stream stream,
            SpellData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISpellData item,
            Stream stream,
            out SpellData.ErrorMask errorMask,
            SpellData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISpellData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SpellData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISpellData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ISpellData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SpellDataSetterCommon)((ISpellDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum SpellData_FieldIndex
    {
        BaseCost = 0,
        Flags = 1,
        Type = 2,
        ChargeTime = 3,
        CastType = 4,
        TargetType = 5,
        CastDuration = 6,
        Range = 7,
        HalfCostPerk = 8,
    }
    #endregion

    #region Registration
    public partial class SpellData_Registration : ILoquiRegistration
    {
        public static readonly SpellData_Registration Instance = new SpellData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 137,
            version: 0);

        public const string GUID = "e315ed8f-6133-4758-bb7a-78fbf4542d94";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(SpellData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SpellData.ErrorMask);

        public static readonly Type ClassType = typeof(SpellData);

        public static readonly Type GetterType = typeof(ISpellDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISpellData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.SpellData";

        public const string Name = "SpellData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BASECOST":
                    return (ushort)SpellData_FieldIndex.BaseCost;
                case "FLAGS":
                    return (ushort)SpellData_FieldIndex.Flags;
                case "TYPE":
                    return (ushort)SpellData_FieldIndex.Type;
                case "CHARGETIME":
                    return (ushort)SpellData_FieldIndex.ChargeTime;
                case "CASTTYPE":
                    return (ushort)SpellData_FieldIndex.CastType;
                case "TARGETTYPE":
                    return (ushort)SpellData_FieldIndex.TargetType;
                case "CASTDURATION":
                    return (ushort)SpellData_FieldIndex.CastDuration;
                case "RANGE":
                    return (ushort)SpellData_FieldIndex.Range;
                case "HALFCOSTPERK":
                    return (ushort)SpellData_FieldIndex.HalfCostPerk;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SpellData_FieldIndex enu = (SpellData_FieldIndex)index;
            switch (enu)
            {
                case SpellData_FieldIndex.BaseCost:
                case SpellData_FieldIndex.Flags:
                case SpellData_FieldIndex.Type:
                case SpellData_FieldIndex.ChargeTime:
                case SpellData_FieldIndex.CastType:
                case SpellData_FieldIndex.TargetType:
                case SpellData_FieldIndex.CastDuration:
                case SpellData_FieldIndex.Range:
                case SpellData_FieldIndex.HalfCostPerk:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SpellData_FieldIndex enu = (SpellData_FieldIndex)index;
            switch (enu)
            {
                case SpellData_FieldIndex.BaseCost:
                case SpellData_FieldIndex.Flags:
                case SpellData_FieldIndex.Type:
                case SpellData_FieldIndex.ChargeTime:
                case SpellData_FieldIndex.CastType:
                case SpellData_FieldIndex.TargetType:
                case SpellData_FieldIndex.CastDuration:
                case SpellData_FieldIndex.Range:
                case SpellData_FieldIndex.HalfCostPerk:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SpellData_FieldIndex enu = (SpellData_FieldIndex)index;
            switch (enu)
            {
                case SpellData_FieldIndex.BaseCost:
                case SpellData_FieldIndex.Flags:
                case SpellData_FieldIndex.Type:
                case SpellData_FieldIndex.ChargeTime:
                case SpellData_FieldIndex.CastType:
                case SpellData_FieldIndex.TargetType:
                case SpellData_FieldIndex.CastDuration:
                case SpellData_FieldIndex.Range:
                case SpellData_FieldIndex.HalfCostPerk:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            SpellData_FieldIndex enu = (SpellData_FieldIndex)index;
            switch (enu)
            {
                case SpellData_FieldIndex.BaseCost:
                    return "BaseCost";
                case SpellData_FieldIndex.Flags:
                    return "Flags";
                case SpellData_FieldIndex.Type:
                    return "Type";
                case SpellData_FieldIndex.ChargeTime:
                    return "ChargeTime";
                case SpellData_FieldIndex.CastType:
                    return "CastType";
                case SpellData_FieldIndex.TargetType:
                    return "TargetType";
                case SpellData_FieldIndex.CastDuration:
                    return "CastDuration";
                case SpellData_FieldIndex.Range:
                    return "Range";
                case SpellData_FieldIndex.HalfCostPerk:
                    return "HalfCostPerk";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SpellData_FieldIndex enu = (SpellData_FieldIndex)index;
            switch (enu)
            {
                case SpellData_FieldIndex.BaseCost:
                case SpellData_FieldIndex.Flags:
                case SpellData_FieldIndex.Type:
                case SpellData_FieldIndex.ChargeTime:
                case SpellData_FieldIndex.CastType:
                case SpellData_FieldIndex.TargetType:
                case SpellData_FieldIndex.CastDuration:
                case SpellData_FieldIndex.Range:
                case SpellData_FieldIndex.HalfCostPerk:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            SpellData_FieldIndex enu = (SpellData_FieldIndex)index;
            switch (enu)
            {
                case SpellData_FieldIndex.BaseCost:
                case SpellData_FieldIndex.Flags:
                case SpellData_FieldIndex.Type:
                case SpellData_FieldIndex.ChargeTime:
                case SpellData_FieldIndex.CastType:
                case SpellData_FieldIndex.TargetType:
                case SpellData_FieldIndex.CastDuration:
                case SpellData_FieldIndex.Range:
                case SpellData_FieldIndex.HalfCostPerk:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            SpellData_FieldIndex enu = (SpellData_FieldIndex)index;
            switch (enu)
            {
                case SpellData_FieldIndex.BaseCost:
                    return typeof(UInt32);
                case SpellData_FieldIndex.Flags:
                    return typeof(SpellData.Flag);
                case SpellData_FieldIndex.Type:
                    return typeof(SpellData.SpellType);
                case SpellData_FieldIndex.ChargeTime:
                    return typeof(Single);
                case SpellData_FieldIndex.CastType:
                    return typeof(CastType);
                case SpellData_FieldIndex.TargetType:
                    return typeof(TargetType);
                case SpellData_FieldIndex.CastDuration:
                    return typeof(Single);
                case SpellData_FieldIndex.Range:
                    return typeof(Single);
                case SpellData_FieldIndex.HalfCostPerk:
                    return typeof(IFormLink<Perk>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SpellDataXmlWriteTranslation);
        public static readonly RecordType SPIT_HEADER = new RecordType("SPIT");
        public static readonly RecordType TriggeringRecordType = SPIT_HEADER;
        public const int NumStructFields = 9;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(SpellDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SpellDataSetterCommon
    {
        public static readonly SpellDataSetterCommon Instance = new SpellDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISpellData item)
        {
            ClearPartial();
            item.BaseCost = default;
            item.Flags = default;
            item.Type = default;
            item.ChargeTime = default;
            item.CastType = default;
            item.TargetType = default;
            item.CastDuration = default;
            item.Range = default;
            item.HalfCostPerk.FormKey = FormKey.Null;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            ISpellData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SpellDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ISpellData item,
            MutagenFrame frame)
        {
            item.BaseCost = frame.ReadUInt32();
            item.Flags = EnumBinaryTranslation<SpellData.Flag>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.Type = EnumBinaryTranslation<SpellData.SpellType>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.ChargeTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.CastType = EnumBinaryTranslation<CastType>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.TargetType = EnumBinaryTranslation<TargetType>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.CastDuration = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Range = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.HalfCostPerk.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
        }
        
        public virtual void CopyInFromBinary(
            ISpellData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(SpellData_Registration.SPIT_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class SpellDataCommon
    {
        public static readonly SpellDataCommon Instance = new SpellDataCommon();

        public SpellData.Mask<bool> GetEqualsMask(
            ISpellDataGetter item,
            ISpellDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SpellData.Mask<bool>(false);
            ((SpellDataCommon)((ISpellDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISpellDataGetter item,
            ISpellDataGetter rhs,
            SpellData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.BaseCost = item.BaseCost == rhs.BaseCost;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.ChargeTime = item.ChargeTime.EqualsWithin(rhs.ChargeTime);
            ret.CastType = item.CastType == rhs.CastType;
            ret.TargetType = item.TargetType == rhs.TargetType;
            ret.CastDuration = item.CastDuration.EqualsWithin(rhs.CastDuration);
            ret.Range = item.Range.EqualsWithin(rhs.Range);
            ret.HalfCostPerk = object.Equals(item.HalfCostPerk, rhs.HalfCostPerk);
        }
        
        public string ToString(
            ISpellDataGetter item,
            string? name = null,
            SpellData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISpellDataGetter item,
            FileGeneration fg,
            string? name = null,
            SpellData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SpellData =>");
            }
            else
            {
                fg.AppendLine($"{name} (SpellData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISpellDataGetter item,
            FileGeneration fg,
            SpellData.Mask<bool>? printMask = null)
        {
            if (printMask?.BaseCost ?? true)
            {
                fg.AppendItem(item.BaseCost, "BaseCost");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendItem(item.Type, "Type");
            }
            if (printMask?.ChargeTime ?? true)
            {
                fg.AppendItem(item.ChargeTime, "ChargeTime");
            }
            if (printMask?.CastType ?? true)
            {
                fg.AppendItem(item.CastType, "CastType");
            }
            if (printMask?.TargetType ?? true)
            {
                fg.AppendItem(item.TargetType, "TargetType");
            }
            if (printMask?.CastDuration ?? true)
            {
                fg.AppendItem(item.CastDuration, "CastDuration");
            }
            if (printMask?.Range ?? true)
            {
                fg.AppendItem(item.Range, "Range");
            }
            if (printMask?.HalfCostPerk ?? true)
            {
                fg.AppendItem(item.HalfCostPerk, "HalfCostPerk");
            }
        }
        
        public bool HasBeenSet(
            ISpellDataGetter item,
            SpellData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ISpellDataGetter item,
            SpellData.Mask<bool> mask)
        {
            mask.BaseCost = true;
            mask.Flags = true;
            mask.Type = true;
            mask.ChargeTime = true;
            mask.CastType = true;
            mask.TargetType = true;
            mask.CastDuration = true;
            mask.Range = true;
            mask.HalfCostPerk = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISpellDataGetter? lhs,
            ISpellDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.BaseCost != rhs.BaseCost) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Type != rhs.Type) return false;
            if (!lhs.ChargeTime.EqualsWithin(rhs.ChargeTime)) return false;
            if (lhs.CastType != rhs.CastType) return false;
            if (lhs.TargetType != rhs.TargetType) return false;
            if (!lhs.CastDuration.EqualsWithin(rhs.CastDuration)) return false;
            if (!lhs.Range.EqualsWithin(rhs.Range)) return false;
            if (!lhs.HalfCostPerk.Equals(rhs.HalfCostPerk)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ISpellDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.BaseCost);
            hash.Add(item.Flags);
            hash.Add(item.Type);
            hash.Add(item.ChargeTime);
            hash.Add(item.CastType);
            hash.Add(item.TargetType);
            hash.Add(item.CastDuration);
            hash.Add(item.Range);
            hash.Add(item.HalfCostPerk);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SpellData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ISpellDataGetter obj)
        {
            yield return obj.HalfCostPerk;
            yield break;
        }
        
        #endregion
        
    }
    public partial class SpellDataSetterTranslationCommon
    {
        public static readonly SpellDataSetterTranslationCommon Instance = new SpellDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ISpellData item,
            ISpellDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)SpellData_FieldIndex.BaseCost) ?? true))
            {
                item.BaseCost = rhs.BaseCost;
            }
            if ((copyMask?.GetShouldTranslate((int)SpellData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)SpellData_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)SpellData_FieldIndex.ChargeTime) ?? true))
            {
                item.ChargeTime = rhs.ChargeTime;
            }
            if ((copyMask?.GetShouldTranslate((int)SpellData_FieldIndex.CastType) ?? true))
            {
                item.CastType = rhs.CastType;
            }
            if ((copyMask?.GetShouldTranslate((int)SpellData_FieldIndex.TargetType) ?? true))
            {
                item.TargetType = rhs.TargetType;
            }
            if ((copyMask?.GetShouldTranslate((int)SpellData_FieldIndex.CastDuration) ?? true))
            {
                item.CastDuration = rhs.CastDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)SpellData_FieldIndex.Range) ?? true))
            {
                item.Range = rhs.Range;
            }
            if ((copyMask?.GetShouldTranslate((int)SpellData_FieldIndex.HalfCostPerk) ?? true))
            {
                item.HalfCostPerk.FormKey = rhs.HalfCostPerk.FormKey;
            }
        }
        
        #endregion
        
        public SpellData DeepCopy(
            ISpellDataGetter item,
            SpellData.TranslationMask? copyMask = null)
        {
            SpellData ret = (SpellData)((SpellDataCommon)((ISpellDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SpellData DeepCopy(
            ISpellDataGetter item,
            out SpellData.ErrorMask errorMask,
            SpellData.TranslationMask? copyMask = null)
        {
            SpellData ret = (SpellData)((SpellDataCommon)((ISpellDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SpellData DeepCopy(
            ISpellDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SpellData ret = (SpellData)((SpellDataCommon)((ISpellDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class SpellData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SpellData_Registration.Instance;
        public static SpellData_Registration Registration => SpellData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SpellDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SpellDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SpellDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISpellDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISpellDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISpellDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SpellDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static SpellDataXmlWriteTranslation Instance = new SpellDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISpellDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)SpellData_FieldIndex.BaseCost) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseCost),
                    item: item.BaseCost,
                    fieldIndex: (int)SpellData_FieldIndex.BaseCost,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SpellData_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<SpellData.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)SpellData_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SpellData_FieldIndex.Type) ?? true))
            {
                EnumXmlTranslation<SpellData.SpellType>.Instance.Write(
                    node: node,
                    name: nameof(item.Type),
                    item: item.Type,
                    fieldIndex: (int)SpellData_FieldIndex.Type,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SpellData_FieldIndex.ChargeTime) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ChargeTime),
                    item: item.ChargeTime,
                    fieldIndex: (int)SpellData_FieldIndex.ChargeTime,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SpellData_FieldIndex.CastType) ?? true))
            {
                EnumXmlTranslation<CastType>.Instance.Write(
                    node: node,
                    name: nameof(item.CastType),
                    item: item.CastType,
                    fieldIndex: (int)SpellData_FieldIndex.CastType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SpellData_FieldIndex.TargetType) ?? true))
            {
                EnumXmlTranslation<TargetType>.Instance.Write(
                    node: node,
                    name: nameof(item.TargetType),
                    item: item.TargetType,
                    fieldIndex: (int)SpellData_FieldIndex.TargetType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SpellData_FieldIndex.CastDuration) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CastDuration),
                    item: item.CastDuration,
                    fieldIndex: (int)SpellData_FieldIndex.CastDuration,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SpellData_FieldIndex.Range) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Range),
                    item: item.Range,
                    fieldIndex: (int)SpellData_FieldIndex.Range,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SpellData_FieldIndex.HalfCostPerk) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HalfCostPerk),
                    item: item.HalfCostPerk.FormKey,
                    fieldIndex: (int)SpellData_FieldIndex.HalfCostPerk,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ISpellDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.SpellData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.SpellData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISpellDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ISpellDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ISpellDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class SpellDataXmlCreateTranslation
    {
        public readonly static SpellDataXmlCreateTranslation Instance = new SpellDataXmlCreateTranslation();

        public static void FillPublicXml(
            ISpellData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SpellDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISpellData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "BaseCost":
                    errorMask?.PushIndex((int)SpellData_FieldIndex.BaseCost);
                    try
                    {
                        item.BaseCost = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)SpellData_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<SpellData.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Type":
                    errorMask?.PushIndex((int)SpellData_FieldIndex.Type);
                    try
                    {
                        item.Type = EnumXmlTranslation<SpellData.SpellType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ChargeTime":
                    errorMask?.PushIndex((int)SpellData_FieldIndex.ChargeTime);
                    try
                    {
                        item.ChargeTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CastType":
                    errorMask?.PushIndex((int)SpellData_FieldIndex.CastType);
                    try
                    {
                        item.CastType = EnumXmlTranslation<CastType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TargetType":
                    errorMask?.PushIndex((int)SpellData_FieldIndex.TargetType);
                    try
                    {
                        item.TargetType = EnumXmlTranslation<TargetType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CastDuration":
                    errorMask?.PushIndex((int)SpellData_FieldIndex.CastDuration);
                    try
                    {
                        item.CastDuration = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Range":
                    errorMask?.PushIndex((int)SpellData_FieldIndex.Range);
                    try
                    {
                        item.Range = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HalfCostPerk":
                    errorMask?.PushIndex((int)SpellData_FieldIndex.HalfCostPerk);
                    try
                    {
                        item.HalfCostPerk.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class SpellDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISpellDataGetter item,
            XElement node,
            out SpellData.ErrorMask errorMask,
            SpellData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((SpellDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SpellData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISpellDataGetter item,
            string path,
            out SpellData.ErrorMask errorMask,
            SpellData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISpellDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISpellDataGetter item,
            Stream stream,
            out SpellData.ErrorMask errorMask,
            SpellData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISpellDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISpellDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((SpellDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ISpellDataGetter item,
            XElement node,
            string? name = null,
            SpellData.TranslationMask? translationMask = null)
        {
            ((SpellDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ISpellDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((SpellDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISpellDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((SpellDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SpellDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static SpellDataBinaryWriteTranslation Instance = new SpellDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            ISpellDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.BaseCost);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<SpellData.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<SpellData.SpellType>.Instance.Write(
                writer,
                item.Type,
                length: 4);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ChargeTime);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<CastType>.Instance.Write(
                writer,
                item.CastType,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<TargetType>.Instance.Write(
                writer,
                item.TargetType,
                length: 4);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CastDuration);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Range);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.HalfCostPerk);
        }

        public void Write(
            MutagenWriter writer,
            ISpellDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(SpellData_Registration.SPIT_HEADER),
                type: ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISpellDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SpellDataBinaryCreateTranslation
    {
        public readonly static SpellDataBinaryCreateTranslation Instance = new SpellDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class SpellDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISpellDataGetter item,
            MutagenWriter writer)
        {
            ((SpellDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SpellDataBinaryOverlay :
        BinaryOverlay,
        ISpellDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SpellData_Registration.Instance;
        public static SpellData_Registration Registration => SpellData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SpellDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SpellDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISpellDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISpellDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISpellDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISpellDataGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => SpellDataCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => SpellDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SpellDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SpellDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SpellDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public UInt32 BaseCost => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x0, 0x4));
        public SpellData.Flag Flags => (SpellData.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x4, 0x4));
        public SpellData.SpellType Type => (SpellData.SpellType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x8, 0x4));
        public Single ChargeTime => SpanExt.GetFloat(_data.Slice(0xC, 0x4));
        public CastType CastType => (CastType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x10, 0x4));
        public TargetType TargetType => (TargetType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x14, 0x4));
        public Single CastDuration => SpanExt.GetFloat(_data.Slice(0x18, 0x4));
        public Single Range => SpanExt.GetFloat(_data.Slice(0x1C, 0x4));
        public IFormLinkGetter<IPerkGetter> HalfCostPerk => new FormLink<IPerkGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x20, 0x4))));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected SpellDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static SpellDataBinaryOverlay SpellDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SpellDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x24 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static SpellDataBinaryOverlay SpellDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return SpellDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SpellDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

