/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Static :
        SkyrimMajorRecord,
        IStaticInternal,
        ILoquiObjectSetter<Static>,
        IEquatable<Static>,
        IEqualsMask
    {
        #region Ctor
        protected Static()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectBounds _ObjectBounds = new ObjectBounds();
        public ObjectBounds ObjectBounds
        {
            get => _ObjectBounds;
            set => _ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IStaticGetter.ObjectBounds => _ObjectBounds;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IStaticGetter.Model => this.Model;
        #endregion
        #region DirectionMaterial
        public DirectionMaterial DirectionMaterial { get; set; } = new DirectionMaterial();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDirectionMaterialGetter IStaticGetter.DirectionMaterial => DirectionMaterial;
        #endregion
        #region Lod
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Lod? _Lod;
        public Lod? Lod
        {
            get => _Lod;
            set => _Lod = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILodGetter? IStaticGetter.Lod => this.Lod;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            StaticMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IStaticGetter rhs)) return false;
            return ((StaticCommon)((IStaticGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Static obj)
        {
            return ((StaticCommon)((IStaticGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((StaticCommon)((IStaticGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => StaticXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((StaticXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Static CreateFromXml(
            XElement node,
            Static.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Static CreateFromXml(
            XElement node,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Static.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Static CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Static();
            ((StaticSetterCommon)((IStaticGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Static CreateFromXml(
            string path,
            Static.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Static CreateFromXml(
            string path,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Static CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Static.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Static CreateFromXml(
            Stream stream,
            Static.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Static CreateFromXml(
            Stream stream,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Static CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Static.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.DirectionMaterial = new MaskItem<TItem, DirectionMaterial.Mask<TItem>?>(initialValue, new DirectionMaterial.Mask<TItem>(initialValue));
                this.Lod = new MaskItem<TItem, Lod.Mask<TItem>?>(initialValue, new Lod.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem ObjectBounds,
                TItem Model,
                TItem DirectionMaterial,
                TItem Lod)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.DirectionMaterial = new MaskItem<TItem, DirectionMaterial.Mask<TItem>?>(DirectionMaterial, new DirectionMaterial.Mask<TItem>(DirectionMaterial));
                this.Lod = new MaskItem<TItem, Lod.Mask<TItem>?>(Lod, new Lod.Mask<TItem>(Lod));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, DirectionMaterial.Mask<TItem>?>? DirectionMaterial { get; set; }
            public MaskItem<TItem, Lod.Mask<TItem>?>? Lod { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.DirectionMaterial, rhs.DirectionMaterial)) return false;
                if (!object.Equals(this.Lod, rhs.Lod)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Model);
                hash.Add(this.DirectionMaterial);
                hash.Add(this.Lod);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (DirectionMaterial != null)
                {
                    if (!eval(this.DirectionMaterial.Overall)) return false;
                    if (this.DirectionMaterial.Specific != null && !this.DirectionMaterial.Specific.All(eval)) return false;
                }
                if (Lod != null)
                {
                    if (!eval(this.Lod.Overall)) return false;
                    if (this.Lod.Specific != null && !this.Lod.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (DirectionMaterial != null)
                {
                    if (eval(this.DirectionMaterial.Overall)) return true;
                    if (this.DirectionMaterial.Specific != null && this.DirectionMaterial.Specific.Any(eval)) return true;
                }
                if (Lod != null)
                {
                    if (eval(this.Lod.Overall)) return true;
                    if (this.Lod.Specific != null && this.Lod.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Static.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.DirectionMaterial = this.DirectionMaterial == null ? null : new MaskItem<R, DirectionMaterial.Mask<R>?>(eval(this.DirectionMaterial.Overall), this.DirectionMaterial.Specific?.Translate(eval));
                obj.Lod = this.Lod == null ? null : new MaskItem<R, Lod.Mask<R>?>(eval(this.Lod.Overall), this.Lod.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Static.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Static.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Static.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.DirectionMaterial?.Overall ?? true)
                    {
                        DirectionMaterial?.ToString(fg);
                    }
                    if (printMask?.Lod?.Overall ?? true)
                    {
                        Lod?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, DirectionMaterial.ErrorMask?>? DirectionMaterial;
            public MaskItem<Exception?, Lod.ErrorMask?>? Lod;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Static_FieldIndex enu = (Static_FieldIndex)index;
                switch (enu)
                {
                    case Static_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Static_FieldIndex.Model:
                        return Model;
                    case Static_FieldIndex.DirectionMaterial:
                        return DirectionMaterial;
                    case Static_FieldIndex.Lod:
                        return Lod;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Static_FieldIndex enu = (Static_FieldIndex)index;
                switch (enu)
                {
                    case Static_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Static_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Static_FieldIndex.DirectionMaterial:
                        this.DirectionMaterial = new MaskItem<Exception?, DirectionMaterial.ErrorMask?>(ex, null);
                        break;
                    case Static_FieldIndex.Lod:
                        this.Lod = new MaskItem<Exception?, Lod.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Static_FieldIndex enu = (Static_FieldIndex)index;
                switch (enu)
                {
                    case Static_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Static_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Static_FieldIndex.DirectionMaterial:
                        this.DirectionMaterial = (MaskItem<Exception?, DirectionMaterial.ErrorMask?>?)obj;
                        break;
                    case Static_FieldIndex.Lod:
                        this.Lod = (MaskItem<Exception?, Lod.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Model != null) return true;
                if (DirectionMaterial != null) return true;
                if (Lod != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                ObjectBounds?.ToString(fg);
                Model?.ToString(fg);
                DirectionMaterial?.ToString(fg);
                Lod?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.DirectionMaterial = this.DirectionMaterial.Combine(rhs.DirectionMaterial, (l, r) => l.Combine(r));
                ret.Lod = this.Lod.Combine(rhs.Lod, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, ObjectBounds.TranslationMask?> ObjectBounds;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public MaskItem<bool, DirectionMaterial.TranslationMask?> DirectionMaterial;
            public MaskItem<bool, Lod.TranslationMask?> Lod;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.ObjectBounds = new MaskItem<bool, ObjectBounds.TranslationMask?>(defaultOn, null);
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.DirectionMaterial = new MaskItem<bool, DirectionMaterial.TranslationMask?>(defaultOn, null);
                this.Lod = new MaskItem<bool, Lod.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((DirectionMaterial?.Overall ?? true, DirectionMaterial?.Specific?.GetCrystal()));
                ret.Add((Lod?.Overall ?? true, Lod?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Static_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => StaticCommon.Instance.GetLinks(this);
        public Static(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Static(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Static(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => StaticBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((StaticBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Static CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Static CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Static();
            ((StaticSetterCommon)((IStaticGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IStaticGetter)rhs, include);

        void IClearable.Clear()
        {
            ((StaticSetterCommon)((IStaticGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Static GetNew()
        {
            return new Static();
        }

    }
    #endregion

    #region Interface
    public partial interface IStatic :
        IStaticGetter,
        ISkyrimMajorRecord,
        IModeled,
        IObjectBounded,
        IObjectId,
        ILoquiObjectSetter<IStaticInternal>
    {
        new ObjectBounds ObjectBounds { get; set; }
        new Model? Model { get; set; }
        new DirectionMaterial DirectionMaterial { get; set; }
        new Lod? Lod { get; set; }
        #region Mutagen
        new Static.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IStaticInternal :
        ISkyrimMajorRecordInternal,
        IStatic,
        IStaticGetter
    {
    }

    public partial interface IStaticGetter :
        ISkyrimMajorRecordGetter,
        IModeledGetter,
        IObjectBoundedGetter,
        IObjectIdGetter,
        ILoquiObject<IStaticGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Static_Registration.Instance;
        IObjectBoundsGetter ObjectBounds { get; }
        IModelGetter? Model { get; }
        IDirectionMaterialGetter DirectionMaterial { get; }
        ILodGetter? Lod { get; }

        #region Mutagen
        Static.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class StaticMixIn
    {
        public static void Clear(this IStaticInternal item)
        {
            ((StaticSetterCommon)((IStaticGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Static.Mask<bool> GetEqualsMask(
            this IStaticGetter item,
            IStaticGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((StaticCommon)((IStaticGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IStaticGetter item,
            string? name = null,
            Static.Mask<bool>? printMask = null)
        {
            return ((StaticCommon)((IStaticGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IStaticGetter item,
            FileGeneration fg,
            string? name = null,
            Static.Mask<bool>? printMask = null)
        {
            ((StaticCommon)((IStaticGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IStaticGetter item,
            Static.Mask<bool?> checkMask)
        {
            return ((StaticCommon)((IStaticGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Static.Mask<bool> GetHasBeenSetMask(this IStaticGetter item)
        {
            var ret = new Static.Mask<bool>(false);
            ((StaticCommon)((IStaticGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IStaticGetter item,
            IStaticGetter rhs)
        {
            return ((StaticCommon)((IStaticGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IStaticInternal lhs,
            IStaticGetter rhs,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((StaticSetterTranslationCommon)((IStaticGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Static.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IStaticInternal lhs,
            IStaticGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((StaticSetterTranslationCommon)((IStaticGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Static DeepCopy(
            this IStaticGetter item,
            Static.TranslationMask? copyMask = null)
        {
            return ((StaticSetterTranslationCommon)((IStaticGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Static DeepCopy(
            this IStaticGetter item,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? copyMask = null)
        {
            return ((StaticSetterTranslationCommon)((IStaticGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Static DeepCopy(
            this IStaticGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((StaticSetterTranslationCommon)((IStaticGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IStaticInternal item,
            XElement node,
            Static.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IStaticInternal item,
            XElement node,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Static.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IStaticInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((StaticSetterCommon)((IStaticGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IStaticInternal item,
            string path,
            Static.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IStaticInternal item,
            string path,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IStaticInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Static.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IStaticInternal item,
            Stream stream,
            Static.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IStaticInternal item,
            Stream stream,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IStaticInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Static.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IStaticInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IStaticInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((StaticSetterCommon)((IStaticGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Static_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        ObjectBounds = 6,
        Model = 7,
        DirectionMaterial = 8,
        Lod = 9,
    }
    #endregion

    #region Registration
    public partial class Static_Registration : ILoquiRegistration
    {
        public static readonly Static_Registration Instance = new Static_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 105,
            version: 0);

        public const string GUID = "89036057-4570-493d-a5f7-4c5718f67a06";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(Static.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Static.ErrorMask);

        public static readonly Type ClassType = typeof(Static);

        public static readonly Type GetterType = typeof(IStaticGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IStatic);

        public static readonly Type? InternalSetterType = typeof(IStaticInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Static";

        public const string Name = "Static";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBJECTBOUNDS":
                    return (ushort)Static_FieldIndex.ObjectBounds;
                case "MODEL":
                    return (ushort)Static_FieldIndex.Model;
                case "DIRECTIONMATERIAL":
                    return (ushort)Static_FieldIndex.DirectionMaterial;
                case "LOD":
                    return (ushort)Static_FieldIndex.Lod;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Static_FieldIndex enu = (Static_FieldIndex)index;
            switch (enu)
            {
                case Static_FieldIndex.ObjectBounds:
                case Static_FieldIndex.Model:
                case Static_FieldIndex.DirectionMaterial:
                case Static_FieldIndex.Lod:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Static_FieldIndex enu = (Static_FieldIndex)index;
            switch (enu)
            {
                case Static_FieldIndex.ObjectBounds:
                case Static_FieldIndex.Model:
                case Static_FieldIndex.DirectionMaterial:
                case Static_FieldIndex.Lod:
                    return true;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Static_FieldIndex enu = (Static_FieldIndex)index;
            switch (enu)
            {
                case Static_FieldIndex.ObjectBounds:
                case Static_FieldIndex.Model:
                case Static_FieldIndex.DirectionMaterial:
                case Static_FieldIndex.Lod:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Static_FieldIndex enu = (Static_FieldIndex)index;
            switch (enu)
            {
                case Static_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case Static_FieldIndex.Model:
                    return "Model";
                case Static_FieldIndex.DirectionMaterial:
                    return "DirectionMaterial";
                case Static_FieldIndex.Lod:
                    return "Lod";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Static_FieldIndex enu = (Static_FieldIndex)index;
            switch (enu)
            {
                case Static_FieldIndex.ObjectBounds:
                case Static_FieldIndex.Model:
                case Static_FieldIndex.DirectionMaterial:
                case Static_FieldIndex.Lod:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Static_FieldIndex enu = (Static_FieldIndex)index;
            switch (enu)
            {
                case Static_FieldIndex.ObjectBounds:
                case Static_FieldIndex.Model:
                case Static_FieldIndex.DirectionMaterial:
                case Static_FieldIndex.Lod:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Static_FieldIndex enu = (Static_FieldIndex)index;
            switch (enu)
            {
                case Static_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case Static_FieldIndex.Model:
                    return typeof(Model);
                case Static_FieldIndex.DirectionMaterial:
                    return typeof(DirectionMaterial);
                case Static_FieldIndex.Lod:
                    return typeof(Lod);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(StaticXmlWriteTranslation);
        public static readonly RecordType STAT_HEADER = new RecordType("STAT");
        public static readonly RecordType OBND_HEADER = new RecordType("OBND");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType TriggeringRecordType = STAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(StaticBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class StaticSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly StaticSetterCommon Instance = new StaticSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IStaticInternal item)
        {
            ClearPartial();
            item.ObjectBounds = new ObjectBounds();
            item.Model = null;
            item.DirectionMaterial.Clear();
            item.Lod = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IStaticInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IStaticInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IStaticInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IStaticInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    StaticXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Static)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Static)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Static_Registration.STAT_HEADER;
        protected static void FillBinaryStructs(
            IStaticInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IStaticInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x444E424F: // OBND
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Static_FieldIndex.ObjectBounds);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Static_FieldIndex.Model);
                }
                case 0x4D414E44: // DNAM
                {
                    item.DirectionMaterial = Mutagen.Bethesda.Skyrim.DirectionMaterial.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Static_FieldIndex.DirectionMaterial);
                }
                case 0x4D414E4D: // MNAM
                {
                    item.Lod = Mutagen.Bethesda.Skyrim.Lod.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Static_FieldIndex.Lod);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            IStaticInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IStaticInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Static)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Static)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class StaticCommon : SkyrimMajorRecordCommon
    {
        public new static readonly StaticCommon Instance = new StaticCommon();

        public Static.Mask<bool> GetEqualsMask(
            IStaticGetter item,
            IStaticGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Static.Mask<bool>(false);
            ((StaticCommon)((IStaticGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IStaticGetter item,
            IStaticGetter rhs,
            Static.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DirectionMaterial = MaskItemExt.Factory(item.DirectionMaterial.GetEqualsMask(rhs.DirectionMaterial, include), include);
            ret.Lod = EqualsMaskHelper.EqualsHelper(
                item.Lod,
                rhs.Lod,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IStaticGetter item,
            string? name = null,
            Static.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IStaticGetter item,
            FileGeneration fg,
            string? name = null,
            Static.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Static =>");
            }
            else
            {
                fg.AppendLine($"{name} (Static) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IStaticGetter item,
            FileGeneration fg,
            Static.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.DirectionMaterial?.Overall ?? true)
            {
                item.DirectionMaterial?.ToString(fg, "DirectionMaterial");
            }
            if ((printMask?.Lod?.Overall ?? true)
                && item.Lod.TryGet(out var LodItem))
            {
                LodItem?.ToString(fg, "Lod");
            }
        }
        
        public bool HasBeenSet(
            IStaticGetter item,
            Static.Mask<bool?> checkMask)
        {
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Lod?.Overall.HasValue ?? false && checkMask.Lod.Overall.Value != (item.Lod != null)) return false;
            if (checkMask.Lod?.Specific != null && (item.Lod == null || !item.Lod.HasBeenSet(checkMask.Lod.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IStaticGetter item,
            Static.Mask<bool> mask)
        {
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds.Mask<bool>?>(true, item.ObjectBounds?.GetHasBeenSetMask());
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.DirectionMaterial = new MaskItem<bool, DirectionMaterial.Mask<bool>?>(true, item.DirectionMaterial?.GetHasBeenSetMask());
            var itemLod = item.Lod;
            mask.Lod = new MaskItem<bool, Lod.Mask<bool>?>(itemLod != null, itemLod?.GetHasBeenSetMask());
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Static_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Static_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Static_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Static_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Static_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Static_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Static_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Static_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Static_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Static_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Static_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Static_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IStaticGetter? lhs,
            IStaticGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!object.Equals(lhs.DirectionMaterial, rhs.DirectionMaterial)) return false;
            if (!object.Equals(lhs.Lod, rhs.Lod)) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IStaticGetter?)lhs,
                rhs: rhs as IStaticGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IStaticGetter?)lhs,
                rhs: rhs as IStaticGetter);
        }
        
        public virtual int GetHashCode(IStaticGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.DirectionMaterial);
            if (item.Lod.TryGet(out var Loditem))
            {
                hash.Add(Loditem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IStaticGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IStaticGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Static.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IStaticGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            if (obj.Model != null)
            {
                foreach (var item in obj.Model.Links)
                {
                    yield return item;
                }
            }
            if (obj.DirectionMaterial != null)
            {
                foreach (var item in obj.DirectionMaterial.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        partial void PostDuplicate(Static obj, Static rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Static(getNextFormKey());
            ret.DeepCopyIn((Static)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Static)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class StaticSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly StaticSetterTranslationCommon Instance = new StaticSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IStaticInternal item,
            IStaticGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IStatic item,
            IStaticGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Static_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Static_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Static_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Static_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.DirectionMaterial) ?? true))
            {
                errorMask?.PushIndex((int)Static_FieldIndex.DirectionMaterial);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.DirectionMaterial) ?? true))
                    {
                        item.DirectionMaterial = rhs.DirectionMaterial.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Static_FieldIndex.DirectionMaterial),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Static_FieldIndex.Lod) ?? true))
            {
                errorMask?.PushIndex((int)Static_FieldIndex.Lod);
                try
                {
                    if(rhs.Lod.TryGet(out var rhsLod))
                    {
                        item.Lod = rhsLod.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Static_FieldIndex.Lod));
                    }
                    else
                    {
                        item.Lod = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IStaticInternal)item,
                rhs: (IStaticGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IStatic)item,
                rhs: (IStaticGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IStaticInternal)item,
                rhs: (IStaticGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IStatic)item,
                rhs: (IStaticGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Static DeepCopy(
            IStaticGetter item,
            Static.TranslationMask? copyMask = null)
        {
            Static ret = (Static)((StaticCommon)((IStaticGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Static DeepCopy(
            IStaticGetter item,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? copyMask = null)
        {
            Static ret = (Static)((StaticCommon)((IStaticGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Static DeepCopy(
            IStaticGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Static ret = (Static)((StaticCommon)((IStaticGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Static
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Static_Registration.Instance;
        public new static Static_Registration Registration => Static_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => StaticCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return StaticSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => StaticSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class StaticXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static StaticXmlWriteTranslation Instance = new StaticXmlWriteTranslation();

        public static void WriteToNodeXml(
            IStaticGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)Static_FieldIndex.ObjectBounds) ?? true))
            {
                var ObjectBoundsItem = item.ObjectBounds;
                ((ObjectBoundsXmlWriteTranslation)((IXmlItem)ObjectBoundsItem).XmlWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    node: node,
                    name: nameof(item.ObjectBounds),
                    fieldIndex: (int)Static_FieldIndex.ObjectBounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Static_FieldIndex.ObjectBounds));
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Static_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Static_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Static_FieldIndex.Model));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Static_FieldIndex.DirectionMaterial) ?? true))
            {
                var DirectionMaterialItem = item.DirectionMaterial;
                ((DirectionMaterialXmlWriteTranslation)((IXmlItem)DirectionMaterialItem).XmlWriteTranslator).Write(
                    item: DirectionMaterialItem,
                    node: node,
                    name: nameof(item.DirectionMaterial),
                    fieldIndex: (int)Static_FieldIndex.DirectionMaterial,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Static_FieldIndex.DirectionMaterial));
            }
            if ((item.Lod != null)
                && (translationMask?.GetShouldTranslate((int)Static_FieldIndex.Lod) ?? true))
            {
                if (item.Lod.TryGet(out var LodItem))
                {
                    ((LodXmlWriteTranslation)((IXmlItem)LodItem).XmlWriteTranslator).Write(
                        item: LodItem,
                        node: node,
                        name: nameof(item.Lod),
                        fieldIndex: (int)Static_FieldIndex.Lod,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Static_FieldIndex.Lod));
                }
            }
        }

        public void Write(
            XElement node,
            IStaticGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Static");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Static");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IStaticGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IStaticGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IStaticGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class StaticXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static StaticXmlCreateTranslation Instance = new StaticXmlCreateTranslation();

        public static void FillPublicXml(
            IStaticInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    StaticXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IStaticInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ObjectBounds":
                    errorMask?.PushIndex((int)Static_FieldIndex.ObjectBounds);
                    try
                    {
                        item.ObjectBounds = LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Static_FieldIndex.ObjectBounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)Static_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Static_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DirectionMaterial":
                    errorMask?.PushIndex((int)Static_FieldIndex.DirectionMaterial);
                    try
                    {
                        item.DirectionMaterial = LoquiXmlTranslation<DirectionMaterial>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Static_FieldIndex.DirectionMaterial));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lod":
                    errorMask?.PushIndex((int)Static_FieldIndex.Lod);
                    try
                    {
                        item.Lod = LoquiXmlTranslation<Lod>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Static_FieldIndex.Lod));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class StaticXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IStaticGetter item,
            XElement node,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((StaticXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Static.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IStaticGetter item,
            string path,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IStaticGetter item,
            Stream stream,
            out Static.ErrorMask errorMask,
            Static.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class StaticBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static StaticBinaryWriteTranslation Instance = new StaticBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IStaticGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            var DirectionMaterialItem = item.DirectionMaterial;
            ((DirectionMaterialBinaryWriteTranslation)((IBinaryItem)DirectionMaterialItem).BinaryWriteTranslator).Write(
                item: DirectionMaterialItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Lod.TryGet(out var LodItem))
            {
                ((LodBinaryWriteTranslation)((IBinaryItem)LodItem).BinaryWriteTranslator).Write(
                    item: LodItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            IStaticGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(Static_Registration.STAT_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IStaticGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IStaticGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IStaticGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class StaticBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static StaticBinaryCreateTranslation Instance = new StaticBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class StaticBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class StaticBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IStaticGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Static_Registration.Instance;
        public new static Static_Registration Registration => Static_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => StaticCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => StaticSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IStaticGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => StaticCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => StaticXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((StaticXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => StaticBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((StaticBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Static.MajorFlag MajorFlags => (Static.MajorFlag)this.MajorRecordFlagsRaw;

        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new BinaryMemoryReadStream(_data.Slice(_ObjectBoundsLocation!.Value.Min)), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        public IModelGetter? Model { get; private set; }
        #region DirectionMaterial
        private RangeInt32? _DirectionMaterialLocation;
        public IDirectionMaterialGetter? _DirectionMaterial => _DirectionMaterialLocation.HasValue ? DirectionMaterialBinaryOverlay.DirectionMaterialFactory(new BinaryMemoryReadStream(_data.Slice(_DirectionMaterialLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public IDirectionMaterialGetter DirectionMaterial => _DirectionMaterial ?? new DirectionMaterial();
        #endregion
        #region Lod
        private RangeInt32? _LodLocation;
        public ILodGetter? Lod => _LodLocation.HasValue ? LodBinaryOverlay.LodFactory(new BinaryMemoryReadStream(_data.Slice(_LodLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool Lod_IsSet => _LodLocation.HasValue;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected StaticBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static StaticBinaryOverlay StaticFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new StaticBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static StaticBinaryOverlay StaticFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return StaticFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x444E424F: // OBND
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Static_FieldIndex.ObjectBounds);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Static_FieldIndex.Model);
                }
                case 0x4D414E44: // DNAM
                {
                    _DirectionMaterialLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Static_FieldIndex.DirectionMaterial);
                }
                case 0x4D414E4D: // MNAM
                {
                    _LodLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Static_FieldIndex.Lod);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            StaticMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

