/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class TintAssets :
        ITintAssets,
        ILoquiObjectSetter<TintAssets>,
        IEquatable<TintAssets>,
        IEqualsMask
    {
        #region Ctor
        public TintAssets()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Index
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16? _Index;
        public UInt16? Index
        {
            get => this._Index;
            set => this._Index = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? ITintAssetsGetter.Index => this.Index;
        #endregion
        #region FileName
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _FileName;
        public String? FileName
        {
            get => this._FileName;
            set => this._FileName = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITintAssetsGetter.FileName => this.FileName;
        #endregion
        #region MaskType
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TintAssets.TintMaskType? _MaskType;
        public TintAssets.TintMaskType? MaskType
        {
            get => this._MaskType;
            set => this._MaskType = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TintAssets.TintMaskType? ITintAssetsGetter.MaskType => this.MaskType;
        #endregion
        #region PresetDefault
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<ColorRecord> _PresetDefault = new FormLinkNullable<ColorRecord>();
        public IFormLinkNullable<ColorRecord> PresetDefault => this._PresetDefault;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IColorRecordGetter> ITintAssetsGetter.PresetDefault => this.PresetDefault;
        #endregion
        #region Presets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TintPreset>? _Presets;
        public ExtendedList<TintPreset>? Presets
        {
            get => this._Presets;
            set => this._Presets = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITintPresetGetter>? ITintAssetsGetter.Presets => _Presets;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TintAssetsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITintAssetsGetter rhs)) return false;
            return ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(TintAssets obj)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => TintAssetsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TintAssetsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static TintAssets CreateFromXml(
            XElement node,
            TintAssets.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static TintAssets CreateFromXml(
            XElement node,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TintAssets.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static TintAssets CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new TintAssets();
            ((TintAssetsSetterCommon)((ITintAssetsGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static TintAssets CreateFromXml(
            string path,
            TintAssets.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TintAssets CreateFromXml(
            string path,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TintAssets CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            TintAssets.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TintAssets CreateFromXml(
            Stream stream,
            TintAssets.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TintAssets CreateFromXml(
            Stream stream,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TintAssets CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TintAssets.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Index = initialValue;
                this.FileName = initialValue;
                this.MaskType = initialValue;
                this.PresetDefault = initialValue;
                this.Presets = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>());
            }

            public Mask(
                TItem Index,
                TItem FileName,
                TItem MaskType,
                TItem PresetDefault,
                TItem Presets)
            {
                this.Index = Index;
                this.FileName = FileName;
                this.MaskType = MaskType;
                this.PresetDefault = PresetDefault;
                this.Presets = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>?>(Presets, Enumerable.Empty<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Index;
            public TItem FileName;
            public TItem MaskType;
            public TItem PresetDefault;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>?>? Presets;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.FileName, rhs.FileName)) return false;
                if (!object.Equals(this.MaskType, rhs.MaskType)) return false;
                if (!object.Equals(this.PresetDefault, rhs.PresetDefault)) return false;
                if (!object.Equals(this.Presets, rhs.Presets)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Index?.GetHashCode());
                ret = ret.CombineHashCode(this.FileName?.GetHashCode());
                ret = ret.CombineHashCode(this.MaskType?.GetHashCode());
                ret = ret.CombineHashCode(this.PresetDefault?.GetHashCode());
                ret = ret.CombineHashCode(this.Presets?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Index)) return false;
                if (!eval(this.FileName)) return false;
                if (!eval(this.MaskType)) return false;
                if (!eval(this.PresetDefault)) return false;
                if (this.Presets != null)
                {
                    if (!eval(this.Presets.Overall)) return false;
                    if (this.Presets.Specific != null)
                    {
                        foreach (var item in this.Presets.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Index)) return true;
                if (eval(this.FileName)) return true;
                if (eval(this.MaskType)) return true;
                if (eval(this.PresetDefault)) return true;
                if (this.Presets != null)
                {
                    if (eval(this.Presets.Overall)) return true;
                    if (this.Presets.Specific != null)
                    {
                        foreach (var item in this.Presets.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TintAssets.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Index = eval(this.Index);
                obj.FileName = eval(this.FileName);
                obj.MaskType = eval(this.MaskType);
                obj.PresetDefault = eval(this.PresetDefault);
                if (Presets != null)
                {
                    obj.Presets = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TintPreset.Mask<R>?>>?>(eval(this.Presets.Overall), Enumerable.Empty<MaskItemIndexed<R, TintPreset.Mask<R>?>>());
                    if (Presets.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TintPreset.Mask<R>?>>();
                        obj.Presets.Specific = l;
                        foreach (var item in Presets.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, TintPreset.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, TintPreset.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(TintAssets.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, TintAssets.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(TintAssets.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Index ?? true)
                    {
                        fg.AppendItem(Index, "Index");
                    }
                    if (printMask?.FileName ?? true)
                    {
                        fg.AppendItem(FileName, "FileName");
                    }
                    if (printMask?.MaskType ?? true)
                    {
                        fg.AppendItem(MaskType, "MaskType");
                    }
                    if (printMask?.PresetDefault ?? true)
                    {
                        fg.AppendItem(PresetDefault, "PresetDefault");
                    }
                    if ((printMask?.Presets?.Overall ?? true)
                        && Presets.TryGet(out var PresetsItem))
                    {
                        fg.AppendLine("Presets =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PresetsItem.Overall);
                            if (PresetsItem.Specific != null)
                            {
                                foreach (var subItem in PresetsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Index;
            public Exception? FileName;
            public Exception? MaskType;
            public Exception? PresetDefault;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintPreset.ErrorMask?>>?>? Presets;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
                switch (enu)
                {
                    case TintAssets_FieldIndex.Index:
                        return Index;
                    case TintAssets_FieldIndex.FileName:
                        return FileName;
                    case TintAssets_FieldIndex.MaskType:
                        return MaskType;
                    case TintAssets_FieldIndex.PresetDefault:
                        return PresetDefault;
                    case TintAssets_FieldIndex.Presets:
                        return Presets;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
                switch (enu)
                {
                    case TintAssets_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case TintAssets_FieldIndex.FileName:
                        this.FileName = ex;
                        break;
                    case TintAssets_FieldIndex.MaskType:
                        this.MaskType = ex;
                        break;
                    case TintAssets_FieldIndex.PresetDefault:
                        this.PresetDefault = ex;
                        break;
                    case TintAssets_FieldIndex.Presets:
                        this.Presets = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintPreset.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
                switch (enu)
                {
                    case TintAssets_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case TintAssets_FieldIndex.FileName:
                        this.FileName = (Exception?)obj;
                        break;
                    case TintAssets_FieldIndex.MaskType:
                        this.MaskType = (Exception?)obj;
                        break;
                    case TintAssets_FieldIndex.PresetDefault:
                        this.PresetDefault = (Exception?)obj;
                        break;
                    case TintAssets_FieldIndex.Presets:
                        this.Presets = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintPreset.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Index != null) return true;
                if (FileName != null) return true;
                if (MaskType != null) return true;
                if (PresetDefault != null) return true;
                if (Presets != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Index, "Index");
                fg.AppendItem(FileName, "FileName");
                fg.AppendItem(MaskType, "MaskType");
                fg.AppendItem(PresetDefault, "PresetDefault");
                if (Presets.TryGet(out var PresetsItem))
                {
                    fg.AppendLine("Presets =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PresetsItem.Overall);
                        if (PresetsItem.Specific != null)
                        {
                            foreach (var subItem in PresetsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Index = this.Index.Combine(rhs.Index);
                ret.FileName = this.FileName.Combine(rhs.FileName);
                ret.MaskType = this.MaskType.Combine(rhs.MaskType);
                ret.PresetDefault = this.PresetDefault.Combine(rhs.PresetDefault);
                ret.Presets = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintPreset.ErrorMask?>>?>(ExceptionExt.Combine(this.Presets?.Overall, rhs.Presets?.Overall), ExceptionExt.Combine(this.Presets?.Specific, rhs.Presets?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Index;
            public bool FileName;
            public bool MaskType;
            public bool PresetDefault;
            public MaskItem<bool, TintPreset.TranslationMask?> Presets;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Index = defaultOn;
                this.FileName = defaultOn;
                this.MaskType = defaultOn;
                this.PresetDefault = defaultOn;
                this.Presets = new MaskItem<bool, TintPreset.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Index, null));
                ret.Add((FileName, null));
                ret.Add((MaskType, null));
                ret.Add((PresetDefault, null));
                ret.Add((Presets?.Overall ?? true, Presets?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => TintAssetsCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TintAssetsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintAssetsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static TintAssets CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static TintAssets CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TintAssets();
            ((TintAssetsSetterCommon)((ITintAssetsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITintAssetsGetter)rhs, include);

        void IClearable.Clear()
        {
            ((TintAssetsSetterCommon)((ITintAssetsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TintAssets GetNew()
        {
            return new TintAssets();
        }

    }
    #endregion

    #region Interface
    public partial interface ITintAssets :
        ITintAssetsGetter,
        ILoquiObjectSetter<ITintAssets>
    {
        new UInt16? Index { get; set; }
        new String? FileName { get; set; }
        new TintAssets.TintMaskType? MaskType { get; set; }
        new IFormLinkNullable<ColorRecord> PresetDefault { get; }
        new ExtendedList<TintPreset>? Presets { get; set; }
    }

    public partial interface ITintAssetsGetter :
        ILoquiObject,
        ILoquiObject<ITintAssetsGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        UInt16? Index { get; }
        String? FileName { get; }
        TintAssets.TintMaskType? MaskType { get; }
        IFormLinkNullableGetter<IColorRecordGetter> PresetDefault { get; }
        IReadOnlyList<ITintPresetGetter>? Presets { get; }

    }

    #endregion

    #region Common MixIn
    public static class TintAssetsMixIn
    {
        public static void Clear(this ITintAssets item)
        {
            ((TintAssetsSetterCommon)((ITintAssetsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TintAssets.Mask<bool> GetEqualsMask(
            this ITintAssetsGetter item,
            ITintAssetsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITintAssetsGetter item,
            string? name = null,
            TintAssets.Mask<bool>? printMask = null)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITintAssetsGetter item,
            FileGeneration fg,
            string? name = null,
            TintAssets.Mask<bool>? printMask = null)
        {
            ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITintAssetsGetter item,
            TintAssets.Mask<bool?> checkMask)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static TintAssets.Mask<bool> GetHasBeenSetMask(this ITintAssetsGetter item)
        {
            var ret = new TintAssets.Mask<bool>(false);
            ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITintAssetsGetter item,
            ITintAssetsGetter rhs)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITintAssets lhs,
            ITintAssetsGetter rhs,
            TintAssets.TranslationMask? copyMask = null)
        {
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ITintAssets lhs,
            ITintAssetsGetter rhs,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = TintAssets.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITintAssets lhs,
            ITintAssetsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static TintAssets DeepCopy(
            this ITintAssetsGetter item,
            TintAssets.TranslationMask? copyMask = null)
        {
            return ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TintAssets DeepCopy(
            this ITintAssetsGetter item,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? copyMask = null)
        {
            return ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TintAssets DeepCopy(
            this ITintAssetsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITintAssets item,
            XElement node,
            TintAssets.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITintAssets item,
            XElement node,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TintAssets.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ITintAssets item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((TintAssetsSetterCommon)((ITintAssetsGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITintAssets item,
            string path,
            TintAssets.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITintAssets item,
            string path,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITintAssets item,
            string path,
            ErrorMaskBuilder? errorMask,
            TintAssets.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ITintAssets item,
            Stream stream,
            TintAssets.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITintAssets item,
            Stream stream,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITintAssets item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TintAssets.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ITintAssets item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ITintAssets item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintAssetsSetterCommon)((ITintAssetsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum TintAssets_FieldIndex
    {
        Index = 0,
        FileName = 1,
        MaskType = 2,
        PresetDefault = 3,
        Presets = 4,
    }
    #endregion

    #region Registration
    public partial class TintAssets_Registration : ILoquiRegistration
    {
        public static readonly TintAssets_Registration Instance = new TintAssets_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 76,
            version: 0);

        public const string GUID = "2a4a72e5-c74d-4afd-9783-e4947dc83f79";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(TintAssets.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TintAssets.ErrorMask);

        public static readonly Type ClassType = typeof(TintAssets);

        public static readonly Type GetterType = typeof(ITintAssetsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITintAssets);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.TintAssets";

        public const string Name = "TintAssets";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "INDEX":
                    return (ushort)TintAssets_FieldIndex.Index;
                case "FILENAME":
                    return (ushort)TintAssets_FieldIndex.FileName;
                case "MASKTYPE":
                    return (ushort)TintAssets_FieldIndex.MaskType;
                case "PRESETDEFAULT":
                    return (ushort)TintAssets_FieldIndex.PresetDefault;
                case "PRESETS":
                    return (ushort)TintAssets_FieldIndex.Presets;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
            switch (enu)
            {
                case TintAssets_FieldIndex.Presets:
                    return true;
                case TintAssets_FieldIndex.Index:
                case TintAssets_FieldIndex.FileName:
                case TintAssets_FieldIndex.MaskType:
                case TintAssets_FieldIndex.PresetDefault:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
            switch (enu)
            {
                case TintAssets_FieldIndex.Presets:
                    return true;
                case TintAssets_FieldIndex.Index:
                case TintAssets_FieldIndex.FileName:
                case TintAssets_FieldIndex.MaskType:
                case TintAssets_FieldIndex.PresetDefault:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
            switch (enu)
            {
                case TintAssets_FieldIndex.Index:
                case TintAssets_FieldIndex.FileName:
                case TintAssets_FieldIndex.MaskType:
                case TintAssets_FieldIndex.PresetDefault:
                case TintAssets_FieldIndex.Presets:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
            switch (enu)
            {
                case TintAssets_FieldIndex.Index:
                    return "Index";
                case TintAssets_FieldIndex.FileName:
                    return "FileName";
                case TintAssets_FieldIndex.MaskType:
                    return "MaskType";
                case TintAssets_FieldIndex.PresetDefault:
                    return "PresetDefault";
                case TintAssets_FieldIndex.Presets:
                    return "Presets";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
            switch (enu)
            {
                case TintAssets_FieldIndex.Index:
                case TintAssets_FieldIndex.FileName:
                case TintAssets_FieldIndex.MaskType:
                case TintAssets_FieldIndex.PresetDefault:
                case TintAssets_FieldIndex.Presets:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
            switch (enu)
            {
                case TintAssets_FieldIndex.Index:
                case TintAssets_FieldIndex.FileName:
                case TintAssets_FieldIndex.MaskType:
                case TintAssets_FieldIndex.PresetDefault:
                case TintAssets_FieldIndex.Presets:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
            switch (enu)
            {
                case TintAssets_FieldIndex.Index:
                    return typeof(UInt16);
                case TintAssets_FieldIndex.FileName:
                    return typeof(String);
                case TintAssets_FieldIndex.MaskType:
                    return typeof(TintAssets.TintMaskType);
                case TintAssets_FieldIndex.PresetDefault:
                    return typeof(IFormLinkNullable<ColorRecord>);
                case TintAssets_FieldIndex.Presets:
                    return typeof(ExtendedList<TintPreset>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TintAssetsXmlWriteTranslation);
        public static readonly RecordType TINI_HEADER = new RecordType("TINI");
        public static readonly RecordType TINT_HEADER = new RecordType("TINT");
        public static readonly RecordType TINP_HEADER = new RecordType("TINP");
        public static readonly RecordType TIND_HEADER = new RecordType("TIND");
        public static readonly RecordType TINC_HEADER = new RecordType("TINC");
        public static readonly RecordType TINV_HEADER = new RecordType("TINV");
        public static readonly RecordType TIRS_HEADER = new RecordType("TIRS");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        TINI_HEADER,
                        TINT_HEADER,
                        TINP_HEADER,
                        TIND_HEADER,
                        TINC_HEADER,
                        TINV_HEADER,
                        TIRS_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        public static readonly Type BinaryWriteTranslation = typeof(TintAssetsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TintAssetsSetterCommon
    {
        public static readonly TintAssetsSetterCommon Instance = new TintAssetsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITintAssets item)
        {
            ClearPartial();
            item.Index = default;
            item.FileName = default;
            item.MaskType = default;
            item.PresetDefault.FormKey = null;
            item.Presets = null;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            ITintAssets item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TintAssetsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ITintAssets item,
            MutagenFrame frame)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ITintAssets item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x494E4954: // TINI
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.Index) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)TintAssets_FieldIndex.Index);
                }
                case 0x544E4954: // TINT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.FileName) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FileName = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)TintAssets_FieldIndex.FileName);
                }
                case 0x504E4954: // TINP
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.MaskType) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MaskType = EnumBinaryTranslation<TintAssets.TintMaskType>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)TintAssets_FieldIndex.MaskType);
                }
                case 0x444E4954: // TIND
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.PresetDefault) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.PresetDefault.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)TintAssets_FieldIndex.PresetDefault);
                }
                case 0x434E4954: // TINC
                case 0x564E4954: // TINV
                case 0x53524954: // TIRS
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.Presets) return TryGet<int?>.Failure;
                    item.Presets = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<TintPreset>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: TintPreset_Registration.TriggeringRecordTypes,
                            transl: (MutagenFrame r, out TintPreset listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<TintPreset>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!);
                            })
                        .ToExtendedList<TintPreset>();
                    return TryGet<int?>.Succeed((int)TintAssets_FieldIndex.Presets);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            ITintAssets item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class TintAssetsCommon
    {
        public static readonly TintAssetsCommon Instance = new TintAssetsCommon();

        public TintAssets.Mask<bool> GetEqualsMask(
            ITintAssetsGetter item,
            ITintAssetsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TintAssets.Mask<bool>(false);
            ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITintAssetsGetter item,
            ITintAssetsGetter rhs,
            TintAssets.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Index = item.Index == rhs.Index;
            ret.FileName = string.Equals(item.FileName, rhs.FileName);
            ret.MaskType = item.MaskType == rhs.MaskType;
            ret.PresetDefault = object.Equals(item.PresetDefault, rhs.PresetDefault);
            ret.Presets = item.Presets.CollectionEqualsHelper(
                rhs.Presets,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            ITintAssetsGetter item,
            string? name = null,
            TintAssets.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITintAssetsGetter item,
            FileGeneration fg,
            string? name = null,
            TintAssets.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TintAssets =>");
            }
            else
            {
                fg.AppendLine($"{name} (TintAssets) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITintAssetsGetter item,
            FileGeneration fg,
            TintAssets.Mask<bool>? printMask = null)
        {
            if ((printMask?.Index ?? true)
                && item.Index.TryGet(out var IndexItem))
            {
                fg.AppendItem(IndexItem, "Index");
            }
            if ((printMask?.FileName ?? true)
                && item.FileName.TryGet(out var FileNameItem))
            {
                fg.AppendItem(FileNameItem, "FileName");
            }
            if ((printMask?.MaskType ?? true)
                && item.MaskType.TryGet(out var MaskTypeItem))
            {
                fg.AppendItem(MaskTypeItem, "MaskType");
            }
            if ((printMask?.PresetDefault ?? true)
                && item.PresetDefault.TryGet(out var PresetDefaultItem))
            {
                fg.AppendItem(PresetDefaultItem, "PresetDefault");
            }
            if ((printMask?.Presets?.Overall ?? true)
                && item.Presets.TryGet(out var PresetsItem))
            {
                fg.AppendLine("Presets =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in PresetsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ITintAssetsGetter item,
            TintAssets.Mask<bool?> checkMask)
        {
            if (checkMask.Index.HasValue && checkMask.Index.Value != (item.Index != null)) return false;
            if (checkMask.FileName.HasValue && checkMask.FileName.Value != (item.FileName != null)) return false;
            if (checkMask.MaskType.HasValue && checkMask.MaskType.Value != (item.MaskType != null)) return false;
            if (checkMask.PresetDefault.HasValue && checkMask.PresetDefault.Value != (item.PresetDefault.FormKey != null)) return false;
            if (checkMask.Presets?.Overall.HasValue ?? false && checkMask.Presets!.Overall.Value != (item.Presets != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            ITintAssetsGetter item,
            TintAssets.Mask<bool> mask)
        {
            mask.Index = (item.Index != null);
            mask.FileName = (item.FileName != null);
            mask.MaskType = (item.MaskType != null);
            mask.PresetDefault = (item.PresetDefault.FormKey != null);
            if (item.Presets.TryGet(out var PresetsItem))
            {
                mask.Presets = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, TintPreset.Mask<bool>?>>?>(true, PresetsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, TintPreset.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITintAssetsGetter? lhs,
            ITintAssetsGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Index != rhs.Index) return false;
            if (!string.Equals(lhs.FileName, rhs.FileName)) return false;
            if (lhs.MaskType != rhs.MaskType) return false;
            if (!lhs.PresetDefault.Equals(rhs.PresetDefault)) return false;
            if (!lhs.Presets.SequenceEqual(rhs.Presets)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ITintAssetsGetter item)
        {
            int ret = 0;
            if (item.Index.TryGet(out var Indexitem))
            {
                ret = HashHelper.GetHashCode(Indexitem).CombineHashCode(ret);
            }
            if (item.FileName.TryGet(out var FileNameitem))
            {
                ret = HashHelper.GetHashCode(FileNameitem).CombineHashCode(ret);
            }
            if (item.MaskType.TryGet(out var MaskTypeitem))
            {
                ret = HashHelper.GetHashCode(MaskTypeitem).CombineHashCode(ret);
            }
            if (item.PresetDefault.TryGet(out var PresetDefaultitem))
            {
                ret = HashHelper.GetHashCode(PresetDefaultitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Presets).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TintAssets.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ITintAssetsGetter obj)
        {
            yield return obj.PresetDefault;
            if (obj.Presets != null)
            {
                foreach (var item in obj.Presets.SelectMany(f => f.Links))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class TintAssetsSetterTranslationCommon
    {
        public static readonly TintAssetsSetterTranslationCommon Instance = new TintAssetsSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ITintAssets item,
            ITintAssetsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)TintAssets_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)TintAssets_FieldIndex.FileName) ?? true))
            {
                item.FileName = rhs.FileName;
            }
            if ((copyMask?.GetShouldTranslate((int)TintAssets_FieldIndex.MaskType) ?? true))
            {
                item.MaskType = rhs.MaskType;
            }
            if ((copyMask?.GetShouldTranslate((int)TintAssets_FieldIndex.PresetDefault) ?? true))
            {
                item.PresetDefault.FormKey = rhs.PresetDefault.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)TintAssets_FieldIndex.Presets) ?? true))
            {
                errorMask?.PushIndex((int)TintAssets_FieldIndex.Presets);
                try
                {
                    if ((rhs.Presets != null))
                    {
                        item.Presets = 
                            rhs.Presets
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<TintPreset>();
                    }
                    else
                    {
                        item.Presets = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public TintAssets DeepCopy(
            ITintAssetsGetter item,
            TintAssets.TranslationMask? copyMask = null)
        {
            TintAssets ret = (TintAssets)((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public TintAssets DeepCopy(
            ITintAssetsGetter item,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? copyMask = null)
        {
            TintAssets ret = (TintAssets)((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public TintAssets DeepCopy(
            ITintAssetsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TintAssets ret = (TintAssets)((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class TintAssets
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TintAssets_Registration.Instance;
        public static TintAssets_Registration Registration => TintAssets_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TintAssetsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TintAssetsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TintAssetsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TintAssetsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static TintAssetsXmlWriteTranslation Instance = new TintAssetsXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITintAssetsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((item.Index != null)
                && (translationMask?.GetShouldTranslate((int)TintAssets_FieldIndex.Index) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Index),
                    item: item.Index.Value,
                    fieldIndex: (int)TintAssets_FieldIndex.Index,
                    errorMask: errorMask);
            }
            if ((item.FileName != null)
                && (translationMask?.GetShouldTranslate((int)TintAssets_FieldIndex.FileName) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FileName),
                    item: item.FileName,
                    fieldIndex: (int)TintAssets_FieldIndex.FileName,
                    errorMask: errorMask);
            }
            if ((item.MaskType != null)
                && (translationMask?.GetShouldTranslate((int)TintAssets_FieldIndex.MaskType) ?? true))
            {
                EnumXmlTranslation<TintAssets.TintMaskType>.Instance.Write(
                    node: node,
                    name: nameof(item.MaskType),
                    item: item.MaskType,
                    fieldIndex: (int)TintAssets_FieldIndex.MaskType,
                    errorMask: errorMask);
            }
            if ((item.PresetDefault.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)TintAssets_FieldIndex.PresetDefault) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PresetDefault),
                    item: item.PresetDefault.FormKey,
                    fieldIndex: (int)TintAssets_FieldIndex.PresetDefault,
                    errorMask: errorMask);
            }
            if ((item.Presets != null)
                && (translationMask?.GetShouldTranslate((int)TintAssets_FieldIndex.Presets) ?? true))
            {
                ListXmlTranslation<ITintPresetGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Presets),
                    item: item.Presets,
                    fieldIndex: (int)TintAssets_FieldIndex.Presets,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TintAssets_FieldIndex.Presets),
                    transl: (XElement subNode, ITintPresetGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((TintPresetXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
        }

        public void Write(
            XElement node,
            ITintAssetsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.TintAssets");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.TintAssets");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITintAssetsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ITintAssetsGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ITintAssetsGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class TintAssetsXmlCreateTranslation
    {
        public readonly static TintAssetsXmlCreateTranslation Instance = new TintAssetsXmlCreateTranslation();

        public static void FillPublicXml(
            ITintAssets item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TintAssetsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITintAssets item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Index":
                    errorMask?.PushIndex((int)TintAssets_FieldIndex.Index);
                    try
                    {
                        item.Index = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FileName":
                    errorMask?.PushIndex((int)TintAssets_FieldIndex.FileName);
                    try
                    {
                        item.FileName = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaskType":
                    errorMask?.PushIndex((int)TintAssets_FieldIndex.MaskType);
                    try
                    {
                        item.MaskType = EnumXmlTranslation<TintAssets.TintMaskType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PresetDefault":
                    errorMask?.PushIndex((int)TintAssets_FieldIndex.PresetDefault);
                    try
                    {
                        item.PresetDefault.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Presets":
                    errorMask?.PushIndex((int)TintAssets_FieldIndex.Presets);
                    try
                    {
                        if (ListXmlTranslation<TintPreset>.Instance.Parse(
                            node: node,
                            enumer: out var PresetsItem,
                            transl: LoquiXmlTranslation<TintPreset>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Presets = PresetsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Presets = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class TintAssetsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITintAssetsGetter item,
            XElement node,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((TintAssetsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TintAssets.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITintAssetsGetter item,
            string path,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITintAssetsGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITintAssetsGetter item,
            Stream stream,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITintAssetsGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITintAssetsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((TintAssetsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ITintAssetsGetter item,
            XElement node,
            string? name = null,
            TintAssets.TranslationMask? translationMask = null)
        {
            ((TintAssetsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ITintAssetsGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((TintAssetsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITintAssetsGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((TintAssetsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TintAssetsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static TintAssetsBinaryWriteTranslation Instance = new TintAssetsBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ITintAssetsGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Index,
                header: recordTypeConverter.ConvertToCustom(TintAssets_Registration.TINI_HEADER));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FileName,
                header: recordTypeConverter.ConvertToCustom(TintAssets_Registration.TINT_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<TintAssets.TintMaskType>.Instance.WriteNullable(
                writer,
                item.MaskType,
                length: 2,
                header: recordTypeConverter.ConvertToCustom(TintAssets_Registration.TINP_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PresetDefault,
                header: recordTypeConverter.ConvertToCustom(TintAssets_Registration.TIND_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ITintPresetGetter>.Instance.Write(
                writer: writer,
                items: item.Presets,
                transl: (MutagenWriter subWriter, ITintPresetGetter subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((TintPresetBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter);
                    }
                });
        }

        public void Write(
            MutagenWriter writer,
            ITintAssetsGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITintAssetsGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class TintAssetsBinaryCreateTranslation
    {
        public readonly static TintAssetsBinaryCreateTranslation Instance = new TintAssetsBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class TintAssetsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITintAssetsGetter item,
            MutagenWriter writer)
        {
            ((TintAssetsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TintAssetsBinaryOverlay :
        BinaryOverlay,
        ITintAssetsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TintAssets_Registration.Instance;
        public static TintAssets_Registration Registration => TintAssets_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TintAssetsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TintAssetsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITintAssetsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITintAssetsGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => TintAssetsCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => TintAssetsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TintAssetsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TintAssetsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintAssetsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Index
        private int? _IndexLocation;
        public UInt16? Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _IndexLocation.Value, _package.Meta)) : default(UInt16?);
        #endregion
        #region FileName
        private int? _FileNameLocation;
        public String? FileName => _FileNameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _FileNameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region MaskType
        private int? _MaskTypeLocation;
        private bool MaskType_IsSet => _MaskTypeLocation.HasValue;
        public TintAssets.TintMaskType? MaskType => MaskType_IsSet ? (TintAssets.TintMaskType)BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _MaskTypeLocation!.Value, _package.Meta)) : default(TintAssets.TintMaskType?);
        #endregion
        #region PresetDefault
        private int? _PresetDefaultLocation;
        public bool PresetDefault_IsSet => _PresetDefaultLocation.HasValue;
        public IFormLinkNullableGetter<IColorRecordGetter> PresetDefault => _PresetDefaultLocation.HasValue ? new FormLinkNullable<IColorRecordGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PresetDefaultLocation.Value, _package.Meta)))) : FormLinkNullable<IColorRecordGetter>.Empty;
        #endregion
        public IReadOnlyList<ITintPresetGetter>? Presets { get; private set; }
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected TintAssetsBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static TintAssetsBinaryOverlay TintAssetsFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TintAssetsBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x494E4954: // TINI
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.Index) return TryGet<int?>.Failure;
                    _IndexLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)TintAssets_FieldIndex.Index);
                }
                case 0x544E4954: // TINT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.FileName) return TryGet<int?>.Failure;
                    _FileNameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)TintAssets_FieldIndex.FileName);
                }
                case 0x504E4954: // TINP
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.MaskType) return TryGet<int?>.Failure;
                    _MaskTypeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)TintAssets_FieldIndex.MaskType);
                }
                case 0x444E4954: // TIND
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.PresetDefault) return TryGet<int?>.Failure;
                    _PresetDefaultLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)TintAssets_FieldIndex.PresetDefault);
                }
                case 0x434E4954: // TINC
                case 0x564E4954: // TINV
                case 0x53524954: // TIRS
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintAssets_FieldIndex.Presets) return TryGet<int?>.Failure;
                    this.Presets = this.ParseRepeatedTypelessSubrecord<TintPresetBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: TintPreset_Registration.TriggeringRecordTypes,
                        factory:  TintPresetBinaryOverlay.TintPresetFactory);
                    return TryGet<int?>.Succeed((int)TintAssets_FieldIndex.Presets);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

