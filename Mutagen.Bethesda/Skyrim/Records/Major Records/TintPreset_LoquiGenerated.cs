/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class TintPreset :
        ITintPreset,
        ILoquiObjectSetter<TintPreset>,
        IEquatable<TintPreset>,
        IEqualsMask
    {
        #region Ctor
        public TintPreset()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Color
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<ColorRecord> _Color = new FormLinkNullable<ColorRecord>();
        public IFormLinkNullable<ColorRecord> Color => this._Color;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IColorRecordGetter> ITintPresetGetter.Color => this.Color;
        #endregion
        #region DefaultValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single? _DefaultValue;
        public Single? DefaultValue
        {
            get => this._DefaultValue;
            set => this._DefaultValue = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ITintPresetGetter.DefaultValue => this.DefaultValue;
        #endregion
        #region Index
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16? _Index;
        public UInt16? Index
        {
            get => this._Index;
            set => this._Index = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? ITintPresetGetter.Index => this.Index;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TintPresetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITintPresetGetter rhs)) return false;
            return ((TintPresetCommon)((ITintPresetGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(TintPreset obj)
        {
            return ((TintPresetCommon)((ITintPresetGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TintPresetCommon)((ITintPresetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => TintPresetXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TintPresetXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static TintPreset CreateFromXml(
            XElement node,
            TintPreset.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static TintPreset CreateFromXml(
            XElement node,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TintPreset.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static TintPreset CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new TintPreset();
            ((TintPresetSetterCommon)((ITintPresetGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static TintPreset CreateFromXml(
            string path,
            TintPreset.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TintPreset CreateFromXml(
            string path,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TintPreset CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            TintPreset.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TintPreset CreateFromXml(
            Stream stream,
            TintPreset.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TintPreset CreateFromXml(
            Stream stream,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TintPreset CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TintPreset.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Color = initialValue;
                this.DefaultValue = initialValue;
                this.Index = initialValue;
            }

            public Mask(
                TItem Color,
                TItem DefaultValue,
                TItem Index)
            {
                this.Color = Color;
                this.DefaultValue = DefaultValue;
                this.Index = Index;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Color;
            public TItem DefaultValue;
            public TItem Index;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                if (!object.Equals(this.DefaultValue, rhs.DefaultValue)) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Color?.GetHashCode());
                ret = ret.CombineHashCode(this.DefaultValue?.GetHashCode());
                ret = ret.CombineHashCode(this.Index?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Color)) return false;
                if (!eval(this.DefaultValue)) return false;
                if (!eval(this.Index)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Color)) return true;
                if (eval(this.DefaultValue)) return true;
                if (eval(this.Index)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TintPreset.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Color = eval(this.Color);
                obj.DefaultValue = eval(this.DefaultValue);
                obj.Index = eval(this.Index);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(TintPreset.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, TintPreset.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(TintPreset.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Color ?? true)
                    {
                        fg.AppendItem(Color, "Color");
                    }
                    if (printMask?.DefaultValue ?? true)
                    {
                        fg.AppendItem(DefaultValue, "DefaultValue");
                    }
                    if (printMask?.Index ?? true)
                    {
                        fg.AppendItem(Index, "Index");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Color;
            public Exception? DefaultValue;
            public Exception? Index;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TintPreset_FieldIndex enu = (TintPreset_FieldIndex)index;
                switch (enu)
                {
                    case TintPreset_FieldIndex.Color:
                        return Color;
                    case TintPreset_FieldIndex.DefaultValue:
                        return DefaultValue;
                    case TintPreset_FieldIndex.Index:
                        return Index;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TintPreset_FieldIndex enu = (TintPreset_FieldIndex)index;
                switch (enu)
                {
                    case TintPreset_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    case TintPreset_FieldIndex.DefaultValue:
                        this.DefaultValue = ex;
                        break;
                    case TintPreset_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TintPreset_FieldIndex enu = (TintPreset_FieldIndex)index;
                switch (enu)
                {
                    case TintPreset_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    case TintPreset_FieldIndex.DefaultValue:
                        this.DefaultValue = (Exception?)obj;
                        break;
                    case TintPreset_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Color != null) return true;
                if (DefaultValue != null) return true;
                if (Index != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Color, "Color");
                fg.AppendItem(DefaultValue, "DefaultValue");
                fg.AppendItem(Index, "Index");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Color = this.Color.Combine(rhs.Color);
                ret.DefaultValue = this.DefaultValue.Combine(rhs.DefaultValue);
                ret.Index = this.Index.Combine(rhs.Index);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Color;
            public bool DefaultValue;
            public bool Index;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Color = defaultOn;
                this.DefaultValue = defaultOn;
                this.Index = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Color, null));
                ret.Add((DefaultValue, null));
                ret.Add((Index, null));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => TintPresetCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TintPresetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintPresetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static TintPreset CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static TintPreset CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TintPreset();
            ((TintPresetSetterCommon)((ITintPresetGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITintPresetGetter)rhs, include);

        void IClearable.Clear()
        {
            ((TintPresetSetterCommon)((ITintPresetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TintPreset GetNew()
        {
            return new TintPreset();
        }

    }
    #endregion

    #region Interface
    public partial interface ITintPreset :
        ITintPresetGetter,
        ILoquiObjectSetter<ITintPreset>
    {
        new IFormLinkNullable<ColorRecord> Color { get; }
        new Single? DefaultValue { get; set; }
        new UInt16? Index { get; set; }
    }

    public partial interface ITintPresetGetter :
        ILoquiObject,
        ILoquiObject<ITintPresetGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        IFormLinkNullableGetter<IColorRecordGetter> Color { get; }
        Single? DefaultValue { get; }
        UInt16? Index { get; }

    }

    #endregion

    #region Common MixIn
    public static class TintPresetMixIn
    {
        public static void Clear(this ITintPreset item)
        {
            ((TintPresetSetterCommon)((ITintPresetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TintPreset.Mask<bool> GetEqualsMask(
            this ITintPresetGetter item,
            ITintPresetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITintPresetGetter item,
            string? name = null,
            TintPreset.Mask<bool>? printMask = null)
        {
            return ((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITintPresetGetter item,
            FileGeneration fg,
            string? name = null,
            TintPreset.Mask<bool>? printMask = null)
        {
            ((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITintPresetGetter item,
            TintPreset.Mask<bool?> checkMask)
        {
            return ((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static TintPreset.Mask<bool> GetHasBeenSetMask(this ITintPresetGetter item)
        {
            var ret = new TintPreset.Mask<bool>(false);
            ((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITintPresetGetter item,
            ITintPresetGetter rhs)
        {
            return ((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITintPreset lhs,
            ITintPresetGetter rhs,
            TintPreset.TranslationMask? copyMask = null)
        {
            ((TintPresetSetterTranslationCommon)((ITintPresetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ITintPreset lhs,
            ITintPresetGetter rhs,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TintPresetSetterTranslationCommon)((ITintPresetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = TintPreset.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITintPreset lhs,
            ITintPresetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TintPresetSetterTranslationCommon)((ITintPresetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static TintPreset DeepCopy(
            this ITintPresetGetter item,
            TintPreset.TranslationMask? copyMask = null)
        {
            return ((TintPresetSetterTranslationCommon)((ITintPresetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TintPreset DeepCopy(
            this ITintPresetGetter item,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? copyMask = null)
        {
            return ((TintPresetSetterTranslationCommon)((ITintPresetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TintPreset DeepCopy(
            this ITintPresetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TintPresetSetterTranslationCommon)((ITintPresetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITintPreset item,
            XElement node,
            TintPreset.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITintPreset item,
            XElement node,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TintPreset.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ITintPreset item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((TintPresetSetterCommon)((ITintPresetGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITintPreset item,
            string path,
            TintPreset.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITintPreset item,
            string path,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITintPreset item,
            string path,
            ErrorMaskBuilder? errorMask,
            TintPreset.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ITintPreset item,
            Stream stream,
            TintPreset.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITintPreset item,
            Stream stream,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITintPreset item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TintPreset.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ITintPreset item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ITintPreset item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintPresetSetterCommon)((ITintPresetGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum TintPreset_FieldIndex
    {
        Color = 0,
        DefaultValue = 1,
        Index = 2,
    }
    #endregion

    #region Registration
    public partial class TintPreset_Registration : ILoquiRegistration
    {
        public static readonly TintPreset_Registration Instance = new TintPreset_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 77,
            version: 0);

        public const string GUID = "3feb2956-21fb-4da7-870a-f55ae751eff0";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(TintPreset.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TintPreset.ErrorMask);

        public static readonly Type ClassType = typeof(TintPreset);

        public static readonly Type GetterType = typeof(ITintPresetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITintPreset);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.TintPreset";

        public const string Name = "TintPreset";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "COLOR":
                    return (ushort)TintPreset_FieldIndex.Color;
                case "DEFAULTVALUE":
                    return (ushort)TintPreset_FieldIndex.DefaultValue;
                case "INDEX":
                    return (ushort)TintPreset_FieldIndex.Index;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TintPreset_FieldIndex enu = (TintPreset_FieldIndex)index;
            switch (enu)
            {
                case TintPreset_FieldIndex.Color:
                case TintPreset_FieldIndex.DefaultValue:
                case TintPreset_FieldIndex.Index:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TintPreset_FieldIndex enu = (TintPreset_FieldIndex)index;
            switch (enu)
            {
                case TintPreset_FieldIndex.Color:
                case TintPreset_FieldIndex.DefaultValue:
                case TintPreset_FieldIndex.Index:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TintPreset_FieldIndex enu = (TintPreset_FieldIndex)index;
            switch (enu)
            {
                case TintPreset_FieldIndex.Color:
                case TintPreset_FieldIndex.DefaultValue:
                case TintPreset_FieldIndex.Index:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TintPreset_FieldIndex enu = (TintPreset_FieldIndex)index;
            switch (enu)
            {
                case TintPreset_FieldIndex.Color:
                    return "Color";
                case TintPreset_FieldIndex.DefaultValue:
                    return "DefaultValue";
                case TintPreset_FieldIndex.Index:
                    return "Index";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TintPreset_FieldIndex enu = (TintPreset_FieldIndex)index;
            switch (enu)
            {
                case TintPreset_FieldIndex.Color:
                case TintPreset_FieldIndex.DefaultValue:
                case TintPreset_FieldIndex.Index:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TintPreset_FieldIndex enu = (TintPreset_FieldIndex)index;
            switch (enu)
            {
                case TintPreset_FieldIndex.Color:
                case TintPreset_FieldIndex.DefaultValue:
                case TintPreset_FieldIndex.Index:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TintPreset_FieldIndex enu = (TintPreset_FieldIndex)index;
            switch (enu)
            {
                case TintPreset_FieldIndex.Color:
                    return typeof(IFormLinkNullable<ColorRecord>);
                case TintPreset_FieldIndex.DefaultValue:
                    return typeof(Single);
                case TintPreset_FieldIndex.Index:
                    return typeof(UInt16);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TintPresetXmlWriteTranslation);
        public static readonly RecordType TINC_HEADER = new RecordType("TINC");
        public static readonly RecordType TINV_HEADER = new RecordType("TINV");
        public static readonly RecordType TIRS_HEADER = new RecordType("TIRS");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        TINC_HEADER,
                        TINV_HEADER,
                        TIRS_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(TintPresetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TintPresetSetterCommon
    {
        public static readonly TintPresetSetterCommon Instance = new TintPresetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITintPreset item)
        {
            ClearPartial();
            item.Color.FormKey = null;
            item.DefaultValue = default;
            item.Index = default;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            ITintPreset item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TintPresetXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ITintPreset item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ITintPreset item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x434E4954: // TINC
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintPreset_FieldIndex.Color) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Color.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)TintPreset_FieldIndex.Color);
                }
                case 0x564E4954: // TINV
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintPreset_FieldIndex.DefaultValue) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.DefaultValue = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)TintPreset_FieldIndex.DefaultValue);
                }
                case 0x53524954: // TIRS
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintPreset_FieldIndex.Index) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)TintPreset_FieldIndex.Index);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            ITintPreset item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class TintPresetCommon
    {
        public static readonly TintPresetCommon Instance = new TintPresetCommon();

        public TintPreset.Mask<bool> GetEqualsMask(
            ITintPresetGetter item,
            ITintPresetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TintPreset.Mask<bool>(false);
            ((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITintPresetGetter item,
            ITintPresetGetter rhs,
            TintPreset.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Color = object.Equals(item.Color, rhs.Color);
            ret.DefaultValue = item.DefaultValue.EqualsWithin(rhs.DefaultValue);
            ret.Index = item.Index == rhs.Index;
        }
        
        public string ToString(
            ITintPresetGetter item,
            string? name = null,
            TintPreset.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITintPresetGetter item,
            FileGeneration fg,
            string? name = null,
            TintPreset.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TintPreset =>");
            }
            else
            {
                fg.AppendLine($"{name} (TintPreset) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITintPresetGetter item,
            FileGeneration fg,
            TintPreset.Mask<bool>? printMask = null)
        {
            if ((printMask?.Color ?? true)
                && item.Color.TryGet(out var ColorItem))
            {
                fg.AppendItem(ColorItem, "Color");
            }
            if ((printMask?.DefaultValue ?? true)
                && item.DefaultValue.TryGet(out var DefaultValueItem))
            {
                fg.AppendItem(DefaultValueItem, "DefaultValue");
            }
            if ((printMask?.Index ?? true)
                && item.Index.TryGet(out var IndexItem))
            {
                fg.AppendItem(IndexItem, "Index");
            }
        }
        
        public bool HasBeenSet(
            ITintPresetGetter item,
            TintPreset.Mask<bool?> checkMask)
        {
            if (checkMask.Color.HasValue && checkMask.Color.Value != (item.Color.FormKey != null)) return false;
            if (checkMask.DefaultValue.HasValue && checkMask.DefaultValue.Value != (item.DefaultValue != null)) return false;
            if (checkMask.Index.HasValue && checkMask.Index.Value != (item.Index != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            ITintPresetGetter item,
            TintPreset.Mask<bool> mask)
        {
            mask.Color = (item.Color.FormKey != null);
            mask.DefaultValue = (item.DefaultValue != null);
            mask.Index = (item.Index != null);
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITintPresetGetter? lhs,
            ITintPresetGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Color.Equals(rhs.Color)) return false;
            if (!lhs.DefaultValue.EqualsWithin(rhs.DefaultValue)) return false;
            if (lhs.Index != rhs.Index) return false;
            return true;
        }
        
        public virtual int GetHashCode(ITintPresetGetter item)
        {
            int ret = 0;
            if (item.Color.TryGet(out var Coloritem))
            {
                ret = HashHelper.GetHashCode(Coloritem).CombineHashCode(ret);
            }
            if (item.DefaultValue.TryGet(out var DefaultValueitem))
            {
                ret = HashHelper.GetHashCode(DefaultValueitem).CombineHashCode(ret);
            }
            if (item.Index.TryGet(out var Indexitem))
            {
                ret = HashHelper.GetHashCode(Indexitem).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TintPreset.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ITintPresetGetter obj)
        {
            yield return obj.Color;
            yield break;
        }
        
        #endregion
        
    }
    public partial class TintPresetSetterTranslationCommon
    {
        public static readonly TintPresetSetterTranslationCommon Instance = new TintPresetSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ITintPreset item,
            ITintPresetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)TintPreset_FieldIndex.Color) ?? true))
            {
                item.Color.FormKey = rhs.Color.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)TintPreset_FieldIndex.DefaultValue) ?? true))
            {
                item.DefaultValue = rhs.DefaultValue;
            }
            if ((copyMask?.GetShouldTranslate((int)TintPreset_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
        }
        
        #endregion
        
        public TintPreset DeepCopy(
            ITintPresetGetter item,
            TintPreset.TranslationMask? copyMask = null)
        {
            TintPreset ret = (TintPreset)((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public TintPreset DeepCopy(
            ITintPresetGetter item,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? copyMask = null)
        {
            TintPreset ret = (TintPreset)((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public TintPreset DeepCopy(
            ITintPresetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TintPreset ret = (TintPreset)((TintPresetCommon)((ITintPresetGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class TintPreset
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TintPreset_Registration.Instance;
        public static TintPreset_Registration Registration => TintPreset_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TintPresetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TintPresetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TintPresetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITintPresetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITintPresetGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITintPresetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TintPresetXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static TintPresetXmlWriteTranslation Instance = new TintPresetXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITintPresetGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((item.Color.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)TintPreset_FieldIndex.Color) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Color),
                    item: item.Color.FormKey,
                    fieldIndex: (int)TintPreset_FieldIndex.Color,
                    errorMask: errorMask);
            }
            if ((item.DefaultValue != null)
                && (translationMask?.GetShouldTranslate((int)TintPreset_FieldIndex.DefaultValue) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DefaultValue),
                    item: item.DefaultValue.Value,
                    fieldIndex: (int)TintPreset_FieldIndex.DefaultValue,
                    errorMask: errorMask);
            }
            if ((item.Index != null)
                && (translationMask?.GetShouldTranslate((int)TintPreset_FieldIndex.Index) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Index),
                    item: item.Index.Value,
                    fieldIndex: (int)TintPreset_FieldIndex.Index,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ITintPresetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.TintPreset");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.TintPreset");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITintPresetGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ITintPresetGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ITintPresetGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class TintPresetXmlCreateTranslation
    {
        public readonly static TintPresetXmlCreateTranslation Instance = new TintPresetXmlCreateTranslation();

        public static void FillPublicXml(
            ITintPreset item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TintPresetXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITintPreset item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Color":
                    errorMask?.PushIndex((int)TintPreset_FieldIndex.Color);
                    try
                    {
                        item.Color.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DefaultValue":
                    errorMask?.PushIndex((int)TintPreset_FieldIndex.DefaultValue);
                    try
                    {
                        item.DefaultValue = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Index":
                    errorMask?.PushIndex((int)TintPreset_FieldIndex.Index);
                    try
                    {
                        item.Index = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class TintPresetXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITintPresetGetter item,
            XElement node,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((TintPresetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TintPreset.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITintPresetGetter item,
            string path,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITintPresetGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITintPresetGetter item,
            Stream stream,
            out TintPreset.ErrorMask errorMask,
            TintPreset.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITintPresetGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITintPresetGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((TintPresetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ITintPresetGetter item,
            XElement node,
            string? name = null,
            TintPreset.TranslationMask? translationMask = null)
        {
            ((TintPresetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ITintPresetGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((TintPresetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITintPresetGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((TintPresetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TintPresetBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static TintPresetBinaryWriteTranslation Instance = new TintPresetBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ITintPresetGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferenceReader masterReferences)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Color,
                header: recordTypeConverter.ConvertToCustom(TintPreset_Registration.TINC_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultValue,
                header: recordTypeConverter.ConvertToCustom(TintPreset_Registration.TINV_HEADER));
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Index,
                header: recordTypeConverter.ConvertToCustom(TintPreset_Registration.TIRS_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            ITintPresetGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITintPresetGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class TintPresetBinaryCreateTranslation
    {
        public readonly static TintPresetBinaryCreateTranslation Instance = new TintPresetBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class TintPresetBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITintPresetGetter item,
            MutagenWriter writer,
            MasterReferenceReader masterReferences)
        {
            ((TintPresetBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TintPresetBinaryOverlay :
        BinaryOverlay,
        ITintPresetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TintPreset_Registration.Instance;
        public static TintPreset_Registration Registration => TintPreset_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TintPresetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TintPresetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITintPresetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITintPresetGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITintPresetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITintPresetGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => TintPresetCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => TintPresetXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TintPresetXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TintPresetBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TintPresetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Color
        private int? _ColorLocation;
        public bool Color_IsSet => _ColorLocation.HasValue;
        public IFormLinkNullableGetter<IColorRecordGetter> Color => _ColorLocation.HasValue ? new FormLinkNullable<IColorRecordGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ColorLocation.Value, _package.Meta)))) : FormLinkNullable<IColorRecordGetter>.Empty;
        #endregion
        #region DefaultValue
        private int? _DefaultValueLocation;
        public Single? DefaultValue => _DefaultValueLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _DefaultValueLocation.Value, _package.Meta)) : default(Single?);
        #endregion
        #region Index
        private int? _IndexLocation;
        public UInt16? Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _IndexLocation.Value, _package.Meta)) : default(UInt16?);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected TintPresetBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static TintPresetBinaryOverlay TintPresetFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TintPresetBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x434E4954: // TINC
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintPreset_FieldIndex.Color) return TryGet<int?>.Failure;
                    _ColorLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)TintPreset_FieldIndex.Color);
                }
                case 0x564E4954: // TINV
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintPreset_FieldIndex.DefaultValue) return TryGet<int?>.Failure;
                    _DefaultValueLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)TintPreset_FieldIndex.DefaultValue);
                }
                case 0x53524954: // TIRS
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)TintPreset_FieldIndex.Index) return TryGet<int?>.Failure;
                    _IndexLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)TintPreset_FieldIndex.Index);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

