/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class TreeData :
        ITreeData,
        ILoquiObjectSetter<TreeData>,
        IEquatable<TreeData>,
        IEqualsMask
    {
        #region Ctor
        public TreeData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TrunkFlexibility
        public Single TrunkFlexibility { get; set; } = default;
        #endregion
        #region BranchFlexibility
        public Single BranchFlexibility { get; set; } = default;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _Unknown = new byte[32];
        public Byte[] Unknown
        {
            get => _Unknown;
            set => this._Unknown = value ?? new byte[32];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> ITreeDataGetter.Unknown => this.Unknown;
        #endregion
        #region LeafAmplitude
        public Single LeafAmplitude { get; set; } = default;
        #endregion
        #region LeafFrequency
        public Single LeafFrequency { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TreeDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITreeDataGetter rhs)) return false;
            return ((TreeDataCommon)((ITreeDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(TreeData obj)
        {
            return ((TreeDataCommon)((ITreeDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TreeDataCommon)((ITreeDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => TreeDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TreeDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static TreeData CreateFromXml(
            XElement node,
            TreeData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static TreeData CreateFromXml(
            XElement node,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TreeData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static TreeData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new TreeData();
            ((TreeDataSetterCommon)((ITreeDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static TreeData CreateFromXml(
            string path,
            TreeData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TreeData CreateFromXml(
            string path,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TreeData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            TreeData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TreeData CreateFromXml(
            Stream stream,
            TreeData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TreeData CreateFromXml(
            Stream stream,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TreeData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TreeData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.TrunkFlexibility = initialValue;
                this.BranchFlexibility = initialValue;
                this.Unknown = initialValue;
                this.LeafAmplitude = initialValue;
                this.LeafFrequency = initialValue;
            }

            public Mask(
                TItem TrunkFlexibility,
                TItem BranchFlexibility,
                TItem Unknown,
                TItem LeafAmplitude,
                TItem LeafFrequency)
            {
                this.TrunkFlexibility = TrunkFlexibility;
                this.BranchFlexibility = BranchFlexibility;
                this.Unknown = Unknown;
                this.LeafAmplitude = LeafAmplitude;
                this.LeafFrequency = LeafFrequency;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem TrunkFlexibility;
            public TItem BranchFlexibility;
            public TItem Unknown;
            public TItem LeafAmplitude;
            public TItem LeafFrequency;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.TrunkFlexibility, rhs.TrunkFlexibility)) return false;
                if (!object.Equals(this.BranchFlexibility, rhs.BranchFlexibility)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.LeafAmplitude, rhs.LeafAmplitude)) return false;
                if (!object.Equals(this.LeafFrequency, rhs.LeafFrequency)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.TrunkFlexibility);
                hash.Add(this.BranchFlexibility);
                hash.Add(this.Unknown);
                hash.Add(this.LeafAmplitude);
                hash.Add(this.LeafFrequency);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.TrunkFlexibility)) return false;
                if (!eval(this.BranchFlexibility)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.LeafAmplitude)) return false;
                if (!eval(this.LeafFrequency)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.TrunkFlexibility)) return true;
                if (eval(this.BranchFlexibility)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.LeafAmplitude)) return true;
                if (eval(this.LeafFrequency)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TreeData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.TrunkFlexibility = eval(this.TrunkFlexibility);
                obj.BranchFlexibility = eval(this.BranchFlexibility);
                obj.Unknown = eval(this.Unknown);
                obj.LeafAmplitude = eval(this.LeafAmplitude);
                obj.LeafFrequency = eval(this.LeafFrequency);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(TreeData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, TreeData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(TreeData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.TrunkFlexibility ?? true)
                    {
                        fg.AppendItem(TrunkFlexibility, "TrunkFlexibility");
                    }
                    if (printMask?.BranchFlexibility ?? true)
                    {
                        fg.AppendItem(BranchFlexibility, "BranchFlexibility");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.LeafAmplitude ?? true)
                    {
                        fg.AppendItem(LeafAmplitude, "LeafAmplitude");
                    }
                    if (printMask?.LeafFrequency ?? true)
                    {
                        fg.AppendItem(LeafFrequency, "LeafFrequency");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? TrunkFlexibility;
            public Exception? BranchFlexibility;
            public Exception? Unknown;
            public Exception? LeafAmplitude;
            public Exception? LeafFrequency;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TreeData_FieldIndex enu = (TreeData_FieldIndex)index;
                switch (enu)
                {
                    case TreeData_FieldIndex.TrunkFlexibility:
                        return TrunkFlexibility;
                    case TreeData_FieldIndex.BranchFlexibility:
                        return BranchFlexibility;
                    case TreeData_FieldIndex.Unknown:
                        return Unknown;
                    case TreeData_FieldIndex.LeafAmplitude:
                        return LeafAmplitude;
                    case TreeData_FieldIndex.LeafFrequency:
                        return LeafFrequency;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TreeData_FieldIndex enu = (TreeData_FieldIndex)index;
                switch (enu)
                {
                    case TreeData_FieldIndex.TrunkFlexibility:
                        this.TrunkFlexibility = ex;
                        break;
                    case TreeData_FieldIndex.BranchFlexibility:
                        this.BranchFlexibility = ex;
                        break;
                    case TreeData_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case TreeData_FieldIndex.LeafAmplitude:
                        this.LeafAmplitude = ex;
                        break;
                    case TreeData_FieldIndex.LeafFrequency:
                        this.LeafFrequency = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TreeData_FieldIndex enu = (TreeData_FieldIndex)index;
                switch (enu)
                {
                    case TreeData_FieldIndex.TrunkFlexibility:
                        this.TrunkFlexibility = (Exception?)obj;
                        break;
                    case TreeData_FieldIndex.BranchFlexibility:
                        this.BranchFlexibility = (Exception?)obj;
                        break;
                    case TreeData_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case TreeData_FieldIndex.LeafAmplitude:
                        this.LeafAmplitude = (Exception?)obj;
                        break;
                    case TreeData_FieldIndex.LeafFrequency:
                        this.LeafFrequency = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (TrunkFlexibility != null) return true;
                if (BranchFlexibility != null) return true;
                if (Unknown != null) return true;
                if (LeafAmplitude != null) return true;
                if (LeafFrequency != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(TrunkFlexibility, "TrunkFlexibility");
                fg.AppendItem(BranchFlexibility, "BranchFlexibility");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(LeafAmplitude, "LeafAmplitude");
                fg.AppendItem(LeafFrequency, "LeafFrequency");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.TrunkFlexibility = this.TrunkFlexibility.Combine(rhs.TrunkFlexibility);
                ret.BranchFlexibility = this.BranchFlexibility.Combine(rhs.BranchFlexibility);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.LeafAmplitude = this.LeafAmplitude.Combine(rhs.LeafAmplitude);
                ret.LeafFrequency = this.LeafFrequency.Combine(rhs.LeafFrequency);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool TrunkFlexibility;
            public bool BranchFlexibility;
            public bool Unknown;
            public bool LeafAmplitude;
            public bool LeafFrequency;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.TrunkFlexibility = defaultOn;
                this.BranchFlexibility = defaultOn;
                this.Unknown = defaultOn;
                this.LeafAmplitude = defaultOn;
                this.LeafFrequency = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((TrunkFlexibility, null));
                ret.Add((BranchFlexibility, null));
                ret.Add((Unknown, null));
                ret.Add((LeafAmplitude, null));
                ret.Add((LeafFrequency, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = TreeData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TreeDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TreeDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static TreeData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static TreeData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TreeData();
            ((TreeDataSetterCommon)((ITreeDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITreeDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((TreeDataSetterCommon)((ITreeDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TreeData GetNew()
        {
            return new TreeData();
        }

    }
    #endregion

    #region Interface
    public partial interface ITreeData :
        ITreeDataGetter,
        ILoquiObjectSetter<ITreeData>
    {
        new Single TrunkFlexibility { get; set; }
        new Single BranchFlexibility { get; set; }
        new Byte[] Unknown { get; set; }
        new Single LeafAmplitude { get; set; }
        new Single LeafFrequency { get; set; }
    }

    public partial interface ITreeDataGetter :
        ILoquiObject,
        ILoquiObject<ITreeDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => TreeData_Registration.Instance;
        Single TrunkFlexibility { get; }
        Single BranchFlexibility { get; }
        ReadOnlyMemorySlice<Byte> Unknown { get; }
        Single LeafAmplitude { get; }
        Single LeafFrequency { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TreeDataMixIn
    {
        public static void Clear(this ITreeData item)
        {
            ((TreeDataSetterCommon)((ITreeDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TreeData.Mask<bool> GetEqualsMask(
            this ITreeDataGetter item,
            ITreeDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITreeDataGetter item,
            string? name = null,
            TreeData.Mask<bool>? printMask = null)
        {
            return ((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITreeDataGetter item,
            FileGeneration fg,
            string? name = null,
            TreeData.Mask<bool>? printMask = null)
        {
            ((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITreeDataGetter item,
            TreeData.Mask<bool?> checkMask)
        {
            return ((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static TreeData.Mask<bool> GetHasBeenSetMask(this ITreeDataGetter item)
        {
            var ret = new TreeData.Mask<bool>(false);
            ((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITreeDataGetter item,
            ITreeDataGetter rhs)
        {
            return ((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITreeData lhs,
            ITreeDataGetter rhs)
        {
            ((TreeDataSetterTranslationCommon)((ITreeDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ITreeData lhs,
            ITreeDataGetter rhs,
            TreeData.TranslationMask? copyMask = null)
        {
            ((TreeDataSetterTranslationCommon)((ITreeDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITreeData lhs,
            ITreeDataGetter rhs,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TreeDataSetterTranslationCommon)((ITreeDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = TreeData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITreeData lhs,
            ITreeDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TreeDataSetterTranslationCommon)((ITreeDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static TreeData DeepCopy(
            this ITreeDataGetter item,
            TreeData.TranslationMask? copyMask = null)
        {
            return ((TreeDataSetterTranslationCommon)((ITreeDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TreeData DeepCopy(
            this ITreeDataGetter item,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? copyMask = null)
        {
            return ((TreeDataSetterTranslationCommon)((ITreeDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TreeData DeepCopy(
            this ITreeDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TreeDataSetterTranslationCommon)((ITreeDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITreeData item,
            XElement node,
            TreeData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITreeData item,
            XElement node,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TreeData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ITreeData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((TreeDataSetterCommon)((ITreeDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeData item,
            string path,
            TreeData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeData item,
            string path,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeData item,
            string path,
            ErrorMaskBuilder? errorMask,
            TreeData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ITreeData item,
            Stream stream,
            TreeData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeData item,
            Stream stream,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TreeData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ITreeData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ITreeData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TreeDataSetterCommon)((ITreeDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum TreeData_FieldIndex
    {
        TrunkFlexibility = 0,
        BranchFlexibility = 1,
        Unknown = 2,
        LeafAmplitude = 3,
        LeafFrequency = 4,
    }
    #endregion

    #region Registration
    public partial class TreeData_Registration : ILoquiRegistration
    {
        public static readonly TreeData_Registration Instance = new TreeData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 190,
            version: 0);

        public const string GUID = "f0e0de65-6492-449f-b9b5-56a5dfda9d46";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(TreeData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TreeData.ErrorMask);

        public static readonly Type ClassType = typeof(TreeData);

        public static readonly Type GetterType = typeof(ITreeDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITreeData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.TreeData";

        public const string Name = "TreeData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TRUNKFLEXIBILITY":
                    return (ushort)TreeData_FieldIndex.TrunkFlexibility;
                case "BRANCHFLEXIBILITY":
                    return (ushort)TreeData_FieldIndex.BranchFlexibility;
                case "UNKNOWN":
                    return (ushort)TreeData_FieldIndex.Unknown;
                case "LEAFAMPLITUDE":
                    return (ushort)TreeData_FieldIndex.LeafAmplitude;
                case "LEAFFREQUENCY":
                    return (ushort)TreeData_FieldIndex.LeafFrequency;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TreeData_FieldIndex enu = (TreeData_FieldIndex)index;
            switch (enu)
            {
                case TreeData_FieldIndex.TrunkFlexibility:
                case TreeData_FieldIndex.BranchFlexibility:
                case TreeData_FieldIndex.Unknown:
                case TreeData_FieldIndex.LeafAmplitude:
                case TreeData_FieldIndex.LeafFrequency:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TreeData_FieldIndex enu = (TreeData_FieldIndex)index;
            switch (enu)
            {
                case TreeData_FieldIndex.TrunkFlexibility:
                case TreeData_FieldIndex.BranchFlexibility:
                case TreeData_FieldIndex.Unknown:
                case TreeData_FieldIndex.LeafAmplitude:
                case TreeData_FieldIndex.LeafFrequency:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TreeData_FieldIndex enu = (TreeData_FieldIndex)index;
            switch (enu)
            {
                case TreeData_FieldIndex.TrunkFlexibility:
                case TreeData_FieldIndex.BranchFlexibility:
                case TreeData_FieldIndex.Unknown:
                case TreeData_FieldIndex.LeafAmplitude:
                case TreeData_FieldIndex.LeafFrequency:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TreeData_FieldIndex enu = (TreeData_FieldIndex)index;
            switch (enu)
            {
                case TreeData_FieldIndex.TrunkFlexibility:
                    return "TrunkFlexibility";
                case TreeData_FieldIndex.BranchFlexibility:
                    return "BranchFlexibility";
                case TreeData_FieldIndex.Unknown:
                    return "Unknown";
                case TreeData_FieldIndex.LeafAmplitude:
                    return "LeafAmplitude";
                case TreeData_FieldIndex.LeafFrequency:
                    return "LeafFrequency";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TreeData_FieldIndex enu = (TreeData_FieldIndex)index;
            switch (enu)
            {
                case TreeData_FieldIndex.TrunkFlexibility:
                case TreeData_FieldIndex.BranchFlexibility:
                case TreeData_FieldIndex.Unknown:
                case TreeData_FieldIndex.LeafAmplitude:
                case TreeData_FieldIndex.LeafFrequency:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TreeData_FieldIndex enu = (TreeData_FieldIndex)index;
            switch (enu)
            {
                case TreeData_FieldIndex.TrunkFlexibility:
                case TreeData_FieldIndex.BranchFlexibility:
                case TreeData_FieldIndex.Unknown:
                case TreeData_FieldIndex.LeafAmplitude:
                case TreeData_FieldIndex.LeafFrequency:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TreeData_FieldIndex enu = (TreeData_FieldIndex)index;
            switch (enu)
            {
                case TreeData_FieldIndex.TrunkFlexibility:
                    return typeof(Single);
                case TreeData_FieldIndex.BranchFlexibility:
                    return typeof(Single);
                case TreeData_FieldIndex.Unknown:
                    return typeof(Byte[]);
                case TreeData_FieldIndex.LeafAmplitude:
                    return typeof(Single);
                case TreeData_FieldIndex.LeafFrequency:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TreeDataXmlWriteTranslation);
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType TriggeringRecordType = CNAM_HEADER;
        public const int NumStructFields = 5;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(TreeDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TreeDataSetterCommon
    {
        public static readonly TreeDataSetterCommon Instance = new TreeDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITreeData item)
        {
            ClearPartial();
            item.TrunkFlexibility = default;
            item.BranchFlexibility = default;
            item.Unknown = new byte[32];
            item.LeafAmplitude = default;
            item.LeafFrequency = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            ITreeData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TreeDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ITreeData item,
            MutagenFrame frame)
        {
            item.TrunkFlexibility = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.BranchFlexibility = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Unknown = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(32));
            item.LeafAmplitude = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.LeafFrequency = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }
        
        public virtual void CopyInFromBinary(
            ITreeData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(TreeData_Registration.CNAM_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class TreeDataCommon
    {
        public static readonly TreeDataCommon Instance = new TreeDataCommon();

        public TreeData.Mask<bool> GetEqualsMask(
            ITreeDataGetter item,
            ITreeDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TreeData.Mask<bool>(false);
            ((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITreeDataGetter item,
            ITreeDataGetter rhs,
            TreeData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.TrunkFlexibility = item.TrunkFlexibility.EqualsWithin(rhs.TrunkFlexibility);
            ret.BranchFlexibility = item.BranchFlexibility.EqualsWithin(rhs.BranchFlexibility);
            ret.Unknown = MemoryExtensions.SequenceEqual(item.Unknown.Span, rhs.Unknown.Span);
            ret.LeafAmplitude = item.LeafAmplitude.EqualsWithin(rhs.LeafAmplitude);
            ret.LeafFrequency = item.LeafFrequency.EqualsWithin(rhs.LeafFrequency);
        }
        
        public string ToString(
            ITreeDataGetter item,
            string? name = null,
            TreeData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITreeDataGetter item,
            FileGeneration fg,
            string? name = null,
            TreeData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TreeData =>");
            }
            else
            {
                fg.AppendLine($"{name} (TreeData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITreeDataGetter item,
            FileGeneration fg,
            TreeData.Mask<bool>? printMask = null)
        {
            if (printMask?.TrunkFlexibility ?? true)
            {
                fg.AppendItem(item.TrunkFlexibility, "TrunkFlexibility");
            }
            if (printMask?.BranchFlexibility ?? true)
            {
                fg.AppendItem(item.BranchFlexibility, "BranchFlexibility");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
            if (printMask?.LeafAmplitude ?? true)
            {
                fg.AppendItem(item.LeafAmplitude, "LeafAmplitude");
            }
            if (printMask?.LeafFrequency ?? true)
            {
                fg.AppendItem(item.LeafFrequency, "LeafFrequency");
            }
        }
        
        public bool HasBeenSet(
            ITreeDataGetter item,
            TreeData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ITreeDataGetter item,
            TreeData.Mask<bool> mask)
        {
            mask.TrunkFlexibility = true;
            mask.BranchFlexibility = true;
            mask.Unknown = true;
            mask.LeafAmplitude = true;
            mask.LeafFrequency = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITreeDataGetter? lhs,
            ITreeDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.TrunkFlexibility.EqualsWithin(rhs.TrunkFlexibility)) return false;
            if (!lhs.BranchFlexibility.EqualsWithin(rhs.BranchFlexibility)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unknown.Span, rhs.Unknown.Span)) return false;
            if (!lhs.LeafAmplitude.EqualsWithin(rhs.LeafAmplitude)) return false;
            if (!lhs.LeafFrequency.EqualsWithin(rhs.LeafFrequency)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ITreeDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.TrunkFlexibility);
            hash.Add(item.BranchFlexibility);
            hash.Add(item.Unknown);
            hash.Add(item.LeafAmplitude);
            hash.Add(item.LeafFrequency);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TreeData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ITreeDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class TreeDataSetterTranslationCommon
    {
        public static readonly TreeDataSetterTranslationCommon Instance = new TreeDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ITreeData item,
            ITreeDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)TreeData_FieldIndex.TrunkFlexibility) ?? true))
            {
                item.TrunkFlexibility = rhs.TrunkFlexibility;
            }
            if ((copyMask?.GetShouldTranslate((int)TreeData_FieldIndex.BranchFlexibility) ?? true))
            {
                item.BranchFlexibility = rhs.BranchFlexibility;
            }
            if ((copyMask?.GetShouldTranslate((int)TreeData_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)TreeData_FieldIndex.LeafAmplitude) ?? true))
            {
                item.LeafAmplitude = rhs.LeafAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)TreeData_FieldIndex.LeafFrequency) ?? true))
            {
                item.LeafFrequency = rhs.LeafFrequency;
            }
        }
        
        #endregion
        
        public TreeData DeepCopy(
            ITreeDataGetter item,
            TreeData.TranslationMask? copyMask = null)
        {
            TreeData ret = (TreeData)((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public TreeData DeepCopy(
            ITreeDataGetter item,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? copyMask = null)
        {
            TreeData ret = (TreeData)((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public TreeData DeepCopy(
            ITreeDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TreeData ret = (TreeData)((TreeDataCommon)((ITreeDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class TreeData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TreeData_Registration.Instance;
        public static TreeData_Registration Registration => TreeData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TreeDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TreeDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TreeDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITreeDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITreeDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITreeDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TreeDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static TreeDataXmlWriteTranslation Instance = new TreeDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITreeDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)TreeData_FieldIndex.TrunkFlexibility) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TrunkFlexibility),
                    item: item.TrunkFlexibility,
                    fieldIndex: (int)TreeData_FieldIndex.TrunkFlexibility,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TreeData_FieldIndex.BranchFlexibility) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BranchFlexibility),
                    item: item.BranchFlexibility,
                    fieldIndex: (int)TreeData_FieldIndex.BranchFlexibility,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TreeData_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)TreeData_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TreeData_FieldIndex.LeafAmplitude) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LeafAmplitude),
                    item: item.LeafAmplitude,
                    fieldIndex: (int)TreeData_FieldIndex.LeafAmplitude,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TreeData_FieldIndex.LeafFrequency) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LeafFrequency),
                    item: item.LeafFrequency,
                    fieldIndex: (int)TreeData_FieldIndex.LeafFrequency,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ITreeDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.TreeData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.TreeData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITreeDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ITreeDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ITreeDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class TreeDataXmlCreateTranslation
    {
        public readonly static TreeDataXmlCreateTranslation Instance = new TreeDataXmlCreateTranslation();

        public static void FillPublicXml(
            ITreeData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TreeDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITreeData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "TrunkFlexibility":
                    errorMask?.PushIndex((int)TreeData_FieldIndex.TrunkFlexibility);
                    try
                    {
                        item.TrunkFlexibility = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BranchFlexibility":
                    errorMask?.PushIndex((int)TreeData_FieldIndex.BranchFlexibility);
                    try
                    {
                        item.BranchFlexibility = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)TreeData_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 32,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeafAmplitude":
                    errorMask?.PushIndex((int)TreeData_FieldIndex.LeafAmplitude);
                    try
                    {
                        item.LeafAmplitude = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeafFrequency":
                    errorMask?.PushIndex((int)TreeData_FieldIndex.LeafFrequency);
                    try
                    {
                        item.LeafFrequency = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class TreeDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITreeDataGetter item,
            XElement node,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((TreeDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TreeData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITreeDataGetter item,
            string path,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITreeDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITreeDataGetter item,
            Stream stream,
            out TreeData.ErrorMask errorMask,
            TreeData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITreeDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITreeDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((TreeDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ITreeDataGetter item,
            XElement node,
            string? name = null,
            TreeData.TranslationMask? translationMask = null)
        {
            ((TreeDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ITreeDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((TreeDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITreeDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((TreeDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TreeDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static TreeDataBinaryWriteTranslation Instance = new TreeDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            ITreeDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TrunkFlexibility);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BranchFlexibility);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LeafAmplitude);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LeafFrequency);
        }

        public void Write(
            MutagenWriter writer,
            ITreeDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(TreeData_Registration.CNAM_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITreeDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class TreeDataBinaryCreateTranslation
    {
        public readonly static TreeDataBinaryCreateTranslation Instance = new TreeDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class TreeDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITreeDataGetter item,
            MutagenWriter writer)
        {
            ((TreeDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TreeDataBinaryOverlay :
        BinaryOverlay,
        ITreeDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TreeData_Registration.Instance;
        public static TreeData_Registration Registration => TreeData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TreeDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TreeDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITreeDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITreeDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITreeDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITreeDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => TreeDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TreeDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TreeDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TreeDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Single TrunkFlexibility => SpanExt.GetFloat(_data.Slice(0x0, 0x4));
        public Single BranchFlexibility => SpanExt.GetFloat(_data.Slice(0x4, 0x4));
        public ReadOnlyMemorySlice<Byte> Unknown => _data.Span.Slice(0x8, 0x20).ToArray();
        public Single LeafAmplitude => SpanExt.GetFloat(_data.Slice(0x28, 0x4));
        public Single LeafFrequency => SpanExt.GetFloat(_data.Slice(0x2C, 0x4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected TreeDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static TreeDataBinaryOverlay TreeDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new TreeDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x30 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static TreeDataBinaryOverlay TreeDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return TreeDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TreeDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

