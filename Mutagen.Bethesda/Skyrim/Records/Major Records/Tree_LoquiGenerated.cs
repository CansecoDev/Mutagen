/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Tree :
        SkyrimMajorRecord,
        ITreeInternal,
        ILoquiObjectSetter<Tree>,
        IEquatable<Tree>,
        IEqualsMask
    {
        #region Ctor
        protected Tree()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? ITreeGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ITreeGetter.ObjectBounds => ObjectBounds;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ITreeGetter.Model => this.Model;
        #endregion
        #region Ingredient
        public FormLinkNullable<IHarvestTarget> Ingredient { get; set; } = new FormLinkNullable<IHarvestTarget>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IHarvestTargetGetter> ITreeGetter.Ingredient => this.Ingredient;
        #endregion
        #region HarvestSound
        public FormLinkNullable<SoundDescriptor> HarvestSound { get; set; } = new FormLinkNullable<SoundDescriptor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> ITreeGetter.HarvestSound => this.HarvestSound;
        #endregion
        #region Production
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SeasonalIngredientProduction? _Production;
        public SeasonalIngredientProduction? Production
        {
            get => _Production;
            set => _Production = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISeasonalIngredientProductionGetter? ITreeGetter.Production => this.Production;
        #endregion
        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITreeGetter.Name => this.Name;
        #endregion
        #region TrunkFlexibility
        public Single TrunkFlexibility { get; set; } = default;
        #endregion
        #region BranchFlexibility
        public Single BranchFlexibility { get; set; } = default;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _Unknown = new byte[32];
        public Byte[] Unknown
        {
            get => _Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> ITreeGetter.Unknown => this.Unknown;
        #endregion
        #region LeafAmplitude
        public Single LeafAmplitude { get; set; } = default;
        #endregion
        #region LeafFrequency
        public Single LeafFrequency { get; set; } = default;
        #endregion
        #region CNAMDataTypeState
        public Tree.CNAMDataType CNAMDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TreeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITreeGetter rhs)) return false;
            return ((TreeCommon)((ITreeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Tree obj)
        {
            return ((TreeCommon)((ITreeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TreeCommon)((ITreeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => TreeXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TreeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Tree CreateFromXml(
            XElement node,
            Tree.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Tree CreateFromXml(
            XElement node,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Tree CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Tree();
            ((TreeSetterCommon)((ITreeGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Tree CreateFromXml(
            string path,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            string path,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Tree CreateFromXml(
            Stream stream,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            Stream stream,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Ingredient = initialValue;
                this.HarvestSound = initialValue;
                this.Production = new MaskItem<TItem, SeasonalIngredientProduction.Mask<TItem>?>(initialValue, new SeasonalIngredientProduction.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.TrunkFlexibility = initialValue;
                this.BranchFlexibility = initialValue;
                this.Unknown = initialValue;
                this.LeafAmplitude = initialValue;
                this.LeafFrequency = initialValue;
                this.CNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Model,
                TItem Ingredient,
                TItem HarvestSound,
                TItem Production,
                TItem Name,
                TItem TrunkFlexibility,
                TItem BranchFlexibility,
                TItem Unknown,
                TItem LeafAmplitude,
                TItem LeafFrequency,
                TItem CNAMDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Ingredient = Ingredient;
                this.HarvestSound = HarvestSound;
                this.Production = new MaskItem<TItem, SeasonalIngredientProduction.Mask<TItem>?>(Production, new SeasonalIngredientProduction.Mask<TItem>(Production));
                this.Name = Name;
                this.TrunkFlexibility = TrunkFlexibility;
                this.BranchFlexibility = BranchFlexibility;
                this.Unknown = Unknown;
                this.LeafAmplitude = LeafAmplitude;
                this.LeafFrequency = LeafFrequency;
                this.CNAMDataTypeState = CNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Ingredient;
            public TItem HarvestSound;
            public MaskItem<TItem, SeasonalIngredientProduction.Mask<TItem>?>? Production { get; set; }
            public TItem Name;
            public TItem TrunkFlexibility;
            public TItem BranchFlexibility;
            public TItem Unknown;
            public TItem LeafAmplitude;
            public TItem LeafFrequency;
            public TItem CNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Ingredient, rhs.Ingredient)) return false;
                if (!object.Equals(this.HarvestSound, rhs.HarvestSound)) return false;
                if (!object.Equals(this.Production, rhs.Production)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.TrunkFlexibility, rhs.TrunkFlexibility)) return false;
                if (!object.Equals(this.BranchFlexibility, rhs.BranchFlexibility)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.LeafAmplitude, rhs.LeafAmplitude)) return false;
                if (!object.Equals(this.LeafFrequency, rhs.LeafFrequency)) return false;
                if (!object.Equals(this.CNAMDataTypeState, rhs.CNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Model);
                hash.Add(this.Ingredient);
                hash.Add(this.HarvestSound);
                hash.Add(this.Production);
                hash.Add(this.Name);
                hash.Add(this.TrunkFlexibility);
                hash.Add(this.BranchFlexibility);
                hash.Add(this.Unknown);
                hash.Add(this.LeafAmplitude);
                hash.Add(this.LeafFrequency);
                hash.Add(this.CNAMDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Ingredient)) return false;
                if (!eval(this.HarvestSound)) return false;
                if (Production != null)
                {
                    if (!eval(this.Production.Overall)) return false;
                    if (this.Production.Specific != null && !this.Production.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.TrunkFlexibility)) return false;
                if (!eval(this.BranchFlexibility)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.LeafAmplitude)) return false;
                if (!eval(this.LeafFrequency)) return false;
                if (!eval(this.CNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Ingredient)) return true;
                if (eval(this.HarvestSound)) return true;
                if (Production != null)
                {
                    if (eval(this.Production.Overall)) return true;
                    if (this.Production.Specific != null && this.Production.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.TrunkFlexibility)) return true;
                if (eval(this.BranchFlexibility)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.LeafAmplitude)) return true;
                if (eval(this.LeafFrequency)) return true;
                if (eval(this.CNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Tree.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Ingredient = eval(this.Ingredient);
                obj.HarvestSound = eval(this.HarvestSound);
                obj.Production = this.Production == null ? null : new MaskItem<R, SeasonalIngredientProduction.Mask<R>?>(eval(this.Production.Overall), this.Production.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.TrunkFlexibility = eval(this.TrunkFlexibility);
                obj.BranchFlexibility = eval(this.BranchFlexibility);
                obj.Unknown = eval(this.Unknown);
                obj.LeafAmplitude = eval(this.LeafAmplitude);
                obj.LeafFrequency = eval(this.LeafFrequency);
                obj.CNAMDataTypeState = eval(this.CNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Tree.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Tree.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Tree.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.ToString(fg);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.ToString(fg);
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Ingredient ?? true)
                    {
                        fg.AppendItem(Ingredient, "Ingredient");
                    }
                    if (printMask?.HarvestSound ?? true)
                    {
                        fg.AppendItem(HarvestSound, "HarvestSound");
                    }
                    if (printMask?.Production?.Overall ?? true)
                    {
                        Production?.ToString(fg);
                    }
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.TrunkFlexibility ?? true)
                    {
                        fg.AppendItem(TrunkFlexibility, "TrunkFlexibility");
                    }
                    if (printMask?.BranchFlexibility ?? true)
                    {
                        fg.AppendItem(BranchFlexibility, "BranchFlexibility");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.LeafAmplitude ?? true)
                    {
                        fg.AppendItem(LeafAmplitude, "LeafAmplitude");
                    }
                    if (printMask?.LeafFrequency ?? true)
                    {
                        fg.AppendItem(LeafFrequency, "LeafFrequency");
                    }
                    if (printMask?.CNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(CNAMDataTypeState, "CNAMDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Ingredient;
            public Exception? HarvestSound;
            public MaskItem<Exception?, SeasonalIngredientProduction.ErrorMask?>? Production;
            public Exception? Name;
            public Exception? TrunkFlexibility;
            public Exception? BranchFlexibility;
            public Exception? Unknown;
            public Exception? LeafAmplitude;
            public Exception? LeafFrequency;
            public Exception? CNAMDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Tree_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Tree_FieldIndex.Model:
                        return Model;
                    case Tree_FieldIndex.Ingredient:
                        return Ingredient;
                    case Tree_FieldIndex.HarvestSound:
                        return HarvestSound;
                    case Tree_FieldIndex.Production:
                        return Production;
                    case Tree_FieldIndex.Name:
                        return Name;
                    case Tree_FieldIndex.TrunkFlexibility:
                        return TrunkFlexibility;
                    case Tree_FieldIndex.BranchFlexibility:
                        return BranchFlexibility;
                    case Tree_FieldIndex.Unknown:
                        return Unknown;
                    case Tree_FieldIndex.LeafAmplitude:
                        return LeafAmplitude;
                    case Tree_FieldIndex.LeafFrequency:
                        return LeafFrequency;
                    case Tree_FieldIndex.CNAMDataTypeState:
                        return CNAMDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.Ingredient:
                        this.Ingredient = ex;
                        break;
                    case Tree_FieldIndex.HarvestSound:
                        this.HarvestSound = ex;
                        break;
                    case Tree_FieldIndex.Production:
                        this.Production = new MaskItem<Exception?, SeasonalIngredientProduction.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Tree_FieldIndex.TrunkFlexibility:
                        this.TrunkFlexibility = ex;
                        break;
                    case Tree_FieldIndex.BranchFlexibility:
                        this.BranchFlexibility = ex;
                        break;
                    case Tree_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Tree_FieldIndex.LeafAmplitude:
                        this.LeafAmplitude = ex;
                        break;
                    case Tree_FieldIndex.LeafFrequency:
                        this.LeafFrequency = ex;
                        break;
                    case Tree_FieldIndex.CNAMDataTypeState:
                        this.CNAMDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.Ingredient:
                        this.Ingredient = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.HarvestSound:
                        this.HarvestSound = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.Production:
                        this.Production = (MaskItem<Exception?, SeasonalIngredientProduction.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.TrunkFlexibility:
                        this.TrunkFlexibility = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.BranchFlexibility:
                        this.BranchFlexibility = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.LeafAmplitude:
                        this.LeafAmplitude = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.LeafFrequency:
                        this.LeafFrequency = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.CNAMDataTypeState:
                        this.CNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Model != null) return true;
                if (Ingredient != null) return true;
                if (HarvestSound != null) return true;
                if (Production != null) return true;
                if (Name != null) return true;
                if (TrunkFlexibility != null) return true;
                if (BranchFlexibility != null) return true;
                if (Unknown != null) return true;
                if (LeafAmplitude != null) return true;
                if (LeafFrequency != null) return true;
                if (CNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                VirtualMachineAdapter?.ToString(fg);
                ObjectBounds?.ToString(fg);
                Model?.ToString(fg);
                fg.AppendItem(Ingredient, "Ingredient");
                fg.AppendItem(HarvestSound, "HarvestSound");
                Production?.ToString(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(TrunkFlexibility, "TrunkFlexibility");
                fg.AppendItem(BranchFlexibility, "BranchFlexibility");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(LeafAmplitude, "LeafAmplitude");
                fg.AppendItem(LeafFrequency, "LeafFrequency");
                fg.AppendItem(CNAMDataTypeState, "CNAMDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Ingredient = this.Ingredient.Combine(rhs.Ingredient);
                ret.HarvestSound = this.HarvestSound.Combine(rhs.HarvestSound);
                ret.Production = this.Production.Combine(rhs.Production, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.TrunkFlexibility = this.TrunkFlexibility.Combine(rhs.TrunkFlexibility);
                ret.BranchFlexibility = this.BranchFlexibility.Combine(rhs.BranchFlexibility);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.LeafAmplitude = this.LeafAmplitude.Combine(rhs.LeafAmplitude);
                ret.LeafFrequency = this.LeafFrequency.Combine(rhs.LeafFrequency);
                ret.CNAMDataTypeState = this.CNAMDataTypeState.Combine(rhs.CNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, VirtualMachineAdapter.TranslationMask?> VirtualMachineAdapter;
            public MaskItem<bool, ObjectBounds.TranslationMask?> ObjectBounds;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool Ingredient;
            public bool HarvestSound;
            public MaskItem<bool, SeasonalIngredientProduction.TranslationMask?> Production;
            public bool Name;
            public bool TrunkFlexibility;
            public bool BranchFlexibility;
            public bool Unknown;
            public bool LeafAmplitude;
            public bool LeafFrequency;
            public bool CNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.VirtualMachineAdapter = new MaskItem<bool, VirtualMachineAdapter.TranslationMask?>(defaultOn, null);
                this.ObjectBounds = new MaskItem<bool, ObjectBounds.TranslationMask?>(defaultOn, null);
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Ingredient = defaultOn;
                this.HarvestSound = defaultOn;
                this.Production = new MaskItem<bool, SeasonalIngredientProduction.TranslationMask?>(defaultOn, null);
                this.Name = defaultOn;
                this.TrunkFlexibility = defaultOn;
                this.BranchFlexibility = defaultOn;
                this.Unknown = defaultOn;
                this.LeafAmplitude = defaultOn;
                this.LeafFrequency = defaultOn;
                this.CNAMDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter?.Overall ?? true, VirtualMachineAdapter?.Specific?.GetCrystal()));
                ret.Add((ObjectBounds?.Overall ?? true, ObjectBounds?.Specific?.GetCrystal()));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Ingredient, null));
                ret.Add((HarvestSound, null));
                ret.Add((Production?.Overall ?? true, Production?.Specific?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((TrunkFlexibility, null));
                ret.Add((BranchFlexibility, null));
                ret.Add((Unknown, null));
                ret.Add((LeafAmplitude, null));
                ret.Add((LeafFrequency, null));
                ret.Add((CNAMDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Tree_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => TreeCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => TreeCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TreeCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TreeCommon.Instance.RemapLinks(this, mapping);
        public Tree(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Tree(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Tree(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum CNAMDataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TreeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TreeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Tree CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Tree CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Tree();
            ((TreeSetterCommon)((ITreeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITreeGetter)rhs, include);

        void IClearable.Clear()
        {
            ((TreeSetterCommon)((ITreeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Tree GetNew()
        {
            return new Tree();
        }

    }
    #endregion

    #region Interface
    public partial interface ITree :
        ITreeGetter,
        ISkyrimMajorRecord,
        INamed,
        IHarvestable,
        IModeled,
        IObjectBounded,
        IRegionTarget,
        ILoquiObjectSetter<ITreeInternal>
    {
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new ObjectBounds ObjectBounds { get; set; }
        new Model? Model { get; set; }
        new FormLinkNullable<IHarvestTarget> Ingredient { get; set; }
        new FormLinkNullable<SoundDescriptor> HarvestSound { get; set; }
        new SeasonalIngredientProduction? Production { get; set; }
        new String? Name { get; set; }
        new Single TrunkFlexibility { get; set; }
        new Single BranchFlexibility { get; set; }
        new Byte[] Unknown { get; set; }
        new Single LeafAmplitude { get; set; }
        new Single LeafFrequency { get; set; }
        new Tree.CNAMDataType CNAMDataTypeState { get; set; }
        #region Mutagen
        new Tree.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ITreeInternal :
        ISkyrimMajorRecordInternal,
        ITree,
        ITreeGetter
    {
    }

    public partial interface ITreeGetter :
        ISkyrimMajorRecordGetter,
        INamedGetter,
        IHarvestableGetter,
        IModeledGetter,
        IObjectBoundedGetter,
        IRegionTargetGetter,
        ILoquiObject<ITreeGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Tree_Registration.Instance;
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        IObjectBoundsGetter ObjectBounds { get; }
        IModelGetter? Model { get; }
        IFormLinkNullableGetter<IHarvestTargetGetter> Ingredient { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> HarvestSound { get; }
        ISeasonalIngredientProductionGetter? Production { get; }
        String? Name { get; }
        Single TrunkFlexibility { get; }
        Single BranchFlexibility { get; }
        ReadOnlyMemorySlice<Byte> Unknown { get; }
        Single LeafAmplitude { get; }
        Single LeafFrequency { get; }
        Tree.CNAMDataType CNAMDataTypeState { get; }

        #region Mutagen
        Tree.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class TreeMixIn
    {
        public static void Clear(this ITreeInternal item)
        {
            ((TreeSetterCommon)((ITreeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Tree.Mask<bool> GetEqualsMask(
            this ITreeGetter item,
            ITreeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITreeGetter item,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITreeGetter item,
            FileGeneration fg,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            ((TreeCommon)((ITreeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITreeGetter item,
            Tree.Mask<bool?> checkMask)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Tree.Mask<bool> GetHasBeenSetMask(this ITreeGetter item)
        {
            var ret = new Tree.Mask<bool>(false);
            ((TreeCommon)((ITreeGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITreeGetter item,
            ITreeGetter rhs)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITreeInternal lhs,
            ITreeGetter rhs,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TreeSetterTranslationCommon)((ITreeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITreeInternal lhs,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TreeSetterTranslationCommon)((ITreeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            Tree.TranslationMask? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITreeInternal item,
            XElement node,
            Tree.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITreeInternal item,
            XElement node,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((TreeSetterCommon)((ITreeGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            string path,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            string path,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            Stream stream,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            Stream stream,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ITreeInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ITreeInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TreeSetterCommon)((ITreeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Tree_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        VirtualMachineAdapter = 6,
        ObjectBounds = 7,
        Model = 8,
        Ingredient = 9,
        HarvestSound = 10,
        Production = 11,
        Name = 12,
        TrunkFlexibility = 13,
        BranchFlexibility = 14,
        Unknown = 15,
        LeafAmplitude = 16,
        LeafFrequency = 17,
        CNAMDataTypeState = 18,
    }
    #endregion

    #region Registration
    public partial class Tree_Registration : ILoquiRegistration
    {
        public static readonly Tree_Registration Instance = new Tree_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 188,
            version: 0);

        public const string GUID = "5353e43a-3c33-49d9-b5a7-fc971ba96d88";

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 19;

        public static readonly Type MaskType = typeof(Tree.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Tree.ErrorMask);

        public static readonly Type ClassType = typeof(Tree);

        public static readonly Type GetterType = typeof(ITreeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITree);

        public static readonly Type? InternalSetterType = typeof(ITreeInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Tree";

        public const string Name = "Tree";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VIRTUALMACHINEADAPTER":
                    return (ushort)Tree_FieldIndex.VirtualMachineAdapter;
                case "OBJECTBOUNDS":
                    return (ushort)Tree_FieldIndex.ObjectBounds;
                case "MODEL":
                    return (ushort)Tree_FieldIndex.Model;
                case "INGREDIENT":
                    return (ushort)Tree_FieldIndex.Ingredient;
                case "HARVESTSOUND":
                    return (ushort)Tree_FieldIndex.HarvestSound;
                case "PRODUCTION":
                    return (ushort)Tree_FieldIndex.Production;
                case "NAME":
                    return (ushort)Tree_FieldIndex.Name;
                case "TRUNKFLEXIBILITY":
                    return (ushort)Tree_FieldIndex.TrunkFlexibility;
                case "BRANCHFLEXIBILITY":
                    return (ushort)Tree_FieldIndex.BranchFlexibility;
                case "UNKNOWN":
                    return (ushort)Tree_FieldIndex.Unknown;
                case "LEAFAMPLITUDE":
                    return (ushort)Tree_FieldIndex.LeafAmplitude;
                case "LEAFFREQUENCY":
                    return (ushort)Tree_FieldIndex.LeafFrequency;
                case "CNAMDATATYPESTATE":
                    return (ushort)Tree_FieldIndex.CNAMDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.VirtualMachineAdapter:
                case Tree_FieldIndex.ObjectBounds:
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Ingredient:
                case Tree_FieldIndex.HarvestSound:
                case Tree_FieldIndex.Production:
                case Tree_FieldIndex.Name:
                case Tree_FieldIndex.TrunkFlexibility:
                case Tree_FieldIndex.BranchFlexibility:
                case Tree_FieldIndex.Unknown:
                case Tree_FieldIndex.LeafAmplitude:
                case Tree_FieldIndex.LeafFrequency:
                case Tree_FieldIndex.CNAMDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.VirtualMachineAdapter:
                case Tree_FieldIndex.ObjectBounds:
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Production:
                    return true;
                case Tree_FieldIndex.Ingredient:
                case Tree_FieldIndex.HarvestSound:
                case Tree_FieldIndex.Name:
                case Tree_FieldIndex.TrunkFlexibility:
                case Tree_FieldIndex.BranchFlexibility:
                case Tree_FieldIndex.Unknown:
                case Tree_FieldIndex.LeafAmplitude:
                case Tree_FieldIndex.LeafFrequency:
                case Tree_FieldIndex.CNAMDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.VirtualMachineAdapter:
                case Tree_FieldIndex.ObjectBounds:
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Ingredient:
                case Tree_FieldIndex.HarvestSound:
                case Tree_FieldIndex.Production:
                case Tree_FieldIndex.Name:
                case Tree_FieldIndex.TrunkFlexibility:
                case Tree_FieldIndex.BranchFlexibility:
                case Tree_FieldIndex.Unknown:
                case Tree_FieldIndex.LeafAmplitude:
                case Tree_FieldIndex.LeafFrequency:
                case Tree_FieldIndex.CNAMDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.VirtualMachineAdapter:
                    return "VirtualMachineAdapter";
                case Tree_FieldIndex.ObjectBounds:
                    return "ObjectBounds";
                case Tree_FieldIndex.Model:
                    return "Model";
                case Tree_FieldIndex.Ingredient:
                    return "Ingredient";
                case Tree_FieldIndex.HarvestSound:
                    return "HarvestSound";
                case Tree_FieldIndex.Production:
                    return "Production";
                case Tree_FieldIndex.Name:
                    return "Name";
                case Tree_FieldIndex.TrunkFlexibility:
                    return "TrunkFlexibility";
                case Tree_FieldIndex.BranchFlexibility:
                    return "BranchFlexibility";
                case Tree_FieldIndex.Unknown:
                    return "Unknown";
                case Tree_FieldIndex.LeafAmplitude:
                    return "LeafAmplitude";
                case Tree_FieldIndex.LeafFrequency:
                    return "LeafFrequency";
                case Tree_FieldIndex.CNAMDataTypeState:
                    return "CNAMDataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.VirtualMachineAdapter:
                case Tree_FieldIndex.ObjectBounds:
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Ingredient:
                case Tree_FieldIndex.HarvestSound:
                case Tree_FieldIndex.Production:
                case Tree_FieldIndex.Name:
                case Tree_FieldIndex.TrunkFlexibility:
                case Tree_FieldIndex.BranchFlexibility:
                case Tree_FieldIndex.Unknown:
                case Tree_FieldIndex.LeafAmplitude:
                case Tree_FieldIndex.LeafFrequency:
                case Tree_FieldIndex.CNAMDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.VirtualMachineAdapter:
                case Tree_FieldIndex.ObjectBounds:
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Ingredient:
                case Tree_FieldIndex.HarvestSound:
                case Tree_FieldIndex.Production:
                case Tree_FieldIndex.Name:
                case Tree_FieldIndex.TrunkFlexibility:
                case Tree_FieldIndex.BranchFlexibility:
                case Tree_FieldIndex.Unknown:
                case Tree_FieldIndex.LeafAmplitude:
                case Tree_FieldIndex.LeafFrequency:
                case Tree_FieldIndex.CNAMDataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.VirtualMachineAdapter:
                    return typeof(VirtualMachineAdapter);
                case Tree_FieldIndex.ObjectBounds:
                    return typeof(ObjectBounds);
                case Tree_FieldIndex.Model:
                    return typeof(Model);
                case Tree_FieldIndex.Ingredient:
                    return typeof(FormLinkNullable<IHarvestTarget>);
                case Tree_FieldIndex.HarvestSound:
                    return typeof(FormLinkNullable<SoundDescriptor>);
                case Tree_FieldIndex.Production:
                    return typeof(SeasonalIngredientProduction);
                case Tree_FieldIndex.Name:
                    return typeof(String);
                case Tree_FieldIndex.TrunkFlexibility:
                    return typeof(Single);
                case Tree_FieldIndex.BranchFlexibility:
                    return typeof(Single);
                case Tree_FieldIndex.Unknown:
                    return typeof(Byte[]);
                case Tree_FieldIndex.LeafAmplitude:
                    return typeof(Single);
                case Tree_FieldIndex.LeafFrequency:
                    return typeof(Single);
                case Tree_FieldIndex.CNAMDataTypeState:
                    return typeof(Tree.CNAMDataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TreeXmlWriteTranslation);
        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType VMAD_HEADER = new RecordType("VMAD");
        public static readonly RecordType OBND_HEADER = new RecordType("OBND");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType PFIG_HEADER = new RecordType("PFIG");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType PFPC_HEADER = new RecordType("PFPC");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType TriggeringRecordType = TREE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 7;
        public static readonly Type BinaryWriteTranslation = typeof(TreeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TreeSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly TreeSetterCommon Instance = new TreeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITreeInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Model = null;
            item.Ingredient = null;
            item.HarvestSound = null;
            item.Production = null;
            item.Name = default;
            item.TrunkFlexibility = default;
            item.BranchFlexibility = default;
            item.Unknown = new byte[32];
            item.LeafAmplitude = default;
            item.LeafFrequency = default;
            item.CNAMDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ITreeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITreeInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ITreeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            ITreeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    TreeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Tree)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Tree)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Tree_Registration.TREE_HEADER;
        protected static void FillBinaryStructs(
            ITreeInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ITreeInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x44414D56: // VMAD
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.VirtualMachineAdapter.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.VirtualMachineAdapter);
                }
                case 0x444E424F: // OBND
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.ObjectBounds);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Model);
                }
                case 0x47494650: // PFIG
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Ingredient = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Ingredient);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.HarvestSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.HarvestSound);
                }
                case 0x43504650: // PFPC
                {
                    item.Production = Mutagen.Bethesda.Skyrim.SeasonalIngredientProduction.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Production);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Name);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.TrunkFlexibility = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.BranchFlexibility = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Unknown = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: dataFrame.SpawnWithLength(32));
                    item.LeafAmplitude = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.LeafFrequency = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.LeafFrequency);
                }
                default:
                    return SkyrimMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            ITreeInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ITreeInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Tree)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Tree)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class TreeCommon : SkyrimMajorRecordCommon
    {
        public new static readonly TreeCommon Instance = new TreeCommon();

        public Tree.Mask<bool> GetEqualsMask(
            ITreeGetter item,
            ITreeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Tree.Mask<bool>(false);
            ((TreeCommon)((ITreeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITreeGetter item,
            ITreeGetter rhs,
            Tree.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Ingredient = object.Equals(item.Ingredient, rhs.Ingredient);
            ret.HarvestSound = object.Equals(item.HarvestSound, rhs.HarvestSound);
            ret.Production = EqualsMaskHelper.EqualsHelper(
                item.Production,
                rhs.Production,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.TrunkFlexibility = item.TrunkFlexibility.EqualsWithin(rhs.TrunkFlexibility);
            ret.BranchFlexibility = item.BranchFlexibility.EqualsWithin(rhs.BranchFlexibility);
            ret.Unknown = MemoryExtensions.SequenceEqual(item.Unknown.Span, rhs.Unknown.Span);
            ret.LeafAmplitude = item.LeafAmplitude.EqualsWithin(rhs.LeafAmplitude);
            ret.LeafFrequency = item.LeafFrequency.EqualsWithin(rhs.LeafFrequency);
            ret.CNAMDataTypeState = item.CNAMDataTypeState == rhs.CNAMDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ITreeGetter item,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITreeGetter item,
            FileGeneration fg,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Tree =>");
            }
            else
            {
                fg.AppendLine($"{name} (Tree) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITreeGetter item,
            FileGeneration fg,
            Tree.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                VirtualMachineAdapterItem?.ToString(fg, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.ToString(fg, "ObjectBounds");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Ingredient ?? true)
                && item.Ingredient.TryGet(out var IngredientItem))
            {
                fg.AppendItem(IngredientItem, "Ingredient");
            }
            if ((printMask?.HarvestSound ?? true)
                && item.HarvestSound.TryGet(out var HarvestSoundItem))
            {
                fg.AppendItem(HarvestSoundItem, "HarvestSound");
            }
            if ((printMask?.Production?.Overall ?? true)
                && item.Production.TryGet(out var ProductionItem))
            {
                ProductionItem?.ToString(fg, "Production");
            }
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if (printMask?.TrunkFlexibility ?? true)
            {
                fg.AppendItem(item.TrunkFlexibility, "TrunkFlexibility");
            }
            if (printMask?.BranchFlexibility ?? true)
            {
                fg.AppendItem(item.BranchFlexibility, "BranchFlexibility");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
            if (printMask?.LeafAmplitude ?? true)
            {
                fg.AppendItem(item.LeafAmplitude, "LeafAmplitude");
            }
            if (printMask?.LeafFrequency ?? true)
            {
                fg.AppendItem(item.LeafFrequency, "LeafFrequency");
            }
            if (printMask?.CNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.CNAMDataTypeState, "CNAMDataTypeState");
            }
        }
        
        public bool HasBeenSet(
            ITreeGetter item,
            Tree.Mask<bool?> checkMask)
        {
            if (checkMask.VirtualMachineAdapter?.Overall.HasValue ?? false && checkMask.VirtualMachineAdapter.Overall.Value != (item.VirtualMachineAdapter != null)) return false;
            if (checkMask.VirtualMachineAdapter?.Specific != null && (item.VirtualMachineAdapter == null || !item.VirtualMachineAdapter.HasBeenSet(checkMask.VirtualMachineAdapter.Specific))) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Ingredient.HasValue && checkMask.Ingredient.Value != (item.Ingredient.FormKey != null)) return false;
            if (checkMask.HarvestSound.HasValue && checkMask.HarvestSound.Value != (item.HarvestSound.FormKey != null)) return false;
            if (checkMask.Production?.Overall.HasValue ?? false && checkMask.Production.Overall.Value != (item.Production != null)) return false;
            if (checkMask.Production?.Specific != null && (item.Production == null || !item.Production.HasBeenSet(checkMask.Production.Specific))) return false;
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ITreeGetter item,
            Tree.Mask<bool> mask)
        {
            var itemVirtualMachineAdapter = item.VirtualMachineAdapter;
            mask.VirtualMachineAdapter = new MaskItem<bool, VirtualMachineAdapter.Mask<bool>?>(itemVirtualMachineAdapter != null, itemVirtualMachineAdapter?.GetHasBeenSetMask());
            mask.ObjectBounds = new MaskItem<bool, ObjectBounds.Mask<bool>?>(true, item.ObjectBounds?.GetHasBeenSetMask());
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.Ingredient = (item.Ingredient.FormKey != null);
            mask.HarvestSound = (item.HarvestSound.FormKey != null);
            var itemProduction = item.Production;
            mask.Production = new MaskItem<bool, SeasonalIngredientProduction.Mask<bool>?>(itemProduction != null, itemProduction?.GetHasBeenSetMask());
            mask.Name = (item.Name != null);
            mask.TrunkFlexibility = true;
            mask.BranchFlexibility = true;
            mask.Unknown = true;
            mask.LeafAmplitude = true;
            mask.LeafFrequency = true;
            mask.CNAMDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Tree_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Tree_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Tree_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Tree_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Tree_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Tree_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITreeGetter? lhs,
            ITreeGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
            if (!object.Equals(lhs.ObjectBounds, rhs.ObjectBounds)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!lhs.Ingredient.Equals(rhs.Ingredient)) return false;
            if (!lhs.HarvestSound.Equals(rhs.HarvestSound)) return false;
            if (!object.Equals(lhs.Production, rhs.Production)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.TrunkFlexibility.EqualsWithin(rhs.TrunkFlexibility)) return false;
            if (!lhs.BranchFlexibility.EqualsWithin(rhs.BranchFlexibility)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unknown.Span, rhs.Unknown.Span)) return false;
            if (!lhs.LeafAmplitude.EqualsWithin(rhs.LeafAmplitude)) return false;
            if (!lhs.LeafFrequency.EqualsWithin(rhs.LeafFrequency)) return false;
            if (lhs.CNAMDataTypeState != rhs.CNAMDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ITreeGetter?)lhs,
                rhs: rhs as ITreeGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ITreeGetter?)lhs,
                rhs: rhs as ITreeGetter);
        }
        
        public virtual int GetHashCode(ITreeGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapteritem))
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Ingredient.TryGet(out var Ingredientitem))
            {
                hash.Add(Ingredientitem);
            }
            if (item.HarvestSound.TryGet(out var HarvestSounditem))
            {
                hash.Add(HarvestSounditem);
            }
            if (item.Production.TryGet(out var Productionitem))
            {
                hash.Add(Productionitem);
            }
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.TrunkFlexibility);
            hash.Add(item.BranchFlexibility);
            hash.Add(item.Unknown);
            hash.Add(item.LeafAmplitude);
            hash.Add(item.LeafFrequency);
            hash.Add(item.CNAMDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ITreeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ITreeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Tree.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ITreeGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is ILinkedFormKeyContainer VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Model.TryGet(out var ModelItems))
            {
                foreach (var item in ModelItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Ingredient.FormKey.TryGet(out var IngredientKey))
            {
                yield return IngredientKey;
            }
            if (obj.HarvestSound.FormKey.TryGet(out var HarvestSoundKey))
            {
                yield return HarvestSoundKey;
            }
            yield break;
        }
        
        public void RemapLinks(ITreeGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Tree obj, Tree rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Tree(getNextFormKey());
            ret.DeepCopyIn((Tree)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Tree)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class TreeSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly TreeSetterTranslationCommon Instance = new TreeSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ITreeInternal item,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ITree item,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter.TryGet(out var rhsVirtualMachineAdapter))
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Tree_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Tree_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Tree_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Ingredient) ?? true))
            {
                item.Ingredient = rhs.Ingredient.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.HarvestSound) ?? true))
            {
                item.HarvestSound = rhs.HarvestSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Production) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.Production);
                try
                {
                    if(rhs.Production.TryGet(out var rhsProduction))
                    {
                        item.Production = rhsProduction.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Tree_FieldIndex.Production));
                    }
                    else
                    {
                        item.Production = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.TrunkFlexibility) ?? true))
            {
                item.TrunkFlexibility = rhs.TrunkFlexibility;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.BranchFlexibility) ?? true))
            {
                item.BranchFlexibility = rhs.BranchFlexibility;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafAmplitude) ?? true))
            {
                item.LeafAmplitude = rhs.LeafAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafFrequency) ?? true))
            {
                item.LeafFrequency = rhs.LeafFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.CNAMDataTypeState) ?? true))
            {
                item.CNAMDataTypeState = rhs.CNAMDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITreeInternal)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITree)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITreeInternal)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITree)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Tree DeepCopy(
            ITreeGetter item,
            Tree.TranslationMask? copyMask = null)
        {
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Tree DeepCopy(
            ITreeGetter item,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Tree DeepCopy(
            ITreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Tree
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Tree_Registration.Instance;
        public new static Tree_Registration Registration => Tree_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TreeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TreeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TreeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TreeXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static TreeXmlWriteTranslation Instance = new TreeXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITreeGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.VirtualMachineAdapter != null)
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
                {
                    ((VirtualMachineAdapterXmlWriteTranslation)((IXmlItem)VirtualMachineAdapterItem).XmlWriteTranslator).Write(
                        item: VirtualMachineAdapterItem,
                        node: node,
                        name: nameof(item.VirtualMachineAdapter),
                        fieldIndex: (int)Tree_FieldIndex.VirtualMachineAdapter,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.VirtualMachineAdapter));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.ObjectBounds) ?? true))
            {
                var ObjectBoundsItem = item.ObjectBounds;
                ((ObjectBoundsXmlWriteTranslation)((IXmlItem)ObjectBoundsItem).XmlWriteTranslator).Write(
                    item: ObjectBoundsItem,
                    node: node,
                    name: nameof(item.ObjectBounds),
                    fieldIndex: (int)Tree_FieldIndex.ObjectBounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.ObjectBounds));
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Tree_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.Model));
                }
            }
            if ((item.Ingredient.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.Ingredient) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Ingredient),
                    item: item.Ingredient.FormKey.Value,
                    fieldIndex: (int)Tree_FieldIndex.Ingredient,
                    errorMask: errorMask);
            }
            if ((item.HarvestSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.HarvestSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HarvestSound),
                    item: item.HarvestSound.FormKey.Value,
                    fieldIndex: (int)Tree_FieldIndex.HarvestSound,
                    errorMask: errorMask);
            }
            if ((item.Production != null)
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.Production) ?? true))
            {
                if (item.Production.TryGet(out var ProductionItem))
                {
                    ((SeasonalIngredientProductionXmlWriteTranslation)((IXmlItem)ProductionItem).XmlWriteTranslator).Write(
                        item: ProductionItem,
                        node: node,
                        name: nameof(item.Production),
                        fieldIndex: (int)Tree_FieldIndex.Production,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.Production));
                }
            }
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Tree_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.TrunkFlexibility) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TrunkFlexibility),
                    item: item.TrunkFlexibility,
                    fieldIndex: (int)Tree_FieldIndex.TrunkFlexibility,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.BranchFlexibility) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BranchFlexibility),
                    item: item.BranchFlexibility,
                    fieldIndex: (int)Tree_FieldIndex.BranchFlexibility,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)Tree_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafAmplitude) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LeafAmplitude),
                    item: item.LeafAmplitude,
                    fieldIndex: (int)Tree_FieldIndex.LeafAmplitude,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafFrequency) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LeafFrequency),
                    item: item.LeafFrequency,
                    fieldIndex: (int)Tree_FieldIndex.LeafFrequency,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Tree_FieldIndex.CNAMDataTypeState) ?? true))
            {
                EnumXmlTranslation<Tree.CNAMDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.CNAMDataTypeState),
                    item: item.CNAMDataTypeState,
                    fieldIndex: (int)Tree_FieldIndex.CNAMDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ITreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Tree");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Tree");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITreeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITreeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITreeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class TreeXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static TreeXmlCreateTranslation Instance = new TreeXmlCreateTranslation();

        public static void FillPublicXml(
            ITreeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TreeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITreeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "VirtualMachineAdapter":
                    errorMask?.PushIndex((int)Tree_FieldIndex.VirtualMachineAdapter);
                    try
                    {
                        item.VirtualMachineAdapter = LoquiXmlTranslation<VirtualMachineAdapter>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.VirtualMachineAdapter));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ObjectBounds":
                    errorMask?.PushIndex((int)Tree_FieldIndex.ObjectBounds);
                    try
                    {
                        item.ObjectBounds = LoquiXmlTranslation<ObjectBounds>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.ObjectBounds));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)Tree_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ingredient":
                    errorMask?.PushIndex((int)Tree_FieldIndex.Ingredient);
                    try
                    {
                        item.Ingredient = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HarvestSound":
                    errorMask?.PushIndex((int)Tree_FieldIndex.HarvestSound);
                    try
                    {
                        item.HarvestSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Production":
                    errorMask?.PushIndex((int)Tree_FieldIndex.Production);
                    try
                    {
                        item.Production = LoquiXmlTranslation<SeasonalIngredientProduction>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.Production));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Name":
                    errorMask?.PushIndex((int)Tree_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TrunkFlexibility":
                    errorMask?.PushIndex((int)Tree_FieldIndex.TrunkFlexibility);
                    try
                    {
                        item.TrunkFlexibility = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BranchFlexibility":
                    errorMask?.PushIndex((int)Tree_FieldIndex.BranchFlexibility);
                    try
                    {
                        item.BranchFlexibility = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)Tree_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 32,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeafAmplitude":
                    errorMask?.PushIndex((int)Tree_FieldIndex.LeafAmplitude);
                    try
                    {
                        item.LeafAmplitude = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeafFrequency":
                    errorMask?.PushIndex((int)Tree_FieldIndex.LeafFrequency);
                    try
                    {
                        item.LeafFrequency = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CNAMDataTypeState":
                    errorMask?.PushIndex((int)Tree_FieldIndex.CNAMDataTypeState);
                    try
                    {
                        item.CNAMDataTypeState = EnumXmlTranslation<Tree.CNAMDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class TreeXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITreeGetter item,
            XElement node,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((TreeXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITreeGetter item,
            string path,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITreeGetter item,
            Stream stream,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TreeBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static TreeBinaryWriteTranslation Instance = new TreeBinaryWriteTranslation();

        public static void WriteEmbedded(
            ITreeGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ITreeGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.VirtualMachineAdapter.TryGet(out var VirtualMachineAdapterItem))
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Ingredient,
                header: recordTypeConverter.ConvertToCustom(Tree_Registration.PFIG_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HarvestSound,
                header: recordTypeConverter.ConvertToCustom(Tree_Registration.SNAM_HEADER));
            if (item.Production.TryGet(out var ProductionItem))
            {
                ((SeasonalIngredientProductionBinaryWriteTranslation)((IBinaryItem)ProductionItem).BinaryWriteTranslator).Write(
                    item: ProductionItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Tree_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            using (HeaderExport.ExportSubrecordHeader(writer, recordTypeConverter.ConvertToCustom(Tree_Registration.CNAM_HEADER)))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.TrunkFlexibility);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BranchFlexibility);
                Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Unknown);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LeafAmplitude);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LeafFrequency);
            }
        }

        public void Write(
            MutagenWriter writer,
            ITreeGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(Tree_Registration.TREE_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITreeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITreeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITreeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class TreeBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static TreeBinaryCreateTranslation Instance = new TreeBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class TreeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class TreeBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ITreeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Tree_Registration.Instance;
        public new static Tree_Registration Registration => Tree_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TreeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TreeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITreeGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => TreeCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => TreeCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TreeCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TreeCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => TreeXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TreeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TreeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TreeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        public Tree.MajorFlag MajorFlags => (Tree.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(new BinaryMemoryReadStream(_data.Slice(_VirtualMachineAdapterLocation!.Value.Min)), _package) : default;
        public bool VirtualMachineAdapter_IsSet => _VirtualMachineAdapterLocation.HasValue;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(new BinaryMemoryReadStream(_data.Slice(_ObjectBoundsLocation!.Value.Min)), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        public IModelGetter? Model { get; private set; }
        #region Ingredient
        private int? _IngredientLocation;
        public bool Ingredient_IsSet => _IngredientLocation.HasValue;
        public IFormLinkNullableGetter<IHarvestTargetGetter> Ingredient => _IngredientLocation.HasValue ? new FormLinkNullable<IHarvestTargetGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _IngredientLocation.Value, _package.Meta)))) : FormLinkNullable<IHarvestTargetGetter>.Null;
        #endregion
        #region HarvestSound
        private int? _HarvestSoundLocation;
        public bool HarvestSound_IsSet => _HarvestSoundLocation.HasValue;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> HarvestSound => _HarvestSoundLocation.HasValue ? new FormLinkNullable<ISoundDescriptorGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _HarvestSoundLocation.Value, _package.Meta)))) : FormLinkNullable<ISoundDescriptorGetter>.Null;
        #endregion
        #region Production
        private RangeInt32? _ProductionLocation;
        public ISeasonalIngredientProductionGetter? Production => _ProductionLocation.HasValue ? SeasonalIngredientProductionBinaryOverlay.SeasonalIngredientProductionFactory(new BinaryMemoryReadStream(_data.Slice(_ProductionLocation!.Value.Min)), _package) : default;
        public bool Production_IsSet => _ProductionLocation.HasValue;
        #endregion
        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        private int? _CNAMLocation;
        public Tree.CNAMDataType CNAMDataTypeState { get; private set; }
        #region TrunkFlexibility
        private int _TrunkFlexibilityLocation => _CNAMLocation!.Value + 0x0;
        private bool _TrunkFlexibility_IsSet => _CNAMLocation.HasValue;
        public Single TrunkFlexibility => _TrunkFlexibility_IsSet ? SpanExt.GetFloat(_data.Slice(_TrunkFlexibilityLocation, 4)) : default;
        #endregion
        #region BranchFlexibility
        private int _BranchFlexibilityLocation => _CNAMLocation!.Value + 0x4;
        private bool _BranchFlexibility_IsSet => _CNAMLocation.HasValue;
        public Single BranchFlexibility => _BranchFlexibility_IsSet ? SpanExt.GetFloat(_data.Slice(_BranchFlexibilityLocation, 4)) : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _CNAMLocation!.Value + 0x8;
        private bool _Unknown_IsSet => _CNAMLocation.HasValue;
        public ReadOnlyMemorySlice<Byte> Unknown => _Unknown_IsSet ? _data.Span.Slice(_UnknownLocation, 32).ToArray() : default(ReadOnlyMemorySlice<byte>);
        #endregion
        #region LeafAmplitude
        private int _LeafAmplitudeLocation => _CNAMLocation!.Value + 0x28;
        private bool _LeafAmplitude_IsSet => _CNAMLocation.HasValue;
        public Single LeafAmplitude => _LeafAmplitude_IsSet ? SpanExt.GetFloat(_data.Slice(_LeafAmplitudeLocation, 4)) : default;
        #endregion
        #region LeafFrequency
        private int _LeafFrequencyLocation => _CNAMLocation!.Value + 0x2C;
        private bool _LeafFrequency_IsSet => _CNAMLocation.HasValue;
        public Single LeafFrequency => _LeafFrequency_IsSet ? SpanExt.GetFloat(_data.Slice(_LeafFrequencyLocation, 4)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected TreeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static TreeBinaryOverlay TreeFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new TreeBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static TreeBinaryOverlay TreeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return TreeFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x44414D56: // VMAD
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.VirtualMachineAdapter);
                }
                case 0x444E424F: // OBND
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.ObjectBounds);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Model);
                }
                case 0x47494650: // PFIG
                {
                    _IngredientLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Ingredient);
                }
                case 0x4D414E53: // SNAM
                {
                    _HarvestSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.HarvestSound);
                }
                case 0x43504650: // PFPC
                {
                    _ProductionLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Production);
                }
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Name);
                }
                case 0x4D414E43: // CNAM
                {
                    _CNAMLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.LeafFrequency);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TreeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

