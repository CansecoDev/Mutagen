/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class SkyrimMod :
        ISkyrimMod,
        ILoquiObjectSetter<SkyrimMod>,
        IEquatable<SkyrimMod>,
        IEqualsMask
    {
        #region Ctor
        protected SkyrimMod()
        {
            _GameSettings_Object = new Group<GameSetting>(this);
            _Keywords_Object = new Group<Keyword>(this);
            _LocationReferenceTypes_Object = new Group<LocationReferenceType>(this);
            _Actions_Object = new Group<ActionRecord>(this);
            _TextureSets_Object = new Group<TextureSet>(this);
            _Globals_Object = new Group<Global>(this);
            _Classes_Object = new Group<Class>(this);
            _Factions_Object = new Group<Faction>(this);
            _HeadParts_Object = new Group<HeadPart>(this);
            _Hairs_Object = new Group<Hair>(this);
            _Eyes_Object = new Group<Eyes>(this);
            _Races_Object = new Group<Race>(this);
            _SoundMarkers_Object = new Group<SoundMarker>(this);
            _AcousticSpaces_Object = new Group<AcousticSpace>(this);
            _MagicEffects_Object = new Group<MagicEffect>(this);
            _LandscapeTextures_Object = new Group<LandscapeTexture>(this);
            _ObjectEffects_Object = new Group<ObjectEffect>(this);
            _Spells_Object = new Group<Spell>(this);
            _Scrolls_Object = new Group<Scroll>(this);
            _Activators_Object = new Group<Activator>(this);
            _TalkingActivators_Object = new Group<TalkingActivator>(this);
            _Armors_Object = new Group<Armor>(this);
            _Books_Object = new Group<Book>(this);
            _Containers_Object = new Group<Container>(this);
            _Doors_Object = new Group<Door>(this);
            _Ingredients_Object = new Group<Ingredient>(this);
            _Lights_Object = new Group<Light>(this);
            _MiscItems_Object = new Group<MiscItem>(this);
            _AlchemicalApparatuses_Object = new Group<AlchemicalApparatus>(this);
            _Statics_Object = new Group<Static>(this);
            _MoveableStatics_Object = new Group<MoveableStatic>(this);
            _Grasses_Object = new Group<Grass>(this);
            _Trees_Object = new Group<Tree>(this);
            _Florae_Object = new Group<Flora>(this);
            _Furniture_Object = new Group<Furniture>(this);
            _Weapons_Object = new Group<Weapon>(this);
            _Ammunitions_Object = new Group<Ammunition>(this);
            _Npcs_Object = new Group<Npc>(this);
            _LeveledNpcs_Object = new Group<LeveledNpc>(this);
            _Keys_Object = new Group<Key>(this);
            _Ingestibles_Object = new Group<Ingestible>(this);
            _IdleMarkers_Object = new Group<IdleMarker>(this);
            _ConstructibleObjects_Object = new Group<ConstructibleObject>(this);
            _Projectiles_Object = new Group<Projectile>(this);
            _Hazards_Object = new Group<Hazard>(this);
            _SoulGems_Object = new Group<SoulGem>(this);
            _LeveledItems_Object = new Group<LeveledItem>(this);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModHeader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ModHeader _ModHeader_Object = new ModHeader();
        public ModHeader ModHeader => _ModHeader_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModHeaderGetter ISkyrimModGetter.ModHeader => _ModHeader_Object;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<GameSetting> _GameSettings_Object;
        public Group<GameSetting> GameSettings => _GameSettings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IGameSettingGetter> ISkyrimModGetter.GameSettings => _GameSettings_Object;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Keyword> _Keywords_Object;
        public Group<Keyword> Keywords => _Keywords_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IKeywordGetter> ISkyrimModGetter.Keywords => _Keywords_Object;
        #endregion
        #region LocationReferenceTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LocationReferenceType> _LocationReferenceTypes_Object;
        public Group<LocationReferenceType> LocationReferenceTypes => _LocationReferenceTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILocationReferenceTypeGetter> ISkyrimModGetter.LocationReferenceTypes => _LocationReferenceTypes_Object;
        #endregion
        #region Actions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ActionRecord> _Actions_Object;
        public Group<ActionRecord> Actions => _Actions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IActionRecordGetter> ISkyrimModGetter.Actions => _Actions_Object;
        #endregion
        #region TextureSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<TextureSet> _TextureSets_Object;
        public Group<TextureSet> TextureSets => _TextureSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ITextureSetGetter> ISkyrimModGetter.TextureSets => _TextureSets_Object;
        #endregion
        #region Globals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Global> _Globals_Object;
        public Group<Global> Globals => _Globals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IGlobalGetter> ISkyrimModGetter.Globals => _Globals_Object;
        #endregion
        #region Classes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Class> _Classes_Object;
        public Group<Class> Classes => _Classes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IClassGetter> ISkyrimModGetter.Classes => _Classes_Object;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Faction> _Factions_Object;
        public Group<Faction> Factions => _Factions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFactionGetter> ISkyrimModGetter.Factions => _Factions_Object;
        #endregion
        #region HeadParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<HeadPart> _HeadParts_Object;
        public Group<HeadPart> HeadParts => _HeadParts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IHeadPartGetter> ISkyrimModGetter.HeadParts => _HeadParts_Object;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Hair> _Hairs_Object;
        public Group<Hair> Hairs => _Hairs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IHairGetter> ISkyrimModGetter.Hairs => _Hairs_Object;
        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Eyes> _Eyes_Object;
        public Group<Eyes> Eyes => _Eyes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IEyesGetter> ISkyrimModGetter.Eyes => _Eyes_Object;
        #endregion
        #region Races
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Race> _Races_Object;
        public Group<Race> Races => _Races_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IRaceGetter> ISkyrimModGetter.Races => _Races_Object;
        #endregion
        #region SoundMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SoundMarker> _SoundMarkers_Object;
        public Group<SoundMarker> SoundMarkers => _SoundMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISoundMarkerGetter> ISkyrimModGetter.SoundMarkers => _SoundMarkers_Object;
        #endregion
        #region AcousticSpaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AcousticSpace> _AcousticSpaces_Object;
        public Group<AcousticSpace> AcousticSpaces => _AcousticSpaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAcousticSpaceGetter> ISkyrimModGetter.AcousticSpaces => _AcousticSpaces_Object;
        #endregion
        #region MagicEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MagicEffect> _MagicEffects_Object;
        public Group<MagicEffect> MagicEffects => _MagicEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMagicEffectGetter> ISkyrimModGetter.MagicEffects => _MagicEffects_Object;
        #endregion
        #region LandscapeTextures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LandscapeTexture> _LandscapeTextures_Object;
        public Group<LandscapeTexture> LandscapeTextures => _LandscapeTextures_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILandscapeTextureGetter> ISkyrimModGetter.LandscapeTextures => _LandscapeTextures_Object;
        #endregion
        #region ObjectEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ObjectEffect> _ObjectEffects_Object;
        public Group<ObjectEffect> ObjectEffects => _ObjectEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IObjectEffectGetter> ISkyrimModGetter.ObjectEffects => _ObjectEffects_Object;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Spell> _Spells_Object;
        public Group<Spell> Spells => _Spells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISpellGetter> ISkyrimModGetter.Spells => _Spells_Object;
        #endregion
        #region Scrolls
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Scroll> _Scrolls_Object;
        public Group<Scroll> Scrolls => _Scrolls_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IScrollGetter> ISkyrimModGetter.Scrolls => _Scrolls_Object;
        #endregion
        #region Activators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Activator> _Activators_Object;
        public Group<Activator> Activators => _Activators_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IActivatorGetter> ISkyrimModGetter.Activators => _Activators_Object;
        #endregion
        #region TalkingActivators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<TalkingActivator> _TalkingActivators_Object;
        public Group<TalkingActivator> TalkingActivators => _TalkingActivators_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ITalkingActivatorGetter> ISkyrimModGetter.TalkingActivators => _TalkingActivators_Object;
        #endregion
        #region Armors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Armor> _Armors_Object;
        public Group<Armor> Armors => _Armors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IArmorGetter> ISkyrimModGetter.Armors => _Armors_Object;
        #endregion
        #region Books
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Book> _Books_Object;
        public Group<Book> Books => _Books_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IBookGetter> ISkyrimModGetter.Books => _Books_Object;
        #endregion
        #region Containers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Container> _Containers_Object;
        public Group<Container> Containers => _Containers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IContainerGetter> ISkyrimModGetter.Containers => _Containers_Object;
        #endregion
        #region Doors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Door> _Doors_Object;
        public Group<Door> Doors => _Doors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDoorGetter> ISkyrimModGetter.Doors => _Doors_Object;
        #endregion
        #region Ingredients
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Ingredient> _Ingredients_Object;
        public Group<Ingredient> Ingredients => _Ingredients_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IIngredientGetter> ISkyrimModGetter.Ingredients => _Ingredients_Object;
        #endregion
        #region Lights
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Light> _Lights_Object;
        public Group<Light> Lights => _Lights_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILightGetter> ISkyrimModGetter.Lights => _Lights_Object;
        #endregion
        #region MiscItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MiscItem> _MiscItems_Object;
        public Group<MiscItem> MiscItems => _MiscItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMiscItemGetter> ISkyrimModGetter.MiscItems => _MiscItems_Object;
        #endregion
        #region AlchemicalApparatuses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AlchemicalApparatus> _AlchemicalApparatuses_Object;
        public Group<AlchemicalApparatus> AlchemicalApparatuses => _AlchemicalApparatuses_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAlchemicalApparatusGetter> ISkyrimModGetter.AlchemicalApparatuses => _AlchemicalApparatuses_Object;
        #endregion
        #region Statics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Static> _Statics_Object;
        public Group<Static> Statics => _Statics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IStaticGetter> ISkyrimModGetter.Statics => _Statics_Object;
        #endregion
        #region MoveableStatics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MoveableStatic> _MoveableStatics_Object;
        public Group<MoveableStatic> MoveableStatics => _MoveableStatics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMoveableStaticGetter> ISkyrimModGetter.MoveableStatics => _MoveableStatics_Object;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Grass> _Grasses_Object;
        public Group<Grass> Grasses => _Grasses_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IGrassGetter> ISkyrimModGetter.Grasses => _Grasses_Object;
        #endregion
        #region Trees
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Tree> _Trees_Object;
        public Group<Tree> Trees => _Trees_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ITreeGetter> ISkyrimModGetter.Trees => _Trees_Object;
        #endregion
        #region Florae
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Flora> _Florae_Object;
        public Group<Flora> Florae => _Florae_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFloraGetter> ISkyrimModGetter.Florae => _Florae_Object;
        #endregion
        #region Furniture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Furniture> _Furniture_Object;
        public Group<Furniture> Furniture => _Furniture_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFurnitureGetter> ISkyrimModGetter.Furniture => _Furniture_Object;
        #endregion
        #region Weapons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Weapon> _Weapons_Object;
        public Group<Weapon> Weapons => _Weapons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWeaponGetter> ISkyrimModGetter.Weapons => _Weapons_Object;
        #endregion
        #region Ammunitions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Ammunition> _Ammunitions_Object;
        public Group<Ammunition> Ammunitions => _Ammunitions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAmmunitionGetter> ISkyrimModGetter.Ammunitions => _Ammunitions_Object;
        #endregion
        #region Npcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Npc> _Npcs_Object;
        public Group<Npc> Npcs => _Npcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<INpcGetter> ISkyrimModGetter.Npcs => _Npcs_Object;
        #endregion
        #region LeveledNpcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LeveledNpc> _LeveledNpcs_Object;
        public Group<LeveledNpc> LeveledNpcs => _LeveledNpcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILeveledNpcGetter> ISkyrimModGetter.LeveledNpcs => _LeveledNpcs_Object;
        #endregion
        #region Keys
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Key> _Keys_Object;
        public Group<Key> Keys => _Keys_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IKeyGetter> ISkyrimModGetter.Keys => _Keys_Object;
        #endregion
        #region Ingestibles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Ingestible> _Ingestibles_Object;
        public Group<Ingestible> Ingestibles => _Ingestibles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IIngestibleGetter> ISkyrimModGetter.Ingestibles => _Ingestibles_Object;
        #endregion
        #region IdleMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<IdleMarker> _IdleMarkers_Object;
        public Group<IdleMarker> IdleMarkers => _IdleMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IIdleMarkerGetter> ISkyrimModGetter.IdleMarkers => _IdleMarkers_Object;
        #endregion
        #region ConstructibleObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ConstructibleObject> _ConstructibleObjects_Object;
        public Group<ConstructibleObject> ConstructibleObjects => _ConstructibleObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IConstructibleObjectGetter> ISkyrimModGetter.ConstructibleObjects => _ConstructibleObjects_Object;
        #endregion
        #region Projectiles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Projectile> _Projectiles_Object;
        public Group<Projectile> Projectiles => _Projectiles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IProjectileGetter> ISkyrimModGetter.Projectiles => _Projectiles_Object;
        #endregion
        #region Hazards
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Hazard> _Hazards_Object;
        public Group<Hazard> Hazards => _Hazards_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IHazardGetter> ISkyrimModGetter.Hazards => _Hazards_Object;
        #endregion
        #region SoulGems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SoulGem> _SoulGems_Object;
        public Group<SoulGem> SoulGems => _SoulGems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISoulGemGetter> ISkyrimModGetter.SoulGems => _SoulGems_Object;
        #endregion
        #region LeveledItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LeveledItem> _LeveledItems_Object;
        public Group<LeveledItem> LeveledItems => _LeveledItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILeveledItemGetter> ISkyrimModGetter.LeveledItems => _LeveledItems_Object;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SkyrimModMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISkyrimModGetter rhs)) return false;
            return ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(SkyrimMod obj)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => SkyrimModXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SkyrimModXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static SkyrimMod CreateFromXml(
            XElement node,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SkyrimMod CreateFromXml(
            XElement node,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkyrimMod.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static SkyrimMod CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new SkyrimMod();
            ((SkyrimModSetterCommon)((ISkyrimModGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SkyrimMod CreateFromXml(
            string path,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            string path,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SkyrimMod CreateFromXml(
            Stream stream,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            Stream stream,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ModHeader = new MaskItem<TItem, ModHeader.Mask<TItem>?>(initialValue, new ModHeader.Mask<TItem>(initialValue));
                this.GameSettings = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LocationReferenceTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Actions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.TextureSets = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Globals = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Classes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.HeadParts = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Hairs = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Eyes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Races = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.SoundMarkers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AcousticSpaces = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MagicEffects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LandscapeTextures = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ObjectEffects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Spells = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Scrolls = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Activators = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.TalkingActivators = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Armors = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Books = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Containers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Doors = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Ingredients = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Lights = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MiscItems = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AlchemicalApparatuses = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Statics = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MoveableStatics = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Grasses = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Trees = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Florae = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Furniture = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Weapons = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Ammunitions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Npcs = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LeveledNpcs = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Keys = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Ingestibles = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.IdleMarkers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ConstructibleObjects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Projectiles = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Hazards = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.SoulGems = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LeveledItems = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem ModHeader,
                TItem GameSettings,
                TItem Keywords,
                TItem LocationReferenceTypes,
                TItem Actions,
                TItem TextureSets,
                TItem Globals,
                TItem Classes,
                TItem Factions,
                TItem HeadParts,
                TItem Hairs,
                TItem Eyes,
                TItem Races,
                TItem SoundMarkers,
                TItem AcousticSpaces,
                TItem MagicEffects,
                TItem LandscapeTextures,
                TItem ObjectEffects,
                TItem Spells,
                TItem Scrolls,
                TItem Activators,
                TItem TalkingActivators,
                TItem Armors,
                TItem Books,
                TItem Containers,
                TItem Doors,
                TItem Ingredients,
                TItem Lights,
                TItem MiscItems,
                TItem AlchemicalApparatuses,
                TItem Statics,
                TItem MoveableStatics,
                TItem Grasses,
                TItem Trees,
                TItem Florae,
                TItem Furniture,
                TItem Weapons,
                TItem Ammunitions,
                TItem Npcs,
                TItem LeveledNpcs,
                TItem Keys,
                TItem Ingestibles,
                TItem IdleMarkers,
                TItem ConstructibleObjects,
                TItem Projectiles,
                TItem Hazards,
                TItem SoulGems,
                TItem LeveledItems)
            {
                this.ModHeader = new MaskItem<TItem, ModHeader.Mask<TItem>?>(ModHeader, new ModHeader.Mask<TItem>(ModHeader));
                this.GameSettings = new MaskItem<TItem, Group.Mask<TItem>?>(GameSettings, new Group.Mask<TItem>(GameSettings));
                this.Keywords = new MaskItem<TItem, Group.Mask<TItem>?>(Keywords, new Group.Mask<TItem>(Keywords));
                this.LocationReferenceTypes = new MaskItem<TItem, Group.Mask<TItem>?>(LocationReferenceTypes, new Group.Mask<TItem>(LocationReferenceTypes));
                this.Actions = new MaskItem<TItem, Group.Mask<TItem>?>(Actions, new Group.Mask<TItem>(Actions));
                this.TextureSets = new MaskItem<TItem, Group.Mask<TItem>?>(TextureSets, new Group.Mask<TItem>(TextureSets));
                this.Globals = new MaskItem<TItem, Group.Mask<TItem>?>(Globals, new Group.Mask<TItem>(Globals));
                this.Classes = new MaskItem<TItem, Group.Mask<TItem>?>(Classes, new Group.Mask<TItem>(Classes));
                this.Factions = new MaskItem<TItem, Group.Mask<TItem>?>(Factions, new Group.Mask<TItem>(Factions));
                this.HeadParts = new MaskItem<TItem, Group.Mask<TItem>?>(HeadParts, new Group.Mask<TItem>(HeadParts));
                this.Hairs = new MaskItem<TItem, Group.Mask<TItem>?>(Hairs, new Group.Mask<TItem>(Hairs));
                this.Eyes = new MaskItem<TItem, Group.Mask<TItem>?>(Eyes, new Group.Mask<TItem>(Eyes));
                this.Races = new MaskItem<TItem, Group.Mask<TItem>?>(Races, new Group.Mask<TItem>(Races));
                this.SoundMarkers = new MaskItem<TItem, Group.Mask<TItem>?>(SoundMarkers, new Group.Mask<TItem>(SoundMarkers));
                this.AcousticSpaces = new MaskItem<TItem, Group.Mask<TItem>?>(AcousticSpaces, new Group.Mask<TItem>(AcousticSpaces));
                this.MagicEffects = new MaskItem<TItem, Group.Mask<TItem>?>(MagicEffects, new Group.Mask<TItem>(MagicEffects));
                this.LandscapeTextures = new MaskItem<TItem, Group.Mask<TItem>?>(LandscapeTextures, new Group.Mask<TItem>(LandscapeTextures));
                this.ObjectEffects = new MaskItem<TItem, Group.Mask<TItem>?>(ObjectEffects, new Group.Mask<TItem>(ObjectEffects));
                this.Spells = new MaskItem<TItem, Group.Mask<TItem>?>(Spells, new Group.Mask<TItem>(Spells));
                this.Scrolls = new MaskItem<TItem, Group.Mask<TItem>?>(Scrolls, new Group.Mask<TItem>(Scrolls));
                this.Activators = new MaskItem<TItem, Group.Mask<TItem>?>(Activators, new Group.Mask<TItem>(Activators));
                this.TalkingActivators = new MaskItem<TItem, Group.Mask<TItem>?>(TalkingActivators, new Group.Mask<TItem>(TalkingActivators));
                this.Armors = new MaskItem<TItem, Group.Mask<TItem>?>(Armors, new Group.Mask<TItem>(Armors));
                this.Books = new MaskItem<TItem, Group.Mask<TItem>?>(Books, new Group.Mask<TItem>(Books));
                this.Containers = new MaskItem<TItem, Group.Mask<TItem>?>(Containers, new Group.Mask<TItem>(Containers));
                this.Doors = new MaskItem<TItem, Group.Mask<TItem>?>(Doors, new Group.Mask<TItem>(Doors));
                this.Ingredients = new MaskItem<TItem, Group.Mask<TItem>?>(Ingredients, new Group.Mask<TItem>(Ingredients));
                this.Lights = new MaskItem<TItem, Group.Mask<TItem>?>(Lights, new Group.Mask<TItem>(Lights));
                this.MiscItems = new MaskItem<TItem, Group.Mask<TItem>?>(MiscItems, new Group.Mask<TItem>(MiscItems));
                this.AlchemicalApparatuses = new MaskItem<TItem, Group.Mask<TItem>?>(AlchemicalApparatuses, new Group.Mask<TItem>(AlchemicalApparatuses));
                this.Statics = new MaskItem<TItem, Group.Mask<TItem>?>(Statics, new Group.Mask<TItem>(Statics));
                this.MoveableStatics = new MaskItem<TItem, Group.Mask<TItem>?>(MoveableStatics, new Group.Mask<TItem>(MoveableStatics));
                this.Grasses = new MaskItem<TItem, Group.Mask<TItem>?>(Grasses, new Group.Mask<TItem>(Grasses));
                this.Trees = new MaskItem<TItem, Group.Mask<TItem>?>(Trees, new Group.Mask<TItem>(Trees));
                this.Florae = new MaskItem<TItem, Group.Mask<TItem>?>(Florae, new Group.Mask<TItem>(Florae));
                this.Furniture = new MaskItem<TItem, Group.Mask<TItem>?>(Furniture, new Group.Mask<TItem>(Furniture));
                this.Weapons = new MaskItem<TItem, Group.Mask<TItem>?>(Weapons, new Group.Mask<TItem>(Weapons));
                this.Ammunitions = new MaskItem<TItem, Group.Mask<TItem>?>(Ammunitions, new Group.Mask<TItem>(Ammunitions));
                this.Npcs = new MaskItem<TItem, Group.Mask<TItem>?>(Npcs, new Group.Mask<TItem>(Npcs));
                this.LeveledNpcs = new MaskItem<TItem, Group.Mask<TItem>?>(LeveledNpcs, new Group.Mask<TItem>(LeveledNpcs));
                this.Keys = new MaskItem<TItem, Group.Mask<TItem>?>(Keys, new Group.Mask<TItem>(Keys));
                this.Ingestibles = new MaskItem<TItem, Group.Mask<TItem>?>(Ingestibles, new Group.Mask<TItem>(Ingestibles));
                this.IdleMarkers = new MaskItem<TItem, Group.Mask<TItem>?>(IdleMarkers, new Group.Mask<TItem>(IdleMarkers));
                this.ConstructibleObjects = new MaskItem<TItem, Group.Mask<TItem>?>(ConstructibleObjects, new Group.Mask<TItem>(ConstructibleObjects));
                this.Projectiles = new MaskItem<TItem, Group.Mask<TItem>?>(Projectiles, new Group.Mask<TItem>(Projectiles));
                this.Hazards = new MaskItem<TItem, Group.Mask<TItem>?>(Hazards, new Group.Mask<TItem>(Hazards));
                this.SoulGems = new MaskItem<TItem, Group.Mask<TItem>?>(SoulGems, new Group.Mask<TItem>(SoulGems));
                this.LeveledItems = new MaskItem<TItem, Group.Mask<TItem>?>(LeveledItems, new Group.Mask<TItem>(LeveledItems));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ModHeader.Mask<TItem>?>? ModHeader { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? GameSettings { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Keywords { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LocationReferenceTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Actions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? TextureSets { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Globals { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Classes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Factions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? HeadParts { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Hairs { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Eyes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Races { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? SoundMarkers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AcousticSpaces { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MagicEffects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LandscapeTextures { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ObjectEffects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Spells { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Scrolls { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Activators { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? TalkingActivators { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Armors { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Books { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Containers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Doors { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Ingredients { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Lights { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MiscItems { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AlchemicalApparatuses { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Statics { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MoveableStatics { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Grasses { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Trees { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Florae { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Furniture { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Weapons { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Ammunitions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Npcs { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LeveledNpcs { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Keys { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Ingestibles { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? IdleMarkers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ConstructibleObjects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Projectiles { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Hazards { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? SoulGems { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LeveledItems { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
                if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.LocationReferenceTypes, rhs.LocationReferenceTypes)) return false;
                if (!object.Equals(this.Actions, rhs.Actions)) return false;
                if (!object.Equals(this.TextureSets, rhs.TextureSets)) return false;
                if (!object.Equals(this.Globals, rhs.Globals)) return false;
                if (!object.Equals(this.Classes, rhs.Classes)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.HeadParts, rhs.HeadParts)) return false;
                if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.Races, rhs.Races)) return false;
                if (!object.Equals(this.SoundMarkers, rhs.SoundMarkers)) return false;
                if (!object.Equals(this.AcousticSpaces, rhs.AcousticSpaces)) return false;
                if (!object.Equals(this.MagicEffects, rhs.MagicEffects)) return false;
                if (!object.Equals(this.LandscapeTextures, rhs.LandscapeTextures)) return false;
                if (!object.Equals(this.ObjectEffects, rhs.ObjectEffects)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Scrolls, rhs.Scrolls)) return false;
                if (!object.Equals(this.Activators, rhs.Activators)) return false;
                if (!object.Equals(this.TalkingActivators, rhs.TalkingActivators)) return false;
                if (!object.Equals(this.Armors, rhs.Armors)) return false;
                if (!object.Equals(this.Books, rhs.Books)) return false;
                if (!object.Equals(this.Containers, rhs.Containers)) return false;
                if (!object.Equals(this.Doors, rhs.Doors)) return false;
                if (!object.Equals(this.Ingredients, rhs.Ingredients)) return false;
                if (!object.Equals(this.Lights, rhs.Lights)) return false;
                if (!object.Equals(this.MiscItems, rhs.MiscItems)) return false;
                if (!object.Equals(this.AlchemicalApparatuses, rhs.AlchemicalApparatuses)) return false;
                if (!object.Equals(this.Statics, rhs.Statics)) return false;
                if (!object.Equals(this.MoveableStatics, rhs.MoveableStatics)) return false;
                if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
                if (!object.Equals(this.Trees, rhs.Trees)) return false;
                if (!object.Equals(this.Florae, rhs.Florae)) return false;
                if (!object.Equals(this.Furniture, rhs.Furniture)) return false;
                if (!object.Equals(this.Weapons, rhs.Weapons)) return false;
                if (!object.Equals(this.Ammunitions, rhs.Ammunitions)) return false;
                if (!object.Equals(this.Npcs, rhs.Npcs)) return false;
                if (!object.Equals(this.LeveledNpcs, rhs.LeveledNpcs)) return false;
                if (!object.Equals(this.Keys, rhs.Keys)) return false;
                if (!object.Equals(this.Ingestibles, rhs.Ingestibles)) return false;
                if (!object.Equals(this.IdleMarkers, rhs.IdleMarkers)) return false;
                if (!object.Equals(this.ConstructibleObjects, rhs.ConstructibleObjects)) return false;
                if (!object.Equals(this.Projectiles, rhs.Projectiles)) return false;
                if (!object.Equals(this.Hazards, rhs.Hazards)) return false;
                if (!object.Equals(this.SoulGems, rhs.SoulGems)) return false;
                if (!object.Equals(this.LeveledItems, rhs.LeveledItems)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ModHeader);
                hash.Add(this.GameSettings);
                hash.Add(this.Keywords);
                hash.Add(this.LocationReferenceTypes);
                hash.Add(this.Actions);
                hash.Add(this.TextureSets);
                hash.Add(this.Globals);
                hash.Add(this.Classes);
                hash.Add(this.Factions);
                hash.Add(this.HeadParts);
                hash.Add(this.Hairs);
                hash.Add(this.Eyes);
                hash.Add(this.Races);
                hash.Add(this.SoundMarkers);
                hash.Add(this.AcousticSpaces);
                hash.Add(this.MagicEffects);
                hash.Add(this.LandscapeTextures);
                hash.Add(this.ObjectEffects);
                hash.Add(this.Spells);
                hash.Add(this.Scrolls);
                hash.Add(this.Activators);
                hash.Add(this.TalkingActivators);
                hash.Add(this.Armors);
                hash.Add(this.Books);
                hash.Add(this.Containers);
                hash.Add(this.Doors);
                hash.Add(this.Ingredients);
                hash.Add(this.Lights);
                hash.Add(this.MiscItems);
                hash.Add(this.AlchemicalApparatuses);
                hash.Add(this.Statics);
                hash.Add(this.MoveableStatics);
                hash.Add(this.Grasses);
                hash.Add(this.Trees);
                hash.Add(this.Florae);
                hash.Add(this.Furniture);
                hash.Add(this.Weapons);
                hash.Add(this.Ammunitions);
                hash.Add(this.Npcs);
                hash.Add(this.LeveledNpcs);
                hash.Add(this.Keys);
                hash.Add(this.Ingestibles);
                hash.Add(this.IdleMarkers);
                hash.Add(this.ConstructibleObjects);
                hash.Add(this.Projectiles);
                hash.Add(this.Hazards);
                hash.Add(this.SoulGems);
                hash.Add(this.LeveledItems);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (!eval(this.ModHeader.Overall)) return false;
                    if (this.ModHeader.Specific != null && !this.ModHeader.Specific.All(eval)) return false;
                }
                if (GameSettings != null)
                {
                    if (!eval(this.GameSettings.Overall)) return false;
                    if (this.GameSettings.Specific != null && !this.GameSettings.Specific.All(eval)) return false;
                }
                if (Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null && !this.Keywords.Specific.All(eval)) return false;
                }
                if (LocationReferenceTypes != null)
                {
                    if (!eval(this.LocationReferenceTypes.Overall)) return false;
                    if (this.LocationReferenceTypes.Specific != null && !this.LocationReferenceTypes.Specific.All(eval)) return false;
                }
                if (Actions != null)
                {
                    if (!eval(this.Actions.Overall)) return false;
                    if (this.Actions.Specific != null && !this.Actions.Specific.All(eval)) return false;
                }
                if (TextureSets != null)
                {
                    if (!eval(this.TextureSets.Overall)) return false;
                    if (this.TextureSets.Specific != null && !this.TextureSets.Specific.All(eval)) return false;
                }
                if (Globals != null)
                {
                    if (!eval(this.Globals.Overall)) return false;
                    if (this.Globals.Specific != null && !this.Globals.Specific.All(eval)) return false;
                }
                if (Classes != null)
                {
                    if (!eval(this.Classes.Overall)) return false;
                    if (this.Classes.Specific != null && !this.Classes.Specific.All(eval)) return false;
                }
                if (Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null && !this.Factions.Specific.All(eval)) return false;
                }
                if (HeadParts != null)
                {
                    if (!eval(this.HeadParts.Overall)) return false;
                    if (this.HeadParts.Specific != null && !this.HeadParts.Specific.All(eval)) return false;
                }
                if (Hairs != null)
                {
                    if (!eval(this.Hairs.Overall)) return false;
                    if (this.Hairs.Specific != null && !this.Hairs.Specific.All(eval)) return false;
                }
                if (Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null && !this.Eyes.Specific.All(eval)) return false;
                }
                if (Races != null)
                {
                    if (!eval(this.Races.Overall)) return false;
                    if (this.Races.Specific != null && !this.Races.Specific.All(eval)) return false;
                }
                if (SoundMarkers != null)
                {
                    if (!eval(this.SoundMarkers.Overall)) return false;
                    if (this.SoundMarkers.Specific != null && !this.SoundMarkers.Specific.All(eval)) return false;
                }
                if (AcousticSpaces != null)
                {
                    if (!eval(this.AcousticSpaces.Overall)) return false;
                    if (this.AcousticSpaces.Specific != null && !this.AcousticSpaces.Specific.All(eval)) return false;
                }
                if (MagicEffects != null)
                {
                    if (!eval(this.MagicEffects.Overall)) return false;
                    if (this.MagicEffects.Specific != null && !this.MagicEffects.Specific.All(eval)) return false;
                }
                if (LandscapeTextures != null)
                {
                    if (!eval(this.LandscapeTextures.Overall)) return false;
                    if (this.LandscapeTextures.Specific != null && !this.LandscapeTextures.Specific.All(eval)) return false;
                }
                if (ObjectEffects != null)
                {
                    if (!eval(this.ObjectEffects.Overall)) return false;
                    if (this.ObjectEffects.Specific != null && !this.ObjectEffects.Specific.All(eval)) return false;
                }
                if (Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null && !this.Spells.Specific.All(eval)) return false;
                }
                if (Scrolls != null)
                {
                    if (!eval(this.Scrolls.Overall)) return false;
                    if (this.Scrolls.Specific != null && !this.Scrolls.Specific.All(eval)) return false;
                }
                if (Activators != null)
                {
                    if (!eval(this.Activators.Overall)) return false;
                    if (this.Activators.Specific != null && !this.Activators.Specific.All(eval)) return false;
                }
                if (TalkingActivators != null)
                {
                    if (!eval(this.TalkingActivators.Overall)) return false;
                    if (this.TalkingActivators.Specific != null && !this.TalkingActivators.Specific.All(eval)) return false;
                }
                if (Armors != null)
                {
                    if (!eval(this.Armors.Overall)) return false;
                    if (this.Armors.Specific != null && !this.Armors.Specific.All(eval)) return false;
                }
                if (Books != null)
                {
                    if (!eval(this.Books.Overall)) return false;
                    if (this.Books.Specific != null && !this.Books.Specific.All(eval)) return false;
                }
                if (Containers != null)
                {
                    if (!eval(this.Containers.Overall)) return false;
                    if (this.Containers.Specific != null && !this.Containers.Specific.All(eval)) return false;
                }
                if (Doors != null)
                {
                    if (!eval(this.Doors.Overall)) return false;
                    if (this.Doors.Specific != null && !this.Doors.Specific.All(eval)) return false;
                }
                if (Ingredients != null)
                {
                    if (!eval(this.Ingredients.Overall)) return false;
                    if (this.Ingredients.Specific != null && !this.Ingredients.Specific.All(eval)) return false;
                }
                if (Lights != null)
                {
                    if (!eval(this.Lights.Overall)) return false;
                    if (this.Lights.Specific != null && !this.Lights.Specific.All(eval)) return false;
                }
                if (MiscItems != null)
                {
                    if (!eval(this.MiscItems.Overall)) return false;
                    if (this.MiscItems.Specific != null && !this.MiscItems.Specific.All(eval)) return false;
                }
                if (AlchemicalApparatuses != null)
                {
                    if (!eval(this.AlchemicalApparatuses.Overall)) return false;
                    if (this.AlchemicalApparatuses.Specific != null && !this.AlchemicalApparatuses.Specific.All(eval)) return false;
                }
                if (Statics != null)
                {
                    if (!eval(this.Statics.Overall)) return false;
                    if (this.Statics.Specific != null && !this.Statics.Specific.All(eval)) return false;
                }
                if (MoveableStatics != null)
                {
                    if (!eval(this.MoveableStatics.Overall)) return false;
                    if (this.MoveableStatics.Specific != null && !this.MoveableStatics.Specific.All(eval)) return false;
                }
                if (Grasses != null)
                {
                    if (!eval(this.Grasses.Overall)) return false;
                    if (this.Grasses.Specific != null && !this.Grasses.Specific.All(eval)) return false;
                }
                if (Trees != null)
                {
                    if (!eval(this.Trees.Overall)) return false;
                    if (this.Trees.Specific != null && !this.Trees.Specific.All(eval)) return false;
                }
                if (Florae != null)
                {
                    if (!eval(this.Florae.Overall)) return false;
                    if (this.Florae.Specific != null && !this.Florae.Specific.All(eval)) return false;
                }
                if (Furniture != null)
                {
                    if (!eval(this.Furniture.Overall)) return false;
                    if (this.Furniture.Specific != null && !this.Furniture.Specific.All(eval)) return false;
                }
                if (Weapons != null)
                {
                    if (!eval(this.Weapons.Overall)) return false;
                    if (this.Weapons.Specific != null && !this.Weapons.Specific.All(eval)) return false;
                }
                if (Ammunitions != null)
                {
                    if (!eval(this.Ammunitions.Overall)) return false;
                    if (this.Ammunitions.Specific != null && !this.Ammunitions.Specific.All(eval)) return false;
                }
                if (Npcs != null)
                {
                    if (!eval(this.Npcs.Overall)) return false;
                    if (this.Npcs.Specific != null && !this.Npcs.Specific.All(eval)) return false;
                }
                if (LeveledNpcs != null)
                {
                    if (!eval(this.LeveledNpcs.Overall)) return false;
                    if (this.LeveledNpcs.Specific != null && !this.LeveledNpcs.Specific.All(eval)) return false;
                }
                if (Keys != null)
                {
                    if (!eval(this.Keys.Overall)) return false;
                    if (this.Keys.Specific != null && !this.Keys.Specific.All(eval)) return false;
                }
                if (Ingestibles != null)
                {
                    if (!eval(this.Ingestibles.Overall)) return false;
                    if (this.Ingestibles.Specific != null && !this.Ingestibles.Specific.All(eval)) return false;
                }
                if (IdleMarkers != null)
                {
                    if (!eval(this.IdleMarkers.Overall)) return false;
                    if (this.IdleMarkers.Specific != null && !this.IdleMarkers.Specific.All(eval)) return false;
                }
                if (ConstructibleObjects != null)
                {
                    if (!eval(this.ConstructibleObjects.Overall)) return false;
                    if (this.ConstructibleObjects.Specific != null && !this.ConstructibleObjects.Specific.All(eval)) return false;
                }
                if (Projectiles != null)
                {
                    if (!eval(this.Projectiles.Overall)) return false;
                    if (this.Projectiles.Specific != null && !this.Projectiles.Specific.All(eval)) return false;
                }
                if (Hazards != null)
                {
                    if (!eval(this.Hazards.Overall)) return false;
                    if (this.Hazards.Specific != null && !this.Hazards.Specific.All(eval)) return false;
                }
                if (SoulGems != null)
                {
                    if (!eval(this.SoulGems.Overall)) return false;
                    if (this.SoulGems.Specific != null && !this.SoulGems.Specific.All(eval)) return false;
                }
                if (LeveledItems != null)
                {
                    if (!eval(this.LeveledItems.Overall)) return false;
                    if (this.LeveledItems.Specific != null && !this.LeveledItems.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (eval(this.ModHeader.Overall)) return true;
                    if (this.ModHeader.Specific != null && this.ModHeader.Specific.Any(eval)) return true;
                }
                if (GameSettings != null)
                {
                    if (eval(this.GameSettings.Overall)) return true;
                    if (this.GameSettings.Specific != null && this.GameSettings.Specific.Any(eval)) return true;
                }
                if (Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null && this.Keywords.Specific.Any(eval)) return true;
                }
                if (LocationReferenceTypes != null)
                {
                    if (eval(this.LocationReferenceTypes.Overall)) return true;
                    if (this.LocationReferenceTypes.Specific != null && this.LocationReferenceTypes.Specific.Any(eval)) return true;
                }
                if (Actions != null)
                {
                    if (eval(this.Actions.Overall)) return true;
                    if (this.Actions.Specific != null && this.Actions.Specific.Any(eval)) return true;
                }
                if (TextureSets != null)
                {
                    if (eval(this.TextureSets.Overall)) return true;
                    if (this.TextureSets.Specific != null && this.TextureSets.Specific.Any(eval)) return true;
                }
                if (Globals != null)
                {
                    if (eval(this.Globals.Overall)) return true;
                    if (this.Globals.Specific != null && this.Globals.Specific.Any(eval)) return true;
                }
                if (Classes != null)
                {
                    if (eval(this.Classes.Overall)) return true;
                    if (this.Classes.Specific != null && this.Classes.Specific.Any(eval)) return true;
                }
                if (Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null && this.Factions.Specific.Any(eval)) return true;
                }
                if (HeadParts != null)
                {
                    if (eval(this.HeadParts.Overall)) return true;
                    if (this.HeadParts.Specific != null && this.HeadParts.Specific.Any(eval)) return true;
                }
                if (Hairs != null)
                {
                    if (eval(this.Hairs.Overall)) return true;
                    if (this.Hairs.Specific != null && this.Hairs.Specific.Any(eval)) return true;
                }
                if (Eyes != null)
                {
                    if (eval(this.Eyes.Overall)) return true;
                    if (this.Eyes.Specific != null && this.Eyes.Specific.Any(eval)) return true;
                }
                if (Races != null)
                {
                    if (eval(this.Races.Overall)) return true;
                    if (this.Races.Specific != null && this.Races.Specific.Any(eval)) return true;
                }
                if (SoundMarkers != null)
                {
                    if (eval(this.SoundMarkers.Overall)) return true;
                    if (this.SoundMarkers.Specific != null && this.SoundMarkers.Specific.Any(eval)) return true;
                }
                if (AcousticSpaces != null)
                {
                    if (eval(this.AcousticSpaces.Overall)) return true;
                    if (this.AcousticSpaces.Specific != null && this.AcousticSpaces.Specific.Any(eval)) return true;
                }
                if (MagicEffects != null)
                {
                    if (eval(this.MagicEffects.Overall)) return true;
                    if (this.MagicEffects.Specific != null && this.MagicEffects.Specific.Any(eval)) return true;
                }
                if (LandscapeTextures != null)
                {
                    if (eval(this.LandscapeTextures.Overall)) return true;
                    if (this.LandscapeTextures.Specific != null && this.LandscapeTextures.Specific.Any(eval)) return true;
                }
                if (ObjectEffects != null)
                {
                    if (eval(this.ObjectEffects.Overall)) return true;
                    if (this.ObjectEffects.Specific != null && this.ObjectEffects.Specific.Any(eval)) return true;
                }
                if (Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null && this.Spells.Specific.Any(eval)) return true;
                }
                if (Scrolls != null)
                {
                    if (eval(this.Scrolls.Overall)) return true;
                    if (this.Scrolls.Specific != null && this.Scrolls.Specific.Any(eval)) return true;
                }
                if (Activators != null)
                {
                    if (eval(this.Activators.Overall)) return true;
                    if (this.Activators.Specific != null && this.Activators.Specific.Any(eval)) return true;
                }
                if (TalkingActivators != null)
                {
                    if (eval(this.TalkingActivators.Overall)) return true;
                    if (this.TalkingActivators.Specific != null && this.TalkingActivators.Specific.Any(eval)) return true;
                }
                if (Armors != null)
                {
                    if (eval(this.Armors.Overall)) return true;
                    if (this.Armors.Specific != null && this.Armors.Specific.Any(eval)) return true;
                }
                if (Books != null)
                {
                    if (eval(this.Books.Overall)) return true;
                    if (this.Books.Specific != null && this.Books.Specific.Any(eval)) return true;
                }
                if (Containers != null)
                {
                    if (eval(this.Containers.Overall)) return true;
                    if (this.Containers.Specific != null && this.Containers.Specific.Any(eval)) return true;
                }
                if (Doors != null)
                {
                    if (eval(this.Doors.Overall)) return true;
                    if (this.Doors.Specific != null && this.Doors.Specific.Any(eval)) return true;
                }
                if (Ingredients != null)
                {
                    if (eval(this.Ingredients.Overall)) return true;
                    if (this.Ingredients.Specific != null && this.Ingredients.Specific.Any(eval)) return true;
                }
                if (Lights != null)
                {
                    if (eval(this.Lights.Overall)) return true;
                    if (this.Lights.Specific != null && this.Lights.Specific.Any(eval)) return true;
                }
                if (MiscItems != null)
                {
                    if (eval(this.MiscItems.Overall)) return true;
                    if (this.MiscItems.Specific != null && this.MiscItems.Specific.Any(eval)) return true;
                }
                if (AlchemicalApparatuses != null)
                {
                    if (eval(this.AlchemicalApparatuses.Overall)) return true;
                    if (this.AlchemicalApparatuses.Specific != null && this.AlchemicalApparatuses.Specific.Any(eval)) return true;
                }
                if (Statics != null)
                {
                    if (eval(this.Statics.Overall)) return true;
                    if (this.Statics.Specific != null && this.Statics.Specific.Any(eval)) return true;
                }
                if (MoveableStatics != null)
                {
                    if (eval(this.MoveableStatics.Overall)) return true;
                    if (this.MoveableStatics.Specific != null && this.MoveableStatics.Specific.Any(eval)) return true;
                }
                if (Grasses != null)
                {
                    if (eval(this.Grasses.Overall)) return true;
                    if (this.Grasses.Specific != null && this.Grasses.Specific.Any(eval)) return true;
                }
                if (Trees != null)
                {
                    if (eval(this.Trees.Overall)) return true;
                    if (this.Trees.Specific != null && this.Trees.Specific.Any(eval)) return true;
                }
                if (Florae != null)
                {
                    if (eval(this.Florae.Overall)) return true;
                    if (this.Florae.Specific != null && this.Florae.Specific.Any(eval)) return true;
                }
                if (Furniture != null)
                {
                    if (eval(this.Furniture.Overall)) return true;
                    if (this.Furniture.Specific != null && this.Furniture.Specific.Any(eval)) return true;
                }
                if (Weapons != null)
                {
                    if (eval(this.Weapons.Overall)) return true;
                    if (this.Weapons.Specific != null && this.Weapons.Specific.Any(eval)) return true;
                }
                if (Ammunitions != null)
                {
                    if (eval(this.Ammunitions.Overall)) return true;
                    if (this.Ammunitions.Specific != null && this.Ammunitions.Specific.Any(eval)) return true;
                }
                if (Npcs != null)
                {
                    if (eval(this.Npcs.Overall)) return true;
                    if (this.Npcs.Specific != null && this.Npcs.Specific.Any(eval)) return true;
                }
                if (LeveledNpcs != null)
                {
                    if (eval(this.LeveledNpcs.Overall)) return true;
                    if (this.LeveledNpcs.Specific != null && this.LeveledNpcs.Specific.Any(eval)) return true;
                }
                if (Keys != null)
                {
                    if (eval(this.Keys.Overall)) return true;
                    if (this.Keys.Specific != null && this.Keys.Specific.Any(eval)) return true;
                }
                if (Ingestibles != null)
                {
                    if (eval(this.Ingestibles.Overall)) return true;
                    if (this.Ingestibles.Specific != null && this.Ingestibles.Specific.Any(eval)) return true;
                }
                if (IdleMarkers != null)
                {
                    if (eval(this.IdleMarkers.Overall)) return true;
                    if (this.IdleMarkers.Specific != null && this.IdleMarkers.Specific.Any(eval)) return true;
                }
                if (ConstructibleObjects != null)
                {
                    if (eval(this.ConstructibleObjects.Overall)) return true;
                    if (this.ConstructibleObjects.Specific != null && this.ConstructibleObjects.Specific.Any(eval)) return true;
                }
                if (Projectiles != null)
                {
                    if (eval(this.Projectiles.Overall)) return true;
                    if (this.Projectiles.Specific != null && this.Projectiles.Specific.Any(eval)) return true;
                }
                if (Hazards != null)
                {
                    if (eval(this.Hazards.Overall)) return true;
                    if (this.Hazards.Specific != null && this.Hazards.Specific.Any(eval)) return true;
                }
                if (SoulGems != null)
                {
                    if (eval(this.SoulGems.Overall)) return true;
                    if (this.SoulGems.Specific != null && this.SoulGems.Specific.Any(eval)) return true;
                }
                if (LeveledItems != null)
                {
                    if (eval(this.LeveledItems.Overall)) return true;
                    if (this.LeveledItems.Specific != null && this.LeveledItems.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SkyrimMod.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ModHeader = this.ModHeader == null ? null : new MaskItem<R, ModHeader.Mask<R>?>(eval(this.ModHeader.Overall), this.ModHeader.Specific?.Translate(eval));
                obj.GameSettings = this.GameSettings == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.GameSettings.Overall), this.GameSettings.Specific?.Translate(eval));
                obj.Keywords = this.Keywords == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Keywords.Overall), this.Keywords.Specific?.Translate(eval));
                obj.LocationReferenceTypes = this.LocationReferenceTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LocationReferenceTypes.Overall), this.LocationReferenceTypes.Specific?.Translate(eval));
                obj.Actions = this.Actions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Actions.Overall), this.Actions.Specific?.Translate(eval));
                obj.TextureSets = this.TextureSets == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.TextureSets.Overall), this.TextureSets.Specific?.Translate(eval));
                obj.Globals = this.Globals == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Globals.Overall), this.Globals.Specific?.Translate(eval));
                obj.Classes = this.Classes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Classes.Overall), this.Classes.Specific?.Translate(eval));
                obj.Factions = this.Factions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Factions.Overall), this.Factions.Specific?.Translate(eval));
                obj.HeadParts = this.HeadParts == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.HeadParts.Overall), this.HeadParts.Specific?.Translate(eval));
                obj.Hairs = this.Hairs == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Hairs.Overall), this.Hairs.Specific?.Translate(eval));
                obj.Eyes = this.Eyes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Eyes.Overall), this.Eyes.Specific?.Translate(eval));
                obj.Races = this.Races == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Races.Overall), this.Races.Specific?.Translate(eval));
                obj.SoundMarkers = this.SoundMarkers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.SoundMarkers.Overall), this.SoundMarkers.Specific?.Translate(eval));
                obj.AcousticSpaces = this.AcousticSpaces == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AcousticSpaces.Overall), this.AcousticSpaces.Specific?.Translate(eval));
                obj.MagicEffects = this.MagicEffects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MagicEffects.Overall), this.MagicEffects.Specific?.Translate(eval));
                obj.LandscapeTextures = this.LandscapeTextures == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LandscapeTextures.Overall), this.LandscapeTextures.Specific?.Translate(eval));
                obj.ObjectEffects = this.ObjectEffects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ObjectEffects.Overall), this.ObjectEffects.Specific?.Translate(eval));
                obj.Spells = this.Spells == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Spells.Overall), this.Spells.Specific?.Translate(eval));
                obj.Scrolls = this.Scrolls == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Scrolls.Overall), this.Scrolls.Specific?.Translate(eval));
                obj.Activators = this.Activators == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Activators.Overall), this.Activators.Specific?.Translate(eval));
                obj.TalkingActivators = this.TalkingActivators == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.TalkingActivators.Overall), this.TalkingActivators.Specific?.Translate(eval));
                obj.Armors = this.Armors == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Armors.Overall), this.Armors.Specific?.Translate(eval));
                obj.Books = this.Books == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Books.Overall), this.Books.Specific?.Translate(eval));
                obj.Containers = this.Containers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Containers.Overall), this.Containers.Specific?.Translate(eval));
                obj.Doors = this.Doors == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Doors.Overall), this.Doors.Specific?.Translate(eval));
                obj.Ingredients = this.Ingredients == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Ingredients.Overall), this.Ingredients.Specific?.Translate(eval));
                obj.Lights = this.Lights == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Lights.Overall), this.Lights.Specific?.Translate(eval));
                obj.MiscItems = this.MiscItems == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MiscItems.Overall), this.MiscItems.Specific?.Translate(eval));
                obj.AlchemicalApparatuses = this.AlchemicalApparatuses == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AlchemicalApparatuses.Overall), this.AlchemicalApparatuses.Specific?.Translate(eval));
                obj.Statics = this.Statics == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Statics.Overall), this.Statics.Specific?.Translate(eval));
                obj.MoveableStatics = this.MoveableStatics == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MoveableStatics.Overall), this.MoveableStatics.Specific?.Translate(eval));
                obj.Grasses = this.Grasses == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Grasses.Overall), this.Grasses.Specific?.Translate(eval));
                obj.Trees = this.Trees == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Trees.Overall), this.Trees.Specific?.Translate(eval));
                obj.Florae = this.Florae == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Florae.Overall), this.Florae.Specific?.Translate(eval));
                obj.Furniture = this.Furniture == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Furniture.Overall), this.Furniture.Specific?.Translate(eval));
                obj.Weapons = this.Weapons == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Weapons.Overall), this.Weapons.Specific?.Translate(eval));
                obj.Ammunitions = this.Ammunitions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Ammunitions.Overall), this.Ammunitions.Specific?.Translate(eval));
                obj.Npcs = this.Npcs == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Npcs.Overall), this.Npcs.Specific?.Translate(eval));
                obj.LeveledNpcs = this.LeveledNpcs == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LeveledNpcs.Overall), this.LeveledNpcs.Specific?.Translate(eval));
                obj.Keys = this.Keys == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Keys.Overall), this.Keys.Specific?.Translate(eval));
                obj.Ingestibles = this.Ingestibles == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Ingestibles.Overall), this.Ingestibles.Specific?.Translate(eval));
                obj.IdleMarkers = this.IdleMarkers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.IdleMarkers.Overall), this.IdleMarkers.Specific?.Translate(eval));
                obj.ConstructibleObjects = this.ConstructibleObjects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ConstructibleObjects.Overall), this.ConstructibleObjects.Specific?.Translate(eval));
                obj.Projectiles = this.Projectiles == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Projectiles.Overall), this.Projectiles.Specific?.Translate(eval));
                obj.Hazards = this.Hazards == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Hazards.Overall), this.Hazards.Specific?.Translate(eval));
                obj.SoulGems = this.SoulGems == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.SoulGems.Overall), this.SoulGems.Specific?.Translate(eval));
                obj.LeveledItems = this.LeveledItems == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LeveledItems.Overall), this.LeveledItems.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SkyrimMod.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SkyrimMod.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SkyrimMod.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ModHeader?.Overall ?? true)
                    {
                        ModHeader?.ToString(fg);
                    }
                    if (printMask?.GameSettings?.Overall ?? true)
                    {
                        GameSettings?.ToString(fg);
                    }
                    if (printMask?.Keywords?.Overall ?? true)
                    {
                        Keywords?.ToString(fg);
                    }
                    if (printMask?.LocationReferenceTypes?.Overall ?? true)
                    {
                        LocationReferenceTypes?.ToString(fg);
                    }
                    if (printMask?.Actions?.Overall ?? true)
                    {
                        Actions?.ToString(fg);
                    }
                    if (printMask?.TextureSets?.Overall ?? true)
                    {
                        TextureSets?.ToString(fg);
                    }
                    if (printMask?.Globals?.Overall ?? true)
                    {
                        Globals?.ToString(fg);
                    }
                    if (printMask?.Classes?.Overall ?? true)
                    {
                        Classes?.ToString(fg);
                    }
                    if (printMask?.Factions?.Overall ?? true)
                    {
                        Factions?.ToString(fg);
                    }
                    if (printMask?.HeadParts?.Overall ?? true)
                    {
                        HeadParts?.ToString(fg);
                    }
                    if (printMask?.Hairs?.Overall ?? true)
                    {
                        Hairs?.ToString(fg);
                    }
                    if (printMask?.Eyes?.Overall ?? true)
                    {
                        Eyes?.ToString(fg);
                    }
                    if (printMask?.Races?.Overall ?? true)
                    {
                        Races?.ToString(fg);
                    }
                    if (printMask?.SoundMarkers?.Overall ?? true)
                    {
                        SoundMarkers?.ToString(fg);
                    }
                    if (printMask?.AcousticSpaces?.Overall ?? true)
                    {
                        AcousticSpaces?.ToString(fg);
                    }
                    if (printMask?.MagicEffects?.Overall ?? true)
                    {
                        MagicEffects?.ToString(fg);
                    }
                    if (printMask?.LandscapeTextures?.Overall ?? true)
                    {
                        LandscapeTextures?.ToString(fg);
                    }
                    if (printMask?.ObjectEffects?.Overall ?? true)
                    {
                        ObjectEffects?.ToString(fg);
                    }
                    if (printMask?.Spells?.Overall ?? true)
                    {
                        Spells?.ToString(fg);
                    }
                    if (printMask?.Scrolls?.Overall ?? true)
                    {
                        Scrolls?.ToString(fg);
                    }
                    if (printMask?.Activators?.Overall ?? true)
                    {
                        Activators?.ToString(fg);
                    }
                    if (printMask?.TalkingActivators?.Overall ?? true)
                    {
                        TalkingActivators?.ToString(fg);
                    }
                    if (printMask?.Armors?.Overall ?? true)
                    {
                        Armors?.ToString(fg);
                    }
                    if (printMask?.Books?.Overall ?? true)
                    {
                        Books?.ToString(fg);
                    }
                    if (printMask?.Containers?.Overall ?? true)
                    {
                        Containers?.ToString(fg);
                    }
                    if (printMask?.Doors?.Overall ?? true)
                    {
                        Doors?.ToString(fg);
                    }
                    if (printMask?.Ingredients?.Overall ?? true)
                    {
                        Ingredients?.ToString(fg);
                    }
                    if (printMask?.Lights?.Overall ?? true)
                    {
                        Lights?.ToString(fg);
                    }
                    if (printMask?.MiscItems?.Overall ?? true)
                    {
                        MiscItems?.ToString(fg);
                    }
                    if (printMask?.AlchemicalApparatuses?.Overall ?? true)
                    {
                        AlchemicalApparatuses?.ToString(fg);
                    }
                    if (printMask?.Statics?.Overall ?? true)
                    {
                        Statics?.ToString(fg);
                    }
                    if (printMask?.MoveableStatics?.Overall ?? true)
                    {
                        MoveableStatics?.ToString(fg);
                    }
                    if (printMask?.Grasses?.Overall ?? true)
                    {
                        Grasses?.ToString(fg);
                    }
                    if (printMask?.Trees?.Overall ?? true)
                    {
                        Trees?.ToString(fg);
                    }
                    if (printMask?.Florae?.Overall ?? true)
                    {
                        Florae?.ToString(fg);
                    }
                    if (printMask?.Furniture?.Overall ?? true)
                    {
                        Furniture?.ToString(fg);
                    }
                    if (printMask?.Weapons?.Overall ?? true)
                    {
                        Weapons?.ToString(fg);
                    }
                    if (printMask?.Ammunitions?.Overall ?? true)
                    {
                        Ammunitions?.ToString(fg);
                    }
                    if (printMask?.Npcs?.Overall ?? true)
                    {
                        Npcs?.ToString(fg);
                    }
                    if (printMask?.LeveledNpcs?.Overall ?? true)
                    {
                        LeveledNpcs?.ToString(fg);
                    }
                    if (printMask?.Keys?.Overall ?? true)
                    {
                        Keys?.ToString(fg);
                    }
                    if (printMask?.Ingestibles?.Overall ?? true)
                    {
                        Ingestibles?.ToString(fg);
                    }
                    if (printMask?.IdleMarkers?.Overall ?? true)
                    {
                        IdleMarkers?.ToString(fg);
                    }
                    if (printMask?.ConstructibleObjects?.Overall ?? true)
                    {
                        ConstructibleObjects?.ToString(fg);
                    }
                    if (printMask?.Projectiles?.Overall ?? true)
                    {
                        Projectiles?.ToString(fg);
                    }
                    if (printMask?.Hazards?.Overall ?? true)
                    {
                        Hazards?.ToString(fg);
                    }
                    if (printMask?.SoulGems?.Overall ?? true)
                    {
                        SoulGems?.ToString(fg);
                    }
                    if (printMask?.LeveledItems?.Overall ?? true)
                    {
                        LeveledItems?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, ModHeader.ErrorMask?>? ModHeader;
            public MaskItem<Exception?, Group.ErrorMask<GameSetting.ErrorMask>?>? GameSettings;
            public MaskItem<Exception?, Group.ErrorMask<Keyword.ErrorMask>?>? Keywords;
            public MaskItem<Exception?, Group.ErrorMask<LocationReferenceType.ErrorMask>?>? LocationReferenceTypes;
            public MaskItem<Exception?, Group.ErrorMask<ActionRecord.ErrorMask>?>? Actions;
            public MaskItem<Exception?, Group.ErrorMask<TextureSet.ErrorMask>?>? TextureSets;
            public MaskItem<Exception?, Group.ErrorMask<Global.ErrorMask>?>? Globals;
            public MaskItem<Exception?, Group.ErrorMask<Class.ErrorMask>?>? Classes;
            public MaskItem<Exception?, Group.ErrorMask<Faction.ErrorMask>?>? Factions;
            public MaskItem<Exception?, Group.ErrorMask<HeadPart.ErrorMask>?>? HeadParts;
            public MaskItem<Exception?, Group.ErrorMask<Hair.ErrorMask>?>? Hairs;
            public MaskItem<Exception?, Group.ErrorMask<Eyes.ErrorMask>?>? Eyes;
            public MaskItem<Exception?, Group.ErrorMask<Race.ErrorMask>?>? Races;
            public MaskItem<Exception?, Group.ErrorMask<SoundMarker.ErrorMask>?>? SoundMarkers;
            public MaskItem<Exception?, Group.ErrorMask<AcousticSpace.ErrorMask>?>? AcousticSpaces;
            public MaskItem<Exception?, Group.ErrorMask<MagicEffect.ErrorMask>?>? MagicEffects;
            public MaskItem<Exception?, Group.ErrorMask<LandscapeTexture.ErrorMask>?>? LandscapeTextures;
            public MaskItem<Exception?, Group.ErrorMask<ObjectEffect.ErrorMask>?>? ObjectEffects;
            public MaskItem<Exception?, Group.ErrorMask<Spell.ErrorMask>?>? Spells;
            public MaskItem<Exception?, Group.ErrorMask<Scroll.ErrorMask>?>? Scrolls;
            public MaskItem<Exception?, Group.ErrorMask<Activator.ErrorMask>?>? Activators;
            public MaskItem<Exception?, Group.ErrorMask<TalkingActivator.ErrorMask>?>? TalkingActivators;
            public MaskItem<Exception?, Group.ErrorMask<Armor.ErrorMask>?>? Armors;
            public MaskItem<Exception?, Group.ErrorMask<Book.ErrorMask>?>? Books;
            public MaskItem<Exception?, Group.ErrorMask<Container.ErrorMask>?>? Containers;
            public MaskItem<Exception?, Group.ErrorMask<Door.ErrorMask>?>? Doors;
            public MaskItem<Exception?, Group.ErrorMask<Ingredient.ErrorMask>?>? Ingredients;
            public MaskItem<Exception?, Group.ErrorMask<Light.ErrorMask>?>? Lights;
            public MaskItem<Exception?, Group.ErrorMask<MiscItem.ErrorMask>?>? MiscItems;
            public MaskItem<Exception?, Group.ErrorMask<AlchemicalApparatus.ErrorMask>?>? AlchemicalApparatuses;
            public MaskItem<Exception?, Group.ErrorMask<Static.ErrorMask>?>? Statics;
            public MaskItem<Exception?, Group.ErrorMask<MoveableStatic.ErrorMask>?>? MoveableStatics;
            public MaskItem<Exception?, Group.ErrorMask<Grass.ErrorMask>?>? Grasses;
            public MaskItem<Exception?, Group.ErrorMask<Tree.ErrorMask>?>? Trees;
            public MaskItem<Exception?, Group.ErrorMask<Flora.ErrorMask>?>? Florae;
            public MaskItem<Exception?, Group.ErrorMask<Furniture.ErrorMask>?>? Furniture;
            public MaskItem<Exception?, Group.ErrorMask<Weapon.ErrorMask>?>? Weapons;
            public MaskItem<Exception?, Group.ErrorMask<Ammunition.ErrorMask>?>? Ammunitions;
            public MaskItem<Exception?, Group.ErrorMask<Npc.ErrorMask>?>? Npcs;
            public MaskItem<Exception?, Group.ErrorMask<LeveledNpc.ErrorMask>?>? LeveledNpcs;
            public MaskItem<Exception?, Group.ErrorMask<Key.ErrorMask>?>? Keys;
            public MaskItem<Exception?, Group.ErrorMask<Ingestible.ErrorMask>?>? Ingestibles;
            public MaskItem<Exception?, Group.ErrorMask<IdleMarker.ErrorMask>?>? IdleMarkers;
            public MaskItem<Exception?, Group.ErrorMask<ConstructibleObject.ErrorMask>?>? ConstructibleObjects;
            public MaskItem<Exception?, Group.ErrorMask<Projectile.ErrorMask>?>? Projectiles;
            public MaskItem<Exception?, Group.ErrorMask<Hazard.ErrorMask>?>? Hazards;
            public MaskItem<Exception?, Group.ErrorMask<SoulGem.ErrorMask>?>? SoulGems;
            public MaskItem<Exception?, Group.ErrorMask<LeveledItem.ErrorMask>?>? LeveledItems;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimMod_FieldIndex.ModHeader:
                        return ModHeader;
                    case SkyrimMod_FieldIndex.GameSettings:
                        return GameSettings;
                    case SkyrimMod_FieldIndex.Keywords:
                        return Keywords;
                    case SkyrimMod_FieldIndex.LocationReferenceTypes:
                        return LocationReferenceTypes;
                    case SkyrimMod_FieldIndex.Actions:
                        return Actions;
                    case SkyrimMod_FieldIndex.TextureSets:
                        return TextureSets;
                    case SkyrimMod_FieldIndex.Globals:
                        return Globals;
                    case SkyrimMod_FieldIndex.Classes:
                        return Classes;
                    case SkyrimMod_FieldIndex.Factions:
                        return Factions;
                    case SkyrimMod_FieldIndex.HeadParts:
                        return HeadParts;
                    case SkyrimMod_FieldIndex.Hairs:
                        return Hairs;
                    case SkyrimMod_FieldIndex.Eyes:
                        return Eyes;
                    case SkyrimMod_FieldIndex.Races:
                        return Races;
                    case SkyrimMod_FieldIndex.SoundMarkers:
                        return SoundMarkers;
                    case SkyrimMod_FieldIndex.AcousticSpaces:
                        return AcousticSpaces;
                    case SkyrimMod_FieldIndex.MagicEffects:
                        return MagicEffects;
                    case SkyrimMod_FieldIndex.LandscapeTextures:
                        return LandscapeTextures;
                    case SkyrimMod_FieldIndex.ObjectEffects:
                        return ObjectEffects;
                    case SkyrimMod_FieldIndex.Spells:
                        return Spells;
                    case SkyrimMod_FieldIndex.Scrolls:
                        return Scrolls;
                    case SkyrimMod_FieldIndex.Activators:
                        return Activators;
                    case SkyrimMod_FieldIndex.TalkingActivators:
                        return TalkingActivators;
                    case SkyrimMod_FieldIndex.Armors:
                        return Armors;
                    case SkyrimMod_FieldIndex.Books:
                        return Books;
                    case SkyrimMod_FieldIndex.Containers:
                        return Containers;
                    case SkyrimMod_FieldIndex.Doors:
                        return Doors;
                    case SkyrimMod_FieldIndex.Ingredients:
                        return Ingredients;
                    case SkyrimMod_FieldIndex.Lights:
                        return Lights;
                    case SkyrimMod_FieldIndex.MiscItems:
                        return MiscItems;
                    case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                        return AlchemicalApparatuses;
                    case SkyrimMod_FieldIndex.Statics:
                        return Statics;
                    case SkyrimMod_FieldIndex.MoveableStatics:
                        return MoveableStatics;
                    case SkyrimMod_FieldIndex.Grasses:
                        return Grasses;
                    case SkyrimMod_FieldIndex.Trees:
                        return Trees;
                    case SkyrimMod_FieldIndex.Florae:
                        return Florae;
                    case SkyrimMod_FieldIndex.Furniture:
                        return Furniture;
                    case SkyrimMod_FieldIndex.Weapons:
                        return Weapons;
                    case SkyrimMod_FieldIndex.Ammunitions:
                        return Ammunitions;
                    case SkyrimMod_FieldIndex.Npcs:
                        return Npcs;
                    case SkyrimMod_FieldIndex.LeveledNpcs:
                        return LeveledNpcs;
                    case SkyrimMod_FieldIndex.Keys:
                        return Keys;
                    case SkyrimMod_FieldIndex.Ingestibles:
                        return Ingestibles;
                    case SkyrimMod_FieldIndex.IdleMarkers:
                        return IdleMarkers;
                    case SkyrimMod_FieldIndex.ConstructibleObjects:
                        return ConstructibleObjects;
                    case SkyrimMod_FieldIndex.Projectiles:
                        return Projectiles;
                    case SkyrimMod_FieldIndex.Hazards:
                        return Hazards;
                    case SkyrimMod_FieldIndex.SoulGems:
                        return SoulGems;
                    case SkyrimMod_FieldIndex.LeveledItems:
                        return LeveledItems;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimMod_FieldIndex.ModHeader:
                        this.ModHeader = new MaskItem<Exception?, ModHeader.ErrorMask?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.GameSettings:
                        this.GameSettings = new MaskItem<Exception?, Group.ErrorMask<GameSetting.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, Group.ErrorMask<Keyword.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = new MaskItem<Exception?, Group.ErrorMask<LocationReferenceType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Actions:
                        this.Actions = new MaskItem<Exception?, Group.ErrorMask<ActionRecord.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.TextureSets:
                        this.TextureSets = new MaskItem<Exception?, Group.ErrorMask<TextureSet.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Globals:
                        this.Globals = new MaskItem<Exception?, Group.ErrorMask<Global.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Classes:
                        this.Classes = new MaskItem<Exception?, Group.ErrorMask<Class.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, Group.ErrorMask<Faction.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.HeadParts:
                        this.HeadParts = new MaskItem<Exception?, Group.ErrorMask<HeadPart.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Hairs:
                        this.Hairs = new MaskItem<Exception?, Group.ErrorMask<Hair.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, Group.ErrorMask<Eyes.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Races:
                        this.Races = new MaskItem<Exception?, Group.ErrorMask<Race.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.SoundMarkers:
                        this.SoundMarkers = new MaskItem<Exception?, Group.ErrorMask<SoundMarker.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.AcousticSpaces:
                        this.AcousticSpaces = new MaskItem<Exception?, Group.ErrorMask<AcousticSpace.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MagicEffects:
                        this.MagicEffects = new MaskItem<Exception?, Group.ErrorMask<MagicEffect.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LandscapeTextures:
                        this.LandscapeTextures = new MaskItem<Exception?, Group.ErrorMask<LandscapeTexture.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ObjectEffects:
                        this.ObjectEffects = new MaskItem<Exception?, Group.ErrorMask<ObjectEffect.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, Group.ErrorMask<Spell.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Scrolls:
                        this.Scrolls = new MaskItem<Exception?, Group.ErrorMask<Scroll.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Activators:
                        this.Activators = new MaskItem<Exception?, Group.ErrorMask<Activator.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.TalkingActivators:
                        this.TalkingActivators = new MaskItem<Exception?, Group.ErrorMask<TalkingActivator.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Armors:
                        this.Armors = new MaskItem<Exception?, Group.ErrorMask<Armor.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Books:
                        this.Books = new MaskItem<Exception?, Group.ErrorMask<Book.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Containers:
                        this.Containers = new MaskItem<Exception?, Group.ErrorMask<Container.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Doors:
                        this.Doors = new MaskItem<Exception?, Group.ErrorMask<Door.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Ingredients:
                        this.Ingredients = new MaskItem<Exception?, Group.ErrorMask<Ingredient.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Lights:
                        this.Lights = new MaskItem<Exception?, Group.ErrorMask<Light.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MiscItems:
                        this.MiscItems = new MaskItem<Exception?, Group.ErrorMask<MiscItem.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                        this.AlchemicalApparatuses = new MaskItem<Exception?, Group.ErrorMask<AlchemicalApparatus.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Statics:
                        this.Statics = new MaskItem<Exception?, Group.ErrorMask<Static.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MoveableStatics:
                        this.MoveableStatics = new MaskItem<Exception?, Group.ErrorMask<MoveableStatic.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Grasses:
                        this.Grasses = new MaskItem<Exception?, Group.ErrorMask<Grass.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Trees:
                        this.Trees = new MaskItem<Exception?, Group.ErrorMask<Tree.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Florae:
                        this.Florae = new MaskItem<Exception?, Group.ErrorMask<Flora.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Furniture:
                        this.Furniture = new MaskItem<Exception?, Group.ErrorMask<Furniture.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Weapons:
                        this.Weapons = new MaskItem<Exception?, Group.ErrorMask<Weapon.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Ammunitions:
                        this.Ammunitions = new MaskItem<Exception?, Group.ErrorMask<Ammunition.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Npcs:
                        this.Npcs = new MaskItem<Exception?, Group.ErrorMask<Npc.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LeveledNpcs:
                        this.LeveledNpcs = new MaskItem<Exception?, Group.ErrorMask<LeveledNpc.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Keys:
                        this.Keys = new MaskItem<Exception?, Group.ErrorMask<Key.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Ingestibles:
                        this.Ingestibles = new MaskItem<Exception?, Group.ErrorMask<Ingestible.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.IdleMarkers:
                        this.IdleMarkers = new MaskItem<Exception?, Group.ErrorMask<IdleMarker.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ConstructibleObjects:
                        this.ConstructibleObjects = new MaskItem<Exception?, Group.ErrorMask<ConstructibleObject.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Projectiles:
                        this.Projectiles = new MaskItem<Exception?, Group.ErrorMask<Projectile.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Hazards:
                        this.Hazards = new MaskItem<Exception?, Group.ErrorMask<Hazard.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.SoulGems:
                        this.SoulGems = new MaskItem<Exception?, Group.ErrorMask<SoulGem.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LeveledItems:
                        this.LeveledItems = new MaskItem<Exception?, Group.ErrorMask<LeveledItem.ErrorMask>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimMod_FieldIndex.ModHeader:
                        this.ModHeader = (MaskItem<Exception?, ModHeader.ErrorMask?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.GameSettings:
                        this.GameSettings = (MaskItem<Exception?, Group.ErrorMask<GameSetting.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, Group.ErrorMask<Keyword.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = (MaskItem<Exception?, Group.ErrorMask<LocationReferenceType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Actions:
                        this.Actions = (MaskItem<Exception?, Group.ErrorMask<ActionRecord.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.TextureSets:
                        this.TextureSets = (MaskItem<Exception?, Group.ErrorMask<TextureSet.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Globals:
                        this.Globals = (MaskItem<Exception?, Group.ErrorMask<Global.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Classes:
                        this.Classes = (MaskItem<Exception?, Group.ErrorMask<Class.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, Group.ErrorMask<Faction.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.HeadParts:
                        this.HeadParts = (MaskItem<Exception?, Group.ErrorMask<HeadPart.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Hairs:
                        this.Hairs = (MaskItem<Exception?, Group.ErrorMask<Hair.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, Group.ErrorMask<Eyes.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Races:
                        this.Races = (MaskItem<Exception?, Group.ErrorMask<Race.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.SoundMarkers:
                        this.SoundMarkers = (MaskItem<Exception?, Group.ErrorMask<SoundMarker.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.AcousticSpaces:
                        this.AcousticSpaces = (MaskItem<Exception?, Group.ErrorMask<AcousticSpace.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MagicEffects:
                        this.MagicEffects = (MaskItem<Exception?, Group.ErrorMask<MagicEffect.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LandscapeTextures:
                        this.LandscapeTextures = (MaskItem<Exception?, Group.ErrorMask<LandscapeTexture.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ObjectEffects:
                        this.ObjectEffects = (MaskItem<Exception?, Group.ErrorMask<ObjectEffect.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, Group.ErrorMask<Spell.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Scrolls:
                        this.Scrolls = (MaskItem<Exception?, Group.ErrorMask<Scroll.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Activators:
                        this.Activators = (MaskItem<Exception?, Group.ErrorMask<Activator.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.TalkingActivators:
                        this.TalkingActivators = (MaskItem<Exception?, Group.ErrorMask<TalkingActivator.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Armors:
                        this.Armors = (MaskItem<Exception?, Group.ErrorMask<Armor.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Books:
                        this.Books = (MaskItem<Exception?, Group.ErrorMask<Book.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Containers:
                        this.Containers = (MaskItem<Exception?, Group.ErrorMask<Container.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Doors:
                        this.Doors = (MaskItem<Exception?, Group.ErrorMask<Door.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Ingredients:
                        this.Ingredients = (MaskItem<Exception?, Group.ErrorMask<Ingredient.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Lights:
                        this.Lights = (MaskItem<Exception?, Group.ErrorMask<Light.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MiscItems:
                        this.MiscItems = (MaskItem<Exception?, Group.ErrorMask<MiscItem.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                        this.AlchemicalApparatuses = (MaskItem<Exception?, Group.ErrorMask<AlchemicalApparatus.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Statics:
                        this.Statics = (MaskItem<Exception?, Group.ErrorMask<Static.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MoveableStatics:
                        this.MoveableStatics = (MaskItem<Exception?, Group.ErrorMask<MoveableStatic.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Grasses:
                        this.Grasses = (MaskItem<Exception?, Group.ErrorMask<Grass.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Trees:
                        this.Trees = (MaskItem<Exception?, Group.ErrorMask<Tree.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Florae:
                        this.Florae = (MaskItem<Exception?, Group.ErrorMask<Flora.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Furniture:
                        this.Furniture = (MaskItem<Exception?, Group.ErrorMask<Furniture.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Weapons:
                        this.Weapons = (MaskItem<Exception?, Group.ErrorMask<Weapon.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Ammunitions:
                        this.Ammunitions = (MaskItem<Exception?, Group.ErrorMask<Ammunition.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Npcs:
                        this.Npcs = (MaskItem<Exception?, Group.ErrorMask<Npc.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LeveledNpcs:
                        this.LeveledNpcs = (MaskItem<Exception?, Group.ErrorMask<LeveledNpc.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Keys:
                        this.Keys = (MaskItem<Exception?, Group.ErrorMask<Key.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Ingestibles:
                        this.Ingestibles = (MaskItem<Exception?, Group.ErrorMask<Ingestible.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.IdleMarkers:
                        this.IdleMarkers = (MaskItem<Exception?, Group.ErrorMask<IdleMarker.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ConstructibleObjects:
                        this.ConstructibleObjects = (MaskItem<Exception?, Group.ErrorMask<ConstructibleObject.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Projectiles:
                        this.Projectiles = (MaskItem<Exception?, Group.ErrorMask<Projectile.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Hazards:
                        this.Hazards = (MaskItem<Exception?, Group.ErrorMask<Hazard.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.SoulGems:
                        this.SoulGems = (MaskItem<Exception?, Group.ErrorMask<SoulGem.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LeveledItems:
                        this.LeveledItems = (MaskItem<Exception?, Group.ErrorMask<LeveledItem.ErrorMask>?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ModHeader != null) return true;
                if (GameSettings != null) return true;
                if (Keywords != null) return true;
                if (LocationReferenceTypes != null) return true;
                if (Actions != null) return true;
                if (TextureSets != null) return true;
                if (Globals != null) return true;
                if (Classes != null) return true;
                if (Factions != null) return true;
                if (HeadParts != null) return true;
                if (Hairs != null) return true;
                if (Eyes != null) return true;
                if (Races != null) return true;
                if (SoundMarkers != null) return true;
                if (AcousticSpaces != null) return true;
                if (MagicEffects != null) return true;
                if (LandscapeTextures != null) return true;
                if (ObjectEffects != null) return true;
                if (Spells != null) return true;
                if (Scrolls != null) return true;
                if (Activators != null) return true;
                if (TalkingActivators != null) return true;
                if (Armors != null) return true;
                if (Books != null) return true;
                if (Containers != null) return true;
                if (Doors != null) return true;
                if (Ingredients != null) return true;
                if (Lights != null) return true;
                if (MiscItems != null) return true;
                if (AlchemicalApparatuses != null) return true;
                if (Statics != null) return true;
                if (MoveableStatics != null) return true;
                if (Grasses != null) return true;
                if (Trees != null) return true;
                if (Florae != null) return true;
                if (Furniture != null) return true;
                if (Weapons != null) return true;
                if (Ammunitions != null) return true;
                if (Npcs != null) return true;
                if (LeveledNpcs != null) return true;
                if (Keys != null) return true;
                if (Ingestibles != null) return true;
                if (IdleMarkers != null) return true;
                if (ConstructibleObjects != null) return true;
                if (Projectiles != null) return true;
                if (Hazards != null) return true;
                if (SoulGems != null) return true;
                if (LeveledItems != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                ModHeader?.ToString(fg);
                GameSettings?.ToString(fg);
                Keywords?.ToString(fg);
                LocationReferenceTypes?.ToString(fg);
                Actions?.ToString(fg);
                TextureSets?.ToString(fg);
                Globals?.ToString(fg);
                Classes?.ToString(fg);
                Factions?.ToString(fg);
                HeadParts?.ToString(fg);
                Hairs?.ToString(fg);
                Eyes?.ToString(fg);
                Races?.ToString(fg);
                SoundMarkers?.ToString(fg);
                AcousticSpaces?.ToString(fg);
                MagicEffects?.ToString(fg);
                LandscapeTextures?.ToString(fg);
                ObjectEffects?.ToString(fg);
                Spells?.ToString(fg);
                Scrolls?.ToString(fg);
                Activators?.ToString(fg);
                TalkingActivators?.ToString(fg);
                Armors?.ToString(fg);
                Books?.ToString(fg);
                Containers?.ToString(fg);
                Doors?.ToString(fg);
                Ingredients?.ToString(fg);
                Lights?.ToString(fg);
                MiscItems?.ToString(fg);
                AlchemicalApparatuses?.ToString(fg);
                Statics?.ToString(fg);
                MoveableStatics?.ToString(fg);
                Grasses?.ToString(fg);
                Trees?.ToString(fg);
                Florae?.ToString(fg);
                Furniture?.ToString(fg);
                Weapons?.ToString(fg);
                Ammunitions?.ToString(fg);
                Npcs?.ToString(fg);
                LeveledNpcs?.ToString(fg);
                Keys?.ToString(fg);
                Ingestibles?.ToString(fg);
                IdleMarkers?.ToString(fg);
                ConstructibleObjects?.ToString(fg);
                Projectiles?.ToString(fg);
                Hazards?.ToString(fg);
                SoulGems?.ToString(fg);
                LeveledItems?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ModHeader = this.ModHeader.Combine(rhs.ModHeader, (l, r) => l.Combine(r));
                ret.GameSettings = this.GameSettings.Combine(rhs.GameSettings, (l, r) => l.Combine(r));
                ret.Keywords = this.Keywords.Combine(rhs.Keywords, (l, r) => l.Combine(r));
                ret.LocationReferenceTypes = this.LocationReferenceTypes.Combine(rhs.LocationReferenceTypes, (l, r) => l.Combine(r));
                ret.Actions = this.Actions.Combine(rhs.Actions, (l, r) => l.Combine(r));
                ret.TextureSets = this.TextureSets.Combine(rhs.TextureSets, (l, r) => l.Combine(r));
                ret.Globals = this.Globals.Combine(rhs.Globals, (l, r) => l.Combine(r));
                ret.Classes = this.Classes.Combine(rhs.Classes, (l, r) => l.Combine(r));
                ret.Factions = this.Factions.Combine(rhs.Factions, (l, r) => l.Combine(r));
                ret.HeadParts = this.HeadParts.Combine(rhs.HeadParts, (l, r) => l.Combine(r));
                ret.Hairs = this.Hairs.Combine(rhs.Hairs, (l, r) => l.Combine(r));
                ret.Eyes = this.Eyes.Combine(rhs.Eyes, (l, r) => l.Combine(r));
                ret.Races = this.Races.Combine(rhs.Races, (l, r) => l.Combine(r));
                ret.SoundMarkers = this.SoundMarkers.Combine(rhs.SoundMarkers, (l, r) => l.Combine(r));
                ret.AcousticSpaces = this.AcousticSpaces.Combine(rhs.AcousticSpaces, (l, r) => l.Combine(r));
                ret.MagicEffects = this.MagicEffects.Combine(rhs.MagicEffects, (l, r) => l.Combine(r));
                ret.LandscapeTextures = this.LandscapeTextures.Combine(rhs.LandscapeTextures, (l, r) => l.Combine(r));
                ret.ObjectEffects = this.ObjectEffects.Combine(rhs.ObjectEffects, (l, r) => l.Combine(r));
                ret.Spells = this.Spells.Combine(rhs.Spells, (l, r) => l.Combine(r));
                ret.Scrolls = this.Scrolls.Combine(rhs.Scrolls, (l, r) => l.Combine(r));
                ret.Activators = this.Activators.Combine(rhs.Activators, (l, r) => l.Combine(r));
                ret.TalkingActivators = this.TalkingActivators.Combine(rhs.TalkingActivators, (l, r) => l.Combine(r));
                ret.Armors = this.Armors.Combine(rhs.Armors, (l, r) => l.Combine(r));
                ret.Books = this.Books.Combine(rhs.Books, (l, r) => l.Combine(r));
                ret.Containers = this.Containers.Combine(rhs.Containers, (l, r) => l.Combine(r));
                ret.Doors = this.Doors.Combine(rhs.Doors, (l, r) => l.Combine(r));
                ret.Ingredients = this.Ingredients.Combine(rhs.Ingredients, (l, r) => l.Combine(r));
                ret.Lights = this.Lights.Combine(rhs.Lights, (l, r) => l.Combine(r));
                ret.MiscItems = this.MiscItems.Combine(rhs.MiscItems, (l, r) => l.Combine(r));
                ret.AlchemicalApparatuses = this.AlchemicalApparatuses.Combine(rhs.AlchemicalApparatuses, (l, r) => l.Combine(r));
                ret.Statics = this.Statics.Combine(rhs.Statics, (l, r) => l.Combine(r));
                ret.MoveableStatics = this.MoveableStatics.Combine(rhs.MoveableStatics, (l, r) => l.Combine(r));
                ret.Grasses = this.Grasses.Combine(rhs.Grasses, (l, r) => l.Combine(r));
                ret.Trees = this.Trees.Combine(rhs.Trees, (l, r) => l.Combine(r));
                ret.Florae = this.Florae.Combine(rhs.Florae, (l, r) => l.Combine(r));
                ret.Furniture = this.Furniture.Combine(rhs.Furniture, (l, r) => l.Combine(r));
                ret.Weapons = this.Weapons.Combine(rhs.Weapons, (l, r) => l.Combine(r));
                ret.Ammunitions = this.Ammunitions.Combine(rhs.Ammunitions, (l, r) => l.Combine(r));
                ret.Npcs = this.Npcs.Combine(rhs.Npcs, (l, r) => l.Combine(r));
                ret.LeveledNpcs = this.LeveledNpcs.Combine(rhs.LeveledNpcs, (l, r) => l.Combine(r));
                ret.Keys = this.Keys.Combine(rhs.Keys, (l, r) => l.Combine(r));
                ret.Ingestibles = this.Ingestibles.Combine(rhs.Ingestibles, (l, r) => l.Combine(r));
                ret.IdleMarkers = this.IdleMarkers.Combine(rhs.IdleMarkers, (l, r) => l.Combine(r));
                ret.ConstructibleObjects = this.ConstructibleObjects.Combine(rhs.ConstructibleObjects, (l, r) => l.Combine(r));
                ret.Projectiles = this.Projectiles.Combine(rhs.Projectiles, (l, r) => l.Combine(r));
                ret.Hazards = this.Hazards.Combine(rhs.Hazards, (l, r) => l.Combine(r));
                ret.SoulGems = this.SoulGems.Combine(rhs.SoulGems, (l, r) => l.Combine(r));
                ret.LeveledItems = this.LeveledItems.Combine(rhs.LeveledItems, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public MaskItem<bool, ModHeader.TranslationMask?> ModHeader;
            public MaskItem<bool, Group.TranslationMask<GameSetting.TranslationMask>?> GameSettings;
            public MaskItem<bool, Group.TranslationMask<Keyword.TranslationMask>?> Keywords;
            public MaskItem<bool, Group.TranslationMask<LocationReferenceType.TranslationMask>?> LocationReferenceTypes;
            public MaskItem<bool, Group.TranslationMask<ActionRecord.TranslationMask>?> Actions;
            public MaskItem<bool, Group.TranslationMask<TextureSet.TranslationMask>?> TextureSets;
            public MaskItem<bool, Group.TranslationMask<Global.TranslationMask>?> Globals;
            public MaskItem<bool, Group.TranslationMask<Class.TranslationMask>?> Classes;
            public MaskItem<bool, Group.TranslationMask<Faction.TranslationMask>?> Factions;
            public MaskItem<bool, Group.TranslationMask<HeadPart.TranslationMask>?> HeadParts;
            public MaskItem<bool, Group.TranslationMask<Hair.TranslationMask>?> Hairs;
            public MaskItem<bool, Group.TranslationMask<Eyes.TranslationMask>?> Eyes;
            public MaskItem<bool, Group.TranslationMask<Race.TranslationMask>?> Races;
            public MaskItem<bool, Group.TranslationMask<SoundMarker.TranslationMask>?> SoundMarkers;
            public MaskItem<bool, Group.TranslationMask<AcousticSpace.TranslationMask>?> AcousticSpaces;
            public MaskItem<bool, Group.TranslationMask<MagicEffect.TranslationMask>?> MagicEffects;
            public MaskItem<bool, Group.TranslationMask<LandscapeTexture.TranslationMask>?> LandscapeTextures;
            public MaskItem<bool, Group.TranslationMask<ObjectEffect.TranslationMask>?> ObjectEffects;
            public MaskItem<bool, Group.TranslationMask<Spell.TranslationMask>?> Spells;
            public MaskItem<bool, Group.TranslationMask<Scroll.TranslationMask>?> Scrolls;
            public MaskItem<bool, Group.TranslationMask<Activator.TranslationMask>?> Activators;
            public MaskItem<bool, Group.TranslationMask<TalkingActivator.TranslationMask>?> TalkingActivators;
            public MaskItem<bool, Group.TranslationMask<Armor.TranslationMask>?> Armors;
            public MaskItem<bool, Group.TranslationMask<Book.TranslationMask>?> Books;
            public MaskItem<bool, Group.TranslationMask<Container.TranslationMask>?> Containers;
            public MaskItem<bool, Group.TranslationMask<Door.TranslationMask>?> Doors;
            public MaskItem<bool, Group.TranslationMask<Ingredient.TranslationMask>?> Ingredients;
            public MaskItem<bool, Group.TranslationMask<Light.TranslationMask>?> Lights;
            public MaskItem<bool, Group.TranslationMask<MiscItem.TranslationMask>?> MiscItems;
            public MaskItem<bool, Group.TranslationMask<AlchemicalApparatus.TranslationMask>?> AlchemicalApparatuses;
            public MaskItem<bool, Group.TranslationMask<Static.TranslationMask>?> Statics;
            public MaskItem<bool, Group.TranslationMask<MoveableStatic.TranslationMask>?> MoveableStatics;
            public MaskItem<bool, Group.TranslationMask<Grass.TranslationMask>?> Grasses;
            public MaskItem<bool, Group.TranslationMask<Tree.TranslationMask>?> Trees;
            public MaskItem<bool, Group.TranslationMask<Flora.TranslationMask>?> Florae;
            public MaskItem<bool, Group.TranslationMask<Furniture.TranslationMask>?> Furniture;
            public MaskItem<bool, Group.TranslationMask<Weapon.TranslationMask>?> Weapons;
            public MaskItem<bool, Group.TranslationMask<Ammunition.TranslationMask>?> Ammunitions;
            public MaskItem<bool, Group.TranslationMask<Npc.TranslationMask>?> Npcs;
            public MaskItem<bool, Group.TranslationMask<LeveledNpc.TranslationMask>?> LeveledNpcs;
            public MaskItem<bool, Group.TranslationMask<Key.TranslationMask>?> Keys;
            public MaskItem<bool, Group.TranslationMask<Ingestible.TranslationMask>?> Ingestibles;
            public MaskItem<bool, Group.TranslationMask<IdleMarker.TranslationMask>?> IdleMarkers;
            public MaskItem<bool, Group.TranslationMask<ConstructibleObject.TranslationMask>?> ConstructibleObjects;
            public MaskItem<bool, Group.TranslationMask<Projectile.TranslationMask>?> Projectiles;
            public MaskItem<bool, Group.TranslationMask<Hazard.TranslationMask>?> Hazards;
            public MaskItem<bool, Group.TranslationMask<SoulGem.TranslationMask>?> SoulGems;
            public MaskItem<bool, Group.TranslationMask<LeveledItem.TranslationMask>?> LeveledItems;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.ModHeader = new MaskItem<bool, ModHeader.TranslationMask?>(defaultOn, null);
                this.GameSettings = new MaskItem<bool, Group.TranslationMask<GameSetting.TranslationMask>?>(defaultOn, null);
                this.Keywords = new MaskItem<bool, Group.TranslationMask<Keyword.TranslationMask>?>(defaultOn, null);
                this.LocationReferenceTypes = new MaskItem<bool, Group.TranslationMask<LocationReferenceType.TranslationMask>?>(defaultOn, null);
                this.Actions = new MaskItem<bool, Group.TranslationMask<ActionRecord.TranslationMask>?>(defaultOn, null);
                this.TextureSets = new MaskItem<bool, Group.TranslationMask<TextureSet.TranslationMask>?>(defaultOn, null);
                this.Globals = new MaskItem<bool, Group.TranslationMask<Global.TranslationMask>?>(defaultOn, null);
                this.Classes = new MaskItem<bool, Group.TranslationMask<Class.TranslationMask>?>(defaultOn, null);
                this.Factions = new MaskItem<bool, Group.TranslationMask<Faction.TranslationMask>?>(defaultOn, null);
                this.HeadParts = new MaskItem<bool, Group.TranslationMask<HeadPart.TranslationMask>?>(defaultOn, null);
                this.Hairs = new MaskItem<bool, Group.TranslationMask<Hair.TranslationMask>?>(defaultOn, null);
                this.Eyes = new MaskItem<bool, Group.TranslationMask<Eyes.TranslationMask>?>(defaultOn, null);
                this.Races = new MaskItem<bool, Group.TranslationMask<Race.TranslationMask>?>(defaultOn, null);
                this.SoundMarkers = new MaskItem<bool, Group.TranslationMask<SoundMarker.TranslationMask>?>(defaultOn, null);
                this.AcousticSpaces = new MaskItem<bool, Group.TranslationMask<AcousticSpace.TranslationMask>?>(defaultOn, null);
                this.MagicEffects = new MaskItem<bool, Group.TranslationMask<MagicEffect.TranslationMask>?>(defaultOn, null);
                this.LandscapeTextures = new MaskItem<bool, Group.TranslationMask<LandscapeTexture.TranslationMask>?>(defaultOn, null);
                this.ObjectEffects = new MaskItem<bool, Group.TranslationMask<ObjectEffect.TranslationMask>?>(defaultOn, null);
                this.Spells = new MaskItem<bool, Group.TranslationMask<Spell.TranslationMask>?>(defaultOn, null);
                this.Scrolls = new MaskItem<bool, Group.TranslationMask<Scroll.TranslationMask>?>(defaultOn, null);
                this.Activators = new MaskItem<bool, Group.TranslationMask<Activator.TranslationMask>?>(defaultOn, null);
                this.TalkingActivators = new MaskItem<bool, Group.TranslationMask<TalkingActivator.TranslationMask>?>(defaultOn, null);
                this.Armors = new MaskItem<bool, Group.TranslationMask<Armor.TranslationMask>?>(defaultOn, null);
                this.Books = new MaskItem<bool, Group.TranslationMask<Book.TranslationMask>?>(defaultOn, null);
                this.Containers = new MaskItem<bool, Group.TranslationMask<Container.TranslationMask>?>(defaultOn, null);
                this.Doors = new MaskItem<bool, Group.TranslationMask<Door.TranslationMask>?>(defaultOn, null);
                this.Ingredients = new MaskItem<bool, Group.TranslationMask<Ingredient.TranslationMask>?>(defaultOn, null);
                this.Lights = new MaskItem<bool, Group.TranslationMask<Light.TranslationMask>?>(defaultOn, null);
                this.MiscItems = new MaskItem<bool, Group.TranslationMask<MiscItem.TranslationMask>?>(defaultOn, null);
                this.AlchemicalApparatuses = new MaskItem<bool, Group.TranslationMask<AlchemicalApparatus.TranslationMask>?>(defaultOn, null);
                this.Statics = new MaskItem<bool, Group.TranslationMask<Static.TranslationMask>?>(defaultOn, null);
                this.MoveableStatics = new MaskItem<bool, Group.TranslationMask<MoveableStatic.TranslationMask>?>(defaultOn, null);
                this.Grasses = new MaskItem<bool, Group.TranslationMask<Grass.TranslationMask>?>(defaultOn, null);
                this.Trees = new MaskItem<bool, Group.TranslationMask<Tree.TranslationMask>?>(defaultOn, null);
                this.Florae = new MaskItem<bool, Group.TranslationMask<Flora.TranslationMask>?>(defaultOn, null);
                this.Furniture = new MaskItem<bool, Group.TranslationMask<Furniture.TranslationMask>?>(defaultOn, null);
                this.Weapons = new MaskItem<bool, Group.TranslationMask<Weapon.TranslationMask>?>(defaultOn, null);
                this.Ammunitions = new MaskItem<bool, Group.TranslationMask<Ammunition.TranslationMask>?>(defaultOn, null);
                this.Npcs = new MaskItem<bool, Group.TranslationMask<Npc.TranslationMask>?>(defaultOn, null);
                this.LeveledNpcs = new MaskItem<bool, Group.TranslationMask<LeveledNpc.TranslationMask>?>(defaultOn, null);
                this.Keys = new MaskItem<bool, Group.TranslationMask<Key.TranslationMask>?>(defaultOn, null);
                this.Ingestibles = new MaskItem<bool, Group.TranslationMask<Ingestible.TranslationMask>?>(defaultOn, null);
                this.IdleMarkers = new MaskItem<bool, Group.TranslationMask<IdleMarker.TranslationMask>?>(defaultOn, null);
                this.ConstructibleObjects = new MaskItem<bool, Group.TranslationMask<ConstructibleObject.TranslationMask>?>(defaultOn, null);
                this.Projectiles = new MaskItem<bool, Group.TranslationMask<Projectile.TranslationMask>?>(defaultOn, null);
                this.Hazards = new MaskItem<bool, Group.TranslationMask<Hazard.TranslationMask>?>(defaultOn, null);
                this.SoulGems = new MaskItem<bool, Group.TranslationMask<SoulGem.TranslationMask>?>(defaultOn, null);
                this.LeveledItems = new MaskItem<bool, Group.TranslationMask<LeveledItem.TranslationMask>?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ModHeader?.Overall ?? true, ModHeader?.Specific?.GetCrystal()));
                ret.Add((GameSettings?.Overall ?? true, GameSettings?.Specific?.GetCrystal()));
                ret.Add((Keywords?.Overall ?? true, Keywords?.Specific?.GetCrystal()));
                ret.Add((LocationReferenceTypes?.Overall ?? true, LocationReferenceTypes?.Specific?.GetCrystal()));
                ret.Add((Actions?.Overall ?? true, Actions?.Specific?.GetCrystal()));
                ret.Add((TextureSets?.Overall ?? true, TextureSets?.Specific?.GetCrystal()));
                ret.Add((Globals?.Overall ?? true, Globals?.Specific?.GetCrystal()));
                ret.Add((Classes?.Overall ?? true, Classes?.Specific?.GetCrystal()));
                ret.Add((Factions?.Overall ?? true, Factions?.Specific?.GetCrystal()));
                ret.Add((HeadParts?.Overall ?? true, HeadParts?.Specific?.GetCrystal()));
                ret.Add((Hairs?.Overall ?? true, Hairs?.Specific?.GetCrystal()));
                ret.Add((Eyes?.Overall ?? true, Eyes?.Specific?.GetCrystal()));
                ret.Add((Races?.Overall ?? true, Races?.Specific?.GetCrystal()));
                ret.Add((SoundMarkers?.Overall ?? true, SoundMarkers?.Specific?.GetCrystal()));
                ret.Add((AcousticSpaces?.Overall ?? true, AcousticSpaces?.Specific?.GetCrystal()));
                ret.Add((MagicEffects?.Overall ?? true, MagicEffects?.Specific?.GetCrystal()));
                ret.Add((LandscapeTextures?.Overall ?? true, LandscapeTextures?.Specific?.GetCrystal()));
                ret.Add((ObjectEffects?.Overall ?? true, ObjectEffects?.Specific?.GetCrystal()));
                ret.Add((Spells?.Overall ?? true, Spells?.Specific?.GetCrystal()));
                ret.Add((Scrolls?.Overall ?? true, Scrolls?.Specific?.GetCrystal()));
                ret.Add((Activators?.Overall ?? true, Activators?.Specific?.GetCrystal()));
                ret.Add((TalkingActivators?.Overall ?? true, TalkingActivators?.Specific?.GetCrystal()));
                ret.Add((Armors?.Overall ?? true, Armors?.Specific?.GetCrystal()));
                ret.Add((Books?.Overall ?? true, Books?.Specific?.GetCrystal()));
                ret.Add((Containers?.Overall ?? true, Containers?.Specific?.GetCrystal()));
                ret.Add((Doors?.Overall ?? true, Doors?.Specific?.GetCrystal()));
                ret.Add((Ingredients?.Overall ?? true, Ingredients?.Specific?.GetCrystal()));
                ret.Add((Lights?.Overall ?? true, Lights?.Specific?.GetCrystal()));
                ret.Add((MiscItems?.Overall ?? true, MiscItems?.Specific?.GetCrystal()));
                ret.Add((AlchemicalApparatuses?.Overall ?? true, AlchemicalApparatuses?.Specific?.GetCrystal()));
                ret.Add((Statics?.Overall ?? true, Statics?.Specific?.GetCrystal()));
                ret.Add((MoveableStatics?.Overall ?? true, MoveableStatics?.Specific?.GetCrystal()));
                ret.Add((Grasses?.Overall ?? true, Grasses?.Specific?.GetCrystal()));
                ret.Add((Trees?.Overall ?? true, Trees?.Specific?.GetCrystal()));
                ret.Add((Florae?.Overall ?? true, Florae?.Specific?.GetCrystal()));
                ret.Add((Furniture?.Overall ?? true, Furniture?.Specific?.GetCrystal()));
                ret.Add((Weapons?.Overall ?? true, Weapons?.Specific?.GetCrystal()));
                ret.Add((Ammunitions?.Overall ?? true, Ammunitions?.Specific?.GetCrystal()));
                ret.Add((Npcs?.Overall ?? true, Npcs?.Specific?.GetCrystal()));
                ret.Add((LeveledNpcs?.Overall ?? true, LeveledNpcs?.Specific?.GetCrystal()));
                ret.Add((Keys?.Overall ?? true, Keys?.Specific?.GetCrystal()));
                ret.Add((Ingestibles?.Overall ?? true, Ingestibles?.Specific?.GetCrystal()));
                ret.Add((IdleMarkers?.Overall ?? true, IdleMarkers?.Specific?.GetCrystal()));
                ret.Add((ConstructibleObjects?.Overall ?? true, ConstructibleObjects?.Specific?.GetCrystal()));
                ret.Add((Projectiles?.Overall ?? true, Projectiles?.Specific?.GetCrystal()));
                ret.Add((Hazards?.Overall ?? true, Hazards?.Specific?.GetCrystal()));
                ret.Add((SoulGems?.Overall ?? true, SoulGems?.Specific?.GetCrystal()));
                ret.Add((LeveledItems?.Overall ?? true, LeveledItems?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = SkyrimMod_Registration.TriggeringRecordType;
        public override GameMode GameMode => GameMode.Skyrim;
        IReadOnlyCache<T, FormKey> IModGetter.GetGroupGetter<T>() => this.GetGroupGetter<T>();
        ICache<T, FormKey> IMod.GetGroup<T>() => this.GetGroup<T>();
        void IModGetter.WriteToBinary(string path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinaryParallel(string path, BinaryWriteParameters? param) => this.WriteToBinaryParallel(path, param);
        public SkyrimMod(ModKey modKey)
            : base(modKey)
        {
            _GameSettings_Object = new Group<GameSetting>(this);
            _Keywords_Object = new Group<Keyword>(this);
            _LocationReferenceTypes_Object = new Group<LocationReferenceType>(this);
            _Actions_Object = new Group<ActionRecord>(this);
            _TextureSets_Object = new Group<TextureSet>(this);
            _Globals_Object = new Group<Global>(this);
            _Classes_Object = new Group<Class>(this);
            _Factions_Object = new Group<Faction>(this);
            _HeadParts_Object = new Group<HeadPart>(this);
            _Hairs_Object = new Group<Hair>(this);
            _Eyes_Object = new Group<Eyes>(this);
            _Races_Object = new Group<Race>(this);
            _SoundMarkers_Object = new Group<SoundMarker>(this);
            _AcousticSpaces_Object = new Group<AcousticSpace>(this);
            _MagicEffects_Object = new Group<MagicEffect>(this);
            _LandscapeTextures_Object = new Group<LandscapeTexture>(this);
            _ObjectEffects_Object = new Group<ObjectEffect>(this);
            _Spells_Object = new Group<Spell>(this);
            _Scrolls_Object = new Group<Scroll>(this);
            _Activators_Object = new Group<Activator>(this);
            _TalkingActivators_Object = new Group<TalkingActivator>(this);
            _Armors_Object = new Group<Armor>(this);
            _Books_Object = new Group<Book>(this);
            _Containers_Object = new Group<Container>(this);
            _Doors_Object = new Group<Door>(this);
            _Ingredients_Object = new Group<Ingredient>(this);
            _Lights_Object = new Group<Light>(this);
            _MiscItems_Object = new Group<MiscItem>(this);
            _AlchemicalApparatuses_Object = new Group<AlchemicalApparatus>(this);
            _Statics_Object = new Group<Static>(this);
            _MoveableStatics_Object = new Group<MoveableStatic>(this);
            _Grasses_Object = new Group<Grass>(this);
            _Trees_Object = new Group<Tree>(this);
            _Florae_Object = new Group<Flora>(this);
            _Furniture_Object = new Group<Furniture>(this);
            _Weapons_Object = new Group<Weapon>(this);
            _Ammunitions_Object = new Group<Ammunition>(this);
            _Npcs_Object = new Group<Npc>(this);
            _LeveledNpcs_Object = new Group<LeveledNpc>(this);
            _Keys_Object = new Group<Key>(this);
            _Ingestibles_Object = new Group<Ingestible>(this);
            _IdleMarkers_Object = new Group<IdleMarker>(this);
            _ConstructibleObjects_Object = new Group<ConstructibleObject>(this);
            _Projectiles_Object = new Group<Projectile>(this);
            _Hazards_Object = new Group<Hazard>(this);
            _SoulGems_Object = new Group<SoulGem>(this);
            _LeveledItems_Object = new Group<LeveledItem>(this);
        }
        public void AddRecords(
            SkyrimMod rhsMod,
            GroupMask? mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(rhsMod.GameSettings.RecordCache.Items);
            }
            if (mask?.Keywords ?? true)
            {
                this.Keywords.RecordCache.Set(rhsMod.Keywords.RecordCache.Items);
            }
            if (mask?.LocationReferenceTypes ?? true)
            {
                this.LocationReferenceTypes.RecordCache.Set(rhsMod.LocationReferenceTypes.RecordCache.Items);
            }
            if (mask?.Actions ?? true)
            {
                this.Actions.RecordCache.Set(rhsMod.Actions.RecordCache.Items);
            }
            if (mask?.TextureSets ?? true)
            {
                this.TextureSets.RecordCache.Set(rhsMod.TextureSets.RecordCache.Items);
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.RecordCache.Set(rhsMod.Globals.RecordCache.Items);
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.RecordCache.Set(rhsMod.Classes.RecordCache.Items);
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.RecordCache.Set(rhsMod.Factions.RecordCache.Items);
            }
            if (mask?.HeadParts ?? true)
            {
                this.HeadParts.RecordCache.Set(rhsMod.HeadParts.RecordCache.Items);
            }
            if (mask?.Hairs ?? true)
            {
                this.Hairs.RecordCache.Set(rhsMod.Hairs.RecordCache.Items);
            }
            if (mask?.Eyes ?? true)
            {
                this.Eyes.RecordCache.Set(rhsMod.Eyes.RecordCache.Items);
            }
            if (mask?.Races ?? true)
            {
                this.Races.RecordCache.Set(rhsMod.Races.RecordCache.Items);
            }
            if (mask?.SoundMarkers ?? true)
            {
                this.SoundMarkers.RecordCache.Set(rhsMod.SoundMarkers.RecordCache.Items);
            }
            if (mask?.AcousticSpaces ?? true)
            {
                this.AcousticSpaces.RecordCache.Set(rhsMod.AcousticSpaces.RecordCache.Items);
            }
            if (mask?.MagicEffects ?? true)
            {
                this.MagicEffects.RecordCache.Set(rhsMod.MagicEffects.RecordCache.Items);
            }
            if (mask?.LandscapeTextures ?? true)
            {
                this.LandscapeTextures.RecordCache.Set(rhsMod.LandscapeTextures.RecordCache.Items);
            }
            if (mask?.ObjectEffects ?? true)
            {
                this.ObjectEffects.RecordCache.Set(rhsMod.ObjectEffects.RecordCache.Items);
            }
            if (mask?.Spells ?? true)
            {
                this.Spells.RecordCache.Set(rhsMod.Spells.RecordCache.Items);
            }
            if (mask?.Scrolls ?? true)
            {
                this.Scrolls.RecordCache.Set(rhsMod.Scrolls.RecordCache.Items);
            }
            if (mask?.Activators ?? true)
            {
                this.Activators.RecordCache.Set(rhsMod.Activators.RecordCache.Items);
            }
            if (mask?.TalkingActivators ?? true)
            {
                this.TalkingActivators.RecordCache.Set(rhsMod.TalkingActivators.RecordCache.Items);
            }
            if (mask?.Armors ?? true)
            {
                this.Armors.RecordCache.Set(rhsMod.Armors.RecordCache.Items);
            }
            if (mask?.Books ?? true)
            {
                this.Books.RecordCache.Set(rhsMod.Books.RecordCache.Items);
            }
            if (mask?.Containers ?? true)
            {
                this.Containers.RecordCache.Set(rhsMod.Containers.RecordCache.Items);
            }
            if (mask?.Doors ?? true)
            {
                this.Doors.RecordCache.Set(rhsMod.Doors.RecordCache.Items);
            }
            if (mask?.Ingredients ?? true)
            {
                this.Ingredients.RecordCache.Set(rhsMod.Ingredients.RecordCache.Items);
            }
            if (mask?.Lights ?? true)
            {
                this.Lights.RecordCache.Set(rhsMod.Lights.RecordCache.Items);
            }
            if (mask?.MiscItems ?? true)
            {
                this.MiscItems.RecordCache.Set(rhsMod.MiscItems.RecordCache.Items);
            }
            if (mask?.AlchemicalApparatuses ?? true)
            {
                this.AlchemicalApparatuses.RecordCache.Set(rhsMod.AlchemicalApparatuses.RecordCache.Items);
            }
            if (mask?.Statics ?? true)
            {
                this.Statics.RecordCache.Set(rhsMod.Statics.RecordCache.Items);
            }
            if (mask?.MoveableStatics ?? true)
            {
                this.MoveableStatics.RecordCache.Set(rhsMod.MoveableStatics.RecordCache.Items);
            }
            if (mask?.Grasses ?? true)
            {
                this.Grasses.RecordCache.Set(rhsMod.Grasses.RecordCache.Items);
            }
            if (mask?.Trees ?? true)
            {
                this.Trees.RecordCache.Set(rhsMod.Trees.RecordCache.Items);
            }
            if (mask?.Florae ?? true)
            {
                this.Florae.RecordCache.Set(rhsMod.Florae.RecordCache.Items);
            }
            if (mask?.Furniture ?? true)
            {
                this.Furniture.RecordCache.Set(rhsMod.Furniture.RecordCache.Items);
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.RecordCache.Set(rhsMod.Weapons.RecordCache.Items);
            }
            if (mask?.Ammunitions ?? true)
            {
                this.Ammunitions.RecordCache.Set(rhsMod.Ammunitions.RecordCache.Items);
            }
            if (mask?.Npcs ?? true)
            {
                this.Npcs.RecordCache.Set(rhsMod.Npcs.RecordCache.Items);
            }
            if (mask?.LeveledNpcs ?? true)
            {
                this.LeveledNpcs.RecordCache.Set(rhsMod.LeveledNpcs.RecordCache.Items);
            }
            if (mask?.Keys ?? true)
            {
                this.Keys.RecordCache.Set(rhsMod.Keys.RecordCache.Items);
            }
            if (mask?.Ingestibles ?? true)
            {
                this.Ingestibles.RecordCache.Set(rhsMod.Ingestibles.RecordCache.Items);
            }
            if (mask?.IdleMarkers ?? true)
            {
                this.IdleMarkers.RecordCache.Set(rhsMod.IdleMarkers.RecordCache.Items);
            }
            if (mask?.ConstructibleObjects ?? true)
            {
                this.ConstructibleObjects.RecordCache.Set(rhsMod.ConstructibleObjects.RecordCache.Items);
            }
            if (mask?.Projectiles ?? true)
            {
                this.Projectiles.RecordCache.Set(rhsMod.Projectiles.RecordCache.Items);
            }
            if (mask?.Hazards ?? true)
            {
                this.Hazards.RecordCache.Set(rhsMod.Hazards.RecordCache.Items);
            }
            if (mask?.SoulGems ?? true)
            {
                this.SoulGems.RecordCache.Set(rhsMod.SoulGems.RecordCache.Items);
            }
            if (mask?.LeveledItems ?? true)
            {
                this.LeveledItems.RecordCache.Set(rhsMod.LeveledItems.RecordCache.Items);
            }
        }

        public Dictionary<FormKey, IMajorRecordCommon> CopyInDuplicate(
            SkyrimMod rhs,
            GroupMask? mask = null)
        {
            var duppedRecords = new List<(IMajorRecordCommon Record, FormKey OriginalFormKey)>();
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(
                    rhs.GameSettings.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<GameSetting>());
            }
            if (mask?.Keywords ?? true)
            {
                this.Keywords.RecordCache.Set(
                    rhs.Keywords.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Keyword>());
            }
            if (mask?.LocationReferenceTypes ?? true)
            {
                this.LocationReferenceTypes.RecordCache.Set(
                    rhs.LocationReferenceTypes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LocationReferenceType>());
            }
            if (mask?.Actions ?? true)
            {
                this.Actions.RecordCache.Set(
                    rhs.Actions.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ActionRecord>());
            }
            if (mask?.TextureSets ?? true)
            {
                this.TextureSets.RecordCache.Set(
                    rhs.TextureSets.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<TextureSet>());
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.RecordCache.Set(
                    rhs.Globals.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Global>());
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.RecordCache.Set(
                    rhs.Classes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Class>());
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.RecordCache.Set(
                    rhs.Factions.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Faction>());
            }
            if (mask?.HeadParts ?? true)
            {
                this.HeadParts.RecordCache.Set(
                    rhs.HeadParts.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<HeadPart>());
            }
            if (mask?.Hairs ?? true)
            {
                this.Hairs.RecordCache.Set(
                    rhs.Hairs.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Hair>());
            }
            if (mask?.Eyes ?? true)
            {
                this.Eyes.RecordCache.Set(
                    rhs.Eyes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Eyes>());
            }
            if (mask?.Races ?? true)
            {
                this.Races.RecordCache.Set(
                    rhs.Races.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Race>());
            }
            if (mask?.SoundMarkers ?? true)
            {
                this.SoundMarkers.RecordCache.Set(
                    rhs.SoundMarkers.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SoundMarker>());
            }
            if (mask?.AcousticSpaces ?? true)
            {
                this.AcousticSpaces.RecordCache.Set(
                    rhs.AcousticSpaces.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<AcousticSpace>());
            }
            if (mask?.MagicEffects ?? true)
            {
                this.MagicEffects.RecordCache.Set(
                    rhs.MagicEffects.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<MagicEffect>());
            }
            if (mask?.LandscapeTextures ?? true)
            {
                this.LandscapeTextures.RecordCache.Set(
                    rhs.LandscapeTextures.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LandscapeTexture>());
            }
            if (mask?.ObjectEffects ?? true)
            {
                this.ObjectEffects.RecordCache.Set(
                    rhs.ObjectEffects.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ObjectEffect>());
            }
            if (mask?.Spells ?? true)
            {
                this.Spells.RecordCache.Set(
                    rhs.Spells.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Spell>());
            }
            if (mask?.Scrolls ?? true)
            {
                this.Scrolls.RecordCache.Set(
                    rhs.Scrolls.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Scroll>());
            }
            if (mask?.Activators ?? true)
            {
                this.Activators.RecordCache.Set(
                    rhs.Activators.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Activator>());
            }
            if (mask?.TalkingActivators ?? true)
            {
                this.TalkingActivators.RecordCache.Set(
                    rhs.TalkingActivators.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<TalkingActivator>());
            }
            if (mask?.Armors ?? true)
            {
                this.Armors.RecordCache.Set(
                    rhs.Armors.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Armor>());
            }
            if (mask?.Books ?? true)
            {
                this.Books.RecordCache.Set(
                    rhs.Books.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Book>());
            }
            if (mask?.Containers ?? true)
            {
                this.Containers.RecordCache.Set(
                    rhs.Containers.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Container>());
            }
            if (mask?.Doors ?? true)
            {
                this.Doors.RecordCache.Set(
                    rhs.Doors.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Door>());
            }
            if (mask?.Ingredients ?? true)
            {
                this.Ingredients.RecordCache.Set(
                    rhs.Ingredients.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Ingredient>());
            }
            if (mask?.Lights ?? true)
            {
                this.Lights.RecordCache.Set(
                    rhs.Lights.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Light>());
            }
            if (mask?.MiscItems ?? true)
            {
                this.MiscItems.RecordCache.Set(
                    rhs.MiscItems.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<MiscItem>());
            }
            if (mask?.AlchemicalApparatuses ?? true)
            {
                this.AlchemicalApparatuses.RecordCache.Set(
                    rhs.AlchemicalApparatuses.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<AlchemicalApparatus>());
            }
            if (mask?.Statics ?? true)
            {
                this.Statics.RecordCache.Set(
                    rhs.Statics.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Static>());
            }
            if (mask?.MoveableStatics ?? true)
            {
                this.MoveableStatics.RecordCache.Set(
                    rhs.MoveableStatics.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<MoveableStatic>());
            }
            if (mask?.Grasses ?? true)
            {
                this.Grasses.RecordCache.Set(
                    rhs.Grasses.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Grass>());
            }
            if (mask?.Trees ?? true)
            {
                this.Trees.RecordCache.Set(
                    rhs.Trees.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Tree>());
            }
            if (mask?.Florae ?? true)
            {
                this.Florae.RecordCache.Set(
                    rhs.Florae.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Flora>());
            }
            if (mask?.Furniture ?? true)
            {
                this.Furniture.RecordCache.Set(
                    rhs.Furniture.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Furniture>());
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.RecordCache.Set(
                    rhs.Weapons.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Weapon>());
            }
            if (mask?.Ammunitions ?? true)
            {
                this.Ammunitions.RecordCache.Set(
                    rhs.Ammunitions.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Ammunition>());
            }
            if (mask?.Npcs ?? true)
            {
                this.Npcs.RecordCache.Set(
                    rhs.Npcs.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Npc>());
            }
            if (mask?.LeveledNpcs ?? true)
            {
                this.LeveledNpcs.RecordCache.Set(
                    rhs.LeveledNpcs.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LeveledNpc>());
            }
            if (mask?.Keys ?? true)
            {
                this.Keys.RecordCache.Set(
                    rhs.Keys.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Key>());
            }
            if (mask?.Ingestibles ?? true)
            {
                this.Ingestibles.RecordCache.Set(
                    rhs.Ingestibles.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Ingestible>());
            }
            if (mask?.IdleMarkers ?? true)
            {
                this.IdleMarkers.RecordCache.Set(
                    rhs.IdleMarkers.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<IdleMarker>());
            }
            if (mask?.ConstructibleObjects ?? true)
            {
                this.ConstructibleObjects.RecordCache.Set(
                    rhs.ConstructibleObjects.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ConstructibleObject>());
            }
            if (mask?.Projectiles ?? true)
            {
                this.Projectiles.RecordCache.Set(
                    rhs.Projectiles.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Projectile>());
            }
            if (mask?.Hazards ?? true)
            {
                this.Hazards.RecordCache.Set(
                    rhs.Hazards.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Hazard>());
            }
            if (mask?.SoulGems ?? true)
            {
                this.SoulGems.RecordCache.Set(
                    rhs.SoulGems.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SoulGem>());
            }
            if (mask?.LeveledItems ?? true)
            {
                this.LeveledItems.RecordCache.Set(
                    rhs.LeveledItems.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LeveledItem>());
            }
            var router = new Dictionary<FormKey, IMajorRecordCommon>();
            router.Set(duppedRecords.Select(dup => new KeyValuePair<FormKey, IMajorRecordCommon>(dup.OriginalFormKey, dup.Record)));
            var mapping = new Dictionary<FormKey, FormKey>();
            var package = this.CreateLinkCache();
            foreach (var rec in router.Values)
            {
                rec.RemapLinks(mapping);
            }
            return router;
        }

        public override void SyncRecordCount()
        {
            this.ModHeader.Stats.NumRecords = GetRecordCount();
        }

        public int GetRecordCount()
        {
            int count = this.EnumerateMajorRecords().Count();
            count += GameSettings.RecordCache.Count > 0 ? 1 : 0;
            count += Keywords.RecordCache.Count > 0 ? 1 : 0;
            count += LocationReferenceTypes.RecordCache.Count > 0 ? 1 : 0;
            count += Actions.RecordCache.Count > 0 ? 1 : 0;
            count += TextureSets.RecordCache.Count > 0 ? 1 : 0;
            count += Globals.RecordCache.Count > 0 ? 1 : 0;
            count += Classes.RecordCache.Count > 0 ? 1 : 0;
            count += Factions.RecordCache.Count > 0 ? 1 : 0;
            count += HeadParts.RecordCache.Count > 0 ? 1 : 0;
            count += Hairs.RecordCache.Count > 0 ? 1 : 0;
            count += Eyes.RecordCache.Count > 0 ? 1 : 0;
            count += Races.RecordCache.Count > 0 ? 1 : 0;
            count += SoundMarkers.RecordCache.Count > 0 ? 1 : 0;
            count += AcousticSpaces.RecordCache.Count > 0 ? 1 : 0;
            count += MagicEffects.RecordCache.Count > 0 ? 1 : 0;
            count += LandscapeTextures.RecordCache.Count > 0 ? 1 : 0;
            count += ObjectEffects.RecordCache.Count > 0 ? 1 : 0;
            count += Spells.RecordCache.Count > 0 ? 1 : 0;
            count += Scrolls.RecordCache.Count > 0 ? 1 : 0;
            count += Activators.RecordCache.Count > 0 ? 1 : 0;
            count += TalkingActivators.RecordCache.Count > 0 ? 1 : 0;
            count += Armors.RecordCache.Count > 0 ? 1 : 0;
            count += Books.RecordCache.Count > 0 ? 1 : 0;
            count += Containers.RecordCache.Count > 0 ? 1 : 0;
            count += Doors.RecordCache.Count > 0 ? 1 : 0;
            count += Ingredients.RecordCache.Count > 0 ? 1 : 0;
            count += Lights.RecordCache.Count > 0 ? 1 : 0;
            count += MiscItems.RecordCache.Count > 0 ? 1 : 0;
            count += AlchemicalApparatuses.RecordCache.Count > 0 ? 1 : 0;
            count += Statics.RecordCache.Count > 0 ? 1 : 0;
            count += MoveableStatics.RecordCache.Count > 0 ? 1 : 0;
            count += Grasses.RecordCache.Count > 0 ? 1 : 0;
            count += Trees.RecordCache.Count > 0 ? 1 : 0;
            count += Florae.RecordCache.Count > 0 ? 1 : 0;
            count += Furniture.RecordCache.Count > 0 ? 1 : 0;
            count += Weapons.RecordCache.Count > 0 ? 1 : 0;
            count += Ammunitions.RecordCache.Count > 0 ? 1 : 0;
            count += Npcs.RecordCache.Count > 0 ? 1 : 0;
            count += LeveledNpcs.RecordCache.Count > 0 ? 1 : 0;
            count += Keys.RecordCache.Count > 0 ? 1 : 0;
            count += Ingestibles.RecordCache.Count > 0 ? 1 : 0;
            count += IdleMarkers.RecordCache.Count > 0 ? 1 : 0;
            count += ConstructibleObjects.RecordCache.Count > 0 ? 1 : 0;
            count += Projectiles.RecordCache.Count > 0 ? 1 : 0;
            count += Hazards.RecordCache.Count > 0 ? 1 : 0;
            count += SoulGems.RecordCache.Count > 0 ? 1 : 0;
            count += LeveledItems.RecordCache.Count > 0 ? 1 : 0;
            GetCustomRecordCount((customCount) => count += customCount);
            return count;
        }

        partial void GetCustomRecordCount(Action<int> setter);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => SkyrimModCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => SkyrimModCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SkyrimModCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SkyrimModCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static SkyrimMod CreateFromBinary(
            MutagenFrame frame,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            return CreateFromBinary(
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: null);
        }

        public static SkyrimMod CreateFromBinary(
            MutagenFrame frame,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter = null,
            GroupMask? importMask = null)
        {
            var ret = new SkyrimMod(modKey);
            ((SkyrimModSetterCommon)((ISkyrimModGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        public static SkyrimMod CreateFromBinary(
            string path,
            ModKey? modKeyOverride = null,
            GroupMask? importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader)
                {
                    RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, GameMode.Skyrim))
                };
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                return CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static SkyrimMod CreateFromBinary(
            string path,
            ErrorMaskBuilder? errorMask,
            ModKey? modKeyOverride = null,
            GroupMask? importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader)
                {
                    RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, GameMode.Skyrim))
                };
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                return CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    recordTypeConverter: null);
            }
        }

        public static SkyrimMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            RecordInfoCache infoCache,
            GroupMask? importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader)
                {
                    RecordInfoCache = infoCache
                };
                return CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static SkyrimMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            RecordInfoCache infoCache,
            ErrorMaskBuilder? errorMask,
            GroupMask? importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader)
                {
                    RecordInfoCache = infoCache
                };
                return CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    recordTypeConverter: null);
            }
        }

        #endregion

        public static ISkyrimModDisposableGetter CreateFromBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            ModKey modKey)
        {
            return SkyrimModBinaryOverlay.SkyrimModFactory(
                stream: new MutagenMemoryReadStream(
                    data: bytes,
                    metaData: GameMode.Skyrim,
                    infoCache: new RecordInfoCache(() => new MutagenMemoryReadStream(bytes, GameMode.Skyrim))),
                modKey: modKey,
                shouldDispose: false);
        }

        public static ISkyrimModDisposableGetter CreateFromBinaryOverlay(
            string path,
            ModKey? modKeyOverride = null)
        {
            return SkyrimModBinaryOverlay.SkyrimModFactory(
                stream: new MutagenBinaryReadStream(
                    path: path,
                    metaData: GameMode.Skyrim,
                    infoCache: new RecordInfoCache(() => new MutagenBinaryReadStream(path, GameMode.Skyrim))),
                modKey: modKeyOverride ?? ModKey.Factory(Path.GetFileName(path)),
                shouldDispose: true);
        }

        public static ISkyrimModDisposableGetter CreateFromBinaryOverlay(
            IMutagenReadStream stream,
            ModKey modKey)
        {
            return SkyrimModBinaryOverlay.SkyrimModFactory(
                stream: stream,
                modKey: modKey,
                shouldDispose: false);
        }

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISkyrimModGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SkyrimMod GetNew()
        {
            return new SkyrimMod();
        }

    }
    #endregion

    #region Interface
    public partial interface ISkyrimMod :
        ISkyrimModGetter,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<ISkyrimMod>,
        IMod
    {
        new ModHeader ModHeader { get; }
        new Group<GameSetting> GameSettings { get; }
        new Group<Keyword> Keywords { get; }
        new Group<LocationReferenceType> LocationReferenceTypes { get; }
        new Group<ActionRecord> Actions { get; }
        new Group<TextureSet> TextureSets { get; }
        new Group<Global> Globals { get; }
        new Group<Class> Classes { get; }
        new Group<Faction> Factions { get; }
        new Group<HeadPart> HeadParts { get; }
        new Group<Hair> Hairs { get; }
        new Group<Eyes> Eyes { get; }
        new Group<Race> Races { get; }
        new Group<SoundMarker> SoundMarkers { get; }
        new Group<AcousticSpace> AcousticSpaces { get; }
        new Group<MagicEffect> MagicEffects { get; }
        new Group<LandscapeTexture> LandscapeTextures { get; }
        new Group<ObjectEffect> ObjectEffects { get; }
        new Group<Spell> Spells { get; }
        new Group<Scroll> Scrolls { get; }
        new Group<Activator> Activators { get; }
        new Group<TalkingActivator> TalkingActivators { get; }
        new Group<Armor> Armors { get; }
        new Group<Book> Books { get; }
        new Group<Container> Containers { get; }
        new Group<Door> Doors { get; }
        new Group<Ingredient> Ingredients { get; }
        new Group<Light> Lights { get; }
        new Group<MiscItem> MiscItems { get; }
        new Group<AlchemicalApparatus> AlchemicalApparatuses { get; }
        new Group<Static> Statics { get; }
        new Group<MoveableStatic> MoveableStatics { get; }
        new Group<Grass> Grasses { get; }
        new Group<Tree> Trees { get; }
        new Group<Flora> Florae { get; }
        new Group<Furniture> Furniture { get; }
        new Group<Weapon> Weapons { get; }
        new Group<Ammunition> Ammunitions { get; }
        new Group<Npc> Npcs { get; }
        new Group<LeveledNpc> LeveledNpcs { get; }
        new Group<Key> Keys { get; }
        new Group<Ingestible> Ingestibles { get; }
        new Group<IdleMarker> IdleMarkers { get; }
        new Group<ConstructibleObject> ConstructibleObjects { get; }
        new Group<Projectile> Projectiles { get; }
        new Group<Hazard> Hazards { get; }
        new Group<SoulGem> SoulGems { get; }
        new Group<LeveledItem> LeveledItems { get; }
    }

    public partial interface ISkyrimModGetter :
        ILoquiObject,
        IMajorRecordGetterEnumerable,
        ILoquiObject<ISkyrimModGetter>,
        IXmlItem,
        IModGetter,
        ILinkedFormKeyContainer
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => SkyrimMod_Registration.Instance;
        IModHeaderGetter ModHeader { get; }
        IGroupGetter<IGameSettingGetter> GameSettings { get; }
        IGroupGetter<IKeywordGetter> Keywords { get; }
        IGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes { get; }
        IGroupGetter<IActionRecordGetter> Actions { get; }
        IGroupGetter<ITextureSetGetter> TextureSets { get; }
        IGroupGetter<IGlobalGetter> Globals { get; }
        IGroupGetter<IClassGetter> Classes { get; }
        IGroupGetter<IFactionGetter> Factions { get; }
        IGroupGetter<IHeadPartGetter> HeadParts { get; }
        IGroupGetter<IHairGetter> Hairs { get; }
        IGroupGetter<IEyesGetter> Eyes { get; }
        IGroupGetter<IRaceGetter> Races { get; }
        IGroupGetter<ISoundMarkerGetter> SoundMarkers { get; }
        IGroupGetter<IAcousticSpaceGetter> AcousticSpaces { get; }
        IGroupGetter<IMagicEffectGetter> MagicEffects { get; }
        IGroupGetter<ILandscapeTextureGetter> LandscapeTextures { get; }
        IGroupGetter<IObjectEffectGetter> ObjectEffects { get; }
        IGroupGetter<ISpellGetter> Spells { get; }
        IGroupGetter<IScrollGetter> Scrolls { get; }
        IGroupGetter<IActivatorGetter> Activators { get; }
        IGroupGetter<ITalkingActivatorGetter> TalkingActivators { get; }
        IGroupGetter<IArmorGetter> Armors { get; }
        IGroupGetter<IBookGetter> Books { get; }
        IGroupGetter<IContainerGetter> Containers { get; }
        IGroupGetter<IDoorGetter> Doors { get; }
        IGroupGetter<IIngredientGetter> Ingredients { get; }
        IGroupGetter<ILightGetter> Lights { get; }
        IGroupGetter<IMiscItemGetter> MiscItems { get; }
        IGroupGetter<IAlchemicalApparatusGetter> AlchemicalApparatuses { get; }
        IGroupGetter<IStaticGetter> Statics { get; }
        IGroupGetter<IMoveableStaticGetter> MoveableStatics { get; }
        IGroupGetter<IGrassGetter> Grasses { get; }
        IGroupGetter<ITreeGetter> Trees { get; }
        IGroupGetter<IFloraGetter> Florae { get; }
        IGroupGetter<IFurnitureGetter> Furniture { get; }
        IGroupGetter<IWeaponGetter> Weapons { get; }
        IGroupGetter<IAmmunitionGetter> Ammunitions { get; }
        IGroupGetter<INpcGetter> Npcs { get; }
        IGroupGetter<ILeveledNpcGetter> LeveledNpcs { get; }
        IGroupGetter<IKeyGetter> Keys { get; }
        IGroupGetter<IIngestibleGetter> Ingestibles { get; }
        IGroupGetter<IIdleMarkerGetter> IdleMarkers { get; }
        IGroupGetter<IConstructibleObjectGetter> ConstructibleObjects { get; }
        IGroupGetter<IProjectileGetter> Projectiles { get; }
        IGroupGetter<IHazardGetter> Hazards { get; }
        IGroupGetter<ISoulGemGetter> SoulGems { get; }
        IGroupGetter<ILeveledItemGetter> LeveledItems { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SkyrimModMixIn
    {
        public static void Clear(this ISkyrimMod item)
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SkyrimMod.Mask<bool> GetEqualsMask(
            this ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISkyrimModGetter item,
            string? name = null,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISkyrimModGetter item,
            FileGeneration fg,
            string? name = null,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISkyrimModGetter item,
            SkyrimMod.Mask<bool?> checkMask)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SkyrimMod.Mask<bool> GetHasBeenSetMask(this ISkyrimModGetter item)
        {
            var ret = new SkyrimMod.Mask<bool>(false);
            ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISkyrimModGetter item,
            ISkyrimModGetter rhs)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs)
        {
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SkyrimMod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SkyrimMod DeepCopy(
            this ISkyrimModGetter item,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            return ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SkyrimMod DeepCopy(
            this ISkyrimModGetter item,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            return ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SkyrimMod DeepCopy(
            this ISkyrimModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISkyrimMod item,
            XElement node,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISkyrimMod item,
            XElement node,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkyrimMod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            string path,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            string path,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            string path,
            ErrorMaskBuilder? errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            Stream stream,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            Stream stream,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Mutagen
        public static IReadOnlyCache<T, FormKey> GetGroupGetter<T>(this ISkyrimModGetter obj)
            where T : IMajorRecordCommonGetter
        {
            return (IReadOnlyCache<T, FormKey>)((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).GetGroup<T>(obj: obj);
        }

        public static ICache<T, FormKey> GetGroup<T>(this ISkyrimMod obj)
            where T : IMajorRecordCommon
        {
            return (ICache<T, FormKey>)((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).GetGroup<T>(obj: obj);
        }

        public static void WriteToBinaryParallel(
            this ISkyrimModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null)
        {
            SkyrimModCommon.WriteParallel(
                item: item,
                stream: stream,
                param: param ?? BinaryWriteParameters.Default,
                modKey: item.ModKey);
        }

        public static void WriteToBinaryParallel(
            this ISkyrimModGetter item,
            string path,
            BinaryWriteParameters? param = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            using (var stream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                SkyrimModCommon.WriteParallel(
                    item: item,
                    stream: stream,
                    param: param,
                    modKey: modKey);
            }
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this ISkyrimModGetter obj)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ISkyrimModGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this ISkyrimMod obj)
        {
            return ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ISkyrimMod obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISkyrimMod item,
            MutagenFrame frame,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            CopyInFromBinary(
                item: item,
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ISkyrimMod item,
            MutagenFrame frame,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter = null,
            GroupMask? importMask = null)
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        public static void CopyInFromBinary(
            this ISkyrimMod item,
            string path,
            ModKey? modKeyOverride = null,
            GroupMask? importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader)
                {
                    RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, GameMode.Skyrim))
                };
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                CopyInFromBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static void CopyInFromBinary(
            this ISkyrimMod item,
            Stream stream,
            ModKey modKey,
            RecordInfoCache infoCache,
            GroupMask? importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader)
                {
                    RecordInfoCache = infoCache
                };
                CopyInFromBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum SkyrimMod_FieldIndex
    {
        ModHeader = 0,
        GameSettings = 1,
        Keywords = 2,
        LocationReferenceTypes = 3,
        Actions = 4,
        TextureSets = 5,
        Globals = 6,
        Classes = 7,
        Factions = 8,
        HeadParts = 9,
        Hairs = 10,
        Eyes = 11,
        Races = 12,
        SoundMarkers = 13,
        AcousticSpaces = 14,
        MagicEffects = 15,
        LandscapeTextures = 16,
        ObjectEffects = 17,
        Spells = 18,
        Scrolls = 19,
        Activators = 20,
        TalkingActivators = 21,
        Armors = 22,
        Books = 23,
        Containers = 24,
        Doors = 25,
        Ingredients = 26,
        Lights = 27,
        MiscItems = 28,
        AlchemicalApparatuses = 29,
        Statics = 30,
        MoveableStatics = 31,
        Grasses = 32,
        Trees = 33,
        Florae = 34,
        Furniture = 35,
        Weapons = 36,
        Ammunitions = 37,
        Npcs = 38,
        LeveledNpcs = 39,
        Keys = 40,
        Ingestibles = 41,
        IdleMarkers = 42,
        ConstructibleObjects = 43,
        Projectiles = 44,
        Hazards = 45,
        SoulGems = 46,
        LeveledItems = 47,
    }
    #endregion

    #region Registration
    public partial class SkyrimMod_Registration : ILoquiRegistration
    {
        public static readonly SkyrimMod_Registration Instance = new SkyrimMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 66,
            version: 0);

        public const string GUID = "9dcb1a8f-db0a-44bd-9a30-9427a9350e7a";

        public const ushort AdditionalFieldCount = 48;

        public const ushort FieldCount = 48;

        public static readonly Type MaskType = typeof(SkyrimMod.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkyrimMod.ErrorMask);

        public static readonly Type ClassType = typeof(SkyrimMod);

        public static readonly Type GetterType = typeof(ISkyrimModGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISkyrimMod);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.SkyrimMod";

        public const string Name = "SkyrimMod";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODHEADER":
                    return (ushort)SkyrimMod_FieldIndex.ModHeader;
                case "GAMESETTINGS":
                    return (ushort)SkyrimMod_FieldIndex.GameSettings;
                case "KEYWORDS":
                    return (ushort)SkyrimMod_FieldIndex.Keywords;
                case "LOCATIONREFERENCETYPES":
                    return (ushort)SkyrimMod_FieldIndex.LocationReferenceTypes;
                case "ACTIONS":
                    return (ushort)SkyrimMod_FieldIndex.Actions;
                case "TEXTURESETS":
                    return (ushort)SkyrimMod_FieldIndex.TextureSets;
                case "GLOBALS":
                    return (ushort)SkyrimMod_FieldIndex.Globals;
                case "CLASSES":
                    return (ushort)SkyrimMod_FieldIndex.Classes;
                case "FACTIONS":
                    return (ushort)SkyrimMod_FieldIndex.Factions;
                case "HEADPARTS":
                    return (ushort)SkyrimMod_FieldIndex.HeadParts;
                case "HAIRS":
                    return (ushort)SkyrimMod_FieldIndex.Hairs;
                case "EYES":
                    return (ushort)SkyrimMod_FieldIndex.Eyes;
                case "RACES":
                    return (ushort)SkyrimMod_FieldIndex.Races;
                case "SOUNDMARKERS":
                    return (ushort)SkyrimMod_FieldIndex.SoundMarkers;
                case "ACOUSTICSPACES":
                    return (ushort)SkyrimMod_FieldIndex.AcousticSpaces;
                case "MAGICEFFECTS":
                    return (ushort)SkyrimMod_FieldIndex.MagicEffects;
                case "LANDSCAPETEXTURES":
                    return (ushort)SkyrimMod_FieldIndex.LandscapeTextures;
                case "OBJECTEFFECTS":
                    return (ushort)SkyrimMod_FieldIndex.ObjectEffects;
                case "SPELLS":
                    return (ushort)SkyrimMod_FieldIndex.Spells;
                case "SCROLLS":
                    return (ushort)SkyrimMod_FieldIndex.Scrolls;
                case "ACTIVATORS":
                    return (ushort)SkyrimMod_FieldIndex.Activators;
                case "TALKINGACTIVATORS":
                    return (ushort)SkyrimMod_FieldIndex.TalkingActivators;
                case "ARMORS":
                    return (ushort)SkyrimMod_FieldIndex.Armors;
                case "BOOKS":
                    return (ushort)SkyrimMod_FieldIndex.Books;
                case "CONTAINERS":
                    return (ushort)SkyrimMod_FieldIndex.Containers;
                case "DOORS":
                    return (ushort)SkyrimMod_FieldIndex.Doors;
                case "INGREDIENTS":
                    return (ushort)SkyrimMod_FieldIndex.Ingredients;
                case "LIGHTS":
                    return (ushort)SkyrimMod_FieldIndex.Lights;
                case "MISCITEMS":
                    return (ushort)SkyrimMod_FieldIndex.MiscItems;
                case "ALCHEMICALAPPARATUSES":
                    return (ushort)SkyrimMod_FieldIndex.AlchemicalApparatuses;
                case "STATICS":
                    return (ushort)SkyrimMod_FieldIndex.Statics;
                case "MOVEABLESTATICS":
                    return (ushort)SkyrimMod_FieldIndex.MoveableStatics;
                case "GRASSES":
                    return (ushort)SkyrimMod_FieldIndex.Grasses;
                case "TREES":
                    return (ushort)SkyrimMod_FieldIndex.Trees;
                case "FLORAE":
                    return (ushort)SkyrimMod_FieldIndex.Florae;
                case "FURNITURE":
                    return (ushort)SkyrimMod_FieldIndex.Furniture;
                case "WEAPONS":
                    return (ushort)SkyrimMod_FieldIndex.Weapons;
                case "AMMUNITIONS":
                    return (ushort)SkyrimMod_FieldIndex.Ammunitions;
                case "NPCS":
                    return (ushort)SkyrimMod_FieldIndex.Npcs;
                case "LEVELEDNPCS":
                    return (ushort)SkyrimMod_FieldIndex.LeveledNpcs;
                case "KEYS":
                    return (ushort)SkyrimMod_FieldIndex.Keys;
                case "INGESTIBLES":
                    return (ushort)SkyrimMod_FieldIndex.Ingestibles;
                case "IDLEMARKERS":
                    return (ushort)SkyrimMod_FieldIndex.IdleMarkers;
                case "CONSTRUCTIBLEOBJECTS":
                    return (ushort)SkyrimMod_FieldIndex.ConstructibleObjects;
                case "PROJECTILES":
                    return (ushort)SkyrimMod_FieldIndex.Projectiles;
                case "HAZARDS":
                    return (ushort)SkyrimMod_FieldIndex.Hazards;
                case "SOULGEMS":
                    return (ushort)SkyrimMod_FieldIndex.SoulGems;
                case "LEVELEDITEMS":
                    return (ushort)SkyrimMod_FieldIndex.LeveledItems;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                case SkyrimMod_FieldIndex.HeadParts:
                case SkyrimMod_FieldIndex.Hairs:
                case SkyrimMod_FieldIndex.Eyes:
                case SkyrimMod_FieldIndex.Races:
                case SkyrimMod_FieldIndex.SoundMarkers:
                case SkyrimMod_FieldIndex.AcousticSpaces:
                case SkyrimMod_FieldIndex.MagicEffects:
                case SkyrimMod_FieldIndex.LandscapeTextures:
                case SkyrimMod_FieldIndex.ObjectEffects:
                case SkyrimMod_FieldIndex.Spells:
                case SkyrimMod_FieldIndex.Scrolls:
                case SkyrimMod_FieldIndex.Activators:
                case SkyrimMod_FieldIndex.TalkingActivators:
                case SkyrimMod_FieldIndex.Armors:
                case SkyrimMod_FieldIndex.Books:
                case SkyrimMod_FieldIndex.Containers:
                case SkyrimMod_FieldIndex.Doors:
                case SkyrimMod_FieldIndex.Ingredients:
                case SkyrimMod_FieldIndex.Lights:
                case SkyrimMod_FieldIndex.MiscItems:
                case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                case SkyrimMod_FieldIndex.Statics:
                case SkyrimMod_FieldIndex.MoveableStatics:
                case SkyrimMod_FieldIndex.Grasses:
                case SkyrimMod_FieldIndex.Trees:
                case SkyrimMod_FieldIndex.Florae:
                case SkyrimMod_FieldIndex.Furniture:
                case SkyrimMod_FieldIndex.Weapons:
                case SkyrimMod_FieldIndex.Ammunitions:
                case SkyrimMod_FieldIndex.Npcs:
                case SkyrimMod_FieldIndex.LeveledNpcs:
                case SkyrimMod_FieldIndex.Keys:
                case SkyrimMod_FieldIndex.Ingestibles:
                case SkyrimMod_FieldIndex.IdleMarkers:
                case SkyrimMod_FieldIndex.ConstructibleObjects:
                case SkyrimMod_FieldIndex.Projectiles:
                case SkyrimMod_FieldIndex.Hazards:
                case SkyrimMod_FieldIndex.SoulGems:
                case SkyrimMod_FieldIndex.LeveledItems:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                case SkyrimMod_FieldIndex.HeadParts:
                case SkyrimMod_FieldIndex.Hairs:
                case SkyrimMod_FieldIndex.Eyes:
                case SkyrimMod_FieldIndex.Races:
                case SkyrimMod_FieldIndex.SoundMarkers:
                case SkyrimMod_FieldIndex.AcousticSpaces:
                case SkyrimMod_FieldIndex.MagicEffects:
                case SkyrimMod_FieldIndex.LandscapeTextures:
                case SkyrimMod_FieldIndex.ObjectEffects:
                case SkyrimMod_FieldIndex.Spells:
                case SkyrimMod_FieldIndex.Scrolls:
                case SkyrimMod_FieldIndex.Activators:
                case SkyrimMod_FieldIndex.TalkingActivators:
                case SkyrimMod_FieldIndex.Armors:
                case SkyrimMod_FieldIndex.Books:
                case SkyrimMod_FieldIndex.Containers:
                case SkyrimMod_FieldIndex.Doors:
                case SkyrimMod_FieldIndex.Ingredients:
                case SkyrimMod_FieldIndex.Lights:
                case SkyrimMod_FieldIndex.MiscItems:
                case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                case SkyrimMod_FieldIndex.Statics:
                case SkyrimMod_FieldIndex.MoveableStatics:
                case SkyrimMod_FieldIndex.Grasses:
                case SkyrimMod_FieldIndex.Trees:
                case SkyrimMod_FieldIndex.Florae:
                case SkyrimMod_FieldIndex.Furniture:
                case SkyrimMod_FieldIndex.Weapons:
                case SkyrimMod_FieldIndex.Ammunitions:
                case SkyrimMod_FieldIndex.Npcs:
                case SkyrimMod_FieldIndex.LeveledNpcs:
                case SkyrimMod_FieldIndex.Keys:
                case SkyrimMod_FieldIndex.Ingestibles:
                case SkyrimMod_FieldIndex.IdleMarkers:
                case SkyrimMod_FieldIndex.ConstructibleObjects:
                case SkyrimMod_FieldIndex.Projectiles:
                case SkyrimMod_FieldIndex.Hazards:
                case SkyrimMod_FieldIndex.SoulGems:
                case SkyrimMod_FieldIndex.LeveledItems:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                case SkyrimMod_FieldIndex.HeadParts:
                case SkyrimMod_FieldIndex.Hairs:
                case SkyrimMod_FieldIndex.Eyes:
                case SkyrimMod_FieldIndex.Races:
                case SkyrimMod_FieldIndex.SoundMarkers:
                case SkyrimMod_FieldIndex.AcousticSpaces:
                case SkyrimMod_FieldIndex.MagicEffects:
                case SkyrimMod_FieldIndex.LandscapeTextures:
                case SkyrimMod_FieldIndex.ObjectEffects:
                case SkyrimMod_FieldIndex.Spells:
                case SkyrimMod_FieldIndex.Scrolls:
                case SkyrimMod_FieldIndex.Activators:
                case SkyrimMod_FieldIndex.TalkingActivators:
                case SkyrimMod_FieldIndex.Armors:
                case SkyrimMod_FieldIndex.Books:
                case SkyrimMod_FieldIndex.Containers:
                case SkyrimMod_FieldIndex.Doors:
                case SkyrimMod_FieldIndex.Ingredients:
                case SkyrimMod_FieldIndex.Lights:
                case SkyrimMod_FieldIndex.MiscItems:
                case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                case SkyrimMod_FieldIndex.Statics:
                case SkyrimMod_FieldIndex.MoveableStatics:
                case SkyrimMod_FieldIndex.Grasses:
                case SkyrimMod_FieldIndex.Trees:
                case SkyrimMod_FieldIndex.Florae:
                case SkyrimMod_FieldIndex.Furniture:
                case SkyrimMod_FieldIndex.Weapons:
                case SkyrimMod_FieldIndex.Ammunitions:
                case SkyrimMod_FieldIndex.Npcs:
                case SkyrimMod_FieldIndex.LeveledNpcs:
                case SkyrimMod_FieldIndex.Keys:
                case SkyrimMod_FieldIndex.Ingestibles:
                case SkyrimMod_FieldIndex.IdleMarkers:
                case SkyrimMod_FieldIndex.ConstructibleObjects:
                case SkyrimMod_FieldIndex.Projectiles:
                case SkyrimMod_FieldIndex.Hazards:
                case SkyrimMod_FieldIndex.SoulGems:
                case SkyrimMod_FieldIndex.LeveledItems:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    return "ModHeader";
                case SkyrimMod_FieldIndex.GameSettings:
                    return "GameSettings";
                case SkyrimMod_FieldIndex.Keywords:
                    return "Keywords";
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                    return "LocationReferenceTypes";
                case SkyrimMod_FieldIndex.Actions:
                    return "Actions";
                case SkyrimMod_FieldIndex.TextureSets:
                    return "TextureSets";
                case SkyrimMod_FieldIndex.Globals:
                    return "Globals";
                case SkyrimMod_FieldIndex.Classes:
                    return "Classes";
                case SkyrimMod_FieldIndex.Factions:
                    return "Factions";
                case SkyrimMod_FieldIndex.HeadParts:
                    return "HeadParts";
                case SkyrimMod_FieldIndex.Hairs:
                    return "Hairs";
                case SkyrimMod_FieldIndex.Eyes:
                    return "Eyes";
                case SkyrimMod_FieldIndex.Races:
                    return "Races";
                case SkyrimMod_FieldIndex.SoundMarkers:
                    return "SoundMarkers";
                case SkyrimMod_FieldIndex.AcousticSpaces:
                    return "AcousticSpaces";
                case SkyrimMod_FieldIndex.MagicEffects:
                    return "MagicEffects";
                case SkyrimMod_FieldIndex.LandscapeTextures:
                    return "LandscapeTextures";
                case SkyrimMod_FieldIndex.ObjectEffects:
                    return "ObjectEffects";
                case SkyrimMod_FieldIndex.Spells:
                    return "Spells";
                case SkyrimMod_FieldIndex.Scrolls:
                    return "Scrolls";
                case SkyrimMod_FieldIndex.Activators:
                    return "Activators";
                case SkyrimMod_FieldIndex.TalkingActivators:
                    return "TalkingActivators";
                case SkyrimMod_FieldIndex.Armors:
                    return "Armors";
                case SkyrimMod_FieldIndex.Books:
                    return "Books";
                case SkyrimMod_FieldIndex.Containers:
                    return "Containers";
                case SkyrimMod_FieldIndex.Doors:
                    return "Doors";
                case SkyrimMod_FieldIndex.Ingredients:
                    return "Ingredients";
                case SkyrimMod_FieldIndex.Lights:
                    return "Lights";
                case SkyrimMod_FieldIndex.MiscItems:
                    return "MiscItems";
                case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                    return "AlchemicalApparatuses";
                case SkyrimMod_FieldIndex.Statics:
                    return "Statics";
                case SkyrimMod_FieldIndex.MoveableStatics:
                    return "MoveableStatics";
                case SkyrimMod_FieldIndex.Grasses:
                    return "Grasses";
                case SkyrimMod_FieldIndex.Trees:
                    return "Trees";
                case SkyrimMod_FieldIndex.Florae:
                    return "Florae";
                case SkyrimMod_FieldIndex.Furniture:
                    return "Furniture";
                case SkyrimMod_FieldIndex.Weapons:
                    return "Weapons";
                case SkyrimMod_FieldIndex.Ammunitions:
                    return "Ammunitions";
                case SkyrimMod_FieldIndex.Npcs:
                    return "Npcs";
                case SkyrimMod_FieldIndex.LeveledNpcs:
                    return "LeveledNpcs";
                case SkyrimMod_FieldIndex.Keys:
                    return "Keys";
                case SkyrimMod_FieldIndex.Ingestibles:
                    return "Ingestibles";
                case SkyrimMod_FieldIndex.IdleMarkers:
                    return "IdleMarkers";
                case SkyrimMod_FieldIndex.ConstructibleObjects:
                    return "ConstructibleObjects";
                case SkyrimMod_FieldIndex.Projectiles:
                    return "Projectiles";
                case SkyrimMod_FieldIndex.Hazards:
                    return "Hazards";
                case SkyrimMod_FieldIndex.SoulGems:
                    return "SoulGems";
                case SkyrimMod_FieldIndex.LeveledItems:
                    return "LeveledItems";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                case SkyrimMod_FieldIndex.HeadParts:
                case SkyrimMod_FieldIndex.Hairs:
                case SkyrimMod_FieldIndex.Eyes:
                case SkyrimMod_FieldIndex.Races:
                case SkyrimMod_FieldIndex.SoundMarkers:
                case SkyrimMod_FieldIndex.AcousticSpaces:
                case SkyrimMod_FieldIndex.MagicEffects:
                case SkyrimMod_FieldIndex.LandscapeTextures:
                case SkyrimMod_FieldIndex.ObjectEffects:
                case SkyrimMod_FieldIndex.Spells:
                case SkyrimMod_FieldIndex.Scrolls:
                case SkyrimMod_FieldIndex.Activators:
                case SkyrimMod_FieldIndex.TalkingActivators:
                case SkyrimMod_FieldIndex.Armors:
                case SkyrimMod_FieldIndex.Books:
                case SkyrimMod_FieldIndex.Containers:
                case SkyrimMod_FieldIndex.Doors:
                case SkyrimMod_FieldIndex.Ingredients:
                case SkyrimMod_FieldIndex.Lights:
                case SkyrimMod_FieldIndex.MiscItems:
                case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                case SkyrimMod_FieldIndex.Statics:
                case SkyrimMod_FieldIndex.MoveableStatics:
                case SkyrimMod_FieldIndex.Grasses:
                case SkyrimMod_FieldIndex.Trees:
                case SkyrimMod_FieldIndex.Florae:
                case SkyrimMod_FieldIndex.Furniture:
                case SkyrimMod_FieldIndex.Weapons:
                case SkyrimMod_FieldIndex.Ammunitions:
                case SkyrimMod_FieldIndex.Npcs:
                case SkyrimMod_FieldIndex.LeveledNpcs:
                case SkyrimMod_FieldIndex.Keys:
                case SkyrimMod_FieldIndex.Ingestibles:
                case SkyrimMod_FieldIndex.IdleMarkers:
                case SkyrimMod_FieldIndex.ConstructibleObjects:
                case SkyrimMod_FieldIndex.Projectiles:
                case SkyrimMod_FieldIndex.Hazards:
                case SkyrimMod_FieldIndex.SoulGems:
                case SkyrimMod_FieldIndex.LeveledItems:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    return true;
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                case SkyrimMod_FieldIndex.HeadParts:
                case SkyrimMod_FieldIndex.Hairs:
                case SkyrimMod_FieldIndex.Eyes:
                case SkyrimMod_FieldIndex.Races:
                case SkyrimMod_FieldIndex.SoundMarkers:
                case SkyrimMod_FieldIndex.AcousticSpaces:
                case SkyrimMod_FieldIndex.MagicEffects:
                case SkyrimMod_FieldIndex.LandscapeTextures:
                case SkyrimMod_FieldIndex.ObjectEffects:
                case SkyrimMod_FieldIndex.Spells:
                case SkyrimMod_FieldIndex.Scrolls:
                case SkyrimMod_FieldIndex.Activators:
                case SkyrimMod_FieldIndex.TalkingActivators:
                case SkyrimMod_FieldIndex.Armors:
                case SkyrimMod_FieldIndex.Books:
                case SkyrimMod_FieldIndex.Containers:
                case SkyrimMod_FieldIndex.Doors:
                case SkyrimMod_FieldIndex.Ingredients:
                case SkyrimMod_FieldIndex.Lights:
                case SkyrimMod_FieldIndex.MiscItems:
                case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                case SkyrimMod_FieldIndex.Statics:
                case SkyrimMod_FieldIndex.MoveableStatics:
                case SkyrimMod_FieldIndex.Grasses:
                case SkyrimMod_FieldIndex.Trees:
                case SkyrimMod_FieldIndex.Florae:
                case SkyrimMod_FieldIndex.Furniture:
                case SkyrimMod_FieldIndex.Weapons:
                case SkyrimMod_FieldIndex.Ammunitions:
                case SkyrimMod_FieldIndex.Npcs:
                case SkyrimMod_FieldIndex.LeveledNpcs:
                case SkyrimMod_FieldIndex.Keys:
                case SkyrimMod_FieldIndex.Ingestibles:
                case SkyrimMod_FieldIndex.IdleMarkers:
                case SkyrimMod_FieldIndex.ConstructibleObjects:
                case SkyrimMod_FieldIndex.Projectiles:
                case SkyrimMod_FieldIndex.Hazards:
                case SkyrimMod_FieldIndex.SoulGems:
                case SkyrimMod_FieldIndex.LeveledItems:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    return typeof(ModHeader);
                case SkyrimMod_FieldIndex.GameSettings:
                    return typeof(Group<GameSetting>);
                case SkyrimMod_FieldIndex.Keywords:
                    return typeof(Group<Keyword>);
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                    return typeof(Group<LocationReferenceType>);
                case SkyrimMod_FieldIndex.Actions:
                    return typeof(Group<ActionRecord>);
                case SkyrimMod_FieldIndex.TextureSets:
                    return typeof(Group<TextureSet>);
                case SkyrimMod_FieldIndex.Globals:
                    return typeof(Group<Global>);
                case SkyrimMod_FieldIndex.Classes:
                    return typeof(Group<Class>);
                case SkyrimMod_FieldIndex.Factions:
                    return typeof(Group<Faction>);
                case SkyrimMod_FieldIndex.HeadParts:
                    return typeof(Group<HeadPart>);
                case SkyrimMod_FieldIndex.Hairs:
                    return typeof(Group<Hair>);
                case SkyrimMod_FieldIndex.Eyes:
                    return typeof(Group<Eyes>);
                case SkyrimMod_FieldIndex.Races:
                    return typeof(Group<Race>);
                case SkyrimMod_FieldIndex.SoundMarkers:
                    return typeof(Group<SoundMarker>);
                case SkyrimMod_FieldIndex.AcousticSpaces:
                    return typeof(Group<AcousticSpace>);
                case SkyrimMod_FieldIndex.MagicEffects:
                    return typeof(Group<MagicEffect>);
                case SkyrimMod_FieldIndex.LandscapeTextures:
                    return typeof(Group<LandscapeTexture>);
                case SkyrimMod_FieldIndex.ObjectEffects:
                    return typeof(Group<ObjectEffect>);
                case SkyrimMod_FieldIndex.Spells:
                    return typeof(Group<Spell>);
                case SkyrimMod_FieldIndex.Scrolls:
                    return typeof(Group<Scroll>);
                case SkyrimMod_FieldIndex.Activators:
                    return typeof(Group<Activator>);
                case SkyrimMod_FieldIndex.TalkingActivators:
                    return typeof(Group<TalkingActivator>);
                case SkyrimMod_FieldIndex.Armors:
                    return typeof(Group<Armor>);
                case SkyrimMod_FieldIndex.Books:
                    return typeof(Group<Book>);
                case SkyrimMod_FieldIndex.Containers:
                    return typeof(Group<Container>);
                case SkyrimMod_FieldIndex.Doors:
                    return typeof(Group<Door>);
                case SkyrimMod_FieldIndex.Ingredients:
                    return typeof(Group<Ingredient>);
                case SkyrimMod_FieldIndex.Lights:
                    return typeof(Group<Light>);
                case SkyrimMod_FieldIndex.MiscItems:
                    return typeof(Group<MiscItem>);
                case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                    return typeof(Group<AlchemicalApparatus>);
                case SkyrimMod_FieldIndex.Statics:
                    return typeof(Group<Static>);
                case SkyrimMod_FieldIndex.MoveableStatics:
                    return typeof(Group<MoveableStatic>);
                case SkyrimMod_FieldIndex.Grasses:
                    return typeof(Group<Grass>);
                case SkyrimMod_FieldIndex.Trees:
                    return typeof(Group<Tree>);
                case SkyrimMod_FieldIndex.Florae:
                    return typeof(Group<Flora>);
                case SkyrimMod_FieldIndex.Furniture:
                    return typeof(Group<Furniture>);
                case SkyrimMod_FieldIndex.Weapons:
                    return typeof(Group<Weapon>);
                case SkyrimMod_FieldIndex.Ammunitions:
                    return typeof(Group<Ammunition>);
                case SkyrimMod_FieldIndex.Npcs:
                    return typeof(Group<Npc>);
                case SkyrimMod_FieldIndex.LeveledNpcs:
                    return typeof(Group<LeveledNpc>);
                case SkyrimMod_FieldIndex.Keys:
                    return typeof(Group<Key>);
                case SkyrimMod_FieldIndex.Ingestibles:
                    return typeof(Group<Ingestible>);
                case SkyrimMod_FieldIndex.IdleMarkers:
                    return typeof(Group<IdleMarker>);
                case SkyrimMod_FieldIndex.ConstructibleObjects:
                    return typeof(Group<ConstructibleObject>);
                case SkyrimMod_FieldIndex.Projectiles:
                    return typeof(Group<Projectile>);
                case SkyrimMod_FieldIndex.Hazards:
                    return typeof(Group<Hazard>);
                case SkyrimMod_FieldIndex.SoulGems:
                    return typeof(Group<SoulGem>);
                case SkyrimMod_FieldIndex.LeveledItems:
                    return typeof(Group<LeveledItem>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SkyrimModXmlWriteTranslation);
        public static readonly RecordType TES4_HEADER = new RecordType("TES4");
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType KYWD_HEADER = new RecordType("KYWD");
        public static readonly RecordType LCRT_HEADER = new RecordType("LCRT");
        public static readonly RecordType AACT_HEADER = new RecordType("AACT");
        public static readonly RecordType TXST_HEADER = new RecordType("TXST");
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType HDPT_HEADER = new RecordType("HDPT");
        public static readonly RecordType HAIR_HEADER = new RecordType("HAIR");
        public static readonly RecordType EYES_HEADER = new RecordType("EYES");
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType SOUN_HEADER = new RecordType("SOUN");
        public static readonly RecordType ASPC_HEADER = new RecordType("ASPC");
        public static readonly RecordType MGEF_HEADER = new RecordType("MGEF");
        public static readonly RecordType LTEX_HEADER = new RecordType("LTEX");
        public static readonly RecordType ENCH_HEADER = new RecordType("ENCH");
        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static readonly RecordType SCRL_HEADER = new RecordType("SCRL");
        public static readonly RecordType ACTI_HEADER = new RecordType("ACTI");
        public static readonly RecordType TACT_HEADER = new RecordType("TACT");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType BOOK_HEADER = new RecordType("BOOK");
        public static readonly RecordType CONT_HEADER = new RecordType("CONT");
        public static readonly RecordType DOOR_HEADER = new RecordType("DOOR");
        public static readonly RecordType INGR_HEADER = new RecordType("INGR");
        public static readonly RecordType LIGH_HEADER = new RecordType("LIGH");
        public static readonly RecordType MISC_HEADER = new RecordType("MISC");
        public static readonly RecordType APPA_HEADER = new RecordType("APPA");
        public static readonly RecordType STAT_HEADER = new RecordType("STAT");
        public static readonly RecordType MSTT_HEADER = new RecordType("MSTT");
        public static readonly RecordType GRAS_HEADER = new RecordType("GRAS");
        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType FLOR_HEADER = new RecordType("FLOR");
        public static readonly RecordType FURN_HEADER = new RecordType("FURN");
        public static readonly RecordType WEAP_HEADER = new RecordType("WEAP");
        public static readonly RecordType AMMO_HEADER = new RecordType("AMMO");
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static readonly RecordType LVLN_HEADER = new RecordType("LVLN");
        public static readonly RecordType KEYM_HEADER = new RecordType("KEYM");
        public static readonly RecordType ALCH_HEADER = new RecordType("ALCH");
        public static readonly RecordType IDLM_HEADER = new RecordType("IDLM");
        public static readonly RecordType COBJ_HEADER = new RecordType("COBJ");
        public static readonly RecordType PROJ_HEADER = new RecordType("PROJ");
        public static readonly RecordType HAZD_HEADER = new RecordType("HAZD");
        public static readonly RecordType SLGM_HEADER = new RecordType("SLGM");
        public static readonly RecordType LVLI_HEADER = new RecordType("LVLI");
        public static readonly RecordType TriggeringRecordType = TES4_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 48;
        public static readonly Type BinaryWriteTranslation = typeof(SkyrimModBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SkyrimModSetterCommon
    {
        public static readonly SkyrimModSetterCommon Instance = new SkyrimModSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISkyrimMod item)
        {
            ClearPartial();
            item.GameSettings.Clear();
            item.Keywords.Clear();
            item.LocationReferenceTypes.Clear();
            item.Actions.Clear();
            item.TextureSets.Clear();
            item.Globals.Clear();
            item.Classes.Clear();
            item.Factions.Clear();
            item.HeadParts.Clear();
            item.Hairs.Clear();
            item.Eyes.Clear();
            item.Races.Clear();
            item.SoundMarkers.Clear();
            item.AcousticSpaces.Clear();
            item.MagicEffects.Clear();
            item.LandscapeTextures.Clear();
            item.ObjectEffects.Clear();
            item.Spells.Clear();
            item.Scrolls.Clear();
            item.Activators.Clear();
            item.TalkingActivators.Clear();
            item.Armors.Clear();
            item.Books.Clear();
            item.Containers.Clear();
            item.Doors.Clear();
            item.Ingredients.Clear();
            item.Lights.Clear();
            item.MiscItems.Clear();
            item.AlchemicalApparatuses.Clear();
            item.Statics.Clear();
            item.MoveableStatics.Clear();
            item.Grasses.Clear();
            item.Trees.Clear();
            item.Florae.Clear();
            item.Furniture.Clear();
            item.Weapons.Clear();
            item.Ammunitions.Clear();
            item.Npcs.Clear();
            item.LeveledNpcs.Clear();
            item.Keys.Clear();
            item.Ingestibles.Clear();
            item.IdleMarkers.Clear();
            item.ConstructibleObjects.Clear();
            item.Projectiles.Clear();
            item.Hazards.Clear();
            item.SoulGems.Clear();
            item.LeveledItems.Clear();
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ISkyrimMod item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ModHeader":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ModHeader);
                    try
                    {
                        item.ModHeader.CopyInFromXml(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            ISkyrimMod item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    SkyrimModXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(ISkyrimMod obj)
        {
            foreach (var item in SkyrimModCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(ISkyrimMod obj)
            where TMajor : class, IMajorRecordCommon
        {
            foreach (var item in SkyrimModCommon.Instance.EnumerateMajorRecords<TMajor>(obj))
            {
                yield return (item as TMajor)!;
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ISkyrimMod item,
            MutagenFrame frame)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ISkyrimMod item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            GroupMask? importMask,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x34534554: // TES4
                {
                    item.ModHeader.CopyInFromBinary(
                        frame: frame,
                        recordTypeConverter: null);
                    frame.MasterReferences!.SetTo(item.ModHeader.MasterReferences);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.ModHeader);
                }
                case 0x54534D47: // GMST
                {
                    if (importMask?.GameSettings ?? true)
                    {
                        item.GameSettings.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.GameSettings);
                }
                case 0x4457594B: // KYWD
                {
                    if (importMask?.Keywords ?? true)
                    {
                        item.Keywords.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Keywords);
                }
                case 0x5452434C: // LCRT
                {
                    if (importMask?.LocationReferenceTypes ?? true)
                    {
                        item.LocationReferenceTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.LocationReferenceTypes);
                }
                case 0x54434141: // AACT
                {
                    if (importMask?.Actions ?? true)
                    {
                        item.Actions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Actions);
                }
                case 0x54535854: // TXST
                {
                    if (importMask?.TextureSets ?? true)
                    {
                        item.TextureSets.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.TextureSets);
                }
                case 0x424F4C47: // GLOB
                {
                    if (importMask?.Globals ?? true)
                    {
                        item.Globals.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Globals);
                }
                case 0x53414C43: // CLAS
                {
                    if (importMask?.Classes ?? true)
                    {
                        item.Classes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Classes);
                }
                case 0x54434146: // FACT
                {
                    if (importMask?.Factions ?? true)
                    {
                        item.Factions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Factions);
                }
                case 0x54504448: // HDPT
                {
                    if (importMask?.HeadParts ?? true)
                    {
                        item.HeadParts.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.HeadParts);
                }
                case 0x52494148: // HAIR
                {
                    if (importMask?.Hairs ?? true)
                    {
                        item.Hairs.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Hairs);
                }
                case 0x53455945: // EYES
                {
                    if (importMask?.Eyes ?? true)
                    {
                        item.Eyes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Eyes);
                }
                case 0x45434152: // RACE
                {
                    if (importMask?.Races ?? true)
                    {
                        item.Races.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Races);
                }
                case 0x4E554F53: // SOUN
                {
                    if (importMask?.SoundMarkers ?? true)
                    {
                        item.SoundMarkers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.SoundMarkers);
                }
                case 0x43505341: // ASPC
                {
                    if (importMask?.AcousticSpaces ?? true)
                    {
                        item.AcousticSpaces.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.AcousticSpaces);
                }
                case 0x4645474D: // MGEF
                {
                    if (importMask?.MagicEffects ?? true)
                    {
                        item.MagicEffects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.MagicEffects);
                }
                case 0x5845544C: // LTEX
                {
                    if (importMask?.LandscapeTextures ?? true)
                    {
                        item.LandscapeTextures.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.LandscapeTextures);
                }
                case 0x48434E45: // ENCH
                {
                    if (importMask?.ObjectEffects ?? true)
                    {
                        item.ObjectEffects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.ObjectEffects);
                }
                case 0x4C455053: // SPEL
                {
                    if (importMask?.Spells ?? true)
                    {
                        item.Spells.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Spells);
                }
                case 0x4C524353: // SCRL
                {
                    if (importMask?.Scrolls ?? true)
                    {
                        item.Scrolls.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Scrolls);
                }
                case 0x49544341: // ACTI
                {
                    if (importMask?.Activators ?? true)
                    {
                        item.Activators.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Activators);
                }
                case 0x54434154: // TACT
                {
                    if (importMask?.TalkingActivators ?? true)
                    {
                        item.TalkingActivators.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.TalkingActivators);
                }
                case 0x4F4D5241: // ARMO
                {
                    if (importMask?.Armors ?? true)
                    {
                        item.Armors.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Armors);
                }
                case 0x4B4F4F42: // BOOK
                {
                    if (importMask?.Books ?? true)
                    {
                        item.Books.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Books);
                }
                case 0x544E4F43: // CONT
                {
                    if (importMask?.Containers ?? true)
                    {
                        item.Containers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Containers);
                }
                case 0x524F4F44: // DOOR
                {
                    if (importMask?.Doors ?? true)
                    {
                        item.Doors.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Doors);
                }
                case 0x52474E49: // INGR
                {
                    if (importMask?.Ingredients ?? true)
                    {
                        item.Ingredients.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Ingredients);
                }
                case 0x4847494C: // LIGH
                {
                    if (importMask?.Lights ?? true)
                    {
                        item.Lights.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Lights);
                }
                case 0x4353494D: // MISC
                {
                    if (importMask?.MiscItems ?? true)
                    {
                        item.MiscItems.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.MiscItems);
                }
                case 0x41505041: // APPA
                {
                    if (importMask?.AlchemicalApparatuses ?? true)
                    {
                        item.AlchemicalApparatuses.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.AlchemicalApparatuses);
                }
                case 0x54415453: // STAT
                {
                    if (importMask?.Statics ?? true)
                    {
                        item.Statics.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Statics);
                }
                case 0x5454534D: // MSTT
                {
                    if (importMask?.MoveableStatics ?? true)
                    {
                        item.MoveableStatics.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.MoveableStatics);
                }
                case 0x53415247: // GRAS
                {
                    if (importMask?.Grasses ?? true)
                    {
                        item.Grasses.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Grasses);
                }
                case 0x45455254: // TREE
                {
                    if (importMask?.Trees ?? true)
                    {
                        item.Trees.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Trees);
                }
                case 0x524F4C46: // FLOR
                {
                    if (importMask?.Florae ?? true)
                    {
                        item.Florae.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Florae);
                }
                case 0x4E525546: // FURN
                {
                    if (importMask?.Furniture ?? true)
                    {
                        item.Furniture.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Furniture);
                }
                case 0x50414557: // WEAP
                {
                    if (importMask?.Weapons ?? true)
                    {
                        item.Weapons.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Weapons);
                }
                case 0x4F4D4D41: // AMMO
                {
                    if (importMask?.Ammunitions ?? true)
                    {
                        item.Ammunitions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Ammunitions);
                }
                case 0x5F43504E: // NPC_
                {
                    if (importMask?.Npcs ?? true)
                    {
                        item.Npcs.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Npcs);
                }
                case 0x4E4C564C: // LVLN
                {
                    if (importMask?.LeveledNpcs ?? true)
                    {
                        item.LeveledNpcs.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.LeveledNpcs);
                }
                case 0x4D59454B: // KEYM
                {
                    if (importMask?.Keys ?? true)
                    {
                        item.Keys.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Keys);
                }
                case 0x48434C41: // ALCH
                {
                    if (importMask?.Ingestibles ?? true)
                    {
                        item.Ingestibles.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Ingestibles);
                }
                case 0x4D4C4449: // IDLM
                {
                    if (importMask?.IdleMarkers ?? true)
                    {
                        item.IdleMarkers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.IdleMarkers);
                }
                case 0x4A424F43: // COBJ
                {
                    if (importMask?.ConstructibleObjects ?? true)
                    {
                        item.ConstructibleObjects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.ConstructibleObjects);
                }
                case 0x4A4F5250: // PROJ
                {
                    if (importMask?.Projectiles ?? true)
                    {
                        item.Projectiles.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Projectiles);
                }
                case 0x445A4148: // HAZD
                {
                    if (importMask?.Hazards ?? true)
                    {
                        item.Hazards.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Hazards);
                }
                case 0x4D474C53: // SLGM
                {
                    if (importMask?.SoulGems ?? true)
                    {
                        item.SoulGems.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.SoulGems);
                }
                case 0x494C564C: // LVLI
                {
                    if (importMask?.LeveledItems ?? true)
                    {
                        item.LeveledItems.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.LeveledItems);
                }
                default:
                    frame.Position += contentLength;
                    return TryGet<int?>.Succeed(null);
            }
        }
        
        public virtual void CopyInFromBinary(
            ISkyrimMod item,
            MutagenFrame frame,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter = null,
            GroupMask? importMask = null)
        {
            frame.Reader.MasterReferences = new MasterReferenceReader(modKey, item.ModHeader.MasterReferences);
            UtilityTranslation.ModParse(
                record: item,
                frame: frame,
                importMask: importMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class SkyrimModCommon
    {
        public static readonly SkyrimModCommon Instance = new SkyrimModCommon();

        public SkyrimMod.Mask<bool> GetEqualsMask(
            ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SkyrimMod.Mask<bool>(false);
            ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            SkyrimMod.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ModHeader = MaskItemExt.Factory(item.ModHeader.GetEqualsMask(rhs.ModHeader, include), include);
            ret.GameSettings = MaskItemExt.Factory(item.GameSettings.GetEqualsMask(rhs.GameSettings, include), include);
            ret.Keywords = MaskItemExt.Factory(item.Keywords.GetEqualsMask(rhs.Keywords, include), include);
            ret.LocationReferenceTypes = MaskItemExt.Factory(item.LocationReferenceTypes.GetEqualsMask(rhs.LocationReferenceTypes, include), include);
            ret.Actions = MaskItemExt.Factory(item.Actions.GetEqualsMask(rhs.Actions, include), include);
            ret.TextureSets = MaskItemExt.Factory(item.TextureSets.GetEqualsMask(rhs.TextureSets, include), include);
            ret.Globals = MaskItemExt.Factory(item.Globals.GetEqualsMask(rhs.Globals, include), include);
            ret.Classes = MaskItemExt.Factory(item.Classes.GetEqualsMask(rhs.Classes, include), include);
            ret.Factions = MaskItemExt.Factory(item.Factions.GetEqualsMask(rhs.Factions, include), include);
            ret.HeadParts = MaskItemExt.Factory(item.HeadParts.GetEqualsMask(rhs.HeadParts, include), include);
            ret.Hairs = MaskItemExt.Factory(item.Hairs.GetEqualsMask(rhs.Hairs, include), include);
            ret.Eyes = MaskItemExt.Factory(item.Eyes.GetEqualsMask(rhs.Eyes, include), include);
            ret.Races = MaskItemExt.Factory(item.Races.GetEqualsMask(rhs.Races, include), include);
            ret.SoundMarkers = MaskItemExt.Factory(item.SoundMarkers.GetEqualsMask(rhs.SoundMarkers, include), include);
            ret.AcousticSpaces = MaskItemExt.Factory(item.AcousticSpaces.GetEqualsMask(rhs.AcousticSpaces, include), include);
            ret.MagicEffects = MaskItemExt.Factory(item.MagicEffects.GetEqualsMask(rhs.MagicEffects, include), include);
            ret.LandscapeTextures = MaskItemExt.Factory(item.LandscapeTextures.GetEqualsMask(rhs.LandscapeTextures, include), include);
            ret.ObjectEffects = MaskItemExt.Factory(item.ObjectEffects.GetEqualsMask(rhs.ObjectEffects, include), include);
            ret.Spells = MaskItemExt.Factory(item.Spells.GetEqualsMask(rhs.Spells, include), include);
            ret.Scrolls = MaskItemExt.Factory(item.Scrolls.GetEqualsMask(rhs.Scrolls, include), include);
            ret.Activators = MaskItemExt.Factory(item.Activators.GetEqualsMask(rhs.Activators, include), include);
            ret.TalkingActivators = MaskItemExt.Factory(item.TalkingActivators.GetEqualsMask(rhs.TalkingActivators, include), include);
            ret.Armors = MaskItemExt.Factory(item.Armors.GetEqualsMask(rhs.Armors, include), include);
            ret.Books = MaskItemExt.Factory(item.Books.GetEqualsMask(rhs.Books, include), include);
            ret.Containers = MaskItemExt.Factory(item.Containers.GetEqualsMask(rhs.Containers, include), include);
            ret.Doors = MaskItemExt.Factory(item.Doors.GetEqualsMask(rhs.Doors, include), include);
            ret.Ingredients = MaskItemExt.Factory(item.Ingredients.GetEqualsMask(rhs.Ingredients, include), include);
            ret.Lights = MaskItemExt.Factory(item.Lights.GetEqualsMask(rhs.Lights, include), include);
            ret.MiscItems = MaskItemExt.Factory(item.MiscItems.GetEqualsMask(rhs.MiscItems, include), include);
            ret.AlchemicalApparatuses = MaskItemExt.Factory(item.AlchemicalApparatuses.GetEqualsMask(rhs.AlchemicalApparatuses, include), include);
            ret.Statics = MaskItemExt.Factory(item.Statics.GetEqualsMask(rhs.Statics, include), include);
            ret.MoveableStatics = MaskItemExt.Factory(item.MoveableStatics.GetEqualsMask(rhs.MoveableStatics, include), include);
            ret.Grasses = MaskItemExt.Factory(item.Grasses.GetEqualsMask(rhs.Grasses, include), include);
            ret.Trees = MaskItemExt.Factory(item.Trees.GetEqualsMask(rhs.Trees, include), include);
            ret.Florae = MaskItemExt.Factory(item.Florae.GetEqualsMask(rhs.Florae, include), include);
            ret.Furniture = MaskItemExt.Factory(item.Furniture.GetEqualsMask(rhs.Furniture, include), include);
            ret.Weapons = MaskItemExt.Factory(item.Weapons.GetEqualsMask(rhs.Weapons, include), include);
            ret.Ammunitions = MaskItemExt.Factory(item.Ammunitions.GetEqualsMask(rhs.Ammunitions, include), include);
            ret.Npcs = MaskItemExt.Factory(item.Npcs.GetEqualsMask(rhs.Npcs, include), include);
            ret.LeveledNpcs = MaskItemExt.Factory(item.LeveledNpcs.GetEqualsMask(rhs.LeveledNpcs, include), include);
            ret.Keys = MaskItemExt.Factory(item.Keys.GetEqualsMask(rhs.Keys, include), include);
            ret.Ingestibles = MaskItemExt.Factory(item.Ingestibles.GetEqualsMask(rhs.Ingestibles, include), include);
            ret.IdleMarkers = MaskItemExt.Factory(item.IdleMarkers.GetEqualsMask(rhs.IdleMarkers, include), include);
            ret.ConstructibleObjects = MaskItemExt.Factory(item.ConstructibleObjects.GetEqualsMask(rhs.ConstructibleObjects, include), include);
            ret.Projectiles = MaskItemExt.Factory(item.Projectiles.GetEqualsMask(rhs.Projectiles, include), include);
            ret.Hazards = MaskItemExt.Factory(item.Hazards.GetEqualsMask(rhs.Hazards, include), include);
            ret.SoulGems = MaskItemExt.Factory(item.SoulGems.GetEqualsMask(rhs.SoulGems, include), include);
            ret.LeveledItems = MaskItemExt.Factory(item.LeveledItems.GetEqualsMask(rhs.LeveledItems, include), include);
        }
        
        public string ToString(
            ISkyrimModGetter item,
            string? name = null,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISkyrimModGetter item,
            FileGeneration fg,
            string? name = null,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SkyrimMod =>");
            }
            else
            {
                fg.AppendLine($"{name} (SkyrimMod) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISkyrimModGetter item,
            FileGeneration fg,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            if (printMask?.ModHeader?.Overall ?? true)
            {
                item.ModHeader?.ToString(fg, "ModHeader");
            }
            if (printMask?.GameSettings?.Overall ?? true)
            {
                item.GameSettings?.ToString(fg, "GameSettings");
            }
            if (printMask?.Keywords?.Overall ?? true)
            {
                item.Keywords?.ToString(fg, "Keywords");
            }
            if (printMask?.LocationReferenceTypes?.Overall ?? true)
            {
                item.LocationReferenceTypes?.ToString(fg, "LocationReferenceTypes");
            }
            if (printMask?.Actions?.Overall ?? true)
            {
                item.Actions?.ToString(fg, "Actions");
            }
            if (printMask?.TextureSets?.Overall ?? true)
            {
                item.TextureSets?.ToString(fg, "TextureSets");
            }
            if (printMask?.Globals?.Overall ?? true)
            {
                item.Globals?.ToString(fg, "Globals");
            }
            if (printMask?.Classes?.Overall ?? true)
            {
                item.Classes?.ToString(fg, "Classes");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                item.Factions?.ToString(fg, "Factions");
            }
            if (printMask?.HeadParts?.Overall ?? true)
            {
                item.HeadParts?.ToString(fg, "HeadParts");
            }
            if (printMask?.Hairs?.Overall ?? true)
            {
                item.Hairs?.ToString(fg, "Hairs");
            }
            if (printMask?.Eyes?.Overall ?? true)
            {
                item.Eyes?.ToString(fg, "Eyes");
            }
            if (printMask?.Races?.Overall ?? true)
            {
                item.Races?.ToString(fg, "Races");
            }
            if (printMask?.SoundMarkers?.Overall ?? true)
            {
                item.SoundMarkers?.ToString(fg, "SoundMarkers");
            }
            if (printMask?.AcousticSpaces?.Overall ?? true)
            {
                item.AcousticSpaces?.ToString(fg, "AcousticSpaces");
            }
            if (printMask?.MagicEffects?.Overall ?? true)
            {
                item.MagicEffects?.ToString(fg, "MagicEffects");
            }
            if (printMask?.LandscapeTextures?.Overall ?? true)
            {
                item.LandscapeTextures?.ToString(fg, "LandscapeTextures");
            }
            if (printMask?.ObjectEffects?.Overall ?? true)
            {
                item.ObjectEffects?.ToString(fg, "ObjectEffects");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                item.Spells?.ToString(fg, "Spells");
            }
            if (printMask?.Scrolls?.Overall ?? true)
            {
                item.Scrolls?.ToString(fg, "Scrolls");
            }
            if (printMask?.Activators?.Overall ?? true)
            {
                item.Activators?.ToString(fg, "Activators");
            }
            if (printMask?.TalkingActivators?.Overall ?? true)
            {
                item.TalkingActivators?.ToString(fg, "TalkingActivators");
            }
            if (printMask?.Armors?.Overall ?? true)
            {
                item.Armors?.ToString(fg, "Armors");
            }
            if (printMask?.Books?.Overall ?? true)
            {
                item.Books?.ToString(fg, "Books");
            }
            if (printMask?.Containers?.Overall ?? true)
            {
                item.Containers?.ToString(fg, "Containers");
            }
            if (printMask?.Doors?.Overall ?? true)
            {
                item.Doors?.ToString(fg, "Doors");
            }
            if (printMask?.Ingredients?.Overall ?? true)
            {
                item.Ingredients?.ToString(fg, "Ingredients");
            }
            if (printMask?.Lights?.Overall ?? true)
            {
                item.Lights?.ToString(fg, "Lights");
            }
            if (printMask?.MiscItems?.Overall ?? true)
            {
                item.MiscItems?.ToString(fg, "MiscItems");
            }
            if (printMask?.AlchemicalApparatuses?.Overall ?? true)
            {
                item.AlchemicalApparatuses?.ToString(fg, "AlchemicalApparatuses");
            }
            if (printMask?.Statics?.Overall ?? true)
            {
                item.Statics?.ToString(fg, "Statics");
            }
            if (printMask?.MoveableStatics?.Overall ?? true)
            {
                item.MoveableStatics?.ToString(fg, "MoveableStatics");
            }
            if (printMask?.Grasses?.Overall ?? true)
            {
                item.Grasses?.ToString(fg, "Grasses");
            }
            if (printMask?.Trees?.Overall ?? true)
            {
                item.Trees?.ToString(fg, "Trees");
            }
            if (printMask?.Florae?.Overall ?? true)
            {
                item.Florae?.ToString(fg, "Florae");
            }
            if (printMask?.Furniture?.Overall ?? true)
            {
                item.Furniture?.ToString(fg, "Furniture");
            }
            if (printMask?.Weapons?.Overall ?? true)
            {
                item.Weapons?.ToString(fg, "Weapons");
            }
            if (printMask?.Ammunitions?.Overall ?? true)
            {
                item.Ammunitions?.ToString(fg, "Ammunitions");
            }
            if (printMask?.Npcs?.Overall ?? true)
            {
                item.Npcs?.ToString(fg, "Npcs");
            }
            if (printMask?.LeveledNpcs?.Overall ?? true)
            {
                item.LeveledNpcs?.ToString(fg, "LeveledNpcs");
            }
            if (printMask?.Keys?.Overall ?? true)
            {
                item.Keys?.ToString(fg, "Keys");
            }
            if (printMask?.Ingestibles?.Overall ?? true)
            {
                item.Ingestibles?.ToString(fg, "Ingestibles");
            }
            if (printMask?.IdleMarkers?.Overall ?? true)
            {
                item.IdleMarkers?.ToString(fg, "IdleMarkers");
            }
            if (printMask?.ConstructibleObjects?.Overall ?? true)
            {
                item.ConstructibleObjects?.ToString(fg, "ConstructibleObjects");
            }
            if (printMask?.Projectiles?.Overall ?? true)
            {
                item.Projectiles?.ToString(fg, "Projectiles");
            }
            if (printMask?.Hazards?.Overall ?? true)
            {
                item.Hazards?.ToString(fg, "Hazards");
            }
            if (printMask?.SoulGems?.Overall ?? true)
            {
                item.SoulGems?.ToString(fg, "SoulGems");
            }
            if (printMask?.LeveledItems?.Overall ?? true)
            {
                item.LeveledItems?.ToString(fg, "LeveledItems");
            }
        }
        
        public bool HasBeenSet(
            ISkyrimModGetter item,
            SkyrimMod.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ISkyrimModGetter item,
            SkyrimMod.Mask<bool> mask)
        {
            mask.ModHeader = new MaskItem<bool, ModHeader.Mask<bool>?>(true, item.ModHeader?.GetHasBeenSetMask());
            mask.GameSettings = new MaskItem<bool, Group.Mask<bool>?>(true, item.GameSettings?.GetHasBeenSetMask());
            mask.Keywords = new MaskItem<bool, Group.Mask<bool>?>(true, item.Keywords?.GetHasBeenSetMask());
            mask.LocationReferenceTypes = new MaskItem<bool, Group.Mask<bool>?>(true, item.LocationReferenceTypes?.GetHasBeenSetMask());
            mask.Actions = new MaskItem<bool, Group.Mask<bool>?>(true, item.Actions?.GetHasBeenSetMask());
            mask.TextureSets = new MaskItem<bool, Group.Mask<bool>?>(true, item.TextureSets?.GetHasBeenSetMask());
            mask.Globals = new MaskItem<bool, Group.Mask<bool>?>(true, item.Globals?.GetHasBeenSetMask());
            mask.Classes = new MaskItem<bool, Group.Mask<bool>?>(true, item.Classes?.GetHasBeenSetMask());
            mask.Factions = new MaskItem<bool, Group.Mask<bool>?>(true, item.Factions?.GetHasBeenSetMask());
            mask.HeadParts = new MaskItem<bool, Group.Mask<bool>?>(true, item.HeadParts?.GetHasBeenSetMask());
            mask.Hairs = new MaskItem<bool, Group.Mask<bool>?>(true, item.Hairs?.GetHasBeenSetMask());
            mask.Eyes = new MaskItem<bool, Group.Mask<bool>?>(true, item.Eyes?.GetHasBeenSetMask());
            mask.Races = new MaskItem<bool, Group.Mask<bool>?>(true, item.Races?.GetHasBeenSetMask());
            mask.SoundMarkers = new MaskItem<bool, Group.Mask<bool>?>(true, item.SoundMarkers?.GetHasBeenSetMask());
            mask.AcousticSpaces = new MaskItem<bool, Group.Mask<bool>?>(true, item.AcousticSpaces?.GetHasBeenSetMask());
            mask.MagicEffects = new MaskItem<bool, Group.Mask<bool>?>(true, item.MagicEffects?.GetHasBeenSetMask());
            mask.LandscapeTextures = new MaskItem<bool, Group.Mask<bool>?>(true, item.LandscapeTextures?.GetHasBeenSetMask());
            mask.ObjectEffects = new MaskItem<bool, Group.Mask<bool>?>(true, item.ObjectEffects?.GetHasBeenSetMask());
            mask.Spells = new MaskItem<bool, Group.Mask<bool>?>(true, item.Spells?.GetHasBeenSetMask());
            mask.Scrolls = new MaskItem<bool, Group.Mask<bool>?>(true, item.Scrolls?.GetHasBeenSetMask());
            mask.Activators = new MaskItem<bool, Group.Mask<bool>?>(true, item.Activators?.GetHasBeenSetMask());
            mask.TalkingActivators = new MaskItem<bool, Group.Mask<bool>?>(true, item.TalkingActivators?.GetHasBeenSetMask());
            mask.Armors = new MaskItem<bool, Group.Mask<bool>?>(true, item.Armors?.GetHasBeenSetMask());
            mask.Books = new MaskItem<bool, Group.Mask<bool>?>(true, item.Books?.GetHasBeenSetMask());
            mask.Containers = new MaskItem<bool, Group.Mask<bool>?>(true, item.Containers?.GetHasBeenSetMask());
            mask.Doors = new MaskItem<bool, Group.Mask<bool>?>(true, item.Doors?.GetHasBeenSetMask());
            mask.Ingredients = new MaskItem<bool, Group.Mask<bool>?>(true, item.Ingredients?.GetHasBeenSetMask());
            mask.Lights = new MaskItem<bool, Group.Mask<bool>?>(true, item.Lights?.GetHasBeenSetMask());
            mask.MiscItems = new MaskItem<bool, Group.Mask<bool>?>(true, item.MiscItems?.GetHasBeenSetMask());
            mask.AlchemicalApparatuses = new MaskItem<bool, Group.Mask<bool>?>(true, item.AlchemicalApparatuses?.GetHasBeenSetMask());
            mask.Statics = new MaskItem<bool, Group.Mask<bool>?>(true, item.Statics?.GetHasBeenSetMask());
            mask.MoveableStatics = new MaskItem<bool, Group.Mask<bool>?>(true, item.MoveableStatics?.GetHasBeenSetMask());
            mask.Grasses = new MaskItem<bool, Group.Mask<bool>?>(true, item.Grasses?.GetHasBeenSetMask());
            mask.Trees = new MaskItem<bool, Group.Mask<bool>?>(true, item.Trees?.GetHasBeenSetMask());
            mask.Florae = new MaskItem<bool, Group.Mask<bool>?>(true, item.Florae?.GetHasBeenSetMask());
            mask.Furniture = new MaskItem<bool, Group.Mask<bool>?>(true, item.Furniture?.GetHasBeenSetMask());
            mask.Weapons = new MaskItem<bool, Group.Mask<bool>?>(true, item.Weapons?.GetHasBeenSetMask());
            mask.Ammunitions = new MaskItem<bool, Group.Mask<bool>?>(true, item.Ammunitions?.GetHasBeenSetMask());
            mask.Npcs = new MaskItem<bool, Group.Mask<bool>?>(true, item.Npcs?.GetHasBeenSetMask());
            mask.LeveledNpcs = new MaskItem<bool, Group.Mask<bool>?>(true, item.LeveledNpcs?.GetHasBeenSetMask());
            mask.Keys = new MaskItem<bool, Group.Mask<bool>?>(true, item.Keys?.GetHasBeenSetMask());
            mask.Ingestibles = new MaskItem<bool, Group.Mask<bool>?>(true, item.Ingestibles?.GetHasBeenSetMask());
            mask.IdleMarkers = new MaskItem<bool, Group.Mask<bool>?>(true, item.IdleMarkers?.GetHasBeenSetMask());
            mask.ConstructibleObjects = new MaskItem<bool, Group.Mask<bool>?>(true, item.ConstructibleObjects?.GetHasBeenSetMask());
            mask.Projectiles = new MaskItem<bool, Group.Mask<bool>?>(true, item.Projectiles?.GetHasBeenSetMask());
            mask.Hazards = new MaskItem<bool, Group.Mask<bool>?>(true, item.Hazards?.GetHasBeenSetMask());
            mask.SoulGems = new MaskItem<bool, Group.Mask<bool>?>(true, item.SoulGems?.GetHasBeenSetMask());
            mask.LeveledItems = new MaskItem<bool, Group.Mask<bool>?>(true, item.LeveledItems?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISkyrimModGetter? lhs,
            ISkyrimModGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.ModHeader, rhs.ModHeader)) return false;
            if (!object.Equals(lhs.GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(lhs.Keywords, rhs.Keywords)) return false;
            if (!object.Equals(lhs.LocationReferenceTypes, rhs.LocationReferenceTypes)) return false;
            if (!object.Equals(lhs.Actions, rhs.Actions)) return false;
            if (!object.Equals(lhs.TextureSets, rhs.TextureSets)) return false;
            if (!object.Equals(lhs.Globals, rhs.Globals)) return false;
            if (!object.Equals(lhs.Classes, rhs.Classes)) return false;
            if (!object.Equals(lhs.Factions, rhs.Factions)) return false;
            if (!object.Equals(lhs.HeadParts, rhs.HeadParts)) return false;
            if (!object.Equals(lhs.Hairs, rhs.Hairs)) return false;
            if (!object.Equals(lhs.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(lhs.Races, rhs.Races)) return false;
            if (!object.Equals(lhs.SoundMarkers, rhs.SoundMarkers)) return false;
            if (!object.Equals(lhs.AcousticSpaces, rhs.AcousticSpaces)) return false;
            if (!object.Equals(lhs.MagicEffects, rhs.MagicEffects)) return false;
            if (!object.Equals(lhs.LandscapeTextures, rhs.LandscapeTextures)) return false;
            if (!object.Equals(lhs.ObjectEffects, rhs.ObjectEffects)) return false;
            if (!object.Equals(lhs.Spells, rhs.Spells)) return false;
            if (!object.Equals(lhs.Scrolls, rhs.Scrolls)) return false;
            if (!object.Equals(lhs.Activators, rhs.Activators)) return false;
            if (!object.Equals(lhs.TalkingActivators, rhs.TalkingActivators)) return false;
            if (!object.Equals(lhs.Armors, rhs.Armors)) return false;
            if (!object.Equals(lhs.Books, rhs.Books)) return false;
            if (!object.Equals(lhs.Containers, rhs.Containers)) return false;
            if (!object.Equals(lhs.Doors, rhs.Doors)) return false;
            if (!object.Equals(lhs.Ingredients, rhs.Ingredients)) return false;
            if (!object.Equals(lhs.Lights, rhs.Lights)) return false;
            if (!object.Equals(lhs.MiscItems, rhs.MiscItems)) return false;
            if (!object.Equals(lhs.AlchemicalApparatuses, rhs.AlchemicalApparatuses)) return false;
            if (!object.Equals(lhs.Statics, rhs.Statics)) return false;
            if (!object.Equals(lhs.MoveableStatics, rhs.MoveableStatics)) return false;
            if (!object.Equals(lhs.Grasses, rhs.Grasses)) return false;
            if (!object.Equals(lhs.Trees, rhs.Trees)) return false;
            if (!object.Equals(lhs.Florae, rhs.Florae)) return false;
            if (!object.Equals(lhs.Furniture, rhs.Furniture)) return false;
            if (!object.Equals(lhs.Weapons, rhs.Weapons)) return false;
            if (!object.Equals(lhs.Ammunitions, rhs.Ammunitions)) return false;
            if (!object.Equals(lhs.Npcs, rhs.Npcs)) return false;
            if (!object.Equals(lhs.LeveledNpcs, rhs.LeveledNpcs)) return false;
            if (!object.Equals(lhs.Keys, rhs.Keys)) return false;
            if (!object.Equals(lhs.Ingestibles, rhs.Ingestibles)) return false;
            if (!object.Equals(lhs.IdleMarkers, rhs.IdleMarkers)) return false;
            if (!object.Equals(lhs.ConstructibleObjects, rhs.ConstructibleObjects)) return false;
            if (!object.Equals(lhs.Projectiles, rhs.Projectiles)) return false;
            if (!object.Equals(lhs.Hazards, rhs.Hazards)) return false;
            if (!object.Equals(lhs.SoulGems, rhs.SoulGems)) return false;
            if (!object.Equals(lhs.LeveledItems, rhs.LeveledItems)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ISkyrimModGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ModHeader);
            hash.Add(item.GameSettings);
            hash.Add(item.Keywords);
            hash.Add(item.LocationReferenceTypes);
            hash.Add(item.Actions);
            hash.Add(item.TextureSets);
            hash.Add(item.Globals);
            hash.Add(item.Classes);
            hash.Add(item.Factions);
            hash.Add(item.HeadParts);
            hash.Add(item.Hairs);
            hash.Add(item.Eyes);
            hash.Add(item.Races);
            hash.Add(item.SoundMarkers);
            hash.Add(item.AcousticSpaces);
            hash.Add(item.MagicEffects);
            hash.Add(item.LandscapeTextures);
            hash.Add(item.ObjectEffects);
            hash.Add(item.Spells);
            hash.Add(item.Scrolls);
            hash.Add(item.Activators);
            hash.Add(item.TalkingActivators);
            hash.Add(item.Armors);
            hash.Add(item.Books);
            hash.Add(item.Containers);
            hash.Add(item.Doors);
            hash.Add(item.Ingredients);
            hash.Add(item.Lights);
            hash.Add(item.MiscItems);
            hash.Add(item.AlchemicalApparatuses);
            hash.Add(item.Statics);
            hash.Add(item.MoveableStatics);
            hash.Add(item.Grasses);
            hash.Add(item.Trees);
            hash.Add(item.Florae);
            hash.Add(item.Furniture);
            hash.Add(item.Weapons);
            hash.Add(item.Ammunitions);
            hash.Add(item.Npcs);
            hash.Add(item.LeveledNpcs);
            hash.Add(item.Keys);
            hash.Add(item.Ingestibles);
            hash.Add(item.IdleMarkers);
            hash.Add(item.ConstructibleObjects);
            hash.Add(item.Projectiles);
            hash.Add(item.Hazards);
            hash.Add(item.SoulGems);
            hash.Add(item.LeveledItems);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SkyrimMod.GetNew();
        }
        
        #region Mutagen
        public object GetGroup<T>(ISkyrimModGetter obj)
            where T : IMajorRecordCommonGetter
        {
            switch (typeof(T).Name)
            {
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    return obj.GameSettings.RecordCache;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    return obj.Keywords.RecordCache;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    return obj.LocationReferenceTypes.RecordCache;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    return obj.Actions.RecordCache;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    return obj.TextureSets.RecordCache;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    return obj.Globals.RecordCache;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    return obj.Classes.RecordCache;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    return obj.Factions.RecordCache;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    return obj.HeadParts.RecordCache;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    return obj.Hairs.RecordCache;
                case "Eyes":
                case "IEyesGetter":
                case "IEyes":
                case "IEyesInternal":
                    return obj.Eyes.RecordCache;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    return obj.Races.RecordCache;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    return obj.SoundMarkers.RecordCache;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    return obj.AcousticSpaces.RecordCache;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    return obj.MagicEffects.RecordCache;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    return obj.LandscapeTextures.RecordCache;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    return obj.ObjectEffects.RecordCache;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    return obj.Spells.RecordCache;
                case "Scroll":
                case "IScrollGetter":
                case "IScroll":
                case "IScrollInternal":
                    return obj.Scrolls.RecordCache;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    return obj.Activators.RecordCache;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    return obj.TalkingActivators.RecordCache;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    return obj.Armors.RecordCache;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    return obj.Books.RecordCache;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    return obj.Containers.RecordCache;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    return obj.Doors.RecordCache;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    return obj.Ingredients.RecordCache;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    return obj.Lights.RecordCache;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    return obj.MiscItems.RecordCache;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    return obj.AlchemicalApparatuses.RecordCache;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    return obj.Statics.RecordCache;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    return obj.MoveableStatics.RecordCache;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    return obj.Grasses.RecordCache;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    return obj.Trees.RecordCache;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    return obj.Florae.RecordCache;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    return obj.Furniture.RecordCache;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    return obj.Weapons.RecordCache;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    return obj.Ammunitions.RecordCache;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    return obj.Npcs.RecordCache;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    return obj.LeveledNpcs.RecordCache;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    return obj.Keys.RecordCache;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    return obj.Ingestibles.RecordCache;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    return obj.IdleMarkers.RecordCache;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    return obj.ConstructibleObjects.RecordCache;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    return obj.Projectiles.RecordCache;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    return obj.Hazards.RecordCache;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    return obj.SoulGems.RecordCache;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    return obj.LeveledItems.RecordCache;
                default:
                    throw new ArgumentException($"Unknown group type: {typeof(T)}");
            }
        }
        
        const int CutCount = 100;
        public static void WriteParallel(
            ISkyrimModGetter item,
            Stream stream,
            BinaryWriteParameters param,
            ModKey modKey)
        {
            var masterRefs = new MasterReferenceReader(item.ModKey, item.MasterReferences);
            var modHeader = item.ModHeader.DeepCopy() as ModHeader;
            modHeader.Flags.SetFlag(ModHeader.HeaderFlag.Master, modKey.Master);
            modHeader.WriteToBinary(new MutagenWriter(stream, GameConstants.Skyrim, masterRefs));
            Stream[] outputStreams = new Stream[47];
            List<Action> toDo = new List<Action>();
            toDo.Add(() => WriteGroupParallel(item.GameSettings, masterRefs, 0, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Keywords, masterRefs, 1, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LocationReferenceTypes, masterRefs, 2, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Actions, masterRefs, 3, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.TextureSets, masterRefs, 4, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Globals, masterRefs, 5, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Classes, masterRefs, 6, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Factions, masterRefs, 7, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.HeadParts, masterRefs, 8, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Hairs, masterRefs, 9, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Eyes, masterRefs, 10, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Races, masterRefs, 11, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.SoundMarkers, masterRefs, 12, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.AcousticSpaces, masterRefs, 13, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.MagicEffects, masterRefs, 14, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LandscapeTextures, masterRefs, 15, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.ObjectEffects, masterRefs, 16, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Spells, masterRefs, 17, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Scrolls, masterRefs, 18, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Activators, masterRefs, 19, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.TalkingActivators, masterRefs, 20, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Armors, masterRefs, 21, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Books, masterRefs, 22, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Containers, masterRefs, 23, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Doors, masterRefs, 24, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Ingredients, masterRefs, 25, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Lights, masterRefs, 26, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.MiscItems, masterRefs, 27, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.AlchemicalApparatuses, masterRefs, 28, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Statics, masterRefs, 29, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.MoveableStatics, masterRefs, 30, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Grasses, masterRefs, 31, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Trees, masterRefs, 32, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Florae, masterRefs, 33, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Furniture, masterRefs, 34, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Weapons, masterRefs, 35, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Ammunitions, masterRefs, 36, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Npcs, masterRefs, 37, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LeveledNpcs, masterRefs, 38, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Keys, masterRefs, 39, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Ingestibles, masterRefs, 40, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.IdleMarkers, masterRefs, 41, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.ConstructibleObjects, masterRefs, 42, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Projectiles, masterRefs, 43, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Hazards, masterRefs, 44, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.SoulGems, masterRefs, 45, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.LeveledItems, masterRefs, 46, outputStreams));
            Parallel.Invoke(toDo.ToArray());
            UtilityTranslation.CompileStreamsInto(
                outputStreams.NotNull(),
                stream);
        }
        
        public static void WriteGroupParallel<T>(
            IGroupGetter<T> group,
            MasterReferenceReader masters,
            int targetIndex,
            Stream[] streamDepositArray)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            if (group.RecordCache.Count == 0) return;
            var cuts = group.Records.Cut(CutCount).ToArray();
            Stream[] subStreams = new Stream[cuts.Length + 1];
            byte[] groupBytes = new byte[GameConstants.Skyrim.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), Group_Registration.GRUP_HEADER.TypeInt);
            var groupByteStream = new MemoryStream(groupBytes);
            using (var stream = new MutagenWriter(groupByteStream, GameConstants.Skyrim, dispose: false))
            {
                stream.Position += 8;
                GroupBinaryWriteTranslation.WriteEmbedded<T>(group, stream);
            }
            subStreams[0] = groupByteStream;
            Parallel.ForEach(cuts, (cutItems, state, counter) =>
            {
                MemoryTributary trib = new MemoryTributary();
                using (var stream = new MutagenWriter(trib, GameConstants.Skyrim, masters, dispose: false))
                {
                    foreach (var item in cutItems)
                    {
                        item.WriteToBinary(stream);
                    }
                }
                subStreams[(int)counter + 1] = trib;
            });
            UtilityTranslation.CompileSetGroupLength(subStreams, groupBytes);
            streamDepositArray[targetIndex] = new CompositeReadStream(subStreams, resetPositions: true);
        }
        
        public IEnumerable<FormKey> GetLinkFormKeys(ISkyrimModGetter obj)
        {
            foreach (var item in obj.ModHeader.LinkFormKeys)
            {
                yield return item;
            }
            if (obj.GameSettings is ILinkedFormKeyContainer GameSettingslinkCont)
            {
                foreach (var item in GameSettingslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Keywords is ILinkedFormKeyContainer KeywordslinkCont)
            {
                foreach (var item in KeywordslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.LocationReferenceTypes is ILinkedFormKeyContainer LocationReferenceTypeslinkCont)
            {
                foreach (var item in LocationReferenceTypeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Actions is ILinkedFormKeyContainer ActionslinkCont)
            {
                foreach (var item in ActionslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.TextureSets is ILinkedFormKeyContainer TextureSetslinkCont)
            {
                foreach (var item in TextureSetslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Globals is ILinkedFormKeyContainer GlobalslinkCont)
            {
                foreach (var item in GlobalslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Classes is ILinkedFormKeyContainer ClasseslinkCont)
            {
                foreach (var item in ClasseslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Factions is ILinkedFormKeyContainer FactionslinkCont)
            {
                foreach (var item in FactionslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.HeadParts is ILinkedFormKeyContainer HeadPartslinkCont)
            {
                foreach (var item in HeadPartslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Hairs is ILinkedFormKeyContainer HairslinkCont)
            {
                foreach (var item in HairslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Eyes is ILinkedFormKeyContainer EyeslinkCont)
            {
                foreach (var item in EyeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Races is ILinkedFormKeyContainer RaceslinkCont)
            {
                foreach (var item in RaceslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.SoundMarkers is ILinkedFormKeyContainer SoundMarkerslinkCont)
            {
                foreach (var item in SoundMarkerslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.AcousticSpaces is ILinkedFormKeyContainer AcousticSpaceslinkCont)
            {
                foreach (var item in AcousticSpaceslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.MagicEffects is ILinkedFormKeyContainer MagicEffectslinkCont)
            {
                foreach (var item in MagicEffectslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.LandscapeTextures is ILinkedFormKeyContainer LandscapeTextureslinkCont)
            {
                foreach (var item in LandscapeTextureslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.ObjectEffects is ILinkedFormKeyContainer ObjectEffectslinkCont)
            {
                foreach (var item in ObjectEffectslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Spells is ILinkedFormKeyContainer SpellslinkCont)
            {
                foreach (var item in SpellslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Scrolls is ILinkedFormKeyContainer ScrollslinkCont)
            {
                foreach (var item in ScrollslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Activators is ILinkedFormKeyContainer ActivatorslinkCont)
            {
                foreach (var item in ActivatorslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.TalkingActivators is ILinkedFormKeyContainer TalkingActivatorslinkCont)
            {
                foreach (var item in TalkingActivatorslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Armors is ILinkedFormKeyContainer ArmorslinkCont)
            {
                foreach (var item in ArmorslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Books is ILinkedFormKeyContainer BookslinkCont)
            {
                foreach (var item in BookslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Containers is ILinkedFormKeyContainer ContainerslinkCont)
            {
                foreach (var item in ContainerslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Doors is ILinkedFormKeyContainer DoorslinkCont)
            {
                foreach (var item in DoorslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Ingredients is ILinkedFormKeyContainer IngredientslinkCont)
            {
                foreach (var item in IngredientslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Lights is ILinkedFormKeyContainer LightslinkCont)
            {
                foreach (var item in LightslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.MiscItems is ILinkedFormKeyContainer MiscItemslinkCont)
            {
                foreach (var item in MiscItemslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.AlchemicalApparatuses is ILinkedFormKeyContainer AlchemicalApparatuseslinkCont)
            {
                foreach (var item in AlchemicalApparatuseslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Statics is ILinkedFormKeyContainer StaticslinkCont)
            {
                foreach (var item in StaticslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.MoveableStatics is ILinkedFormKeyContainer MoveableStaticslinkCont)
            {
                foreach (var item in MoveableStaticslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Grasses is ILinkedFormKeyContainer GrasseslinkCont)
            {
                foreach (var item in GrasseslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Trees is ILinkedFormKeyContainer TreeslinkCont)
            {
                foreach (var item in TreeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Florae is ILinkedFormKeyContainer FloraelinkCont)
            {
                foreach (var item in FloraelinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Furniture is ILinkedFormKeyContainer FurniturelinkCont)
            {
                foreach (var item in FurniturelinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Weapons is ILinkedFormKeyContainer WeaponslinkCont)
            {
                foreach (var item in WeaponslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Ammunitions is ILinkedFormKeyContainer AmmunitionslinkCont)
            {
                foreach (var item in AmmunitionslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Npcs is ILinkedFormKeyContainer NpcslinkCont)
            {
                foreach (var item in NpcslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.LeveledNpcs is ILinkedFormKeyContainer LeveledNpcslinkCont)
            {
                foreach (var item in LeveledNpcslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Keys is ILinkedFormKeyContainer KeyslinkCont)
            {
                foreach (var item in KeyslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Ingestibles is ILinkedFormKeyContainer IngestibleslinkCont)
            {
                foreach (var item in IngestibleslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.IdleMarkers is ILinkedFormKeyContainer IdleMarkerslinkCont)
            {
                foreach (var item in IdleMarkerslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.ConstructibleObjects is ILinkedFormKeyContainer ConstructibleObjectslinkCont)
            {
                foreach (var item in ConstructibleObjectslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Projectiles is ILinkedFormKeyContainer ProjectileslinkCont)
            {
                foreach (var item in ProjectileslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Hazards is ILinkedFormKeyContainer HazardslinkCont)
            {
                foreach (var item in HazardslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.SoulGems is ILinkedFormKeyContainer SoulGemslinkCont)
            {
                foreach (var item in SoulGemslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.LeveledItems is ILinkedFormKeyContainer LeveledItemslinkCont)
            {
                foreach (var item in LeveledItemslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(ISkyrimModGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(ISkyrimModGetter obj)
        {
            foreach (var item in obj.GameSettings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keywords.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Actions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TextureSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Globals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Classes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.HeadParts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Hairs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Eyes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AcousticSpaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MagicEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LandscapeTextures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Spells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Scrolls.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Activators.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TalkingActivators.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Armors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Books.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Containers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Doors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ingredients.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Lights.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MiscItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AlchemicalApparatuses.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Statics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MoveableStatics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Grasses.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Trees.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Florae.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Furniture.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ammunitions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledNpcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keys.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ingestibles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.IdleMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ConstructibleObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Projectiles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Hazards.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoulGems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledItems.EnumerateMajorRecords())
            {
                yield return item;
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(ISkyrimModGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            switch (typeof(TMajor).Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecordCommonGetter":
                case "MajorRecord":
                case "ISkyrimMajorRecord":
                case "ISkyrimMajorRecordGetter":
                case "SkyrimMajorRecord":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return (item as TMajor)!;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in obj.Keywords.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    foreach (var item in obj.Actions.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in obj.TextureSets.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in obj.Globals.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in obj.Classes.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in obj.Factions.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    foreach (var item in obj.HeadParts.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    foreach (var item in obj.Hairs.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Eyes":
                case "IEyesGetter":
                case "IEyes":
                case "IEyesInternal":
                    foreach (var item in obj.Eyes.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in obj.Races.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    foreach (var item in obj.SoundMarkers.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    foreach (var item in obj.AcousticSpaces.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in obj.MagicEffects.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    foreach (var item in obj.LandscapeTextures.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    foreach (var item in obj.ObjectEffects.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    foreach (var item in obj.Spells.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Scroll":
                case "IScrollGetter":
                case "IScroll":
                case "IScrollInternal":
                    foreach (var item in obj.Scrolls.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in obj.Activators.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    foreach (var item in obj.TalkingActivators.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in obj.Armors.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in obj.Books.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in obj.Containers.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in obj.Doors.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    foreach (var item in obj.Ingredients.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in obj.Lights.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    foreach (var item in obj.MiscItems.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    foreach (var item in obj.AlchemicalApparatuses.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in obj.Statics.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    foreach (var item in obj.MoveableStatics.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in obj.Grasses.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    foreach (var item in obj.Trees.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in obj.Florae.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    foreach (var item in obj.Furniture.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in obj.Weapons.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    foreach (var item in obj.Ammunitions.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in obj.Npcs.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    foreach (var item in obj.LeveledNpcs.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in obj.Keys.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    foreach (var item in obj.Ingestibles.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    foreach (var item in obj.IdleMarkers.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    foreach (var item in obj.ConstructibleObjects.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    foreach (var item in obj.Projectiles.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    foreach (var item in obj.Hazards.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    foreach (var item in obj.SoulGems.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in obj.LeveledItems.EnumerateMajorRecords<TMajor>())
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    throw new ArgumentException();
            }
        }
        
        #endregion
        
    }
    public partial class SkyrimModSetterTranslationCommon
    {
        public static readonly SkyrimModSetterTranslationCommon Instance = new SkyrimModSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ISkyrimMod item,
            ISkyrimModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ModHeader) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ModHeader);
                try
                {
                    item.ModHeader.DeepCopyIn(
                        rhs: rhs.ModHeader,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ModHeader));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.GameSettings) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.GameSettings);
                try
                {
                    item.GameSettings.DeepCopyIn(
                        rhs: rhs.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.GameSettings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Keywords);
                try
                {
                    item.Keywords.DeepCopyIn(
                        rhs: rhs.Keywords,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Keywords));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LocationReferenceTypes);
                try
                {
                    item.LocationReferenceTypes.DeepCopyIn(
                        rhs: rhs.LocationReferenceTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LocationReferenceTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Actions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Actions);
                try
                {
                    item.Actions.DeepCopyIn(
                        rhs: rhs.Actions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Actions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.TextureSets) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.TextureSets);
                try
                {
                    item.TextureSets.DeepCopyIn(
                        rhs: rhs.TextureSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.TextureSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Globals) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Globals);
                try
                {
                    item.Globals.DeepCopyIn(
                        rhs: rhs.Globals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Globals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Classes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Classes);
                try
                {
                    item.Classes.DeepCopyIn(
                        rhs: rhs.Classes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Classes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Factions);
                try
                {
                    item.Factions.DeepCopyIn(
                        rhs: rhs.Factions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Factions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.HeadParts) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.HeadParts);
                try
                {
                    item.HeadParts.DeepCopyIn(
                        rhs: rhs.HeadParts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.HeadParts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Hairs) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Hairs);
                try
                {
                    item.Hairs.DeepCopyIn(
                        rhs: rhs.Hairs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Hairs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Eyes);
                try
                {
                    item.Eyes.DeepCopyIn(
                        rhs: rhs.Eyes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Eyes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Races) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Races);
                try
                {
                    item.Races.DeepCopyIn(
                        rhs: rhs.Races,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Races));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundMarkers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoundMarkers);
                try
                {
                    item.SoundMarkers.DeepCopyIn(
                        rhs: rhs.SoundMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoundMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AcousticSpaces) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AcousticSpaces);
                try
                {
                    item.AcousticSpaces.DeepCopyIn(
                        rhs: rhs.AcousticSpaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AcousticSpaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MagicEffects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MagicEffects);
                try
                {
                    item.MagicEffects.DeepCopyIn(
                        rhs: rhs.MagicEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MagicEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LandscapeTextures) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LandscapeTextures);
                try
                {
                    item.LandscapeTextures.DeepCopyIn(
                        rhs: rhs.LandscapeTextures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LandscapeTextures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ObjectEffects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ObjectEffects);
                try
                {
                    item.ObjectEffects.DeepCopyIn(
                        rhs: rhs.ObjectEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ObjectEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Spells);
                try
                {
                    item.Spells.DeepCopyIn(
                        rhs: rhs.Spells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Spells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Scrolls) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Scrolls);
                try
                {
                    item.Scrolls.DeepCopyIn(
                        rhs: rhs.Scrolls,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Scrolls));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Activators) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Activators);
                try
                {
                    item.Activators.DeepCopyIn(
                        rhs: rhs.Activators,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Activators));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.TalkingActivators) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.TalkingActivators);
                try
                {
                    item.TalkingActivators.DeepCopyIn(
                        rhs: rhs.TalkingActivators,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.TalkingActivators));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Armors) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Armors);
                try
                {
                    item.Armors.DeepCopyIn(
                        rhs: rhs.Armors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Armors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Books) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Books);
                try
                {
                    item.Books.DeepCopyIn(
                        rhs: rhs.Books,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Books));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Containers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Containers);
                try
                {
                    item.Containers.DeepCopyIn(
                        rhs: rhs.Containers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Containers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Doors) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Doors);
                try
                {
                    item.Doors.DeepCopyIn(
                        rhs: rhs.Doors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Doors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ingredients) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ingredients);
                try
                {
                    item.Ingredients.DeepCopyIn(
                        rhs: rhs.Ingredients,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ingredients));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Lights) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Lights);
                try
                {
                    item.Lights.DeepCopyIn(
                        rhs: rhs.Lights,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Lights));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MiscItems) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MiscItems);
                try
                {
                    item.MiscItems.DeepCopyIn(
                        rhs: rhs.MiscItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MiscItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AlchemicalApparatuses) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AlchemicalApparatuses);
                try
                {
                    item.AlchemicalApparatuses.DeepCopyIn(
                        rhs: rhs.AlchemicalApparatuses,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AlchemicalApparatuses));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Statics) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Statics);
                try
                {
                    item.Statics.DeepCopyIn(
                        rhs: rhs.Statics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Statics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MoveableStatics) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MoveableStatics);
                try
                {
                    item.MoveableStatics.DeepCopyIn(
                        rhs: rhs.MoveableStatics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MoveableStatics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Grasses) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Grasses);
                try
                {
                    item.Grasses.DeepCopyIn(
                        rhs: rhs.Grasses,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Grasses));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Trees) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Trees);
                try
                {
                    item.Trees.DeepCopyIn(
                        rhs: rhs.Trees,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Trees));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Florae) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Florae);
                try
                {
                    item.Florae.DeepCopyIn(
                        rhs: rhs.Florae,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Florae));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Furniture) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Furniture);
                try
                {
                    item.Furniture.DeepCopyIn(
                        rhs: rhs.Furniture,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Furniture));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Weapons) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Weapons);
                try
                {
                    item.Weapons.DeepCopyIn(
                        rhs: rhs.Weapons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Weapons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ammunitions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ammunitions);
                try
                {
                    item.Ammunitions.DeepCopyIn(
                        rhs: rhs.Ammunitions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ammunitions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Npcs) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Npcs);
                try
                {
                    item.Npcs.DeepCopyIn(
                        rhs: rhs.Npcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Npcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledNpcs) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LeveledNpcs);
                try
                {
                    item.LeveledNpcs.DeepCopyIn(
                        rhs: rhs.LeveledNpcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LeveledNpcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Keys) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Keys);
                try
                {
                    item.Keys.DeepCopyIn(
                        rhs: rhs.Keys,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Keys));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ingestibles) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ingestibles);
                try
                {
                    item.Ingestibles.DeepCopyIn(
                        rhs: rhs.Ingestibles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ingestibles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.IdleMarkers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.IdleMarkers);
                try
                {
                    item.IdleMarkers.DeepCopyIn(
                        rhs: rhs.IdleMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.IdleMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ConstructibleObjects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ConstructibleObjects);
                try
                {
                    item.ConstructibleObjects.DeepCopyIn(
                        rhs: rhs.ConstructibleObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ConstructibleObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Projectiles) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Projectiles);
                try
                {
                    item.Projectiles.DeepCopyIn(
                        rhs: rhs.Projectiles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Projectiles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Hazards) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Hazards);
                try
                {
                    item.Hazards.DeepCopyIn(
                        rhs: rhs.Hazards,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Hazards));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoulGems) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoulGems);
                try
                {
                    item.SoulGems.DeepCopyIn(
                        rhs: rhs.SoulGems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoulGems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledItems) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LeveledItems);
                try
                {
                    item.LeveledItems.DeepCopyIn(
                        rhs: rhs.LeveledItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LeveledItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public SkyrimMod DeepCopy(
            ISkyrimModGetter item,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            SkyrimMod ret = (SkyrimMod)((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SkyrimMod DeepCopy(
            ISkyrimModGetter item,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            SkyrimMod ret = (SkyrimMod)((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SkyrimMod DeepCopy(
            ISkyrimModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SkyrimMod ret = (SkyrimMod)((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class SkyrimMod
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkyrimMod_Registration.Instance;
        public static SkyrimMod_Registration Registration => SkyrimMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SkyrimModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SkyrimModSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SkyrimModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SkyrimModXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static SkyrimModXmlWriteTranslation Instance = new SkyrimModXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISkyrimModGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ModHeader) ?? true))
            {
                var ModHeaderItem = item.ModHeader;
                ((ModHeaderXmlWriteTranslation)((IXmlItem)ModHeaderItem).XmlWriteTranslator).Write(
                    item: ModHeaderItem,
                    node: node,
                    name: nameof(item.ModHeader),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ModHeader,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ModHeader));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.GameSettings) ?? true))
            {
                var GameSettingsItem = item.GameSettings;
                ((GroupXmlWriteTranslation)((IXmlItem)GameSettingsItem).XmlWriteTranslator).Write<IGameSettingGetter>(
                    item: GameSettingsItem,
                    node: node,
                    name: nameof(item.GameSettings),
                    fieldIndex: (int)SkyrimMod_FieldIndex.GameSettings,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.GameSettings));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Keywords) ?? true))
            {
                var KeywordsItem = item.Keywords;
                ((GroupXmlWriteTranslation)((IXmlItem)KeywordsItem).XmlWriteTranslator).Write<IKeywordGetter>(
                    item: KeywordsItem,
                    node: node,
                    name: nameof(item.Keywords),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Keywords,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Keywords));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                var LocationReferenceTypesItem = item.LocationReferenceTypes;
                ((GroupXmlWriteTranslation)((IXmlItem)LocationReferenceTypesItem).XmlWriteTranslator).Write<ILocationReferenceTypeGetter>(
                    item: LocationReferenceTypesItem,
                    node: node,
                    name: nameof(item.LocationReferenceTypes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.LocationReferenceTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LocationReferenceTypes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Actions) ?? true))
            {
                var ActionsItem = item.Actions;
                ((GroupXmlWriteTranslation)((IXmlItem)ActionsItem).XmlWriteTranslator).Write<IActionRecordGetter>(
                    item: ActionsItem,
                    node: node,
                    name: nameof(item.Actions),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Actions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Actions));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.TextureSets) ?? true))
            {
                var TextureSetsItem = item.TextureSets;
                ((GroupXmlWriteTranslation)((IXmlItem)TextureSetsItem).XmlWriteTranslator).Write<ITextureSetGetter>(
                    item: TextureSetsItem,
                    node: node,
                    name: nameof(item.TextureSets),
                    fieldIndex: (int)SkyrimMod_FieldIndex.TextureSets,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.TextureSets));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Globals) ?? true))
            {
                var GlobalsItem = item.Globals;
                ((GroupXmlWriteTranslation)((IXmlItem)GlobalsItem).XmlWriteTranslator).Write<IGlobalGetter>(
                    item: GlobalsItem,
                    node: node,
                    name: nameof(item.Globals),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Globals,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Globals));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Classes) ?? true))
            {
                var ClassesItem = item.Classes;
                ((GroupXmlWriteTranslation)((IXmlItem)ClassesItem).XmlWriteTranslator).Write<IClassGetter>(
                    item: ClassesItem,
                    node: node,
                    name: nameof(item.Classes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Classes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Classes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Factions) ?? true))
            {
                var FactionsItem = item.Factions;
                ((GroupXmlWriteTranslation)((IXmlItem)FactionsItem).XmlWriteTranslator).Write<IFactionGetter>(
                    item: FactionsItem,
                    node: node,
                    name: nameof(item.Factions),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Factions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Factions));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.HeadParts) ?? true))
            {
                var HeadPartsItem = item.HeadParts;
                ((GroupXmlWriteTranslation)((IXmlItem)HeadPartsItem).XmlWriteTranslator).Write<IHeadPartGetter>(
                    item: HeadPartsItem,
                    node: node,
                    name: nameof(item.HeadParts),
                    fieldIndex: (int)SkyrimMod_FieldIndex.HeadParts,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.HeadParts));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Hairs) ?? true))
            {
                var HairsItem = item.Hairs;
                ((GroupXmlWriteTranslation)((IXmlItem)HairsItem).XmlWriteTranslator).Write<IHairGetter>(
                    item: HairsItem,
                    node: node,
                    name: nameof(item.Hairs),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Hairs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Hairs));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Eyes) ?? true))
            {
                var EyesItem = item.Eyes;
                ((GroupXmlWriteTranslation)((IXmlItem)EyesItem).XmlWriteTranslator).Write<IEyesGetter>(
                    item: EyesItem,
                    node: node,
                    name: nameof(item.Eyes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Eyes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Eyes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Races) ?? true))
            {
                var RacesItem = item.Races;
                ((GroupXmlWriteTranslation)((IXmlItem)RacesItem).XmlWriteTranslator).Write<IRaceGetter>(
                    item: RacesItem,
                    node: node,
                    name: nameof(item.Races),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Races,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Races));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundMarkers) ?? true))
            {
                var SoundMarkersItem = item.SoundMarkers;
                ((GroupXmlWriteTranslation)((IXmlItem)SoundMarkersItem).XmlWriteTranslator).Write<ISoundMarkerGetter>(
                    item: SoundMarkersItem,
                    node: node,
                    name: nameof(item.SoundMarkers),
                    fieldIndex: (int)SkyrimMod_FieldIndex.SoundMarkers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoundMarkers));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AcousticSpaces) ?? true))
            {
                var AcousticSpacesItem = item.AcousticSpaces;
                ((GroupXmlWriteTranslation)((IXmlItem)AcousticSpacesItem).XmlWriteTranslator).Write<IAcousticSpaceGetter>(
                    item: AcousticSpacesItem,
                    node: node,
                    name: nameof(item.AcousticSpaces),
                    fieldIndex: (int)SkyrimMod_FieldIndex.AcousticSpaces,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AcousticSpaces));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MagicEffects) ?? true))
            {
                var MagicEffectsItem = item.MagicEffects;
                ((GroupXmlWriteTranslation)((IXmlItem)MagicEffectsItem).XmlWriteTranslator).Write<IMagicEffectGetter>(
                    item: MagicEffectsItem,
                    node: node,
                    name: nameof(item.MagicEffects),
                    fieldIndex: (int)SkyrimMod_FieldIndex.MagicEffects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MagicEffects));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LandscapeTextures) ?? true))
            {
                var LandscapeTexturesItem = item.LandscapeTextures;
                ((GroupXmlWriteTranslation)((IXmlItem)LandscapeTexturesItem).XmlWriteTranslator).Write<ILandscapeTextureGetter>(
                    item: LandscapeTexturesItem,
                    node: node,
                    name: nameof(item.LandscapeTextures),
                    fieldIndex: (int)SkyrimMod_FieldIndex.LandscapeTextures,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LandscapeTextures));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ObjectEffects) ?? true))
            {
                var ObjectEffectsItem = item.ObjectEffects;
                ((GroupXmlWriteTranslation)((IXmlItem)ObjectEffectsItem).XmlWriteTranslator).Write<IObjectEffectGetter>(
                    item: ObjectEffectsItem,
                    node: node,
                    name: nameof(item.ObjectEffects),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ObjectEffects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ObjectEffects));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Spells) ?? true))
            {
                var SpellsItem = item.Spells;
                ((GroupXmlWriteTranslation)((IXmlItem)SpellsItem).XmlWriteTranslator).Write<ISpellGetter>(
                    item: SpellsItem,
                    node: node,
                    name: nameof(item.Spells),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Spells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Spells));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Scrolls) ?? true))
            {
                var ScrollsItem = item.Scrolls;
                ((GroupXmlWriteTranslation)((IXmlItem)ScrollsItem).XmlWriteTranslator).Write<IScrollGetter>(
                    item: ScrollsItem,
                    node: node,
                    name: nameof(item.Scrolls),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Scrolls,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Scrolls));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Activators) ?? true))
            {
                var ActivatorsItem = item.Activators;
                ((GroupXmlWriteTranslation)((IXmlItem)ActivatorsItem).XmlWriteTranslator).Write<IActivatorGetter>(
                    item: ActivatorsItem,
                    node: node,
                    name: nameof(item.Activators),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Activators,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Activators));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.TalkingActivators) ?? true))
            {
                var TalkingActivatorsItem = item.TalkingActivators;
                ((GroupXmlWriteTranslation)((IXmlItem)TalkingActivatorsItem).XmlWriteTranslator).Write<ITalkingActivatorGetter>(
                    item: TalkingActivatorsItem,
                    node: node,
                    name: nameof(item.TalkingActivators),
                    fieldIndex: (int)SkyrimMod_FieldIndex.TalkingActivators,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.TalkingActivators));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Armors) ?? true))
            {
                var ArmorsItem = item.Armors;
                ((GroupXmlWriteTranslation)((IXmlItem)ArmorsItem).XmlWriteTranslator).Write<IArmorGetter>(
                    item: ArmorsItem,
                    node: node,
                    name: nameof(item.Armors),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Armors,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Armors));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Books) ?? true))
            {
                var BooksItem = item.Books;
                ((GroupXmlWriteTranslation)((IXmlItem)BooksItem).XmlWriteTranslator).Write<IBookGetter>(
                    item: BooksItem,
                    node: node,
                    name: nameof(item.Books),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Books,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Books));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Containers) ?? true))
            {
                var ContainersItem = item.Containers;
                ((GroupXmlWriteTranslation)((IXmlItem)ContainersItem).XmlWriteTranslator).Write<IContainerGetter>(
                    item: ContainersItem,
                    node: node,
                    name: nameof(item.Containers),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Containers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Containers));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Doors) ?? true))
            {
                var DoorsItem = item.Doors;
                ((GroupXmlWriteTranslation)((IXmlItem)DoorsItem).XmlWriteTranslator).Write<IDoorGetter>(
                    item: DoorsItem,
                    node: node,
                    name: nameof(item.Doors),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Doors,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Doors));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ingredients) ?? true))
            {
                var IngredientsItem = item.Ingredients;
                ((GroupXmlWriteTranslation)((IXmlItem)IngredientsItem).XmlWriteTranslator).Write<IIngredientGetter>(
                    item: IngredientsItem,
                    node: node,
                    name: nameof(item.Ingredients),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Ingredients,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ingredients));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Lights) ?? true))
            {
                var LightsItem = item.Lights;
                ((GroupXmlWriteTranslation)((IXmlItem)LightsItem).XmlWriteTranslator).Write<ILightGetter>(
                    item: LightsItem,
                    node: node,
                    name: nameof(item.Lights),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Lights,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Lights));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MiscItems) ?? true))
            {
                var MiscItemsItem = item.MiscItems;
                ((GroupXmlWriteTranslation)((IXmlItem)MiscItemsItem).XmlWriteTranslator).Write<IMiscItemGetter>(
                    item: MiscItemsItem,
                    node: node,
                    name: nameof(item.MiscItems),
                    fieldIndex: (int)SkyrimMod_FieldIndex.MiscItems,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MiscItems));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AlchemicalApparatuses) ?? true))
            {
                var AlchemicalApparatusesItem = item.AlchemicalApparatuses;
                ((GroupXmlWriteTranslation)((IXmlItem)AlchemicalApparatusesItem).XmlWriteTranslator).Write<IAlchemicalApparatusGetter>(
                    item: AlchemicalApparatusesItem,
                    node: node,
                    name: nameof(item.AlchemicalApparatuses),
                    fieldIndex: (int)SkyrimMod_FieldIndex.AlchemicalApparatuses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AlchemicalApparatuses));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Statics) ?? true))
            {
                var StaticsItem = item.Statics;
                ((GroupXmlWriteTranslation)((IXmlItem)StaticsItem).XmlWriteTranslator).Write<IStaticGetter>(
                    item: StaticsItem,
                    node: node,
                    name: nameof(item.Statics),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Statics,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Statics));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MoveableStatics) ?? true))
            {
                var MoveableStaticsItem = item.MoveableStatics;
                ((GroupXmlWriteTranslation)((IXmlItem)MoveableStaticsItem).XmlWriteTranslator).Write<IMoveableStaticGetter>(
                    item: MoveableStaticsItem,
                    node: node,
                    name: nameof(item.MoveableStatics),
                    fieldIndex: (int)SkyrimMod_FieldIndex.MoveableStatics,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MoveableStatics));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Grasses) ?? true))
            {
                var GrassesItem = item.Grasses;
                ((GroupXmlWriteTranslation)((IXmlItem)GrassesItem).XmlWriteTranslator).Write<IGrassGetter>(
                    item: GrassesItem,
                    node: node,
                    name: nameof(item.Grasses),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Grasses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Grasses));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Trees) ?? true))
            {
                var TreesItem = item.Trees;
                ((GroupXmlWriteTranslation)((IXmlItem)TreesItem).XmlWriteTranslator).Write<ITreeGetter>(
                    item: TreesItem,
                    node: node,
                    name: nameof(item.Trees),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Trees,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Trees));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Florae) ?? true))
            {
                var FloraeItem = item.Florae;
                ((GroupXmlWriteTranslation)((IXmlItem)FloraeItem).XmlWriteTranslator).Write<IFloraGetter>(
                    item: FloraeItem,
                    node: node,
                    name: nameof(item.Florae),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Florae,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Florae));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Furniture) ?? true))
            {
                var FurnitureItem = item.Furniture;
                ((GroupXmlWriteTranslation)((IXmlItem)FurnitureItem).XmlWriteTranslator).Write<IFurnitureGetter>(
                    item: FurnitureItem,
                    node: node,
                    name: nameof(item.Furniture),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Furniture,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Furniture));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Weapons) ?? true))
            {
                var WeaponsItem = item.Weapons;
                ((GroupXmlWriteTranslation)((IXmlItem)WeaponsItem).XmlWriteTranslator).Write<IWeaponGetter>(
                    item: WeaponsItem,
                    node: node,
                    name: nameof(item.Weapons),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Weapons,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Weapons));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ammunitions) ?? true))
            {
                var AmmunitionsItem = item.Ammunitions;
                ((GroupXmlWriteTranslation)((IXmlItem)AmmunitionsItem).XmlWriteTranslator).Write<IAmmunitionGetter>(
                    item: AmmunitionsItem,
                    node: node,
                    name: nameof(item.Ammunitions),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Ammunitions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ammunitions));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Npcs) ?? true))
            {
                var NpcsItem = item.Npcs;
                ((GroupXmlWriteTranslation)((IXmlItem)NpcsItem).XmlWriteTranslator).Write<INpcGetter>(
                    item: NpcsItem,
                    node: node,
                    name: nameof(item.Npcs),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Npcs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Npcs));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledNpcs) ?? true))
            {
                var LeveledNpcsItem = item.LeveledNpcs;
                ((GroupXmlWriteTranslation)((IXmlItem)LeveledNpcsItem).XmlWriteTranslator).Write<ILeveledNpcGetter>(
                    item: LeveledNpcsItem,
                    node: node,
                    name: nameof(item.LeveledNpcs),
                    fieldIndex: (int)SkyrimMod_FieldIndex.LeveledNpcs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LeveledNpcs));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Keys) ?? true))
            {
                var KeysItem = item.Keys;
                ((GroupXmlWriteTranslation)((IXmlItem)KeysItem).XmlWriteTranslator).Write<IKeyGetter>(
                    item: KeysItem,
                    node: node,
                    name: nameof(item.Keys),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Keys,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Keys));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ingestibles) ?? true))
            {
                var IngestiblesItem = item.Ingestibles;
                ((GroupXmlWriteTranslation)((IXmlItem)IngestiblesItem).XmlWriteTranslator).Write<IIngestibleGetter>(
                    item: IngestiblesItem,
                    node: node,
                    name: nameof(item.Ingestibles),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Ingestibles,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ingestibles));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.IdleMarkers) ?? true))
            {
                var IdleMarkersItem = item.IdleMarkers;
                ((GroupXmlWriteTranslation)((IXmlItem)IdleMarkersItem).XmlWriteTranslator).Write<IIdleMarkerGetter>(
                    item: IdleMarkersItem,
                    node: node,
                    name: nameof(item.IdleMarkers),
                    fieldIndex: (int)SkyrimMod_FieldIndex.IdleMarkers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.IdleMarkers));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ConstructibleObjects) ?? true))
            {
                var ConstructibleObjectsItem = item.ConstructibleObjects;
                ((GroupXmlWriteTranslation)((IXmlItem)ConstructibleObjectsItem).XmlWriteTranslator).Write<IConstructibleObjectGetter>(
                    item: ConstructibleObjectsItem,
                    node: node,
                    name: nameof(item.ConstructibleObjects),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ConstructibleObjects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ConstructibleObjects));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Projectiles) ?? true))
            {
                var ProjectilesItem = item.Projectiles;
                ((GroupXmlWriteTranslation)((IXmlItem)ProjectilesItem).XmlWriteTranslator).Write<IProjectileGetter>(
                    item: ProjectilesItem,
                    node: node,
                    name: nameof(item.Projectiles),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Projectiles,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Projectiles));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Hazards) ?? true))
            {
                var HazardsItem = item.Hazards;
                ((GroupXmlWriteTranslation)((IXmlItem)HazardsItem).XmlWriteTranslator).Write<IHazardGetter>(
                    item: HazardsItem,
                    node: node,
                    name: nameof(item.Hazards),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Hazards,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Hazards));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoulGems) ?? true))
            {
                var SoulGemsItem = item.SoulGems;
                ((GroupXmlWriteTranslation)((IXmlItem)SoulGemsItem).XmlWriteTranslator).Write<ISoulGemGetter>(
                    item: SoulGemsItem,
                    node: node,
                    name: nameof(item.SoulGems),
                    fieldIndex: (int)SkyrimMod_FieldIndex.SoulGems,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoulGems));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledItems) ?? true))
            {
                var LeveledItemsItem = item.LeveledItems;
                ((GroupXmlWriteTranslation)((IXmlItem)LeveledItemsItem).XmlWriteTranslator).Write<ILeveledItemGetter>(
                    item: LeveledItemsItem,
                    node: node,
                    name: nameof(item.LeveledItems),
                    fieldIndex: (int)SkyrimMod_FieldIndex.LeveledItems,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LeveledItems));
            }
        }

        public void Write(
            XElement node,
            ISkyrimModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.SkyrimMod");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.SkyrimMod");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISkyrimModGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ISkyrimModGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ISkyrimModGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class SkyrimModXmlCreateTranslation
    {
        public readonly static SkyrimModXmlCreateTranslation Instance = new SkyrimModXmlCreateTranslation();

        public static void FillPublicXml(
            ISkyrimMod item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SkyrimModXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISkyrimMod item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "GameSettings":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.GameSettings);
                    try
                    {
                        item.GameSettings.CopyInFromXml<GameSetting>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keywords":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Keywords);
                    try
                    {
                        item.Keywords.CopyInFromXml<Keyword>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LocationReferenceTypes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LocationReferenceTypes);
                    try
                    {
                        item.LocationReferenceTypes.CopyInFromXml<LocationReferenceType>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Actions":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Actions);
                    try
                    {
                        item.Actions.CopyInFromXml<ActionRecord>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TextureSets":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.TextureSets);
                    try
                    {
                        item.TextureSets.CopyInFromXml<TextureSet>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Globals":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Globals);
                    try
                    {
                        item.Globals.CopyInFromXml<Global>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Classes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Classes);
                    try
                    {
                        item.Classes.CopyInFromXml<Class>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Factions":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Factions);
                    try
                    {
                        item.Factions.CopyInFromXml<Faction>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HeadParts":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.HeadParts);
                    try
                    {
                        item.HeadParts.CopyInFromXml<HeadPart>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hairs":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Hairs);
                    try
                    {
                        item.Hairs.CopyInFromXml<Hair>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eyes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Eyes);
                    try
                    {
                        item.Eyes.CopyInFromXml<Eyes>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Races":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Races);
                    try
                    {
                        item.Races.CopyInFromXml<Race>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoundMarkers":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoundMarkers);
                    try
                    {
                        item.SoundMarkers.CopyInFromXml<SoundMarker>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AcousticSpaces":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AcousticSpaces);
                    try
                    {
                        item.AcousticSpaces.CopyInFromXml<AcousticSpace>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagicEffects":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MagicEffects);
                    try
                    {
                        item.MagicEffects.CopyInFromXml<MagicEffect>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LandscapeTextures":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LandscapeTextures);
                    try
                    {
                        item.LandscapeTextures.CopyInFromXml<LandscapeTexture>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ObjectEffects":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ObjectEffects);
                    try
                    {
                        item.ObjectEffects.CopyInFromXml<ObjectEffect>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Spells":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Spells);
                    try
                    {
                        item.Spells.CopyInFromXml<Spell>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Scrolls":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Scrolls);
                    try
                    {
                        item.Scrolls.CopyInFromXml<Scroll>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Activators":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Activators);
                    try
                    {
                        item.Activators.CopyInFromXml<Activator>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TalkingActivators":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.TalkingActivators);
                    try
                    {
                        item.TalkingActivators.CopyInFromXml<TalkingActivator>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Armors":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Armors);
                    try
                    {
                        item.Armors.CopyInFromXml<Armor>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Books":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Books);
                    try
                    {
                        item.Books.CopyInFromXml<Book>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Containers":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Containers);
                    try
                    {
                        item.Containers.CopyInFromXml<Container>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Doors":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Doors);
                    try
                    {
                        item.Doors.CopyInFromXml<Door>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ingredients":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ingredients);
                    try
                    {
                        item.Ingredients.CopyInFromXml<Ingredient>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lights":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Lights);
                    try
                    {
                        item.Lights.CopyInFromXml<Light>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MiscItems":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MiscItems);
                    try
                    {
                        item.MiscItems.CopyInFromXml<MiscItem>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AlchemicalApparatuses":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AlchemicalApparatuses);
                    try
                    {
                        item.AlchemicalApparatuses.CopyInFromXml<AlchemicalApparatus>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Statics":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Statics);
                    try
                    {
                        item.Statics.CopyInFromXml<Static>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MoveableStatics":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MoveableStatics);
                    try
                    {
                        item.MoveableStatics.CopyInFromXml<MoveableStatic>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Grasses":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Grasses);
                    try
                    {
                        item.Grasses.CopyInFromXml<Grass>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Trees":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Trees);
                    try
                    {
                        item.Trees.CopyInFromXml<Tree>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Florae":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Florae);
                    try
                    {
                        item.Florae.CopyInFromXml<Flora>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Furniture":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Furniture);
                    try
                    {
                        item.Furniture.CopyInFromXml<Furniture>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weapons":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Weapons);
                    try
                    {
                        item.Weapons.CopyInFromXml<Weapon>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ammunitions":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ammunitions);
                    try
                    {
                        item.Ammunitions.CopyInFromXml<Ammunition>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Npcs":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Npcs);
                    try
                    {
                        item.Npcs.CopyInFromXml<Npc>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeveledNpcs":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LeveledNpcs);
                    try
                    {
                        item.LeveledNpcs.CopyInFromXml<LeveledNpc>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keys":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Keys);
                    try
                    {
                        item.Keys.CopyInFromXml<Key>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ingestibles":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ingestibles);
                    try
                    {
                        item.Ingestibles.CopyInFromXml<Ingestible>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IdleMarkers":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.IdleMarkers);
                    try
                    {
                        item.IdleMarkers.CopyInFromXml<IdleMarker>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ConstructibleObjects":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ConstructibleObjects);
                    try
                    {
                        item.ConstructibleObjects.CopyInFromXml<ConstructibleObject>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Projectiles":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Projectiles);
                    try
                    {
                        item.Projectiles.CopyInFromXml<Projectile>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hazards":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Hazards);
                    try
                    {
                        item.Hazards.CopyInFromXml<Hazard>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoulGems":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoulGems);
                    try
                    {
                        item.SoulGems.CopyInFromXml<SoulGem>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeveledItems":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LeveledItems);
                    try
                    {
                        item.LeveledItems.CopyInFromXml<LeveledItem>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class SkyrimModXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISkyrimModGetter item,
            XElement node,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkyrimMod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            string path,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            Stream stream,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            XElement node,
            string? name = null,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mutagen
namespace Mutagen.Bethesda.Skyrim
{
    public class GroupMask
    {
        public bool GameSettings;
        public bool Keywords;
        public bool LocationReferenceTypes;
        public bool Actions;
        public bool TextureSets;
        public bool Globals;
        public bool Classes;
        public bool Factions;
        public bool HeadParts;
        public bool Hairs;
        public bool Eyes;
        public bool Races;
        public bool SoundMarkers;
        public bool AcousticSpaces;
        public bool MagicEffects;
        public bool LandscapeTextures;
        public bool ObjectEffects;
        public bool Spells;
        public bool Scrolls;
        public bool Activators;
        public bool TalkingActivators;
        public bool Armors;
        public bool Books;
        public bool Containers;
        public bool Doors;
        public bool Ingredients;
        public bool Lights;
        public bool MiscItems;
        public bool AlchemicalApparatuses;
        public bool Statics;
        public bool MoveableStatics;
        public bool Grasses;
        public bool Trees;
        public bool Florae;
        public bool Furniture;
        public bool Weapons;
        public bool Ammunitions;
        public bool Npcs;
        public bool LeveledNpcs;
        public bool Keys;
        public bool Ingestibles;
        public bool IdleMarkers;
        public bool ConstructibleObjects;
        public bool Projectiles;
        public bool Hazards;
        public bool SoulGems;
        public bool LeveledItems;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            Keywords = defaultValue;
            LocationReferenceTypes = defaultValue;
            Actions = defaultValue;
            TextureSets = defaultValue;
            Globals = defaultValue;
            Classes = defaultValue;
            Factions = defaultValue;
            HeadParts = defaultValue;
            Hairs = defaultValue;
            Eyes = defaultValue;
            Races = defaultValue;
            SoundMarkers = defaultValue;
            AcousticSpaces = defaultValue;
            MagicEffects = defaultValue;
            LandscapeTextures = defaultValue;
            ObjectEffects = defaultValue;
            Spells = defaultValue;
            Scrolls = defaultValue;
            Activators = defaultValue;
            TalkingActivators = defaultValue;
            Armors = defaultValue;
            Books = defaultValue;
            Containers = defaultValue;
            Doors = defaultValue;
            Ingredients = defaultValue;
            Lights = defaultValue;
            MiscItems = defaultValue;
            AlchemicalApparatuses = defaultValue;
            Statics = defaultValue;
            MoveableStatics = defaultValue;
            Grasses = defaultValue;
            Trees = defaultValue;
            Florae = defaultValue;
            Furniture = defaultValue;
            Weapons = defaultValue;
            Ammunitions = defaultValue;
            Npcs = defaultValue;
            LeveledNpcs = defaultValue;
            Keys = defaultValue;
            Ingestibles = defaultValue;
            IdleMarkers = defaultValue;
            ConstructibleObjects = defaultValue;
            Projectiles = defaultValue;
            Hazards = defaultValue;
            SoulGems = defaultValue;
            LeveledItems = defaultValue;
        }
    }

    public interface ISkyrimModDisposableGetter : ISkyrimModGetter, IModDisposeGetter
    {
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SkyrimModBinaryWriteTranslation
    {
        public readonly static SkyrimModBinaryWriteTranslation Instance = new SkyrimModBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ISkyrimModGetter item,
            MutagenWriter writer,
            GroupMask? importMask,
            ModKey modKey,
            BinaryWriteParameters param,
            RecordTypeConverter? recordTypeConverter)
        {
            WriteModHeader(
                mod: item,
                writer: writer,
                modKey: modKey,
                param: param);
            if (importMask?.GameSettings ?? true)
            {
                var GameSettingsItem = item.GameSettings;
                if (GameSettingsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)GameSettingsItem).BinaryWriteTranslator).Write<IGameSettingGetter>(
                        item: GameSettingsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Keywords ?? true)
            {
                var KeywordsItem = item.Keywords;
                if (KeywordsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)KeywordsItem).BinaryWriteTranslator).Write<IKeywordGetter>(
                        item: KeywordsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LocationReferenceTypes ?? true)
            {
                var LocationReferenceTypesItem = item.LocationReferenceTypes;
                if (LocationReferenceTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LocationReferenceTypesItem).BinaryWriteTranslator).Write<ILocationReferenceTypeGetter>(
                        item: LocationReferenceTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Actions ?? true)
            {
                var ActionsItem = item.Actions;
                if (ActionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ActionsItem).BinaryWriteTranslator).Write<IActionRecordGetter>(
                        item: ActionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.TextureSets ?? true)
            {
                var TextureSetsItem = item.TextureSets;
                if (TextureSetsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)TextureSetsItem).BinaryWriteTranslator).Write<ITextureSetGetter>(
                        item: TextureSetsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Globals ?? true)
            {
                var GlobalsItem = item.Globals;
                if (GlobalsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)GlobalsItem).BinaryWriteTranslator).Write<IGlobalGetter>(
                        item: GlobalsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Classes ?? true)
            {
                var ClassesItem = item.Classes;
                if (ClassesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ClassesItem).BinaryWriteTranslator).Write<IClassGetter>(
                        item: ClassesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Factions ?? true)
            {
                var FactionsItem = item.Factions;
                if (FactionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FactionsItem).BinaryWriteTranslator).Write<IFactionGetter>(
                        item: FactionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.HeadParts ?? true)
            {
                var HeadPartsItem = item.HeadParts;
                if (HeadPartsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)HeadPartsItem).BinaryWriteTranslator).Write<IHeadPartGetter>(
                        item: HeadPartsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Hairs ?? true)
            {
                var HairsItem = item.Hairs;
                if (HairsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)HairsItem).BinaryWriteTranslator).Write<IHairGetter>(
                        item: HairsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Eyes ?? true)
            {
                var EyesItem = item.Eyes;
                if (EyesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)EyesItem).BinaryWriteTranslator).Write<IEyesGetter>(
                        item: EyesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Races ?? true)
            {
                var RacesItem = item.Races;
                if (RacesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)RacesItem).BinaryWriteTranslator).Write<IRaceGetter>(
                        item: RacesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.SoundMarkers ?? true)
            {
                var SoundMarkersItem = item.SoundMarkers;
                if (SoundMarkersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SoundMarkersItem).BinaryWriteTranslator).Write<ISoundMarkerGetter>(
                        item: SoundMarkersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AcousticSpaces ?? true)
            {
                var AcousticSpacesItem = item.AcousticSpaces;
                if (AcousticSpacesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AcousticSpacesItem).BinaryWriteTranslator).Write<IAcousticSpaceGetter>(
                        item: AcousticSpacesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MagicEffects ?? true)
            {
                var MagicEffectsItem = item.MagicEffects;
                if (MagicEffectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MagicEffectsItem).BinaryWriteTranslator).Write<IMagicEffectGetter>(
                        item: MagicEffectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LandscapeTextures ?? true)
            {
                var LandscapeTexturesItem = item.LandscapeTextures;
                if (LandscapeTexturesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LandscapeTexturesItem).BinaryWriteTranslator).Write<ILandscapeTextureGetter>(
                        item: LandscapeTexturesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ObjectEffects ?? true)
            {
                var ObjectEffectsItem = item.ObjectEffects;
                if (ObjectEffectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ObjectEffectsItem).BinaryWriteTranslator).Write<IObjectEffectGetter>(
                        item: ObjectEffectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Spells ?? true)
            {
                var SpellsItem = item.Spells;
                if (SpellsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SpellsItem).BinaryWriteTranslator).Write<ISpellGetter>(
                        item: SpellsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Scrolls ?? true)
            {
                var ScrollsItem = item.Scrolls;
                if (ScrollsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ScrollsItem).BinaryWriteTranslator).Write<IScrollGetter>(
                        item: ScrollsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Activators ?? true)
            {
                var ActivatorsItem = item.Activators;
                if (ActivatorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ActivatorsItem).BinaryWriteTranslator).Write<IActivatorGetter>(
                        item: ActivatorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.TalkingActivators ?? true)
            {
                var TalkingActivatorsItem = item.TalkingActivators;
                if (TalkingActivatorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)TalkingActivatorsItem).BinaryWriteTranslator).Write<ITalkingActivatorGetter>(
                        item: TalkingActivatorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Armors ?? true)
            {
                var ArmorsItem = item.Armors;
                if (ArmorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ArmorsItem).BinaryWriteTranslator).Write<IArmorGetter>(
                        item: ArmorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Books ?? true)
            {
                var BooksItem = item.Books;
                if (BooksItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)BooksItem).BinaryWriteTranslator).Write<IBookGetter>(
                        item: BooksItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Containers ?? true)
            {
                var ContainersItem = item.Containers;
                if (ContainersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ContainersItem).BinaryWriteTranslator).Write<IContainerGetter>(
                        item: ContainersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Doors ?? true)
            {
                var DoorsItem = item.Doors;
                if (DoorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DoorsItem).BinaryWriteTranslator).Write<IDoorGetter>(
                        item: DoorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Ingredients ?? true)
            {
                var IngredientsItem = item.Ingredients;
                if (IngredientsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)IngredientsItem).BinaryWriteTranslator).Write<IIngredientGetter>(
                        item: IngredientsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Lights ?? true)
            {
                var LightsItem = item.Lights;
                if (LightsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LightsItem).BinaryWriteTranslator).Write<ILightGetter>(
                        item: LightsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MiscItems ?? true)
            {
                var MiscItemsItem = item.MiscItems;
                if (MiscItemsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MiscItemsItem).BinaryWriteTranslator).Write<IMiscItemGetter>(
                        item: MiscItemsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AlchemicalApparatuses ?? true)
            {
                var AlchemicalApparatusesItem = item.AlchemicalApparatuses;
                if (AlchemicalApparatusesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AlchemicalApparatusesItem).BinaryWriteTranslator).Write<IAlchemicalApparatusGetter>(
                        item: AlchemicalApparatusesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Statics ?? true)
            {
                var StaticsItem = item.Statics;
                if (StaticsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)StaticsItem).BinaryWriteTranslator).Write<IStaticGetter>(
                        item: StaticsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MoveableStatics ?? true)
            {
                var MoveableStaticsItem = item.MoveableStatics;
                if (MoveableStaticsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MoveableStaticsItem).BinaryWriteTranslator).Write<IMoveableStaticGetter>(
                        item: MoveableStaticsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Grasses ?? true)
            {
                var GrassesItem = item.Grasses;
                if (GrassesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)GrassesItem).BinaryWriteTranslator).Write<IGrassGetter>(
                        item: GrassesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Trees ?? true)
            {
                var TreesItem = item.Trees;
                if (TreesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)TreesItem).BinaryWriteTranslator).Write<ITreeGetter>(
                        item: TreesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Florae ?? true)
            {
                var FloraeItem = item.Florae;
                if (FloraeItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FloraeItem).BinaryWriteTranslator).Write<IFloraGetter>(
                        item: FloraeItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Furniture ?? true)
            {
                var FurnitureItem = item.Furniture;
                if (FurnitureItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FurnitureItem).BinaryWriteTranslator).Write<IFurnitureGetter>(
                        item: FurnitureItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Weapons ?? true)
            {
                var WeaponsItem = item.Weapons;
                if (WeaponsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WeaponsItem).BinaryWriteTranslator).Write<IWeaponGetter>(
                        item: WeaponsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Ammunitions ?? true)
            {
                var AmmunitionsItem = item.Ammunitions;
                if (AmmunitionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AmmunitionsItem).BinaryWriteTranslator).Write<IAmmunitionGetter>(
                        item: AmmunitionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Npcs ?? true)
            {
                var NpcsItem = item.Npcs;
                if (NpcsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)NpcsItem).BinaryWriteTranslator).Write<INpcGetter>(
                        item: NpcsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LeveledNpcs ?? true)
            {
                var LeveledNpcsItem = item.LeveledNpcs;
                if (LeveledNpcsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LeveledNpcsItem).BinaryWriteTranslator).Write<ILeveledNpcGetter>(
                        item: LeveledNpcsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Keys ?? true)
            {
                var KeysItem = item.Keys;
                if (KeysItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)KeysItem).BinaryWriteTranslator).Write<IKeyGetter>(
                        item: KeysItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Ingestibles ?? true)
            {
                var IngestiblesItem = item.Ingestibles;
                if (IngestiblesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)IngestiblesItem).BinaryWriteTranslator).Write<IIngestibleGetter>(
                        item: IngestiblesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.IdleMarkers ?? true)
            {
                var IdleMarkersItem = item.IdleMarkers;
                if (IdleMarkersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)IdleMarkersItem).BinaryWriteTranslator).Write<IIdleMarkerGetter>(
                        item: IdleMarkersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ConstructibleObjects ?? true)
            {
                var ConstructibleObjectsItem = item.ConstructibleObjects;
                if (ConstructibleObjectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ConstructibleObjectsItem).BinaryWriteTranslator).Write<IConstructibleObjectGetter>(
                        item: ConstructibleObjectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Projectiles ?? true)
            {
                var ProjectilesItem = item.Projectiles;
                if (ProjectilesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ProjectilesItem).BinaryWriteTranslator).Write<IProjectileGetter>(
                        item: ProjectilesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Hazards ?? true)
            {
                var HazardsItem = item.Hazards;
                if (HazardsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)HazardsItem).BinaryWriteTranslator).Write<IHazardGetter>(
                        item: HazardsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.SoulGems ?? true)
            {
                var SoulGemsItem = item.SoulGems;
                if (SoulGemsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SoulGemsItem).BinaryWriteTranslator).Write<ISoulGemGetter>(
                        item: SoulGemsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LeveledItems ?? true)
            {
                var LeveledItemsItem = item.LeveledItems;
                if (LeveledItemsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LeveledItemsItem).BinaryWriteTranslator).Write<ILeveledItemGetter>(
                        item: LeveledItemsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            ISkyrimModGetter item,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter = null,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            param ??= BinaryWriteParameters.Default;
            writer.MasterReferences = UtilityTranslation.ConstructWriteMasters(item, param);
            WriteRecordTypes(
                item: item,
                writer: writer,
                importMask: importMask,
                modKey: modKey,
                param: param,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter = null,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            Write(
                item: (ISkyrimModGetter)item,
                importMask: importMask,
                writer: writer,
                param: param,
                modKey: modKey,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SkyrimModBinaryCreateTranslation
    {
        public readonly static SkyrimModBinaryCreateTranslation Instance = new SkyrimModBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class SkyrimModBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISkyrimModGetter item,
            MutagenWriter writer,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            SkyrimModBinaryWriteTranslation.Instance.Write(
                item: item,
                importMask: importMask,
                writer: writer,
                param: param,
                modKey: modKey,
                recordTypeConverter: null);
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            string path,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false, meta: GameConstants.Get(item.GameMode)))
                {
                    SkyrimModBinaryWriteTranslation.Instance.Write(
                        item: item,
                        importMask: importMask,
                        writer: writer,
                        param: param,
                        modKey: modKey,
                        recordTypeConverter: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            using (var writer = new MutagenWriter(stream, meta: item.GameMode, dispose: false))
            {
                SkyrimModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey,
                    recordTypeConverter: null);
            }
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SkyrimModBinaryOverlay : ISkyrimModDisposableGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkyrimMod_Registration.Instance;
        public static SkyrimMod_Registration Registration => SkyrimMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SkyrimModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SkyrimModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISkyrimModGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISkyrimModGetter)rhs, include);

        public GameMode GameMode => GameMode.Skyrim;
        IReadOnlyCache<T, FormKey> IModGetter.GetGroupGetter<T>() => this.GetGroupGetter<T>();
        void IModGetter.WriteToBinary(string path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinaryParallel(string path, BinaryWriteParameters? param) => this.WriteToBinaryParallel(path, param: param);
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => SkyrimModCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => SkyrimModCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SkyrimModCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SkyrimModCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => SkyrimModXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SkyrimModXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        public ModKey ModKey { get; }
        private readonly BinaryOverlayFactoryPackage _package;
        private readonly IBinaryReadStream _data;
        private readonly bool _shouldDispose;
        public void Dispose()
        {
            if (!_shouldDispose) return;
            _data.Dispose();
        }

        #region ModHeader
        private RangeInt64? _ModHeaderLocation;
        private IModHeaderGetter? _ModHeader => _ModHeaderLocation.HasValue ? ModHeaderBinaryOverlay.ModHeaderFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _ModHeaderLocation!.Value.Min, _ModHeaderLocation!.Value.Max)), _package) : default;
        public IModHeaderGetter ModHeader => _ModHeader ?? new ModHeader();
        #endregion
        #region GameSettings
        private RangeInt64? _GameSettingsLocation;
        private IGroupGetter<IGameSettingGetter>? _GameSettings => _GameSettingsLocation.HasValue ? GroupBinaryOverlay<IGameSettingGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _GameSettingsLocation!.Value.Min, _GameSettingsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IGameSettingGetter> GameSettings => _GameSettings ?? new Group<GameSetting>(this);
        #endregion
        #region Keywords
        private RangeInt64? _KeywordsLocation;
        private IGroupGetter<IKeywordGetter>? _Keywords => _KeywordsLocation.HasValue ? GroupBinaryOverlay<IKeywordGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _KeywordsLocation!.Value.Min, _KeywordsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IKeywordGetter> Keywords => _Keywords ?? new Group<Keyword>(this);
        #endregion
        #region LocationReferenceTypes
        private RangeInt64? _LocationReferenceTypesLocation;
        private IGroupGetter<ILocationReferenceTypeGetter>? _LocationReferenceTypes => _LocationReferenceTypesLocation.HasValue ? GroupBinaryOverlay<ILocationReferenceTypeGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _LocationReferenceTypesLocation!.Value.Min, _LocationReferenceTypesLocation!.Value.Max)), _package) : default;
        public IGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes => _LocationReferenceTypes ?? new Group<LocationReferenceType>(this);
        #endregion
        #region Actions
        private RangeInt64? _ActionsLocation;
        private IGroupGetter<IActionRecordGetter>? _Actions => _ActionsLocation.HasValue ? GroupBinaryOverlay<IActionRecordGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _ActionsLocation!.Value.Min, _ActionsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IActionRecordGetter> Actions => _Actions ?? new Group<ActionRecord>(this);
        #endregion
        #region TextureSets
        private RangeInt64? _TextureSetsLocation;
        private IGroupGetter<ITextureSetGetter>? _TextureSets => _TextureSetsLocation.HasValue ? GroupBinaryOverlay<ITextureSetGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _TextureSetsLocation!.Value.Min, _TextureSetsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<ITextureSetGetter> TextureSets => _TextureSets ?? new Group<TextureSet>(this);
        #endregion
        #region Globals
        private RangeInt64? _GlobalsLocation;
        private IGroupGetter<IGlobalGetter>? _Globals => _GlobalsLocation.HasValue ? GroupBinaryOverlay<IGlobalGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _GlobalsLocation!.Value.Min, _GlobalsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IGlobalGetter> Globals => _Globals ?? new Group<Global>(this);
        #endregion
        #region Classes
        private RangeInt64? _ClassesLocation;
        private IGroupGetter<IClassGetter>? _Classes => _ClassesLocation.HasValue ? GroupBinaryOverlay<IClassGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _ClassesLocation!.Value.Min, _ClassesLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IClassGetter> Classes => _Classes ?? new Group<Class>(this);
        #endregion
        #region Factions
        private RangeInt64? _FactionsLocation;
        private IGroupGetter<IFactionGetter>? _Factions => _FactionsLocation.HasValue ? GroupBinaryOverlay<IFactionGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _FactionsLocation!.Value.Min, _FactionsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IFactionGetter> Factions => _Factions ?? new Group<Faction>(this);
        #endregion
        #region HeadParts
        private RangeInt64? _HeadPartsLocation;
        private IGroupGetter<IHeadPartGetter>? _HeadParts => _HeadPartsLocation.HasValue ? GroupBinaryOverlay<IHeadPartGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _HeadPartsLocation!.Value.Min, _HeadPartsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IHeadPartGetter> HeadParts => _HeadParts ?? new Group<HeadPart>(this);
        #endregion
        #region Hairs
        private RangeInt64? _HairsLocation;
        private IGroupGetter<IHairGetter>? _Hairs => _HairsLocation.HasValue ? GroupBinaryOverlay<IHairGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _HairsLocation!.Value.Min, _HairsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IHairGetter> Hairs => _Hairs ?? new Group<Hair>(this);
        #endregion
        #region Eyes
        private RangeInt64? _EyesLocation;
        private IGroupGetter<IEyesGetter>? _Eyes => _EyesLocation.HasValue ? GroupBinaryOverlay<IEyesGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _EyesLocation!.Value.Min, _EyesLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IEyesGetter> Eyes => _Eyes ?? new Group<Eyes>(this);
        #endregion
        #region Races
        private RangeInt64? _RacesLocation;
        private IGroupGetter<IRaceGetter>? _Races => _RacesLocation.HasValue ? GroupBinaryOverlay<IRaceGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _RacesLocation!.Value.Min, _RacesLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IRaceGetter> Races => _Races ?? new Group<Race>(this);
        #endregion
        #region SoundMarkers
        private RangeInt64? _SoundMarkersLocation;
        private IGroupGetter<ISoundMarkerGetter>? _SoundMarkers => _SoundMarkersLocation.HasValue ? GroupBinaryOverlay<ISoundMarkerGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _SoundMarkersLocation!.Value.Min, _SoundMarkersLocation!.Value.Max)), _package) : default;
        public IGroupGetter<ISoundMarkerGetter> SoundMarkers => _SoundMarkers ?? new Group<SoundMarker>(this);
        #endregion
        #region AcousticSpaces
        private RangeInt64? _AcousticSpacesLocation;
        private IGroupGetter<IAcousticSpaceGetter>? _AcousticSpaces => _AcousticSpacesLocation.HasValue ? GroupBinaryOverlay<IAcousticSpaceGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _AcousticSpacesLocation!.Value.Min, _AcousticSpacesLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IAcousticSpaceGetter> AcousticSpaces => _AcousticSpaces ?? new Group<AcousticSpace>(this);
        #endregion
        #region MagicEffects
        private RangeInt64? _MagicEffectsLocation;
        private IGroupGetter<IMagicEffectGetter>? _MagicEffects => _MagicEffectsLocation.HasValue ? GroupBinaryOverlay<IMagicEffectGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _MagicEffectsLocation!.Value.Min, _MagicEffectsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IMagicEffectGetter> MagicEffects => _MagicEffects ?? new Group<MagicEffect>(this);
        #endregion
        #region LandscapeTextures
        private RangeInt64? _LandscapeTexturesLocation;
        private IGroupGetter<ILandscapeTextureGetter>? _LandscapeTextures => _LandscapeTexturesLocation.HasValue ? GroupBinaryOverlay<ILandscapeTextureGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _LandscapeTexturesLocation!.Value.Min, _LandscapeTexturesLocation!.Value.Max)), _package) : default;
        public IGroupGetter<ILandscapeTextureGetter> LandscapeTextures => _LandscapeTextures ?? new Group<LandscapeTexture>(this);
        #endregion
        #region ObjectEffects
        private RangeInt64? _ObjectEffectsLocation;
        private IGroupGetter<IObjectEffectGetter>? _ObjectEffects => _ObjectEffectsLocation.HasValue ? GroupBinaryOverlay<IObjectEffectGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _ObjectEffectsLocation!.Value.Min, _ObjectEffectsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IObjectEffectGetter> ObjectEffects => _ObjectEffects ?? new Group<ObjectEffect>(this);
        #endregion
        #region Spells
        private RangeInt64? _SpellsLocation;
        private IGroupGetter<ISpellGetter>? _Spells => _SpellsLocation.HasValue ? GroupBinaryOverlay<ISpellGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _SpellsLocation!.Value.Min, _SpellsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<ISpellGetter> Spells => _Spells ?? new Group<Spell>(this);
        #endregion
        #region Scrolls
        private RangeInt64? _ScrollsLocation;
        private IGroupGetter<IScrollGetter>? _Scrolls => _ScrollsLocation.HasValue ? GroupBinaryOverlay<IScrollGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _ScrollsLocation!.Value.Min, _ScrollsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IScrollGetter> Scrolls => _Scrolls ?? new Group<Scroll>(this);
        #endregion
        #region Activators
        private RangeInt64? _ActivatorsLocation;
        private IGroupGetter<IActivatorGetter>? _Activators => _ActivatorsLocation.HasValue ? GroupBinaryOverlay<IActivatorGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _ActivatorsLocation!.Value.Min, _ActivatorsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IActivatorGetter> Activators => _Activators ?? new Group<Activator>(this);
        #endregion
        #region TalkingActivators
        private RangeInt64? _TalkingActivatorsLocation;
        private IGroupGetter<ITalkingActivatorGetter>? _TalkingActivators => _TalkingActivatorsLocation.HasValue ? GroupBinaryOverlay<ITalkingActivatorGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _TalkingActivatorsLocation!.Value.Min, _TalkingActivatorsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<ITalkingActivatorGetter> TalkingActivators => _TalkingActivators ?? new Group<TalkingActivator>(this);
        #endregion
        #region Armors
        private RangeInt64? _ArmorsLocation;
        private IGroupGetter<IArmorGetter>? _Armors => _ArmorsLocation.HasValue ? GroupBinaryOverlay<IArmorGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _ArmorsLocation!.Value.Min, _ArmorsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IArmorGetter> Armors => _Armors ?? new Group<Armor>(this);
        #endregion
        #region Books
        private RangeInt64? _BooksLocation;
        private IGroupGetter<IBookGetter>? _Books => _BooksLocation.HasValue ? GroupBinaryOverlay<IBookGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _BooksLocation!.Value.Min, _BooksLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IBookGetter> Books => _Books ?? new Group<Book>(this);
        #endregion
        #region Containers
        private RangeInt64? _ContainersLocation;
        private IGroupGetter<IContainerGetter>? _Containers => _ContainersLocation.HasValue ? GroupBinaryOverlay<IContainerGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _ContainersLocation!.Value.Min, _ContainersLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IContainerGetter> Containers => _Containers ?? new Group<Container>(this);
        #endregion
        #region Doors
        private RangeInt64? _DoorsLocation;
        private IGroupGetter<IDoorGetter>? _Doors => _DoorsLocation.HasValue ? GroupBinaryOverlay<IDoorGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _DoorsLocation!.Value.Min, _DoorsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IDoorGetter> Doors => _Doors ?? new Group<Door>(this);
        #endregion
        #region Ingredients
        private RangeInt64? _IngredientsLocation;
        private IGroupGetter<IIngredientGetter>? _Ingredients => _IngredientsLocation.HasValue ? GroupBinaryOverlay<IIngredientGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _IngredientsLocation!.Value.Min, _IngredientsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IIngredientGetter> Ingredients => _Ingredients ?? new Group<Ingredient>(this);
        #endregion
        #region Lights
        private RangeInt64? _LightsLocation;
        private IGroupGetter<ILightGetter>? _Lights => _LightsLocation.HasValue ? GroupBinaryOverlay<ILightGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _LightsLocation!.Value.Min, _LightsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<ILightGetter> Lights => _Lights ?? new Group<Light>(this);
        #endregion
        #region MiscItems
        private RangeInt64? _MiscItemsLocation;
        private IGroupGetter<IMiscItemGetter>? _MiscItems => _MiscItemsLocation.HasValue ? GroupBinaryOverlay<IMiscItemGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _MiscItemsLocation!.Value.Min, _MiscItemsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IMiscItemGetter> MiscItems => _MiscItems ?? new Group<MiscItem>(this);
        #endregion
        #region AlchemicalApparatuses
        private RangeInt64? _AlchemicalApparatusesLocation;
        private IGroupGetter<IAlchemicalApparatusGetter>? _AlchemicalApparatuses => _AlchemicalApparatusesLocation.HasValue ? GroupBinaryOverlay<IAlchemicalApparatusGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _AlchemicalApparatusesLocation!.Value.Min, _AlchemicalApparatusesLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IAlchemicalApparatusGetter> AlchemicalApparatuses => _AlchemicalApparatuses ?? new Group<AlchemicalApparatus>(this);
        #endregion
        #region Statics
        private RangeInt64? _StaticsLocation;
        private IGroupGetter<IStaticGetter>? _Statics => _StaticsLocation.HasValue ? GroupBinaryOverlay<IStaticGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _StaticsLocation!.Value.Min, _StaticsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IStaticGetter> Statics => _Statics ?? new Group<Static>(this);
        #endregion
        #region MoveableStatics
        private RangeInt64? _MoveableStaticsLocation;
        private IGroupGetter<IMoveableStaticGetter>? _MoveableStatics => _MoveableStaticsLocation.HasValue ? GroupBinaryOverlay<IMoveableStaticGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _MoveableStaticsLocation!.Value.Min, _MoveableStaticsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IMoveableStaticGetter> MoveableStatics => _MoveableStatics ?? new Group<MoveableStatic>(this);
        #endregion
        #region Grasses
        private RangeInt64? _GrassesLocation;
        private IGroupGetter<IGrassGetter>? _Grasses => _GrassesLocation.HasValue ? GroupBinaryOverlay<IGrassGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _GrassesLocation!.Value.Min, _GrassesLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IGrassGetter> Grasses => _Grasses ?? new Group<Grass>(this);
        #endregion
        #region Trees
        private RangeInt64? _TreesLocation;
        private IGroupGetter<ITreeGetter>? _Trees => _TreesLocation.HasValue ? GroupBinaryOverlay<ITreeGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _TreesLocation!.Value.Min, _TreesLocation!.Value.Max)), _package) : default;
        public IGroupGetter<ITreeGetter> Trees => _Trees ?? new Group<Tree>(this);
        #endregion
        #region Florae
        private RangeInt64? _FloraeLocation;
        private IGroupGetter<IFloraGetter>? _Florae => _FloraeLocation.HasValue ? GroupBinaryOverlay<IFloraGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _FloraeLocation!.Value.Min, _FloraeLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IFloraGetter> Florae => _Florae ?? new Group<Flora>(this);
        #endregion
        #region Furniture
        private RangeInt64? _FurnitureLocation;
        private IGroupGetter<IFurnitureGetter>? _Furniture => _FurnitureLocation.HasValue ? GroupBinaryOverlay<IFurnitureGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _FurnitureLocation!.Value.Min, _FurnitureLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IFurnitureGetter> Furniture => _Furniture ?? new Group<Furniture>(this);
        #endregion
        #region Weapons
        private RangeInt64? _WeaponsLocation;
        private IGroupGetter<IWeaponGetter>? _Weapons => _WeaponsLocation.HasValue ? GroupBinaryOverlay<IWeaponGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _WeaponsLocation!.Value.Min, _WeaponsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IWeaponGetter> Weapons => _Weapons ?? new Group<Weapon>(this);
        #endregion
        #region Ammunitions
        private RangeInt64? _AmmunitionsLocation;
        private IGroupGetter<IAmmunitionGetter>? _Ammunitions => _AmmunitionsLocation.HasValue ? GroupBinaryOverlay<IAmmunitionGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _AmmunitionsLocation!.Value.Min, _AmmunitionsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IAmmunitionGetter> Ammunitions => _Ammunitions ?? new Group<Ammunition>(this);
        #endregion
        #region Npcs
        private RangeInt64? _NpcsLocation;
        private IGroupGetter<INpcGetter>? _Npcs => _NpcsLocation.HasValue ? GroupBinaryOverlay<INpcGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _NpcsLocation!.Value.Min, _NpcsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<INpcGetter> Npcs => _Npcs ?? new Group<Npc>(this);
        #endregion
        #region LeveledNpcs
        private RangeInt64? _LeveledNpcsLocation;
        private IGroupGetter<ILeveledNpcGetter>? _LeveledNpcs => _LeveledNpcsLocation.HasValue ? GroupBinaryOverlay<ILeveledNpcGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _LeveledNpcsLocation!.Value.Min, _LeveledNpcsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<ILeveledNpcGetter> LeveledNpcs => _LeveledNpcs ?? new Group<LeveledNpc>(this);
        #endregion
        #region Keys
        private RangeInt64? _KeysLocation;
        private IGroupGetter<IKeyGetter>? _Keys => _KeysLocation.HasValue ? GroupBinaryOverlay<IKeyGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _KeysLocation!.Value.Min, _KeysLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IKeyGetter> Keys => _Keys ?? new Group<Key>(this);
        #endregion
        #region Ingestibles
        private RangeInt64? _IngestiblesLocation;
        private IGroupGetter<IIngestibleGetter>? _Ingestibles => _IngestiblesLocation.HasValue ? GroupBinaryOverlay<IIngestibleGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _IngestiblesLocation!.Value.Min, _IngestiblesLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IIngestibleGetter> Ingestibles => _Ingestibles ?? new Group<Ingestible>(this);
        #endregion
        #region IdleMarkers
        private RangeInt64? _IdleMarkersLocation;
        private IGroupGetter<IIdleMarkerGetter>? _IdleMarkers => _IdleMarkersLocation.HasValue ? GroupBinaryOverlay<IIdleMarkerGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _IdleMarkersLocation!.Value.Min, _IdleMarkersLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IIdleMarkerGetter> IdleMarkers => _IdleMarkers ?? new Group<IdleMarker>(this);
        #endregion
        #region ConstructibleObjects
        private RangeInt64? _ConstructibleObjectsLocation;
        private IGroupGetter<IConstructibleObjectGetter>? _ConstructibleObjects => _ConstructibleObjectsLocation.HasValue ? GroupBinaryOverlay<IConstructibleObjectGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _ConstructibleObjectsLocation!.Value.Min, _ConstructibleObjectsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IConstructibleObjectGetter> ConstructibleObjects => _ConstructibleObjects ?? new Group<ConstructibleObject>(this);
        #endregion
        #region Projectiles
        private RangeInt64? _ProjectilesLocation;
        private IGroupGetter<IProjectileGetter>? _Projectiles => _ProjectilesLocation.HasValue ? GroupBinaryOverlay<IProjectileGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _ProjectilesLocation!.Value.Min, _ProjectilesLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IProjectileGetter> Projectiles => _Projectiles ?? new Group<Projectile>(this);
        #endregion
        #region Hazards
        private RangeInt64? _HazardsLocation;
        private IGroupGetter<IHazardGetter>? _Hazards => _HazardsLocation.HasValue ? GroupBinaryOverlay<IHazardGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _HazardsLocation!.Value.Min, _HazardsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<IHazardGetter> Hazards => _Hazards ?? new Group<Hazard>(this);
        #endregion
        #region SoulGems
        private RangeInt64? _SoulGemsLocation;
        private IGroupGetter<ISoulGemGetter>? _SoulGems => _SoulGemsLocation.HasValue ? GroupBinaryOverlay<ISoulGemGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _SoulGemsLocation!.Value.Min, _SoulGemsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<ISoulGemGetter> SoulGems => _SoulGems ?? new Group<SoulGem>(this);
        #endregion
        #region LeveledItems
        private RangeInt64? _LeveledItemsLocation;
        private IGroupGetter<ILeveledItemGetter>? _LeveledItems => _LeveledItemsLocation.HasValue ? GroupBinaryOverlay<ILeveledItemGetter>.GroupFactory(new BinaryMemoryReadStream(BinaryOverlay.LockExtractMemory(_data, _LeveledItemsLocation!.Value.Min, _LeveledItemsLocation!.Value.Max)), _package) : default;
        public IGroupGetter<ILeveledItemGetter> LeveledItems => _LeveledItems ?? new Group<LeveledItem>(this);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            long finalPos,
            int offset);

        protected SkyrimModBinaryOverlay(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose)
        {
            this.ModKey = modKey;
            this._data = stream;
            this._package = new BinaryOverlayFactoryPackage(
                modKey: modKey,
                gameMode: GameMode.Skyrim,
                infoCache: stream.RecordInfoCache);
            this._shouldDispose = shouldDispose;
        }

        public static SkyrimModBinaryOverlay SkyrimModFactory(
            ReadOnlyMemorySlice<byte> data,
            ModKey modKey)
        {
            return SkyrimModFactory(
                stream: new MutagenMemoryReadStream(
                    data: data,
                    metaData: GameMode.Skyrim,
                    infoCache: new RecordInfoCache(() => new MutagenMemoryReadStream(data, GameMode.Skyrim))),
                modKey: modKey,
                shouldDispose: false);
        }

        public static SkyrimModBinaryOverlay SkyrimModFactory(
            string path,
            ModKey modKey)
        {
            return SkyrimModFactory(
                stream: new MutagenBinaryReadStream(
                    path: path,
                    metaData: GameMode.Skyrim,
                    infoCache: new RecordInfoCache(() => new MutagenBinaryReadStream(path, GameMode.Skyrim))),
                modKey: modKey,
                shouldDispose: false);
        }

        public static SkyrimModBinaryOverlay SkyrimModFactory(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose)
        {
            var ret = new SkyrimModBinaryOverlay(
                stream: stream,
                modKey: modKey,
                shouldDispose: shouldDispose);
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            BinaryOverlay.FillModTypes(
                stream: stream,
                package: ret._package,
                fill: ret.FillRecordType);
            return ret;
        }


        public TryGet<int?> FillRecordType(
            IBinaryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x34534554: // TES4
                {
                    _ModHeaderLocation = new RangeInt64((stream.Position - offset), finalPos);
                    _package.MasterReferences.SetTo(
                        this.ModHeader.MasterReferences.Select(
                            master => new MasterReference()
                            {
                                Master = master.Master,
                                FileSize = master.FileSize,
                            }));
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.ModHeader);
                }
                case 0x54534D47: // GMST
                {
                    _GameSettingsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.GameSettings);
                }
                case 0x4457594B: // KYWD
                {
                    _KeywordsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Keywords);
                }
                case 0x5452434C: // LCRT
                {
                    _LocationReferenceTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.LocationReferenceTypes);
                }
                case 0x54434141: // AACT
                {
                    _ActionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Actions);
                }
                case 0x54535854: // TXST
                {
                    _TextureSetsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.TextureSets);
                }
                case 0x424F4C47: // GLOB
                {
                    _GlobalsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Globals);
                }
                case 0x53414C43: // CLAS
                {
                    _ClassesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Classes);
                }
                case 0x54434146: // FACT
                {
                    _FactionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Factions);
                }
                case 0x54504448: // HDPT
                {
                    _HeadPartsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.HeadParts);
                }
                case 0x52494148: // HAIR
                {
                    _HairsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Hairs);
                }
                case 0x53455945: // EYES
                {
                    _EyesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Eyes);
                }
                case 0x45434152: // RACE
                {
                    _RacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Races);
                }
                case 0x4E554F53: // SOUN
                {
                    _SoundMarkersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.SoundMarkers);
                }
                case 0x43505341: // ASPC
                {
                    _AcousticSpacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.AcousticSpaces);
                }
                case 0x4645474D: // MGEF
                {
                    _MagicEffectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.MagicEffects);
                }
                case 0x5845544C: // LTEX
                {
                    _LandscapeTexturesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.LandscapeTextures);
                }
                case 0x48434E45: // ENCH
                {
                    _ObjectEffectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.ObjectEffects);
                }
                case 0x4C455053: // SPEL
                {
                    _SpellsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Spells);
                }
                case 0x4C524353: // SCRL
                {
                    _ScrollsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Scrolls);
                }
                case 0x49544341: // ACTI
                {
                    _ActivatorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Activators);
                }
                case 0x54434154: // TACT
                {
                    _TalkingActivatorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.TalkingActivators);
                }
                case 0x4F4D5241: // ARMO
                {
                    _ArmorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Armors);
                }
                case 0x4B4F4F42: // BOOK
                {
                    _BooksLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Books);
                }
                case 0x544E4F43: // CONT
                {
                    _ContainersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Containers);
                }
                case 0x524F4F44: // DOOR
                {
                    _DoorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Doors);
                }
                case 0x52474E49: // INGR
                {
                    _IngredientsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Ingredients);
                }
                case 0x4847494C: // LIGH
                {
                    _LightsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Lights);
                }
                case 0x4353494D: // MISC
                {
                    _MiscItemsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.MiscItems);
                }
                case 0x41505041: // APPA
                {
                    _AlchemicalApparatusesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.AlchemicalApparatuses);
                }
                case 0x54415453: // STAT
                {
                    _StaticsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Statics);
                }
                case 0x5454534D: // MSTT
                {
                    _MoveableStaticsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.MoveableStatics);
                }
                case 0x53415247: // GRAS
                {
                    _GrassesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Grasses);
                }
                case 0x45455254: // TREE
                {
                    _TreesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Trees);
                }
                case 0x524F4C46: // FLOR
                {
                    _FloraeLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Florae);
                }
                case 0x4E525546: // FURN
                {
                    _FurnitureLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Furniture);
                }
                case 0x50414557: // WEAP
                {
                    _WeaponsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Weapons);
                }
                case 0x4F4D4D41: // AMMO
                {
                    _AmmunitionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Ammunitions);
                }
                case 0x5F43504E: // NPC_
                {
                    _NpcsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Npcs);
                }
                case 0x4E4C564C: // LVLN
                {
                    _LeveledNpcsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.LeveledNpcs);
                }
                case 0x4D59454B: // KEYM
                {
                    _KeysLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Keys);
                }
                case 0x48434C41: // ALCH
                {
                    _IngestiblesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Ingestibles);
                }
                case 0x4D4C4449: // IDLM
                {
                    _IdleMarkersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.IdleMarkers);
                }
                case 0x4A424F43: // COBJ
                {
                    _ConstructibleObjectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.ConstructibleObjects);
                }
                case 0x4A4F5250: // PROJ
                {
                    _ProjectilesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Projectiles);
                }
                case 0x445A4148: // HAZD
                {
                    _HazardsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Hazards);
                }
                case 0x4D474C53: // SLGM
                {
                    _SoulGemsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.SoulGems);
                }
                case 0x494C564C: // LVLI
                {
                    _LeveledItemsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.LeveledItems);
                }
                default:
                    return TryGet<int?>.Succeed(null);
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SkyrimModMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

