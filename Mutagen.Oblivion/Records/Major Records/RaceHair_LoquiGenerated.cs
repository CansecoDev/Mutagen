/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Oblivion.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda;

namespace Mutagen.Oblivion
{
    #region Class
    public partial class RaceHair : IRaceHair, ILoquiObjectSetter, IEquatable<RaceHair>
    {
        ILoquiRegistration ILoquiObject.Registration => RaceHair_Registration.Instance;
        public static RaceHair_Registration Registration => RaceHair_Registration.Instance;

        #region Ctor
        public RaceHair()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Male
        protected readonly INotifyingItem<FormID> _Male = NotifyingItem.Factory<FormID>(markAsSet: false);
        public INotifyingItem<FormID> Male_Property => _Male;
        public FormID Male
        {
            get => this._Male.Item;
            set => this._Male.Set(value);
        }
        INotifyingItem<FormID> IRaceHair.Male_Property => this.Male_Property;
        INotifyingItemGetter<FormID> IRaceHairGetter.Male_Property => this.Male_Property;
        #endregion
        #region Female
        protected readonly INotifyingItem<FormID> _Female = NotifyingItem.Factory<FormID>(markAsSet: false);
        public INotifyingItem<FormID> Female_Property => _Female;
        public FormID Female
        {
            get => this._Female.Item;
            set => this._Female.Set(value);
        }
        INotifyingItem<FormID> IRaceHair.Female_Property => this.Female_Property;
        INotifyingItemGetter<FormID> IRaceHairGetter.Female_Property => this.Female_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => RaceHairCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => RaceHairCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => RaceHairCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RaceHairCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return RaceHairCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RaceHair_Mask<bool> printMask = null)
        {
            return RaceHairCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RaceHairCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public RaceHair_Mask<bool> GetHasBeenSetMask()
        {
            return RaceHairCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RaceHair rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceHair rhs)
        {
            if (rhs == null) return false;
            if (Male_Property.HasBeenSet != rhs.Male_Property.HasBeenSet) return false;
            if (Male_Property.HasBeenSet)
            {
                if (Male != rhs.Male) return false;
            }
            if (Female_Property.HasBeenSet != rhs.Female_Property.HasBeenSet) return false;
            if (Female_Property.HasBeenSet)
            {
                if (Female != rhs.Female) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Male_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Male).CombineHashCode(ret);
            }
            if (Female_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Female).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static RaceHair Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static RaceHair Create_XML(
            XElement root,
            out RaceHair_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static RaceHair Create_XML(
            XElement root,
            bool doMasks,
            out RaceHair_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (RaceHair Object, RaceHair_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            RaceHair_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceHair_ErrorMask()) : default(Func<RaceHair_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static RaceHair Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static RaceHair Create_XML(
            string path,
            out RaceHair_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static RaceHair Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static RaceHair Create_XML(
            Stream stream,
            out RaceHair_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<RaceHair, RaceHair_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RaceHair_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<RaceHair, RaceHair_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RaceHair_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RaceHair_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out RaceHair_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (RaceHair_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out RaceHair_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out RaceHair_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            RaceHairCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static RaceHair Create_XML_Internal(
            XElement root,
            Func<RaceHair_ErrorMask> errorMask)
        {
            var ret = new RaceHair();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            RaceHair item,
            XElement root,
            string name,
            Func<RaceHair_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Male":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._Male.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceHair_FieldIndex.Male,
                            subMask);
                    }
                    break;
                case "Female":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._Female.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceHair_FieldIndex.Female,
                            subMask);
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static RaceHair Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static RaceHair Create_Binary(
            MutagenFrame frame,
            out RaceHair_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static RaceHair Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out RaceHair_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (RaceHair Object, RaceHair_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            RaceHair_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceHair_ErrorMask()) : default(Func<RaceHair_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static RaceHair Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RaceHair Create_Binary(
            string path,
            out RaceHair_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RaceHair Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RaceHair Create_Binary(
            Stream stream,
            out RaceHair_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<RaceHair, RaceHair_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out RaceHair_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<RaceHair, RaceHair_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out RaceHair_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out RaceHair_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out RaceHair_ErrorMask errorMask)
        {
            errorMask = (RaceHair_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out RaceHair_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out RaceHair_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            RaceHairCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static RaceHair Create_Binary_Internal(
            MutagenFrame frame,
            Func<RaceHair_ErrorMask> errorMask)
        {
            var ret = new RaceHair();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseSubrecord(
                    frame,
                    RaceHair_Registration.DNAM_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            RaceHair item,
            MutagenFrame frame,
            Func<RaceHair_ErrorMask> errorMask)
        {
            if (frame.Complete) return;
            item._Male.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)RaceHair_FieldIndex.Male,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._Female.SetIfSucceeded(Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)RaceHair_FieldIndex.Female,
                errorMask: errorMask));
        }

        #endregion

        public RaceHair Copy(
            RaceHair_CopyMask copyMask = null,
            IRaceHairGetter def = null)
        {
            return RaceHair.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RaceHair Copy(
            IRaceHair item,
            RaceHair_CopyMask copyMask = null,
            IRaceHairGetter def = null)
        {
            RaceHair ret;
            if (item.GetType().Equals(typeof(RaceHair)))
            {
                ret = new RaceHair();
            }
            else
            {
                ret = (RaceHair)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            RaceHair_CopyMask copyMask = null,
            IRaceHairGetter def = null)
            where CopyType : class, IRaceHair
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(RaceHair)))
            {
                ret = new RaceHair() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static RaceHair Copy_ToLoqui(
            IRaceHairGetter item,
            RaceHair_CopyMask copyMask = null,
            IRaceHairGetter def = null)
        {
            var ret = new RaceHair();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    this._Male.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case RaceHair_FieldIndex.Female:
                    this._Female.Set(
                        (FormID)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RaceHairCommon.Clear(this, cmds);
        }


        public static RaceHair Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RaceHair();
            foreach (var pair in fields)
            {
                CopyInInternal_RaceHair(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RaceHair(RaceHair obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RaceHair_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    obj._Male.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case RaceHair_FieldIndex.Female:
                    obj._Female.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RaceHair obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IRaceHair : IRaceHairGetter, ILoquiClass<IRaceHair, IRaceHairGetter>, ILoquiClass<RaceHair, IRaceHairGetter>
    {
        new FormID Male { get; set; }
        new INotifyingItem<FormID> Male_Property { get; }

        new FormID Female { get; set; }
        new INotifyingItem<FormID> Female_Property { get; }

    }

    public interface IRaceHairGetter : ILoquiObject
    {
        #region Male
        FormID Male { get; }
        INotifyingItemGetter<FormID> Male_Property { get; }

        #endregion
        #region Female
        FormID Female { get; }
        INotifyingItemGetter<FormID> Female_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Oblivion.Internals
{
    #region Field Index
    public enum RaceHair_FieldIndex
    {
        Male = 0,
        Female = 1,
    }
    #endregion

    #region Registration
    public class RaceHair_Registration : ILoquiRegistration
    {
        public static readonly RaceHair_Registration Instance = new RaceHair_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 33,
            version: 0);

        public const string GUID = "9061ff50-b8b8-429c-9b68-4eb0adf42740";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(RaceHair_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceHair_ErrorMask);

        public static readonly Type ClassType = typeof(RaceHair);

        public static readonly Type GetterType = typeof(IRaceHairGetter);

        public static readonly Type SetterType = typeof(IRaceHair);

        public static readonly Type CommonType = typeof(RaceHairCommon);

        public const string FullName = "Mutagen.Oblivion.RaceHair";

        public const string Name = "RaceHair";

        public const string Namespace = "Mutagen.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MALE":
                    return (ushort)RaceHair_FieldIndex.Male;
                case "FEMALE":
                    return (ushort)RaceHair_FieldIndex.Female;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                case RaceHair_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                case RaceHair_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                case RaceHair_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    return "Male";
                case RaceHair_FieldIndex.Female:
                    return "Female";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                case RaceHair_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                case RaceHair_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    return typeof(FormID);
                case RaceHair_FieldIndex.Female:
                    return typeof(FormID);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = DNAM_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RaceHairCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IRaceHair item,
            IRaceHairGetter rhs,
            RaceHair_CopyMask copyMask = null,
            IRaceHairGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            RaceHairCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRaceHair item,
            IRaceHairGetter rhs,
            out RaceHair_ErrorMask errorMask,
            RaceHair_CopyMask copyMask = null,
            IRaceHairGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            RaceHairCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRaceHair item,
            IRaceHairGetter rhs,
            IRaceHairGetter def,
            bool doMasks,
            out RaceHair_ErrorMask errorMask,
            RaceHair_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            RaceHair_ErrorMask retErrorMask = null;
            Func<RaceHair_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new RaceHair_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IRaceHair item,
            IRaceHairGetter rhs,
            IRaceHairGetter def,
            bool doMasks,
            Func<RaceHair_ErrorMask> errorMask,
            RaceHair_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.Male ?? true)
            {
                try
                {
                    item.Male_Property.SetToWithDefault(
                        rhs.Male_Property,
                        def?.Male_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceHair_FieldIndex.Male, ex);
                }
            }
            if (copyMask?.Female ?? true)
            {
                try
                {
                    item.Female_Property.SetToWithDefault(
                        rhs.Female_Property,
                        def?.Female_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceHair_FieldIndex.Female, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRaceHair obj,
            NotifyingFireParameters? cmds = null)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    obj.Male_Property.HasBeenSet = on;
                    break;
                case RaceHair_FieldIndex.Female:
                    obj.Female_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRaceHair obj,
            NotifyingUnsetParameters? cmds = null)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    obj.Male_Property.Unset(cmds);
                    break;
                case RaceHair_FieldIndex.Female:
                    obj.Female_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRaceHair obj)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    return obj.Male_Property.HasBeenSet;
                case RaceHair_FieldIndex.Female:
                    return obj.Female_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IRaceHairGetter obj)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    return obj.Male;
                case RaceHair_FieldIndex.Female:
                    return obj.Female;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IRaceHair item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Male_Property.Unset(cmds.ToUnsetParams());
            item.Female_Property.Unset(cmds.ToUnsetParams());
        }

        public static RaceHair_Mask<bool> GetEqualsMask(
            this IRaceHairGetter item,
            IRaceHairGetter rhs)
        {
            var ret = new RaceHair_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRaceHairGetter item,
            IRaceHairGetter rhs,
            RaceHair_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Male = item.Male_Property.Equals(rhs.Male_Property, (l, r) => l == r);
            ret.Female = item.Female_Property.Equals(rhs.Female_Property, (l, r) => l == r);
        }

        public static string ToString(
            this IRaceHairGetter item,
            string name = null,
            RaceHair_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRaceHairGetter item,
            FileGeneration fg,
            string name = null,
            RaceHair_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RaceHair)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RaceHair)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Male ?? true)
                {
                    fg.AppendLine($"Male => {item.Male}");
                }
                if (printMask?.Female ?? true)
                {
                    fg.AppendLine($"Female => {item.Female}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRaceHairGetter item,
            RaceHair_Mask<bool?> checkMask)
        {
            if (checkMask.Male.HasValue && checkMask.Male.Value != item.Male_Property.HasBeenSet) return false;
            if (checkMask.Female.HasValue && checkMask.Female.Value != item.Female_Property.HasBeenSet) return false;
            return true;
        }

        public static RaceHair_Mask<bool> GetHasBeenSetMask(IRaceHairGetter item)
        {
            var ret = new RaceHair_Mask<bool>();
            ret.Male = item.Male_Property.HasBeenSet;
            ret.Female = item.Female_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IRaceHairGetter item,
            bool doMasks,
            out RaceHair_ErrorMask errorMask,
            string name = null)
        {
            RaceHair_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceHair_ErrorMask()) : default(Func<RaceHair_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IRaceHairGetter item,
            Func<RaceHair_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Oblivion.RaceHair"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Oblivion.RaceHair");
                    }
                    if (item.Male_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FormIDXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Male),
                            item.Male,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceHair_FieldIndex.Male,
                            subMask);
                    }
                    if (item.Female_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FormIDXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Female),
                            item.Female,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceHair_FieldIndex.Female,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IRaceHairGetter item,
            bool doMasks,
            out RaceHair_ErrorMask errorMask)
        {
            RaceHair_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceHair_ErrorMask()) : default(Func<RaceHair_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IRaceHairGetter item,
            Func<RaceHair_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: RaceHair_Registration.DNAM_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            IRaceHairGetter item,
            MutagenWriter writer,
            Func<RaceHair_ErrorMask> errorMask)
        {
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Male_Property,
                fieldIndex: (int)RaceHair_FieldIndex.Male,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Female_Property,
                fieldIndex: (int)RaceHair_FieldIndex.Female,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RaceHair_Mask<T> : IMask<T>, IEquatable<RaceHair_Mask<T>>
    {
        #region Ctors
        public RaceHair_Mask()
        {
        }

        public RaceHair_Mask(T initialValue)
        {
            this.Male = initialValue;
            this.Female = initialValue;
        }
        #endregion

        #region Members
        public T Male;
        public T Female;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RaceHair_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceHair_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Male, rhs.Male)) return false;
            if (!object.Equals(this.Female, rhs.Female)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Male?.GetHashCode());
            ret = ret.CombineHashCode(this.Female?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Male)) return false;
            if (!eval(this.Female)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RaceHair_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RaceHair_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RaceHair_Mask<R> obj, Func<T, R> eval)
        {
            obj.Male = eval(this.Male);
            obj.Female = eval(this.Female);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RaceHair_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RaceHair_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RaceHair_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Male ?? true)
                {
                    fg.AppendLine($"Male => {Male}");
                }
                if (printMask?.Female ?? true)
                {
                    fg.AppendLine($"Female => {Female}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RaceHair_ErrorMask : IErrorMask, IErrorMask<RaceHair_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Male;
        public Exception Female;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    this.Male = ex;
                    break;
                case RaceHair_FieldIndex.Female:
                    this.Female = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RaceHair_FieldIndex enu = (RaceHair_FieldIndex)index;
            switch (enu)
            {
                case RaceHair_FieldIndex.Male:
                    this.Male = (Exception)obj;
                    break;
                case RaceHair_FieldIndex.Female:
                    this.Female = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RaceHair_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Male => {Male}");
            fg.AppendLine($"Female => {Female}");
        }
        #endregion

        #region Combine
        public RaceHair_ErrorMask Combine(RaceHair_ErrorMask rhs)
        {
            var ret = new RaceHair_ErrorMask();
            ret.Male = this.Male.Combine(rhs.Male);
            ret.Female = this.Female.Combine(rhs.Female);
            return ret;
        }
        public static RaceHair_ErrorMask Combine(RaceHair_ErrorMask lhs, RaceHair_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class RaceHair_CopyMask
    {
        #region Members
        public bool Male;
        public bool Female;
        #endregion

    }
    #endregion




    #endregion

}
