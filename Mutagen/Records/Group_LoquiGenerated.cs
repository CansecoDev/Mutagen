/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class Group<T> : IGroup<T>, ILoquiObjectSetter, IEquatable<Group<T>>
        where T : MajorRecord
    {
        ILoquiRegistration ILoquiObject.Registration => Group_Registration.Instance;
        public static Group_Registration Registration => Group_Registration.Instance;

        #region Ctor
        public Group()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region LastModified
        protected readonly INotifyingItem<DateTime> _LastModified = NotifyingItem.Factory<DateTime>(markAsSet: false);
        public INotifyingItemGetter<DateTime> LastModified_Property => _LastModified;
        public DateTime LastModified
        {
            get => this._LastModified.Item;
            protected set => this._LastModified.Set(value);
        }
        INotifyingItemGetter<DateTime> IGroupGetter<T>.LastModified_Property => this.LastModified_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => GroupCommon.GetNthObject<T>(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => GroupCommon.GetNthObjectHasBeenSet<T>(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => GroupCommon.UnsetNthObject<T>(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            GroupCommon.SetNthObjectHasBeenSet<T>(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return GroupCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Group_Mask<bool> printMask = null)
        {
            return GroupCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            GroupCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public Group_Mask<bool> GetHasBeenSetMask()
        {
            return GroupCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Group<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Group<T> rhs)
        {
            if (rhs == null) return false;
            if (LastModified_Property.HasBeenSet != rhs.LastModified_Property.HasBeenSet) return false;
            if (LastModified_Property.HasBeenSet)
            {
                if (LastModified != rhs.LastModified) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (LastModified_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(LastModified).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        public static Group<T> Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static Group<T> Create_XML(
            XElement root,
            out Group_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static Group<T> Create_XML(
            XElement root,
            bool doMasks,
            out Group_ErrorMask errorMask)
        {
            Group_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Group_ErrorMask()) : default(Func<Group_ErrorMask>));
            errorMask = errMaskRet;
            return ret;
        }

        public static Group<T> Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Group<T> Create_XML(
            string path,
            out Group_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Group<T> Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Group<T> Create_XML(
            Stream stream,
            out Group_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Group<T>, Group_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out Group_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Group_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Group<T>, Group_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Group_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Group_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Group_ErrorMask errorMask,
            string name = null)
        {
            GroupCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public virtual void Write_XML(
            string path,
            out Group_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Group_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            GroupCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                errorMask: out Group_ErrorMask errorMask);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        #endregion

        private static Group<T> Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<Group_ErrorMask> errorMask)
        {
            var ret = new Group<T>();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Group<T> item,
            XElement root,
            string name,
            bool doMasks,
            Func<Group_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "LastModified":
                    {
                        Exception subMask;
                        var tryGet = DateTimeXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._LastModified.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().LastModified = subMask;
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Mutagen
        public static readonly RecordType GRUP_HEADER = new RecordType("GRUP");
        #endregion

        #region OblivionBinary Translation
        #region OblivionBinary Create
        public static Group<T> Create_OblivionBinary(BinaryReader reader)
        {
            return Create_OblivionBinary(
                reader: reader,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static Group<T> Create_OblivionBinary(
            BinaryReader reader,
            out Group_ErrorMask errorMask)
        {
            return Create_OblivionBinary(
                reader: reader,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static Group<T> Create_OblivionBinary(
            BinaryReader reader,
            bool doMasks,
            out Group_ErrorMask errorMask)
        {
            Group_ErrorMask errMaskRet = null;
            var ret = Create_OblivionBinary_Internal(
                reader: reader,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Group_ErrorMask()) : default(Func<Group_ErrorMask>));
            errorMask = errMaskRet;
            return ret;
        }

        public static Group<T> Create_OblivionBinary(string path)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    return Create_OblivionBinary(reader: reader);
                }
            }
        }

        public static Group<T> Create_OblivionBinary(
            string path,
            out Group_ErrorMask errorMask)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    return Create_OblivionBinary(
                        reader: reader,
                        errorMask: out errorMask);
                }
            }
        }

        public static Group<T> Create_OblivionBinary(Stream stream)
        {
            using (var reader = new BinaryReader(stream))
            {
                return Create_OblivionBinary(reader: reader);
            }
        }

        public static Group<T> Create_OblivionBinary(
            Stream stream,
            out Group_ErrorMask errorMask)
        {
            using (var reader = new BinaryReader(stream))
            {
                return Create_OblivionBinary(
                    reader: reader,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region OblivionBinary Copy In
        public void CopyIn_OblivionBinary(
            BinaryReader reader,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Group<T>, Group_ErrorMask>.Instance.CopyIn(
                reader: reader,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out Group_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_OblivionBinary(
            BinaryReader reader,
            out Group_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Group<T>, Group_ErrorMask>.Instance.CopyIn(
                reader: reader,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_OblivionBinary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    this.CopyIn_OblivionBinary(
                        reader: reader,
                        cmds: cmds);
                }
            }
        }

        public void CopyIn_OblivionBinary(
            string path,
            out Group_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    this.CopyIn_OblivionBinary(
                        reader: reader,
                        errorMask: out errorMask,
                        cmds: cmds);
                }
            }
        }

        public void CopyIn_OblivionBinary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new BinaryReader(stream))
            {
                this.CopyIn_OblivionBinary(
                    reader: reader,
                    cmds: cmds);
            }
        }

        public void CopyIn_OblivionBinary(
            Stream stream,
            out Group_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new BinaryReader(stream))
            {
                this.CopyIn_OblivionBinary(
                    reader: reader,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region OblivionBinary Write
        public virtual void Write_OblivionBinary(
            BinaryWriter writer,
            out Group_ErrorMask errorMask)
        {
            GroupCommon.Write_OblivionBinary(
                writer: writer,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public virtual void Write_OblivionBinary(
            string path,
            out Group_ErrorMask errorMask)
        {
            using (var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                using (var writer = new BinaryWriter(fileStream))
                {
                    Write_OblivionBinary(
                        writer: writer,
                        errorMask: out errorMask);
                }
            }
        }

        public virtual void Write_OblivionBinary(
            Stream stream,
            out Group_ErrorMask errorMask)
        {
            using (var writer = new BinaryWriter(stream))
            {
                Write_OblivionBinary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_OblivionBinary(BinaryWriter writer)
        {
            GroupCommon.Write_OblivionBinary(
                writer: writer,
                item: this,
                doMasks: false,
                errorMask: out Group_ErrorMask errorMask);
        }

        public void Write_OblivionBinary(string path)
        {
            using (var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                using (var writer = new BinaryWriter(fileStream))
                {
                    Write_OblivionBinary(writer: writer);
                }
            }
        }

        public void Write_OblivionBinary(Stream stream)
        {
            using (var writer = new BinaryWriter(stream))
            {
                Write_OblivionBinary(writer: writer);
            }
        }

        #endregion

        private static Group<T> Create_OblivionBinary_Internal(
            BinaryReader reader,
            bool doMasks,
            Func<Group_ErrorMask> errorMask)
        {
            var finalPosition = HeaderTranslation.ParseRecord(
                reader,
                GRUP_HEADER);
            return Create_OblivionBinary_Internal(
                reader: reader,
                doMasks: doMasks,
                finalPosition: finalPosition,
                errorMask: errorMask);
        }

        private static Group<T> Create_OblivionBinary_Internal(
            BinaryReader reader,
            bool doMasks,
            long finalPosition,
            Func<Group_ErrorMask> errorMask)
        {
            var ret = new Group<T>();
            try
            {
                Fill_OblivionBinary(
                    item: ret,
                    reader: reader,
                    doMasks: doMasks,
                    errorMask: errorMask);
                if (reader.BaseStream.Position != finalPosition)
                {
                    reader.BaseStream.Position = finalPosition;
                    throw new ArgumentException("Read more bytes than allocated");
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_OblivionBinary(
            Group<T> item,
            BinaryReader reader,
            bool doMasks,
            Func<Group_ErrorMask> errorMask)
        {
            {
                Exception subMask;
                var tryGet = Mutagen.Binary.DateTimeBinaryTranslation.Instance.Parse(
                    reader,
                    doMasks: doMasks,
                    errorMask: out subMask);
                item._LastModified.SetIfSucceeded(tryGet);
                if (doMasks && subMask != null)
                {
                    errorMask().LastModified = subMask;
                }
            }
        }

        #endregion

        public Group<T> Copy(
            Group_CopyMask copyMask = null,
            IGroupGetter<T> def = null)
        {
            return Group<T>.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Group<T> Copy(
            IGroup<T> item,
            Group_CopyMask copyMask = null,
            IGroupGetter<T> def = null)
        {
            Group<T> ret;
            if (item.GetType().Equals(typeof(Group<T>)))
            {
                ret = new Group<T>();
            }
            else
            {
                ret = (Group<T>)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Group_CopyMask copyMask = null,
            IGroupGetter<T> def = null)
            where CopyType : class, IGroup<T>
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Group<T>)))
            {
                ret = new Group<T>() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Group<T> Copy_ToLoqui(
            IGroupGetter<T> item,
            Group_CopyMask copyMask = null,
            IGroupGetter<T> def = null)
        {
            var ret = new Group<T>();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    this._LastModified.Set(
                        (DateTime)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            GroupCommon.Clear(this, cmds);
        }


        public static Group<T> Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Group<T>();
            foreach (var pair in fields)
            {
                CopyInInternal_Group(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Group(Group<T> obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Group_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    obj._LastModified.Set(
                        (DateTime)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Group<T> obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IGroup<T> : IGroupGetter<T>, ILoquiClass<IGroup<T>, IGroupGetter<T>>, ILoquiClass<Group<T>, IGroupGetter<T>>
        where T : MajorRecord
    {
    }

    public interface IGroupGetter<T> : ILoquiObject
        where T : MajorRecord
    {
        #region LastModified
        DateTime LastModified { get; }
        INotifyingItemGetter<DateTime> LastModified_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum Group_FieldIndex
    {
        LastModified = 0,
    }
    #endregion

    #region Registration
    public class Group_Registration : ILoquiRegistration
    {
        public static readonly Group_Registration Instance = new Group_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 11,
            version: 0);

        public const string GUID = "35a37d0b-4676-4dba-9410-a5972e262f5d";

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(Group_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Group_ErrorMask);

        public static readonly Type ClassType = typeof(Group<>);

        public static readonly Type GetterType = typeof(IGroupGetter<>);

        public static readonly Type SetterType = typeof(IGroup<>);

        public static readonly Type CommonType = typeof(GroupCommon);

        public const string FullName = "Mutagen.Group";

        public const string Name = "Group";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 1;

        public static readonly Type GenericRegistrationType = typeof(Group_Registration<>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "LASTMODIFIED":
                    return (ushort)Group_FieldIndex.LastModified;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    return "LastModified";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class Group_Registration<T> : Group_Registration
        where T : MajorRecord
    {
        public static readonly Group_Registration<T> GenericInstance = new Group_Registration<T>();

        public new static Type GetNthType(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    return typeof(DateTime);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    #endregion

    #region Extensions
    public static class GroupCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom<T>(
            this IGroup<T> item,
            IGroupGetter<T> rhs,
            Group_CopyMask copyMask = null,
            IGroupGetter<T> def = null,
            NotifyingFireParameters? cmds = null)
            where T : MajorRecord
        {
            GroupCommon.CopyFieldsFrom<T>(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom<T>(
            this IGroup<T> item,
            IGroupGetter<T> rhs,
            out Group_ErrorMask errorMask,
            Group_CopyMask copyMask = null,
            IGroupGetter<T> def = null,
            NotifyingFireParameters? cmds = null)
            where T : MajorRecord
        {
            GroupCommon.CopyFieldsFrom<T>(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom<T>(
            this IGroup<T> item,
            IGroupGetter<T> rhs,
            IGroupGetter<T> def,
            bool doErrorMask,
            out Group_ErrorMask errorMask,
            Group_CopyMask copyMask,
            NotifyingFireParameters? cmds)
            where T : MajorRecord
        {
            Group_ErrorMask retErrorMask = null;
            Func<Group_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Group_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom<T>(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom<T>(
            this IGroup<T> item,
            IGroupGetter<T> rhs,
            IGroupGetter<T> def,
            bool doErrorMask,
            Func<Group_ErrorMask> errorMask,
            Group_CopyMask copyMask,
            NotifyingFireParameters? cmds)
            where T : MajorRecord
        {
        }

        #endregion

        public static void SetNthObjectHasBeenSet<T>(
            ushort index,
            bool on,
            IGroup<T> obj,
            NotifyingFireParameters? cmds = null)
            where T : MajorRecord
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject<T>(
            ushort index,
            IGroup<T> obj,
            NotifyingUnsetParameters? cmds = null)
            where T : MajorRecord
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet<T>(
            ushort index,
            IGroup<T> obj)
            where T : MajorRecord
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    return obj.LastModified_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject<T>(
            ushort index,
            IGroupGetter<T> obj)
            where T : MajorRecord
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    return obj.LastModified;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear<T>(
            IGroup<T> item,
            NotifyingUnsetParameters? cmds = null)
            where T : MajorRecord
        {
        }

        public static Group_Mask<bool> GetEqualsMask<T>(
            this IGroupGetter<T> item,
            IGroupGetter<T> rhs)
            where T : MajorRecord
        {
            var ret = new Group_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask<T>(
            IGroupGetter<T> item,
            IGroupGetter<T> rhs,
            Group_Mask<bool> ret)
            where T : MajorRecord
        {
            if (rhs == null) return;
            ret.LastModified = item.LastModified_Property.Equals(rhs.LastModified_Property, (l, r) => l == r);
        }

        public static string ToString<T>(
            this IGroupGetter<T> item,
            string name = null,
            Group_Mask<bool> printMask = null)
            where T : MajorRecord
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString<T>(
            this IGroupGetter<T> item,
            FileGeneration fg,
            string name = null,
            Group_Mask<bool> printMask = null)
            where T : MajorRecord
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Group<T>)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Group<T>)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.LastModified ?? true)
                {
                    fg.AppendLine($"LastModified => {item.LastModified}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet<T>(
            this IGroupGetter<T> item,
            Group_Mask<bool?> checkMask)
            where T : MajorRecord
        {
            if (checkMask.LastModified.HasValue && checkMask.LastModified.Value != item.LastModified_Property.HasBeenSet) return false;
            return true;
        }

        public static Group_Mask<bool> GetHasBeenSetMask<T>(IGroupGetter<T> item)
            where T : MajorRecord
        {
            var ret = new Group_Mask<bool>();
            ret.LastModified = item.LastModified_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML<T>(
            XmlWriter writer,
            IGroupGetter<T> item,
            bool doMasks,
            out Group_ErrorMask errorMask,
            string name = null)
            where T : MajorRecord
        {
            Group_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Group_ErrorMask()) : default(Func<Group_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal<T>(
            XmlWriter writer,
            IGroupGetter<T> item,
            bool doMasks,
            Func<Group_ErrorMask> errorMask,
            string name = null)
            where T : MajorRecord
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Group"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Group");
                    }
                    if (item.LastModified_Property.HasBeenSet)
                    {
                        Exception subMask;
                        DateTimeXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.LastModified),
                            item.LastModified,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().LastModified = subMask;
                        }
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region OblivionBinary Translation
        #region OblivionBinary Write
        public static void Write_OblivionBinary<T>(
            BinaryWriter writer,
            IGroupGetter<T> item,
            bool doMasks,
            out Group_ErrorMask errorMask)
            where T : MajorRecord
        {
            Group_ErrorMask errMaskRet = null;
            Write_OblivionBinary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Group_ErrorMask()) : default(Func<Group_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_OblivionBinary_Internal<T>(
            BinaryWriter writer,
            IGroupGetter<T> item,
            bool doMasks,
            Func<Group_ErrorMask> errorMask)
            where T : MajorRecord
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Group<T>.GRUP_HEADER,
                    type: ObjectType.Group))
                {
                    Write_OblivionBinary_Embedded(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_OblivionBinary_Embedded<T>(
            IGroupGetter<T> item,
            BinaryWriter writer,
            bool doMasks,
            Func<Group_ErrorMask> errorMask)
            where T : MajorRecord
        {
            {
                Exception subMask;
                Mutagen.Binary.DateTimeBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LastModified,
                    doMasks: doMasks,
                    errorMask: out subMask);
                if (doMasks && subMask != null)
                {
                    errorMask().LastModified = subMask;
                }
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Group_Mask<T> : IMask<T>, IEquatable<Group_Mask<T>>
    {
        #region Ctors
        public Group_Mask()
        {
        }

        public Group_Mask(T initialValue)
        {
            this.LastModified = initialValue;
        }
        #endregion

        #region Members
        public T LastModified;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Group_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Group_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.LastModified, rhs.LastModified)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.LastModified?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.LastModified)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Group_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Group_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Group_Mask<R> obj, Func<T, R> eval)
        {
            obj.LastModified = eval(this.LastModified);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Group_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Group_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Group_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.LastModified ?? true)
                {
                    fg.AppendLine($"LastModified => {LastModified.ToStringSafe()}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Group_ErrorMask : IErrorMask
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception LastModified;
        #endregion

        #region IErrorMask
        public void SetNthException(ushort index, Exception ex)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    this.LastModified = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(ushort index, object obj)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.LastModified:
                    this.LastModified = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Group_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            if (LastModified != null)
            {
                fg.AppendLine($"LastModified => {LastModified.ToStringSafe()}");
            }
        }
        #endregion

        #region Combine
        public Group_ErrorMask Combine(Group_ErrorMask rhs)
        {
            var ret = new Group_ErrorMask();
            ret.LastModified = this.LastModified.Combine(rhs.LastModified);
            return ret;
        }
        public static Group_ErrorMask Combine(Group_ErrorMask lhs, Group_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Group_CopyMask
    {
        #region Members
        public bool LastModified;
        #endregion

    }
    #endregion




    #endregion

}
