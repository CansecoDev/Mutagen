/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class Header : IHeader, ILoquiObjectSetter, IEquatable<Header>
    {
        ILoquiRegistration ILoquiObject.Registration => Header_Registration.Instance;
        public static Header_Registration Registration => Header_Registration.Instance;

        #region Ctor
        public Header()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Version
        protected readonly INotifyingItem<Single> _Version = NotifyingItem.Factory<Single>(markAsSet: false);
        public INotifyingItem<Single> Version_Property => _Version;
        public Single Version
        {
            get => this._Version.Item;
            set => this._Version.Set(value);
        }
        INotifyingItem<Single> IHeader.Version_Property => this.Version_Property;
        INotifyingItemGetter<Single> IHeaderGetter.Version_Property => this.Version_Property;
        #endregion
        #region NumRecords
        protected readonly INotifyingItem<Int32> _NumRecords = NotifyingItem.Factory<Int32>(markAsSet: false);
        public INotifyingItem<Int32> NumRecords_Property => _NumRecords;
        public Int32 NumRecords
        {
            get => this._NumRecords.Item;
            set => this._NumRecords.Set(value);
        }
        INotifyingItem<Int32> IHeader.NumRecords_Property => this.NumRecords_Property;
        INotifyingItemGetter<Int32> IHeaderGetter.NumRecords_Property => this.NumRecords_Property;
        #endregion
        #region NextObjectID
        protected readonly INotifyingItem<UInt32> _NextObjectID = NotifyingItem.Factory<UInt32>(markAsSet: false);
        public INotifyingItem<UInt32> NextObjectID_Property => _NextObjectID;
        public UInt32 NextObjectID
        {
            get => this._NextObjectID.Item;
            set => this._NextObjectID.Set(value);
        }
        INotifyingItem<UInt32> IHeader.NextObjectID_Property => this.NextObjectID_Property;
        INotifyingItemGetter<UInt32> IHeaderGetter.NextObjectID_Property => this.NextObjectID_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => HeaderCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => HeaderCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => HeaderCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            HeaderCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return HeaderCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Header_Mask<bool> printMask = null)
        {
            return HeaderCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            HeaderCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public Header_Mask<bool> GetHasBeenSetMask()
        {
            return HeaderCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Header rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Header rhs)
        {
            if (rhs == null) return false;
            if (Version_Property.HasBeenSet != rhs.Version_Property.HasBeenSet) return false;
            if (Version_Property.HasBeenSet)
            {
                if (Version != rhs.Version) return false;
            }
            if (NumRecords_Property.HasBeenSet != rhs.NumRecords_Property.HasBeenSet) return false;
            if (NumRecords_Property.HasBeenSet)
            {
                if (NumRecords != rhs.NumRecords) return false;
            }
            if (NextObjectID_Property.HasBeenSet != rhs.NextObjectID_Property.HasBeenSet) return false;
            if (NextObjectID_Property.HasBeenSet)
            {
                if (NextObjectID != rhs.NextObjectID) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Version_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Version).CombineHashCode(ret);
            }
            if (NumRecords_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(NumRecords).CombineHashCode(ret);
            }
            if (NextObjectID_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(NextObjectID).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        public static Header Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static Header Create_XML(
            XElement root,
            out Header_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static Header Create_XML(
            XElement root,
            bool doMasks,
            out Header_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        public static (Header Object, Header_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Header_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Header_ErrorMask()) : default(Func<Header_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Header Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Header Create_XML(
            string path,
            out Header_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Header Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Header Create_XML(
            Stream stream,
            out Header_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Header, Header_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Header_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Header, Header_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Header_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Header_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Header_ErrorMask errorMask,
            string name = null)
        {
            HeaderCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public virtual void Write_XML(
            string path,
            out Header_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Header_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            HeaderCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                errorMask: out Header_ErrorMask errorMask);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        #endregion

        private static Header Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<Header_ErrorMask> errorMask)
        {
            var ret = new Header();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Header item,
            XElement root,
            string name,
            bool doMasks,
            Func<Header_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Version":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Version.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Header_FieldIndex.Version,
                            subMask);
                    }
                    break;
                case "NumRecords":
                    {
                        Exception subMask;
                        var tryGet = Int32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._NumRecords.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Header_FieldIndex.NumRecords,
                            subMask);
                    }
                    break;
                case "NextObjectID":
                    {
                        Exception subMask;
                        var tryGet = UInt32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._NextObjectID.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Header_FieldIndex.NextObjectID,
                            subMask);
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        public static Header Create_Binary(BinaryReader reader)
        {
            return Create_Binary(
                reader: reader,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static Header Create_Binary(
            BinaryReader reader,
            out Header_ErrorMask errorMask)
        {
            return Create_Binary(
                reader: reader,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static Header Create_Binary(
            BinaryReader reader,
            bool doMasks,
            out Header_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                reader: reader,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        public static (Header Object, Header_ErrorMask ErrorMask) Create_Binary(
            BinaryReader reader,
            bool doMasks)
        {
            Header_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                reader: reader,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Header_ErrorMask()) : default(Func<Header_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Header Create_Binary(string path)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    return Create_Binary(reader: reader);
                }
            }
        }

        public static Header Create_Binary(
            string path,
            out Header_ErrorMask errorMask)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    return Create_Binary(
                        reader: reader,
                        errorMask: out errorMask);
                }
            }
        }

        public static Header Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReader(stream))
            {
                return Create_Binary(reader: reader);
            }
        }

        public static Header Create_Binary(
            Stream stream,
            out Header_ErrorMask errorMask)
        {
            using (var reader = new BinaryReader(stream))
            {
                return Create_Binary(
                    reader: reader,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            BinaryReader reader,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Header, Header_ErrorMask>.Instance.CopyIn(
                reader: reader,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            BinaryReader reader,
            out Header_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Header, Header_ErrorMask>.Instance.CopyIn(
                reader: reader,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    this.CopyIn_Binary(
                        reader: reader,
                        cmds: cmds);
                }
            }
        }

        public void CopyIn_Binary(
            string path,
            out Header_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    this.CopyIn_Binary(
                        reader: reader,
                        errorMask: out errorMask,
                        cmds: cmds);
                }
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new BinaryReader(stream))
            {
                this.CopyIn_Binary(
                    reader: reader,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Header_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new BinaryReader(stream))
            {
                this.CopyIn_Binary(
                    reader: reader,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            BinaryWriter writer,
            out Header_ErrorMask errorMask)
        {
            HeaderCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public virtual void Write_Binary(
            string path,
            out Header_ErrorMask errorMask)
        {
            using (var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                using (var writer = new BinaryWriter(fileStream))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Header_ErrorMask errorMask)
        {
            using (var writer = new BinaryWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(BinaryWriter writer)
        {
            HeaderCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: false,
                errorMask: out Header_ErrorMask errorMask);
        }

        public void Write_Binary(string path)
        {
            using (var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                using (var writer = new BinaryWriter(fileStream))
                {
                    Write_Binary(writer: writer);
                }
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new BinaryWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        #endregion

        private static Header Create_Binary_Internal(
            BinaryReader reader,
            bool doMasks,
            Func<Header_ErrorMask> errorMask)
        {
            var finalPosition = HeaderTranslation.ParseSubrecord(
                reader,
                Header_Registration.HEDR_HEADER);
            return Create_Binary_Internal(
                reader: reader,
                doMasks: doMasks,
                finalPosition: finalPosition,
                errorMask: errorMask);
        }

        private static Header Create_Binary_Internal(
            BinaryReader reader,
            bool doMasks,
            long finalPosition,
            Func<Header_ErrorMask> errorMask)
        {
            var ret = new Header();
            try
            {
                Fill_Binary(
                    item: ret,
                    reader: reader,
                    doMasks: doMasks,
                    errorMask: errorMask);
                if (reader.BaseStream.Position != finalPosition)
                {
                    throw new ArgumentException("Read more bytes than allocated");
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            reader.BaseStream.Position = finalPosition;
            return ret;
        }

        protected static void Fill_Binary(
            Header item,
            BinaryReader reader,
            bool doMasks,
            Func<Header_ErrorMask> errorMask)
        {
            {
                Exception subMask;
                var tryGet = Mutagen.Binary.FloatBinaryTranslation.Instance.Parse(
                    reader,
                    doMasks: doMasks,
                    errorMask: out subMask);
                item._Version.SetIfSucceeded(tryGet);
                if (doMasks && subMask != null)
                {
                    errorMask().Version = subMask;
                }
            }
            {
                Exception subMask;
                var tryGet = Mutagen.Binary.Int32BinaryTranslation.Instance.Parse(
                    reader,
                    doMasks: doMasks,
                    errorMask: out subMask);
                item._NumRecords.SetIfSucceeded(tryGet);
                if (doMasks && subMask != null)
                {
                    errorMask().NumRecords = subMask;
                }
            }
            {
                Exception subMask;
                var tryGet = Mutagen.Binary.UInt32BinaryTranslation.Instance.Parse(
                    reader,
                    doMasks: doMasks,
                    errorMask: out subMask);
                item._NextObjectID.SetIfSucceeded(tryGet);
                if (doMasks && subMask != null)
                {
                    errorMask().NextObjectID = subMask;
                }
            }
        }

        #endregion

        public Header Copy(
            Header_CopyMask copyMask = null,
            IHeaderGetter def = null)
        {
            return Header.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Header Copy(
            IHeader item,
            Header_CopyMask copyMask = null,
            IHeaderGetter def = null)
        {
            Header ret;
            if (item.GetType().Equals(typeof(Header)))
            {
                ret = new Header();
            }
            else
            {
                ret = (Header)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Header_CopyMask copyMask = null,
            IHeaderGetter def = null)
            where CopyType : class, IHeader
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Header)))
            {
                ret = new Header() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Header Copy_ToLoqui(
            IHeaderGetter item,
            Header_CopyMask copyMask = null,
            IHeaderGetter def = null)
        {
            var ret = new Header();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            Header_FieldIndex enu = (Header_FieldIndex)index;
            switch (enu)
            {
                case Header_FieldIndex.Version:
                    this._Version.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Header_FieldIndex.NumRecords:
                    this._NumRecords.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case Header_FieldIndex.NextObjectID:
                    this._NextObjectID.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            HeaderCommon.Clear(this, cmds);
        }


        public static Header Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Header();
            foreach (var pair in fields)
            {
                CopyInInternal_Header(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Header(Header obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Header_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Header_FieldIndex.Version:
                    obj._Version.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Header_FieldIndex.NumRecords:
                    obj._NumRecords.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case Header_FieldIndex.NextObjectID:
                    obj._NextObjectID.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Header obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IHeader : IHeaderGetter, ILoquiClass<IHeader, IHeaderGetter>, ILoquiClass<Header, IHeaderGetter>
    {
        new Single Version { get; set; }
        new INotifyingItem<Single> Version_Property { get; }

        new Int32 NumRecords { get; set; }
        new INotifyingItem<Int32> NumRecords_Property { get; }

        new UInt32 NextObjectID { get; set; }
        new INotifyingItem<UInt32> NextObjectID_Property { get; }

    }

    public interface IHeaderGetter : ILoquiObject
    {
        #region Version
        Single Version { get; }
        INotifyingItemGetter<Single> Version_Property { get; }

        #endregion
        #region NumRecords
        Int32 NumRecords { get; }
        INotifyingItemGetter<Int32> NumRecords_Property { get; }

        #endregion
        #region NextObjectID
        UInt32 NextObjectID { get; }
        INotifyingItemGetter<UInt32> NextObjectID_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum Header_FieldIndex
    {
        Version = 0,
        NumRecords = 1,
        NextObjectID = 2,
    }
    #endregion

    #region Registration
    public class Header_Registration : ILoquiRegistration
    {
        public static readonly Header_Registration Instance = new Header_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "88a14b36-530f-42a1-aa1f-b8ee1852e625";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Header_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Header_ErrorMask);

        public static readonly Type ClassType = typeof(Header);

        public static readonly Type GetterType = typeof(IHeaderGetter);

        public static readonly Type SetterType = typeof(IHeader);

        public static readonly Type CommonType = typeof(HeaderCommon);

        public const string FullName = "Mutagen.Header";

        public const string Name = "Header";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VERSION":
                    return (ushort)Header_FieldIndex.Version;
                case "NUMRECORDS":
                    return (ushort)Header_FieldIndex.NumRecords;
                case "NEXTOBJECTID":
                    return (ushort)Header_FieldIndex.NextObjectID;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Header_FieldIndex enu = (Header_FieldIndex)index;
            switch (enu)
            {
                case Header_FieldIndex.Version:
                case Header_FieldIndex.NumRecords:
                case Header_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Header_FieldIndex enu = (Header_FieldIndex)index;
            switch (enu)
            {
                case Header_FieldIndex.Version:
                case Header_FieldIndex.NumRecords:
                case Header_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Header_FieldIndex enu = (Header_FieldIndex)index;
            switch (enu)
            {
                case Header_FieldIndex.Version:
                case Header_FieldIndex.NumRecords:
                case Header_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Header_FieldIndex enu = (Header_FieldIndex)index;
            switch (enu)
            {
                case Header_FieldIndex.Version:
                    return "Version";
                case Header_FieldIndex.NumRecords:
                    return "NumRecords";
                case Header_FieldIndex.NextObjectID:
                    return "NextObjectID";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Header_FieldIndex enu = (Header_FieldIndex)index;
            switch (enu)
            {
                case Header_FieldIndex.Version:
                case Header_FieldIndex.NumRecords:
                case Header_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Header_FieldIndex enu = (Header_FieldIndex)index;
            switch (enu)
            {
                case Header_FieldIndex.Version:
                case Header_FieldIndex.NumRecords:
                case Header_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Header_FieldIndex enu = (Header_FieldIndex)index;
            switch (enu)
            {
                case Header_FieldIndex.Version:
                    return typeof(Single);
                case Header_FieldIndex.NumRecords:
                    return typeof(Int32);
                case Header_FieldIndex.NextObjectID:
                    return typeof(UInt32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType HEDR_HEADER = new RecordType("HEDR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = HEDR_HEADER;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class HeaderCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IHeader item,
            IHeaderGetter rhs,
            Header_CopyMask copyMask = null,
            IHeaderGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            HeaderCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IHeader item,
            IHeaderGetter rhs,
            out Header_ErrorMask errorMask,
            Header_CopyMask copyMask = null,
            IHeaderGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            HeaderCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IHeader item,
            IHeaderGetter rhs,
            IHeaderGetter def,
            bool doErrorMask,
            out Header_ErrorMask errorMask,
            Header_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            Header_ErrorMask retErrorMask = null;
            Func<Header_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Header_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IHeader item,
            IHeaderGetter rhs,
            IHeaderGetter def,
            bool doErrorMask,
            Func<Header_ErrorMask> errorMask,
            Header_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.Version ?? true)
            {
                try
                {
                    item.Version_Property.SetToWithDefault(
                        rhs.Version_Property,
                        def?.Version_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Header_FieldIndex.Version, ex);
                }
            }
            if (copyMask?.NumRecords ?? true)
            {
                try
                {
                    item.NumRecords_Property.SetToWithDefault(
                        rhs.NumRecords_Property,
                        def?.NumRecords_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Header_FieldIndex.NumRecords, ex);
                }
            }
            if (copyMask?.NextObjectID ?? true)
            {
                try
                {
                    item.NextObjectID_Property.SetToWithDefault(
                        rhs.NextObjectID_Property,
                        def?.NextObjectID_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Header_FieldIndex.NextObjectID, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IHeader obj,
            NotifyingFireParameters? cmds = null)
        {
            Header_FieldIndex enu = (Header_FieldIndex)index;
            switch (enu)
            {
                case Header_FieldIndex.Version:
                    obj.Version_Property.HasBeenSet = on;
                    break;
                case Header_FieldIndex.NumRecords:
                    obj.NumRecords_Property.HasBeenSet = on;
                    break;
                case Header_FieldIndex.NextObjectID:
                    obj.NextObjectID_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IHeader obj,
            NotifyingUnsetParameters? cmds = null)
        {
            Header_FieldIndex enu = (Header_FieldIndex)index;
            switch (enu)
            {
                case Header_FieldIndex.Version:
                    obj.Version_Property.Unset(cmds);
                    break;
                case Header_FieldIndex.NumRecords:
                    obj.NumRecords_Property.Unset(cmds);
                    break;
                case Header_FieldIndex.NextObjectID:
                    obj.NextObjectID_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IHeader obj)
        {
            Header_FieldIndex enu = (Header_FieldIndex)index;
            switch (enu)
            {
                case Header_FieldIndex.Version:
                    return obj.Version_Property.HasBeenSet;
                case Header_FieldIndex.NumRecords:
                    return obj.NumRecords_Property.HasBeenSet;
                case Header_FieldIndex.NextObjectID:
                    return obj.NextObjectID_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IHeaderGetter obj)
        {
            Header_FieldIndex enu = (Header_FieldIndex)index;
            switch (enu)
            {
                case Header_FieldIndex.Version:
                    return obj.Version;
                case Header_FieldIndex.NumRecords:
                    return obj.NumRecords;
                case Header_FieldIndex.NextObjectID:
                    return obj.NextObjectID;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IHeader item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Version_Property.Unset(cmds.ToUnsetParams());
            item.NumRecords_Property.Unset(cmds.ToUnsetParams());
            item.NextObjectID_Property.Unset(cmds.ToUnsetParams());
        }

        public static Header_Mask<bool> GetEqualsMask(
            this IHeaderGetter item,
            IHeaderGetter rhs)
        {
            var ret = new Header_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IHeaderGetter item,
            IHeaderGetter rhs,
            Header_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Version = item.Version_Property.Equals(rhs.Version_Property, (l, r) => l == r);
            ret.NumRecords = item.NumRecords_Property.Equals(rhs.NumRecords_Property, (l, r) => l == r);
            ret.NextObjectID = item.NextObjectID_Property.Equals(rhs.NextObjectID_Property, (l, r) => l == r);
        }

        public static string ToString(
            this IHeaderGetter item,
            string name = null,
            Header_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IHeaderGetter item,
            FileGeneration fg,
            string name = null,
            Header_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Header)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Header)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Version ?? true)
                {
                    fg.AppendLine($"Version => {item.Version}");
                }
                if (printMask?.NumRecords ?? true)
                {
                    fg.AppendLine($"NumRecords => {item.NumRecords}");
                }
                if (printMask?.NextObjectID ?? true)
                {
                    fg.AppendLine($"NextObjectID => {item.NextObjectID}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IHeaderGetter item,
            Header_Mask<bool?> checkMask)
        {
            if (checkMask.Version.HasValue && checkMask.Version.Value != item.Version_Property.HasBeenSet) return false;
            if (checkMask.NumRecords.HasValue && checkMask.NumRecords.Value != item.NumRecords_Property.HasBeenSet) return false;
            if (checkMask.NextObjectID.HasValue && checkMask.NextObjectID.Value != item.NextObjectID_Property.HasBeenSet) return false;
            return true;
        }

        public static Header_Mask<bool> GetHasBeenSetMask(IHeaderGetter item)
        {
            var ret = new Header_Mask<bool>();
            ret.Version = item.Version_Property.HasBeenSet;
            ret.NumRecords = item.NumRecords_Property.HasBeenSet;
            ret.NextObjectID = item.NextObjectID_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IHeaderGetter item,
            bool doMasks,
            out Header_ErrorMask errorMask,
            string name = null)
        {
            Header_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Header_ErrorMask()) : default(Func<Header_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IHeaderGetter item,
            bool doMasks,
            Func<Header_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Header"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Header");
                    }
                    if (item.Version_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Version),
                            item.Version,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Header_FieldIndex.Version,
                            subMask);
                    }
                    if (item.NumRecords_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.NumRecords),
                            item.NumRecords,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Header_FieldIndex.NumRecords,
                            subMask);
                    }
                    if (item.NextObjectID_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.NextObjectID),
                            item.NextObjectID,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Header_FieldIndex.NextObjectID,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            BinaryWriter writer,
            IHeaderGetter item,
            bool doMasks,
            out Header_ErrorMask errorMask)
        {
            Header_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Header_ErrorMask()) : default(Func<Header_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            BinaryWriter writer,
            IHeaderGetter item,
            bool doMasks,
            Func<Header_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Header_Registration.HEDR_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            IHeaderGetter item,
            BinaryWriter writer,
            bool doMasks,
            Func<Header_ErrorMask> errorMask)
        {
            {
                Exception subMask;
                Mutagen.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Version,
                    doMasks: doMasks,
                    errorMask: out subMask);
                ErrorMask.HandleErrorMask(
                    errorMask,
                    doMasks,
                    (int)Header_FieldIndex.Version,
                    subMask);
            }
            {
                Exception subMask;
                Mutagen.Binary.Int32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.NumRecords,
                    doMasks: doMasks,
                    errorMask: out subMask);
                ErrorMask.HandleErrorMask(
                    errorMask,
                    doMasks,
                    (int)Header_FieldIndex.NumRecords,
                    subMask);
            }
            {
                Exception subMask;
                Mutagen.Binary.UInt32BinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.NextObjectID,
                    doMasks: doMasks,
                    errorMask: out subMask);
                ErrorMask.HandleErrorMask(
                    errorMask,
                    doMasks,
                    (int)Header_FieldIndex.NextObjectID,
                    subMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Header_Mask<T> : IMask<T>, IEquatable<Header_Mask<T>>
    {
        #region Ctors
        public Header_Mask()
        {
        }

        public Header_Mask(T initialValue)
        {
            this.Version = initialValue;
            this.NumRecords = initialValue;
            this.NextObjectID = initialValue;
        }
        #endregion

        #region Members
        public T Version;
        public T NumRecords;
        public T NextObjectID;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Header_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Header_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Version, rhs.Version)) return false;
            if (!object.Equals(this.NumRecords, rhs.NumRecords)) return false;
            if (!object.Equals(this.NextObjectID, rhs.NextObjectID)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Version?.GetHashCode());
            ret = ret.CombineHashCode(this.NumRecords?.GetHashCode());
            ret = ret.CombineHashCode(this.NextObjectID?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Version)) return false;
            if (!eval(this.NumRecords)) return false;
            if (!eval(this.NextObjectID)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Header_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Header_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Header_Mask<R> obj, Func<T, R> eval)
        {
            obj.Version = eval(this.Version);
            obj.NumRecords = eval(this.NumRecords);
            obj.NextObjectID = eval(this.NextObjectID);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Header_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Header_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Header_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Version ?? true)
                {
                    fg.AppendLine($"Version => {Version.ToStringSafe()}");
                }
                if (printMask?.NumRecords ?? true)
                {
                    fg.AppendLine($"NumRecords => {NumRecords.ToStringSafe()}");
                }
                if (printMask?.NextObjectID ?? true)
                {
                    fg.AppendLine($"NextObjectID => {NextObjectID.ToStringSafe()}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Header_ErrorMask : IErrorMask
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Version;
        public Exception NumRecords;
        public Exception NextObjectID;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            Header_FieldIndex enu = (Header_FieldIndex)index;
            switch (enu)
            {
                case Header_FieldIndex.Version:
                    this.Version = ex;
                    break;
                case Header_FieldIndex.NumRecords:
                    this.NumRecords = ex;
                    break;
                case Header_FieldIndex.NextObjectID:
                    this.NextObjectID = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Header_FieldIndex enu = (Header_FieldIndex)index;
            switch (enu)
            {
                case Header_FieldIndex.Version:
                    this.Version = (Exception)obj;
                    break;
                case Header_FieldIndex.NumRecords:
                    this.NumRecords = (Exception)obj;
                    break;
                case Header_FieldIndex.NextObjectID:
                    this.NextObjectID = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Header_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            if (Version != null)
            {
                fg.AppendLine($"Version => {Version.ToStringSafe()}");
            }
            if (NumRecords != null)
            {
                fg.AppendLine($"NumRecords => {NumRecords.ToStringSafe()}");
            }
            if (NextObjectID != null)
            {
                fg.AppendLine($"NextObjectID => {NextObjectID.ToStringSafe()}");
            }
        }
        #endregion

        #region Combine
        public Header_ErrorMask Combine(Header_ErrorMask rhs)
        {
            var ret = new Header_ErrorMask();
            ret.Version = this.Version.Combine(rhs.Version);
            ret.NumRecords = this.NumRecords.Combine(rhs.NumRecords);
            ret.NextObjectID = this.NextObjectID.Combine(rhs.NextObjectID);
            return ret;
        }
        public static Header_ErrorMask Combine(Header_ErrorMask lhs, Header_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Header_CopyMask
    {
        #region Members
        public bool Version;
        public bool NumRecords;
        public bool NextObjectID;
        #endregion

    }
    #endregion




    #endregion

}
