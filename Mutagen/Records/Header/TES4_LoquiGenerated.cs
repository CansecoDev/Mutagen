/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using Mutagen;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;

namespace Mutagen
{
    #region Class
    public partial class TES4 : ITES4, ILoquiObjectSetter, IEquatable<TES4>
    {
        ILoquiRegistration ILoquiObject.Registration => TES4_Registration.Instance;
        public static TES4_Registration Registration => TES4_Registration.Instance;

        #region Ctor
        public TES4()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Fluff
        private Byte[] _Fluff = new byte[16];
        public Byte[] Fluff
        {
            get => Fluff;
            set
            {
                this.Fluff = value;
                if (value == null)
                {
                    this.Fluff = new byte[16];
                }
            }
        }
        #endregion
        #region NumRecords
        public Int64 NumRecords { get; set; }
        #endregion
        #region NextObjectID
        public UInt64 NextObjectID { get; set; }
        #endregion
        #region Header
        private Header _Header_Object = new Header();
        public Header Header => _Header_Object;
        #endregion
        #region TypeOffsets
        public UnknownData TypeOffsets { get; set; }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => TES4Common.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TES4Common.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TES4Common.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TES4Common.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return TES4Common.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            TES4_Mask<bool> printMask = null)
        {
            return TES4Common.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TES4Common.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public TES4_Mask<bool> GetHasBeenSetMask()
        {
            return TES4Common.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TES4 rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TES4 rhs)
        {
            if (rhs == null) return false;
            if (!Fluff.EqualsFast(rhs.Fluff)) return false;
            if (NumRecords != rhs.NumRecords) return false;
            if (NextObjectID != rhs.NextObjectID) return false;
            if (!object.Equals(Header, rhs.Header)) return false;
            if (!object.Equals(TypeOffsets, rhs.TypeOffsets)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Fluff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(NumRecords).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(NextObjectID).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Header).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(TypeOffsets).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        public static TES4 Create_XML(Stream stream)
        {
            using (var reader = new StreamReader(stream))
            {
                return Create_XML(XElement.Parse(reader.ReadToEnd()));
            }
        }

        public static TES4 Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static TES4 Create_XML(
            XElement root,
            out TES4_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static TES4 Create_XML(
            XElement root,
            bool doMasks,
            out TES4_ErrorMask errorMask)
        {
            TES4_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TES4_ErrorMask()) : default(Func<TES4_ErrorMask>));
            errorMask = errMaskRet;
            return ret;
        }

        private static TES4 Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<TES4_ErrorMask> errorMask)
        {
            var ret = new TES4();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            TES4 item,
            XElement root,
            string name,
            bool doMasks,
            Func<TES4_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Fluff":
                    {
                        Exception subMask;
                        var tryGet = ByteArrayXmlTranslation.Instance.Parse(
                            root,
                            nullable: true,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Fluff = tryGet.Value;
                        }
                        if (subMask != null)
                        {
                            errorMask().Fluff = subMask;
                        }
                    }
                    break;
                case "NumRecords":
                    {
                        Exception subMask;
                        var tryGet = Int64XmlTranslation.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.NumRecords = tryGet.Value.Value;
                        }
                        if (subMask != null)
                        {
                            errorMask().NumRecords = subMask;
                        }
                    }
                    break;
                case "NextObjectID":
                    {
                        Exception subMask;
                        var tryGet = UInt64XmlTranslation.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.NextObjectID = tryGet.Value.Value;
                        }
                        if (subMask != null)
                        {
                            errorMask().NextObjectID = subMask;
                        }
                    }
                    break;
                case "Header":
                    {
                        MaskItem<Exception, Header_ErrorMask> subMask;
                        var tmp = Header.Create_XML(
                            root: root,
                            doMasks: doMasks,
                            errorMask: out Header_ErrorMask createMask);
                        HeaderCommon.CopyFieldsFrom(
                            item: item._Header_Object,
                            rhs: tmp,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            doErrorMask: doMasks,
                            errorMask: out Header_ErrorMask copyMask);
                        var loquiMask = Header_ErrorMask.Combine(createMask, copyMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, Header_ErrorMask>(null, loquiMask);
                        if (subMask != null)
                        {
                            errorMask().Header = subMask;
                        }
                    }
                    break;
                case "TypeOffsets":
                    {
                        MaskItem<Exception, UnknownData_ErrorMask> subMask;
                        UnknownData_ErrorMask loquiMask;
                        TryGet<UnknownData> tryGet;
                        var typeStr = root.GetAttribute(XmlConstants.TYPE_ATTRIBUTE);
                        if (typeStr != null
                            && typeStr.Equals("Mutagen.UnknownData"))
                        {
                            tryGet = TryGet<UnknownData>.Succeed((UnknownData)UnknownData.Create_XML(
                                root: root,
                                doMasks: doMasks,
                                errorMask: out loquiMask));
                        }
                        else
                        {
                            var register = LoquiRegistration.GetRegisterByFullName(typeStr ?? root.Name.LocalName);
                            if (register == null)
                            {
                                var ex = new ArgumentException($"Unknown Loqui type: {root.Name.LocalName}");
                                if (!doMasks) throw ex;
                                subMask = new MaskItem<Exception, UnknownData_ErrorMask>(
                                    ex,
                                    null);
                                break;
                            }
                            tryGet = XmlTranslator.GetTranslator(register.ClassType).Item.Value.Parse(
                                root: root,
                                doMasks: doMasks,
                                maskObj: out var subErrorMaskObj).Bubble((o) => (UnknownData)o);
                            loquiMask = (UnknownData_ErrorMask)subErrorMaskObj;
                        }
                        subMask = loquiMask == null ? null : new MaskItem<Exception, UnknownData_ErrorMask>(null, loquiMask);
                        if (tryGet.Succeeded)
                        {
                            item.TypeOffsets = tryGet.Value;
                        }
                        if (subMask != null)
                        {
                            errorMask().TypeOffsets = subMask;
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        public void CopyIn_XML(XElement root, NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TES4, TES4_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out TES4_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(XElement root, out TES4_ErrorMask errorMask, NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TES4, TES4_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void Write_XML(Stream stream)
        {
            TES4Common.Write_XML(
                this,
                stream);
        }

        public void Write_XML(Stream stream, out TES4_ErrorMask errorMask)
        {
            TES4Common.Write_XML(
                this,
                stream,
                out errorMask);
        }

        public void Write_XML(XmlWriter writer, out TES4_ErrorMask errorMask, string name = null)
        {
            TES4Common.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public void Write_XML(XmlWriter writer, string name = null)
        {
            TES4Common.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                errorMask: out TES4_ErrorMask errorMask);
        }

        #endregion

        public TES4 Copy(
            TES4_CopyMask copyMask = null,
            ITES4Getter def = null)
        {
            return TES4.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TES4 Copy(
            ITES4 item,
            TES4_CopyMask copyMask = null,
            ITES4Getter def = null)
        {
            TES4 ret;
            if (item.GetType().Equals(typeof(TES4)))
            {
                ret = new TES4();
            }
            else
            {
                ret = (TES4)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            TES4_CopyMask copyMask = null,
            ITES4Getter def = null)
            where CopyType : class, ITES4
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(TES4)))
            {
                ret = new TES4() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static TES4 Copy_ToLoqui(
            ITES4Getter item,
            TES4_CopyMask copyMask = null,
            ITES4Getter def = null)
        {
            var ret = new TES4();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    this.Fluff = (Byte[])obj;
                    break;
                case TES4_FieldIndex.NumRecords:
                    this.NumRecords = (Int64)obj;
                    break;
                case TES4_FieldIndex.NextObjectID:
                    this.NextObjectID = (UInt64)obj;
                    break;
                case TES4_FieldIndex.Header:
                    this._Header_Object.CopyFieldsFrom(rhs: (Header)obj, cmds: cmds);
                    break;
                case TES4_FieldIndex.TypeOffsets:
                    this.TypeOffsets = (UnknownData)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TES4Common.Clear(this, cmds);
        }


        public static TES4 Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TES4();
            foreach (var pair in fields)
            {
                CopyInInternal_TES4(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_TES4(TES4 obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out TES4_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    obj.Fluff = (Byte[])pair.Value;
                    break;
                case TES4_FieldIndex.NumRecords:
                    obj.NumRecords = (Int64)pair.Value;
                    break;
                case TES4_FieldIndex.NextObjectID:
                    obj.NextObjectID = (UInt64)pair.Value;
                    break;
                case TES4_FieldIndex.Header:
                    obj._Header_Object.CopyFieldsFrom(rhs: (Header)pair.Value, cmds: null);
                    break;
                case TES4_FieldIndex.TypeOffsets:
                    obj.TypeOffsets = (UnknownData)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TES4 obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITES4 : ITES4Getter, ILoquiClass<ITES4, ITES4Getter>, ILoquiClass<TES4, ITES4Getter>
    {
        new Byte[] Fluff { get; set; }

        new Int64 NumRecords { get; set; }

        new UInt64 NextObjectID { get; set; }

        new UnknownData TypeOffsets { get; set; }

    }

    public interface ITES4Getter : ILoquiObject
    {
        #region Fluff
        Byte[] Fluff { get; }

        #endregion
        #region NumRecords
        Int64 NumRecords { get; }

        #endregion
        #region NextObjectID
        UInt64 NextObjectID { get; }

        #endregion
        #region Header
        Header Header { get; }

        #endregion
        #region TypeOffsets
        UnknownData TypeOffsets { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum TES4_FieldIndex
    {
        Fluff = 0,
        NumRecords = 1,
        NextObjectID = 2,
        Header = 3,
        TypeOffsets = 4,
    }
    #endregion

    #region Registration
    public class TES4_Registration : ILoquiRegistration
    {
        public static readonly TES4_Registration Instance = new TES4_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 2,
            version: 0);

        public const string GUID = "d26d9f2a-53af-4c45-9490-dfdb377b6655";

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(TES4_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TES4_ErrorMask);

        public static readonly Type ClassType = typeof(TES4);

        public static readonly Type GetterType = typeof(ITES4Getter);

        public static readonly Type SetterType = typeof(ITES4);

        public static readonly Type CommonType = typeof(TES4Common);

        public const string FullName = "Mutagen.TES4";

        public const string Name = "TES4";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLUFF":
                    return (ushort)TES4_FieldIndex.Fluff;
                case "NUMRECORDS":
                    return (ushort)TES4_FieldIndex.NumRecords;
                case "NEXTOBJECTID":
                    return (ushort)TES4_FieldIndex.NextObjectID;
                case "HEADER":
                    return (ushort)TES4_FieldIndex.Header;
                case "TYPEOFFSETS":
                    return (ushort)TES4_FieldIndex.TypeOffsets;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                case TES4_FieldIndex.NumRecords:
                case TES4_FieldIndex.NextObjectID:
                case TES4_FieldIndex.Header:
                case TES4_FieldIndex.TypeOffsets:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Header:
                case TES4_FieldIndex.TypeOffsets:
                    return true;
                case TES4_FieldIndex.Fluff:
                case TES4_FieldIndex.NumRecords:
                case TES4_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Header:
                    return true;
                case TES4_FieldIndex.Fluff:
                case TES4_FieldIndex.NumRecords:
                case TES4_FieldIndex.NextObjectID:
                case TES4_FieldIndex.TypeOffsets:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    return "Fluff";
                case TES4_FieldIndex.NumRecords:
                    return "NumRecords";
                case TES4_FieldIndex.NextObjectID:
                    return "NextObjectID";
                case TES4_FieldIndex.Header:
                    return "Header";
                case TES4_FieldIndex.TypeOffsets:
                    return "TypeOffsets";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                case TES4_FieldIndex.NumRecords:
                case TES4_FieldIndex.NextObjectID:
                case TES4_FieldIndex.Header:
                case TES4_FieldIndex.TypeOffsets:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Header:
                    return true;
                case TES4_FieldIndex.Fluff:
                case TES4_FieldIndex.NumRecords:
                case TES4_FieldIndex.NextObjectID:
                case TES4_FieldIndex.TypeOffsets:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case TES4_FieldIndex.NumRecords:
                    return typeof(Int64);
                case TES4_FieldIndex.NextObjectID:
                    return typeof(UInt64);
                case TES4_FieldIndex.Header:
                    return typeof(Header);
                case TES4_FieldIndex.TypeOffsets:
                    return typeof(UnknownData);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class TES4Common
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ITES4 item,
            ITES4Getter rhs,
            TES4_CopyMask copyMask = null,
            ITES4Getter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TES4Common.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ITES4 item,
            ITES4Getter rhs,
            out TES4_ErrorMask errorMask,
            TES4_CopyMask copyMask = null,
            ITES4Getter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TES4Common.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ITES4 item,
            ITES4Getter rhs,
            ITES4Getter def,
            bool doErrorMask,
            out TES4_ErrorMask errorMask,
            TES4_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            TES4_ErrorMask retErrorMask = null;
            Func<TES4_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new TES4_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ITES4 item,
            ITES4Getter rhs,
            ITES4Getter def,
            bool doErrorMask,
            Func<TES4_ErrorMask> errorMask,
            TES4_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.Fluff ?? true)
            {
                item.Fluff = rhs.Fluff;
            }
            if (copyMask?.NumRecords ?? true)
            {
                item.NumRecords = rhs.NumRecords;
            }
            if (copyMask?.NextObjectID ?? true)
            {
                item.NextObjectID = rhs.NextObjectID;
            }
            if (copyMask?.Header.Overall ?? true)
            {
                try
                {
                    HeaderCommon.CopyFieldsFrom(
                        item: item.Header,
                        rhs: rhs.Header,
                        def: def?.Header,
                        doErrorMask: doErrorMask,
                        errorMask: (doErrorMask ? new Func<Header_ErrorMask>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Header.Specific == null)
                            {
                                baseMask.Header = new MaskItem<Exception, Header_ErrorMask>(null, new Header_ErrorMask());
                            }
                            return baseMask.Header.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Header.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((ushort)TES4_FieldIndex.Header, ex);
                }
            }
            if (copyMask?.TypeOffsets.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.TypeOffsets.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.TypeOffsets = rhs.TypeOffsets;
                            break;
                        case CopyOption.CopyIn:
                            UnknownDataCommon.CopyFieldsFrom(
                                item: item.TypeOffsets,
                                rhs: rhs.TypeOffsets,
                                def: def?.TypeOffsets,
                                doErrorMask: doErrorMask,
                                errorMask: (doErrorMask ? new Func<UnknownData_ErrorMask>(() =>
                                {
                                    var baseMask = errorMask();
                                    if (baseMask.TypeOffsets.Specific == null)
                                    {
                                        baseMask.TypeOffsets = new MaskItem<Exception, UnknownData_ErrorMask>(null, new UnknownData_ErrorMask());
                                    }
                                    return baseMask.TypeOffsets.Specific;
                                }
                                ) : null),
                                copyMask: copyMask?.TypeOffsets.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.TypeOffsets == null)
                            {
                                item.TypeOffsets = null;
                            }
                            else
                            {
                                item.TypeOffsets = UnknownData.Copy(
                                    rhs.TypeOffsets,
                                    copyMask?.TypeOffsets.Specific,
                                    def?.TypeOffsets);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.TypeOffsets.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((ushort)TES4_FieldIndex.TypeOffsets, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITES4 obj,
            NotifyingFireParameters? cmds = null)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    break;
                case TES4_FieldIndex.NumRecords:
                    break;
                case TES4_FieldIndex.NextObjectID:
                    break;
                case TES4_FieldIndex.Header:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TES4_FieldIndex.TypeOffsets:
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITES4 obj,
            NotifyingUnsetParameters? cmds = null)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    obj.Fluff = default(Byte[]);
                    break;
                case TES4_FieldIndex.NumRecords:
                    obj.NumRecords = default(Int64);
                    break;
                case TES4_FieldIndex.NextObjectID:
                    obj.NextObjectID = default(UInt64);
                    break;
                case TES4_FieldIndex.Header:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TES4_FieldIndex.TypeOffsets:
                    obj.TypeOffsets = default(UnknownData);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITES4 obj)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                case TES4_FieldIndex.NumRecords:
                case TES4_FieldIndex.NextObjectID:
                case TES4_FieldIndex.Header:
                case TES4_FieldIndex.TypeOffsets:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ITES4Getter obj)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    return obj.Fluff;
                case TES4_FieldIndex.NumRecords:
                    return obj.NumRecords;
                case TES4_FieldIndex.NextObjectID:
                    return obj.NextObjectID;
                case TES4_FieldIndex.Header:
                    return obj.Header;
                case TES4_FieldIndex.TypeOffsets:
                    return obj.TypeOffsets;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ITES4 item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Fluff = default(Byte[]);
            item.NumRecords = default(Int64);
            item.NextObjectID = default(UInt64);
            item.TypeOffsets = default(UnknownData);
        }

        public static TES4_Mask<bool> GetEqualsMask(
            this ITES4Getter item,
            ITES4Getter rhs)
        {
            var ret = new TES4_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ITES4Getter item,
            ITES4Getter rhs,
            TES4_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Fluff = item.Fluff.EqualsFast(rhs.Fluff);
            ret.NumRecords = item.NumRecords == rhs.NumRecords;
            ret.NextObjectID = item.NextObjectID == rhs.NextObjectID;
            ret.Header = new MaskItem<bool, Header_Mask<bool>>();
            ret.Header.Specific = HeaderCommon.GetEqualsMask(item.Header, rhs.Header);
            ret.Header.Overall = ret.Header.Specific.AllEqual((b) => b);
            ret.TypeOffsets = new MaskItem<bool, UnknownData_Mask<bool>>();
            ret.TypeOffsets.Specific = UnknownDataCommon.GetEqualsMask(item.TypeOffsets, rhs.TypeOffsets);
            ret.TypeOffsets.Overall = ret.TypeOffsets.Specific.AllEqual((b) => b);
        }

        public static string ToString(
            this ITES4Getter item,
            string name = null,
            TES4_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ITES4Getter item,
            FileGeneration fg,
            string name = null,
            TES4_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(TES4)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(TES4)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {item.Fluff}");
                }
                if (printMask?.NumRecords ?? true)
                {
                    fg.AppendLine($"NumRecords => {item.NumRecords}");
                }
                if (printMask?.NextObjectID ?? true)
                {
                    fg.AppendLine($"NextObjectID => {item.NextObjectID}");
                }
                if (printMask?.Header?.Overall ?? true)
                {
                    item.Header.ToString(fg, "Header");
                }
                if (printMask?.TypeOffsets?.Overall ?? true)
                {
                    item.TypeOffsets.ToString(fg, "TypeOffsets");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ITES4Getter item,
            TES4_Mask<bool?> checkMask)
        {
            return true;
        }

        public static TES4_Mask<bool> GetHasBeenSetMask(ITES4Getter item)
        {
            var ret = new TES4_Mask<bool>();
            ret.Fluff = true;
            ret.NumRecords = true;
            ret.NextObjectID = true;
            ret.Header = new MaskItem<bool, Header_Mask<bool>>(true, HeaderCommon.GetHasBeenSetMask(item.Header));
            ret.TypeOffsets = new MaskItem<bool, UnknownData_Mask<bool>>(true, UnknownDataCommon.GetHasBeenSetMask(item.TypeOffsets));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            ITES4Getter item,
            Stream stream)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: null,
                    item: item,
                    doMasks: false,
                    errorMask: out TES4_ErrorMask errorMask);
            }
        }

        public static void Write_XML(
            ITES4Getter item,
            Stream stream,
            out TES4_ErrorMask errorMask)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: null,
                    item: item,
                    doMasks: true,
                    errorMask: out errorMask);
            }
        }

        public static void Write_XML(
            XmlWriter writer,
            string name,
            ITES4Getter item,
            bool doMasks,
            out TES4_ErrorMask errorMask)
        {
            TES4_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TES4_ErrorMask()) : default(Func<TES4_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            string name,
            ITES4Getter item,
            bool doMasks,
            Func<TES4_ErrorMask> errorMask)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.TES4"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.TES4");
                    }
                    {
                        Exception subMask;
                        ByteArrayXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Fluff),
                            item.Fluff,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (subMask != null)
                        {
                            errorMask().Fluff = subMask;
                        }
                    }
                    {
                        Exception subMask;
                        Int64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.NumRecords),
                            item.NumRecords,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (subMask != null)
                        {
                            errorMask().NumRecords = subMask;
                        }
                    }
                    {
                        Exception subMask;
                        UInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.NextObjectID),
                            item.NextObjectID,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (subMask != null)
                        {
                            errorMask().NextObjectID = subMask;
                        }
                    }
                    {
                        MaskItem<Exception, Header_ErrorMask> subMask;
                        HeaderCommon.Write_XML(
                            writer: writer,
                            item: item.Header,
                            name: nameof(item.Header),
                            doMasks: doMasks,
                            errorMask: out Header_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, Header_ErrorMask>(null, loquiMask);
                        if (subMask != null)
                        {
                            errorMask().Header = subMask;
                        }
                    }
                    {
                        MaskItem<Exception, UnknownData_ErrorMask> subMask;
                        UnknownDataCommon.Write_XML(
                            writer: writer,
                            item: item.TypeOffsets,
                            name: nameof(item.TypeOffsets),
                            doMasks: doMasks,
                            errorMask: out UnknownData_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, UnknownData_ErrorMask>(null, loquiMask);
                        if (subMask != null)
                        {
                            errorMask().TypeOffsets = subMask;
                        }
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class TES4_Mask<T> : IMask<T>, IEquatable<TES4_Mask<T>>
    {
        #region Ctors
        public TES4_Mask()
        {
        }

        public TES4_Mask(T initialValue)
        {
            this.Fluff = initialValue;
            this.NumRecords = initialValue;
            this.NextObjectID = initialValue;
            this.Header = new MaskItem<T, Header_Mask<T>>(initialValue, new Header_Mask<T>(initialValue));
            this.TypeOffsets = new MaskItem<T, UnknownData_Mask<T>>(initialValue, new UnknownData_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T Fluff;
        public T NumRecords;
        public T NextObjectID;
        public MaskItem<T, Header_Mask<T>> Header { get; set; }
        public MaskItem<T, UnknownData_Mask<T>> TypeOffsets { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object rhs)
        {
            if (rhs == null) return false;
            return Equals((TES4_Mask<T>)rhs);
        }

        public bool Equals(TES4_Mask<T> rhs)
        {
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.NumRecords, rhs.NumRecords)) return false;
            if (!object.Equals(this.NextObjectID, rhs.NextObjectID)) return false;
            if (!object.Equals(this.Header, rhs.Header)) return false;
            if (!object.Equals(this.TypeOffsets, rhs.TypeOffsets)) return false;
            return true;
        }
        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Fluff)) return false;
            if (!eval(this.NumRecords)) return false;
            if (!eval(this.NextObjectID)) return false;
            if (Header != null)
            {
                if (!eval(this.Header.Overall)) return false;
                if (Header.Specific != null && !Header.Specific.AllEqual(eval)) return false;
            }
            if (TypeOffsets != null)
            {
                if (!eval(this.TypeOffsets.Overall)) return false;
                if (TypeOffsets.Specific != null && !TypeOffsets.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public TES4_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TES4_Mask<R>();
            ret.Fluff = eval(this.Fluff);
            ret.NumRecords = eval(this.NumRecords);
            ret.NextObjectID = eval(this.NextObjectID);
            if (this.Header != null)
            {
                ret.Header = new MaskItem<R, Header_Mask<R>>();
                ret.Header.Overall = eval(this.Header.Overall);
                if (this.Header.Specific != null)
                {
                    ret.Header.Specific = this.Header.Specific.Translate(eval);
                }
            }
            if (this.TypeOffsets != null)
            {
                ret.TypeOffsets = new MaskItem<R, UnknownData_Mask<R>>();
                ret.TypeOffsets.Overall = eval(this.TypeOffsets.Overall);
                if (this.TypeOffsets.Specific != null)
                {
                    ret.TypeOffsets.Specific = this.TypeOffsets.Specific.Translate(eval);
                }
            }
            return ret;
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TES4_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TES4_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TES4_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff.ToStringSafe()}");
                }
                if (printMask?.NumRecords ?? true)
                {
                    fg.AppendLine($"NumRecords => {NumRecords.ToStringSafe()}");
                }
                if (printMask?.NextObjectID ?? true)
                {
                    fg.AppendLine($"NextObjectID => {NextObjectID.ToStringSafe()}");
                }
                if (printMask?.Header?.Overall ?? true)
                {
                    Header.ToString(fg);
                }
                if (printMask?.TypeOffsets?.Overall ?? true)
                {
                    TypeOffsets.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TES4_ErrorMask : IErrorMask
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Fluff;
        public Exception NumRecords;
        public Exception NextObjectID;
        public MaskItem<Exception, Header_ErrorMask> Header;
        public MaskItem<Exception, UnknownData_ErrorMask> TypeOffsets;
        #endregion

        #region IErrorMask
        public void SetNthException(ushort index, Exception ex)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case TES4_FieldIndex.NumRecords:
                    this.NumRecords = ex;
                    break;
                case TES4_FieldIndex.NextObjectID:
                    this.NextObjectID = ex;
                    break;
                case TES4_FieldIndex.Header:
                    this.Header = new MaskItem<Exception, Header_ErrorMask>(ex, null);
                    break;
                case TES4_FieldIndex.TypeOffsets:
                    this.TypeOffsets = new MaskItem<Exception, UnknownData_ErrorMask>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(ushort index, object obj)
        {
            TES4_FieldIndex enu = (TES4_FieldIndex)index;
            switch (enu)
            {
                case TES4_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case TES4_FieldIndex.NumRecords:
                    this.NumRecords = (Exception)obj;
                    break;
                case TES4_FieldIndex.NextObjectID:
                    this.NextObjectID = (Exception)obj;
                    break;
                case TES4_FieldIndex.Header:
                    this.Header = (MaskItem<Exception, Header_ErrorMask>)obj;
                    break;
                case TES4_FieldIndex.TypeOffsets:
                    this.TypeOffsets = (MaskItem<Exception, UnknownData_ErrorMask>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TES4_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Fluff != null)
                {
                    fg.AppendLine($"Fluff => {Fluff.ToStringSafe()}");
                }
                if (NumRecords != null)
                {
                    fg.AppendLine($"NumRecords => {NumRecords.ToStringSafe()}");
                }
                if (NextObjectID != null)
                {
                    fg.AppendLine($"NextObjectID => {NextObjectID.ToStringSafe()}");
                }
                if (Header != null)
                {
                    Header.ToString(fg);
                }
                if (TypeOffsets != null)
                {
                    TypeOffsets.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public TES4_ErrorMask Combine(TES4_ErrorMask rhs)
        {
            var ret = new TES4_ErrorMask();
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.NumRecords = this.NumRecords.Combine(rhs.NumRecords);
            ret.NextObjectID = this.NextObjectID.Combine(rhs.NextObjectID);
            ret.Header = new MaskItem<Exception, Header_ErrorMask>(this.Header.Overall.Combine(rhs.Header.Overall), this.Header.Specific.Combine(rhs.Header.Specific));
            ret.TypeOffsets = new MaskItem<Exception, UnknownData_ErrorMask>(this.TypeOffsets.Overall.Combine(rhs.TypeOffsets.Overall), this.TypeOffsets.Specific.Combine(rhs.TypeOffsets.Specific));
            return ret;
        }
        public static TES4_ErrorMask Combine(TES4_ErrorMask lhs, TES4_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class TES4_CopyMask
    {
        #region Members
        public bool Fluff;
        public bool NumRecords;
        public bool NextObjectID;
        public MaskItem<bool, Header_CopyMask> Header;
        public MaskItem<CopyOption, UnknownData_CopyMask> TypeOffsets;
        #endregion

    }
    #endregion


    #endregion

}
