/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using Mutagen;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class Class : NamedMajorRecord, IClass, ILoquiObjectSetter, IEquatable<Class>
    {
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static Class_Registration Registration => Class_Registration.Instance;

        #region Ctor
        public Class()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Description
        protected readonly INotifyingItem<String> _Description = NotifyingItem.Factory<String>(markAsSet: false);
        public INotifyingItem<String> Description_Property => _Description;
        public String Description
        {
            get => this._Description.Item;
            set => this._Description.Set(value);
        }
        INotifyingItem<String> IClass.Description_Property => this.Description_Property;
        INotifyingItemGetter<String> IClassGetter.Description_Property => this.Description_Property;
        #endregion
        #region Icon
        protected readonly INotifyingItem<FilePath> _Icon = NotifyingItem.Factory<FilePath>(markAsSet: false);
        public INotifyingItem<FilePath> Icon_Property => _Icon;
        public FilePath Icon
        {
            get => this._Icon.Item;
            set => this._Icon.Set(value);
        }
        INotifyingItem<FilePath> IClass.Icon_Property => this.Icon_Property;
        INotifyingItemGetter<FilePath> IClassGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region ClassData
        private readonly INotifyingItem<ClassData> _ClassData = new NotifyingItemConvertWrapper<ClassData>(
            defaultVal: new ClassData(),
            incomingConverter: (change) =>
            {
                if (change.New == null)
                {
                    return TryGet<ClassData>.Succeed(new ClassData());
                }
                return TryGet<ClassData>.Succeed(change.New);
            }
        );
        public INotifyingItem<ClassData> ClassData_Property => this._ClassData;
        ClassData IClassGetter.ClassData => this.ClassData;
        public ClassData ClassData { get => _ClassData.Item; set => _ClassData.Item = value; }
        INotifyingItem<ClassData> IClass.ClassData_Property => this.ClassData_Property;
        INotifyingItemGetter<ClassData> IClassGetter.ClassData_Property => this.ClassData_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => ClassCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => ClassCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => ClassCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ClassCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return ClassCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Class_Mask<bool> printMask = null)
        {
            return ClassCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            ClassCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new Class_Mask<bool> GetHasBeenSetMask()
        {
            return ClassCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Class rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Class rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Description_Property.HasBeenSet != rhs.Description_Property.HasBeenSet) return false;
            if (Description_Property.HasBeenSet)
            {
                if (!object.Equals(Description, rhs.Description)) return false;
            }
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(Icon, rhs.Icon)) return false;
            }
            if (ClassData_Property.HasBeenSet != rhs.ClassData_Property.HasBeenSet) return false;
            if (ClassData_Property.HasBeenSet)
            {
                if (!object.Equals(ClassData, rhs.ClassData)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Description_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Description).CombineHashCode(ret);
            }
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (ClassData_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ClassData).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        public new static Class Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static Class Create_XML(
            XElement root,
            out Class_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static Class Create_XML(
            XElement root,
            bool doMasks,
            out Class_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        public static (Class Object, Class_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Class_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Class_ErrorMask()) : default(Func<Class_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Class Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Class Create_XML(
            string path,
            out Class_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Class Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Class Create_XML(
            Stream stream,
            out Class_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Class, Class_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Class_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Class, Class_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Class_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Class_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Class_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Class_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Class_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Class_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Class_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Class_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            ClassCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Class Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<Class_ErrorMask> errorMask)
        {
            var ret = new Class();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Class item,
            XElement root,
            string name,
            bool doMasks,
            Func<Class_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Description":
                    {
                        Exception subMask;
                        var tryGet = StringXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Description.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Class_FieldIndex.Description,
                            subMask);
                    }
                    break;
                case "Icon":
                    {
                        Exception subMask;
                        var tryGet = FilePathXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Icon.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Class_FieldIndex.Icon,
                            subMask);
                    }
                    break;
                case "ClassData":
                    {
                        MaskItem<Exception, ClassData_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<ClassData, ClassData_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._ClassData.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Class_FieldIndex.ClassData,
                            subMask);
                    }
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        public new static Class Create_Binary(BinaryReader reader)
        {
            return Create_Binary(
                reader: reader,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static Class Create_Binary(
            BinaryReader reader,
            out Class_ErrorMask errorMask)
        {
            return Create_Binary(
                reader: reader,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static Class Create_Binary(
            BinaryReader reader,
            bool doMasks,
            out Class_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                reader: reader,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        public static (Class Object, Class_ErrorMask ErrorMask) Create_Binary(
            BinaryReader reader,
            bool doMasks)
        {
            Class_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                reader: reader,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Class_ErrorMask()) : default(Func<Class_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Class Create_Binary(string path)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    return Create_Binary(reader: reader);
                }
            }
        }

        public static Class Create_Binary(
            string path,
            out Class_ErrorMask errorMask)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    return Create_Binary(
                        reader: reader,
                        errorMask: out errorMask);
                }
            }
        }

        public static Class Create_Binary(Stream stream)
        {
            using (var reader = new BinaryReader(stream))
            {
                return Create_Binary(reader: reader);
            }
        }

        public static Class Create_Binary(
            Stream stream,
            out Class_ErrorMask errorMask)
        {
            using (var reader = new BinaryReader(stream))
            {
                return Create_Binary(
                    reader: reader,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            BinaryReader reader,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Class, Class_ErrorMask>.Instance.CopyIn(
                reader: reader,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            BinaryReader reader,
            out Class_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Class, Class_ErrorMask>.Instance.CopyIn(
                reader: reader,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    this.CopyIn_Binary(
                        reader: reader,
                        cmds: cmds);
                }
            }
        }

        public void CopyIn_Binary(
            string path,
            out Class_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    this.CopyIn_Binary(
                        reader: reader,
                        errorMask: out errorMask,
                        cmds: cmds);
                }
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new BinaryReader(stream))
            {
                this.CopyIn_Binary(
                    reader: reader,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Class_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new BinaryReader(stream))
            {
                this.CopyIn_Binary(
                    reader: reader,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            BinaryReader reader,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                reader: reader,
                errorMask: out Class_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            BinaryReader reader,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                reader: reader,
                errorMask: out Class_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            BinaryWriter writer,
            out Class_ErrorMask errorMask)
        {
            errorMask = (Class_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Class_ErrorMask errorMask)
        {
            using (var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                using (var writer = new BinaryWriter(fileStream))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Class_ErrorMask errorMask)
        {
            using (var writer = new BinaryWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(BinaryWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                using (var writer = new BinaryWriter(fileStream))
                {
                    Write_Binary(writer: writer);
                }
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new BinaryWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            BinaryWriter writer,
            bool doMasks)
        {
            ClassCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Class Create_Binary_Internal(
            BinaryReader reader,
            bool doMasks,
            Func<Class_ErrorMask> errorMask)
        {
            var finalPosition = HeaderTranslation.ParseRecord(
                reader,
                Class_Registration.CLAS_HEADER);
            return Create_Binary_Internal(
                reader: reader,
                doMasks: doMasks,
                finalPosition: finalPosition,
                errorMask: errorMask);
        }

        private static Class Create_Binary_Internal(
            BinaryReader reader,
            bool doMasks,
            long finalPosition,
            Func<Class_ErrorMask> errorMask)
        {
            var ret = new Class();
            try
            {
                Fill_Binary_Structs(
                    item: ret,
                    reader: reader,
                    doMasks: doMasks,
                    errorMask: errorMask);
                while (reader.BaseStream.Position < finalPosition)
                {
                    Fill_Binary_RecordTypes(
                        item: ret,
                        reader: reader,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
                if (reader.BaseStream.Position != finalPosition)
                {
                    throw new ArgumentException("Read more bytes than allocated");
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            reader.BaseStream.Position = finalPosition;
            return ret;
        }

        protected static void Fill_Binary_Structs(
            Class item,
            BinaryReader reader,
            bool doMasks,
            Func<Class_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                reader: reader,
                doMasks: doMasks,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_RecordTypes(
            Class item,
            BinaryReader reader,
            bool doMasks,
            Func<Class_ErrorMask> errorMask)
        {
            var nextRecordType = HeaderTranslation.ReadNextSubRecordType(
                reader: reader,
                contentLength: out var subLength);
            switch (nextRecordType.Type)
            {
                case "DESC":
                {
                    Exception subMask;
                    var tryGet = Mutagen.Binary.StringBinaryTranslation.Instance.Parse(
                        reader,
                        doMasks: doMasks,
                        errorMask: out subMask,
                        length: subLength);
                    item._Description.SetIfSucceeded(tryGet);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        doMasks,
                        (int)Class_FieldIndex.Description,
                        subMask);
                }
                break;
                case "ICON":
                {
                    Exception subMask;
                    var tryGet = Mutagen.Binary.StringBinaryTranslation.Instance.Parse(
                        reader,
                        doMasks: doMasks,
                        errorMask: out subMask,
                        length: subLength);
                    item._Icon.SetIfSucceeded(tryGet.Bubble<FilePath>((s) => new FilePath(s)));
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        doMasks,
                        (int)Class_FieldIndex.Icon,
                        subMask);
                }
                break;
                case "DATA":
                {
                    MaskItem<Exception, ClassData_ErrorMask> subMask;
                    reader.BaseStream.Position -= Constants.SUBRECORD_LENGTH;
                    var tryGet = LoquiBinaryTranslation<ClassData, ClassData_ErrorMask>.Instance.Parse(
                        reader: reader,
                        doMasks: doMasks,
                        mask: out subMask);
                    item._ClassData.SetIfSucceeded(tryGet);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        doMasks,
                        (int)Class_FieldIndex.ClassData,
                        subMask);
                }
                break;
                default:
                    reader.BaseStream.Position -= Constants.SUBRECORD_LENGTH;
                    NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        reader: reader,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        public Class Copy(
            Class_CopyMask copyMask = null,
            IClassGetter def = null)
        {
            return Class.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Class Copy(
            IClass item,
            Class_CopyMask copyMask = null,
            IClassGetter def = null)
        {
            Class ret;
            if (item.GetType().Equals(typeof(Class)))
            {
                ret = new Class();
            }
            else
            {
                ret = (Class)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Class_CopyMask copyMask = null,
            IClassGetter def = null)
            where CopyType : class, IClass
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Class)))
            {
                ret = new Class() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Class Copy_ToLoqui(
            IClassGetter item,
            Class_CopyMask copyMask = null,
            IClassGetter def = null)
        {
            var ret = new Class();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Description:
                    this._Description.Set(
                        (String)obj,
                        cmds);
                    break;
                case Class_FieldIndex.Icon:
                    this._Icon.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                case Class_FieldIndex.ClassData:
                    this._ClassData.Set(
                        (ClassData)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ClassCommon.Clear(this, cmds);
        }


        public new static Class Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Class();
            foreach (var pair in fields)
            {
                CopyInInternal_Class(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Class(Class obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Class_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Class_FieldIndex.Description:
                    obj._Description.Set(
                        (String)pair.Value,
                        null);
                    break;
                case Class_FieldIndex.Icon:
                    obj._Icon.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                case Class_FieldIndex.ClassData:
                    obj._ClassData.Set(
                        (ClassData)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Class obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IClass : IClassGetter, INamedMajorRecord, ILoquiClass<IClass, IClassGetter>, ILoquiClass<Class, IClassGetter>
    {
        new String Description { get; set; }
        new INotifyingItem<String> Description_Property { get; }

        new FilePath Icon { get; set; }
        new INotifyingItem<FilePath> Icon_Property { get; }

        new ClassData ClassData { get; set; }
        new INotifyingItem<ClassData> ClassData_Property { get; }

    }

    public interface IClassGetter : INamedMajorRecordGetter
    {
        #region Description
        String Description { get; }
        INotifyingItemGetter<String> Description_Property { get; }

        #endregion
        #region Icon
        FilePath Icon { get; }
        INotifyingItemGetter<FilePath> Icon_Property { get; }

        #endregion
        #region ClassData
        ClassData ClassData { get; }
        INotifyingItemGetter<ClassData> ClassData_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum Class_FieldIndex
    {
        Description = 6,
        Icon = 7,
        ClassData = 8,
    }
    #endregion

    #region Registration
    public class Class_Registration : ILoquiRegistration
    {
        public static readonly Class_Registration Instance = new Class_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 16,
            version: 0);

        public const string GUID = "3f2e301a-e8f4-42db-875c-3e760e4eff31";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Class_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Class_ErrorMask);

        public static readonly Type ClassType = typeof(Class);

        public static readonly Type GetterType = typeof(IClassGetter);

        public static readonly Type SetterType = typeof(IClass);

        public static readonly Type CommonType = typeof(ClassCommon);

        public const string FullName = "Mutagen.Class";

        public const string Name = "Class";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DESCRIPTION":
                    return (ushort)Class_FieldIndex.Description;
                case "ICON":
                    return (ushort)Class_FieldIndex.Icon;
                case "CLASSDATA":
                    return (ushort)Class_FieldIndex.ClassData;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.ClassData:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.ClassData:
                    return true;
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.ClassData:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Description:
                    return "Description";
                case Class_FieldIndex.Icon:
                    return "Icon";
                case Class_FieldIndex.ClassData:
                    return "ClassData";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.ClassData:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.ClassData:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Description:
                    return typeof(String);
                case Class_FieldIndex.Icon:
                    return typeof(FilePath);
                case Class_FieldIndex.ClassData:
                    return typeof(ClassData);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CLAS_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class ClassCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IClass item,
            IClassGetter rhs,
            Class_CopyMask copyMask = null,
            IClassGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            ClassCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IClass item,
            IClassGetter rhs,
            out Class_ErrorMask errorMask,
            Class_CopyMask copyMask = null,
            IClassGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            ClassCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IClass item,
            IClassGetter rhs,
            IClassGetter def,
            bool doErrorMask,
            out Class_ErrorMask errorMask,
            Class_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            Class_ErrorMask retErrorMask = null;
            Func<Class_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Class_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IClass item,
            IClassGetter rhs,
            IClassGetter def,
            bool doErrorMask,
            Func<Class_ErrorMask> errorMask,
            Class_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doErrorMask,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Description ?? true)
            {
                try
                {
                    item.Description_Property.SetToWithDefault(
                        rhs.Description_Property,
                        def?.Description_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Class_FieldIndex.Description, ex);
                }
            }
            if (copyMask?.Icon ?? true)
            {
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs.Icon_Property,
                        def?.Icon_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Class_FieldIndex.Icon, ex);
                }
            }
            if (copyMask?.ClassData.Overall != CopyOption.Skip)
            {
                try
                {
                    item.ClassData_Property.SetToWithDefault(
                        rhs.ClassData_Property,
                        def?.ClassData_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.ClassData.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ClassDataCommon.CopyFieldsFrom(
                                        item: item.ClassData,
                                        rhs: rhs.ClassData,
                                        def: def?.ClassData,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<ClassData_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.ClassData.Specific == null)
                                            {
                                                baseMask.ClassData = new MaskItem<Exception, ClassData_ErrorMask>(null, new ClassData_ErrorMask());
                                            }
                                            return baseMask.ClassData.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.ClassData.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(ClassData);
                                    return ClassData.Copy(
                                        r,
                                        copyMask?.ClassData.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.ClassData.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Class_FieldIndex.ClassData, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IClass obj,
            NotifyingFireParameters? cmds = null)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Description:
                    obj.Description_Property.HasBeenSet = on;
                    break;
                case Class_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                case Class_FieldIndex.ClassData:
                    obj.ClassData_Property.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IClass obj,
            NotifyingUnsetParameters? cmds = null)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Description:
                    obj.Description_Property.Unset(cmds);
                    break;
                case Class_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case Class_FieldIndex.ClassData:
                    obj.ClassData_Property.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IClass obj)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Description:
                    return obj.Description_Property.HasBeenSet;
                case Class_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                case Class_FieldIndex.ClassData:
                    return obj.ClassData_Property.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IClassGetter obj)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Description:
                    return obj.Description;
                case Class_FieldIndex.Icon:
                    return obj.Icon;
                case Class_FieldIndex.ClassData:
                    return obj.ClassData;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IClass item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Description_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.ClassData_Property.Unset(cmds.ToUnsetParams());
        }

        public static Class_Mask<bool> GetEqualsMask(
            this IClassGetter item,
            IClassGetter rhs)
        {
            var ret = new Class_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IClassGetter item,
            IClassGetter rhs,
            Class_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Description = item.Description_Property.Equals(rhs.Description_Property, (l, r) => object.Equals(l, r));
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            ret.ClassData = item.ClassData_Property.LoquiEqualsHelper(rhs.ClassData_Property, (loqLhs, loqRhs) => ClassDataCommon.GetEqualsMask(loqLhs, loqRhs));
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IClassGetter item,
            string name = null,
            Class_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IClassGetter item,
            FileGeneration fg,
            string name = null,
            Class_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Class)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Class)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {item.Description}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.ClassData?.Overall ?? true)
                {
                    item.ClassData?.ToString(fg, "ClassData");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IClassGetter item,
            Class_Mask<bool?> checkMask)
        {
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_Property.HasBeenSet) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.ClassData.Overall.HasValue && checkMask.ClassData.Overall.Value != item.ClassData_Property.HasBeenSet) return false;
            if (checkMask.ClassData.Specific != null && (item.ClassData_Property.Item == null || !item.ClassData_Property.Item.HasBeenSet(checkMask.ClassData.Specific))) return false;
            return true;
        }

        public static Class_Mask<bool> GetHasBeenSetMask(IClassGetter item)
        {
            var ret = new Class_Mask<bool>();
            ret.Description = item.Description_Property.HasBeenSet;
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.ClassData = new MaskItem<bool, ClassData_Mask<bool>>(item.ClassData_Property.HasBeenSet, ClassDataCommon.GetHasBeenSetMask(item.ClassData_Property.Item));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IClassGetter item,
            bool doMasks,
            out Class_ErrorMask errorMask,
            string name = null)
        {
            Class_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Class_ErrorMask()) : default(Func<Class_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IClassGetter item,
            bool doMasks,
            Func<Class_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Class"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Class");
                    }
                    if (item.Description_Property.HasBeenSet)
                    {
                        Exception subMask;
                        StringXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Description),
                            item.Description,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Class_FieldIndex.Description,
                            subMask);
                    }
                    if (item.Icon_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FilePathXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Icon),
                            item.Icon,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Class_FieldIndex.Icon,
                            subMask);
                    }
                    if (item.ClassData_Property.HasBeenSet)
                    {
                        MaskItem<Exception, ClassData_ErrorMask> subMask;
                        LoquiXmlTranslation<ClassData, ClassData_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.ClassData,
                            name: nameof(item.ClassData),
                            doMasks: doMasks,
                            mask: out ClassData_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ClassData_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Class_FieldIndex.ClassData,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            BinaryWriter writer,
            IClassGetter item,
            bool doMasks,
            out Class_ErrorMask errorMask)
        {
            Class_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Class_ErrorMask()) : default(Func<Class_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            BinaryWriter writer,
            IClassGetter item,
            bool doMasks,
            Func<Class_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Class_Registration.CLAS_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            IClassGetter item,
            BinaryWriter writer,
            bool doMasks,
            Func<Class_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                doMasks: doMasks,
                errorMask: errorMask);
            {
                Exception subMask;
                Mutagen.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Description,
                    doMasks: doMasks,
                    errorMask: out subMask,
                    header: Class_Registration.DESC_HEADER,
                    nullable: false);
                ErrorMask.HandleErrorMask(
                    errorMask,
                    doMasks,
                    (int)Class_FieldIndex.Description,
                    subMask);
            }
            {
                Exception subMask;
                Mutagen.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Icon.RelativePath,
                    doMasks: doMasks,
                    errorMask: out subMask,
                    header: Class_Registration.ICON_HEADER,
                    nullable: false);
                ErrorMask.HandleErrorMask(
                    errorMask,
                    doMasks,
                    (int)Class_FieldIndex.Icon,
                    subMask);
            }
            {
                MaskItem<Exception, ClassData_ErrorMask> subMask;
                LoquiBinaryTranslation<ClassData, ClassData_ErrorMask>.Instance.Write(
                    writer: writer,
                    item: item.ClassData,
                    doMasks: doMasks,
                    mask: out subMask);
                ErrorMask.HandleErrorMask(
                    errorMask,
                    doMasks,
                    (int)Class_FieldIndex.ClassData,
                    subMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Class_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Class_Mask<T>>
    {
        #region Ctors
        public Class_Mask()
        {
        }

        public Class_Mask(T initialValue)
        {
            this.Description = initialValue;
            this.Icon = initialValue;
            this.ClassData = new MaskItem<T, ClassData_Mask<T>>(initialValue, new ClassData_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T Description;
        public T Icon;
        public MaskItem<T, ClassData_Mask<T>> ClassData { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Class_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Class_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.ClassData, rhs.ClassData)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.ClassData?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Description)) return false;
            if (!eval(this.Icon)) return false;
            if (ClassData != null)
            {
                if (!eval(this.ClassData.Overall)) return false;
                if (ClassData.Specific != null && !ClassData.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public new Class_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Class_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Class_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Description = eval(this.Description);
            obj.Icon = eval(this.Icon);
            if (this.ClassData != null)
            {
                obj.ClassData = new MaskItem<R, ClassData_Mask<R>>();
                obj.ClassData.Overall = eval(this.ClassData.Overall);
                if (this.ClassData.Specific != null)
                {
                    obj.ClassData.Specific = this.ClassData.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Class_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Class_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Class_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description.ToStringSafe()}");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon.ToStringSafe()}");
                }
                if (printMask?.ClassData?.Overall ?? true)
                {
                    ClassData.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Class_ErrorMask : NamedMajorRecord_ErrorMask
    {
        #region Members
        public Exception Description;
        public Exception Icon;
        public MaskItem<Exception, ClassData_ErrorMask> ClassData;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case Class_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Class_FieldIndex.ClassData:
                    this.ClassData = new MaskItem<Exception, ClassData_ErrorMask>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case Class_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Class_FieldIndex.ClassData:
                    this.ClassData = (MaskItem<Exception, ClassData_ErrorMask>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Class_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            if (Description != null)
            {
                fg.AppendLine($"Description => {Description.ToStringSafe()}");
            }
            if (Icon != null)
            {
                fg.AppendLine($"Icon => {Icon.ToStringSafe()}");
            }
            if (ClassData != null)
            {
                ClassData.ToString(fg);
            }
        }
        #endregion

        #region Combine
        public Class_ErrorMask Combine(Class_ErrorMask rhs)
        {
            var ret = new Class_ErrorMask();
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.ClassData = new MaskItem<Exception, ClassData_ErrorMask>(this.ClassData.Overall.Combine(rhs.ClassData.Overall), this.ClassData.Specific.Combine(rhs.ClassData.Specific));
            return ret;
        }
        public static Class_ErrorMask Combine(Class_ErrorMask lhs, Class_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Class_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public bool Description;
        public bool Icon;
        public MaskItem<CopyOption, ClassData_CopyMask> ClassData;
        #endregion

    }
    #endregion




    #endregion

}
