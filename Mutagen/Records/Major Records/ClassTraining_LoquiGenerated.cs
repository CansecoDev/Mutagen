/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class ClassTraining : IClassTraining, ILoquiObjectSetter, IEquatable<ClassTraining>
    {
        ILoquiRegistration ILoquiObject.Registration => ClassTraining_Registration.Instance;
        public static ClassTraining_Registration Registration => ClassTraining_Registration.Instance;

        #region Ctor
        public ClassTraining()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TrainedSkill
        protected readonly INotifyingItem<Skill> _TrainedSkill = NotifyingItem.Factory<Skill>(markAsSet: false);
        public INotifyingItem<Skill> TrainedSkill_Property => _TrainedSkill;
        public Skill TrainedSkill
        {
            get => this._TrainedSkill.Item;
            set => this._TrainedSkill.Set(value);
        }
        INotifyingItem<Skill> IClassTraining.TrainedSkill_Property => this.TrainedSkill_Property;
        INotifyingItemGetter<Skill> IClassTrainingGetter.TrainedSkill_Property => this.TrainedSkill_Property;
        #endregion
        #region MaximumTrainingLevel
        protected readonly INotifyingItem<Byte> _MaximumTrainingLevel = NotifyingItem.Factory<Byte>(markAsSet: false);
        public INotifyingItem<Byte> MaximumTrainingLevel_Property => _MaximumTrainingLevel;
        public Byte MaximumTrainingLevel
        {
            get => this._MaximumTrainingLevel.Item;
            set => this._MaximumTrainingLevel.Set(value.PutInRange(MaximumTrainingLevel_Range.Min, MaximumTrainingLevel_Range.Max));
        }
        INotifyingItem<Byte> IClassTraining.MaximumTrainingLevel_Property => this.MaximumTrainingLevel_Property;
        INotifyingItemGetter<Byte> IClassTrainingGetter.MaximumTrainingLevel_Property => this.MaximumTrainingLevel_Property;
        public static RangeUInt8 MaximumTrainingLevel_Range = new RangeUInt8(0, 100);
        #endregion
        #region Fluff
        protected readonly INotifyingItem<Byte[]> _Fluff = NotifyingItem.Factory<Byte[]>(
            markAsSet: false,
            noNullFallback: () => new byte[2]);
        public INotifyingItem<Byte[]> Fluff_Property => _Fluff;
        public Byte[] Fluff
        {
            get => this._Fluff.Item;
            set => this._Fluff.Set(value);
        }
        INotifyingItem<Byte[]> IClassTraining.Fluff_Property => this.Fluff_Property;
        INotifyingItemGetter<Byte[]> IClassTrainingGetter.Fluff_Property => this.Fluff_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => ClassTrainingCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => ClassTrainingCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => ClassTrainingCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ClassTrainingCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return ClassTrainingCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            ClassTraining_Mask<bool> printMask = null)
        {
            return ClassTrainingCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ClassTrainingCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public ClassTraining_Mask<bool> GetHasBeenSetMask()
        {
            return ClassTrainingCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ClassTraining rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ClassTraining rhs)
        {
            if (rhs == null) return false;
            if (TrainedSkill_Property.HasBeenSet != rhs.TrainedSkill_Property.HasBeenSet) return false;
            if (TrainedSkill_Property.HasBeenSet)
            {
                if (TrainedSkill != rhs.TrainedSkill) return false;
            }
            if (MaximumTrainingLevel_Property.HasBeenSet != rhs.MaximumTrainingLevel_Property.HasBeenSet) return false;
            if (MaximumTrainingLevel_Property.HasBeenSet)
            {
                if (MaximumTrainingLevel != rhs.MaximumTrainingLevel) return false;
            }
            if (Fluff_Property.HasBeenSet != rhs.Fluff_Property.HasBeenSet) return false;
            if (Fluff_Property.HasBeenSet)
            {
                if (!Fluff.EqualsFast(rhs.Fluff)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (TrainedSkill_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(TrainedSkill).CombineHashCode(ret);
            }
            if (MaximumTrainingLevel_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MaximumTrainingLevel).CombineHashCode(ret);
            }
            if (Fluff_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Fluff).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static ClassTraining Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static ClassTraining Create_XML(
            XElement root,
            out ClassTraining_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static ClassTraining Create_XML(
            XElement root,
            bool doMasks,
            out ClassTraining_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (ClassTraining Object, ClassTraining_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            ClassTraining_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new ClassTraining_ErrorMask()) : default(Func<ClassTraining_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static ClassTraining Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static ClassTraining Create_XML(
            string path,
            out ClassTraining_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static ClassTraining Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static ClassTraining Create_XML(
            Stream stream,
            out ClassTraining_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<ClassTraining, ClassTraining_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out ClassTraining_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<ClassTraining, ClassTraining_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out ClassTraining_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out ClassTraining_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out ClassTraining_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (ClassTraining_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out ClassTraining_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out ClassTraining_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            ClassTrainingCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static ClassTraining Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<ClassTraining_ErrorMask> errorMask)
        {
            var ret = new ClassTraining();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            ClassTraining item,
            XElement root,
            string name,
            bool doMasks,
            Func<ClassTraining_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "TrainedSkill":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<Skill>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: doMasks,
                            errorMask: out subMask).Bubble((o) => o.Value);
                        item._TrainedSkill.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)ClassTraining_FieldIndex.TrainedSkill,
                            subMask);
                    }
                    break;
                case "MaximumTrainingLevel":
                    {
                        Exception subMask;
                        var tryGet = ByteXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._MaximumTrainingLevel.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)ClassTraining_FieldIndex.MaximumTrainingLevel,
                            subMask);
                    }
                    break;
                case "Fluff":
                    {
                        Exception subMask;
                        var tryGet = ByteArrayXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Fluff.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)ClassTraining_FieldIndex.Fluff,
                            subMask);
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static ClassTraining Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static ClassTraining Create_Binary(
            MutagenFrame frame,
            out ClassTraining_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static ClassTraining Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out ClassTraining_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (ClassTraining Object, ClassTraining_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            ClassTraining_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new ClassTraining_ErrorMask()) : default(Func<ClassTraining_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static ClassTraining Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ClassTraining Create_Binary(
            string path,
            out ClassTraining_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static ClassTraining Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static ClassTraining Create_Binary(
            Stream stream,
            out ClassTraining_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<ClassTraining, ClassTraining_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out ClassTraining_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<ClassTraining, ClassTraining_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out ClassTraining_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out ClassTraining_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out ClassTraining_ErrorMask errorMask)
        {
            errorMask = (ClassTraining_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out ClassTraining_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out ClassTraining_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            ClassTrainingCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static ClassTraining Create_Binary_Internal(
            MutagenFrame frame,
            bool doMasks,
            Func<ClassTraining_ErrorMask> errorMask)
        {
            var ret = new ClassTraining();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            ClassTraining item,
            MutagenFrame frame,
            bool doMasks,
            Func<ClassTraining_ErrorMask> errorMask)
        {
            if (frame.Complete) return;
            var TrainedSkilltryGet = Mutagen.Binary.EnumBinaryTranslation<Skill>.Instance.Parse(
                frame: frame.Spawn(new ContentLength(1)),
                fieldIndex: (int)ClassTraining_FieldIndex.TrainedSkill,
                doMasks: doMasks,
                errorMask: errorMask);
            item._TrainedSkill.SetIfSucceeded(TrainedSkilltryGet);
            if (frame.Complete) return;
            var MaximumTrainingLeveltryGet = Mutagen.Binary.ByteBinaryTranslation.Instance.Parse(
                frame: frame,
                doMasks: doMasks,
                fieldIndex: (int)ClassTraining_FieldIndex.MaximumTrainingLevel,
                errorMask: errorMask);
            item._MaximumTrainingLevel.SetIfSucceeded(MaximumTrainingLeveltryGet);
            if (frame.Complete) return;
            var FlufftryGet = Mutagen.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.Spawn(new ContentLength(2)),
                fieldIndex: (int)ClassTraining_FieldIndex.Fluff,
                doMasks: doMasks,
                errorMask: errorMask);
            item._Fluff.SetIfSucceeded(FlufftryGet);
        }

        #endregion

        public ClassTraining Copy(
            ClassTraining_CopyMask copyMask = null,
            IClassTrainingGetter def = null)
        {
            return ClassTraining.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ClassTraining Copy(
            IClassTraining item,
            ClassTraining_CopyMask copyMask = null,
            IClassTrainingGetter def = null)
        {
            ClassTraining ret;
            if (item.GetType().Equals(typeof(ClassTraining)))
            {
                ret = new ClassTraining();
            }
            else
            {
                ret = (ClassTraining)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            ClassTraining_CopyMask copyMask = null,
            IClassTrainingGetter def = null)
            where CopyType : class, IClassTraining
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(ClassTraining)))
            {
                ret = new ClassTraining() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static ClassTraining Copy_ToLoqui(
            IClassTrainingGetter item,
            ClassTraining_CopyMask copyMask = null,
            IClassTrainingGetter def = null)
        {
            var ret = new ClassTraining();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    this._TrainedSkill.Set(
                        (Skill)obj,
                        cmds);
                    break;
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    this._MaximumTrainingLevel.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case ClassTraining_FieldIndex.Fluff:
                    this._Fluff.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ClassTrainingCommon.Clear(this, cmds);
        }


        public static ClassTraining Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ClassTraining();
            foreach (var pair in fields)
            {
                CopyInInternal_ClassTraining(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_ClassTraining(ClassTraining obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ClassTraining_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    obj._TrainedSkill.Set(
                        (Skill)pair.Value,
                        null);
                    break;
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    obj._MaximumTrainingLevel.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case ClassTraining_FieldIndex.Fluff:
                    obj._Fluff.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, ClassTraining obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IClassTraining : IClassTrainingGetter, ILoquiClass<IClassTraining, IClassTrainingGetter>, ILoquiClass<ClassTraining, IClassTrainingGetter>
    {
        new Skill TrainedSkill { get; set; }
        new INotifyingItem<Skill> TrainedSkill_Property { get; }

        new Byte MaximumTrainingLevel { get; set; }
        new INotifyingItem<Byte> MaximumTrainingLevel_Property { get; }

        new Byte[] Fluff { get; set; }
        new INotifyingItem<Byte[]> Fluff_Property { get; }

    }

    public interface IClassTrainingGetter : ILoquiObject
    {
        #region TrainedSkill
        Skill TrainedSkill { get; }
        INotifyingItemGetter<Skill> TrainedSkill_Property { get; }

        #endregion
        #region MaximumTrainingLevel
        Byte MaximumTrainingLevel { get; }
        INotifyingItemGetter<Byte> MaximumTrainingLevel_Property { get; }

        #endregion
        #region Fluff
        Byte[] Fluff { get; }
        INotifyingItemGetter<Byte[]> Fluff_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum ClassTraining_FieldIndex
    {
        TrainedSkill = 0,
        MaximumTrainingLevel = 1,
        Fluff = 2,
    }
    #endregion

    #region Registration
    public class ClassTraining_Registration : ILoquiRegistration
    {
        public static readonly ClassTraining_Registration Instance = new ClassTraining_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 19,
            version: 0);

        public const string GUID = "db3e6d59-8545-4d81-8531-4eb0b56c4a47";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(ClassTraining_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ClassTraining_ErrorMask);

        public static readonly Type ClassType = typeof(ClassTraining);

        public static readonly Type GetterType = typeof(IClassTrainingGetter);

        public static readonly Type SetterType = typeof(IClassTraining);

        public static readonly Type CommonType = typeof(ClassTrainingCommon);

        public const string FullName = "Mutagen.ClassTraining";

        public const string Name = "ClassTraining";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TRAINEDSKILL":
                    return (ushort)ClassTraining_FieldIndex.TrainedSkill;
                case "MAXIMUMTRAININGLEVEL":
                    return (ushort)ClassTraining_FieldIndex.MaximumTrainingLevel;
                case "FLUFF":
                    return (ushort)ClassTraining_FieldIndex.Fluff;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                case ClassTraining_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                case ClassTraining_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                case ClassTraining_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    return "TrainedSkill";
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    return "MaximumTrainingLevel";
                case ClassTraining_FieldIndex.Fluff:
                    return "Fluff";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                case ClassTraining_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                case ClassTraining_FieldIndex.Fluff:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    return typeof(Skill);
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    return typeof(Byte);
                case ClassTraining_FieldIndex.Fluff:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class ClassTrainingCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IClassTraining item,
            IClassTrainingGetter rhs,
            ClassTraining_CopyMask copyMask = null,
            IClassTrainingGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            ClassTrainingCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IClassTraining item,
            IClassTrainingGetter rhs,
            out ClassTraining_ErrorMask errorMask,
            ClassTraining_CopyMask copyMask = null,
            IClassTrainingGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            ClassTrainingCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IClassTraining item,
            IClassTrainingGetter rhs,
            IClassTrainingGetter def,
            bool doErrorMask,
            out ClassTraining_ErrorMask errorMask,
            ClassTraining_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            ClassTraining_ErrorMask retErrorMask = null;
            Func<ClassTraining_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new ClassTraining_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IClassTraining item,
            IClassTrainingGetter rhs,
            IClassTrainingGetter def,
            bool doErrorMask,
            Func<ClassTraining_ErrorMask> errorMask,
            ClassTraining_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.TrainedSkill ?? true)
            {
                try
                {
                    item.TrainedSkill_Property.SetToWithDefault(
                        rhs.TrainedSkill_Property,
                        def?.TrainedSkill_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)ClassTraining_FieldIndex.TrainedSkill, ex);
                }
            }
            if (copyMask?.MaximumTrainingLevel ?? true)
            {
                try
                {
                    item.MaximumTrainingLevel_Property.SetToWithDefault(
                        rhs.MaximumTrainingLevel_Property,
                        def?.MaximumTrainingLevel_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)ClassTraining_FieldIndex.MaximumTrainingLevel, ex);
                }
            }
            if (copyMask?.Fluff ?? true)
            {
                try
                {
                    item.Fluff_Property.SetToWithDefault(
                        rhs.Fluff_Property,
                        def?.Fluff_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)ClassTraining_FieldIndex.Fluff, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IClassTraining obj,
            NotifyingFireParameters? cmds = null)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    obj.TrainedSkill_Property.HasBeenSet = on;
                    break;
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    obj.MaximumTrainingLevel_Property.HasBeenSet = on;
                    break;
                case ClassTraining_FieldIndex.Fluff:
                    obj.Fluff_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IClassTraining obj,
            NotifyingUnsetParameters? cmds = null)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    obj.TrainedSkill_Property.Unset(cmds);
                    break;
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    obj.MaximumTrainingLevel_Property.Unset(cmds);
                    break;
                case ClassTraining_FieldIndex.Fluff:
                    obj.Fluff_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IClassTraining obj)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    return obj.TrainedSkill_Property.HasBeenSet;
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    return obj.MaximumTrainingLevel_Property.HasBeenSet;
                case ClassTraining_FieldIndex.Fluff:
                    return obj.Fluff_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IClassTrainingGetter obj)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    return obj.TrainedSkill;
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    return obj.MaximumTrainingLevel;
                case ClassTraining_FieldIndex.Fluff:
                    return obj.Fluff;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IClassTraining item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.TrainedSkill_Property.Unset(cmds.ToUnsetParams());
            item.MaximumTrainingLevel_Property.Unset(cmds.ToUnsetParams());
            item.Fluff_Property.Unset(cmds.ToUnsetParams());
        }

        public static ClassTraining_Mask<bool> GetEqualsMask(
            this IClassTrainingGetter item,
            IClassTrainingGetter rhs)
        {
            var ret = new ClassTraining_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IClassTrainingGetter item,
            IClassTrainingGetter rhs,
            ClassTraining_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.TrainedSkill = item.TrainedSkill_Property.Equals(rhs.TrainedSkill_Property, (l, r) => l == r);
            ret.MaximumTrainingLevel = item.MaximumTrainingLevel_Property.Equals(rhs.MaximumTrainingLevel_Property, (l, r) => l == r);
            ret.Fluff = item.Fluff_Property.Equals(rhs.Fluff_Property, (l, r) => l.EqualsFast(r));
        }

        public static string ToString(
            this IClassTrainingGetter item,
            string name = null,
            ClassTraining_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IClassTrainingGetter item,
            FileGeneration fg,
            string name = null,
            ClassTraining_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(ClassTraining)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(ClassTraining)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TrainedSkill ?? true)
                {
                    fg.AppendLine($"TrainedSkill => {item.TrainedSkill}");
                }
                if (printMask?.MaximumTrainingLevel ?? true)
                {
                    fg.AppendLine($"MaximumTrainingLevel => {item.MaximumTrainingLevel}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {item.Fluff}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IClassTrainingGetter item,
            ClassTraining_Mask<bool?> checkMask)
        {
            if (checkMask.TrainedSkill.HasValue && checkMask.TrainedSkill.Value != item.TrainedSkill_Property.HasBeenSet) return false;
            if (checkMask.MaximumTrainingLevel.HasValue && checkMask.MaximumTrainingLevel.Value != item.MaximumTrainingLevel_Property.HasBeenSet) return false;
            if (checkMask.Fluff.HasValue && checkMask.Fluff.Value != item.Fluff_Property.HasBeenSet) return false;
            return true;
        }

        public static ClassTraining_Mask<bool> GetHasBeenSetMask(IClassTrainingGetter item)
        {
            var ret = new ClassTraining_Mask<bool>();
            ret.TrainedSkill = item.TrainedSkill_Property.HasBeenSet;
            ret.MaximumTrainingLevel = item.MaximumTrainingLevel_Property.HasBeenSet;
            ret.Fluff = item.Fluff_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IClassTrainingGetter item,
            bool doMasks,
            out ClassTraining_ErrorMask errorMask,
            string name = null)
        {
            ClassTraining_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new ClassTraining_ErrorMask()) : default(Func<ClassTraining_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IClassTrainingGetter item,
            bool doMasks,
            Func<ClassTraining_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.ClassTraining"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.ClassTraining");
                    }
                    if (item.TrainedSkill_Property.HasBeenSet)
                    {
                        Exception subMask;
                        EnumXmlTranslation<Skill>.Instance.Write(
                            writer,
                            nameof(item.TrainedSkill),
                            item.TrainedSkill,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)ClassTraining_FieldIndex.TrainedSkill,
                            subMask);
                    }
                    if (item.MaximumTrainingLevel_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.MaximumTrainingLevel),
                            item.MaximumTrainingLevel,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)ClassTraining_FieldIndex.MaximumTrainingLevel,
                            subMask);
                    }
                    if (item.Fluff_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteArrayXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Fluff),
                            item.Fluff,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)ClassTraining_FieldIndex.Fluff,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IClassTrainingGetter item,
            bool doMasks,
            out ClassTraining_ErrorMask errorMask)
        {
            ClassTraining_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new ClassTraining_ErrorMask()) : default(Func<ClassTraining_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IClassTrainingGetter item,
            bool doMasks,
            Func<ClassTraining_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    doMasks: doMasks,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            IClassTrainingGetter item,
            MutagenWriter writer,
            bool doMasks,
            Func<ClassTraining_ErrorMask> errorMask)
        {
            Mutagen.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                writer,
                item.TrainedSkill_Property,
                doMasks: doMasks,
                length: new ContentLength(1),
                fieldIndex: (int)ClassTraining_FieldIndex.TrainedSkill,
                errorMask: errorMask);
            Mutagen.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaximumTrainingLevel_Property,
                fieldIndex: (int)ClassTraining_FieldIndex.MaximumTrainingLevel,
                doMasks: doMasks,
                errorMask: errorMask);
            Mutagen.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff_Property,
                doMasks: doMasks,
                fieldIndex: (int)ClassTraining_FieldIndex.Fluff,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class ClassTraining_Mask<T> : IMask<T>, IEquatable<ClassTraining_Mask<T>>
    {
        #region Ctors
        public ClassTraining_Mask()
        {
        }

        public ClassTraining_Mask(T initialValue)
        {
            this.TrainedSkill = initialValue;
            this.MaximumTrainingLevel = initialValue;
            this.Fluff = initialValue;
        }
        #endregion

        #region Members
        public T TrainedSkill;
        public T MaximumTrainingLevel;
        public T Fluff;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ClassTraining_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ClassTraining_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.TrainedSkill, rhs.TrainedSkill)) return false;
            if (!object.Equals(this.MaximumTrainingLevel, rhs.MaximumTrainingLevel)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.TrainedSkill?.GetHashCode());
            ret = ret.CombineHashCode(this.MaximumTrainingLevel?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.TrainedSkill)) return false;
            if (!eval(this.MaximumTrainingLevel)) return false;
            if (!eval(this.Fluff)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ClassTraining_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ClassTraining_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ClassTraining_Mask<R> obj, Func<T, R> eval)
        {
            obj.TrainedSkill = eval(this.TrainedSkill);
            obj.MaximumTrainingLevel = eval(this.MaximumTrainingLevel);
            obj.Fluff = eval(this.Fluff);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ClassTraining_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ClassTraining_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ClassTraining_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TrainedSkill ?? true)
                {
                    fg.AppendLine($"TrainedSkill => {TrainedSkill.ToStringSafe()}");
                }
                if (printMask?.MaximumTrainingLevel ?? true)
                {
                    fg.AppendLine($"MaximumTrainingLevel => {MaximumTrainingLevel.ToStringSafe()}");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff.ToStringSafe()}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ClassTraining_ErrorMask : IErrorMask
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception TrainedSkill;
        public Exception MaximumTrainingLevel;
        public Exception Fluff;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    this.TrainedSkill = ex;
                    break;
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    this.MaximumTrainingLevel = ex;
                    break;
                case ClassTraining_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ClassTraining_FieldIndex enu = (ClassTraining_FieldIndex)index;
            switch (enu)
            {
                case ClassTraining_FieldIndex.TrainedSkill:
                    this.TrainedSkill = (Exception)obj;
                    break;
                case ClassTraining_FieldIndex.MaximumTrainingLevel:
                    this.MaximumTrainingLevel = (Exception)obj;
                    break;
                case ClassTraining_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ClassTraining_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            if (TrainedSkill != null)
            {
                fg.AppendLine($"TrainedSkill => {TrainedSkill.ToStringSafe()}");
            }
            if (MaximumTrainingLevel != null)
            {
                fg.AppendLine($"MaximumTrainingLevel => {MaximumTrainingLevel.ToStringSafe()}");
            }
            if (Fluff != null)
            {
                fg.AppendLine($"Fluff => {Fluff.ToStringSafe()}");
            }
        }
        #endregion

        #region Combine
        public ClassTraining_ErrorMask Combine(ClassTraining_ErrorMask rhs)
        {
            var ret = new ClassTraining_ErrorMask();
            ret.TrainedSkill = this.TrainedSkill.Combine(rhs.TrainedSkill);
            ret.MaximumTrainingLevel = this.MaximumTrainingLevel.Combine(rhs.MaximumTrainingLevel);
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            return ret;
        }
        public static ClassTraining_ErrorMask Combine(ClassTraining_ErrorMask lhs, ClassTraining_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class ClassTraining_CopyMask
    {
        #region Members
        public bool TrainedSkill;
        public bool MaximumTrainingLevel;
        public bool Fluff;
        #endregion

    }
    #endregion




    #endregion

}
