/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class Faction : NamedMajorRecord, IFaction, ILoquiObjectSetter, IEquatable<Faction>
    {
        ILoquiRegistration ILoquiObject.Registration => Faction_Registration.Instance;
        public new static Faction_Registration Registration => Faction_Registration.Instance;

        #region Ctor
        public Faction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Relations
        private readonly INotifyingList<Relation> _Relations = new NotifyingList<Relation>();
        public INotifyingList<Relation> Relations => _Relations;
        #region Interface Members
        INotifyingList<Relation> IFaction.Relations => _Relations;
        INotifyingListGetter<Relation> IFactionGetter.Relations => _Relations;
        #endregion

        #endregion
        #region Flags
        protected readonly INotifyingItem<Faction.FactionFlag> _Flags = NotifyingItem.Factory<Faction.FactionFlag>(markAsSet: false);
        public INotifyingItem<Faction.FactionFlag> Flags_Property => _Flags;
        public Faction.FactionFlag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        INotifyingItem<Faction.FactionFlag> IFaction.Flags_Property => this.Flags_Property;
        INotifyingItemGetter<Faction.FactionFlag> IFactionGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region CrimeGoldMultiplier
        protected readonly INotifyingItem<Single> _CrimeGoldMultiplier = NotifyingItem.Factory<Single>(markAsSet: false);
        public INotifyingItem<Single> CrimeGoldMultiplier_Property => _CrimeGoldMultiplier;
        public Single CrimeGoldMultiplier
        {
            get => this._CrimeGoldMultiplier.Item;
            set => this._CrimeGoldMultiplier.Set(value);
        }
        INotifyingItem<Single> IFaction.CrimeGoldMultiplier_Property => this.CrimeGoldMultiplier_Property;
        INotifyingItemGetter<Single> IFactionGetter.CrimeGoldMultiplier_Property => this.CrimeGoldMultiplier_Property;
        #endregion
        #region Ranks
        private readonly INotifyingList<Rank> _Ranks = new NotifyingList<Rank>();
        public INotifyingList<Rank> Ranks => _Ranks;
        #region Interface Members
        INotifyingList<Rank> IFaction.Ranks => _Ranks;
        INotifyingListGetter<Rank> IFactionGetter.Ranks => _Ranks;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => FactionCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => FactionCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => FactionCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            FactionCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return FactionCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Faction_Mask<bool> printMask = null)
        {
            return FactionCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            FactionCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new Faction_Mask<bool> GetHasBeenSetMask()
        {
            return FactionCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Faction rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Faction rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Relations.HasBeenSet != rhs.Relations.HasBeenSet) return false;
            if (Relations.HasBeenSet)
            {
                if (!Relations.SequenceEqual(rhs.Relations)) return false;
            }
            if (Flags_Property.HasBeenSet != rhs.Flags_Property.HasBeenSet) return false;
            if (Flags_Property.HasBeenSet)
            {
                if (Flags != rhs.Flags) return false;
            }
            if (CrimeGoldMultiplier_Property.HasBeenSet != rhs.CrimeGoldMultiplier_Property.HasBeenSet) return false;
            if (CrimeGoldMultiplier_Property.HasBeenSet)
            {
                if (CrimeGoldMultiplier != rhs.CrimeGoldMultiplier) return false;
            }
            if (Ranks.HasBeenSet != rhs.Ranks.HasBeenSet) return false;
            if (Ranks.HasBeenSet)
            {
                if (!Ranks.SequenceEqual(rhs.Ranks)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Relations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Relations).CombineHashCode(ret);
            }
            if (Flags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (CrimeGoldMultiplier_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(CrimeGoldMultiplier).CombineHashCode(ret);
            }
            if (Ranks.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Ranks).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Faction Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Faction Create_XML(
            XElement root,
            out Faction_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Faction Create_XML(
            XElement root,
            bool doMasks,
            out Faction_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Faction Object, Faction_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Faction_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Faction_ErrorMask()) : default(Func<Faction_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Faction Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Faction Create_XML(
            string path,
            out Faction_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Faction Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Faction Create_XML(
            Stream stream,
            out Faction_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Faction, Faction_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Faction_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Faction, Faction_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Faction_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Faction_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Faction_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Faction_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Faction_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Faction_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Faction_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Faction_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            FactionCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Faction Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<Faction_ErrorMask> errorMask)
        {
            var ret = new Faction();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Faction item,
            XElement root,
            string name,
            bool doMasks,
            Func<Faction_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Relations":
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>> subMask;
                        var listTryGet = ListXmlTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                            {
                                return LoquiXmlTranslation<Relation, Relation_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: listDoMasks,
                                    mask: out listSubMask);
                            }
                            );
                        item._Relations.SetIfSucceeded(listTryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Faction_FieldIndex.Relations,
                            subMask);
                    }
                    break;
                case "Flags":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<Faction.FactionFlag>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: doMasks,
                            errorMask: out subMask).Bubble((o) => o.Value);
                        item._Flags.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Faction_FieldIndex.Flags,
                            subMask);
                    }
                    break;
                case "CrimeGoldMultiplier":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._CrimeGoldMultiplier.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Faction_FieldIndex.CrimeGoldMultiplier,
                            subMask);
                    }
                    break;
                case "Ranks":
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>> subMask;
                        var listTryGet = ListXmlTranslation<Rank, MaskItem<Exception, Rank_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out MaskItem<Exception, Rank_ErrorMask> listSubMask) =>
                            {
                                return LoquiXmlTranslation<Rank, Rank_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: listDoMasks,
                                    mask: out listSubMask);
                            }
                            );
                        item._Ranks.SetIfSucceeded(listTryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Faction_FieldIndex.Ranks,
                            subMask);
                    }
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Faction Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Faction Create_Binary(
            MutagenFrame frame,
            out Faction_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Faction Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Faction_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Faction Object, Faction_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            Faction_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Faction_ErrorMask()) : default(Func<Faction_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Faction Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Faction Create_Binary(
            string path,
            out Faction_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Faction Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Faction Create_Binary(
            Stream stream,
            out Faction_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Faction, Faction_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out Faction_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Faction, Faction_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out Faction_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Faction_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Faction_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Faction_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Faction_ErrorMask errorMask)
        {
            errorMask = (Faction_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Faction_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Faction_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            FactionCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Faction Create_Binary_Internal(
            MutagenFrame frame,
            bool doMasks,
            Func<Faction_ErrorMask> errorMask)
        {
            var ret = new Faction();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseRecord(
                    frame,
                    Faction_Registration.FACT_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    while (!frame.Complete)
                    {
                        Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            doMasks: doMasks,
                            errorMask: errorMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            Faction item,
            MutagenFrame frame,
            bool doMasks,
            Func<Faction_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                doMasks: doMasks,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_RecordTypes(
            Faction item,
            MutagenFrame frame,
            bool doMasks,
            Func<Faction_ErrorMask> errorMask)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                frame: frame,
                contentLength: out var contentLength);
            switch (nextRecordType.Type)
            {
                case "XNAM":
                {
                    MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>> subMask;
                    var listTryGet = Mutagen.Binary.ListBinaryTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Faction_Registration.XNAM_HEADER,
                        doMasks: doMasks,
                        objType: ObjectType.Struct,
                        maskObj: out subMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<Relation, Relation_ErrorMask>.Instance.Parse(
                                reader: r,
                                doMasks: listDoMasks,
                                mask: out listSubMask);
                        }
                        );
                    item._Relations.SetIfSucceeded(listTryGet);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        doMasks,
                        (int)Faction_FieldIndex.Relations,
                        subMask);
                }
                break;
                case "DATA":
                {
                    Exception subMask;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var tryGet = Mutagen.Binary.EnumBinaryTranslation<Faction.FactionFlag>.Instance.Parse(
                        frame.Spawn(contentLength),
                        doMasks: doMasks,
                        errorMask: out subMask);
                    item._Flags.SetIfSucceeded(tryGet);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        doMasks,
                        (int)Faction_FieldIndex.Flags,
                        subMask);
                }
                break;
                case "CNAM":
                {
                    Exception subMask;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var tryGet = Mutagen.Binary.FloatBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        doMasks: doMasks,
                        errorMask: out subMask);
                    item._CrimeGoldMultiplier.SetIfSucceeded(tryGet);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        doMasks,
                        (int)Faction_FieldIndex.CrimeGoldMultiplier,
                        subMask);
                }
                break;
                case "RNAM":
                {
                    MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>> subMask;
                    var listTryGet = Mutagen.Binary.ListBinaryTranslation<Rank, MaskItem<Exception, Rank_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Faction_Registration.RNAM_HEADER,
                        doMasks: doMasks,
                        objType: ObjectType.Struct,
                        maskObj: out subMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, Rank_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<Rank, Rank_ErrorMask>.Instance.Parse(
                                reader: r,
                                doMasks: listDoMasks,
                                mask: out listSubMask);
                        }
                        );
                    item._Ranks.SetIfSucceeded(listTryGet);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        doMasks,
                        (int)Faction_FieldIndex.Ranks,
                        subMask);
                }
                break;
                default:
                    NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        public Faction Copy(
            Faction_CopyMask copyMask = null,
            IFactionGetter def = null)
        {
            return Faction.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Faction Copy(
            IFaction item,
            Faction_CopyMask copyMask = null,
            IFactionGetter def = null)
        {
            Faction ret;
            if (item.GetType().Equals(typeof(Faction)))
            {
                ret = new Faction();
            }
            else
            {
                ret = (Faction)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Faction_CopyMask copyMask = null,
            IFactionGetter def = null)
            where CopyType : class, IFaction
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Faction)))
            {
                ret = new Faction() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Faction Copy_ToLoqui(
            IFactionGetter item,
            Faction_CopyMask copyMask = null,
            IFactionGetter def = null)
        {
            var ret = new Faction();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                    this._Relations.SetTo((IEnumerable<Relation>)obj, cmds);
                    break;
                case Faction_FieldIndex.Flags:
                    this._Flags.Set(
                        (Faction.FactionFlag)obj,
                        cmds);
                    break;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    this._CrimeGoldMultiplier.Set(
                        (Single)obj,
                        cmds);
                    break;
                case Faction_FieldIndex.Ranks:
                    this._Ranks.SetTo((IEnumerable<Rank>)obj, cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            FactionCommon.Clear(this, cmds);
        }


        public new static Faction Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Faction();
            foreach (var pair in fields)
            {
                CopyInInternal_Faction(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Faction(Faction obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Faction_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                    obj._Relations.SetTo((IEnumerable<Relation>)pair.Value, null);
                    break;
                case Faction_FieldIndex.Flags:
                    obj._Flags.Set(
                        (Faction.FactionFlag)pair.Value,
                        null);
                    break;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    obj._CrimeGoldMultiplier.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case Faction_FieldIndex.Ranks:
                    obj._Ranks.SetTo((IEnumerable<Rank>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Faction obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IFaction : IFactionGetter, INamedMajorRecord, ILoquiClass<IFaction, IFactionGetter>, ILoquiClass<Faction, IFactionGetter>
    {
        new INotifyingList<Relation> Relations { get; }
        new Faction.FactionFlag Flags { get; set; }
        new INotifyingItem<Faction.FactionFlag> Flags_Property { get; }

        new Single CrimeGoldMultiplier { get; set; }
        new INotifyingItem<Single> CrimeGoldMultiplier_Property { get; }

        new INotifyingList<Rank> Ranks { get; }
    }

    public interface IFactionGetter : INamedMajorRecordGetter
    {
        #region Relations
        INotifyingListGetter<Relation> Relations { get; }
        #endregion
        #region Flags
        Faction.FactionFlag Flags { get; }
        INotifyingItemGetter<Faction.FactionFlag> Flags_Property { get; }

        #endregion
        #region CrimeGoldMultiplier
        Single CrimeGoldMultiplier { get; }
        INotifyingItemGetter<Single> CrimeGoldMultiplier_Property { get; }

        #endregion
        #region Ranks
        INotifyingListGetter<Rank> Ranks { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum Faction_FieldIndex
    {
        Relations = 6,
        Flags = 7,
        CrimeGoldMultiplier = 8,
        Ranks = 9,
    }
    #endregion

    #region Registration
    public class Faction_Registration : ILoquiRegistration
    {
        public static readonly Faction_Registration Instance = new Faction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 22,
            version: 0);

        public const string GUID = "153fd2c1-b407-450e-af54-30f99328faff";

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(Faction_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Faction_ErrorMask);

        public static readonly Type ClassType = typeof(Faction);

        public static readonly Type GetterType = typeof(IFactionGetter);

        public static readonly Type SetterType = typeof(IFaction);

        public static readonly Type CommonType = typeof(FactionCommon);

        public const string FullName = "Mutagen.Faction";

        public const string Name = "Faction";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "RELATIONS":
                    return (ushort)Faction_FieldIndex.Relations;
                case "FLAGS":
                    return (ushort)Faction_FieldIndex.Flags;
                case "CRIMEGOLDMULTIPLIER":
                    return (ushort)Faction_FieldIndex.CrimeGoldMultiplier;
                case "RANKS":
                    return (ushort)Faction_FieldIndex.Ranks;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Ranks:
                    return true;
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Ranks:
                    return true;
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                case Faction_FieldIndex.Ranks:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                    return "Relations";
                case Faction_FieldIndex.Flags:
                    return "Flags";
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return "CrimeGoldMultiplier";
                case Faction_FieldIndex.Ranks:
                    return "Ranks";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                case Faction_FieldIndex.Ranks:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                case Faction_FieldIndex.Flags:
                case Faction_FieldIndex.CrimeGoldMultiplier:
                case Faction_FieldIndex.Ranks:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                    return typeof(NotifyingList<Relation>);
                case Faction_FieldIndex.Flags:
                    return typeof(Faction.FactionFlag);
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return typeof(Single);
                case Faction_FieldIndex.Ranks:
                    return typeof(NotifyingList<Rank>);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType XNAM_HEADER = new RecordType("XNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = FACT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class FactionCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IFaction item,
            IFactionGetter rhs,
            Faction_CopyMask copyMask = null,
            IFactionGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            FactionCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IFaction item,
            IFactionGetter rhs,
            out Faction_ErrorMask errorMask,
            Faction_CopyMask copyMask = null,
            IFactionGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            FactionCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IFaction item,
            IFactionGetter rhs,
            IFactionGetter def,
            bool doErrorMask,
            out Faction_ErrorMask errorMask,
            Faction_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            Faction_ErrorMask retErrorMask = null;
            Func<Faction_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Faction_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IFaction item,
            IFactionGetter rhs,
            IFactionGetter def,
            bool doErrorMask,
            Func<Faction_ErrorMask> errorMask,
            Faction_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doErrorMask,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Relations.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Relations.SetToWithDefault(
                        rhs.Relations,
                        def?.Relations,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Relations.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Relation);
                                    return Relation.Copy(
                                        r,
                                        copyMask?.Relations.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Relations.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Faction_FieldIndex.Relations, ex);
                }
            }
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.SetToWithDefault(
                        rhs.Flags_Property,
                        def?.Flags_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Faction_FieldIndex.Flags, ex);
                }
            }
            if (copyMask?.CrimeGoldMultiplier ?? true)
            {
                try
                {
                    item.CrimeGoldMultiplier_Property.SetToWithDefault(
                        rhs.CrimeGoldMultiplier_Property,
                        def?.CrimeGoldMultiplier_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Faction_FieldIndex.CrimeGoldMultiplier, ex);
                }
            }
            if (copyMask?.Ranks.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Ranks.SetToWithDefault(
                        rhs.Ranks,
                        def?.Ranks,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Ranks.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Rank);
                                    return Rank.Copy(
                                        r,
                                        copyMask?.Ranks.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Ranks.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Faction_FieldIndex.Ranks, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IFaction obj,
            NotifyingFireParameters? cmds = null)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                    obj.Relations.HasBeenSet = on;
                    break;
                case Faction_FieldIndex.Flags:
                    obj.Flags_Property.HasBeenSet = on;
                    break;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    obj.CrimeGoldMultiplier_Property.HasBeenSet = on;
                    break;
                case Faction_FieldIndex.Ranks:
                    obj.Ranks.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IFaction obj,
            NotifyingUnsetParameters? cmds = null)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                    obj.Relations.Unset(cmds);
                    break;
                case Faction_FieldIndex.Flags:
                    obj.Flags_Property.Unset(cmds);
                    break;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    obj.CrimeGoldMultiplier_Property.Unset(cmds);
                    break;
                case Faction_FieldIndex.Ranks:
                    obj.Ranks.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IFaction obj)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                    return obj.Relations.HasBeenSet;
                case Faction_FieldIndex.Flags:
                    return obj.Flags_Property.HasBeenSet;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return obj.CrimeGoldMultiplier_Property.HasBeenSet;
                case Faction_FieldIndex.Ranks:
                    return obj.Ranks.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IFactionGetter obj)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                    return obj.Relations;
                case Faction_FieldIndex.Flags:
                    return obj.Flags;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    return obj.CrimeGoldMultiplier;
                case Faction_FieldIndex.Ranks:
                    return obj.Ranks;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IFaction item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Relations.Unset(cmds.ToUnsetParams());
            item.Flags_Property.Unset(cmds.ToUnsetParams());
            item.CrimeGoldMultiplier_Property.Unset(cmds.ToUnsetParams());
            item.Ranks.Unset(cmds.ToUnsetParams());
        }

        public static Faction_Mask<bool> GetEqualsMask(
            this IFactionGetter item,
            IFactionGetter rhs)
        {
            var ret = new Faction_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IFactionGetter item,
            IFactionGetter rhs,
            Faction_Mask<bool> ret)
        {
            if (rhs == null) return;
            if (item.Relations.HasBeenSet == rhs.Relations.HasBeenSet)
            {
                if (item.Relations.HasBeenSet)
                {
                    ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>();
                    ret.Relations.Specific = item.Relations.SelectAgainst<Relation, MaskItem<bool, Relation_Mask<bool>>>(rhs.Relations, ((l, r) =>
                    {
                        MaskItem<bool, Relation_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => RelationCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.Relations.Overall);
                    ret.Relations.Overall = ret.Relations.Overall && ret.Relations.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>();
                    ret.Relations.Overall = true;
                }
            }
            else
            {
                ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>();
                ret.Relations.Overall = false;
            }
            ret.Flags = item.Flags_Property.Equals(rhs.Flags_Property, (l, r) => l == r);
            ret.CrimeGoldMultiplier = item.CrimeGoldMultiplier_Property.Equals(rhs.CrimeGoldMultiplier_Property, (l, r) => l == r);
            if (item.Ranks.HasBeenSet == rhs.Ranks.HasBeenSet)
            {
                if (item.Ranks.HasBeenSet)
                {
                    ret.Ranks = new MaskItem<bool, IEnumerable<MaskItem<bool, Rank_Mask<bool>>>>();
                    ret.Ranks.Specific = item.Ranks.SelectAgainst<Rank, MaskItem<bool, Rank_Mask<bool>>>(rhs.Ranks, ((l, r) =>
                    {
                        MaskItem<bool, Rank_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => RankCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.Ranks.Overall);
                    ret.Ranks.Overall = ret.Ranks.Overall && ret.Ranks.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Ranks = new MaskItem<bool, IEnumerable<MaskItem<bool, Rank_Mask<bool>>>>();
                    ret.Ranks.Overall = true;
                }
            }
            else
            {
                ret.Ranks = new MaskItem<bool, IEnumerable<MaskItem<bool, Rank_Mask<bool>>>>();
                ret.Ranks.Overall = false;
            }
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IFactionGetter item,
            string name = null,
            Faction_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IFactionGetter item,
            FileGeneration fg,
            string name = null,
            Faction_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Faction)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Faction)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Relations?.Overall ?? true)
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Relations)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.CrimeGoldMultiplier ?? true)
                {
                    fg.AppendLine($"CrimeGoldMultiplier => {item.CrimeGoldMultiplier}");
                }
                if (printMask?.Ranks?.Overall ?? true)
                {
                    fg.AppendLine("Ranks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Ranks)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IFactionGetter item,
            Faction_Mask<bool?> checkMask)
        {
            if (checkMask.Relations.Overall.HasValue && checkMask.Relations.Overall.Value != item.Relations.HasBeenSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_Property.HasBeenSet) return false;
            if (checkMask.CrimeGoldMultiplier.HasValue && checkMask.CrimeGoldMultiplier.Value != item.CrimeGoldMultiplier_Property.HasBeenSet) return false;
            if (checkMask.Ranks.Overall.HasValue && checkMask.Ranks.Overall.Value != item.Ranks.HasBeenSet) return false;
            return true;
        }

        public static Faction_Mask<bool> GetHasBeenSetMask(IFactionGetter item)
        {
            var ret = new Faction_Mask<bool>();
            ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>(item.Relations.HasBeenSet, item.Relations.Select((i) => new MaskItem<bool, Relation_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Flags = item.Flags_Property.HasBeenSet;
            ret.CrimeGoldMultiplier = item.CrimeGoldMultiplier_Property.HasBeenSet;
            ret.Ranks = new MaskItem<bool, IEnumerable<MaskItem<bool, Rank_Mask<bool>>>>(item.Ranks.HasBeenSet, item.Ranks.Select((i) => new MaskItem<bool, Rank_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IFactionGetter item,
            bool doMasks,
            out Faction_ErrorMask errorMask,
            string name = null)
        {
            Faction_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Faction_ErrorMask()) : default(Func<Faction_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IFactionGetter item,
            bool doMasks,
            Func<Faction_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Faction"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Faction");
                    }
                    if (item.Relations.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>> subMask;
                        ListXmlTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Relations),
                            item: item.Relations,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (Relation subItem, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<Relation, Relation_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: doMasks,
                                    mask: out Relation_ErrorMask loquiMask);
                                listSubMask = loquiMask == null ? null : new MaskItem<Exception, Relation_ErrorMask>(null, loquiMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Faction_FieldIndex.Relations,
                            subMask);
                    }
                    if (item.Flags_Property.HasBeenSet)
                    {
                        Exception subMask;
                        EnumXmlTranslation<Faction.FactionFlag>.Instance.Write(
                            writer,
                            nameof(item.Flags),
                            item.Flags,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Faction_FieldIndex.Flags,
                            subMask);
                    }
                    if (item.CrimeGoldMultiplier_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.CrimeGoldMultiplier),
                            item.CrimeGoldMultiplier,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Faction_FieldIndex.CrimeGoldMultiplier,
                            subMask);
                    }
                    if (item.Ranks.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>> subMask;
                        ListXmlTranslation<Rank, MaskItem<Exception, Rank_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Ranks),
                            item: item.Ranks,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (Rank subItem, bool listDoMasks, out MaskItem<Exception, Rank_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<Rank, Rank_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: doMasks,
                                    mask: out Rank_ErrorMask loquiMask);
                                listSubMask = loquiMask == null ? null : new MaskItem<Exception, Rank_ErrorMask>(null, loquiMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Faction_FieldIndex.Ranks,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IFactionGetter item,
            bool doMasks,
            out Faction_ErrorMask errorMask)
        {
            Faction_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Faction_ErrorMask()) : default(Func<Faction_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IFactionGetter item,
            bool doMasks,
            Func<Faction_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Faction_Registration.FACT_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            IFactionGetter item,
            MutagenWriter writer,
            bool doMasks,
            Func<Faction_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                doMasks: doMasks,
                errorMask: errorMask);
            {
                MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>> subMask;
                Mutagen.Binary.ListBinaryTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.Write(
                    writer: writer,
                    item: item.Relations,
                    doMasks: doMasks,
                    maskObj: out subMask,
                    transl: (Relation subItem, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                    {
                        LoquiBinaryTranslation<Relation, Relation_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: subItem,
                            doMasks: doMasks,
                            mask: out listSubMask);
                    }
                    );
                ErrorMask.HandleErrorMask(
                    errorMask,
                    doMasks,
                    (int)Faction_FieldIndex.Relations,
                    subMask);
            }
            {
                Exception subMask;
                Mutagen.Binary.EnumBinaryTranslation<Faction.FactionFlag>.Instance.Write(
                    writer,
                    item.Flags,
                    doMasks: doMasks,
                    length: new ContentLength(1),
                    errorMask: out subMask,
                    header: Faction_Registration.DATA_HEADER,
                    nullable: false);
                ErrorMask.HandleErrorMask(
                    errorMask,
                    doMasks,
                    (int)Faction_FieldIndex.Flags,
                    subMask);
            }
            {
                Exception subMask;
                Mutagen.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CrimeGoldMultiplier,
                    doMasks: doMasks,
                    errorMask: out subMask,
                    header: Faction_Registration.CNAM_HEADER,
                    nullable: false);
                ErrorMask.HandleErrorMask(
                    errorMask,
                    doMasks,
                    (int)Faction_FieldIndex.CrimeGoldMultiplier,
                    subMask);
            }
            {
                MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>> subMask;
                Mutagen.Binary.ListBinaryTranslation<Rank, MaskItem<Exception, Rank_ErrorMask>>.Instance.Write(
                    writer: writer,
                    item: item.Ranks,
                    doMasks: doMasks,
                    maskObj: out subMask,
                    transl: (Rank subItem, bool listDoMasks, out MaskItem<Exception, Rank_ErrorMask> listSubMask) =>
                    {
                        LoquiBinaryTranslation<Rank, Rank_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: subItem,
                            doMasks: doMasks,
                            mask: out listSubMask);
                    }
                    );
                ErrorMask.HandleErrorMask(
                    errorMask,
                    doMasks,
                    (int)Faction_FieldIndex.Ranks,
                    subMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Faction_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Faction_Mask<T>>
    {
        #region Ctors
        public Faction_Mask()
        {
        }

        public Faction_Mask(T initialValue)
        {
            this.Relations = new MaskItem<T, IEnumerable<MaskItem<T, Relation_Mask<T>>>>(initialValue, null);
            this.Flags = initialValue;
            this.CrimeGoldMultiplier = initialValue;
            this.Ranks = new MaskItem<T, IEnumerable<MaskItem<T, Rank_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItem<T, Relation_Mask<T>>>> Relations;
        public T Flags;
        public T CrimeGoldMultiplier;
        public MaskItem<T, IEnumerable<MaskItem<T, Rank_Mask<T>>>> Ranks;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Faction_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Faction_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Relations, rhs.Relations)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.CrimeGoldMultiplier, rhs.CrimeGoldMultiplier)) return false;
            if (!object.Equals(this.Ranks, rhs.Ranks)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Relations?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.CrimeGoldMultiplier?.GetHashCode());
            ret = ret.CombineHashCode(this.Ranks?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Relations != null)
            {
                if (!eval(this.Relations.Overall)) return false;
                if (Relations.Specific != null)
                {
                    foreach (var item in Relations.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            if (!eval(this.Flags)) return false;
            if (!eval(this.CrimeGoldMultiplier)) return false;
            if (Ranks != null)
            {
                if (!eval(this.Ranks.Overall)) return false;
                if (Ranks.Specific != null)
                {
                    foreach (var item in Ranks.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public new Faction_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Faction_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Faction_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (Relations != null)
            {
                obj.Relations = new MaskItem<R, IEnumerable<MaskItem<R, Relation_Mask<R>>>>();
                obj.Relations.Overall = eval(this.Relations.Overall);
                if (Relations.Specific != null)
                {
                    List<MaskItem<R, Relation_Mask<R>>> l = new List<MaskItem<R, Relation_Mask<R>>>();
                    obj.Relations.Specific = l;
                    foreach (var item in Relations.Specific)
                    {
                        MaskItem<R, Relation_Mask<R>> mask = default(MaskItem<R, Relation_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Relation_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Flags = eval(this.Flags);
            obj.CrimeGoldMultiplier = eval(this.CrimeGoldMultiplier);
            if (Ranks != null)
            {
                obj.Ranks = new MaskItem<R, IEnumerable<MaskItem<R, Rank_Mask<R>>>>();
                obj.Ranks.Overall = eval(this.Ranks.Overall);
                if (Ranks.Specific != null)
                {
                    List<MaskItem<R, Rank_Mask<R>>> l = new List<MaskItem<R, Rank_Mask<R>>>();
                    obj.Ranks.Specific = l;
                    foreach (var item in Ranks.Specific)
                    {
                        MaskItem<R, Rank_Mask<R>> mask = default(MaskItem<R, Rank_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Rank_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Relations.Specific = null;
            this.Ranks.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Faction_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Faction_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Faction_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Relations?.Overall ?? true)
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Relations.Overall != null)
                        {
                            fg.AppendLine(Relations.Overall.ToString());
                        }
                        if (Relations.Specific != null)
                        {
                            foreach (var subItem in Relations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags.ToStringSafe()}");
                }
                if (printMask?.CrimeGoldMultiplier ?? true)
                {
                    fg.AppendLine($"CrimeGoldMultiplier => {CrimeGoldMultiplier.ToStringSafe()}");
                }
                if (printMask?.Ranks?.Overall ?? true)
                {
                    fg.AppendLine("Ranks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Ranks.Overall != null)
                        {
                            fg.AppendLine(Ranks.Overall.ToString());
                        }
                        if (Ranks.Specific != null)
                        {
                            foreach (var subItem in Ranks.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Faction_ErrorMask : NamedMajorRecord_ErrorMask
    {
        #region Members
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>> Relations;
        public Exception Flags;
        public Exception CrimeGoldMultiplier;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>> Ranks;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                    this.Relations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>(ex, null);
                    break;
                case Faction_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    this.CrimeGoldMultiplier = ex;
                    break;
                case Faction_FieldIndex.Ranks:
                    this.Ranks = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Faction_FieldIndex enu = (Faction_FieldIndex)index;
            switch (enu)
            {
                case Faction_FieldIndex.Relations:
                    this.Relations = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>)obj;
                    break;
                case Faction_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case Faction_FieldIndex.CrimeGoldMultiplier:
                    this.CrimeGoldMultiplier = (Exception)obj;
                    break;
                case Faction_FieldIndex.Ranks:
                    this.Ranks = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Faction_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            if (Relations != null)
            {
                fg.AppendLine("Relations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Relations.Overall != null)
                    {
                        fg.AppendLine(Relations.Overall.ToString());
                    }
                    if (Relations.Specific != null)
                    {
                        foreach (var subItem in Relations.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem.ToString(fg);
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (Flags != null)
            {
                fg.AppendLine($"Flags => {Flags.ToStringSafe()}");
            }
            if (CrimeGoldMultiplier != null)
            {
                fg.AppendLine($"CrimeGoldMultiplier => {CrimeGoldMultiplier.ToStringSafe()}");
            }
            if (Ranks != null)
            {
                fg.AppendLine("Ranks =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Ranks.Overall != null)
                    {
                        fg.AppendLine(Ranks.Overall.ToString());
                    }
                    if (Ranks.Specific != null)
                    {
                        foreach (var subItem in Ranks.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem.ToString(fg);
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
        }
        #endregion

        #region Combine
        public Faction_ErrorMask Combine(Faction_ErrorMask rhs)
        {
            var ret = new Faction_ErrorMask();
            ret.Relations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>(this.Relations.Overall.Combine(rhs.Relations.Overall), new List<MaskItem<Exception, Relation_ErrorMask>>(this.Relations.Specific.And(rhs.Relations.Specific)));
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.CrimeGoldMultiplier = this.CrimeGoldMultiplier.Combine(rhs.CrimeGoldMultiplier);
            ret.Ranks = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Rank_ErrorMask>>>(this.Ranks.Overall.Combine(rhs.Ranks.Overall), new List<MaskItem<Exception, Rank_ErrorMask>>(this.Ranks.Specific.And(rhs.Ranks.Specific)));
            return ret;
        }
        public static Faction_ErrorMask Combine(Faction_ErrorMask lhs, Faction_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Faction_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, Relation_CopyMask> Relations;
        public bool Flags;
        public bool CrimeGoldMultiplier;
        public MaskItem<CopyOption, Rank_CopyMask> Ranks;
        #endregion

    }
    #endregion




    #endregion

}
