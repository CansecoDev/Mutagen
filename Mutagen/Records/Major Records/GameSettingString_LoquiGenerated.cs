/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class GameSettingString : GameSetting, IGameSettingString, ILoquiObjectSetter, IEquatable<GameSettingString>
    {
        ILoquiRegistration ILoquiObject.Registration => GameSettingString_Registration.Instance;
        public new static GameSettingString_Registration Registration => GameSettingString_Registration.Instance;

        #region Ctor
        public GameSettingString()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        protected readonly INotifyingItem<String> _Data = NotifyingItem.Factory<String>(markAsSet: false);
        public INotifyingItem<String> Data_Property => _Data;
        public String Data
        {
            get => this._Data.Item;
            set => this._Data.Set(value);
        }
        INotifyingItem<String> IGameSettingString.Data_Property => this.Data_Property;
        INotifyingItemGetter<String> IGameSettingStringGetter.Data_Property => this.Data_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => GameSettingStringCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => GameSettingStringCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => GameSettingStringCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            GameSettingStringCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return GameSettingStringCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            GameSettingString_Mask<bool> printMask = null)
        {
            return GameSettingStringCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            GameSettingStringCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new GameSettingString_Mask<bool> GetHasBeenSetMask()
        {
            return GameSettingStringCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is GameSettingString rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(GameSettingString rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Data_Property.HasBeenSet != rhs.Data_Property.HasBeenSet) return false;
            if (Data_Property.HasBeenSet)
            {
                if (!object.Equals(Data, rhs.Data)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Data_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Data).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static GameSettingString Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static GameSettingString Create_XML(
            XElement root,
            out GameSettingString_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static GameSettingString Create_XML(
            XElement root,
            bool doMasks,
            out GameSettingString_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (GameSettingString Object, GameSettingString_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            GameSettingString_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new GameSettingString_ErrorMask()) : default(Func<GameSettingString_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static GameSettingString Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static GameSettingString Create_XML(
            string path,
            out GameSettingString_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static GameSettingString Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static GameSettingString Create_XML(
            Stream stream,
            out GameSettingString_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<GameSettingString, GameSettingString_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out GameSettingString_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<GameSettingString, GameSettingString_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out GameSettingString_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out GameSettingString_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out GameSetting_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out GameSettingString_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out GameSettingString_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out GameSettingString_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (GameSettingString_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out GameSettingString_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out GameSettingString_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            GameSettingStringCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static GameSettingString Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<GameSettingString_ErrorMask> errorMask)
        {
            var ret = new GameSettingString();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            GameSettingString item,
            XElement root,
            string name,
            bool doMasks,
            Func<GameSettingString_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Data":
                    {
                        Exception subMask;
                        var tryGet = StringXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Data.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)GameSettingString_FieldIndex.Data,
                            subMask);
                    }
                    break;
                default:
                    GameSetting.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static GameSettingString Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static GameSettingString Create_Binary(
            MutagenFrame frame,
            out GameSettingString_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static GameSettingString Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out GameSettingString_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (GameSettingString Object, GameSettingString_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            GameSettingString_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new GameSettingString_ErrorMask()) : default(Func<GameSettingString_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static GameSettingString Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static GameSettingString Create_Binary(
            string path,
            out GameSettingString_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static GameSettingString Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static GameSettingString Create_Binary(
            Stream stream,
            out GameSettingString_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<GameSettingString, GameSettingString_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out GameSettingString_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<GameSettingString, GameSettingString_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out GameSettingString_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out GameSettingString_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out GameSetting_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out GameSettingString_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out GameSettingString_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out GameSettingString_ErrorMask errorMask)
        {
            errorMask = (GameSettingString_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out GameSettingString_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out GameSettingString_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            GameSettingStringCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static GameSettingString Create_Binary_Internal(
            MutagenFrame frame,
            bool doMasks,
            Func<GameSettingString_ErrorMask> errorMask)
        {
            var ret = new GameSettingString();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseRecord(
                    frame,
                    GameSettingString_Registration.GMST_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    while (!frame.Complete)
                    {
                        if (!Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            doMasks: doMasks,
                            errorMask: errorMask)) break;
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            GameSettingString item,
            MutagenFrame frame,
            bool doMasks,
            Func<GameSettingString_ErrorMask> errorMask)
        {
            GameSetting.Fill_Binary_Structs(
                item: item,
                frame: frame,
                doMasks: doMasks,
                errorMask: errorMask);
        }

        protected static bool Fill_Binary_RecordTypes(
            GameSettingString item,
            MutagenFrame frame,
            bool doMasks,
            Func<GameSettingString_ErrorMask> errorMask)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                frame: frame,
                contentLength: out var contentLength);
            switch (nextRecordType.Type)
            {
                case "DATA":
                {
                    Exception subMask;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var tryGet = Mutagen.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        doMasks: doMasks,
                        errorMask: out subMask);
                    item._Data.SetIfSucceeded(tryGet);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        doMasks,
                        (int)GameSettingString_FieldIndex.Data,
                        subMask);
                }
                break;
                default:
                    GameSetting.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
            return true;
        }

        #endregion

        public GameSettingString Copy(
            GameSettingString_CopyMask copyMask = null,
            IGameSettingStringGetter def = null)
        {
            return GameSettingString.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static GameSettingString Copy(
            IGameSettingString item,
            GameSettingString_CopyMask copyMask = null,
            IGameSettingStringGetter def = null)
        {
            GameSettingString ret;
            if (item.GetType().Equals(typeof(GameSettingString)))
            {
                ret = new GameSettingString();
            }
            else
            {
                ret = (GameSettingString)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            GameSettingString_CopyMask copyMask = null,
            IGameSettingStringGetter def = null)
            where CopyType : class, IGameSettingString
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(GameSettingString)))
            {
                ret = new GameSettingString() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static GameSettingString Copy_ToLoqui(
            IGameSettingStringGetter item,
            GameSettingString_CopyMask copyMask = null,
            IGameSettingStringGetter def = null)
        {
            var ret = new GameSettingString();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    this._Data.Set(
                        (String)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            GameSettingStringCommon.Clear(this, cmds);
        }


        public new static GameSettingString Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new GameSettingString();
            foreach (var pair in fields)
            {
                CopyInInternal_GameSettingString(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_GameSettingString(GameSettingString obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out GameSettingString_FieldIndex enu))
            {
                CopyInInternal_GameSetting(obj, pair);
            }
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    obj._Data.Set(
                        (String)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, GameSettingString obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IGameSettingString : IGameSettingStringGetter, IGameSetting, ILoquiClass<IGameSettingString, IGameSettingStringGetter>, ILoquiClass<GameSettingString, IGameSettingStringGetter>
    {
        new String Data { get; set; }
        new INotifyingItem<String> Data_Property { get; }

    }

    public interface IGameSettingStringGetter : IGameSettingGetter
    {
        #region Data
        String Data { get; }
        INotifyingItemGetter<String> Data_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum GameSettingString_FieldIndex
    {
        Data = 5,
    }
    #endregion

    #region Registration
    public class GameSettingString_Registration : ILoquiRegistration
    {
        public static readonly GameSettingString_Registration Instance = new GameSettingString_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 10,
            version: 0);

        public const string GUID = "aa9c63ce-a122-4644-8610-646ebc7d4f13";

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(GameSettingString_Mask<>);

        public static readonly Type ErrorMaskType = typeof(GameSettingString_ErrorMask);

        public static readonly Type ClassType = typeof(GameSettingString);

        public static readonly Type GetterType = typeof(IGameSettingStringGetter);

        public static readonly Type SetterType = typeof(IGameSettingString);

        public static readonly Type CommonType = typeof(GameSettingStringCommon);

        public const string FullName = "Mutagen.GameSettingString";

        public const string Name = "GameSettingString";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DATA":
                    return (ushort)GameSettingString_FieldIndex.Data;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return false;
                default:
                    return GameSetting_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return false;
                default:
                    return GameSetting_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return false;
                default:
                    return GameSetting_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return "Data";
                default:
                    return GameSetting_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return false;
                default:
                    return GameSetting_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return false;
                default:
                    return GameSetting_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return typeof(String);
                default:
                    return GameSetting_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GMST_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class GameSettingStringCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IGameSettingString item,
            IGameSettingStringGetter rhs,
            GameSettingString_CopyMask copyMask = null,
            IGameSettingStringGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            GameSettingStringCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IGameSettingString item,
            IGameSettingStringGetter rhs,
            out GameSettingString_ErrorMask errorMask,
            GameSettingString_CopyMask copyMask = null,
            IGameSettingStringGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            GameSettingStringCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IGameSettingString item,
            IGameSettingStringGetter rhs,
            IGameSettingStringGetter def,
            bool doErrorMask,
            out GameSettingString_ErrorMask errorMask,
            GameSettingString_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            GameSettingString_ErrorMask retErrorMask = null;
            Func<GameSettingString_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new GameSettingString_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IGameSettingString item,
            IGameSettingStringGetter rhs,
            IGameSettingStringGetter def,
            bool doErrorMask,
            Func<GameSettingString_ErrorMask> errorMask,
            GameSettingString_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            GameSettingCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doErrorMask,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Data ?? true)
            {
                try
                {
                    item.Data_Property.SetToWithDefault(
                        rhs.Data_Property,
                        def?.Data_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)GameSettingString_FieldIndex.Data, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IGameSettingString obj,
            NotifyingFireParameters? cmds = null)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    obj.Data_Property.HasBeenSet = on;
                    break;
                default:
                    GameSettingCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IGameSettingString obj,
            NotifyingUnsetParameters? cmds = null)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    obj.Data_Property.Unset(cmds);
                    break;
                default:
                    GameSettingCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IGameSettingString obj)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return obj.Data_Property.HasBeenSet;
                default:
                    return GameSettingCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IGameSettingStringGetter obj)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    return obj.Data;
                default:
                    return GameSettingCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IGameSettingString item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Data_Property.Unset(cmds.ToUnsetParams());
        }

        public static GameSettingString_Mask<bool> GetEqualsMask(
            this IGameSettingStringGetter item,
            IGameSettingStringGetter rhs)
        {
            var ret = new GameSettingString_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IGameSettingStringGetter item,
            IGameSettingStringGetter rhs,
            GameSettingString_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Data = item.Data_Property.Equals(rhs.Data_Property, (l, r) => object.Equals(l, r));
            GameSettingCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IGameSettingStringGetter item,
            string name = null,
            GameSettingString_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IGameSettingStringGetter item,
            FileGeneration fg,
            string name = null,
            GameSettingString_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(GameSettingString)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(GameSettingString)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Data ?? true)
                {
                    fg.AppendLine($"Data => {item.Data}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IGameSettingStringGetter item,
            GameSettingString_Mask<bool?> checkMask)
        {
            if (checkMask.Data.HasValue && checkMask.Data.Value != item.Data_Property.HasBeenSet) return false;
            return true;
        }

        public static GameSettingString_Mask<bool> GetHasBeenSetMask(IGameSettingStringGetter item)
        {
            var ret = new GameSettingString_Mask<bool>();
            ret.Data = item.Data_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IGameSettingStringGetter item,
            bool doMasks,
            out GameSettingString_ErrorMask errorMask,
            string name = null)
        {
            GameSettingString_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new GameSettingString_ErrorMask()) : default(Func<GameSettingString_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IGameSettingStringGetter item,
            bool doMasks,
            Func<GameSettingString_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.GameSettingString"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.GameSettingString");
                    }
                    if (item.Data_Property.HasBeenSet)
                    {
                        Exception subMask;
                        StringXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Data),
                            item.Data,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)GameSettingString_FieldIndex.Data,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IGameSettingStringGetter item,
            bool doMasks,
            out GameSettingString_ErrorMask errorMask)
        {
            GameSettingString_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new GameSettingString_ErrorMask()) : default(Func<GameSettingString_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IGameSettingStringGetter item,
            bool doMasks,
            Func<GameSettingString_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: GameSettingString_Registration.GMST_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            IGameSettingStringGetter item,
            MutagenWriter writer,
            bool doMasks,
            Func<GameSettingString_ErrorMask> errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                doMasks: doMasks,
                errorMask: errorMask);
            Mutagen.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Data,
                doMasks: doMasks,
                fieldIndex: (int)GameSettingString_FieldIndex.Data,
                errorMask: errorMask,
                header: GameSettingString_Registration.DATA_HEADER,
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class GameSettingString_Mask<T> : GameSetting_Mask<T>, IMask<T>, IEquatable<GameSettingString_Mask<T>>
    {
        #region Ctors
        public GameSettingString_Mask()
        {
        }

        public GameSettingString_Mask(T initialValue)
        {
            this.Data = initialValue;
        }
        #endregion

        #region Members
        public T Data;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is GameSettingString_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(GameSettingString_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Data, rhs.Data)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Data?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Data)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new GameSettingString_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new GameSettingString_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(GameSettingString_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Data = eval(this.Data);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(GameSettingString_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, GameSettingString_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(GameSettingString_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Data ?? true)
                {
                    fg.AppendLine($"Data => {Data.ToStringSafe()}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class GameSettingString_ErrorMask : GameSetting_ErrorMask
    {
        #region Members
        public Exception Data;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    this.Data = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            GameSettingString_FieldIndex enu = (GameSettingString_FieldIndex)index;
            switch (enu)
            {
                case GameSettingString_FieldIndex.Data:
                    this.Data = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("GameSettingString_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            if (Data != null)
            {
                fg.AppendLine($"Data => {Data.ToStringSafe()}");
            }
        }
        #endregion

        #region Combine
        public GameSettingString_ErrorMask Combine(GameSettingString_ErrorMask rhs)
        {
            var ret = new GameSettingString_ErrorMask();
            ret.Data = this.Data.Combine(rhs.Data);
            return ret;
        }
        public static GameSettingString_ErrorMask Combine(GameSettingString_ErrorMask lhs, GameSettingString_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class GameSettingString_CopyMask : GameSetting_CopyMask
    {
        #region Members
        public bool Data;
        #endregion

    }
    #endregion




    #endregion

}
