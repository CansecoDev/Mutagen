/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using Mutagen;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class Hair : NamedMajorRecord, IHair, ILoquiObjectSetter, IEquatable<Hair>
    {
        ILoquiRegistration ILoquiObject.Registration => Hair_Registration.Instance;
        public new static Hair_Registration Registration => Hair_Registration.Instance;

        #region Ctor
        public Hair()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        private readonly INotifyingItem<Model> _Model = new NotifyingItem<Model>();
        public INotifyingItem<Model> Model_Property => this._Model;
        Model IHairGetter.Model => this.Model;
        public Model Model { get => _Model.Item; set => _Model.Item = value; }
        INotifyingItem<Model> IHair.Model_Property => this.Model_Property;
        INotifyingItemGetter<Model> IHairGetter.Model_Property => this.Model_Property;
        #endregion
        #region Icon
        protected readonly INotifyingItem<FilePath> _Icon = NotifyingItem.Factory<FilePath>(markAsSet: false);
        public INotifyingItem<FilePath> Icon_Property => _Icon;
        public FilePath Icon
        {
            get => this._Icon.Item;
            set => this._Icon.Set(value);
        }
        INotifyingItem<FilePath> IHair.Icon_Property => this.Icon_Property;
        INotifyingItemGetter<FilePath> IHairGetter.Icon_Property => this.Icon_Property;
        #endregion
        #region Flags
        protected readonly INotifyingItem<Hair.HairFlag> _Flags = NotifyingItem.Factory<Hair.HairFlag>(markAsSet: false);
        public INotifyingItem<Hair.HairFlag> Flags_Property => _Flags;
        public Hair.HairFlag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        INotifyingItem<Hair.HairFlag> IHair.Flags_Property => this.Flags_Property;
        INotifyingItemGetter<Hair.HairFlag> IHairGetter.Flags_Property => this.Flags_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => HairCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => HairCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => HairCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            HairCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return HairCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Hair_Mask<bool> printMask = null)
        {
            return HairCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            HairCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new Hair_Mask<bool> GetHasBeenSetMask()
        {
            return HairCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Hair rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Hair rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Model_Property.HasBeenSet != rhs.Model_Property.HasBeenSet) return false;
            if (Model_Property.HasBeenSet)
            {
                if (!object.Equals(Model, rhs.Model)) return false;
            }
            if (Icon_Property.HasBeenSet != rhs.Icon_Property.HasBeenSet) return false;
            if (Icon_Property.HasBeenSet)
            {
                if (!object.Equals(Icon, rhs.Icon)) return false;
            }
            if (Flags_Property.HasBeenSet != rhs.Flags_Property.HasBeenSet) return false;
            if (Flags_Property.HasBeenSet)
            {
                if (Flags != rhs.Flags) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Model_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Model).CombineHashCode(ret);
            }
            if (Icon_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Icon).CombineHashCode(ret);
            }
            if (Flags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Hair Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Hair Create_XML(
            XElement root,
            out Hair_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Hair Create_XML(
            XElement root,
            bool doMasks,
            out Hair_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Hair Object, Hair_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Hair_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Hair_ErrorMask()) : default(Func<Hair_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Hair Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Hair Create_XML(
            string path,
            out Hair_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Hair Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Hair Create_XML(
            Stream stream,
            out Hair_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Hair, Hair_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Hair_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Hair, Hair_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Hair_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Hair_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Hair_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Hair_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Hair_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Hair_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Hair_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Hair_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            HairCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Hair Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<Hair_ErrorMask> errorMask)
        {
            var ret = new Hair();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Hair item,
            XElement root,
            string name,
            bool doMasks,
            Func<Hair_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Model":
                    {
                        MaskItem<Exception, Model_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<Model, Model_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Model.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Hair_FieldIndex.Model,
                            subMask);
                    }
                    break;
                case "Icon":
                    {
                        Exception subMask;
                        var tryGet = FilePathXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Icon.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Hair_FieldIndex.Icon,
                            subMask);
                    }
                    break;
                case "Flags":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<Hair.HairFlag>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Flags.SetIfSucceeded(tryGet.Bubble((o) => o.Value));
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Hair_FieldIndex.Flags,
                            subMask);
                    }
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Hair Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Hair Create_Binary(
            MutagenFrame frame,
            out Hair_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Hair Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Hair_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Hair Object, Hair_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            Hair_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Hair_ErrorMask()) : default(Func<Hair_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Hair Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Hair Create_Binary(
            string path,
            out Hair_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Hair Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Hair Create_Binary(
            Stream stream,
            out Hair_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Hair, Hair_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out Hair_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Hair, Hair_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out Hair_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Hair_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Hair_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Hair_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Hair_ErrorMask errorMask)
        {
            errorMask = (Hair_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Hair_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Hair_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            HairCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Hair Create_Binary_Internal(
            MutagenFrame frame,
            bool doMasks,
            Func<Hair_ErrorMask> errorMask)
        {
            var ret = new Hair();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseRecord(
                    frame,
                    Hair_Registration.HAIR_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    while (!frame.Complete)
                    {
                        if (!Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            doMasks: doMasks,
                            errorMask: errorMask)) break;
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            Hair item,
            MutagenFrame frame,
            bool doMasks,
            Func<Hair_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                doMasks: doMasks,
                errorMask: errorMask);
        }

        protected static bool Fill_Binary_RecordTypes(
            Hair item,
            MutagenFrame frame,
            bool doMasks,
            Func<Hair_ErrorMask> errorMask)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                frame: frame,
                contentLength: out var contentLength);
            switch (nextRecordType.Type)
            {
                case "MODL":
                    item._Model.SetIfSucceeded(LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        doMasks: doMasks,
                        fieldIndex: (int)Hair_FieldIndex.Model,
                        errorMask: errorMask));
                    break;
                case "ICON":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var tryGet = Mutagen.Binary.FilePathBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        doMasks: doMasks,
                        fieldIndex: (int)Hair_FieldIndex.Icon,
                        errorMask: errorMask);
                    item._Icon.SetIfSucceeded(tryGet);
                    break;
                case "DATA":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var FlagstryGet = Mutagen.Binary.EnumBinaryTranslation<Hair.HairFlag>.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)Hair_FieldIndex.Flags,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    item._Flags.SetIfSucceeded(FlagstryGet);
                    break;
                default:
                    NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
            return true;
        }

        #endregion

        public Hair Copy(
            Hair_CopyMask copyMask = null,
            IHairGetter def = null)
        {
            return Hair.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Hair Copy(
            IHair item,
            Hair_CopyMask copyMask = null,
            IHairGetter def = null)
        {
            Hair ret;
            if (item.GetType().Equals(typeof(Hair)))
            {
                ret = new Hair();
            }
            else
            {
                ret = (Hair)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Hair_CopyMask copyMask = null,
            IHairGetter def = null)
            where CopyType : class, IHair
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Hair)))
            {
                ret = new Hair() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Hair Copy_ToLoqui(
            IHairGetter item,
            Hair_CopyMask copyMask = null,
            IHairGetter def = null)
        {
            var ret = new Hair();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                    this._Model.Set(
                        (Model)obj,
                        cmds);
                    break;
                case Hair_FieldIndex.Icon:
                    this._Icon.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                case Hair_FieldIndex.Flags:
                    this._Flags.Set(
                        (Hair.HairFlag)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            HairCommon.Clear(this, cmds);
        }


        public new static Hair Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Hair();
            foreach (var pair in fields)
            {
                CopyInInternal_Hair(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Hair(Hair obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Hair_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                    obj._Model.Set(
                        (Model)pair.Value,
                        null);
                    break;
                case Hair_FieldIndex.Icon:
                    obj._Icon.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                case Hair_FieldIndex.Flags:
                    obj._Flags.Set(
                        (Hair.HairFlag)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Hair obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IHair : IHairGetter, INamedMajorRecord, ILoquiClass<IHair, IHairGetter>, ILoquiClass<Hair, IHairGetter>
    {
        new Model Model { get; set; }
        new INotifyingItem<Model> Model_Property { get; }

        new FilePath Icon { get; set; }
        new INotifyingItem<FilePath> Icon_Property { get; }

        new Hair.HairFlag Flags { get; set; }
        new INotifyingItem<Hair.HairFlag> Flags_Property { get; }

    }

    public interface IHairGetter : INamedMajorRecordGetter
    {
        #region Model
        Model Model { get; }
        INotifyingItemGetter<Model> Model_Property { get; }

        #endregion
        #region Icon
        FilePath Icon { get; }
        INotifyingItemGetter<FilePath> Icon_Property { get; }

        #endregion
        #region Flags
        Hair.HairFlag Flags { get; }
        INotifyingItemGetter<Hair.HairFlag> Flags_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum Hair_FieldIndex
    {
        Model = 6,
        Icon = 7,
        Flags = 8,
    }
    #endregion

    #region Registration
    public class Hair_Registration : ILoquiRegistration
    {
        public static readonly Hair_Registration Instance = new Hair_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 21,
            version: 0);

        public const string GUID = "c1955ace-52b8-40df-8356-8c42d9dc37eb";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Hair_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Hair_ErrorMask);

        public static readonly Type ClassType = typeof(Hair);

        public static readonly Type GetterType = typeof(IHairGetter);

        public static readonly Type SetterType = typeof(IHair);

        public static readonly Type CommonType = typeof(HairCommon);

        public const string FullName = "Mutagen.Hair";

        public const string Name = "Hair";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Hair_FieldIndex.Model;
                case "ICON":
                    return (ushort)Hair_FieldIndex.Icon;
                case "FLAGS":
                    return (ushort)Hair_FieldIndex.Flags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                case Hair_FieldIndex.Icon:
                case Hair_FieldIndex.Flags:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                    return true;
                case Hair_FieldIndex.Icon:
                case Hair_FieldIndex.Flags:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                case Hair_FieldIndex.Icon:
                case Hair_FieldIndex.Flags:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                    return "Model";
                case Hair_FieldIndex.Icon:
                    return "Icon";
                case Hair_FieldIndex.Flags:
                    return "Flags";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                case Hair_FieldIndex.Icon:
                case Hair_FieldIndex.Flags:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                case Hair_FieldIndex.Icon:
                case Hair_FieldIndex.Flags:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                    return typeof(Model);
                case Hair_FieldIndex.Icon:
                    return typeof(FilePath);
                case Hair_FieldIndex.Flags:
                    return typeof(Hair.HairFlag);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType HAIR_HEADER = new RecordType("HAIR");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = HAIR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class HairCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IHair item,
            IHairGetter rhs,
            Hair_CopyMask copyMask = null,
            IHairGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            HairCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IHair item,
            IHairGetter rhs,
            out Hair_ErrorMask errorMask,
            Hair_CopyMask copyMask = null,
            IHairGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            HairCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IHair item,
            IHairGetter rhs,
            IHairGetter def,
            bool doMasks,
            out Hair_ErrorMask errorMask,
            Hair_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            Hair_ErrorMask retErrorMask = null;
            Func<Hair_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Hair_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IHair item,
            IHairGetter rhs,
            IHairGetter def,
            bool doMasks,
            Func<Hair_ErrorMask> errorMask,
            Hair_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Model.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Model_Property.SetToWithDefault(
                        rhs.Model_Property,
                        def?.Model_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Model.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ModelCommon.CopyFieldsFrom(
                                        item: item.Model,
                                        rhs: rhs.Model,
                                        def: def?.Model,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<Model_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Model.Specific == null)
                                            {
                                                baseMask.Model = new MaskItem<Exception, Model_ErrorMask>(null, new Model_ErrorMask());
                                            }
                                            return baseMask.Model.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Model.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Model);
                                    return Model.Copy(
                                        r,
                                        copyMask?.Model?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Model?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Hair_FieldIndex.Model, ex);
                }
            }
            if (copyMask?.Icon ?? true)
            {
                try
                {
                    item.Icon_Property.SetToWithDefault(
                        rhs.Icon_Property,
                        def?.Icon_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Hair_FieldIndex.Icon, ex);
                }
            }
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.SetToWithDefault(
                        rhs.Flags_Property,
                        def?.Flags_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Hair_FieldIndex.Flags, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IHair obj,
            NotifyingFireParameters? cmds = null)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                    obj.Model_Property.HasBeenSet = on;
                    break;
                case Hair_FieldIndex.Icon:
                    obj.Icon_Property.HasBeenSet = on;
                    break;
                case Hair_FieldIndex.Flags:
                    obj.Flags_Property.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IHair obj,
            NotifyingUnsetParameters? cmds = null)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                    obj.Model_Property.Unset(cmds);
                    break;
                case Hair_FieldIndex.Icon:
                    obj.Icon_Property.Unset(cmds);
                    break;
                case Hair_FieldIndex.Flags:
                    obj.Flags_Property.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IHair obj)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                    return obj.Model_Property.HasBeenSet;
                case Hair_FieldIndex.Icon:
                    return obj.Icon_Property.HasBeenSet;
                case Hair_FieldIndex.Flags:
                    return obj.Flags_Property.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IHairGetter obj)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                    return obj.Model;
                case Hair_FieldIndex.Icon:
                    return obj.Icon;
                case Hair_FieldIndex.Flags:
                    return obj.Flags;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IHair item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Model_Property.Unset(cmds.ToUnsetParams());
            item.Icon_Property.Unset(cmds.ToUnsetParams());
            item.Flags_Property.Unset(cmds.ToUnsetParams());
        }

        public static Hair_Mask<bool> GetEqualsMask(
            this IHairGetter item,
            IHairGetter rhs)
        {
            var ret = new Hair_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IHairGetter item,
            IHairGetter rhs,
            Hair_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Model = item.Model_Property.LoquiEqualsHelper(rhs.Model_Property, (loqLhs, loqRhs) => ModelCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Icon = item.Icon_Property.Equals(rhs.Icon_Property, (l, r) => object.Equals(l, r));
            ret.Flags = item.Flags_Property.Equals(rhs.Flags_Property, (l, r) => l == r);
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IHairGetter item,
            string name = null,
            Hair_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IHairGetter item,
            FileGeneration fg,
            string name = null,
            Hair_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Hair)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Hair)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    item.Model?.ToString(fg, "Model");
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {item.Icon}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IHairGetter item,
            Hair_Mask<bool?> checkMask)
        {
            if (checkMask.Model.Overall.HasValue && checkMask.Model.Overall.Value != item.Model_Property.HasBeenSet) return false;
            if (checkMask.Model.Specific != null && (item.Model_Property.Item == null || !item.Model_Property.Item.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != item.Icon_Property.HasBeenSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_Property.HasBeenSet) return false;
            return true;
        }

        public static Hair_Mask<bool> GetHasBeenSetMask(IHairGetter item)
        {
            var ret = new Hair_Mask<bool>();
            ret.Model = new MaskItem<bool, Model_Mask<bool>>(item.Model_Property.HasBeenSet, ModelCommon.GetHasBeenSetMask(item.Model_Property.Item));
            ret.Icon = item.Icon_Property.HasBeenSet;
            ret.Flags = item.Flags_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IHairGetter item,
            bool doMasks,
            out Hair_ErrorMask errorMask,
            string name = null)
        {
            Hair_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Hair_ErrorMask()) : default(Func<Hair_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IHairGetter item,
            bool doMasks,
            Func<Hair_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Hair"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Hair");
                    }
                    if (item.Model_Property.HasBeenSet)
                    {
                        MaskItem<Exception, Model_ErrorMask> subMask;
                        LoquiXmlTranslation<IModelGetter, Model_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Model,
                            name: nameof(item.Model),
                            doMasks: doMasks,
                            mask: out Model_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, Model_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Hair_FieldIndex.Model,
                            subMask);
                    }
                    if (item.Icon_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FilePathXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Icon),
                            item.Icon,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Hair_FieldIndex.Icon,
                            subMask);
                    }
                    if (item.Flags_Property.HasBeenSet)
                    {
                        Exception subMask;
                        EnumXmlTranslation<Hair.HairFlag>.Instance.Write(
                            writer,
                            nameof(item.Flags),
                            item.Flags,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Hair_FieldIndex.Flags,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IHairGetter item,
            bool doMasks,
            out Hair_ErrorMask errorMask)
        {
            Hair_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Hair_ErrorMask()) : default(Func<Hair_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IHairGetter item,
            bool doMasks,
            Func<Hair_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Hair_Registration.HAIR_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            IHairGetter item,
            MutagenWriter writer,
            bool doMasks,
            Func<Hair_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                doMasks: doMasks,
                errorMask: errorMask);
            LoquiBinaryTranslation<Model, Model_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Model_Property,
                doMasks: doMasks,
                fieldIndex: (int)Hair_FieldIndex.Model,
                errorMask: errorMask);
            Mutagen.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Icon_Property,
                fieldIndex: (int)Hair_FieldIndex.Icon,
                doMasks: doMasks,
                errorMask: errorMask,
                header: Hair_Registration.ICON_HEADER,
                nullable: false);
            Mutagen.Binary.EnumBinaryTranslation<Hair.HairFlag>.Instance.Write(
                writer,
                item.Flags_Property,
                doMasks: doMasks,
                length: new ContentLength(1),
                fieldIndex: (int)Hair_FieldIndex.Flags,
                errorMask: errorMask,
                header: Hair_Registration.DATA_HEADER,
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Hair_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Hair_Mask<T>>
    {
        #region Ctors
        public Hair_Mask()
        {
        }

        public Hair_Mask(T initialValue)
        {
            this.Model = new MaskItem<T, Model_Mask<T>>(initialValue, new Model_Mask<T>(initialValue));
            this.Icon = initialValue;
            this.Flags = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, Model_Mask<T>> Model { get; set; }
        public T Icon;
        public T Flags;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Hair_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Hair_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Model, rhs.Model)) return false;
            if (!object.Equals(this.Icon, rhs.Icon)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Model?.GetHashCode());
            ret = ret.CombineHashCode(this.Icon?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (Model != null)
            {
                if (!eval(this.Model.Overall)) return false;
                if (Model.Specific != null && !Model.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Icon)) return false;
            if (!eval(this.Flags)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Hair_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Hair_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Hair_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            if (this.Model != null)
            {
                obj.Model = new MaskItem<R, Model_Mask<R>>();
                obj.Model.Overall = eval(this.Model.Overall);
                if (this.Model.Specific != null)
                {
                    obj.Model.Specific = this.Model.Specific.Translate(eval);
                }
            }
            obj.Icon = eval(this.Icon);
            obj.Flags = eval(this.Flags);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Hair_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Hair_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Hair_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Model?.Overall ?? true)
                {
                    Model.ToString(fg);
                }
                if (printMask?.Icon ?? true)
                {
                    fg.AppendLine($"Icon => {Icon.ToStringSafe()}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags.ToStringSafe()}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Hair_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<Hair_ErrorMask>
    {
        #region Members
        public MaskItem<Exception, Model_ErrorMask> Model;
        public Exception Icon;
        public Exception Flags;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                    this.Model = new MaskItem<Exception, Model_ErrorMask>(ex, null);
                    break;
                case Hair_FieldIndex.Icon:
                    this.Icon = ex;
                    break;
                case Hair_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Hair_FieldIndex enu = (Hair_FieldIndex)index;
            switch (enu)
            {
                case Hair_FieldIndex.Model:
                    this.Model = (MaskItem<Exception, Model_ErrorMask>)obj;
                    break;
                case Hair_FieldIndex.Icon:
                    this.Icon = (Exception)obj;
                    break;
                case Hair_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Hair_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            if (Model != null)
            {
                Model.ToString(fg);
            }
            if (Icon != null)
            {
                fg.AppendLine($"Icon => {Icon.ToStringSafe()}");
            }
            if (Flags != null)
            {
                fg.AppendLine($"Flags => {Flags.ToStringSafe()}");
            }
        }
        #endregion

        #region Combine
        public Hair_ErrorMask Combine(Hair_ErrorMask rhs)
        {
            var ret = new Hair_ErrorMask();
            ret.Model = new MaskItem<Exception, Model_ErrorMask>(this.Model.Overall.Combine(rhs.Model.Overall), ((IErrorMask<Model_ErrorMask>)this.Model.Specific).Combine(rhs.Model.Specific));
            ret.Icon = this.Icon.Combine(rhs.Icon);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            return ret;
        }
        public static Hair_ErrorMask Combine(Hair_ErrorMask lhs, Hair_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Hair_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, Model_CopyMask> Model;
        public bool Icon;
        public bool Flags;
        #endregion

    }
    #endregion




    #endregion

}
