/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class MagicData : IMagicData, ILoquiObjectSetter, IEquatable<MagicData>
    {
        ILoquiRegistration ILoquiObject.Registration => MagicData_Registration.Instance;
        public static MagicData_Registration Registration => MagicData_Registration.Instance;

        #region Ctor
        public MagicData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        protected readonly INotifyingItem<MagicEffect.MagicFlag> _Flags = NotifyingItem.Factory<MagicEffect.MagicFlag>(markAsSet: false);
        public INotifyingItem<MagicEffect.MagicFlag> Flags_Property => _Flags;
        public MagicEffect.MagicFlag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        INotifyingItem<MagicEffect.MagicFlag> IMagicData.Flags_Property => this.Flags_Property;
        INotifyingItemGetter<MagicEffect.MagicFlag> IMagicDataGetter.Flags_Property => this.Flags_Property;
        #endregion
        #region BaseCost
        protected readonly INotifyingItem<Single> _BaseCost = NotifyingItem.Factory<Single>(markAsSet: false);
        public INotifyingItem<Single> BaseCost_Property => _BaseCost;
        public Single BaseCost
        {
            get => this._BaseCost.Item;
            set => this._BaseCost.Set(value);
        }
        INotifyingItem<Single> IMagicData.BaseCost_Property => this.BaseCost_Property;
        INotifyingItemGetter<Single> IMagicDataGetter.BaseCost_Property => this.BaseCost_Property;
        #endregion
        #region Unused
        protected readonly INotifyingItem<Byte[]> _Unused = NotifyingItem.Factory<Byte[]>(
            markAsSet: false,
            noNullFallback: () => new byte[4]);
        public INotifyingItem<Byte[]> Unused_Property => _Unused;
        public Byte[] Unused
        {
            get => this._Unused.Item;
            set => this._Unused.Set(value);
        }
        INotifyingItem<Byte[]> IMagicData.Unused_Property => this.Unused_Property;
        INotifyingItemGetter<Byte[]> IMagicDataGetter.Unused_Property => this.Unused_Property;
        #endregion
        #region MagicSchool
        protected readonly INotifyingItem<MagicSchool> _MagicSchool = NotifyingItem.Factory<MagicSchool>(markAsSet: false);
        public INotifyingItem<MagicSchool> MagicSchool_Property => _MagicSchool;
        public MagicSchool MagicSchool
        {
            get => this._MagicSchool.Item;
            set => this._MagicSchool.Set(value);
        }
        INotifyingItem<MagicSchool> IMagicData.MagicSchool_Property => this.MagicSchool_Property;
        INotifyingItemGetter<MagicSchool> IMagicDataGetter.MagicSchool_Property => this.MagicSchool_Property;
        #endregion
        #region Resistance
        protected readonly INotifyingItem<Resistance> _Resistance = NotifyingItem.Factory<Resistance>(markAsSet: false);
        public INotifyingItem<Resistance> Resistance_Property => _Resistance;
        public Resistance Resistance
        {
            get => this._Resistance.Item;
            set => this._Resistance.Set(value);
        }
        INotifyingItem<Resistance> IMagicData.Resistance_Property => this.Resistance_Property;
        INotifyingItemGetter<Resistance> IMagicDataGetter.Resistance_Property => this.Resistance_Property;
        #endregion
        #region CounterEffectCount
        protected readonly INotifyingItem<UInt32> _CounterEffectCount = NotifyingItem.Factory<UInt32>(markAsSet: false);
        public INotifyingItem<UInt32> CounterEffectCount_Property => _CounterEffectCount;
        public UInt32 CounterEffectCount
        {
            get => this._CounterEffectCount.Item;
            set => this._CounterEffectCount.Set(value);
        }
        INotifyingItem<UInt32> IMagicData.CounterEffectCount_Property => this.CounterEffectCount_Property;
        INotifyingItemGetter<UInt32> IMagicDataGetter.CounterEffectCount_Property => this.CounterEffectCount_Property;
        #endregion
        #region Light
        protected readonly INotifyingItem<FormID> _Light = NotifyingItem.Factory<FormID>(markAsSet: false);
        public INotifyingItem<FormID> Light_Property => _Light;
        public FormID Light
        {
            get => this._Light.Item;
            set => this._Light.Set(value);
        }
        INotifyingItem<FormID> IMagicData.Light_Property => this.Light_Property;
        INotifyingItemGetter<FormID> IMagicDataGetter.Light_Property => this.Light_Property;
        #endregion
        #region ProjectileSpeed
        protected readonly INotifyingItem<Single> _ProjectileSpeed = NotifyingItem.Factory<Single>(markAsSet: false);
        public INotifyingItem<Single> ProjectileSpeed_Property => _ProjectileSpeed;
        public Single ProjectileSpeed
        {
            get => this._ProjectileSpeed.Item;
            set => this._ProjectileSpeed.Set(value);
        }
        INotifyingItem<Single> IMagicData.ProjectileSpeed_Property => this.ProjectileSpeed_Property;
        INotifyingItemGetter<Single> IMagicDataGetter.ProjectileSpeed_Property => this.ProjectileSpeed_Property;
        #endregion
        #region EffectShader
        protected readonly INotifyingItem<FormID> _EffectShader = NotifyingItem.Factory<FormID>(markAsSet: false);
        public INotifyingItem<FormID> EffectShader_Property => _EffectShader;
        public FormID EffectShader
        {
            get => this._EffectShader.Item;
            set => this._EffectShader.Set(value);
        }
        INotifyingItem<FormID> IMagicData.EffectShader_Property => this.EffectShader_Property;
        INotifyingItemGetter<FormID> IMagicDataGetter.EffectShader_Property => this.EffectShader_Property;
        #endregion
        #region EnchantEffect
        protected readonly INotifyingItem<FormID> _EnchantEffect = NotifyingItem.Factory<FormID>(markAsSet: false);
        public INotifyingItem<FormID> EnchantEffect_Property => _EnchantEffect;
        public FormID EnchantEffect
        {
            get => this._EnchantEffect.Item;
            set => this._EnchantEffect.Set(value);
        }
        INotifyingItem<FormID> IMagicData.EnchantEffect_Property => this.EnchantEffect_Property;
        INotifyingItemGetter<FormID> IMagicDataGetter.EnchantEffect_Property => this.EnchantEffect_Property;
        #endregion
        #region CastingSound
        protected readonly INotifyingItem<FormID> _CastingSound = NotifyingItem.Factory<FormID>(markAsSet: false);
        public INotifyingItem<FormID> CastingSound_Property => _CastingSound;
        public FormID CastingSound
        {
            get => this._CastingSound.Item;
            set => this._CastingSound.Set(value);
        }
        INotifyingItem<FormID> IMagicData.CastingSound_Property => this.CastingSound_Property;
        INotifyingItemGetter<FormID> IMagicDataGetter.CastingSound_Property => this.CastingSound_Property;
        #endregion
        #region BoltSound
        protected readonly INotifyingItem<FormID> _BoltSound = NotifyingItem.Factory<FormID>(markAsSet: false);
        public INotifyingItem<FormID> BoltSound_Property => _BoltSound;
        public FormID BoltSound
        {
            get => this._BoltSound.Item;
            set => this._BoltSound.Set(value);
        }
        INotifyingItem<FormID> IMagicData.BoltSound_Property => this.BoltSound_Property;
        INotifyingItemGetter<FormID> IMagicDataGetter.BoltSound_Property => this.BoltSound_Property;
        #endregion
        #region HitSound
        protected readonly INotifyingItem<FormID> _HitSound = NotifyingItem.Factory<FormID>(markAsSet: false);
        public INotifyingItem<FormID> HitSound_Property => _HitSound;
        public FormID HitSound
        {
            get => this._HitSound.Item;
            set => this._HitSound.Set(value);
        }
        INotifyingItem<FormID> IMagicData.HitSound_Property => this.HitSound_Property;
        INotifyingItemGetter<FormID> IMagicDataGetter.HitSound_Property => this.HitSound_Property;
        #endregion
        #region AreaSound
        protected readonly INotifyingItem<FormID> _AreaSound = NotifyingItem.Factory<FormID>(markAsSet: false);
        public INotifyingItem<FormID> AreaSound_Property => _AreaSound;
        public FormID AreaSound
        {
            get => this._AreaSound.Item;
            set => this._AreaSound.Set(value);
        }
        INotifyingItem<FormID> IMagicData.AreaSound_Property => this.AreaSound_Property;
        INotifyingItemGetter<FormID> IMagicDataGetter.AreaSound_Property => this.AreaSound_Property;
        #endregion
        #region ConstantEffectEnchantmentFactor
        protected readonly INotifyingItem<Single> _ConstantEffectEnchantmentFactor = NotifyingItem.Factory<Single>(markAsSet: false);
        public INotifyingItem<Single> ConstantEffectEnchantmentFactor_Property => _ConstantEffectEnchantmentFactor;
        public Single ConstantEffectEnchantmentFactor
        {
            get => this._ConstantEffectEnchantmentFactor.Item;
            set => this._ConstantEffectEnchantmentFactor.Set(value);
        }
        INotifyingItem<Single> IMagicData.ConstantEffectEnchantmentFactor_Property => this.ConstantEffectEnchantmentFactor_Property;
        INotifyingItemGetter<Single> IMagicDataGetter.ConstantEffectEnchantmentFactor_Property => this.ConstantEffectEnchantmentFactor_Property;
        #endregion
        #region ConstantEffectBarterFactor
        protected readonly INotifyingItem<Single> _ConstantEffectBarterFactor = NotifyingItem.Factory<Single>(markAsSet: false);
        public INotifyingItem<Single> ConstantEffectBarterFactor_Property => _ConstantEffectBarterFactor;
        public Single ConstantEffectBarterFactor
        {
            get => this._ConstantEffectBarterFactor.Item;
            set => this._ConstantEffectBarterFactor.Set(value);
        }
        INotifyingItem<Single> IMagicData.ConstantEffectBarterFactor_Property => this.ConstantEffectBarterFactor_Property;
        INotifyingItemGetter<Single> IMagicDataGetter.ConstantEffectBarterFactor_Property => this.ConstantEffectBarterFactor_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => MagicDataCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => MagicDataCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => MagicDataCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            MagicDataCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return MagicDataCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            MagicData_Mask<bool> printMask = null)
        {
            return MagicDataCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            MagicDataCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public MagicData_Mask<bool> GetHasBeenSetMask()
        {
            return MagicDataCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is MagicData rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MagicData rhs)
        {
            if (rhs == null) return false;
            if (Flags_Property.HasBeenSet != rhs.Flags_Property.HasBeenSet) return false;
            if (Flags_Property.HasBeenSet)
            {
                if (Flags != rhs.Flags) return false;
            }
            if (BaseCost_Property.HasBeenSet != rhs.BaseCost_Property.HasBeenSet) return false;
            if (BaseCost_Property.HasBeenSet)
            {
                if (BaseCost != rhs.BaseCost) return false;
            }
            if (Unused_Property.HasBeenSet != rhs.Unused_Property.HasBeenSet) return false;
            if (Unused_Property.HasBeenSet)
            {
                if (!Unused.EqualsFast(rhs.Unused)) return false;
            }
            if (MagicSchool_Property.HasBeenSet != rhs.MagicSchool_Property.HasBeenSet) return false;
            if (MagicSchool_Property.HasBeenSet)
            {
                if (MagicSchool != rhs.MagicSchool) return false;
            }
            if (Resistance_Property.HasBeenSet != rhs.Resistance_Property.HasBeenSet) return false;
            if (Resistance_Property.HasBeenSet)
            {
                if (Resistance != rhs.Resistance) return false;
            }
            if (CounterEffectCount_Property.HasBeenSet != rhs.CounterEffectCount_Property.HasBeenSet) return false;
            if (CounterEffectCount_Property.HasBeenSet)
            {
                if (CounterEffectCount != rhs.CounterEffectCount) return false;
            }
            if (Light_Property.HasBeenSet != rhs.Light_Property.HasBeenSet) return false;
            if (Light_Property.HasBeenSet)
            {
                if (Light != rhs.Light) return false;
            }
            if (ProjectileSpeed_Property.HasBeenSet != rhs.ProjectileSpeed_Property.HasBeenSet) return false;
            if (ProjectileSpeed_Property.HasBeenSet)
            {
                if (ProjectileSpeed != rhs.ProjectileSpeed) return false;
            }
            if (EffectShader_Property.HasBeenSet != rhs.EffectShader_Property.HasBeenSet) return false;
            if (EffectShader_Property.HasBeenSet)
            {
                if (EffectShader != rhs.EffectShader) return false;
            }
            if (EnchantEffect_Property.HasBeenSet != rhs.EnchantEffect_Property.HasBeenSet) return false;
            if (EnchantEffect_Property.HasBeenSet)
            {
                if (EnchantEffect != rhs.EnchantEffect) return false;
            }
            if (CastingSound_Property.HasBeenSet != rhs.CastingSound_Property.HasBeenSet) return false;
            if (CastingSound_Property.HasBeenSet)
            {
                if (CastingSound != rhs.CastingSound) return false;
            }
            if (BoltSound_Property.HasBeenSet != rhs.BoltSound_Property.HasBeenSet) return false;
            if (BoltSound_Property.HasBeenSet)
            {
                if (BoltSound != rhs.BoltSound) return false;
            }
            if (HitSound_Property.HasBeenSet != rhs.HitSound_Property.HasBeenSet) return false;
            if (HitSound_Property.HasBeenSet)
            {
                if (HitSound != rhs.HitSound) return false;
            }
            if (AreaSound_Property.HasBeenSet != rhs.AreaSound_Property.HasBeenSet) return false;
            if (AreaSound_Property.HasBeenSet)
            {
                if (AreaSound != rhs.AreaSound) return false;
            }
            if (ConstantEffectEnchantmentFactor_Property.HasBeenSet != rhs.ConstantEffectEnchantmentFactor_Property.HasBeenSet) return false;
            if (ConstantEffectEnchantmentFactor_Property.HasBeenSet)
            {
                if (ConstantEffectEnchantmentFactor != rhs.ConstantEffectEnchantmentFactor) return false;
            }
            if (ConstantEffectBarterFactor_Property.HasBeenSet != rhs.ConstantEffectBarterFactor_Property.HasBeenSet) return false;
            if (ConstantEffectBarterFactor_Property.HasBeenSet)
            {
                if (ConstantEffectBarterFactor != rhs.ConstantEffectBarterFactor) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Flags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            if (BaseCost_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(BaseCost).CombineHashCode(ret);
            }
            if (Unused_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Unused).CombineHashCode(ret);
            }
            if (MagicSchool_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MagicSchool).CombineHashCode(ret);
            }
            if (Resistance_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Resistance).CombineHashCode(ret);
            }
            if (CounterEffectCount_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(CounterEffectCount).CombineHashCode(ret);
            }
            if (Light_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Light).CombineHashCode(ret);
            }
            if (ProjectileSpeed_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ProjectileSpeed).CombineHashCode(ret);
            }
            if (EffectShader_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EffectShader).CombineHashCode(ret);
            }
            if (EnchantEffect_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EnchantEffect).CombineHashCode(ret);
            }
            if (CastingSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(CastingSound).CombineHashCode(ret);
            }
            if (BoltSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(BoltSound).CombineHashCode(ret);
            }
            if (HitSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(HitSound).CombineHashCode(ret);
            }
            if (AreaSound_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(AreaSound).CombineHashCode(ret);
            }
            if (ConstantEffectEnchantmentFactor_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ConstantEffectEnchantmentFactor).CombineHashCode(ret);
            }
            if (ConstantEffectBarterFactor_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ConstantEffectBarterFactor).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static MagicData Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static MagicData Create_XML(
            XElement root,
            out MagicData_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static MagicData Create_XML(
            XElement root,
            bool doMasks,
            out MagicData_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (MagicData Object, MagicData_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            MagicData_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MagicData_ErrorMask()) : default(Func<MagicData_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static MagicData Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static MagicData Create_XML(
            string path,
            out MagicData_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static MagicData Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static MagicData Create_XML(
            Stream stream,
            out MagicData_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<MagicData, MagicData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out MagicData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<MagicData, MagicData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out MagicData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out MagicData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out MagicData_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (MagicData_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out MagicData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out MagicData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            MagicDataCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static MagicData Create_XML_Internal(
            XElement root,
            Func<MagicData_ErrorMask> errorMask)
        {
            var ret = new MagicData();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            MagicData item,
            XElement root,
            string name,
            Func<MagicData_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Flags":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<MagicEffect.MagicFlag>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._Flags.SetIfSucceeded(tryGet.Bubble((o) => o.Value));
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.Flags,
                            subMask);
                    }
                    break;
                case "BaseCost":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._BaseCost.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.BaseCost,
                            subMask);
                    }
                    break;
                case "Unused":
                    {
                        Exception subMask;
                        var tryGet = ByteArrayXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._Unused.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.Unused,
                            subMask);
                    }
                    break;
                case "MagicSchool":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<MagicSchool>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._MagicSchool.SetIfSucceeded(tryGet.Bubble((o) => o.Value));
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.MagicSchool,
                            subMask);
                    }
                    break;
                case "Resistance":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<Resistance>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._Resistance.SetIfSucceeded(tryGet.Bubble((o) => o.Value));
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.Resistance,
                            subMask);
                    }
                    break;
                case "CounterEffectCount":
                    {
                        Exception subMask;
                        var tryGet = UInt32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._CounterEffectCount.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.CounterEffectCount,
                            subMask);
                    }
                    break;
                case "Light":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._Light.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.Light,
                            subMask);
                    }
                    break;
                case "ProjectileSpeed":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._ProjectileSpeed.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.ProjectileSpeed,
                            subMask);
                    }
                    break;
                case "EffectShader":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._EffectShader.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.EffectShader,
                            subMask);
                    }
                    break;
                case "EnchantEffect":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._EnchantEffect.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.EnchantEffect,
                            subMask);
                    }
                    break;
                case "CastingSound":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._CastingSound.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.CastingSound,
                            subMask);
                    }
                    break;
                case "BoltSound":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._BoltSound.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.BoltSound,
                            subMask);
                    }
                    break;
                case "HitSound":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._HitSound.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.HitSound,
                            subMask);
                    }
                    break;
                case "AreaSound":
                    {
                        Exception subMask;
                        var tryGet = FormIDXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._AreaSound.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.AreaSound,
                            subMask);
                    }
                    break;
                case "ConstantEffectEnchantmentFactor":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._ConstantEffectEnchantmentFactor.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.ConstantEffectEnchantmentFactor,
                            subMask);
                    }
                    break;
                case "ConstantEffectBarterFactor":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._ConstantEffectBarterFactor.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.ConstantEffectBarterFactor,
                            subMask);
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static MagicData Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static MagicData Create_Binary(
            MutagenFrame frame,
            out MagicData_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static MagicData Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out MagicData_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (MagicData Object, MagicData_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            MagicData_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MagicData_ErrorMask()) : default(Func<MagicData_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static MagicData Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static MagicData Create_Binary(
            string path,
            out MagicData_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static MagicData Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static MagicData Create_Binary(
            Stream stream,
            out MagicData_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<MagicData, MagicData_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out MagicData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<MagicData, MagicData_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out MagicData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out MagicData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out MagicData_ErrorMask errorMask)
        {
            errorMask = (MagicData_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out MagicData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out MagicData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            MagicDataCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static MagicData Create_Binary_Internal(
            MutagenFrame frame,
            Func<MagicData_ErrorMask> errorMask)
        {
            var ret = new MagicData();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseSubrecord(
                    frame,
                    MagicData_Registration.DATA_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            MagicData item,
            MutagenFrame frame,
            Func<MagicData_ErrorMask> errorMask)
        {
            if (frame.Complete) return;
            var FlagstryGet = Mutagen.Binary.EnumBinaryTranslation<MagicEffect.MagicFlag>.Instance.Parse(
                frame: frame.Spawn(new ContentLength(4)),
                fieldIndex: (int)MagicData_FieldIndex.Flags,
                errorMask: errorMask);
            item._Flags.SetIfSucceeded(FlagstryGet);
            if (frame.Complete) return;
            item._BaseCost.SetIfSucceeded(Mutagen.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicData_FieldIndex.BaseCost,
                errorMask: errorMask));
            if (frame.Complete) return;
            var UnusedtryGet = Mutagen.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.Spawn(new ContentLength(4)),
                fieldIndex: (int)MagicData_FieldIndex.Unused,
                errorMask: errorMask);
            item._Unused.SetIfSucceeded(UnusedtryGet);
            if (frame.Complete) return;
            var MagicSchooltryGet = Mutagen.Binary.EnumBinaryTranslation<MagicSchool>.Instance.Parse(
                frame: frame.Spawn(new ContentLength(4)),
                fieldIndex: (int)MagicData_FieldIndex.MagicSchool,
                errorMask: errorMask);
            item._MagicSchool.SetIfSucceeded(MagicSchooltryGet);
            if (frame.Complete) return;
            var ResistancetryGet = Mutagen.Binary.EnumBinaryTranslation<Resistance>.Instance.Parse(
                frame: frame.Spawn(new ContentLength(4)),
                fieldIndex: (int)MagicData_FieldIndex.Resistance,
                errorMask: errorMask);
            item._Resistance.SetIfSucceeded(ResistancetryGet);
            if (frame.Complete) return;
            item._CounterEffectCount.SetIfSucceeded(Mutagen.Binary.UInt32BinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicData_FieldIndex.CounterEffectCount,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._Light.SetIfSucceeded(Mutagen.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicData_FieldIndex.Light,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._ProjectileSpeed.SetIfSucceeded(Mutagen.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicData_FieldIndex.ProjectileSpeed,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._EffectShader.SetIfSucceeded(Mutagen.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicData_FieldIndex.EffectShader,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._EnchantEffect.SetIfSucceeded(Mutagen.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicData_FieldIndex.EnchantEffect,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._CastingSound.SetIfSucceeded(Mutagen.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicData_FieldIndex.CastingSound,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._BoltSound.SetIfSucceeded(Mutagen.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicData_FieldIndex.BoltSound,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._HitSound.SetIfSucceeded(Mutagen.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicData_FieldIndex.HitSound,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._AreaSound.SetIfSucceeded(Mutagen.Binary.FormIDBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicData_FieldIndex.AreaSound,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._ConstantEffectEnchantmentFactor.SetIfSucceeded(Mutagen.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicData_FieldIndex.ConstantEffectEnchantmentFactor,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._ConstantEffectBarterFactor.SetIfSucceeded(Mutagen.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)MagicData_FieldIndex.ConstantEffectBarterFactor,
                errorMask: errorMask));
        }

        #endregion

        public MagicData Copy(
            MagicData_CopyMask copyMask = null,
            IMagicDataGetter def = null)
        {
            return MagicData.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static MagicData Copy(
            IMagicData item,
            MagicData_CopyMask copyMask = null,
            IMagicDataGetter def = null)
        {
            MagicData ret;
            if (item.GetType().Equals(typeof(MagicData)))
            {
                ret = new MagicData();
            }
            else
            {
                ret = (MagicData)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            MagicData_CopyMask copyMask = null,
            IMagicDataGetter def = null)
            where CopyType : class, IMagicData
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(MagicData)))
            {
                ret = new MagicData() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static MagicData Copy_ToLoqui(
            IMagicDataGetter item,
            MagicData_CopyMask copyMask = null,
            IMagicDataGetter def = null)
        {
            var ret = new MagicData();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            MagicData_FieldIndex enu = (MagicData_FieldIndex)index;
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                    this._Flags.Set(
                        (MagicEffect.MagicFlag)obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.BaseCost:
                    this._BaseCost.Set(
                        (Single)obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.Unused:
                    this._Unused.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.MagicSchool:
                    this._MagicSchool.Set(
                        (MagicSchool)obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.Resistance:
                    this._Resistance.Set(
                        (Resistance)obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.CounterEffectCount:
                    this._CounterEffectCount.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.Light:
                    this._Light.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.ProjectileSpeed:
                    this._ProjectileSpeed.Set(
                        (Single)obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.EffectShader:
                    this._EffectShader.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.EnchantEffect:
                    this._EnchantEffect.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.CastingSound:
                    this._CastingSound.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.BoltSound:
                    this._BoltSound.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.HitSound:
                    this._HitSound.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.AreaSound:
                    this._AreaSound.Set(
                        (FormID)obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                    this._ConstantEffectEnchantmentFactor.Set(
                        (Single)obj,
                        cmds);
                    break;
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    this._ConstantEffectBarterFactor.Set(
                        (Single)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            MagicDataCommon.Clear(this, cmds);
        }


        public static MagicData Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new MagicData();
            foreach (var pair in fields)
            {
                CopyInInternal_MagicData(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_MagicData(MagicData obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out MagicData_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                    obj._Flags.Set(
                        (MagicEffect.MagicFlag)pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.BaseCost:
                    obj._BaseCost.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.Unused:
                    obj._Unused.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.MagicSchool:
                    obj._MagicSchool.Set(
                        (MagicSchool)pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.Resistance:
                    obj._Resistance.Set(
                        (Resistance)pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.CounterEffectCount:
                    obj._CounterEffectCount.Set(
                        (UInt32)pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.Light:
                    obj._Light.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.ProjectileSpeed:
                    obj._ProjectileSpeed.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.EffectShader:
                    obj._EffectShader.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.EnchantEffect:
                    obj._EnchantEffect.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.CastingSound:
                    obj._CastingSound.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.BoltSound:
                    obj._BoltSound.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.HitSound:
                    obj._HitSound.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.AreaSound:
                    obj._AreaSound.Set(
                        (FormID)pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                    obj._ConstantEffectEnchantmentFactor.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    obj._ConstantEffectBarterFactor.Set(
                        (Single)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, MagicData obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IMagicData : IMagicDataGetter, ILoquiClass<IMagicData, IMagicDataGetter>, ILoquiClass<MagicData, IMagicDataGetter>
    {
        new MagicEffect.MagicFlag Flags { get; set; }
        new INotifyingItem<MagicEffect.MagicFlag> Flags_Property { get; }

        new Single BaseCost { get; set; }
        new INotifyingItem<Single> BaseCost_Property { get; }

        new Byte[] Unused { get; set; }
        new INotifyingItem<Byte[]> Unused_Property { get; }

        new MagicSchool MagicSchool { get; set; }
        new INotifyingItem<MagicSchool> MagicSchool_Property { get; }

        new Resistance Resistance { get; set; }
        new INotifyingItem<Resistance> Resistance_Property { get; }

        new UInt32 CounterEffectCount { get; set; }
        new INotifyingItem<UInt32> CounterEffectCount_Property { get; }

        new FormID Light { get; set; }
        new INotifyingItem<FormID> Light_Property { get; }

        new Single ProjectileSpeed { get; set; }
        new INotifyingItem<Single> ProjectileSpeed_Property { get; }

        new FormID EffectShader { get; set; }
        new INotifyingItem<FormID> EffectShader_Property { get; }

        new FormID EnchantEffect { get; set; }
        new INotifyingItem<FormID> EnchantEffect_Property { get; }

        new FormID CastingSound { get; set; }
        new INotifyingItem<FormID> CastingSound_Property { get; }

        new FormID BoltSound { get; set; }
        new INotifyingItem<FormID> BoltSound_Property { get; }

        new FormID HitSound { get; set; }
        new INotifyingItem<FormID> HitSound_Property { get; }

        new FormID AreaSound { get; set; }
        new INotifyingItem<FormID> AreaSound_Property { get; }

        new Single ConstantEffectEnchantmentFactor { get; set; }
        new INotifyingItem<Single> ConstantEffectEnchantmentFactor_Property { get; }

        new Single ConstantEffectBarterFactor { get; set; }
        new INotifyingItem<Single> ConstantEffectBarterFactor_Property { get; }

    }

    public interface IMagicDataGetter : ILoquiObject
    {
        #region Flags
        MagicEffect.MagicFlag Flags { get; }
        INotifyingItemGetter<MagicEffect.MagicFlag> Flags_Property { get; }

        #endregion
        #region BaseCost
        Single BaseCost { get; }
        INotifyingItemGetter<Single> BaseCost_Property { get; }

        #endregion
        #region Unused
        Byte[] Unused { get; }
        INotifyingItemGetter<Byte[]> Unused_Property { get; }

        #endregion
        #region MagicSchool
        MagicSchool MagicSchool { get; }
        INotifyingItemGetter<MagicSchool> MagicSchool_Property { get; }

        #endregion
        #region Resistance
        Resistance Resistance { get; }
        INotifyingItemGetter<Resistance> Resistance_Property { get; }

        #endregion
        #region CounterEffectCount
        UInt32 CounterEffectCount { get; }
        INotifyingItemGetter<UInt32> CounterEffectCount_Property { get; }

        #endregion
        #region Light
        FormID Light { get; }
        INotifyingItemGetter<FormID> Light_Property { get; }

        #endregion
        #region ProjectileSpeed
        Single ProjectileSpeed { get; }
        INotifyingItemGetter<Single> ProjectileSpeed_Property { get; }

        #endregion
        #region EffectShader
        FormID EffectShader { get; }
        INotifyingItemGetter<FormID> EffectShader_Property { get; }

        #endregion
        #region EnchantEffect
        FormID EnchantEffect { get; }
        INotifyingItemGetter<FormID> EnchantEffect_Property { get; }

        #endregion
        #region CastingSound
        FormID CastingSound { get; }
        INotifyingItemGetter<FormID> CastingSound_Property { get; }

        #endregion
        #region BoltSound
        FormID BoltSound { get; }
        INotifyingItemGetter<FormID> BoltSound_Property { get; }

        #endregion
        #region HitSound
        FormID HitSound { get; }
        INotifyingItemGetter<FormID> HitSound_Property { get; }

        #endregion
        #region AreaSound
        FormID AreaSound { get; }
        INotifyingItemGetter<FormID> AreaSound_Property { get; }

        #endregion
        #region ConstantEffectEnchantmentFactor
        Single ConstantEffectEnchantmentFactor { get; }
        INotifyingItemGetter<Single> ConstantEffectEnchantmentFactor_Property { get; }

        #endregion
        #region ConstantEffectBarterFactor
        Single ConstantEffectBarterFactor { get; }
        INotifyingItemGetter<Single> ConstantEffectBarterFactor_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum MagicData_FieldIndex
    {
        Flags = 0,
        BaseCost = 1,
        Unused = 2,
        MagicSchool = 3,
        Resistance = 4,
        CounterEffectCount = 5,
        Light = 6,
        ProjectileSpeed = 7,
        EffectShader = 8,
        EnchantEffect = 9,
        CastingSound = 10,
        BoltSound = 11,
        HitSound = 12,
        AreaSound = 13,
        ConstantEffectEnchantmentFactor = 14,
        ConstantEffectBarterFactor = 15,
    }
    #endregion

    #region Registration
    public class MagicData_Registration : ILoquiRegistration
    {
        public static readonly MagicData_Registration Instance = new MagicData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 45,
            version: 0);

        public const string GUID = "00b852d0-4427-435b-91e5-2c85703c8d43";

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(MagicData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MagicData_ErrorMask);

        public static readonly Type ClassType = typeof(MagicData);

        public static readonly Type GetterType = typeof(IMagicDataGetter);

        public static readonly Type SetterType = typeof(IMagicData);

        public static readonly Type CommonType = typeof(MagicDataCommon);

        public const string FullName = "Mutagen.MagicData";

        public const string Name = "MagicData";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)MagicData_FieldIndex.Flags;
                case "BASECOST":
                    return (ushort)MagicData_FieldIndex.BaseCost;
                case "UNUSED":
                    return (ushort)MagicData_FieldIndex.Unused;
                case "MAGICSCHOOL":
                    return (ushort)MagicData_FieldIndex.MagicSchool;
                case "RESISTANCE":
                    return (ushort)MagicData_FieldIndex.Resistance;
                case "COUNTEREFFECTCOUNT":
                    return (ushort)MagicData_FieldIndex.CounterEffectCount;
                case "LIGHT":
                    return (ushort)MagicData_FieldIndex.Light;
                case "PROJECTILESPEED":
                    return (ushort)MagicData_FieldIndex.ProjectileSpeed;
                case "EFFECTSHADER":
                    return (ushort)MagicData_FieldIndex.EffectShader;
                case "ENCHANTEFFECT":
                    return (ushort)MagicData_FieldIndex.EnchantEffect;
                case "CASTINGSOUND":
                    return (ushort)MagicData_FieldIndex.CastingSound;
                case "BOLTSOUND":
                    return (ushort)MagicData_FieldIndex.BoltSound;
                case "HITSOUND":
                    return (ushort)MagicData_FieldIndex.HitSound;
                case "AREASOUND":
                    return (ushort)MagicData_FieldIndex.AreaSound;
                case "CONSTANTEFFECTENCHANTMENTFACTOR":
                    return (ushort)MagicData_FieldIndex.ConstantEffectEnchantmentFactor;
                case "CONSTANTEFFECTBARTERFACTOR":
                    return (ushort)MagicData_FieldIndex.ConstantEffectBarterFactor;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MagicData_FieldIndex enu = (MagicData_FieldIndex)index;
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                case MagicData_FieldIndex.BaseCost:
                case MagicData_FieldIndex.Unused:
                case MagicData_FieldIndex.MagicSchool:
                case MagicData_FieldIndex.Resistance:
                case MagicData_FieldIndex.CounterEffectCount:
                case MagicData_FieldIndex.Light:
                case MagicData_FieldIndex.ProjectileSpeed:
                case MagicData_FieldIndex.EffectShader:
                case MagicData_FieldIndex.EnchantEffect:
                case MagicData_FieldIndex.CastingSound:
                case MagicData_FieldIndex.BoltSound:
                case MagicData_FieldIndex.HitSound:
                case MagicData_FieldIndex.AreaSound:
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MagicData_FieldIndex enu = (MagicData_FieldIndex)index;
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                case MagicData_FieldIndex.BaseCost:
                case MagicData_FieldIndex.Unused:
                case MagicData_FieldIndex.MagicSchool:
                case MagicData_FieldIndex.Resistance:
                case MagicData_FieldIndex.CounterEffectCount:
                case MagicData_FieldIndex.Light:
                case MagicData_FieldIndex.ProjectileSpeed:
                case MagicData_FieldIndex.EffectShader:
                case MagicData_FieldIndex.EnchantEffect:
                case MagicData_FieldIndex.CastingSound:
                case MagicData_FieldIndex.BoltSound:
                case MagicData_FieldIndex.HitSound:
                case MagicData_FieldIndex.AreaSound:
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MagicData_FieldIndex enu = (MagicData_FieldIndex)index;
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                case MagicData_FieldIndex.BaseCost:
                case MagicData_FieldIndex.Unused:
                case MagicData_FieldIndex.MagicSchool:
                case MagicData_FieldIndex.Resistance:
                case MagicData_FieldIndex.CounterEffectCount:
                case MagicData_FieldIndex.Light:
                case MagicData_FieldIndex.ProjectileSpeed:
                case MagicData_FieldIndex.EffectShader:
                case MagicData_FieldIndex.EnchantEffect:
                case MagicData_FieldIndex.CastingSound:
                case MagicData_FieldIndex.BoltSound:
                case MagicData_FieldIndex.HitSound:
                case MagicData_FieldIndex.AreaSound:
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MagicData_FieldIndex enu = (MagicData_FieldIndex)index;
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                    return "Flags";
                case MagicData_FieldIndex.BaseCost:
                    return "BaseCost";
                case MagicData_FieldIndex.Unused:
                    return "Unused";
                case MagicData_FieldIndex.MagicSchool:
                    return "MagicSchool";
                case MagicData_FieldIndex.Resistance:
                    return "Resistance";
                case MagicData_FieldIndex.CounterEffectCount:
                    return "CounterEffectCount";
                case MagicData_FieldIndex.Light:
                    return "Light";
                case MagicData_FieldIndex.ProjectileSpeed:
                    return "ProjectileSpeed";
                case MagicData_FieldIndex.EffectShader:
                    return "EffectShader";
                case MagicData_FieldIndex.EnchantEffect:
                    return "EnchantEffect";
                case MagicData_FieldIndex.CastingSound:
                    return "CastingSound";
                case MagicData_FieldIndex.BoltSound:
                    return "BoltSound";
                case MagicData_FieldIndex.HitSound:
                    return "HitSound";
                case MagicData_FieldIndex.AreaSound:
                    return "AreaSound";
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                    return "ConstantEffectEnchantmentFactor";
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    return "ConstantEffectBarterFactor";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MagicData_FieldIndex enu = (MagicData_FieldIndex)index;
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                case MagicData_FieldIndex.BaseCost:
                case MagicData_FieldIndex.Unused:
                case MagicData_FieldIndex.MagicSchool:
                case MagicData_FieldIndex.Resistance:
                case MagicData_FieldIndex.CounterEffectCount:
                case MagicData_FieldIndex.Light:
                case MagicData_FieldIndex.ProjectileSpeed:
                case MagicData_FieldIndex.EffectShader:
                case MagicData_FieldIndex.EnchantEffect:
                case MagicData_FieldIndex.CastingSound:
                case MagicData_FieldIndex.BoltSound:
                case MagicData_FieldIndex.HitSound:
                case MagicData_FieldIndex.AreaSound:
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MagicData_FieldIndex enu = (MagicData_FieldIndex)index;
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                case MagicData_FieldIndex.BaseCost:
                case MagicData_FieldIndex.Unused:
                case MagicData_FieldIndex.MagicSchool:
                case MagicData_FieldIndex.Resistance:
                case MagicData_FieldIndex.CounterEffectCount:
                case MagicData_FieldIndex.Light:
                case MagicData_FieldIndex.ProjectileSpeed:
                case MagicData_FieldIndex.EffectShader:
                case MagicData_FieldIndex.EnchantEffect:
                case MagicData_FieldIndex.CastingSound:
                case MagicData_FieldIndex.BoltSound:
                case MagicData_FieldIndex.HitSound:
                case MagicData_FieldIndex.AreaSound:
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MagicData_FieldIndex enu = (MagicData_FieldIndex)index;
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                    return typeof(MagicEffect.MagicFlag);
                case MagicData_FieldIndex.BaseCost:
                    return typeof(Single);
                case MagicData_FieldIndex.Unused:
                    return typeof(Byte[]);
                case MagicData_FieldIndex.MagicSchool:
                    return typeof(MagicSchool);
                case MagicData_FieldIndex.Resistance:
                    return typeof(Resistance);
                case MagicData_FieldIndex.CounterEffectCount:
                    return typeof(UInt32);
                case MagicData_FieldIndex.Light:
                    return typeof(FormID);
                case MagicData_FieldIndex.ProjectileSpeed:
                    return typeof(Single);
                case MagicData_FieldIndex.EffectShader:
                    return typeof(FormID);
                case MagicData_FieldIndex.EnchantEffect:
                    return typeof(FormID);
                case MagicData_FieldIndex.CastingSound:
                    return typeof(FormID);
                case MagicData_FieldIndex.BoltSound:
                    return typeof(FormID);
                case MagicData_FieldIndex.HitSound:
                    return typeof(FormID);
                case MagicData_FieldIndex.AreaSound:
                    return typeof(FormID);
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                    return typeof(Single);
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = DATA_HEADER;
        public const int NumStructFields = 16;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class MagicDataCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IMagicData item,
            IMagicDataGetter rhs,
            MagicData_CopyMask copyMask = null,
            IMagicDataGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            MagicDataCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IMagicData item,
            IMagicDataGetter rhs,
            out MagicData_ErrorMask errorMask,
            MagicData_CopyMask copyMask = null,
            IMagicDataGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            MagicDataCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IMagicData item,
            IMagicDataGetter rhs,
            IMagicDataGetter def,
            bool doMasks,
            out MagicData_ErrorMask errorMask,
            MagicData_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            MagicData_ErrorMask retErrorMask = null;
            Func<MagicData_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new MagicData_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IMagicData item,
            IMagicDataGetter rhs,
            IMagicDataGetter def,
            bool doMasks,
            Func<MagicData_ErrorMask> errorMask,
            MagicData_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.SetToWithDefault(
                        rhs.Flags_Property,
                        def?.Flags_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.Flags, ex);
                }
            }
            if (copyMask?.BaseCost ?? true)
            {
                try
                {
                    item.BaseCost_Property.SetToWithDefault(
                        rhs.BaseCost_Property,
                        def?.BaseCost_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.BaseCost, ex);
                }
            }
            if (copyMask?.Unused ?? true)
            {
                try
                {
                    item.Unused_Property.SetToWithDefault(
                        rhs.Unused_Property,
                        def?.Unused_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.Unused, ex);
                }
            }
            if (copyMask?.MagicSchool ?? true)
            {
                try
                {
                    item.MagicSchool_Property.SetToWithDefault(
                        rhs.MagicSchool_Property,
                        def?.MagicSchool_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.MagicSchool, ex);
                }
            }
            if (copyMask?.Resistance ?? true)
            {
                try
                {
                    item.Resistance_Property.SetToWithDefault(
                        rhs.Resistance_Property,
                        def?.Resistance_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.Resistance, ex);
                }
            }
            if (copyMask?.CounterEffectCount ?? true)
            {
                try
                {
                    item.CounterEffectCount_Property.SetToWithDefault(
                        rhs.CounterEffectCount_Property,
                        def?.CounterEffectCount_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.CounterEffectCount, ex);
                }
            }
            if (copyMask?.Light ?? true)
            {
                try
                {
                    item.Light_Property.SetToWithDefault(
                        rhs.Light_Property,
                        def?.Light_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.Light, ex);
                }
            }
            if (copyMask?.ProjectileSpeed ?? true)
            {
                try
                {
                    item.ProjectileSpeed_Property.SetToWithDefault(
                        rhs.ProjectileSpeed_Property,
                        def?.ProjectileSpeed_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.ProjectileSpeed, ex);
                }
            }
            if (copyMask?.EffectShader ?? true)
            {
                try
                {
                    item.EffectShader_Property.SetToWithDefault(
                        rhs.EffectShader_Property,
                        def?.EffectShader_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.EffectShader, ex);
                }
            }
            if (copyMask?.EnchantEffect ?? true)
            {
                try
                {
                    item.EnchantEffect_Property.SetToWithDefault(
                        rhs.EnchantEffect_Property,
                        def?.EnchantEffect_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.EnchantEffect, ex);
                }
            }
            if (copyMask?.CastingSound ?? true)
            {
                try
                {
                    item.CastingSound_Property.SetToWithDefault(
                        rhs.CastingSound_Property,
                        def?.CastingSound_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.CastingSound, ex);
                }
            }
            if (copyMask?.BoltSound ?? true)
            {
                try
                {
                    item.BoltSound_Property.SetToWithDefault(
                        rhs.BoltSound_Property,
                        def?.BoltSound_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.BoltSound, ex);
                }
            }
            if (copyMask?.HitSound ?? true)
            {
                try
                {
                    item.HitSound_Property.SetToWithDefault(
                        rhs.HitSound_Property,
                        def?.HitSound_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.HitSound, ex);
                }
            }
            if (copyMask?.AreaSound ?? true)
            {
                try
                {
                    item.AreaSound_Property.SetToWithDefault(
                        rhs.AreaSound_Property,
                        def?.AreaSound_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.AreaSound, ex);
                }
            }
            if (copyMask?.ConstantEffectEnchantmentFactor ?? true)
            {
                try
                {
                    item.ConstantEffectEnchantmentFactor_Property.SetToWithDefault(
                        rhs.ConstantEffectEnchantmentFactor_Property,
                        def?.ConstantEffectEnchantmentFactor_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.ConstantEffectEnchantmentFactor, ex);
                }
            }
            if (copyMask?.ConstantEffectBarterFactor ?? true)
            {
                try
                {
                    item.ConstantEffectBarterFactor_Property.SetToWithDefault(
                        rhs.ConstantEffectBarterFactor_Property,
                        def?.ConstantEffectBarterFactor_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)MagicData_FieldIndex.ConstantEffectBarterFactor, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IMagicData obj,
            NotifyingFireParameters? cmds = null)
        {
            MagicData_FieldIndex enu = (MagicData_FieldIndex)index;
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                    obj.Flags_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.BaseCost:
                    obj.BaseCost_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.Unused:
                    obj.Unused_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.MagicSchool:
                    obj.MagicSchool_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.Resistance:
                    obj.Resistance_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.CounterEffectCount:
                    obj.CounterEffectCount_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.Light:
                    obj.Light_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.ProjectileSpeed:
                    obj.ProjectileSpeed_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.EffectShader:
                    obj.EffectShader_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.EnchantEffect:
                    obj.EnchantEffect_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.CastingSound:
                    obj.CastingSound_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.BoltSound:
                    obj.BoltSound_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.HitSound:
                    obj.HitSound_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.AreaSound:
                    obj.AreaSound_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                    obj.ConstantEffectEnchantmentFactor_Property.HasBeenSet = on;
                    break;
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    obj.ConstantEffectBarterFactor_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IMagicData obj,
            NotifyingUnsetParameters? cmds = null)
        {
            MagicData_FieldIndex enu = (MagicData_FieldIndex)index;
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                    obj.Flags_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.BaseCost:
                    obj.BaseCost_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.Unused:
                    obj.Unused_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.MagicSchool:
                    obj.MagicSchool_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.Resistance:
                    obj.Resistance_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.CounterEffectCount:
                    obj.CounterEffectCount_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.Light:
                    obj.Light_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.ProjectileSpeed:
                    obj.ProjectileSpeed_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.EffectShader:
                    obj.EffectShader_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.EnchantEffect:
                    obj.EnchantEffect_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.CastingSound:
                    obj.CastingSound_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.BoltSound:
                    obj.BoltSound_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.HitSound:
                    obj.HitSound_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.AreaSound:
                    obj.AreaSound_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                    obj.ConstantEffectEnchantmentFactor_Property.Unset(cmds);
                    break;
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    obj.ConstantEffectBarterFactor_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IMagicData obj)
        {
            MagicData_FieldIndex enu = (MagicData_FieldIndex)index;
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                    return obj.Flags_Property.HasBeenSet;
                case MagicData_FieldIndex.BaseCost:
                    return obj.BaseCost_Property.HasBeenSet;
                case MagicData_FieldIndex.Unused:
                    return obj.Unused_Property.HasBeenSet;
                case MagicData_FieldIndex.MagicSchool:
                    return obj.MagicSchool_Property.HasBeenSet;
                case MagicData_FieldIndex.Resistance:
                    return obj.Resistance_Property.HasBeenSet;
                case MagicData_FieldIndex.CounterEffectCount:
                    return obj.CounterEffectCount_Property.HasBeenSet;
                case MagicData_FieldIndex.Light:
                    return obj.Light_Property.HasBeenSet;
                case MagicData_FieldIndex.ProjectileSpeed:
                    return obj.ProjectileSpeed_Property.HasBeenSet;
                case MagicData_FieldIndex.EffectShader:
                    return obj.EffectShader_Property.HasBeenSet;
                case MagicData_FieldIndex.EnchantEffect:
                    return obj.EnchantEffect_Property.HasBeenSet;
                case MagicData_FieldIndex.CastingSound:
                    return obj.CastingSound_Property.HasBeenSet;
                case MagicData_FieldIndex.BoltSound:
                    return obj.BoltSound_Property.HasBeenSet;
                case MagicData_FieldIndex.HitSound:
                    return obj.HitSound_Property.HasBeenSet;
                case MagicData_FieldIndex.AreaSound:
                    return obj.AreaSound_Property.HasBeenSet;
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                    return obj.ConstantEffectEnchantmentFactor_Property.HasBeenSet;
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    return obj.ConstantEffectBarterFactor_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IMagicDataGetter obj)
        {
            MagicData_FieldIndex enu = (MagicData_FieldIndex)index;
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                    return obj.Flags;
                case MagicData_FieldIndex.BaseCost:
                    return obj.BaseCost;
                case MagicData_FieldIndex.Unused:
                    return obj.Unused;
                case MagicData_FieldIndex.MagicSchool:
                    return obj.MagicSchool;
                case MagicData_FieldIndex.Resistance:
                    return obj.Resistance;
                case MagicData_FieldIndex.CounterEffectCount:
                    return obj.CounterEffectCount;
                case MagicData_FieldIndex.Light:
                    return obj.Light;
                case MagicData_FieldIndex.ProjectileSpeed:
                    return obj.ProjectileSpeed;
                case MagicData_FieldIndex.EffectShader:
                    return obj.EffectShader;
                case MagicData_FieldIndex.EnchantEffect:
                    return obj.EnchantEffect;
                case MagicData_FieldIndex.CastingSound:
                    return obj.CastingSound;
                case MagicData_FieldIndex.BoltSound:
                    return obj.BoltSound;
                case MagicData_FieldIndex.HitSound:
                    return obj.HitSound;
                case MagicData_FieldIndex.AreaSound:
                    return obj.AreaSound;
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                    return obj.ConstantEffectEnchantmentFactor;
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    return obj.ConstantEffectBarterFactor;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IMagicData item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Flags_Property.Unset(cmds.ToUnsetParams());
            item.BaseCost_Property.Unset(cmds.ToUnsetParams());
            item.Unused_Property.Unset(cmds.ToUnsetParams());
            item.MagicSchool_Property.Unset(cmds.ToUnsetParams());
            item.Resistance_Property.Unset(cmds.ToUnsetParams());
            item.CounterEffectCount_Property.Unset(cmds.ToUnsetParams());
            item.Light_Property.Unset(cmds.ToUnsetParams());
            item.ProjectileSpeed_Property.Unset(cmds.ToUnsetParams());
            item.EffectShader_Property.Unset(cmds.ToUnsetParams());
            item.EnchantEffect_Property.Unset(cmds.ToUnsetParams());
            item.CastingSound_Property.Unset(cmds.ToUnsetParams());
            item.BoltSound_Property.Unset(cmds.ToUnsetParams());
            item.HitSound_Property.Unset(cmds.ToUnsetParams());
            item.AreaSound_Property.Unset(cmds.ToUnsetParams());
            item.ConstantEffectEnchantmentFactor_Property.Unset(cmds.ToUnsetParams());
            item.ConstantEffectBarterFactor_Property.Unset(cmds.ToUnsetParams());
        }

        public static MagicData_Mask<bool> GetEqualsMask(
            this IMagicDataGetter item,
            IMagicDataGetter rhs)
        {
            var ret = new MagicData_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IMagicDataGetter item,
            IMagicDataGetter rhs,
            MagicData_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags_Property.Equals(rhs.Flags_Property, (l, r) => l == r);
            ret.BaseCost = item.BaseCost_Property.Equals(rhs.BaseCost_Property, (l, r) => l == r);
            ret.Unused = item.Unused_Property.Equals(rhs.Unused_Property, (l, r) => l.EqualsFast(r));
            ret.MagicSchool = item.MagicSchool_Property.Equals(rhs.MagicSchool_Property, (l, r) => l == r);
            ret.Resistance = item.Resistance_Property.Equals(rhs.Resistance_Property, (l, r) => l == r);
            ret.CounterEffectCount = item.CounterEffectCount_Property.Equals(rhs.CounterEffectCount_Property, (l, r) => l == r);
            ret.Light = item.Light_Property.Equals(rhs.Light_Property, (l, r) => l == r);
            ret.ProjectileSpeed = item.ProjectileSpeed_Property.Equals(rhs.ProjectileSpeed_Property, (l, r) => l == r);
            ret.EffectShader = item.EffectShader_Property.Equals(rhs.EffectShader_Property, (l, r) => l == r);
            ret.EnchantEffect = item.EnchantEffect_Property.Equals(rhs.EnchantEffect_Property, (l, r) => l == r);
            ret.CastingSound = item.CastingSound_Property.Equals(rhs.CastingSound_Property, (l, r) => l == r);
            ret.BoltSound = item.BoltSound_Property.Equals(rhs.BoltSound_Property, (l, r) => l == r);
            ret.HitSound = item.HitSound_Property.Equals(rhs.HitSound_Property, (l, r) => l == r);
            ret.AreaSound = item.AreaSound_Property.Equals(rhs.AreaSound_Property, (l, r) => l == r);
            ret.ConstantEffectEnchantmentFactor = item.ConstantEffectEnchantmentFactor_Property.Equals(rhs.ConstantEffectEnchantmentFactor_Property, (l, r) => l == r);
            ret.ConstantEffectBarterFactor = item.ConstantEffectBarterFactor_Property.Equals(rhs.ConstantEffectBarterFactor_Property, (l, r) => l == r);
        }

        public static string ToString(
            this IMagicDataGetter item,
            string name = null,
            MagicData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IMagicDataGetter item,
            FileGeneration fg,
            string name = null,
            MagicData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(MagicData)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(MagicData)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
                if (printMask?.BaseCost ?? true)
                {
                    fg.AppendLine($"BaseCost => {item.BaseCost}");
                }
                if (printMask?.Unused ?? true)
                {
                    fg.AppendLine($"Unused => {item.Unused}");
                }
                if (printMask?.MagicSchool ?? true)
                {
                    fg.AppendLine($"MagicSchool => {item.MagicSchool}");
                }
                if (printMask?.Resistance ?? true)
                {
                    fg.AppendLine($"Resistance => {item.Resistance}");
                }
                if (printMask?.CounterEffectCount ?? true)
                {
                    fg.AppendLine($"CounterEffectCount => {item.CounterEffectCount}");
                }
                if (printMask?.Light ?? true)
                {
                    fg.AppendLine($"Light => {item.Light}");
                }
                if (printMask?.ProjectileSpeed ?? true)
                {
                    fg.AppendLine($"ProjectileSpeed => {item.ProjectileSpeed}");
                }
                if (printMask?.EffectShader ?? true)
                {
                    fg.AppendLine($"EffectShader => {item.EffectShader}");
                }
                if (printMask?.EnchantEffect ?? true)
                {
                    fg.AppendLine($"EnchantEffect => {item.EnchantEffect}");
                }
                if (printMask?.CastingSound ?? true)
                {
                    fg.AppendLine($"CastingSound => {item.CastingSound}");
                }
                if (printMask?.BoltSound ?? true)
                {
                    fg.AppendLine($"BoltSound => {item.BoltSound}");
                }
                if (printMask?.HitSound ?? true)
                {
                    fg.AppendLine($"HitSound => {item.HitSound}");
                }
                if (printMask?.AreaSound ?? true)
                {
                    fg.AppendLine($"AreaSound => {item.AreaSound}");
                }
                if (printMask?.ConstantEffectEnchantmentFactor ?? true)
                {
                    fg.AppendLine($"ConstantEffectEnchantmentFactor => {item.ConstantEffectEnchantmentFactor}");
                }
                if (printMask?.ConstantEffectBarterFactor ?? true)
                {
                    fg.AppendLine($"ConstantEffectBarterFactor => {item.ConstantEffectBarterFactor}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IMagicDataGetter item,
            MagicData_Mask<bool?> checkMask)
        {
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_Property.HasBeenSet) return false;
            if (checkMask.BaseCost.HasValue && checkMask.BaseCost.Value != item.BaseCost_Property.HasBeenSet) return false;
            if (checkMask.Unused.HasValue && checkMask.Unused.Value != item.Unused_Property.HasBeenSet) return false;
            if (checkMask.MagicSchool.HasValue && checkMask.MagicSchool.Value != item.MagicSchool_Property.HasBeenSet) return false;
            if (checkMask.Resistance.HasValue && checkMask.Resistance.Value != item.Resistance_Property.HasBeenSet) return false;
            if (checkMask.CounterEffectCount.HasValue && checkMask.CounterEffectCount.Value != item.CounterEffectCount_Property.HasBeenSet) return false;
            if (checkMask.Light.HasValue && checkMask.Light.Value != item.Light_Property.HasBeenSet) return false;
            if (checkMask.ProjectileSpeed.HasValue && checkMask.ProjectileSpeed.Value != item.ProjectileSpeed_Property.HasBeenSet) return false;
            if (checkMask.EffectShader.HasValue && checkMask.EffectShader.Value != item.EffectShader_Property.HasBeenSet) return false;
            if (checkMask.EnchantEffect.HasValue && checkMask.EnchantEffect.Value != item.EnchantEffect_Property.HasBeenSet) return false;
            if (checkMask.CastingSound.HasValue && checkMask.CastingSound.Value != item.CastingSound_Property.HasBeenSet) return false;
            if (checkMask.BoltSound.HasValue && checkMask.BoltSound.Value != item.BoltSound_Property.HasBeenSet) return false;
            if (checkMask.HitSound.HasValue && checkMask.HitSound.Value != item.HitSound_Property.HasBeenSet) return false;
            if (checkMask.AreaSound.HasValue && checkMask.AreaSound.Value != item.AreaSound_Property.HasBeenSet) return false;
            if (checkMask.ConstantEffectEnchantmentFactor.HasValue && checkMask.ConstantEffectEnchantmentFactor.Value != item.ConstantEffectEnchantmentFactor_Property.HasBeenSet) return false;
            if (checkMask.ConstantEffectBarterFactor.HasValue && checkMask.ConstantEffectBarterFactor.Value != item.ConstantEffectBarterFactor_Property.HasBeenSet) return false;
            return true;
        }

        public static MagicData_Mask<bool> GetHasBeenSetMask(IMagicDataGetter item)
        {
            var ret = new MagicData_Mask<bool>();
            ret.Flags = item.Flags_Property.HasBeenSet;
            ret.BaseCost = item.BaseCost_Property.HasBeenSet;
            ret.Unused = item.Unused_Property.HasBeenSet;
            ret.MagicSchool = item.MagicSchool_Property.HasBeenSet;
            ret.Resistance = item.Resistance_Property.HasBeenSet;
            ret.CounterEffectCount = item.CounterEffectCount_Property.HasBeenSet;
            ret.Light = item.Light_Property.HasBeenSet;
            ret.ProjectileSpeed = item.ProjectileSpeed_Property.HasBeenSet;
            ret.EffectShader = item.EffectShader_Property.HasBeenSet;
            ret.EnchantEffect = item.EnchantEffect_Property.HasBeenSet;
            ret.CastingSound = item.CastingSound_Property.HasBeenSet;
            ret.BoltSound = item.BoltSound_Property.HasBeenSet;
            ret.HitSound = item.HitSound_Property.HasBeenSet;
            ret.AreaSound = item.AreaSound_Property.HasBeenSet;
            ret.ConstantEffectEnchantmentFactor = item.ConstantEffectEnchantmentFactor_Property.HasBeenSet;
            ret.ConstantEffectBarterFactor = item.ConstantEffectBarterFactor_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IMagicDataGetter item,
            bool doMasks,
            out MagicData_ErrorMask errorMask,
            string name = null)
        {
            MagicData_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MagicData_ErrorMask()) : default(Func<MagicData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IMagicDataGetter item,
            Func<MagicData_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.MagicData"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.MagicData");
                    }
                    if (item.Flags_Property.HasBeenSet)
                    {
                        Exception subMask;
                        EnumXmlTranslation<MagicEffect.MagicFlag>.Instance.Write(
                            writer,
                            nameof(item.Flags),
                            item.Flags,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.Flags,
                            subMask);
                    }
                    if (item.BaseCost_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.BaseCost),
                            item.BaseCost,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.BaseCost,
                            subMask);
                    }
                    if (item.Unused_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteArrayXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Unused),
                            item.Unused,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.Unused,
                            subMask);
                    }
                    if (item.MagicSchool_Property.HasBeenSet)
                    {
                        Exception subMask;
                        EnumXmlTranslation<MagicSchool>.Instance.Write(
                            writer,
                            nameof(item.MagicSchool),
                            item.MagicSchool,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.MagicSchool,
                            subMask);
                    }
                    if (item.Resistance_Property.HasBeenSet)
                    {
                        Exception subMask;
                        EnumXmlTranslation<Resistance>.Instance.Write(
                            writer,
                            nameof(item.Resistance),
                            item.Resistance,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.Resistance,
                            subMask);
                    }
                    if (item.CounterEffectCount_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.CounterEffectCount),
                            item.CounterEffectCount,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.CounterEffectCount,
                            subMask);
                    }
                    if (item.Light_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FormIDXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Light),
                            item.Light,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.Light,
                            subMask);
                    }
                    if (item.ProjectileSpeed_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.ProjectileSpeed),
                            item.ProjectileSpeed,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.ProjectileSpeed,
                            subMask);
                    }
                    if (item.EffectShader_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FormIDXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.EffectShader),
                            item.EffectShader,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.EffectShader,
                            subMask);
                    }
                    if (item.EnchantEffect_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FormIDXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.EnchantEffect),
                            item.EnchantEffect,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.EnchantEffect,
                            subMask);
                    }
                    if (item.CastingSound_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FormIDXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.CastingSound),
                            item.CastingSound,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.CastingSound,
                            subMask);
                    }
                    if (item.BoltSound_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FormIDXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.BoltSound),
                            item.BoltSound,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.BoltSound,
                            subMask);
                    }
                    if (item.HitSound_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FormIDXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.HitSound),
                            item.HitSound,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.HitSound,
                            subMask);
                    }
                    if (item.AreaSound_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FormIDXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.AreaSound),
                            item.AreaSound,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.AreaSound,
                            subMask);
                    }
                    if (item.ConstantEffectEnchantmentFactor_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.ConstantEffectEnchantmentFactor),
                            item.ConstantEffectEnchantmentFactor,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.ConstantEffectEnchantmentFactor,
                            subMask);
                    }
                    if (item.ConstantEffectBarterFactor_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.ConstantEffectBarterFactor),
                            item.ConstantEffectBarterFactor,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)MagicData_FieldIndex.ConstantEffectBarterFactor,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IMagicDataGetter item,
            bool doMasks,
            out MagicData_ErrorMask errorMask)
        {
            MagicData_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new MagicData_ErrorMask()) : default(Func<MagicData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IMagicDataGetter item,
            Func<MagicData_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: MagicData_Registration.DATA_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            IMagicDataGetter item,
            MutagenWriter writer,
            Func<MagicData_ErrorMask> errorMask)
        {
            Mutagen.Binary.EnumBinaryTranslation<MagicEffect.MagicFlag>.Instance.Write(
                writer,
                item.Flags_Property,
                length: new ContentLength(4),
                fieldIndex: (int)MagicData_FieldIndex.Flags,
                errorMask: errorMask);
            Mutagen.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BaseCost_Property,
                fieldIndex: (int)MagicData_FieldIndex.BaseCost,
                errorMask: errorMask);
            Mutagen.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unused_Property,
                fieldIndex: (int)MagicData_FieldIndex.Unused,
                errorMask: errorMask);
            Mutagen.Binary.EnumBinaryTranslation<MagicSchool>.Instance.Write(
                writer,
                item.MagicSchool_Property,
                length: new ContentLength(4),
                fieldIndex: (int)MagicData_FieldIndex.MagicSchool,
                errorMask: errorMask);
            Mutagen.Binary.EnumBinaryTranslation<Resistance>.Instance.Write(
                writer,
                item.Resistance_Property,
                length: new ContentLength(4),
                fieldIndex: (int)MagicData_FieldIndex.Resistance,
                errorMask: errorMask);
            Mutagen.Binary.UInt32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CounterEffectCount_Property,
                fieldIndex: (int)MagicData_FieldIndex.CounterEffectCount,
                errorMask: errorMask);
            Mutagen.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Light_Property,
                fieldIndex: (int)MagicData_FieldIndex.Light,
                errorMask: errorMask);
            Mutagen.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ProjectileSpeed_Property,
                fieldIndex: (int)MagicData_FieldIndex.ProjectileSpeed,
                errorMask: errorMask);
            Mutagen.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EffectShader_Property,
                fieldIndex: (int)MagicData_FieldIndex.EffectShader,
                errorMask: errorMask);
            Mutagen.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EnchantEffect_Property,
                fieldIndex: (int)MagicData_FieldIndex.EnchantEffect,
                errorMask: errorMask);
            Mutagen.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CastingSound_Property,
                fieldIndex: (int)MagicData_FieldIndex.CastingSound,
                errorMask: errorMask);
            Mutagen.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BoltSound_Property,
                fieldIndex: (int)MagicData_FieldIndex.BoltSound,
                errorMask: errorMask);
            Mutagen.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.HitSound_Property,
                fieldIndex: (int)MagicData_FieldIndex.HitSound,
                errorMask: errorMask);
            Mutagen.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AreaSound_Property,
                fieldIndex: (int)MagicData_FieldIndex.AreaSound,
                errorMask: errorMask);
            Mutagen.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ConstantEffectEnchantmentFactor_Property,
                fieldIndex: (int)MagicData_FieldIndex.ConstantEffectEnchantmentFactor,
                errorMask: errorMask);
            Mutagen.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ConstantEffectBarterFactor_Property,
                fieldIndex: (int)MagicData_FieldIndex.ConstantEffectBarterFactor,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class MagicData_Mask<T> : IMask<T>, IEquatable<MagicData_Mask<T>>
    {
        #region Ctors
        public MagicData_Mask()
        {
        }

        public MagicData_Mask(T initialValue)
        {
            this.Flags = initialValue;
            this.BaseCost = initialValue;
            this.Unused = initialValue;
            this.MagicSchool = initialValue;
            this.Resistance = initialValue;
            this.CounterEffectCount = initialValue;
            this.Light = initialValue;
            this.ProjectileSpeed = initialValue;
            this.EffectShader = initialValue;
            this.EnchantEffect = initialValue;
            this.CastingSound = initialValue;
            this.BoltSound = initialValue;
            this.HitSound = initialValue;
            this.AreaSound = initialValue;
            this.ConstantEffectEnchantmentFactor = initialValue;
            this.ConstantEffectBarterFactor = initialValue;
        }
        #endregion

        #region Members
        public T Flags;
        public T BaseCost;
        public T Unused;
        public T MagicSchool;
        public T Resistance;
        public T CounterEffectCount;
        public T Light;
        public T ProjectileSpeed;
        public T EffectShader;
        public T EnchantEffect;
        public T CastingSound;
        public T BoltSound;
        public T HitSound;
        public T AreaSound;
        public T ConstantEffectEnchantmentFactor;
        public T ConstantEffectBarterFactor;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MagicData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MagicData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            if (!object.Equals(this.BaseCost, rhs.BaseCost)) return false;
            if (!object.Equals(this.Unused, rhs.Unused)) return false;
            if (!object.Equals(this.MagicSchool, rhs.MagicSchool)) return false;
            if (!object.Equals(this.Resistance, rhs.Resistance)) return false;
            if (!object.Equals(this.CounterEffectCount, rhs.CounterEffectCount)) return false;
            if (!object.Equals(this.Light, rhs.Light)) return false;
            if (!object.Equals(this.ProjectileSpeed, rhs.ProjectileSpeed)) return false;
            if (!object.Equals(this.EffectShader, rhs.EffectShader)) return false;
            if (!object.Equals(this.EnchantEffect, rhs.EnchantEffect)) return false;
            if (!object.Equals(this.CastingSound, rhs.CastingSound)) return false;
            if (!object.Equals(this.BoltSound, rhs.BoltSound)) return false;
            if (!object.Equals(this.HitSound, rhs.HitSound)) return false;
            if (!object.Equals(this.AreaSound, rhs.AreaSound)) return false;
            if (!object.Equals(this.ConstantEffectEnchantmentFactor, rhs.ConstantEffectEnchantmentFactor)) return false;
            if (!object.Equals(this.ConstantEffectBarterFactor, rhs.ConstantEffectBarterFactor)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            ret = ret.CombineHashCode(this.BaseCost?.GetHashCode());
            ret = ret.CombineHashCode(this.Unused?.GetHashCode());
            ret = ret.CombineHashCode(this.MagicSchool?.GetHashCode());
            ret = ret.CombineHashCode(this.Resistance?.GetHashCode());
            ret = ret.CombineHashCode(this.CounterEffectCount?.GetHashCode());
            ret = ret.CombineHashCode(this.Light?.GetHashCode());
            ret = ret.CombineHashCode(this.ProjectileSpeed?.GetHashCode());
            ret = ret.CombineHashCode(this.EffectShader?.GetHashCode());
            ret = ret.CombineHashCode(this.EnchantEffect?.GetHashCode());
            ret = ret.CombineHashCode(this.CastingSound?.GetHashCode());
            ret = ret.CombineHashCode(this.BoltSound?.GetHashCode());
            ret = ret.CombineHashCode(this.HitSound?.GetHashCode());
            ret = ret.CombineHashCode(this.AreaSound?.GetHashCode());
            ret = ret.CombineHashCode(this.ConstantEffectEnchantmentFactor?.GetHashCode());
            ret = ret.CombineHashCode(this.ConstantEffectBarterFactor?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Flags)) return false;
            if (!eval(this.BaseCost)) return false;
            if (!eval(this.Unused)) return false;
            if (!eval(this.MagicSchool)) return false;
            if (!eval(this.Resistance)) return false;
            if (!eval(this.CounterEffectCount)) return false;
            if (!eval(this.Light)) return false;
            if (!eval(this.ProjectileSpeed)) return false;
            if (!eval(this.EffectShader)) return false;
            if (!eval(this.EnchantEffect)) return false;
            if (!eval(this.CastingSound)) return false;
            if (!eval(this.BoltSound)) return false;
            if (!eval(this.HitSound)) return false;
            if (!eval(this.AreaSound)) return false;
            if (!eval(this.ConstantEffectEnchantmentFactor)) return false;
            if (!eval(this.ConstantEffectBarterFactor)) return false;
            return true;
        }
        #endregion

        #region Translate
        public MagicData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MagicData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MagicData_Mask<R> obj, Func<T, R> eval)
        {
            obj.Flags = eval(this.Flags);
            obj.BaseCost = eval(this.BaseCost);
            obj.Unused = eval(this.Unused);
            obj.MagicSchool = eval(this.MagicSchool);
            obj.Resistance = eval(this.Resistance);
            obj.CounterEffectCount = eval(this.CounterEffectCount);
            obj.Light = eval(this.Light);
            obj.ProjectileSpeed = eval(this.ProjectileSpeed);
            obj.EffectShader = eval(this.EffectShader);
            obj.EnchantEffect = eval(this.EnchantEffect);
            obj.CastingSound = eval(this.CastingSound);
            obj.BoltSound = eval(this.BoltSound);
            obj.HitSound = eval(this.HitSound);
            obj.AreaSound = eval(this.AreaSound);
            obj.ConstantEffectEnchantmentFactor = eval(this.ConstantEffectEnchantmentFactor);
            obj.ConstantEffectBarterFactor = eval(this.ConstantEffectBarterFactor);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MagicData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MagicData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MagicData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags.ToStringSafe()}");
                }
                if (printMask?.BaseCost ?? true)
                {
                    fg.AppendLine($"BaseCost => {BaseCost.ToStringSafe()}");
                }
                if (printMask?.Unused ?? true)
                {
                    fg.AppendLine($"Unused => {Unused.ToStringSafe()}");
                }
                if (printMask?.MagicSchool ?? true)
                {
                    fg.AppendLine($"MagicSchool => {MagicSchool.ToStringSafe()}");
                }
                if (printMask?.Resistance ?? true)
                {
                    fg.AppendLine($"Resistance => {Resistance.ToStringSafe()}");
                }
                if (printMask?.CounterEffectCount ?? true)
                {
                    fg.AppendLine($"CounterEffectCount => {CounterEffectCount.ToStringSafe()}");
                }
                if (printMask?.Light ?? true)
                {
                    fg.AppendLine($"Light => {Light.ToStringSafe()}");
                }
                if (printMask?.ProjectileSpeed ?? true)
                {
                    fg.AppendLine($"ProjectileSpeed => {ProjectileSpeed.ToStringSafe()}");
                }
                if (printMask?.EffectShader ?? true)
                {
                    fg.AppendLine($"EffectShader => {EffectShader.ToStringSafe()}");
                }
                if (printMask?.EnchantEffect ?? true)
                {
                    fg.AppendLine($"EnchantEffect => {EnchantEffect.ToStringSafe()}");
                }
                if (printMask?.CastingSound ?? true)
                {
                    fg.AppendLine($"CastingSound => {CastingSound.ToStringSafe()}");
                }
                if (printMask?.BoltSound ?? true)
                {
                    fg.AppendLine($"BoltSound => {BoltSound.ToStringSafe()}");
                }
                if (printMask?.HitSound ?? true)
                {
                    fg.AppendLine($"HitSound => {HitSound.ToStringSafe()}");
                }
                if (printMask?.AreaSound ?? true)
                {
                    fg.AppendLine($"AreaSound => {AreaSound.ToStringSafe()}");
                }
                if (printMask?.ConstantEffectEnchantmentFactor ?? true)
                {
                    fg.AppendLine($"ConstantEffectEnchantmentFactor => {ConstantEffectEnchantmentFactor.ToStringSafe()}");
                }
                if (printMask?.ConstantEffectBarterFactor ?? true)
                {
                    fg.AppendLine($"ConstantEffectBarterFactor => {ConstantEffectBarterFactor.ToStringSafe()}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MagicData_ErrorMask : IErrorMask, IErrorMask<MagicData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Flags;
        public Exception BaseCost;
        public Exception Unused;
        public Exception MagicSchool;
        public Exception Resistance;
        public Exception CounterEffectCount;
        public Exception Light;
        public Exception ProjectileSpeed;
        public Exception EffectShader;
        public Exception EnchantEffect;
        public Exception CastingSound;
        public Exception BoltSound;
        public Exception HitSound;
        public Exception AreaSound;
        public Exception ConstantEffectEnchantmentFactor;
        public Exception ConstantEffectBarterFactor;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            MagicData_FieldIndex enu = (MagicData_FieldIndex)index;
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                case MagicData_FieldIndex.BaseCost:
                    this.BaseCost = ex;
                    break;
                case MagicData_FieldIndex.Unused:
                    this.Unused = ex;
                    break;
                case MagicData_FieldIndex.MagicSchool:
                    this.MagicSchool = ex;
                    break;
                case MagicData_FieldIndex.Resistance:
                    this.Resistance = ex;
                    break;
                case MagicData_FieldIndex.CounterEffectCount:
                    this.CounterEffectCount = ex;
                    break;
                case MagicData_FieldIndex.Light:
                    this.Light = ex;
                    break;
                case MagicData_FieldIndex.ProjectileSpeed:
                    this.ProjectileSpeed = ex;
                    break;
                case MagicData_FieldIndex.EffectShader:
                    this.EffectShader = ex;
                    break;
                case MagicData_FieldIndex.EnchantEffect:
                    this.EnchantEffect = ex;
                    break;
                case MagicData_FieldIndex.CastingSound:
                    this.CastingSound = ex;
                    break;
                case MagicData_FieldIndex.BoltSound:
                    this.BoltSound = ex;
                    break;
                case MagicData_FieldIndex.HitSound:
                    this.HitSound = ex;
                    break;
                case MagicData_FieldIndex.AreaSound:
                    this.AreaSound = ex;
                    break;
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                    this.ConstantEffectEnchantmentFactor = ex;
                    break;
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    this.ConstantEffectBarterFactor = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            MagicData_FieldIndex enu = (MagicData_FieldIndex)index;
            switch (enu)
            {
                case MagicData_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                case MagicData_FieldIndex.BaseCost:
                    this.BaseCost = (Exception)obj;
                    break;
                case MagicData_FieldIndex.Unused:
                    this.Unused = (Exception)obj;
                    break;
                case MagicData_FieldIndex.MagicSchool:
                    this.MagicSchool = (Exception)obj;
                    break;
                case MagicData_FieldIndex.Resistance:
                    this.Resistance = (Exception)obj;
                    break;
                case MagicData_FieldIndex.CounterEffectCount:
                    this.CounterEffectCount = (Exception)obj;
                    break;
                case MagicData_FieldIndex.Light:
                    this.Light = (Exception)obj;
                    break;
                case MagicData_FieldIndex.ProjectileSpeed:
                    this.ProjectileSpeed = (Exception)obj;
                    break;
                case MagicData_FieldIndex.EffectShader:
                    this.EffectShader = (Exception)obj;
                    break;
                case MagicData_FieldIndex.EnchantEffect:
                    this.EnchantEffect = (Exception)obj;
                    break;
                case MagicData_FieldIndex.CastingSound:
                    this.CastingSound = (Exception)obj;
                    break;
                case MagicData_FieldIndex.BoltSound:
                    this.BoltSound = (Exception)obj;
                    break;
                case MagicData_FieldIndex.HitSound:
                    this.HitSound = (Exception)obj;
                    break;
                case MagicData_FieldIndex.AreaSound:
                    this.AreaSound = (Exception)obj;
                    break;
                case MagicData_FieldIndex.ConstantEffectEnchantmentFactor:
                    this.ConstantEffectEnchantmentFactor = (Exception)obj;
                    break;
                case MagicData_FieldIndex.ConstantEffectBarterFactor:
                    this.ConstantEffectBarterFactor = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("MagicData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            if (Flags != null)
            {
                fg.AppendLine($"Flags => {Flags.ToStringSafe()}");
            }
            if (BaseCost != null)
            {
                fg.AppendLine($"BaseCost => {BaseCost.ToStringSafe()}");
            }
            if (Unused != null)
            {
                fg.AppendLine($"Unused => {Unused.ToStringSafe()}");
            }
            if (MagicSchool != null)
            {
                fg.AppendLine($"MagicSchool => {MagicSchool.ToStringSafe()}");
            }
            if (Resistance != null)
            {
                fg.AppendLine($"Resistance => {Resistance.ToStringSafe()}");
            }
            if (CounterEffectCount != null)
            {
                fg.AppendLine($"CounterEffectCount => {CounterEffectCount.ToStringSafe()}");
            }
            if (Light != null)
            {
                fg.AppendLine($"Light => {Light.ToStringSafe()}");
            }
            if (ProjectileSpeed != null)
            {
                fg.AppendLine($"ProjectileSpeed => {ProjectileSpeed.ToStringSafe()}");
            }
            if (EffectShader != null)
            {
                fg.AppendLine($"EffectShader => {EffectShader.ToStringSafe()}");
            }
            if (EnchantEffect != null)
            {
                fg.AppendLine($"EnchantEffect => {EnchantEffect.ToStringSafe()}");
            }
            if (CastingSound != null)
            {
                fg.AppendLine($"CastingSound => {CastingSound.ToStringSafe()}");
            }
            if (BoltSound != null)
            {
                fg.AppendLine($"BoltSound => {BoltSound.ToStringSafe()}");
            }
            if (HitSound != null)
            {
                fg.AppendLine($"HitSound => {HitSound.ToStringSafe()}");
            }
            if (AreaSound != null)
            {
                fg.AppendLine($"AreaSound => {AreaSound.ToStringSafe()}");
            }
            if (ConstantEffectEnchantmentFactor != null)
            {
                fg.AppendLine($"ConstantEffectEnchantmentFactor => {ConstantEffectEnchantmentFactor.ToStringSafe()}");
            }
            if (ConstantEffectBarterFactor != null)
            {
                fg.AppendLine($"ConstantEffectBarterFactor => {ConstantEffectBarterFactor.ToStringSafe()}");
            }
        }
        #endregion

        #region Combine
        public MagicData_ErrorMask Combine(MagicData_ErrorMask rhs)
        {
            var ret = new MagicData_ErrorMask();
            ret.Flags = this.Flags.Combine(rhs.Flags);
            ret.BaseCost = this.BaseCost.Combine(rhs.BaseCost);
            ret.Unused = this.Unused.Combine(rhs.Unused);
            ret.MagicSchool = this.MagicSchool.Combine(rhs.MagicSchool);
            ret.Resistance = this.Resistance.Combine(rhs.Resistance);
            ret.CounterEffectCount = this.CounterEffectCount.Combine(rhs.CounterEffectCount);
            ret.Light = this.Light.Combine(rhs.Light);
            ret.ProjectileSpeed = this.ProjectileSpeed.Combine(rhs.ProjectileSpeed);
            ret.EffectShader = this.EffectShader.Combine(rhs.EffectShader);
            ret.EnchantEffect = this.EnchantEffect.Combine(rhs.EnchantEffect);
            ret.CastingSound = this.CastingSound.Combine(rhs.CastingSound);
            ret.BoltSound = this.BoltSound.Combine(rhs.BoltSound);
            ret.HitSound = this.HitSound.Combine(rhs.HitSound);
            ret.AreaSound = this.AreaSound.Combine(rhs.AreaSound);
            ret.ConstantEffectEnchantmentFactor = this.ConstantEffectEnchantmentFactor.Combine(rhs.ConstantEffectEnchantmentFactor);
            ret.ConstantEffectBarterFactor = this.ConstantEffectBarterFactor.Combine(rhs.ConstantEffectBarterFactor);
            return ret;
        }
        public static MagicData_ErrorMask Combine(MagicData_ErrorMask lhs, MagicData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class MagicData_CopyMask
    {
        #region Members
        public bool Flags;
        public bool BaseCost;
        public bool Unused;
        public bool MagicSchool;
        public bool Resistance;
        public bool CounterEffectCount;
        public bool Light;
        public bool ProjectileSpeed;
        public bool EffectShader;
        public bool EnchantEffect;
        public bool CastingSound;
        public bool BoltSound;
        public bool HitSound;
        public bool AreaSound;
        public bool ConstantEffectEnchantmentFactor;
        public bool ConstantEffectBarterFactor;
        #endregion

    }
    #endregion




    #endregion

}
