/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public abstract partial class NamedMajorRecord : MajorRecord, INamedMajorRecord, ILoquiObjectSetter, IEquatable<NamedMajorRecord>
    {
        ILoquiRegistration ILoquiObject.Registration => NamedMajorRecord_Registration.Instance;
        public new static NamedMajorRecord_Registration Registration => NamedMajorRecord_Registration.Instance;

        #region Ctor
        public NamedMajorRecord()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        protected readonly INotifyingItem<String> _Name = NotifyingItem.Factory<String>(markAsSet: false);
        public INotifyingItem<String> Name_Property => _Name;
        public String Name
        {
            get => this._Name.Item;
            set => this._Name.Set(value);
        }
        INotifyingItem<String> INamedMajorRecord.Name_Property => this.Name_Property;
        INotifyingItemGetter<String> INamedMajorRecordGetter.Name_Property => this.Name_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => NamedMajorRecordCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => NamedMajorRecordCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return NamedMajorRecordCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            NamedMajorRecord_Mask<bool> printMask = null)
        {
            return NamedMajorRecordCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            NamedMajorRecordCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new NamedMajorRecord_Mask<bool> GetHasBeenSetMask()
        {
            return NamedMajorRecordCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is NamedMajorRecord rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(NamedMajorRecord rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Name_Property.HasBeenSet != rhs.Name_Property.HasBeenSet) return false;
            if (Name_Property.HasBeenSet)
            {
                if (!object.Equals(Name, rhs.Name)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Name_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<NamedMajorRecord, NamedMajorRecord_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<NamedMajorRecord, NamedMajorRecord_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out NamedMajorRecord_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out NamedMajorRecord_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (NamedMajorRecord_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out NamedMajorRecord_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out NamedMajorRecord_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            NamedMajorRecordCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_XML_Internal(
            NamedMajorRecord item,
            XElement root,
            string name,
            bool doMasks,
            Func<NamedMajorRecord_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Name":
                    {
                        Exception subMask;
                        var tryGet = StringXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Name.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)NamedMajorRecord_FieldIndex.Name,
                            subMask);
                    }
                    break;
                default:
                    MajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<NamedMajorRecord, NamedMajorRecord_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<NamedMajorRecord, NamedMajorRecord_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out NamedMajorRecord_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out NamedMajorRecord_ErrorMask errorMask)
        {
            errorMask = (NamedMajorRecord_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out NamedMajorRecord_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out NamedMajorRecord_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            NamedMajorRecordCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        protected static void Fill_Binary_RecordTypes(
            NamedMajorRecord item,
            MutagenFrame frame,
            bool doMasks,
            Func<NamedMajorRecord_ErrorMask> errorMask)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                frame: frame,
                contentLength: out var contentLength);
            switch (nextRecordType.Type)
            {
                case "FULL":
                {
                    Exception subMask;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var tryGet = Mutagen.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        doMasks: doMasks,
                        errorMask: out subMask);
                    item._Name.SetIfSucceeded(tryGet);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        doMasks,
                        (int)NamedMajorRecord_FieldIndex.Name,
                        subMask);
                }
                break;
                default:
                    MajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    this._Name.Set(
                        (String)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            NamedMajorRecordCommon.Clear(this, cmds);
        }


        protected new static void CopyInInternal_NamedMajorRecord(NamedMajorRecord obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out NamedMajorRecord_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    obj._Name.Set(
                        (String)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, NamedMajorRecord obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface INamedMajorRecord : INamedMajorRecordGetter, IMajorRecord, ILoquiClass<INamedMajorRecord, INamedMajorRecordGetter>, ILoquiClass<NamedMajorRecord, INamedMajorRecordGetter>
    {
        new String Name { get; set; }
        new INotifyingItem<String> Name_Property { get; }

    }

    public interface INamedMajorRecordGetter : IMajorRecordGetter
    {
        #region Name
        String Name { get; }
        INotifyingItemGetter<String> Name_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum NamedMajorRecord_FieldIndex
    {
        Name = 5,
    }
    #endregion

    #region Registration
    public class NamedMajorRecord_Registration : ILoquiRegistration
    {
        public static readonly NamedMajorRecord_Registration Instance = new NamedMajorRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 17,
            version: 0);

        public const string GUID = "1de9f12c-ab00-42cf-aab3-9d778a849361";

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(NamedMajorRecord_Mask<>);

        public static readonly Type ErrorMaskType = typeof(NamedMajorRecord_ErrorMask);

        public static readonly Type ClassType = typeof(NamedMajorRecord);

        public static readonly Type GetterType = typeof(INamedMajorRecordGetter);

        public static readonly Type SetterType = typeof(INamedMajorRecord);

        public static readonly Type CommonType = typeof(NamedMajorRecordCommon);

        public const string FullName = "Mutagen.NamedMajorRecord";

        public const string Name = "NamedMajorRecord";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)NamedMajorRecord_FieldIndex.Name;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return "Name";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return typeof(String);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = FULL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class NamedMajorRecordCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this INamedMajorRecord item,
            INamedMajorRecordGetter rhs,
            NamedMajorRecord_CopyMask copyMask = null,
            INamedMajorRecordGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this INamedMajorRecord item,
            INamedMajorRecordGetter rhs,
            out NamedMajorRecord_ErrorMask errorMask,
            NamedMajorRecord_CopyMask copyMask = null,
            INamedMajorRecordGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this INamedMajorRecord item,
            INamedMajorRecordGetter rhs,
            INamedMajorRecordGetter def,
            bool doErrorMask,
            out NamedMajorRecord_ErrorMask errorMask,
            NamedMajorRecord_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            NamedMajorRecord_ErrorMask retErrorMask = null;
            Func<NamedMajorRecord_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new NamedMajorRecord_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this INamedMajorRecord item,
            INamedMajorRecordGetter rhs,
            INamedMajorRecordGetter def,
            bool doErrorMask,
            Func<NamedMajorRecord_ErrorMask> errorMask,
            NamedMajorRecord_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doErrorMask,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Name ?? true)
            {
                try
                {
                    item.Name_Property.SetToWithDefault(
                        rhs.Name_Property,
                        def?.Name_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)NamedMajorRecord_FieldIndex.Name, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            INamedMajorRecord obj,
            NotifyingFireParameters? cmds = null)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    obj.Name_Property.HasBeenSet = on;
                    break;
                default:
                    MajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            INamedMajorRecord obj,
            NotifyingUnsetParameters? cmds = null)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    obj.Name_Property.Unset(cmds);
                    break;
                default:
                    MajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            INamedMajorRecord obj)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return obj.Name_Property.HasBeenSet;
                default:
                    return MajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            INamedMajorRecordGetter obj)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    return obj.Name;
                default:
                    return MajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            INamedMajorRecord item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Name_Property.Unset(cmds.ToUnsetParams());
        }

        public static NamedMajorRecord_Mask<bool> GetEqualsMask(
            this INamedMajorRecordGetter item,
            INamedMajorRecordGetter rhs)
        {
            var ret = new NamedMajorRecord_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            INamedMajorRecordGetter item,
            INamedMajorRecordGetter rhs,
            NamedMajorRecord_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Name = item.Name_Property.Equals(rhs.Name_Property, (l, r) => object.Equals(l, r));
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this INamedMajorRecordGetter item,
            string name = null,
            NamedMajorRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this INamedMajorRecordGetter item,
            FileGeneration fg,
            string name = null,
            NamedMajorRecord_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(NamedMajorRecord)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(NamedMajorRecord)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this INamedMajorRecordGetter item,
            NamedMajorRecord_Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != item.Name_Property.HasBeenSet) return false;
            return true;
        }

        public static NamedMajorRecord_Mask<bool> GetHasBeenSetMask(INamedMajorRecordGetter item)
        {
            var ret = new NamedMajorRecord_Mask<bool>();
            ret.Name = item.Name_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            INamedMajorRecordGetter item,
            bool doMasks,
            out NamedMajorRecord_ErrorMask errorMask,
            string name = null)
        {
            NamedMajorRecord_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new NamedMajorRecord_ErrorMask()) : default(Func<NamedMajorRecord_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            INamedMajorRecordGetter item,
            bool doMasks,
            Func<NamedMajorRecord_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.NamedMajorRecord"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.NamedMajorRecord");
                    }
                    if (item.Name_Property.HasBeenSet)
                    {
                        Exception subMask;
                        StringXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Name),
                            item.Name,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)NamedMajorRecord_FieldIndex.Name,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            INamedMajorRecordGetter item,
            bool doMasks,
            out NamedMajorRecord_ErrorMask errorMask)
        {
            NamedMajorRecord_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new NamedMajorRecord_ErrorMask()) : default(Func<NamedMajorRecord_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            INamedMajorRecordGetter item,
            bool doMasks,
            Func<NamedMajorRecord_ErrorMask> errorMask)
        {
            try
            {
                MajorRecordCommon.Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    doMasks: doMasks,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    doMasks: doMasks,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            INamedMajorRecordGetter item,
            MutagenWriter writer,
            bool doMasks,
            Func<NamedMajorRecord_ErrorMask> errorMask)
        {
            MajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                doMasks: doMasks,
                errorMask: errorMask);
            {
                Exception subMask;
                Mutagen.Binary.StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Name,
                    doMasks: doMasks,
                    errorMask: out subMask,
                    header: NamedMajorRecord_Registration.FULL_HEADER,
                    nullable: false);
                ErrorMask.HandleErrorMask(
                    errorMask,
                    doMasks,
                    (int)NamedMajorRecord_FieldIndex.Name,
                    subMask);
            }
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class NamedMajorRecord_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<NamedMajorRecord_Mask<T>>
    {
        #region Ctors
        public NamedMajorRecord_Mask()
        {
        }

        public NamedMajorRecord_Mask(T initialValue)
        {
            this.Name = initialValue;
        }
        #endregion

        #region Members
        public T Name;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is NamedMajorRecord_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(NamedMajorRecord_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Name)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new NamedMajorRecord_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new NamedMajorRecord_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(NamedMajorRecord_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Name = eval(this.Name);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(NamedMajorRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, NamedMajorRecord_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(NamedMajorRecord_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name.ToStringSafe()}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class NamedMajorRecord_ErrorMask : MajorRecord_ErrorMask
    {
        #region Members
        public Exception Name;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    this.Name = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            NamedMajorRecord_FieldIndex enu = (NamedMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case NamedMajorRecord_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("NamedMajorRecord_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            if (Name != null)
            {
                fg.AppendLine($"Name => {Name.ToStringSafe()}");
            }
        }
        #endregion

        #region Combine
        public NamedMajorRecord_ErrorMask Combine(NamedMajorRecord_ErrorMask rhs)
        {
            var ret = new NamedMajorRecord_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            return ret;
        }
        public static NamedMajorRecord_ErrorMask Combine(NamedMajorRecord_ErrorMask lhs, NamedMajorRecord_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class NamedMajorRecord_CopyMask : MajorRecord_CopyMask
    {
        #region Members
        public bool Name;
        #endregion

    }
    #endregion




    #endregion

}
