/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class RaceData : IRaceData, ILoquiObjectSetter, IEquatable<RaceData>
    {
        ILoquiRegistration ILoquiObject.Registration => RaceData_Registration.Instance;
        public static RaceData_Registration Registration => RaceData_Registration.Instance;

        #region Ctor
        public RaceData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SkillBoosts
        private readonly INotifyingList<SkillBoost> _SkillBoosts = new NotifyingListBounded<SkillBoost>(max: 7);
        public INotifyingList<SkillBoost> SkillBoosts => _SkillBoosts;
        #region Interface Members
        INotifyingList<SkillBoost> IRaceData.SkillBoosts => _SkillBoosts;
        INotifyingListGetter<SkillBoost> IRaceDataGetter.SkillBoosts => _SkillBoosts;
        #endregion

        #endregion
        #region Fluff
        protected readonly INotifyingItem<Byte[]> _Fluff = NotifyingItem.Factory<Byte[]>(
            markAsSet: false,
            noNullFallback: () => new byte[4]);
        public INotifyingItem<Byte[]> Fluff_Property => _Fluff;
        public Byte[] Fluff
        {
            get => this._Fluff.Item;
            set => this._Fluff.Set(value);
        }
        INotifyingItem<Byte[]> IRaceData.Fluff_Property => this.Fluff_Property;
        INotifyingItemGetter<Byte[]> IRaceDataGetter.Fluff_Property => this.Fluff_Property;
        #endregion
        #region MaleHeight
        protected readonly INotifyingItem<Single> _MaleHeight = NotifyingItem.Factory<Single>(markAsSet: false);
        public INotifyingItem<Single> MaleHeight_Property => _MaleHeight;
        public Single MaleHeight
        {
            get => this._MaleHeight.Item;
            set => this._MaleHeight.Set(value);
        }
        INotifyingItem<Single> IRaceData.MaleHeight_Property => this.MaleHeight_Property;
        INotifyingItemGetter<Single> IRaceDataGetter.MaleHeight_Property => this.MaleHeight_Property;
        #endregion
        #region FemaleHeight
        protected readonly INotifyingItem<Single> _FemaleHeight = NotifyingItem.Factory<Single>(markAsSet: false);
        public INotifyingItem<Single> FemaleHeight_Property => _FemaleHeight;
        public Single FemaleHeight
        {
            get => this._FemaleHeight.Item;
            set => this._FemaleHeight.Set(value);
        }
        INotifyingItem<Single> IRaceData.FemaleHeight_Property => this.FemaleHeight_Property;
        INotifyingItemGetter<Single> IRaceDataGetter.FemaleHeight_Property => this.FemaleHeight_Property;
        #endregion
        #region MaleWeight
        protected readonly INotifyingItem<Single> _MaleWeight = NotifyingItem.Factory<Single>(markAsSet: false);
        public INotifyingItem<Single> MaleWeight_Property => _MaleWeight;
        public Single MaleWeight
        {
            get => this._MaleWeight.Item;
            set => this._MaleWeight.Set(value);
        }
        INotifyingItem<Single> IRaceData.MaleWeight_Property => this.MaleWeight_Property;
        INotifyingItemGetter<Single> IRaceDataGetter.MaleWeight_Property => this.MaleWeight_Property;
        #endregion
        #region FemaleWeight
        protected readonly INotifyingItem<Single> _FemaleWeight = NotifyingItem.Factory<Single>(markAsSet: false);
        public INotifyingItem<Single> FemaleWeight_Property => _FemaleWeight;
        public Single FemaleWeight
        {
            get => this._FemaleWeight.Item;
            set => this._FemaleWeight.Set(value);
        }
        INotifyingItem<Single> IRaceData.FemaleWeight_Property => this.FemaleWeight_Property;
        INotifyingItemGetter<Single> IRaceDataGetter.FemaleWeight_Property => this.FemaleWeight_Property;
        #endregion
        #region Flags
        protected readonly INotifyingItem<Race.Flag> _Flags = NotifyingItem.Factory<Race.Flag>(markAsSet: false);
        public INotifyingItem<Race.Flag> Flags_Property => _Flags;
        public Race.Flag Flags
        {
            get => this._Flags.Item;
            set => this._Flags.Set(value);
        }
        INotifyingItem<Race.Flag> IRaceData.Flags_Property => this.Flags_Property;
        INotifyingItemGetter<Race.Flag> IRaceDataGetter.Flags_Property => this.Flags_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => RaceDataCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => RaceDataCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => RaceDataCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RaceDataCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return RaceDataCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RaceData_Mask<bool> printMask = null)
        {
            return RaceDataCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RaceDataCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public RaceData_Mask<bool> GetHasBeenSetMask()
        {
            return RaceDataCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RaceData rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceData rhs)
        {
            if (rhs == null) return false;
            if (SkillBoosts.HasBeenSet != rhs.SkillBoosts.HasBeenSet) return false;
            if (SkillBoosts.HasBeenSet)
            {
                if (!SkillBoosts.SequenceEqual(rhs.SkillBoosts)) return false;
            }
            if (Fluff_Property.HasBeenSet != rhs.Fluff_Property.HasBeenSet) return false;
            if (Fluff_Property.HasBeenSet)
            {
                if (!Fluff.EqualsFast(rhs.Fluff)) return false;
            }
            if (MaleHeight_Property.HasBeenSet != rhs.MaleHeight_Property.HasBeenSet) return false;
            if (MaleHeight_Property.HasBeenSet)
            {
                if (MaleHeight != rhs.MaleHeight) return false;
            }
            if (FemaleHeight_Property.HasBeenSet != rhs.FemaleHeight_Property.HasBeenSet) return false;
            if (FemaleHeight_Property.HasBeenSet)
            {
                if (FemaleHeight != rhs.FemaleHeight) return false;
            }
            if (MaleWeight_Property.HasBeenSet != rhs.MaleWeight_Property.HasBeenSet) return false;
            if (MaleWeight_Property.HasBeenSet)
            {
                if (MaleWeight != rhs.MaleWeight) return false;
            }
            if (FemaleWeight_Property.HasBeenSet != rhs.FemaleWeight_Property.HasBeenSet) return false;
            if (FemaleWeight_Property.HasBeenSet)
            {
                if (FemaleWeight != rhs.FemaleWeight) return false;
            }
            if (Flags_Property.HasBeenSet != rhs.Flags_Property.HasBeenSet) return false;
            if (Flags_Property.HasBeenSet)
            {
                if (Flags != rhs.Flags) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (SkillBoosts.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(SkillBoosts).CombineHashCode(ret);
            }
            if (Fluff_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Fluff).CombineHashCode(ret);
            }
            if (MaleHeight_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MaleHeight).CombineHashCode(ret);
            }
            if (FemaleHeight_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FemaleHeight).CombineHashCode(ret);
            }
            if (MaleWeight_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MaleWeight).CombineHashCode(ret);
            }
            if (FemaleWeight_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FemaleWeight).CombineHashCode(ret);
            }
            if (Flags_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Flags).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static RaceData Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static RaceData Create_XML(
            XElement root,
            out RaceData_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static RaceData Create_XML(
            XElement root,
            bool doMasks,
            out RaceData_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (RaceData Object, RaceData_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            RaceData_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceData_ErrorMask()) : default(Func<RaceData_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static RaceData Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static RaceData Create_XML(
            string path,
            out RaceData_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static RaceData Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static RaceData Create_XML(
            Stream stream,
            out RaceData_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<RaceData, RaceData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RaceData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<RaceData, RaceData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RaceData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RaceData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out RaceData_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (RaceData_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out RaceData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out RaceData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            RaceDataCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static RaceData Create_XML_Internal(
            XElement root,
            Func<RaceData_ErrorMask> errorMask)
        {
            var ret = new RaceData();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            RaceData item,
            XElement root,
            string name,
            Func<RaceData_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "SkillBoosts":
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, SkillBoost_ErrorMask>>> subMask;
                        var listTryGet = ListXmlTranslation<SkillBoost, MaskItem<Exception, SkillBoost_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out MaskItem<Exception, SkillBoost_ErrorMask> listSubMask) =>
                            {
                                return LoquiXmlTranslation<SkillBoost, SkillBoost_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: listDoMasks,
                                    mask: out listSubMask);
                            }
                            );
                        item._SkillBoosts.SetIfSucceeded(listTryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceData_FieldIndex.SkillBoosts,
                            subMask);
                    }
                    break;
                case "Fluff":
                    {
                        Exception subMask;
                        var tryGet = ByteArrayXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._Fluff.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceData_FieldIndex.Fluff,
                            subMask);
                    }
                    break;
                case "MaleHeight":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._MaleHeight.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceData_FieldIndex.MaleHeight,
                            subMask);
                    }
                    break;
                case "FemaleHeight":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._FemaleHeight.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceData_FieldIndex.FemaleHeight,
                            subMask);
                    }
                    break;
                case "MaleWeight":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._MaleWeight.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceData_FieldIndex.MaleWeight,
                            subMask);
                    }
                    break;
                case "FemaleWeight":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._FemaleWeight.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceData_FieldIndex.FemaleWeight,
                            subMask);
                    }
                    break;
                case "Flags":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<Race.Flag>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        item._Flags.SetIfSucceeded(tryGet.Bubble((o) => o.Value));
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceData_FieldIndex.Flags,
                            subMask);
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static RaceData Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static RaceData Create_Binary(
            MutagenFrame frame,
            out RaceData_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static RaceData Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out RaceData_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (RaceData Object, RaceData_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            RaceData_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceData_ErrorMask()) : default(Func<RaceData_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static RaceData Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RaceData Create_Binary(
            string path,
            out RaceData_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RaceData Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RaceData Create_Binary(
            Stream stream,
            out RaceData_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<RaceData, RaceData_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out RaceData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<RaceData, RaceData_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out RaceData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out RaceData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out RaceData_ErrorMask errorMask)
        {
            errorMask = (RaceData_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out RaceData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out RaceData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            RaceDataCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static RaceData Create_Binary_Internal(
            MutagenFrame frame,
            Func<RaceData_ErrorMask> errorMask)
        {
            var ret = new RaceData();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseSubrecord(
                    frame,
                    RaceData_Registration.DATA_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            RaceData item,
            MutagenFrame frame,
            Func<RaceData_ErrorMask> errorMask)
        {
            if (frame.Complete) return;
            var SkillBooststryGet = Mutagen.Binary.ListBinaryTranslation<SkillBoost, MaskItem<Exception, SkillBoost_ErrorMask>>.Instance.ParseRepeatedItem(
                frame: frame,
                amount: 7,
                fieldIndex: (int)RaceData_FieldIndex.SkillBoosts,
                errorMask: errorMask,
                transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, SkillBoost_ErrorMask> listSubMask) =>
                {
                    return LoquiBinaryTranslation<SkillBoost, SkillBoost_ErrorMask>.Instance.Parse(
                        frame: r.Spawn(snapToFinalPosition: false),
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            item._SkillBoosts.SetIfSucceeded(SkillBooststryGet);
            if (frame.Complete) return;
            var FlufftryGet = Mutagen.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.Spawn(new ContentLength(4)),
                fieldIndex: (int)RaceData_FieldIndex.Fluff,
                errorMask: errorMask);
            item._Fluff.SetIfSucceeded(FlufftryGet);
            if (frame.Complete) return;
            item._MaleHeight.SetIfSucceeded(Mutagen.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)RaceData_FieldIndex.MaleHeight,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._FemaleHeight.SetIfSucceeded(Mutagen.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)RaceData_FieldIndex.FemaleHeight,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._MaleWeight.SetIfSucceeded(Mutagen.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)RaceData_FieldIndex.MaleWeight,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._FemaleWeight.SetIfSucceeded(Mutagen.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                fieldIndex: (int)RaceData_FieldIndex.FemaleWeight,
                errorMask: errorMask));
            if (frame.Complete) return;
            var FlagstryGet = Mutagen.Binary.EnumBinaryTranslation<Race.Flag>.Instance.Parse(
                frame: frame.Spawn(new ContentLength(2)),
                fieldIndex: (int)RaceData_FieldIndex.Flags,
                errorMask: errorMask);
            item._Flags.SetIfSucceeded(FlagstryGet);
        }

        #endregion

        public RaceData Copy(
            RaceData_CopyMask copyMask = null,
            IRaceDataGetter def = null)
        {
            return RaceData.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RaceData Copy(
            IRaceData item,
            RaceData_CopyMask copyMask = null,
            IRaceDataGetter def = null)
        {
            RaceData ret;
            if (item.GetType().Equals(typeof(RaceData)))
            {
                ret = new RaceData();
            }
            else
            {
                ret = (RaceData)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            RaceData_CopyMask copyMask = null,
            IRaceDataGetter def = null)
            where CopyType : class, IRaceData
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(RaceData)))
            {
                ret = new RaceData() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static RaceData Copy_ToLoqui(
            IRaceDataGetter item,
            RaceData_CopyMask copyMask = null,
            IRaceDataGetter def = null)
        {
            var ret = new RaceData();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                    this._SkillBoosts.SetTo((IEnumerable<SkillBoost>)obj, cmds);
                    break;
                case RaceData_FieldIndex.Fluff:
                    this._Fluff.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case RaceData_FieldIndex.MaleHeight:
                    this._MaleHeight.Set(
                        (Single)obj,
                        cmds);
                    break;
                case RaceData_FieldIndex.FemaleHeight:
                    this._FemaleHeight.Set(
                        (Single)obj,
                        cmds);
                    break;
                case RaceData_FieldIndex.MaleWeight:
                    this._MaleWeight.Set(
                        (Single)obj,
                        cmds);
                    break;
                case RaceData_FieldIndex.FemaleWeight:
                    this._FemaleWeight.Set(
                        (Single)obj,
                        cmds);
                    break;
                case RaceData_FieldIndex.Flags:
                    this._Flags.Set(
                        (Race.Flag)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RaceDataCommon.Clear(this, cmds);
        }


        public static RaceData Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RaceData();
            foreach (var pair in fields)
            {
                CopyInInternal_RaceData(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RaceData(RaceData obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RaceData_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                    obj._SkillBoosts.SetTo((IEnumerable<SkillBoost>)pair.Value, null);
                    break;
                case RaceData_FieldIndex.Fluff:
                    obj._Fluff.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case RaceData_FieldIndex.MaleHeight:
                    obj._MaleHeight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case RaceData_FieldIndex.FemaleHeight:
                    obj._FemaleHeight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case RaceData_FieldIndex.MaleWeight:
                    obj._MaleWeight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case RaceData_FieldIndex.FemaleWeight:
                    obj._FemaleWeight.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case RaceData_FieldIndex.Flags:
                    obj._Flags.Set(
                        (Race.Flag)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RaceData obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IRaceData : IRaceDataGetter, ILoquiClass<IRaceData, IRaceDataGetter>, ILoquiClass<RaceData, IRaceDataGetter>
    {
        new INotifyingList<SkillBoost> SkillBoosts { get; }
        new Byte[] Fluff { get; set; }
        new INotifyingItem<Byte[]> Fluff_Property { get; }

        new Single MaleHeight { get; set; }
        new INotifyingItem<Single> MaleHeight_Property { get; }

        new Single FemaleHeight { get; set; }
        new INotifyingItem<Single> FemaleHeight_Property { get; }

        new Single MaleWeight { get; set; }
        new INotifyingItem<Single> MaleWeight_Property { get; }

        new Single FemaleWeight { get; set; }
        new INotifyingItem<Single> FemaleWeight_Property { get; }

        new Race.Flag Flags { get; set; }
        new INotifyingItem<Race.Flag> Flags_Property { get; }

    }

    public interface IRaceDataGetter : ILoquiObject
    {
        #region SkillBoosts
        INotifyingListGetter<SkillBoost> SkillBoosts { get; }
        #endregion
        #region Fluff
        Byte[] Fluff { get; }
        INotifyingItemGetter<Byte[]> Fluff_Property { get; }

        #endregion
        #region MaleHeight
        Single MaleHeight { get; }
        INotifyingItemGetter<Single> MaleHeight_Property { get; }

        #endregion
        #region FemaleHeight
        Single FemaleHeight { get; }
        INotifyingItemGetter<Single> FemaleHeight_Property { get; }

        #endregion
        #region MaleWeight
        Single MaleWeight { get; }
        INotifyingItemGetter<Single> MaleWeight_Property { get; }

        #endregion
        #region FemaleWeight
        Single FemaleWeight { get; }
        INotifyingItemGetter<Single> FemaleWeight_Property { get; }

        #endregion
        #region Flags
        Race.Flag Flags { get; }
        INotifyingItemGetter<Race.Flag> Flags_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum RaceData_FieldIndex
    {
        SkillBoosts = 0,
        Fluff = 1,
        MaleHeight = 2,
        FemaleHeight = 3,
        MaleWeight = 4,
        FemaleWeight = 5,
        Flags = 6,
    }
    #endregion

    #region Registration
    public class RaceData_Registration : ILoquiRegistration
    {
        public static readonly RaceData_Registration Instance = new RaceData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 26,
            version: 0);

        public const string GUID = "0f6434d7-0cdc-430d-bd2a-9f7a099425f2";

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(RaceData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceData_ErrorMask);

        public static readonly Type ClassType = typeof(RaceData);

        public static readonly Type GetterType = typeof(IRaceDataGetter);

        public static readonly Type SetterType = typeof(IRaceData);

        public static readonly Type CommonType = typeof(RaceDataCommon);

        public const string FullName = "Mutagen.RaceData";

        public const string Name = "RaceData";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SKILLBOOSTS":
                    return (ushort)RaceData_FieldIndex.SkillBoosts;
                case "FLUFF":
                    return (ushort)RaceData_FieldIndex.Fluff;
                case "MALEHEIGHT":
                    return (ushort)RaceData_FieldIndex.MaleHeight;
                case "FEMALEHEIGHT":
                    return (ushort)RaceData_FieldIndex.FemaleHeight;
                case "MALEWEIGHT":
                    return (ushort)RaceData_FieldIndex.MaleWeight;
                case "FEMALEWEIGHT":
                    return (ushort)RaceData_FieldIndex.FemaleWeight;
                case "FLAGS":
                    return (ushort)RaceData_FieldIndex.Flags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                    return true;
                case RaceData_FieldIndex.Fluff:
                case RaceData_FieldIndex.MaleHeight:
                case RaceData_FieldIndex.FemaleHeight:
                case RaceData_FieldIndex.MaleWeight:
                case RaceData_FieldIndex.FemaleWeight:
                case RaceData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                    return true;
                case RaceData_FieldIndex.Fluff:
                case RaceData_FieldIndex.MaleHeight:
                case RaceData_FieldIndex.FemaleHeight:
                case RaceData_FieldIndex.MaleWeight:
                case RaceData_FieldIndex.FemaleWeight:
                case RaceData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                case RaceData_FieldIndex.Fluff:
                case RaceData_FieldIndex.MaleHeight:
                case RaceData_FieldIndex.FemaleHeight:
                case RaceData_FieldIndex.MaleWeight:
                case RaceData_FieldIndex.FemaleWeight:
                case RaceData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                    return "SkillBoosts";
                case RaceData_FieldIndex.Fluff:
                    return "Fluff";
                case RaceData_FieldIndex.MaleHeight:
                    return "MaleHeight";
                case RaceData_FieldIndex.FemaleHeight:
                    return "FemaleHeight";
                case RaceData_FieldIndex.MaleWeight:
                    return "MaleWeight";
                case RaceData_FieldIndex.FemaleWeight:
                    return "FemaleWeight";
                case RaceData_FieldIndex.Flags:
                    return "Flags";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                case RaceData_FieldIndex.Fluff:
                case RaceData_FieldIndex.MaleHeight:
                case RaceData_FieldIndex.FemaleHeight:
                case RaceData_FieldIndex.MaleWeight:
                case RaceData_FieldIndex.FemaleWeight:
                case RaceData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                case RaceData_FieldIndex.Fluff:
                case RaceData_FieldIndex.MaleHeight:
                case RaceData_FieldIndex.FemaleHeight:
                case RaceData_FieldIndex.MaleWeight:
                case RaceData_FieldIndex.FemaleWeight:
                case RaceData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                    return typeof(NotifyingList<SkillBoost>);
                case RaceData_FieldIndex.Fluff:
                    return typeof(Byte[]);
                case RaceData_FieldIndex.MaleHeight:
                    return typeof(Single);
                case RaceData_FieldIndex.FemaleHeight:
                    return typeof(Single);
                case RaceData_FieldIndex.MaleWeight:
                    return typeof(Single);
                case RaceData_FieldIndex.FemaleWeight:
                    return typeof(Single);
                case RaceData_FieldIndex.Flags:
                    return typeof(Race.Flag);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = DATA_HEADER;
        public const int NumStructFields = 7;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RaceDataCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IRaceData item,
            IRaceDataGetter rhs,
            RaceData_CopyMask copyMask = null,
            IRaceDataGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            RaceDataCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRaceData item,
            IRaceDataGetter rhs,
            out RaceData_ErrorMask errorMask,
            RaceData_CopyMask copyMask = null,
            IRaceDataGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            RaceDataCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRaceData item,
            IRaceDataGetter rhs,
            IRaceDataGetter def,
            bool doMasks,
            out RaceData_ErrorMask errorMask,
            RaceData_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            RaceData_ErrorMask retErrorMask = null;
            Func<RaceData_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new RaceData_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IRaceData item,
            IRaceDataGetter rhs,
            IRaceDataGetter def,
            bool doMasks,
            Func<RaceData_ErrorMask> errorMask,
            RaceData_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.SkillBoosts.Overall != CopyOption.Skip)
            {
                try
                {
                    item.SkillBoosts.SetToWithDefault(
                        rhs.SkillBoosts,
                        def?.SkillBoosts,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.SkillBoosts.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(SkillBoost);
                                    return SkillBoost.Copy(
                                        r,
                                        copyMask?.SkillBoosts?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.SkillBoosts.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceData_FieldIndex.SkillBoosts, ex);
                }
            }
            if (copyMask?.Fluff ?? true)
            {
                try
                {
                    item.Fluff_Property.SetToWithDefault(
                        rhs.Fluff_Property,
                        def?.Fluff_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceData_FieldIndex.Fluff, ex);
                }
            }
            if (copyMask?.MaleHeight ?? true)
            {
                try
                {
                    item.MaleHeight_Property.SetToWithDefault(
                        rhs.MaleHeight_Property,
                        def?.MaleHeight_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceData_FieldIndex.MaleHeight, ex);
                }
            }
            if (copyMask?.FemaleHeight ?? true)
            {
                try
                {
                    item.FemaleHeight_Property.SetToWithDefault(
                        rhs.FemaleHeight_Property,
                        def?.FemaleHeight_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceData_FieldIndex.FemaleHeight, ex);
                }
            }
            if (copyMask?.MaleWeight ?? true)
            {
                try
                {
                    item.MaleWeight_Property.SetToWithDefault(
                        rhs.MaleWeight_Property,
                        def?.MaleWeight_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceData_FieldIndex.MaleWeight, ex);
                }
            }
            if (copyMask?.FemaleWeight ?? true)
            {
                try
                {
                    item.FemaleWeight_Property.SetToWithDefault(
                        rhs.FemaleWeight_Property,
                        def?.FemaleWeight_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceData_FieldIndex.FemaleWeight, ex);
                }
            }
            if (copyMask?.Flags ?? true)
            {
                try
                {
                    item.Flags_Property.SetToWithDefault(
                        rhs.Flags_Property,
                        def?.Flags_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceData_FieldIndex.Flags, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRaceData obj,
            NotifyingFireParameters? cmds = null)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                    obj.SkillBoosts.HasBeenSet = on;
                    break;
                case RaceData_FieldIndex.Fluff:
                    obj.Fluff_Property.HasBeenSet = on;
                    break;
                case RaceData_FieldIndex.MaleHeight:
                    obj.MaleHeight_Property.HasBeenSet = on;
                    break;
                case RaceData_FieldIndex.FemaleHeight:
                    obj.FemaleHeight_Property.HasBeenSet = on;
                    break;
                case RaceData_FieldIndex.MaleWeight:
                    obj.MaleWeight_Property.HasBeenSet = on;
                    break;
                case RaceData_FieldIndex.FemaleWeight:
                    obj.FemaleWeight_Property.HasBeenSet = on;
                    break;
                case RaceData_FieldIndex.Flags:
                    obj.Flags_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRaceData obj,
            NotifyingUnsetParameters? cmds = null)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                    obj.SkillBoosts.Unset(cmds);
                    break;
                case RaceData_FieldIndex.Fluff:
                    obj.Fluff_Property.Unset(cmds);
                    break;
                case RaceData_FieldIndex.MaleHeight:
                    obj.MaleHeight_Property.Unset(cmds);
                    break;
                case RaceData_FieldIndex.FemaleHeight:
                    obj.FemaleHeight_Property.Unset(cmds);
                    break;
                case RaceData_FieldIndex.MaleWeight:
                    obj.MaleWeight_Property.Unset(cmds);
                    break;
                case RaceData_FieldIndex.FemaleWeight:
                    obj.FemaleWeight_Property.Unset(cmds);
                    break;
                case RaceData_FieldIndex.Flags:
                    obj.Flags_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRaceData obj)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                    return obj.SkillBoosts.HasBeenSet;
                case RaceData_FieldIndex.Fluff:
                    return obj.Fluff_Property.HasBeenSet;
                case RaceData_FieldIndex.MaleHeight:
                    return obj.MaleHeight_Property.HasBeenSet;
                case RaceData_FieldIndex.FemaleHeight:
                    return obj.FemaleHeight_Property.HasBeenSet;
                case RaceData_FieldIndex.MaleWeight:
                    return obj.MaleWeight_Property.HasBeenSet;
                case RaceData_FieldIndex.FemaleWeight:
                    return obj.FemaleWeight_Property.HasBeenSet;
                case RaceData_FieldIndex.Flags:
                    return obj.Flags_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IRaceDataGetter obj)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                    return obj.SkillBoosts;
                case RaceData_FieldIndex.Fluff:
                    return obj.Fluff;
                case RaceData_FieldIndex.MaleHeight:
                    return obj.MaleHeight;
                case RaceData_FieldIndex.FemaleHeight:
                    return obj.FemaleHeight;
                case RaceData_FieldIndex.MaleWeight:
                    return obj.MaleWeight;
                case RaceData_FieldIndex.FemaleWeight:
                    return obj.FemaleWeight;
                case RaceData_FieldIndex.Flags:
                    return obj.Flags;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IRaceData item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.SkillBoosts.Unset(cmds.ToUnsetParams());
            item.Fluff_Property.Unset(cmds.ToUnsetParams());
            item.MaleHeight_Property.Unset(cmds.ToUnsetParams());
            item.FemaleHeight_Property.Unset(cmds.ToUnsetParams());
            item.MaleWeight_Property.Unset(cmds.ToUnsetParams());
            item.FemaleWeight_Property.Unset(cmds.ToUnsetParams());
            item.Flags_Property.Unset(cmds.ToUnsetParams());
        }

        public static RaceData_Mask<bool> GetEqualsMask(
            this IRaceDataGetter item,
            IRaceDataGetter rhs)
        {
            var ret = new RaceData_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRaceDataGetter item,
            IRaceDataGetter rhs,
            RaceData_Mask<bool> ret)
        {
            if (rhs == null) return;
            if (item.SkillBoosts.HasBeenSet == rhs.SkillBoosts.HasBeenSet)
            {
                if (item.SkillBoosts.HasBeenSet)
                {
                    ret.SkillBoosts = new MaskItem<bool, IEnumerable<MaskItem<bool, SkillBoost_Mask<bool>>>>();
                    ret.SkillBoosts.Specific = item.SkillBoosts.SelectAgainst<SkillBoost, MaskItem<bool, SkillBoost_Mask<bool>>>(rhs.SkillBoosts, ((l, r) =>
                    {
                        MaskItem<bool, SkillBoost_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => SkillBoostCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.SkillBoosts.Overall);
                    ret.SkillBoosts.Overall = ret.SkillBoosts.Overall && ret.SkillBoosts.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.SkillBoosts = new MaskItem<bool, IEnumerable<MaskItem<bool, SkillBoost_Mask<bool>>>>();
                    ret.SkillBoosts.Overall = true;
                }
            }
            else
            {
                ret.SkillBoosts = new MaskItem<bool, IEnumerable<MaskItem<bool, SkillBoost_Mask<bool>>>>();
                ret.SkillBoosts.Overall = false;
            }
            ret.Fluff = item.Fluff_Property.Equals(rhs.Fluff_Property, (l, r) => l.EqualsFast(r));
            ret.MaleHeight = item.MaleHeight_Property.Equals(rhs.MaleHeight_Property, (l, r) => l == r);
            ret.FemaleHeight = item.FemaleHeight_Property.Equals(rhs.FemaleHeight_Property, (l, r) => l == r);
            ret.MaleWeight = item.MaleWeight_Property.Equals(rhs.MaleWeight_Property, (l, r) => l == r);
            ret.FemaleWeight = item.FemaleWeight_Property.Equals(rhs.FemaleWeight_Property, (l, r) => l == r);
            ret.Flags = item.Flags_Property.Equals(rhs.Flags_Property, (l, r) => l == r);
        }

        public static string ToString(
            this IRaceDataGetter item,
            string name = null,
            RaceData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRaceDataGetter item,
            FileGeneration fg,
            string name = null,
            RaceData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RaceData)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RaceData)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.SkillBoosts?.Overall ?? true)
                {
                    fg.AppendLine("SkillBoosts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.SkillBoosts)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {item.Fluff}");
                }
                if (printMask?.MaleHeight ?? true)
                {
                    fg.AppendLine($"MaleHeight => {item.MaleHeight}");
                }
                if (printMask?.FemaleHeight ?? true)
                {
                    fg.AppendLine($"FemaleHeight => {item.FemaleHeight}");
                }
                if (printMask?.MaleWeight ?? true)
                {
                    fg.AppendLine($"MaleWeight => {item.MaleWeight}");
                }
                if (printMask?.FemaleWeight ?? true)
                {
                    fg.AppendLine($"FemaleWeight => {item.FemaleWeight}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {item.Flags}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRaceDataGetter item,
            RaceData_Mask<bool?> checkMask)
        {
            if (checkMask.SkillBoosts.Overall.HasValue && checkMask.SkillBoosts.Overall.Value != item.SkillBoosts.HasBeenSet) return false;
            if (checkMask.Fluff.HasValue && checkMask.Fluff.Value != item.Fluff_Property.HasBeenSet) return false;
            if (checkMask.MaleHeight.HasValue && checkMask.MaleHeight.Value != item.MaleHeight_Property.HasBeenSet) return false;
            if (checkMask.FemaleHeight.HasValue && checkMask.FemaleHeight.Value != item.FemaleHeight_Property.HasBeenSet) return false;
            if (checkMask.MaleWeight.HasValue && checkMask.MaleWeight.Value != item.MaleWeight_Property.HasBeenSet) return false;
            if (checkMask.FemaleWeight.HasValue && checkMask.FemaleWeight.Value != item.FemaleWeight_Property.HasBeenSet) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != item.Flags_Property.HasBeenSet) return false;
            return true;
        }

        public static RaceData_Mask<bool> GetHasBeenSetMask(IRaceDataGetter item)
        {
            var ret = new RaceData_Mask<bool>();
            ret.SkillBoosts = new MaskItem<bool, IEnumerable<MaskItem<bool, SkillBoost_Mask<bool>>>>(item.SkillBoosts.HasBeenSet, item.SkillBoosts.Select((i) => new MaskItem<bool, SkillBoost_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Fluff = item.Fluff_Property.HasBeenSet;
            ret.MaleHeight = item.MaleHeight_Property.HasBeenSet;
            ret.FemaleHeight = item.FemaleHeight_Property.HasBeenSet;
            ret.MaleWeight = item.MaleWeight_Property.HasBeenSet;
            ret.FemaleWeight = item.FemaleWeight_Property.HasBeenSet;
            ret.Flags = item.Flags_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IRaceDataGetter item,
            bool doMasks,
            out RaceData_ErrorMask errorMask,
            string name = null)
        {
            RaceData_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceData_ErrorMask()) : default(Func<RaceData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IRaceDataGetter item,
            Func<RaceData_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.RaceData"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.RaceData");
                    }
                    if (item.SkillBoosts.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, SkillBoost_ErrorMask>>> subMask;
                        ListXmlTranslation<SkillBoost, MaskItem<Exception, SkillBoost_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.SkillBoosts),
                            item: item.SkillBoosts,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            transl: (SkillBoost subItem, bool listDoMasks, out MaskItem<Exception, SkillBoost_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<ISkillBoostGetter, SkillBoost_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    mask: out SkillBoost_ErrorMask loquiMask);
                                listSubMask = loquiMask == null ? null : new MaskItem<Exception, SkillBoost_ErrorMask>(null, loquiMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceData_FieldIndex.SkillBoosts,
                            subMask);
                    }
                    if (item.Fluff_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteArrayXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Fluff),
                            item.Fluff,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceData_FieldIndex.Fluff,
                            subMask);
                    }
                    if (item.MaleHeight_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.MaleHeight),
                            item.MaleHeight,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceData_FieldIndex.MaleHeight,
                            subMask);
                    }
                    if (item.FemaleHeight_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FemaleHeight),
                            item.FemaleHeight,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceData_FieldIndex.FemaleHeight,
                            subMask);
                    }
                    if (item.MaleWeight_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.MaleWeight),
                            item.MaleWeight,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceData_FieldIndex.MaleWeight,
                            subMask);
                    }
                    if (item.FemaleWeight_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FemaleWeight),
                            item.FemaleWeight,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceData_FieldIndex.FemaleWeight,
                            subMask);
                    }
                    if (item.Flags_Property.HasBeenSet)
                    {
                        Exception subMask;
                        EnumXmlTranslation<Race.Flag>.Instance.Write(
                            writer,
                            nameof(item.Flags),
                            item.Flags,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)RaceData_FieldIndex.Flags,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IRaceDataGetter item,
            bool doMasks,
            out RaceData_ErrorMask errorMask)
        {
            RaceData_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceData_ErrorMask()) : default(Func<RaceData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IRaceDataGetter item,
            Func<RaceData_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: RaceData_Registration.DATA_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            IRaceDataGetter item,
            MutagenWriter writer,
            Func<RaceData_ErrorMask> errorMask)
        {
            Mutagen.Binary.ListBinaryTranslation<SkillBoost, MaskItem<Exception, SkillBoost_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.SkillBoosts,
                fieldIndex: (int)RaceData_FieldIndex.SkillBoosts,
                errorMask: errorMask,
                transl: (SkillBoost subItem, bool listDoMasks, out MaskItem<Exception, SkillBoost_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<SkillBoost, SkillBoost_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
            Mutagen.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Fluff_Property,
                fieldIndex: (int)RaceData_FieldIndex.Fluff,
                errorMask: errorMask);
            Mutagen.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaleHeight_Property,
                fieldIndex: (int)RaceData_FieldIndex.MaleHeight,
                errorMask: errorMask);
            Mutagen.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FemaleHeight_Property,
                fieldIndex: (int)RaceData_FieldIndex.FemaleHeight,
                errorMask: errorMask);
            Mutagen.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaleWeight_Property,
                fieldIndex: (int)RaceData_FieldIndex.MaleWeight,
                errorMask: errorMask);
            Mutagen.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FemaleWeight_Property,
                fieldIndex: (int)RaceData_FieldIndex.FemaleWeight,
                errorMask: errorMask);
            Mutagen.Binary.EnumBinaryTranslation<Race.Flag>.Instance.Write(
                writer,
                item.Flags_Property,
                length: new ContentLength(2),
                fieldIndex: (int)RaceData_FieldIndex.Flags,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RaceData_Mask<T> : IMask<T>, IEquatable<RaceData_Mask<T>>
    {
        #region Ctors
        public RaceData_Mask()
        {
        }

        public RaceData_Mask(T initialValue)
        {
            this.SkillBoosts = new MaskItem<T, IEnumerable<MaskItem<T, SkillBoost_Mask<T>>>>(initialValue, null);
            this.Fluff = initialValue;
            this.MaleHeight = initialValue;
            this.FemaleHeight = initialValue;
            this.MaleWeight = initialValue;
            this.FemaleWeight = initialValue;
            this.Flags = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItem<T, SkillBoost_Mask<T>>>> SkillBoosts;
        public T Fluff;
        public T MaleHeight;
        public T FemaleHeight;
        public T MaleWeight;
        public T FemaleWeight;
        public T Flags;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RaceData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.SkillBoosts, rhs.SkillBoosts)) return false;
            if (!object.Equals(this.Fluff, rhs.Fluff)) return false;
            if (!object.Equals(this.MaleHeight, rhs.MaleHeight)) return false;
            if (!object.Equals(this.FemaleHeight, rhs.FemaleHeight)) return false;
            if (!object.Equals(this.MaleWeight, rhs.MaleWeight)) return false;
            if (!object.Equals(this.FemaleWeight, rhs.FemaleWeight)) return false;
            if (!object.Equals(this.Flags, rhs.Flags)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.SkillBoosts?.GetHashCode());
            ret = ret.CombineHashCode(this.Fluff?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleHeight?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleWeight?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleWeight?.GetHashCode());
            ret = ret.CombineHashCode(this.Flags?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (SkillBoosts != null)
            {
                if (!eval(this.SkillBoosts.Overall)) return false;
                if (SkillBoosts.Specific != null)
                {
                    foreach (var item in SkillBoosts.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            if (!eval(this.Fluff)) return false;
            if (!eval(this.MaleHeight)) return false;
            if (!eval(this.FemaleHeight)) return false;
            if (!eval(this.MaleWeight)) return false;
            if (!eval(this.FemaleWeight)) return false;
            if (!eval(this.Flags)) return false;
            return true;
        }
        #endregion

        #region Translate
        public RaceData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RaceData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RaceData_Mask<R> obj, Func<T, R> eval)
        {
            if (SkillBoosts != null)
            {
                obj.SkillBoosts = new MaskItem<R, IEnumerable<MaskItem<R, SkillBoost_Mask<R>>>>();
                obj.SkillBoosts.Overall = eval(this.SkillBoosts.Overall);
                if (SkillBoosts.Specific != null)
                {
                    List<MaskItem<R, SkillBoost_Mask<R>>> l = new List<MaskItem<R, SkillBoost_Mask<R>>>();
                    obj.SkillBoosts.Specific = l;
                    foreach (var item in SkillBoosts.Specific)
                    {
                        MaskItem<R, SkillBoost_Mask<R>> mask = default(MaskItem<R, SkillBoost_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, SkillBoost_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.Fluff = eval(this.Fluff);
            obj.MaleHeight = eval(this.MaleHeight);
            obj.FemaleHeight = eval(this.FemaleHeight);
            obj.MaleWeight = eval(this.MaleWeight);
            obj.FemaleWeight = eval(this.FemaleWeight);
            obj.Flags = eval(this.Flags);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.SkillBoosts.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RaceData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RaceData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RaceData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.SkillBoosts?.Overall ?? true)
                {
                    fg.AppendLine("SkillBoosts =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (SkillBoosts.Overall != null)
                        {
                            fg.AppendLine(SkillBoosts.Overall.ToString());
                        }
                        if (SkillBoosts.Specific != null)
                        {
                            foreach (var subItem in SkillBoosts.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Fluff ?? true)
                {
                    fg.AppendLine($"Fluff => {Fluff.ToStringSafe()}");
                }
                if (printMask?.MaleHeight ?? true)
                {
                    fg.AppendLine($"MaleHeight => {MaleHeight.ToStringSafe()}");
                }
                if (printMask?.FemaleHeight ?? true)
                {
                    fg.AppendLine($"FemaleHeight => {FemaleHeight.ToStringSafe()}");
                }
                if (printMask?.MaleWeight ?? true)
                {
                    fg.AppendLine($"MaleWeight => {MaleWeight.ToStringSafe()}");
                }
                if (printMask?.FemaleWeight ?? true)
                {
                    fg.AppendLine($"FemaleWeight => {FemaleWeight.ToStringSafe()}");
                }
                if (printMask?.Flags ?? true)
                {
                    fg.AppendLine($"Flags => {Flags.ToStringSafe()}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RaceData_ErrorMask : IErrorMask, IErrorMask<RaceData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, SkillBoost_ErrorMask>>> SkillBoosts;
        public Exception Fluff;
        public Exception MaleHeight;
        public Exception FemaleHeight;
        public Exception MaleWeight;
        public Exception FemaleWeight;
        public Exception Flags;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                    this.SkillBoosts = new MaskItem<Exception, IEnumerable<MaskItem<Exception, SkillBoost_ErrorMask>>>(ex, null);
                    break;
                case RaceData_FieldIndex.Fluff:
                    this.Fluff = ex;
                    break;
                case RaceData_FieldIndex.MaleHeight:
                    this.MaleHeight = ex;
                    break;
                case RaceData_FieldIndex.FemaleHeight:
                    this.FemaleHeight = ex;
                    break;
                case RaceData_FieldIndex.MaleWeight:
                    this.MaleWeight = ex;
                    break;
                case RaceData_FieldIndex.FemaleWeight:
                    this.FemaleWeight = ex;
                    break;
                case RaceData_FieldIndex.Flags:
                    this.Flags = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoosts:
                    this.SkillBoosts = (MaskItem<Exception, IEnumerable<MaskItem<Exception, SkillBoost_ErrorMask>>>)obj;
                    break;
                case RaceData_FieldIndex.Fluff:
                    this.Fluff = (Exception)obj;
                    break;
                case RaceData_FieldIndex.MaleHeight:
                    this.MaleHeight = (Exception)obj;
                    break;
                case RaceData_FieldIndex.FemaleHeight:
                    this.FemaleHeight = (Exception)obj;
                    break;
                case RaceData_FieldIndex.MaleWeight:
                    this.MaleWeight = (Exception)obj;
                    break;
                case RaceData_FieldIndex.FemaleWeight:
                    this.FemaleWeight = (Exception)obj;
                    break;
                case RaceData_FieldIndex.Flags:
                    this.Flags = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RaceData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            if (SkillBoosts != null)
            {
                fg.AppendLine("SkillBoosts =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (SkillBoosts.Overall != null)
                    {
                        fg.AppendLine(SkillBoosts.Overall.ToString());
                    }
                    if (SkillBoosts.Specific != null)
                    {
                        foreach (var subItem in SkillBoosts.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem.ToString(fg);
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (Fluff != null)
            {
                fg.AppendLine($"Fluff => {Fluff.ToStringSafe()}");
            }
            if (MaleHeight != null)
            {
                fg.AppendLine($"MaleHeight => {MaleHeight.ToStringSafe()}");
            }
            if (FemaleHeight != null)
            {
                fg.AppendLine($"FemaleHeight => {FemaleHeight.ToStringSafe()}");
            }
            if (MaleWeight != null)
            {
                fg.AppendLine($"MaleWeight => {MaleWeight.ToStringSafe()}");
            }
            if (FemaleWeight != null)
            {
                fg.AppendLine($"FemaleWeight => {FemaleWeight.ToStringSafe()}");
            }
            if (Flags != null)
            {
                fg.AppendLine($"Flags => {Flags.ToStringSafe()}");
            }
        }
        #endregion

        #region Combine
        public RaceData_ErrorMask Combine(RaceData_ErrorMask rhs)
        {
            var ret = new RaceData_ErrorMask();
            ret.SkillBoosts = new MaskItem<Exception, IEnumerable<MaskItem<Exception, SkillBoost_ErrorMask>>>(this.SkillBoosts.Overall.Combine(rhs.SkillBoosts.Overall), new List<MaskItem<Exception, SkillBoost_ErrorMask>>(this.SkillBoosts.Specific.And(rhs.SkillBoosts.Specific)));
            ret.Fluff = this.Fluff.Combine(rhs.Fluff);
            ret.MaleHeight = this.MaleHeight.Combine(rhs.MaleHeight);
            ret.FemaleHeight = this.FemaleHeight.Combine(rhs.FemaleHeight);
            ret.MaleWeight = this.MaleWeight.Combine(rhs.MaleWeight);
            ret.FemaleWeight = this.FemaleWeight.Combine(rhs.FemaleWeight);
            ret.Flags = this.Flags.Combine(rhs.Flags);
            return ret;
        }
        public static RaceData_ErrorMask Combine(RaceData_ErrorMask lhs, RaceData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class RaceData_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, SkillBoost_CopyMask> SkillBoosts;
        public bool Fluff;
        public bool MaleHeight;
        public bool FemaleHeight;
        public bool MaleWeight;
        public bool FemaleWeight;
        public bool Flags;
        #endregion

    }
    #endregion




    #endregion

}
