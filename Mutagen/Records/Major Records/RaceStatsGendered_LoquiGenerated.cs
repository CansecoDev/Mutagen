/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using Mutagen;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class RaceStatsGendered : IRaceStatsGendered, ILoquiObjectSetter, IEquatable<RaceStatsGendered>
    {
        ILoquiRegistration ILoquiObject.Registration => RaceStatsGendered_Registration.Instance;
        public static RaceStatsGendered_Registration Registration => RaceStatsGendered_Registration.Instance;

        #region Ctor
        public RaceStatsGendered()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Male
        private readonly INotifyingItem<RaceStats> _Male = new NotifyingItem<RaceStats>();
        public INotifyingItem<RaceStats> Male_Property => this._Male;
        RaceStats IRaceStatsGenderedGetter.Male => this.Male;
        public RaceStats Male { get => _Male.Item; set => _Male.Item = value; }
        INotifyingItem<RaceStats> IRaceStatsGendered.Male_Property => this.Male_Property;
        INotifyingItemGetter<RaceStats> IRaceStatsGenderedGetter.Male_Property => this.Male_Property;
        #endregion
        #region Female
        private readonly INotifyingItem<RaceStats> _Female = new NotifyingItem<RaceStats>();
        public INotifyingItem<RaceStats> Female_Property => this._Female;
        RaceStats IRaceStatsGenderedGetter.Female => this.Female;
        public RaceStats Female { get => _Female.Item; set => _Female.Item = value; }
        INotifyingItem<RaceStats> IRaceStatsGendered.Female_Property => this.Female_Property;
        INotifyingItemGetter<RaceStats> IRaceStatsGenderedGetter.Female_Property => this.Female_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => RaceStatsGenderedCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => RaceStatsGenderedCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => RaceStatsGenderedCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RaceStatsGenderedCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return RaceStatsGenderedCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RaceStatsGendered_Mask<bool> printMask = null)
        {
            return RaceStatsGenderedCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RaceStatsGenderedCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public RaceStatsGendered_Mask<bool> GetHasBeenSetMask()
        {
            return RaceStatsGenderedCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RaceStatsGendered rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceStatsGendered rhs)
        {
            if (rhs == null) return false;
            if (Male_Property.HasBeenSet != rhs.Male_Property.HasBeenSet) return false;
            if (Male_Property.HasBeenSet)
            {
                if (!object.Equals(Male, rhs.Male)) return false;
            }
            if (Female_Property.HasBeenSet != rhs.Female_Property.HasBeenSet) return false;
            if (Female_Property.HasBeenSet)
            {
                if (!object.Equals(Female, rhs.Female)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Male_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Male).CombineHashCode(ret);
            }
            if (Female_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Female).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static RaceStatsGendered Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static RaceStatsGendered Create_XML(
            XElement root,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static RaceStatsGendered Create_XML(
            XElement root,
            bool doMasks,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (RaceStatsGendered Object, RaceStatsGendered_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            RaceStatsGendered_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceStatsGendered_ErrorMask()) : default(Func<RaceStatsGendered_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static RaceStatsGendered Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static RaceStatsGendered Create_XML(
            string path,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static RaceStatsGendered Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static RaceStatsGendered Create_XML(
            Stream stream,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<RaceStatsGendered, RaceStatsGendered_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RaceStatsGendered_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<RaceStatsGendered, RaceStatsGendered_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RaceStatsGendered_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RaceStatsGendered_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out RaceStatsGendered_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (RaceStatsGendered_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out RaceStatsGendered_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out RaceStatsGendered_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            RaceStatsGenderedCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static RaceStatsGendered Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<RaceStatsGendered_ErrorMask> errorMask)
        {
            var ret = new RaceStatsGendered();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            RaceStatsGendered item,
            XElement root,
            string name,
            bool doMasks,
            Func<RaceStatsGendered_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Male":
                    {
                        MaskItem<Exception, RaceStats_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<RaceStats, RaceStats_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Male.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)RaceStatsGendered_FieldIndex.Male,
                            subMask);
                    }
                    break;
                case "Female":
                    {
                        MaskItem<Exception, RaceStats_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<RaceStats, RaceStats_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Female.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)RaceStatsGendered_FieldIndex.Female,
                            subMask);
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static RaceStatsGendered Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static RaceStatsGendered Create_Binary(
            MutagenFrame frame,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static RaceStatsGendered Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (RaceStatsGendered Object, RaceStatsGendered_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            RaceStatsGendered_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceStatsGendered_ErrorMask()) : default(Func<RaceStatsGendered_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static RaceStatsGendered Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RaceStatsGendered Create_Binary(
            string path,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static RaceStatsGendered Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static RaceStatsGendered Create_Binary(
            Stream stream,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<RaceStatsGendered, RaceStatsGendered_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out RaceStatsGendered_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<RaceStatsGendered, RaceStatsGendered_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out RaceStatsGendered_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out RaceStatsGendered_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            errorMask = (RaceStatsGendered_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            RaceStatsGenderedCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static RaceStatsGendered Create_Binary_Internal(
            MutagenFrame frame,
            bool doMasks,
            Func<RaceStatsGendered_ErrorMask> errorMask)
        {
            var ret = new RaceStatsGendered();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseSubrecord(
                    frame,
                    RaceStatsGendered_Registration.ATTR_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            RaceStatsGendered item,
            MutagenFrame frame,
            bool doMasks,
            Func<RaceStatsGendered_ErrorMask> errorMask)
        {
            if (frame.Complete) return;
            item._Male.SetIfSucceeded(LoquiBinaryTranslation<RaceStats, RaceStats_ErrorMask>.Instance.Parse(
                frame: frame.Spawn(snapToFinalPosition: false),
                doMasks: doMasks,
                fieldIndex: (int)RaceStatsGendered_FieldIndex.Male,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._Female.SetIfSucceeded(LoquiBinaryTranslation<RaceStats, RaceStats_ErrorMask>.Instance.Parse(
                frame: frame.Spawn(snapToFinalPosition: false),
                doMasks: doMasks,
                fieldIndex: (int)RaceStatsGendered_FieldIndex.Female,
                errorMask: errorMask));
        }

        #endregion

        public RaceStatsGendered Copy(
            RaceStatsGendered_CopyMask copyMask = null,
            IRaceStatsGenderedGetter def = null)
        {
            return RaceStatsGendered.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RaceStatsGendered Copy(
            IRaceStatsGendered item,
            RaceStatsGendered_CopyMask copyMask = null,
            IRaceStatsGenderedGetter def = null)
        {
            RaceStatsGendered ret;
            if (item.GetType().Equals(typeof(RaceStatsGendered)))
            {
                ret = new RaceStatsGendered();
            }
            else
            {
                ret = (RaceStatsGendered)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            RaceStatsGendered_CopyMask copyMask = null,
            IRaceStatsGenderedGetter def = null)
            where CopyType : class, IRaceStatsGendered
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(RaceStatsGendered)))
            {
                ret = new RaceStatsGendered() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static RaceStatsGendered Copy_ToLoqui(
            IRaceStatsGenderedGetter item,
            RaceStatsGendered_CopyMask copyMask = null,
            IRaceStatsGenderedGetter def = null)
        {
            var ret = new RaceStatsGendered();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    this._Male.Set(
                        (RaceStats)obj,
                        cmds);
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    this._Female.Set(
                        (RaceStats)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RaceStatsGenderedCommon.Clear(this, cmds);
        }


        public static RaceStatsGendered Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RaceStatsGendered();
            foreach (var pair in fields)
            {
                CopyInInternal_RaceStatsGendered(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RaceStatsGendered(RaceStatsGendered obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RaceStatsGendered_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    obj._Male.Set(
                        (RaceStats)pair.Value,
                        null);
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    obj._Female.Set(
                        (RaceStats)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RaceStatsGendered obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IRaceStatsGendered : IRaceStatsGenderedGetter, ILoquiClass<IRaceStatsGendered, IRaceStatsGenderedGetter>, ILoquiClass<RaceStatsGendered, IRaceStatsGenderedGetter>
    {
        new RaceStats Male { get; set; }
        new INotifyingItem<RaceStats> Male_Property { get; }

        new RaceStats Female { get; set; }
        new INotifyingItem<RaceStats> Female_Property { get; }

    }

    public interface IRaceStatsGenderedGetter : ILoquiObject
    {
        #region Male
        RaceStats Male { get; }
        INotifyingItemGetter<RaceStats> Male_Property { get; }

        #endregion
        #region Female
        RaceStats Female { get; }
        INotifyingItemGetter<RaceStats> Female_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum RaceStatsGendered_FieldIndex
    {
        Male = 0,
        Female = 1,
    }
    #endregion

    #region Registration
    public class RaceStatsGendered_Registration : ILoquiRegistration
    {
        public static readonly RaceStatsGendered_Registration Instance = new RaceStatsGendered_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 30,
            version: 0);

        public const string GUID = "f6f95fe6-ec9c-4ddd-9713-820547d6c485";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(RaceStatsGendered_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceStatsGendered_ErrorMask);

        public static readonly Type ClassType = typeof(RaceStatsGendered);

        public static readonly Type GetterType = typeof(IRaceStatsGenderedGetter);

        public static readonly Type SetterType = typeof(IRaceStatsGendered);

        public static readonly Type CommonType = typeof(RaceStatsGenderedCommon);

        public const string FullName = "Mutagen.RaceStatsGendered";

        public const string Name = "RaceStatsGendered";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MALE":
                    return (ushort)RaceStatsGendered_FieldIndex.Male;
                case "FEMALE":
                    return (ushort)RaceStatsGendered_FieldIndex.Female;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    return "Male";
                case RaceStatsGendered_FieldIndex.Female:
                    return "Female";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                case RaceStatsGendered_FieldIndex.Female:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    return typeof(RaceStats);
                case RaceStatsGendered_FieldIndex.Female:
                    return typeof(RaceStats);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType ATTR_HEADER = new RecordType("ATTR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ATTR_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RaceStatsGenderedCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IRaceStatsGendered item,
            IRaceStatsGenderedGetter rhs,
            RaceStatsGendered_CopyMask copyMask = null,
            IRaceStatsGenderedGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            RaceStatsGenderedCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRaceStatsGendered item,
            IRaceStatsGenderedGetter rhs,
            out RaceStatsGendered_ErrorMask errorMask,
            RaceStatsGendered_CopyMask copyMask = null,
            IRaceStatsGenderedGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            RaceStatsGenderedCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRaceStatsGendered item,
            IRaceStatsGenderedGetter rhs,
            IRaceStatsGenderedGetter def,
            bool doMasks,
            out RaceStatsGendered_ErrorMask errorMask,
            RaceStatsGendered_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            RaceStatsGendered_ErrorMask retErrorMask = null;
            Func<RaceStatsGendered_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new RaceStatsGendered_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IRaceStatsGendered item,
            IRaceStatsGenderedGetter rhs,
            IRaceStatsGenderedGetter def,
            bool doMasks,
            Func<RaceStatsGendered_ErrorMask> errorMask,
            RaceStatsGendered_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.Male.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Male_Property.SetToWithDefault(
                        rhs.Male_Property,
                        def?.Male_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Male.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RaceStatsCommon.CopyFieldsFrom(
                                        item: item.Male,
                                        rhs: rhs.Male,
                                        def: def?.Male,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<RaceStats_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Male.Specific == null)
                                            {
                                                baseMask.Male = new MaskItem<Exception, RaceStats_ErrorMask>(null, new RaceStats_ErrorMask());
                                            }
                                            return baseMask.Male.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Male.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RaceStats);
                                    return RaceStats.Copy(
                                        r,
                                        copyMask?.Male?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Male?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceStatsGendered_FieldIndex.Male, ex);
                }
            }
            if (copyMask?.Female.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Female_Property.SetToWithDefault(
                        rhs.Female_Property,
                        def?.Female_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Female.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RaceStatsCommon.CopyFieldsFrom(
                                        item: item.Female,
                                        rhs: rhs.Female,
                                        def: def?.Female,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<RaceStats_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Female.Specific == null)
                                            {
                                                baseMask.Female = new MaskItem<Exception, RaceStats_ErrorMask>(null, new RaceStats_ErrorMask());
                                            }
                                            return baseMask.Female.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Female.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RaceStats);
                                    return RaceStats.Copy(
                                        r,
                                        copyMask?.Female?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Female?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)RaceStatsGendered_FieldIndex.Female, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRaceStatsGendered obj,
            NotifyingFireParameters? cmds = null)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    obj.Male_Property.HasBeenSet = on;
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    obj.Female_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRaceStatsGendered obj,
            NotifyingUnsetParameters? cmds = null)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    obj.Male_Property.Unset(cmds);
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    obj.Female_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRaceStatsGendered obj)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    return obj.Male_Property.HasBeenSet;
                case RaceStatsGendered_FieldIndex.Female:
                    return obj.Female_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IRaceStatsGenderedGetter obj)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    return obj.Male;
                case RaceStatsGendered_FieldIndex.Female:
                    return obj.Female;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IRaceStatsGendered item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Male_Property.Unset(cmds.ToUnsetParams());
            item.Female_Property.Unset(cmds.ToUnsetParams());
        }

        public static RaceStatsGendered_Mask<bool> GetEqualsMask(
            this IRaceStatsGenderedGetter item,
            IRaceStatsGenderedGetter rhs)
        {
            var ret = new RaceStatsGendered_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRaceStatsGenderedGetter item,
            IRaceStatsGenderedGetter rhs,
            RaceStatsGendered_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Male = item.Male_Property.LoquiEqualsHelper(rhs.Male_Property, (loqLhs, loqRhs) => RaceStatsCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Female = item.Female_Property.LoquiEqualsHelper(rhs.Female_Property, (loqLhs, loqRhs) => RaceStatsCommon.GetEqualsMask(loqLhs, loqRhs));
        }

        public static string ToString(
            this IRaceStatsGenderedGetter item,
            string name = null,
            RaceStatsGendered_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRaceStatsGenderedGetter item,
            FileGeneration fg,
            string name = null,
            RaceStatsGendered_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RaceStatsGendered)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RaceStatsGendered)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Male?.Overall ?? true)
                {
                    item.Male?.ToString(fg, "Male");
                }
                if (printMask?.Female?.Overall ?? true)
                {
                    item.Female?.ToString(fg, "Female");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRaceStatsGenderedGetter item,
            RaceStatsGendered_Mask<bool?> checkMask)
        {
            if (checkMask.Male.Overall.HasValue && checkMask.Male.Overall.Value != item.Male_Property.HasBeenSet) return false;
            if (checkMask.Male.Specific != null && (item.Male_Property.Item == null || !item.Male_Property.Item.HasBeenSet(checkMask.Male.Specific))) return false;
            if (checkMask.Female.Overall.HasValue && checkMask.Female.Overall.Value != item.Female_Property.HasBeenSet) return false;
            if (checkMask.Female.Specific != null && (item.Female_Property.Item == null || !item.Female_Property.Item.HasBeenSet(checkMask.Female.Specific))) return false;
            return true;
        }

        public static RaceStatsGendered_Mask<bool> GetHasBeenSetMask(IRaceStatsGenderedGetter item)
        {
            var ret = new RaceStatsGendered_Mask<bool>();
            ret.Male = new MaskItem<bool, RaceStats_Mask<bool>>(item.Male_Property.HasBeenSet, RaceStatsCommon.GetHasBeenSetMask(item.Male_Property.Item));
            ret.Female = new MaskItem<bool, RaceStats_Mask<bool>>(item.Female_Property.HasBeenSet, RaceStatsCommon.GetHasBeenSetMask(item.Female_Property.Item));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IRaceStatsGenderedGetter item,
            bool doMasks,
            out RaceStatsGendered_ErrorMask errorMask,
            string name = null)
        {
            RaceStatsGendered_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceStatsGendered_ErrorMask()) : default(Func<RaceStatsGendered_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IRaceStatsGenderedGetter item,
            bool doMasks,
            Func<RaceStatsGendered_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.RaceStatsGendered"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.RaceStatsGendered");
                    }
                    if (item.Male_Property.HasBeenSet)
                    {
                        MaskItem<Exception, RaceStats_ErrorMask> subMask;
                        LoquiXmlTranslation<IRaceStatsGetter, RaceStats_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Male,
                            name: nameof(item.Male),
                            doMasks: doMasks,
                            mask: out RaceStats_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, RaceStats_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)RaceStatsGendered_FieldIndex.Male,
                            subMask);
                    }
                    if (item.Female_Property.HasBeenSet)
                    {
                        MaskItem<Exception, RaceStats_ErrorMask> subMask;
                        LoquiXmlTranslation<IRaceStatsGetter, RaceStats_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Female,
                            name: nameof(item.Female),
                            doMasks: doMasks,
                            mask: out RaceStats_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, RaceStats_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)RaceStatsGendered_FieldIndex.Female,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IRaceStatsGenderedGetter item,
            bool doMasks,
            out RaceStatsGendered_ErrorMask errorMask)
        {
            RaceStatsGendered_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RaceStatsGendered_ErrorMask()) : default(Func<RaceStatsGendered_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IRaceStatsGenderedGetter item,
            bool doMasks,
            Func<RaceStatsGendered_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: RaceStatsGendered_Registration.ATTR_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            IRaceStatsGenderedGetter item,
            MutagenWriter writer,
            bool doMasks,
            Func<RaceStatsGendered_ErrorMask> errorMask)
        {
            LoquiBinaryTranslation<RaceStats, RaceStats_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Male_Property,
                doMasks: doMasks,
                fieldIndex: (int)RaceStatsGendered_FieldIndex.Male,
                errorMask: errorMask);
            LoquiBinaryTranslation<RaceStats, RaceStats_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Female_Property,
                doMasks: doMasks,
                fieldIndex: (int)RaceStatsGendered_FieldIndex.Female,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RaceStatsGendered_Mask<T> : IMask<T>, IEquatable<RaceStatsGendered_Mask<T>>
    {
        #region Ctors
        public RaceStatsGendered_Mask()
        {
        }

        public RaceStatsGendered_Mask(T initialValue)
        {
            this.Male = new MaskItem<T, RaceStats_Mask<T>>(initialValue, new RaceStats_Mask<T>(initialValue));
            this.Female = new MaskItem<T, RaceStats_Mask<T>>(initialValue, new RaceStats_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, RaceStats_Mask<T>> Male { get; set; }
        public MaskItem<T, RaceStats_Mask<T>> Female { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RaceStatsGendered_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RaceStatsGendered_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Male, rhs.Male)) return false;
            if (!object.Equals(this.Female, rhs.Female)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Male?.GetHashCode());
            ret = ret.CombineHashCode(this.Female?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (Male != null)
            {
                if (!eval(this.Male.Overall)) return false;
                if (Male.Specific != null && !Male.Specific.AllEqual(eval)) return false;
            }
            if (Female != null)
            {
                if (!eval(this.Female.Overall)) return false;
                if (Female.Specific != null && !Female.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public RaceStatsGendered_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RaceStatsGendered_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RaceStatsGendered_Mask<R> obj, Func<T, R> eval)
        {
            if (this.Male != null)
            {
                obj.Male = new MaskItem<R, RaceStats_Mask<R>>();
                obj.Male.Overall = eval(this.Male.Overall);
                if (this.Male.Specific != null)
                {
                    obj.Male.Specific = this.Male.Specific.Translate(eval);
                }
            }
            if (this.Female != null)
            {
                obj.Female = new MaskItem<R, RaceStats_Mask<R>>();
                obj.Female.Overall = eval(this.Female.Overall);
                if (this.Female.Specific != null)
                {
                    obj.Female.Specific = this.Female.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RaceStatsGendered_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RaceStatsGendered_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RaceStatsGendered_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Male?.Overall ?? true)
                {
                    Male.ToString(fg);
                }
                if (printMask?.Female?.Overall ?? true)
                {
                    Female.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RaceStatsGendered_ErrorMask : IErrorMask, IErrorMask<RaceStatsGendered_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, RaceStats_ErrorMask> Male;
        public MaskItem<Exception, RaceStats_ErrorMask> Female;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    this.Male = new MaskItem<Exception, RaceStats_ErrorMask>(ex, null);
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    this.Female = new MaskItem<Exception, RaceStats_ErrorMask>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RaceStatsGendered_FieldIndex enu = (RaceStatsGendered_FieldIndex)index;
            switch (enu)
            {
                case RaceStatsGendered_FieldIndex.Male:
                    this.Male = (MaskItem<Exception, RaceStats_ErrorMask>)obj;
                    break;
                case RaceStatsGendered_FieldIndex.Female:
                    this.Female = (MaskItem<Exception, RaceStats_ErrorMask>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RaceStatsGendered_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            if (Male != null)
            {
                Male.ToString(fg);
            }
            if (Female != null)
            {
                Female.ToString(fg);
            }
        }
        #endregion

        #region Combine
        public RaceStatsGendered_ErrorMask Combine(RaceStatsGendered_ErrorMask rhs)
        {
            var ret = new RaceStatsGendered_ErrorMask();
            ret.Male = new MaskItem<Exception, RaceStats_ErrorMask>(this.Male.Overall.Combine(rhs.Male.Overall), ((IErrorMask<RaceStats_ErrorMask>)this.Male.Specific).Combine(rhs.Male.Specific));
            ret.Female = new MaskItem<Exception, RaceStats_ErrorMask>(this.Female.Overall.Combine(rhs.Female.Overall), ((IErrorMask<RaceStats_ErrorMask>)this.Female.Specific).Combine(rhs.Female.Specific));
            return ret;
        }
        public static RaceStatsGendered_ErrorMask Combine(RaceStatsGendered_ErrorMask lhs, RaceStatsGendered_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class RaceStatsGendered_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, RaceStats_CopyMask> Male;
        public MaskItem<CopyOption, RaceStats_CopyMask> Female;
        #endregion

    }
    #endregion




    #endregion

}
