/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using Mutagen;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class Race : NamedMajorRecord, IRace, ILoquiObjectSetter, IEquatable<Race>
    {
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static Race_Registration Registration => Race_Registration.Instance;

        #region Ctor
        public Race()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Description
        protected readonly INotifyingItem<String> _Description = NotifyingItem.Factory<String>(markAsSet: false);
        public INotifyingItem<String> Description_Property => _Description;
        public String Description
        {
            get => this._Description.Item;
            set => this._Description.Set(value);
        }
        INotifyingItem<String> IRace.Description_Property => this.Description_Property;
        INotifyingItemGetter<String> IRaceGetter.Description_Property => this.Description_Property;
        #endregion
        #region Spells
        private readonly INotifyingList<FormID> _Spells = new NotifyingList<FormID>();
        public INotifyingList<FormID> Spells => _Spells;
        #region Interface Members
        INotifyingList<FormID> IRace.Spells => _Spells;
        INotifyingListGetter<FormID> IRaceGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Relations
        private readonly INotifyingList<Relation> _Relations = new NotifyingList<Relation>();
        public INotifyingList<Relation> Relations => _Relations;
        #region Interface Members
        INotifyingList<Relation> IRace.Relations => _Relations;
        INotifyingListGetter<Relation> IRaceGetter.Relations => _Relations;
        #endregion

        #endregion
        #region Data
        private readonly INotifyingItem<RaceData> _Data = new NotifyingItem<RaceData>();
        public INotifyingItem<RaceData> Data_Property => this._Data;
        RaceData IRaceGetter.Data => this.Data;
        public RaceData Data { get => _Data.Item; set => _Data.Item = value; }
        INotifyingItem<RaceData> IRace.Data_Property => this.Data_Property;
        INotifyingItemGetter<RaceData> IRaceGetter.Data_Property => this.Data_Property;
        #endregion
        #region Voices
        private readonly INotifyingItem<RaceVoices> _Voices = new NotifyingItem<RaceVoices>();
        public INotifyingItem<RaceVoices> Voices_Property => this._Voices;
        RaceVoices IRaceGetter.Voices => this.Voices;
        public RaceVoices Voices { get => _Voices.Item; set => _Voices.Item = value; }
        INotifyingItem<RaceVoices> IRace.Voices_Property => this.Voices_Property;
        INotifyingItemGetter<RaceVoices> IRaceGetter.Voices_Property => this.Voices_Property;
        #endregion
        #region DefaultHair
        private readonly INotifyingItem<RaceHair> _DefaultHair = new NotifyingItem<RaceHair>();
        public INotifyingItem<RaceHair> DefaultHair_Property => this._DefaultHair;
        RaceHair IRaceGetter.DefaultHair => this.DefaultHair;
        public RaceHair DefaultHair { get => _DefaultHair.Item; set => _DefaultHair.Item = value; }
        INotifyingItem<RaceHair> IRace.DefaultHair_Property => this.DefaultHair_Property;
        INotifyingItemGetter<RaceHair> IRaceGetter.DefaultHair_Property => this.DefaultHair_Property;
        #endregion
        #region DefaultHairColor
        protected readonly INotifyingItem<Byte> _DefaultHairColor = NotifyingItem.Factory<Byte>(markAsSet: false);
        public INotifyingItem<Byte> DefaultHairColor_Property => _DefaultHairColor;
        public Byte DefaultHairColor
        {
            get => this._DefaultHairColor.Item;
            set => this._DefaultHairColor.Set(value);
        }
        INotifyingItem<Byte> IRace.DefaultHairColor_Property => this.DefaultHairColor_Property;
        INotifyingItemGetter<Byte> IRaceGetter.DefaultHairColor_Property => this.DefaultHairColor_Property;
        #endregion
        #region FaceGenMainClamp
        protected readonly INotifyingItem<Int32> _FaceGenMainClamp = NotifyingItem.Factory<Int32>(markAsSet: false);
        public INotifyingItem<Int32> FaceGenMainClamp_Property => _FaceGenMainClamp;
        public Int32 FaceGenMainClamp
        {
            get => this._FaceGenMainClamp.Item;
            set => this._FaceGenMainClamp.Set(value);
        }
        INotifyingItem<Int32> IRace.FaceGenMainClamp_Property => this.FaceGenMainClamp_Property;
        INotifyingItemGetter<Int32> IRaceGetter.FaceGenMainClamp_Property => this.FaceGenMainClamp_Property;
        #endregion
        #region FaceGenFaceClamp
        protected readonly INotifyingItem<Int32> _FaceGenFaceClamp = NotifyingItem.Factory<Int32>(markAsSet: false);
        public INotifyingItem<Int32> FaceGenFaceClamp_Property => _FaceGenFaceClamp;
        public Int32 FaceGenFaceClamp
        {
            get => this._FaceGenFaceClamp.Item;
            set => this._FaceGenFaceClamp.Set(value);
        }
        INotifyingItem<Int32> IRace.FaceGenFaceClamp_Property => this.FaceGenFaceClamp_Property;
        INotifyingItemGetter<Int32> IRaceGetter.FaceGenFaceClamp_Property => this.FaceGenFaceClamp_Property;
        #endregion
        #region RaceStats
        private readonly INotifyingItem<RaceStatsGendered> _RaceStats = new NotifyingItem<RaceStatsGendered>();
        public INotifyingItem<RaceStatsGendered> RaceStats_Property => this._RaceStats;
        RaceStatsGendered IRaceGetter.RaceStats => this.RaceStats;
        public RaceStatsGendered RaceStats { get => _RaceStats.Item; set => _RaceStats.Item = value; }
        INotifyingItem<RaceStatsGendered> IRace.RaceStats_Property => this.RaceStats_Property;
        INotifyingItemGetter<RaceStatsGendered> IRaceGetter.RaceStats_Property => this.RaceStats_Property;
        #endregion
        #region FaceData
        private readonly INotifyingList<FacePart> _FaceData = new NotifyingList<FacePart>();
        public INotifyingList<FacePart> FaceData => _FaceData;
        #region Interface Members
        INotifyingList<FacePart> IRace.FaceData => _FaceData;
        INotifyingListGetter<FacePart> IRaceGetter.FaceData => _FaceData;
        #endregion

        #endregion
        #region BodyData
        private readonly INotifyingItem<GenderedBodyData> _BodyData = new NotifyingItem<GenderedBodyData>();
        public INotifyingItem<GenderedBodyData> BodyData_Property => this._BodyData;
        GenderedBodyData IRaceGetter.BodyData => this.BodyData;
        public GenderedBodyData BodyData { get => _BodyData.Item; set => _BodyData.Item = value; }
        INotifyingItem<GenderedBodyData> IRace.BodyData_Property => this.BodyData_Property;
        INotifyingItemGetter<GenderedBodyData> IRaceGetter.BodyData_Property => this.BodyData_Property;
        #endregion
        #region Hairs
        private readonly INotifyingList<FormID> _Hairs = new NotifyingList<FormID>();
        public INotifyingList<FormID> Hairs => _Hairs;
        #region Interface Members
        INotifyingList<FormID> IRace.Hairs => _Hairs;
        INotifyingListGetter<FormID> IRaceGetter.Hairs => _Hairs;
        #endregion

        #endregion
        #region Eyes
        private readonly INotifyingList<FormID> _Eyes = new NotifyingList<FormID>();
        public INotifyingList<FormID> Eyes => _Eyes;
        #region Interface Members
        INotifyingList<FormID> IRace.Eyes => _Eyes;
        INotifyingListGetter<FormID> IRaceGetter.Eyes => _Eyes;
        #endregion

        #endregion
        #region FaceGenData
        private readonly INotifyingItem<FaceGenData> _FaceGenData = new NotifyingItem<FaceGenData>();
        public INotifyingItem<FaceGenData> FaceGenData_Property => this._FaceGenData;
        FaceGenData IRaceGetter.FaceGenData => this.FaceGenData;
        public FaceGenData FaceGenData { get => _FaceGenData.Item; set => _FaceGenData.Item = value; }
        INotifyingItem<FaceGenData> IRace.FaceGenData_Property => this.FaceGenData_Property;
        INotifyingItemGetter<FaceGenData> IRaceGetter.FaceGenData_Property => this.FaceGenData_Property;
        #endregion
        #region Unknown
        protected readonly INotifyingItem<Byte[]> _Unknown = NotifyingItem.Factory<Byte[]>(
            markAsSet: false,
            noNullFallback: () => new byte[2]);
        public INotifyingItem<Byte[]> Unknown_Property => _Unknown;
        public Byte[] Unknown
        {
            get => this._Unknown.Item;
            set => this._Unknown.Set(value);
        }
        INotifyingItem<Byte[]> IRace.Unknown_Property => this.Unknown_Property;
        INotifyingItemGetter<Byte[]> IRaceGetter.Unknown_Property => this.Unknown_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => RaceCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => RaceCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => RaceCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RaceCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return RaceCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Race_Mask<bool> printMask = null)
        {
            return RaceCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RaceCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new Race_Mask<bool> GetHasBeenSetMask()
        {
            return RaceCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Race rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Race rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Description_Property.HasBeenSet != rhs.Description_Property.HasBeenSet) return false;
            if (Description_Property.HasBeenSet)
            {
                if (!object.Equals(Description, rhs.Description)) return false;
            }
            if (Spells.HasBeenSet != rhs.Spells.HasBeenSet) return false;
            if (Spells.HasBeenSet)
            {
                if (!Spells.SequenceEqual(rhs.Spells)) return false;
            }
            if (Relations.HasBeenSet != rhs.Relations.HasBeenSet) return false;
            if (Relations.HasBeenSet)
            {
                if (!Relations.SequenceEqual(rhs.Relations)) return false;
            }
            if (Data_Property.HasBeenSet != rhs.Data_Property.HasBeenSet) return false;
            if (Data_Property.HasBeenSet)
            {
                if (!object.Equals(Data, rhs.Data)) return false;
            }
            if (Voices_Property.HasBeenSet != rhs.Voices_Property.HasBeenSet) return false;
            if (Voices_Property.HasBeenSet)
            {
                if (!object.Equals(Voices, rhs.Voices)) return false;
            }
            if (DefaultHair_Property.HasBeenSet != rhs.DefaultHair_Property.HasBeenSet) return false;
            if (DefaultHair_Property.HasBeenSet)
            {
                if (!object.Equals(DefaultHair, rhs.DefaultHair)) return false;
            }
            if (DefaultHairColor_Property.HasBeenSet != rhs.DefaultHairColor_Property.HasBeenSet) return false;
            if (DefaultHairColor_Property.HasBeenSet)
            {
                if (DefaultHairColor != rhs.DefaultHairColor) return false;
            }
            if (FaceGenMainClamp_Property.HasBeenSet != rhs.FaceGenMainClamp_Property.HasBeenSet) return false;
            if (FaceGenMainClamp_Property.HasBeenSet)
            {
                if (FaceGenMainClamp != rhs.FaceGenMainClamp) return false;
            }
            if (FaceGenFaceClamp_Property.HasBeenSet != rhs.FaceGenFaceClamp_Property.HasBeenSet) return false;
            if (FaceGenFaceClamp_Property.HasBeenSet)
            {
                if (FaceGenFaceClamp != rhs.FaceGenFaceClamp) return false;
            }
            if (RaceStats_Property.HasBeenSet != rhs.RaceStats_Property.HasBeenSet) return false;
            if (RaceStats_Property.HasBeenSet)
            {
                if (!object.Equals(RaceStats, rhs.RaceStats)) return false;
            }
            if (FaceData.HasBeenSet != rhs.FaceData.HasBeenSet) return false;
            if (FaceData.HasBeenSet)
            {
                if (!FaceData.SequenceEqual(rhs.FaceData)) return false;
            }
            if (BodyData_Property.HasBeenSet != rhs.BodyData_Property.HasBeenSet) return false;
            if (BodyData_Property.HasBeenSet)
            {
                if (!object.Equals(BodyData, rhs.BodyData)) return false;
            }
            if (Hairs.HasBeenSet != rhs.Hairs.HasBeenSet) return false;
            if (Hairs.HasBeenSet)
            {
                if (!Hairs.SequenceEqual(rhs.Hairs)) return false;
            }
            if (Eyes.HasBeenSet != rhs.Eyes.HasBeenSet) return false;
            if (Eyes.HasBeenSet)
            {
                if (!Eyes.SequenceEqual(rhs.Eyes)) return false;
            }
            if (FaceGenData_Property.HasBeenSet != rhs.FaceGenData_Property.HasBeenSet) return false;
            if (FaceGenData_Property.HasBeenSet)
            {
                if (!object.Equals(FaceGenData, rhs.FaceGenData)) return false;
            }
            if (Unknown_Property.HasBeenSet != rhs.Unknown_Property.HasBeenSet) return false;
            if (Unknown_Property.HasBeenSet)
            {
                if (!Unknown.EqualsFast(rhs.Unknown)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Description_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Description).CombineHashCode(ret);
            }
            if (Spells.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Spells).CombineHashCode(ret);
            }
            if (Relations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Relations).CombineHashCode(ret);
            }
            if (Data_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Data).CombineHashCode(ret);
            }
            if (Voices_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Voices).CombineHashCode(ret);
            }
            if (DefaultHair_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DefaultHair).CombineHashCode(ret);
            }
            if (DefaultHairColor_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DefaultHairColor).CombineHashCode(ret);
            }
            if (FaceGenMainClamp_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FaceGenMainClamp).CombineHashCode(ret);
            }
            if (FaceGenFaceClamp_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FaceGenFaceClamp).CombineHashCode(ret);
            }
            if (RaceStats_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RaceStats).CombineHashCode(ret);
            }
            if (FaceData.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FaceData).CombineHashCode(ret);
            }
            if (BodyData_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(BodyData).CombineHashCode(ret);
            }
            if (Hairs.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Hairs).CombineHashCode(ret);
            }
            if (Eyes.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Eyes).CombineHashCode(ret);
            }
            if (FaceGenData_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FaceGenData).CombineHashCode(ret);
            }
            if (Unknown_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Unknown).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Race Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Race Create_XML(
            XElement root,
            out Race_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Race Create_XML(
            XElement root,
            bool doMasks,
            out Race_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Race Object, Race_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Race_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Race_ErrorMask()) : default(Func<Race_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Race Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Race Create_XML(
            string path,
            out Race_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Race Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Race Create_XML(
            Stream stream,
            out Race_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Race, Race_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Race, Race_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Race_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Race_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Race_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Race_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Race_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Race_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            RaceCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Race Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            var ret = new Race();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Race item,
            XElement root,
            string name,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Description":
                    {
                        Exception subMask;
                        var tryGet = StringXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Description.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Description,
                            subMask);
                    }
                    break;
                case "Spells":
                    {
                        MaskItem<Exception, IEnumerable<Exception>> subMask;
                        var listTryGet = ListXmlTranslation<FormID, Exception>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                            {
                                return FormIDXmlTranslation.Instance.Parse(
                                    r,
                                    nullable: false,
                                    doMasks: listDoMasks,
                                    errorMask: out listSubMask).Bubble((o) => o.Value);
                            }
                            );
                        item._Spells.SetIfSucceeded(listTryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Spells,
                            subMask);
                    }
                    break;
                case "Relations":
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>> subMask;
                        var listTryGet = ListXmlTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                            {
                                return LoquiXmlTranslation<Relation, Relation_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: listDoMasks,
                                    mask: out listSubMask);
                            }
                            );
                        item._Relations.SetIfSucceeded(listTryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Relations,
                            subMask);
                    }
                    break;
                case "Data":
                    {
                        MaskItem<Exception, RaceData_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<RaceData, RaceData_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Data.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Data,
                            subMask);
                    }
                    break;
                case "Voices":
                    {
                        MaskItem<Exception, RaceVoices_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<RaceVoices, RaceVoices_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Voices.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Voices,
                            subMask);
                    }
                    break;
                case "DefaultHair":
                    {
                        MaskItem<Exception, RaceHair_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<RaceHair, RaceHair_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._DefaultHair.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.DefaultHair,
                            subMask);
                    }
                    break;
                case "DefaultHairColor":
                    {
                        Exception subMask;
                        var tryGet = ByteXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._DefaultHairColor.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.DefaultHairColor,
                            subMask);
                    }
                    break;
                case "FaceGenMainClamp":
                    {
                        Exception subMask;
                        var tryGet = Int32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._FaceGenMainClamp.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.FaceGenMainClamp,
                            subMask);
                    }
                    break;
                case "FaceGenFaceClamp":
                    {
                        Exception subMask;
                        var tryGet = Int32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._FaceGenFaceClamp.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.FaceGenFaceClamp,
                            subMask);
                    }
                    break;
                case "RaceStats":
                    {
                        MaskItem<Exception, RaceStatsGendered_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<RaceStatsGendered, RaceStatsGendered_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._RaceStats.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.RaceStats,
                            subMask);
                    }
                    break;
                case "FaceData":
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, FacePart_ErrorMask>>> subMask;
                        var listTryGet = ListXmlTranslation<FacePart, MaskItem<Exception, FacePart_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out MaskItem<Exception, FacePart_ErrorMask> listSubMask) =>
                            {
                                return LoquiXmlTranslation<FacePart, FacePart_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: listDoMasks,
                                    mask: out listSubMask);
                            }
                            );
                        item._FaceData.SetIfSucceeded(listTryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.FaceData,
                            subMask);
                    }
                    break;
                case "BodyData":
                    {
                        MaskItem<Exception, GenderedBodyData_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<GenderedBodyData, GenderedBodyData_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._BodyData.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.BodyData,
                            subMask);
                    }
                    break;
                case "Hairs":
                    {
                        MaskItem<Exception, IEnumerable<Exception>> subMask;
                        var listTryGet = ListXmlTranslation<FormID, Exception>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                            {
                                return FormIDXmlTranslation.Instance.Parse(
                                    r,
                                    nullable: false,
                                    doMasks: listDoMasks,
                                    errorMask: out listSubMask).Bubble((o) => o.Value);
                            }
                            );
                        item._Hairs.SetIfSucceeded(listTryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Hairs,
                            subMask);
                    }
                    break;
                case "Eyes":
                    {
                        MaskItem<Exception, IEnumerable<Exception>> subMask;
                        var listTryGet = ListXmlTranslation<FormID, Exception>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                            {
                                return FormIDXmlTranslation.Instance.Parse(
                                    r,
                                    nullable: false,
                                    doMasks: listDoMasks,
                                    errorMask: out listSubMask).Bubble((o) => o.Value);
                            }
                            );
                        item._Eyes.SetIfSucceeded(listTryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Eyes,
                            subMask);
                    }
                    break;
                case "FaceGenData":
                    {
                        MaskItem<Exception, FaceGenData_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<FaceGenData, FaceGenData_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._FaceGenData.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.FaceGenData,
                            subMask);
                    }
                    break;
                case "Unknown":
                    {
                        Exception subMask;
                        var tryGet = ByteArrayXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Unknown.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Unknown,
                            subMask);
                    }
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Race Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Race Create_Binary(
            MutagenFrame frame,
            out Race_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Race Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Race_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Race Object, Race_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            Race_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Race_ErrorMask()) : default(Func<Race_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Race Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Race Create_Binary(
            string path,
            out Race_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Race Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Race Create_Binary(
            Stream stream,
            out Race_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Race, Race_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Race, Race_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Race_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Race_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Race_ErrorMask errorMask)
        {
            errorMask = (Race_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Race_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Race_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            RaceCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Race Create_Binary_Internal(
            MutagenFrame frame,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            var ret = new Race();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseRecord(
                    frame,
                    Race_Registration.RACE_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    while (!frame.Complete)
                    {
                        if (!Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            doMasks: doMasks,
                            errorMask: errorMask)) break;
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            Race item,
            MutagenFrame frame,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                doMasks: doMasks,
                errorMask: errorMask);
        }

        protected static bool Fill_Binary_RecordTypes(
            Race item,
            MutagenFrame frame,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                frame: frame,
                contentLength: out var contentLength);
            switch (nextRecordType.Type)
            {
                case "DESC":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var DescriptiontryGet = Mutagen.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Race_FieldIndex.Description,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    item._Description.SetIfSucceeded(DescriptiontryGet);
                    break;
                case "SPLO":
                    var SpellstryGet = Mutagen.Binary.ListBinaryTranslation<FormID, Exception>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Race_Registration.SPLO_HEADER,
                        fieldIndex: (int)Race_FieldIndex.Spells,
                        doMasks: doMasks,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            r.Position += Constants.SUBRECORD_LENGTH;
                            return Mutagen.Binary.FormIDBinaryTranslation.Instance.Parse(
                                r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Spells.SetIfSucceeded(SpellstryGet);
                    break;
                case "XNAM":
                    var RelationstryGet = Mutagen.Binary.ListBinaryTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Race_Registration.XNAM_HEADER,
                        fieldIndex: (int)Race_FieldIndex.Relations,
                        doMasks: doMasks,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<Relation, Relation_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Relations.SetIfSucceeded(RelationstryGet);
                    break;
                case "DATA":
                    item._Data.SetIfSucceeded(LoquiBinaryTranslation<RaceData, RaceData_ErrorMask>.Instance.Parse(
                        frame: frame,
                        doMasks: doMasks,
                        fieldIndex: (int)Race_FieldIndex.Data,
                        errorMask: errorMask));
                    break;
                case "VNAM":
                    item._Voices.SetIfSucceeded(LoquiBinaryTranslation<RaceVoices, RaceVoices_ErrorMask>.Instance.Parse(
                        frame: frame,
                        doMasks: doMasks,
                        fieldIndex: (int)Race_FieldIndex.Voices,
                        errorMask: errorMask));
                    break;
                case "DNAM":
                    item._DefaultHair.SetIfSucceeded(LoquiBinaryTranslation<RaceHair, RaceHair_ErrorMask>.Instance.Parse(
                        frame: frame,
                        doMasks: doMasks,
                        fieldIndex: (int)Race_FieldIndex.DefaultHair,
                        errorMask: errorMask));
                    break;
                case "CNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._DefaultHairColor.SetIfSucceeded(Mutagen.Binary.ByteBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        doMasks: doMasks,
                        fieldIndex: (int)Race_FieldIndex.DefaultHairColor,
                        errorMask: errorMask));
                    break;
                case "PNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._FaceGenMainClamp.SetIfSucceeded(Mutagen.Binary.Int32BinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        doMasks: doMasks,
                        fieldIndex: (int)Race_FieldIndex.FaceGenMainClamp,
                        errorMask: errorMask));
                    break;
                case "UNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    item._FaceGenFaceClamp.SetIfSucceeded(Mutagen.Binary.Int32BinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        doMasks: doMasks,
                        fieldIndex: (int)Race_FieldIndex.FaceGenFaceClamp,
                        errorMask: errorMask));
                    break;
                case "ATTR":
                    item._RaceStats.SetIfSucceeded(LoquiBinaryTranslation<RaceStatsGendered, RaceStatsGendered_ErrorMask>.Instance.Parse(
                        frame: frame,
                        doMasks: doMasks,
                        fieldIndex: (int)Race_FieldIndex.RaceStats,
                        errorMask: errorMask));
                    break;
                case "NAM0":
                    frame.Position += Constants.SUBRECORD_LENGTH + contentLength; // Skip marker
                    var FaceDatatryGet = Mutagen.Binary.ListBinaryTranslation<FacePart, MaskItem<Exception, FacePart_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Race_Registration.INDX_HEADER,
                        fieldIndex: (int)Race_FieldIndex.FaceData,
                        doMasks: doMasks,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, FacePart_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<FacePart, FacePart_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._FaceData.SetIfSucceeded(FaceDatatryGet);
                    break;
                case "NAM1":
                    frame.Position += Constants.SUBRECORD_LENGTH + contentLength; // Skip marker
                    item._BodyData.SetIfSucceeded(LoquiBinaryTranslation<GenderedBodyData, GenderedBodyData_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        doMasks: doMasks,
                        fieldIndex: (int)Race_FieldIndex.BodyData,
                        errorMask: errorMask));
                    break;
                case "HNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var HairstryGet = Mutagen.Binary.ListBinaryTranslation<FormID, Exception>.Instance.ParseRepeatedItem(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Race_FieldIndex.Hairs,
                        doMasks: doMasks,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return Mutagen.Binary.FormIDBinaryTranslation.Instance.Parse(
                                r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Hairs.SetIfSucceeded(HairstryGet);
                    break;
                case "ENAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var EyestryGet = Mutagen.Binary.ListBinaryTranslation<FormID, Exception>.Instance.ParseRepeatedItem(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Race_FieldIndex.Eyes,
                        doMasks: doMasks,
                        objType: ObjectType.Subrecord,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                        {
                            return Mutagen.Binary.FormIDBinaryTranslation.Instance.Parse(
                                r,
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Eyes.SetIfSucceeded(EyestryGet);
                    break;
                case "FGGS":
                    item._FaceGenData.SetIfSucceeded(LoquiBinaryTranslation<FaceGenData, FaceGenData_ErrorMask>.Instance.Parse(
                        frame: frame.Spawn(snapToFinalPosition: false),
                        doMasks: doMasks,
                        fieldIndex: (int)Race_FieldIndex.FaceGenData,
                        errorMask: errorMask));
                    break;
                case "SNAM":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var UnknowntryGet = Mutagen.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                        frame.Spawn(contentLength),
                        fieldIndex: (int)Race_FieldIndex.Unknown,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    item._Unknown.SetIfSucceeded(UnknowntryGet);
                    break;
                default:
                    NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
            return true;
        }

        #endregion

        public Race Copy(
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
        {
            return Race.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Race Copy(
            IRace item,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
        {
            Race ret;
            if (item.GetType().Equals(typeof(Race)))
            {
                ret = new Race();
            }
            else
            {
                ret = (Race)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
            where CopyType : class, IRace
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Race)))
            {
                ret = new Race() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Race Copy_ToLoqui(
            IRaceGetter item,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
        {
            var ret = new Race();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    this._Description.Set(
                        (String)obj,
                        cmds);
                    break;
                case Race_FieldIndex.Spells:
                    this._Spells.SetTo((IEnumerable<FormID>)obj, cmds);
                    break;
                case Race_FieldIndex.Relations:
                    this._Relations.SetTo((IEnumerable<Relation>)obj, cmds);
                    break;
                case Race_FieldIndex.Data:
                    this._Data.Set(
                        (RaceData)obj,
                        cmds);
                    break;
                case Race_FieldIndex.Voices:
                    this._Voices.Set(
                        (RaceVoices)obj,
                        cmds);
                    break;
                case Race_FieldIndex.DefaultHair:
                    this._DefaultHair.Set(
                        (RaceHair)obj,
                        cmds);
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    this._DefaultHairColor.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    this._FaceGenMainClamp.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    this._FaceGenFaceClamp.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case Race_FieldIndex.RaceStats:
                    this._RaceStats.Set(
                        (RaceStatsGendered)obj,
                        cmds);
                    break;
                case Race_FieldIndex.FaceData:
                    this._FaceData.SetTo((IEnumerable<FacePart>)obj, cmds);
                    break;
                case Race_FieldIndex.BodyData:
                    this._BodyData.Set(
                        (GenderedBodyData)obj,
                        cmds);
                    break;
                case Race_FieldIndex.Hairs:
                    this._Hairs.SetTo((IEnumerable<FormID>)obj, cmds);
                    break;
                case Race_FieldIndex.Eyes:
                    this._Eyes.SetTo((IEnumerable<FormID>)obj, cmds);
                    break;
                case Race_FieldIndex.FaceGenData:
                    this._FaceGenData.Set(
                        (FaceGenData)obj,
                        cmds);
                    break;
                case Race_FieldIndex.Unknown:
                    this._Unknown.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RaceCommon.Clear(this, cmds);
        }


        public new static Race Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Race();
            foreach (var pair in fields)
            {
                CopyInInternal_Race(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Race(Race obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Race_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    obj._Description.Set(
                        (String)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.Spells:
                    obj._Spells.SetTo((IEnumerable<FormID>)pair.Value, null);
                    break;
                case Race_FieldIndex.Relations:
                    obj._Relations.SetTo((IEnumerable<Relation>)pair.Value, null);
                    break;
                case Race_FieldIndex.Data:
                    obj._Data.Set(
                        (RaceData)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.Voices:
                    obj._Voices.Set(
                        (RaceVoices)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.DefaultHair:
                    obj._DefaultHair.Set(
                        (RaceHair)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    obj._DefaultHairColor.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    obj._FaceGenMainClamp.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    obj._FaceGenFaceClamp.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.RaceStats:
                    obj._RaceStats.Set(
                        (RaceStatsGendered)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.FaceData:
                    obj._FaceData.SetTo((IEnumerable<FacePart>)pair.Value, null);
                    break;
                case Race_FieldIndex.BodyData:
                    obj._BodyData.Set(
                        (GenderedBodyData)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.Hairs:
                    obj._Hairs.SetTo((IEnumerable<FormID>)pair.Value, null);
                    break;
                case Race_FieldIndex.Eyes:
                    obj._Eyes.SetTo((IEnumerable<FormID>)pair.Value, null);
                    break;
                case Race_FieldIndex.FaceGenData:
                    obj._FaceGenData.Set(
                        (FaceGenData)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.Unknown:
                    obj._Unknown.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Race obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IRace : IRaceGetter, INamedMajorRecord, ILoquiClass<IRace, IRaceGetter>, ILoquiClass<Race, IRaceGetter>
    {
        new String Description { get; set; }
        new INotifyingItem<String> Description_Property { get; }

        new INotifyingList<FormID> Spells { get; }
        new INotifyingList<Relation> Relations { get; }
        new RaceData Data { get; set; }
        new INotifyingItem<RaceData> Data_Property { get; }

        new RaceVoices Voices { get; set; }
        new INotifyingItem<RaceVoices> Voices_Property { get; }

        new RaceHair DefaultHair { get; set; }
        new INotifyingItem<RaceHair> DefaultHair_Property { get; }

        new Byte DefaultHairColor { get; set; }
        new INotifyingItem<Byte> DefaultHairColor_Property { get; }

        new Int32 FaceGenMainClamp { get; set; }
        new INotifyingItem<Int32> FaceGenMainClamp_Property { get; }

        new Int32 FaceGenFaceClamp { get; set; }
        new INotifyingItem<Int32> FaceGenFaceClamp_Property { get; }

        new RaceStatsGendered RaceStats { get; set; }
        new INotifyingItem<RaceStatsGendered> RaceStats_Property { get; }

        new INotifyingList<FacePart> FaceData { get; }
        new GenderedBodyData BodyData { get; set; }
        new INotifyingItem<GenderedBodyData> BodyData_Property { get; }

        new INotifyingList<FormID> Hairs { get; }
        new INotifyingList<FormID> Eyes { get; }
        new FaceGenData FaceGenData { get; set; }
        new INotifyingItem<FaceGenData> FaceGenData_Property { get; }

        new Byte[] Unknown { get; set; }
        new INotifyingItem<Byte[]> Unknown_Property { get; }

    }

    public interface IRaceGetter : INamedMajorRecordGetter
    {
        #region Description
        String Description { get; }
        INotifyingItemGetter<String> Description_Property { get; }

        #endregion
        #region Spells
        INotifyingListGetter<FormID> Spells { get; }
        #endregion
        #region Relations
        INotifyingListGetter<Relation> Relations { get; }
        #endregion
        #region Data
        RaceData Data { get; }
        INotifyingItemGetter<RaceData> Data_Property { get; }

        #endregion
        #region Voices
        RaceVoices Voices { get; }
        INotifyingItemGetter<RaceVoices> Voices_Property { get; }

        #endregion
        #region DefaultHair
        RaceHair DefaultHair { get; }
        INotifyingItemGetter<RaceHair> DefaultHair_Property { get; }

        #endregion
        #region DefaultHairColor
        Byte DefaultHairColor { get; }
        INotifyingItemGetter<Byte> DefaultHairColor_Property { get; }

        #endregion
        #region FaceGenMainClamp
        Int32 FaceGenMainClamp { get; }
        INotifyingItemGetter<Int32> FaceGenMainClamp_Property { get; }

        #endregion
        #region FaceGenFaceClamp
        Int32 FaceGenFaceClamp { get; }
        INotifyingItemGetter<Int32> FaceGenFaceClamp_Property { get; }

        #endregion
        #region RaceStats
        RaceStatsGendered RaceStats { get; }
        INotifyingItemGetter<RaceStatsGendered> RaceStats_Property { get; }

        #endregion
        #region FaceData
        INotifyingListGetter<FacePart> FaceData { get; }
        #endregion
        #region BodyData
        GenderedBodyData BodyData { get; }
        INotifyingItemGetter<GenderedBodyData> BodyData_Property { get; }

        #endregion
        #region Hairs
        INotifyingListGetter<FormID> Hairs { get; }
        #endregion
        #region Eyes
        INotifyingListGetter<FormID> Eyes { get; }
        #endregion
        #region FaceGenData
        FaceGenData FaceGenData { get; }
        INotifyingItemGetter<FaceGenData> FaceGenData_Property { get; }

        #endregion
        #region Unknown
        Byte[] Unknown { get; }
        INotifyingItemGetter<Byte[]> Unknown_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum Race_FieldIndex
    {
        Description = 6,
        Spells = 7,
        Relations = 8,
        Data = 9,
        Voices = 10,
        DefaultHair = 11,
        DefaultHairColor = 12,
        FaceGenMainClamp = 13,
        FaceGenFaceClamp = 14,
        RaceStats = 15,
        FaceData = 16,
        BodyData = 17,
        Hairs = 18,
        Eyes = 19,
        FaceGenData = 20,
        Unknown = 21,
    }
    #endregion

    #region Registration
    public class Race_Registration : ILoquiRegistration
    {
        public static readonly Race_Registration Instance = new Race_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 25,
            version: 0);

        public const string GUID = "265136e6-60a6-4ade-a7c4-b31197fb95e5";

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(Race_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Race_ErrorMask);

        public static readonly Type ClassType = typeof(Race);

        public static readonly Type GetterType = typeof(IRaceGetter);

        public static readonly Type SetterType = typeof(IRace);

        public static readonly Type CommonType = typeof(RaceCommon);

        public const string FullName = "Mutagen.Race";

        public const string Name = "Race";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DESCRIPTION":
                    return (ushort)Race_FieldIndex.Description;
                case "SPELLS":
                    return (ushort)Race_FieldIndex.Spells;
                case "RELATIONS":
                    return (ushort)Race_FieldIndex.Relations;
                case "DATA":
                    return (ushort)Race_FieldIndex.Data;
                case "VOICES":
                    return (ushort)Race_FieldIndex.Voices;
                case "DEFAULTHAIR":
                    return (ushort)Race_FieldIndex.DefaultHair;
                case "DEFAULTHAIRCOLOR":
                    return (ushort)Race_FieldIndex.DefaultHairColor;
                case "FACEGENMAINCLAMP":
                    return (ushort)Race_FieldIndex.FaceGenMainClamp;
                case "FACEGENFACECLAMP":
                    return (ushort)Race_FieldIndex.FaceGenFaceClamp;
                case "RACESTATS":
                    return (ushort)Race_FieldIndex.RaceStats;
                case "FACEDATA":
                    return (ushort)Race_FieldIndex.FaceData;
                case "BODYDATA":
                    return (ushort)Race_FieldIndex.BodyData;
                case "HAIRS":
                    return (ushort)Race_FieldIndex.Hairs;
                case "EYES":
                    return (ushort)Race_FieldIndex.Eyes;
                case "FACEGENDATA":
                    return (ushort)Race_FieldIndex.FaceGenData;
                case "UNKNOWN":
                    return (ushort)Race_FieldIndex.Unknown;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                    return true;
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.FaceGenData:
                    return true;
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    return "Description";
                case Race_FieldIndex.Spells:
                    return "Spells";
                case Race_FieldIndex.Relations:
                    return "Relations";
                case Race_FieldIndex.Data:
                    return "Data";
                case Race_FieldIndex.Voices:
                    return "Voices";
                case Race_FieldIndex.DefaultHair:
                    return "DefaultHair";
                case Race_FieldIndex.DefaultHairColor:
                    return "DefaultHairColor";
                case Race_FieldIndex.FaceGenMainClamp:
                    return "FaceGenMainClamp";
                case Race_FieldIndex.FaceGenFaceClamp:
                    return "FaceGenFaceClamp";
                case Race_FieldIndex.RaceStats:
                    return "RaceStats";
                case Race_FieldIndex.FaceData:
                    return "FaceData";
                case Race_FieldIndex.BodyData:
                    return "BodyData";
                case Race_FieldIndex.Hairs:
                    return "Hairs";
                case Race_FieldIndex.Eyes:
                    return "Eyes";
                case Race_FieldIndex.FaceGenData:
                    return "FaceGenData";
                case Race_FieldIndex.Unknown:
                    return "Unknown";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.Data:
                case Race_FieldIndex.Voices:
                case Race_FieldIndex.DefaultHair:
                case Race_FieldIndex.DefaultHairColor:
                case Race_FieldIndex.FaceGenMainClamp:
                case Race_FieldIndex.FaceGenFaceClamp:
                case Race_FieldIndex.RaceStats:
                case Race_FieldIndex.FaceData:
                case Race_FieldIndex.BodyData:
                case Race_FieldIndex.Hairs:
                case Race_FieldIndex.Eyes:
                case Race_FieldIndex.FaceGenData:
                case Race_FieldIndex.Unknown:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    return typeof(String);
                case Race_FieldIndex.Spells:
                    return typeof(NotifyingList<FormID>);
                case Race_FieldIndex.Relations:
                    return typeof(NotifyingList<Relation>);
                case Race_FieldIndex.Data:
                    return typeof(RaceData);
                case Race_FieldIndex.Voices:
                    return typeof(RaceVoices);
                case Race_FieldIndex.DefaultHair:
                    return typeof(RaceHair);
                case Race_FieldIndex.DefaultHairColor:
                    return typeof(Byte);
                case Race_FieldIndex.FaceGenMainClamp:
                    return typeof(Int32);
                case Race_FieldIndex.FaceGenFaceClamp:
                    return typeof(Int32);
                case Race_FieldIndex.RaceStats:
                    return typeof(RaceStatsGendered);
                case Race_FieldIndex.FaceData:
                    return typeof(NotifyingList<FacePart>);
                case Race_FieldIndex.BodyData:
                    return typeof(GenderedBodyData);
                case Race_FieldIndex.Hairs:
                    return typeof(NotifyingList<FormID>);
                case Race_FieldIndex.Eyes:
                    return typeof(NotifyingList<FormID>);
                case Race_FieldIndex.FaceGenData:
                    return typeof(FaceGenData);
                case Race_FieldIndex.Unknown:
                    return typeof(Byte[]);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType XNAM_HEADER = new RecordType("XNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType VNAM_HEADER = new RecordType("VNAM");
        public static readonly RecordType DNAM_HEADER = new RecordType("DNAM");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType PNAM_HEADER = new RecordType("PNAM");
        public static readonly RecordType UNAM_HEADER = new RecordType("UNAM");
        public static readonly RecordType ATTR_HEADER = new RecordType("ATTR");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType INDX_HEADER = new RecordType("INDX");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType FGGS_HEADER = new RecordType("FGGS");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RACE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 16;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RaceCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IRace item,
            IRaceGetter rhs,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            RaceCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRace item,
            IRaceGetter rhs,
            out Race_ErrorMask errorMask,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            RaceCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRace item,
            IRaceGetter rhs,
            IRaceGetter def,
            bool doMasks,
            out Race_ErrorMask errorMask,
            Race_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            Race_ErrorMask retErrorMask = null;
            Func<Race_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Race_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IRace item,
            IRaceGetter rhs,
            IRaceGetter def,
            bool doMasks,
            Func<Race_ErrorMask> errorMask,
            Race_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Description ?? true)
            {
                try
                {
                    item.Description_Property.SetToWithDefault(
                        rhs.Description_Property,
                        def?.Description_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Description, ex);
                }
            }
            if (copyMask?.Spells != CopyOption.Skip)
            {
                try
                {
                    item.Spells.SetToWithDefault(
                        rhs.Spells,
                        def?.Spells,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Spells, ex);
                }
            }
            if (copyMask?.Relations.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Relations.SetToWithDefault(
                        rhs.Relations,
                        def?.Relations,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Relations.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Relation);
                                    return Relation.Copy(
                                        r,
                                        copyMask?.Relations?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Relations.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Relations, ex);
                }
            }
            if (copyMask?.Data.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Data_Property.SetToWithDefault(
                        rhs.Data_Property,
                        def?.Data_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Data.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RaceDataCommon.CopyFieldsFrom(
                                        item: item.Data,
                                        rhs: rhs.Data,
                                        def: def?.Data,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<RaceData_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Data.Specific == null)
                                            {
                                                baseMask.Data = new MaskItem<Exception, RaceData_ErrorMask>(null, new RaceData_ErrorMask());
                                            }
                                            return baseMask.Data.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Data.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RaceData);
                                    return RaceData.Copy(
                                        r,
                                        copyMask?.Data?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Data?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Data, ex);
                }
            }
            if (copyMask?.Voices.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Voices_Property.SetToWithDefault(
                        rhs.Voices_Property,
                        def?.Voices_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Voices.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RaceVoicesCommon.CopyFieldsFrom(
                                        item: item.Voices,
                                        rhs: rhs.Voices,
                                        def: def?.Voices,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<RaceVoices_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Voices.Specific == null)
                                            {
                                                baseMask.Voices = new MaskItem<Exception, RaceVoices_ErrorMask>(null, new RaceVoices_ErrorMask());
                                            }
                                            return baseMask.Voices.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Voices.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RaceVoices);
                                    return RaceVoices.Copy(
                                        r,
                                        copyMask?.Voices?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Voices?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Voices, ex);
                }
            }
            if (copyMask?.DefaultHair.Overall != CopyOption.Skip)
            {
                try
                {
                    item.DefaultHair_Property.SetToWithDefault(
                        rhs.DefaultHair_Property,
                        def?.DefaultHair_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.DefaultHair.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RaceHairCommon.CopyFieldsFrom(
                                        item: item.DefaultHair,
                                        rhs: rhs.DefaultHair,
                                        def: def?.DefaultHair,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<RaceHair_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.DefaultHair.Specific == null)
                                            {
                                                baseMask.DefaultHair = new MaskItem<Exception, RaceHair_ErrorMask>(null, new RaceHair_ErrorMask());
                                            }
                                            return baseMask.DefaultHair.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.DefaultHair.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RaceHair);
                                    return RaceHair.Copy(
                                        r,
                                        copyMask?.DefaultHair?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.DefaultHair?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.DefaultHair, ex);
                }
            }
            if (copyMask?.DefaultHairColor ?? true)
            {
                try
                {
                    item.DefaultHairColor_Property.SetToWithDefault(
                        rhs.DefaultHairColor_Property,
                        def?.DefaultHairColor_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.DefaultHairColor, ex);
                }
            }
            if (copyMask?.FaceGenMainClamp ?? true)
            {
                try
                {
                    item.FaceGenMainClamp_Property.SetToWithDefault(
                        rhs.FaceGenMainClamp_Property,
                        def?.FaceGenMainClamp_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.FaceGenMainClamp, ex);
                }
            }
            if (copyMask?.FaceGenFaceClamp ?? true)
            {
                try
                {
                    item.FaceGenFaceClamp_Property.SetToWithDefault(
                        rhs.FaceGenFaceClamp_Property,
                        def?.FaceGenFaceClamp_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.FaceGenFaceClamp, ex);
                }
            }
            if (copyMask?.RaceStats.Overall != CopyOption.Skip)
            {
                try
                {
                    item.RaceStats_Property.SetToWithDefault(
                        rhs.RaceStats_Property,
                        def?.RaceStats_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.RaceStats.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RaceStatsGenderedCommon.CopyFieldsFrom(
                                        item: item.RaceStats,
                                        rhs: rhs.RaceStats,
                                        def: def?.RaceStats,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<RaceStatsGendered_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.RaceStats.Specific == null)
                                            {
                                                baseMask.RaceStats = new MaskItem<Exception, RaceStatsGendered_ErrorMask>(null, new RaceStatsGendered_ErrorMask());
                                            }
                                            return baseMask.RaceStats.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.RaceStats.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RaceStatsGendered);
                                    return RaceStatsGendered.Copy(
                                        r,
                                        copyMask?.RaceStats?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.RaceStats?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.RaceStats, ex);
                }
            }
            if (copyMask?.FaceData.Overall != CopyOption.Skip)
            {
                try
                {
                    item.FaceData.SetToWithDefault(
                        rhs.FaceData,
                        def?.FaceData,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.FaceData.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(FacePart);
                                    return FacePart.Copy(
                                        r,
                                        copyMask?.FaceData?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.FaceData.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.FaceData, ex);
                }
            }
            if (copyMask?.BodyData.Overall != CopyOption.Skip)
            {
                try
                {
                    item.BodyData_Property.SetToWithDefault(
                        rhs.BodyData_Property,
                        def?.BodyData_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.BodyData.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    GenderedBodyDataCommon.CopyFieldsFrom(
                                        item: item.BodyData,
                                        rhs: rhs.BodyData,
                                        def: def?.BodyData,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<GenderedBodyData_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.BodyData.Specific == null)
                                            {
                                                baseMask.BodyData = new MaskItem<Exception, GenderedBodyData_ErrorMask>(null, new GenderedBodyData_ErrorMask());
                                            }
                                            return baseMask.BodyData.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.BodyData.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(GenderedBodyData);
                                    return GenderedBodyData.Copy(
                                        r,
                                        copyMask?.BodyData?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.BodyData?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.BodyData, ex);
                }
            }
            if (copyMask?.Hairs != CopyOption.Skip)
            {
                try
                {
                    item.Hairs.SetToWithDefault(
                        rhs.Hairs,
                        def?.Hairs,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Hairs, ex);
                }
            }
            if (copyMask?.Eyes != CopyOption.Skip)
            {
                try
                {
                    item.Eyes.SetToWithDefault(
                        rhs.Eyes,
                        def?.Eyes,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Eyes, ex);
                }
            }
            if (copyMask?.FaceGenData.Overall != CopyOption.Skip)
            {
                try
                {
                    item.FaceGenData_Property.SetToWithDefault(
                        rhs.FaceGenData_Property,
                        def?.FaceGenData_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.FaceGenData.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    FaceGenDataCommon.CopyFieldsFrom(
                                        item: item.FaceGenData,
                                        rhs: rhs.FaceGenData,
                                        def: def?.FaceGenData,
                                        doMasks: doMasks,
                                        errorMask: (doMasks ? new Func<FaceGenData_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.FaceGenData.Specific == null)
                                            {
                                                baseMask.FaceGenData = new MaskItem<Exception, FaceGenData_ErrorMask>(null, new FaceGenData_ErrorMask());
                                            }
                                            return baseMask.FaceGenData.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.FaceGenData.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(FaceGenData);
                                    return FaceGenData.Copy(
                                        r,
                                        copyMask?.FaceGenData?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.FaceGenData?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.FaceGenData, ex);
                }
            }
            if (copyMask?.Unknown ?? true)
            {
                try
                {
                    item.Unknown_Property.SetToWithDefault(
                        rhs.Unknown_Property,
                        def?.Unknown_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Unknown, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRace obj,
            NotifyingFireParameters? cmds = null)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    obj.Description_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Spells:
                    obj.Spells.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Relations:
                    obj.Relations.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Data:
                    obj.Data_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Voices:
                    obj.Voices_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.DefaultHair:
                    obj.DefaultHair_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    obj.DefaultHairColor_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    obj.FaceGenMainClamp_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    obj.FaceGenFaceClamp_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.RaceStats:
                    obj.RaceStats_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.FaceData:
                    obj.FaceData.HasBeenSet = on;
                    break;
                case Race_FieldIndex.BodyData:
                    obj.BodyData_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Hairs:
                    obj.Hairs.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Eyes:
                    obj.Eyes.HasBeenSet = on;
                    break;
                case Race_FieldIndex.FaceGenData:
                    obj.FaceGenData_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Unknown:
                    obj.Unknown_Property.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRace obj,
            NotifyingUnsetParameters? cmds = null)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    obj.Description_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.Spells:
                    obj.Spells.Unset(cmds);
                    break;
                case Race_FieldIndex.Relations:
                    obj.Relations.Unset(cmds);
                    break;
                case Race_FieldIndex.Data:
                    obj.Data_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.Voices:
                    obj.Voices_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.DefaultHair:
                    obj.DefaultHair_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    obj.DefaultHairColor_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    obj.FaceGenMainClamp_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    obj.FaceGenFaceClamp_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.RaceStats:
                    obj.RaceStats_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.FaceData:
                    obj.FaceData.Unset(cmds);
                    break;
                case Race_FieldIndex.BodyData:
                    obj.BodyData_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.Hairs:
                    obj.Hairs.Unset(cmds);
                    break;
                case Race_FieldIndex.Eyes:
                    obj.Eyes.Unset(cmds);
                    break;
                case Race_FieldIndex.FaceGenData:
                    obj.FaceGenData_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.Unknown:
                    obj.Unknown_Property.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRace obj)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    return obj.Description_Property.HasBeenSet;
                case Race_FieldIndex.Spells:
                    return obj.Spells.HasBeenSet;
                case Race_FieldIndex.Relations:
                    return obj.Relations.HasBeenSet;
                case Race_FieldIndex.Data:
                    return obj.Data_Property.HasBeenSet;
                case Race_FieldIndex.Voices:
                    return obj.Voices_Property.HasBeenSet;
                case Race_FieldIndex.DefaultHair:
                    return obj.DefaultHair_Property.HasBeenSet;
                case Race_FieldIndex.DefaultHairColor:
                    return obj.DefaultHairColor_Property.HasBeenSet;
                case Race_FieldIndex.FaceGenMainClamp:
                    return obj.FaceGenMainClamp_Property.HasBeenSet;
                case Race_FieldIndex.FaceGenFaceClamp:
                    return obj.FaceGenFaceClamp_Property.HasBeenSet;
                case Race_FieldIndex.RaceStats:
                    return obj.RaceStats_Property.HasBeenSet;
                case Race_FieldIndex.FaceData:
                    return obj.FaceData.HasBeenSet;
                case Race_FieldIndex.BodyData:
                    return obj.BodyData_Property.HasBeenSet;
                case Race_FieldIndex.Hairs:
                    return obj.Hairs.HasBeenSet;
                case Race_FieldIndex.Eyes:
                    return obj.Eyes.HasBeenSet;
                case Race_FieldIndex.FaceGenData:
                    return obj.FaceGenData_Property.HasBeenSet;
                case Race_FieldIndex.Unknown:
                    return obj.Unknown_Property.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IRaceGetter obj)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    return obj.Description;
                case Race_FieldIndex.Spells:
                    return obj.Spells;
                case Race_FieldIndex.Relations:
                    return obj.Relations;
                case Race_FieldIndex.Data:
                    return obj.Data;
                case Race_FieldIndex.Voices:
                    return obj.Voices;
                case Race_FieldIndex.DefaultHair:
                    return obj.DefaultHair;
                case Race_FieldIndex.DefaultHairColor:
                    return obj.DefaultHairColor;
                case Race_FieldIndex.FaceGenMainClamp:
                    return obj.FaceGenMainClamp;
                case Race_FieldIndex.FaceGenFaceClamp:
                    return obj.FaceGenFaceClamp;
                case Race_FieldIndex.RaceStats:
                    return obj.RaceStats;
                case Race_FieldIndex.FaceData:
                    return obj.FaceData;
                case Race_FieldIndex.BodyData:
                    return obj.BodyData;
                case Race_FieldIndex.Hairs:
                    return obj.Hairs;
                case Race_FieldIndex.Eyes:
                    return obj.Eyes;
                case Race_FieldIndex.FaceGenData:
                    return obj.FaceGenData;
                case Race_FieldIndex.Unknown:
                    return obj.Unknown;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IRace item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Description_Property.Unset(cmds.ToUnsetParams());
            item.Spells.Unset(cmds.ToUnsetParams());
            item.Relations.Unset(cmds.ToUnsetParams());
            item.Data_Property.Unset(cmds.ToUnsetParams());
            item.Voices_Property.Unset(cmds.ToUnsetParams());
            item.DefaultHair_Property.Unset(cmds.ToUnsetParams());
            item.DefaultHairColor_Property.Unset(cmds.ToUnsetParams());
            item.FaceGenMainClamp_Property.Unset(cmds.ToUnsetParams());
            item.FaceGenFaceClamp_Property.Unset(cmds.ToUnsetParams());
            item.RaceStats_Property.Unset(cmds.ToUnsetParams());
            item.FaceData.Unset(cmds.ToUnsetParams());
            item.BodyData_Property.Unset(cmds.ToUnsetParams());
            item.Hairs.Unset(cmds.ToUnsetParams());
            item.Eyes.Unset(cmds.ToUnsetParams());
            item.FaceGenData_Property.Unset(cmds.ToUnsetParams());
            item.Unknown_Property.Unset(cmds.ToUnsetParams());
        }

        public static Race_Mask<bool> GetEqualsMask(
            this IRaceGetter item,
            IRaceGetter rhs)
        {
            var ret = new Race_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            Race_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Description = item.Description_Property.Equals(rhs.Description_Property, (l, r) => object.Equals(l, r));
            if (item.Spells.HasBeenSet == rhs.Spells.HasBeenSet)
            {
                if (item.Spells.HasBeenSet)
                {
                    ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Spells.Specific = item.Spells.SelectAgainst<FormID, bool>(rhs.Spells, ((l, r) => object.Equals(l, r)), out ret.Spells.Overall);
                    ret.Spells.Overall = ret.Spells.Overall && ret.Spells.Specific.All((b) => b);
                }
                else
                {
                    ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Spells.Overall = true;
                }
            }
            else
            {
                ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                ret.Spells.Overall = false;
            }
            if (item.Relations.HasBeenSet == rhs.Relations.HasBeenSet)
            {
                if (item.Relations.HasBeenSet)
                {
                    ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>();
                    ret.Relations.Specific = item.Relations.SelectAgainst<Relation, MaskItem<bool, Relation_Mask<bool>>>(rhs.Relations, ((l, r) =>
                    {
                        MaskItem<bool, Relation_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => RelationCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.Relations.Overall);
                    ret.Relations.Overall = ret.Relations.Overall && ret.Relations.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>();
                    ret.Relations.Overall = true;
                }
            }
            else
            {
                ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>();
                ret.Relations.Overall = false;
            }
            ret.Data = item.Data_Property.LoquiEqualsHelper(rhs.Data_Property, (loqLhs, loqRhs) => RaceDataCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Voices = item.Voices_Property.LoquiEqualsHelper(rhs.Voices_Property, (loqLhs, loqRhs) => RaceVoicesCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.DefaultHair = item.DefaultHair_Property.LoquiEqualsHelper(rhs.DefaultHair_Property, (loqLhs, loqRhs) => RaceHairCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.DefaultHairColor = item.DefaultHairColor_Property.Equals(rhs.DefaultHairColor_Property, (l, r) => l == r);
            ret.FaceGenMainClamp = item.FaceGenMainClamp_Property.Equals(rhs.FaceGenMainClamp_Property, (l, r) => l == r);
            ret.FaceGenFaceClamp = item.FaceGenFaceClamp_Property.Equals(rhs.FaceGenFaceClamp_Property, (l, r) => l == r);
            ret.RaceStats = item.RaceStats_Property.LoquiEqualsHelper(rhs.RaceStats_Property, (loqLhs, loqRhs) => RaceStatsGenderedCommon.GetEqualsMask(loqLhs, loqRhs));
            if (item.FaceData.HasBeenSet == rhs.FaceData.HasBeenSet)
            {
                if (item.FaceData.HasBeenSet)
                {
                    ret.FaceData = new MaskItem<bool, IEnumerable<MaskItem<bool, FacePart_Mask<bool>>>>();
                    ret.FaceData.Specific = item.FaceData.SelectAgainst<FacePart, MaskItem<bool, FacePart_Mask<bool>>>(rhs.FaceData, ((l, r) =>
                    {
                        MaskItem<bool, FacePart_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => FacePartCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.FaceData.Overall);
                    ret.FaceData.Overall = ret.FaceData.Overall && ret.FaceData.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.FaceData = new MaskItem<bool, IEnumerable<MaskItem<bool, FacePart_Mask<bool>>>>();
                    ret.FaceData.Overall = true;
                }
            }
            else
            {
                ret.FaceData = new MaskItem<bool, IEnumerable<MaskItem<bool, FacePart_Mask<bool>>>>();
                ret.FaceData.Overall = false;
            }
            ret.BodyData = item.BodyData_Property.LoquiEqualsHelper(rhs.BodyData_Property, (loqLhs, loqRhs) => GenderedBodyDataCommon.GetEqualsMask(loqLhs, loqRhs));
            if (item.Hairs.HasBeenSet == rhs.Hairs.HasBeenSet)
            {
                if (item.Hairs.HasBeenSet)
                {
                    ret.Hairs = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Hairs.Specific = item.Hairs.SelectAgainst<FormID, bool>(rhs.Hairs, ((l, r) => object.Equals(l, r)), out ret.Hairs.Overall);
                    ret.Hairs.Overall = ret.Hairs.Overall && ret.Hairs.Specific.All((b) => b);
                }
                else
                {
                    ret.Hairs = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Hairs.Overall = true;
                }
            }
            else
            {
                ret.Hairs = new MaskItem<bool, IEnumerable<bool>>();
                ret.Hairs.Overall = false;
            }
            if (item.Eyes.HasBeenSet == rhs.Eyes.HasBeenSet)
            {
                if (item.Eyes.HasBeenSet)
                {
                    ret.Eyes = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Eyes.Specific = item.Eyes.SelectAgainst<FormID, bool>(rhs.Eyes, ((l, r) => object.Equals(l, r)), out ret.Eyes.Overall);
                    ret.Eyes.Overall = ret.Eyes.Overall && ret.Eyes.Specific.All((b) => b);
                }
                else
                {
                    ret.Eyes = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Eyes.Overall = true;
                }
            }
            else
            {
                ret.Eyes = new MaskItem<bool, IEnumerable<bool>>();
                ret.Eyes.Overall = false;
            }
            ret.FaceGenData = item.FaceGenData_Property.LoquiEqualsHelper(rhs.FaceGenData_Property, (loqLhs, loqRhs) => FaceGenDataCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Unknown = item.Unknown_Property.Equals(rhs.Unknown_Property, (l, r) => l.EqualsFast(r));
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRaceGetter item,
            string name = null,
            Race_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRaceGetter item,
            FileGeneration fg,
            string name = null,
            Race_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Race)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Race)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {item.Description}");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Spells)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Relations?.Overall ?? true)
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Relations)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Data?.Overall ?? true)
                {
                    item.Data?.ToString(fg, "Data");
                }
                if (printMask?.Voices?.Overall ?? true)
                {
                    item.Voices?.ToString(fg, "Voices");
                }
                if (printMask?.DefaultHair?.Overall ?? true)
                {
                    item.DefaultHair?.ToString(fg, "DefaultHair");
                }
                if (printMask?.DefaultHairColor ?? true)
                {
                    fg.AppendLine($"DefaultHairColor => {item.DefaultHairColor}");
                }
                if (printMask?.FaceGenMainClamp ?? true)
                {
                    fg.AppendLine($"FaceGenMainClamp => {item.FaceGenMainClamp}");
                }
                if (printMask?.FaceGenFaceClamp ?? true)
                {
                    fg.AppendLine($"FaceGenFaceClamp => {item.FaceGenFaceClamp}");
                }
                if (printMask?.RaceStats?.Overall ?? true)
                {
                    item.RaceStats?.ToString(fg, "RaceStats");
                }
                if (printMask?.FaceData?.Overall ?? true)
                {
                    fg.AppendLine("FaceData =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.FaceData)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.BodyData?.Overall ?? true)
                {
                    item.BodyData?.ToString(fg, "BodyData");
                }
                if (printMask?.Hairs?.Overall ?? true)
                {
                    fg.AppendLine("Hairs =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Hairs)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    fg.AppendLine("Eyes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Eyes)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.FaceGenData?.Overall ?? true)
                {
                    item.FaceGenData?.ToString(fg, "FaceGenData");
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {item.Unknown}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRaceGetter item,
            Race_Mask<bool?> checkMask)
        {
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_Property.HasBeenSet) return false;
            if (checkMask.Spells.Overall.HasValue && checkMask.Spells.Overall.Value != item.Spells.HasBeenSet) return false;
            if (checkMask.Relations.Overall.HasValue && checkMask.Relations.Overall.Value != item.Relations.HasBeenSet) return false;
            if (checkMask.Data.Overall.HasValue && checkMask.Data.Overall.Value != item.Data_Property.HasBeenSet) return false;
            if (checkMask.Data.Specific != null && (item.Data_Property.Item == null || !item.Data_Property.Item.HasBeenSet(checkMask.Data.Specific))) return false;
            if (checkMask.Voices.Overall.HasValue && checkMask.Voices.Overall.Value != item.Voices_Property.HasBeenSet) return false;
            if (checkMask.Voices.Specific != null && (item.Voices_Property.Item == null || !item.Voices_Property.Item.HasBeenSet(checkMask.Voices.Specific))) return false;
            if (checkMask.DefaultHair.Overall.HasValue && checkMask.DefaultHair.Overall.Value != item.DefaultHair_Property.HasBeenSet) return false;
            if (checkMask.DefaultHair.Specific != null && (item.DefaultHair_Property.Item == null || !item.DefaultHair_Property.Item.HasBeenSet(checkMask.DefaultHair.Specific))) return false;
            if (checkMask.DefaultHairColor.HasValue && checkMask.DefaultHairColor.Value != item.DefaultHairColor_Property.HasBeenSet) return false;
            if (checkMask.FaceGenMainClamp.HasValue && checkMask.FaceGenMainClamp.Value != item.FaceGenMainClamp_Property.HasBeenSet) return false;
            if (checkMask.FaceGenFaceClamp.HasValue && checkMask.FaceGenFaceClamp.Value != item.FaceGenFaceClamp_Property.HasBeenSet) return false;
            if (checkMask.RaceStats.Overall.HasValue && checkMask.RaceStats.Overall.Value != item.RaceStats_Property.HasBeenSet) return false;
            if (checkMask.RaceStats.Specific != null && (item.RaceStats_Property.Item == null || !item.RaceStats_Property.Item.HasBeenSet(checkMask.RaceStats.Specific))) return false;
            if (checkMask.FaceData.Overall.HasValue && checkMask.FaceData.Overall.Value != item.FaceData.HasBeenSet) return false;
            if (checkMask.BodyData.Overall.HasValue && checkMask.BodyData.Overall.Value != item.BodyData_Property.HasBeenSet) return false;
            if (checkMask.BodyData.Specific != null && (item.BodyData_Property.Item == null || !item.BodyData_Property.Item.HasBeenSet(checkMask.BodyData.Specific))) return false;
            if (checkMask.Hairs.Overall.HasValue && checkMask.Hairs.Overall.Value != item.Hairs.HasBeenSet) return false;
            if (checkMask.Eyes.Overall.HasValue && checkMask.Eyes.Overall.Value != item.Eyes.HasBeenSet) return false;
            if (checkMask.FaceGenData.Overall.HasValue && checkMask.FaceGenData.Overall.Value != item.FaceGenData_Property.HasBeenSet) return false;
            if (checkMask.FaceGenData.Specific != null && (item.FaceGenData_Property.Item == null || !item.FaceGenData_Property.Item.HasBeenSet(checkMask.FaceGenData.Specific))) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != item.Unknown_Property.HasBeenSet) return false;
            return true;
        }

        public static Race_Mask<bool> GetHasBeenSetMask(IRaceGetter item)
        {
            var ret = new Race_Mask<bool>();
            ret.Description = item.Description_Property.HasBeenSet;
            ret.Spells = new MaskItem<bool, IEnumerable<bool>>(item.Spells.HasBeenSet, null);
            ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>(item.Relations.HasBeenSet, item.Relations.Select((i) => new MaskItem<bool, Relation_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Data = new MaskItem<bool, RaceData_Mask<bool>>(item.Data_Property.HasBeenSet, RaceDataCommon.GetHasBeenSetMask(item.Data_Property.Item));
            ret.Voices = new MaskItem<bool, RaceVoices_Mask<bool>>(item.Voices_Property.HasBeenSet, RaceVoicesCommon.GetHasBeenSetMask(item.Voices_Property.Item));
            ret.DefaultHair = new MaskItem<bool, RaceHair_Mask<bool>>(item.DefaultHair_Property.HasBeenSet, RaceHairCommon.GetHasBeenSetMask(item.DefaultHair_Property.Item));
            ret.DefaultHairColor = item.DefaultHairColor_Property.HasBeenSet;
            ret.FaceGenMainClamp = item.FaceGenMainClamp_Property.HasBeenSet;
            ret.FaceGenFaceClamp = item.FaceGenFaceClamp_Property.HasBeenSet;
            ret.RaceStats = new MaskItem<bool, RaceStatsGendered_Mask<bool>>(item.RaceStats_Property.HasBeenSet, RaceStatsGenderedCommon.GetHasBeenSetMask(item.RaceStats_Property.Item));
            ret.FaceData = new MaskItem<bool, IEnumerable<MaskItem<bool, FacePart_Mask<bool>>>>(item.FaceData.HasBeenSet, item.FaceData.Select((i) => new MaskItem<bool, FacePart_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.BodyData = new MaskItem<bool, GenderedBodyData_Mask<bool>>(item.BodyData_Property.HasBeenSet, GenderedBodyDataCommon.GetHasBeenSetMask(item.BodyData_Property.Item));
            ret.Hairs = new MaskItem<bool, IEnumerable<bool>>(item.Hairs.HasBeenSet, null);
            ret.Eyes = new MaskItem<bool, IEnumerable<bool>>(item.Eyes.HasBeenSet, null);
            ret.FaceGenData = new MaskItem<bool, FaceGenData_Mask<bool>>(item.FaceGenData_Property.HasBeenSet, FaceGenDataCommon.GetHasBeenSetMask(item.FaceGenData_Property.Item));
            ret.Unknown = item.Unknown_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IRaceGetter item,
            bool doMasks,
            out Race_ErrorMask errorMask,
            string name = null)
        {
            Race_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Race_ErrorMask()) : default(Func<Race_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IRaceGetter item,
            bool doMasks,
            Func<Race_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Race"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Race");
                    }
                    if (item.Description_Property.HasBeenSet)
                    {
                        Exception subMask;
                        StringXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Description),
                            item.Description,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Description,
                            subMask);
                    }
                    if (item.Spells.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<Exception>> subMask;
                        ListXmlTranslation<FormID, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Spells),
                            item: item.Spells,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (FormID subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                FormIDXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: doMasks,
                                    errorMask: out listSubMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Spells,
                            subMask);
                    }
                    if (item.Relations.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>> subMask;
                        ListXmlTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Relations),
                            item: item.Relations,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (Relation subItem, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<IRelationGetter, Relation_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: doMasks,
                                    mask: out Relation_ErrorMask loquiMask);
                                listSubMask = loquiMask == null ? null : new MaskItem<Exception, Relation_ErrorMask>(null, loquiMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Relations,
                            subMask);
                    }
                    if (item.Data_Property.HasBeenSet)
                    {
                        MaskItem<Exception, RaceData_ErrorMask> subMask;
                        LoquiXmlTranslation<IRaceDataGetter, RaceData_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Data,
                            name: nameof(item.Data),
                            doMasks: doMasks,
                            mask: out RaceData_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, RaceData_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Data,
                            subMask);
                    }
                    if (item.Voices_Property.HasBeenSet)
                    {
                        MaskItem<Exception, RaceVoices_ErrorMask> subMask;
                        LoquiXmlTranslation<IRaceVoicesGetter, RaceVoices_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Voices,
                            name: nameof(item.Voices),
                            doMasks: doMasks,
                            mask: out RaceVoices_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, RaceVoices_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Voices,
                            subMask);
                    }
                    if (item.DefaultHair_Property.HasBeenSet)
                    {
                        MaskItem<Exception, RaceHair_ErrorMask> subMask;
                        LoquiXmlTranslation<IRaceHairGetter, RaceHair_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.DefaultHair,
                            name: nameof(item.DefaultHair),
                            doMasks: doMasks,
                            mask: out RaceHair_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, RaceHair_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.DefaultHair,
                            subMask);
                    }
                    if (item.DefaultHairColor_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DefaultHairColor),
                            item.DefaultHairColor,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.DefaultHairColor,
                            subMask);
                    }
                    if (item.FaceGenMainClamp_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FaceGenMainClamp),
                            item.FaceGenMainClamp,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.FaceGenMainClamp,
                            subMask);
                    }
                    if (item.FaceGenFaceClamp_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FaceGenFaceClamp),
                            item.FaceGenFaceClamp,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.FaceGenFaceClamp,
                            subMask);
                    }
                    if (item.RaceStats_Property.HasBeenSet)
                    {
                        MaskItem<Exception, RaceStatsGendered_ErrorMask> subMask;
                        LoquiXmlTranslation<IRaceStatsGenderedGetter, RaceStatsGendered_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.RaceStats,
                            name: nameof(item.RaceStats),
                            doMasks: doMasks,
                            mask: out RaceStatsGendered_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, RaceStatsGendered_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.RaceStats,
                            subMask);
                    }
                    if (item.FaceData.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, FacePart_ErrorMask>>> subMask;
                        ListXmlTranslation<FacePart, MaskItem<Exception, FacePart_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.FaceData),
                            item: item.FaceData,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (FacePart subItem, bool listDoMasks, out MaskItem<Exception, FacePart_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<IFacePartGetter, FacePart_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: doMasks,
                                    mask: out FacePart_ErrorMask loquiMask);
                                listSubMask = loquiMask == null ? null : new MaskItem<Exception, FacePart_ErrorMask>(null, loquiMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.FaceData,
                            subMask);
                    }
                    if (item.BodyData_Property.HasBeenSet)
                    {
                        MaskItem<Exception, GenderedBodyData_ErrorMask> subMask;
                        LoquiXmlTranslation<IGenderedBodyDataGetter, GenderedBodyData_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.BodyData,
                            name: nameof(item.BodyData),
                            doMasks: doMasks,
                            mask: out GenderedBodyData_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, GenderedBodyData_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.BodyData,
                            subMask);
                    }
                    if (item.Hairs.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<Exception>> subMask;
                        ListXmlTranslation<FormID, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Hairs),
                            item: item.Hairs,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (FormID subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                FormIDXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: doMasks,
                                    errorMask: out listSubMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Hairs,
                            subMask);
                    }
                    if (item.Eyes.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<Exception>> subMask;
                        ListXmlTranslation<FormID, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Eyes),
                            item: item.Eyes,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (FormID subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                FormIDXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: doMasks,
                                    errorMask: out listSubMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Eyes,
                            subMask);
                    }
                    if (item.FaceGenData_Property.HasBeenSet)
                    {
                        MaskItem<Exception, FaceGenData_ErrorMask> subMask;
                        LoquiXmlTranslation<IFaceGenDataGetter, FaceGenData_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.FaceGenData,
                            name: nameof(item.FaceGenData),
                            doMasks: doMasks,
                            mask: out FaceGenData_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, FaceGenData_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.FaceGenData,
                            subMask);
                    }
                    if (item.Unknown_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteArrayXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Unknown),
                            item.Unknown,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Unknown,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IRaceGetter item,
            bool doMasks,
            out Race_ErrorMask errorMask)
        {
            Race_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Race_ErrorMask()) : default(Func<Race_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IRaceGetter item,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Race_Registration.RACE_HEADER,
                    type: ObjectType.Record))
                {
                    MajorRecordCommon.Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            IRaceGetter item,
            MutagenWriter writer,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                doMasks: doMasks,
                errorMask: errorMask);
            Mutagen.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description_Property,
                doMasks: doMasks,
                fieldIndex: (int)Race_FieldIndex.Description,
                errorMask: errorMask,
                header: Race_Registration.DESC_HEADER,
                nullable: false);
            Mutagen.Binary.ListBinaryTranslation<FormID, Exception>.Instance.Write(
                writer: writer,
                item: item.Spells,
                fieldIndex: (int)Race_FieldIndex.Spells,
                doMasks: doMasks,
                errorMask: errorMask,
                transl: (FormID subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Binary.FormIDBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: doMasks,
                        errorMask: out listSubMask,
                        header: Race_Registration.SPLO_HEADER,
                        nullable: false);
                }
                );
            Mutagen.Binary.ListBinaryTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Relations,
                fieldIndex: (int)Race_FieldIndex.Relations,
                doMasks: doMasks,
                errorMask: errorMask,
                transl: (Relation subItem, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<Relation, Relation_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: doMasks,
                        errorMask: out listSubMask);
                }
                );
            LoquiBinaryTranslation<RaceData, RaceData_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Data_Property,
                doMasks: doMasks,
                fieldIndex: (int)Race_FieldIndex.Data,
                errorMask: errorMask);
            LoquiBinaryTranslation<RaceVoices, RaceVoices_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Voices_Property,
                doMasks: doMasks,
                fieldIndex: (int)Race_FieldIndex.Voices,
                errorMask: errorMask);
            LoquiBinaryTranslation<RaceHair, RaceHair_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.DefaultHair_Property,
                doMasks: doMasks,
                fieldIndex: (int)Race_FieldIndex.DefaultHair,
                errorMask: errorMask);
            Mutagen.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DefaultHairColor_Property,
                doMasks: doMasks,
                fieldIndex: (int)Race_FieldIndex.DefaultHairColor,
                errorMask: errorMask,
                header: Race_Registration.CNAM_HEADER,
                nullable: false);
            Mutagen.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FaceGenMainClamp_Property,
                doMasks: doMasks,
                fieldIndex: (int)Race_FieldIndex.FaceGenMainClamp,
                errorMask: errorMask,
                header: Race_Registration.PNAM_HEADER,
                nullable: false);
            Mutagen.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FaceGenFaceClamp_Property,
                doMasks: doMasks,
                fieldIndex: (int)Race_FieldIndex.FaceGenFaceClamp,
                errorMask: errorMask,
                header: Race_Registration.UNAM_HEADER,
                nullable: false);
            LoquiBinaryTranslation<RaceStatsGendered, RaceStatsGendered_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.RaceStats_Property,
                doMasks: doMasks,
                fieldIndex: (int)Race_FieldIndex.RaceStats,
                errorMask: errorMask);
            using (HeaderExport.ExportHeader(writer, Race_Registration.NAM0_HEADER, ObjectType.Subrecord)) { }
            Mutagen.Binary.ListBinaryTranslation<FacePart, MaskItem<Exception, FacePart_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.FaceData,
                fieldIndex: (int)Race_FieldIndex.FaceData,
                doMasks: doMasks,
                errorMask: errorMask,
                transl: (FacePart subItem, bool listDoMasks, out MaskItem<Exception, FacePart_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<FacePart, FacePart_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: doMasks,
                        errorMask: out listSubMask);
                }
                );
            using (HeaderExport.ExportHeader(writer, Race_Registration.NAM1_HEADER, ObjectType.Subrecord)) { }
            LoquiBinaryTranslation<GenderedBodyData, GenderedBodyData_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.BodyData_Property,
                doMasks: doMasks,
                fieldIndex: (int)Race_FieldIndex.BodyData,
                errorMask: errorMask);
            Mutagen.Binary.ListBinaryTranslation<FormID, Exception>.Instance.Write(
                writer: writer,
                item: item.Hairs,
                fieldIndex: (int)Race_FieldIndex.Hairs,
                recordType: Race_Registration.HNAM_HEADER,
                doMasks: doMasks,
                errorMask: errorMask,
                transl: (FormID subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Binary.FormIDBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: doMasks,
                        errorMask: out listSubMask);
                }
                );
            Mutagen.Binary.ListBinaryTranslation<FormID, Exception>.Instance.Write(
                writer: writer,
                item: item.Eyes,
                fieldIndex: (int)Race_FieldIndex.Eyes,
                recordType: Race_Registration.ENAM_HEADER,
                doMasks: doMasks,
                errorMask: errorMask,
                transl: (FormID subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Binary.FormIDBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: doMasks,
                        errorMask: out listSubMask);
                }
                );
            LoquiBinaryTranslation<FaceGenData, FaceGenData_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.FaceGenData_Property,
                doMasks: doMasks,
                fieldIndex: (int)Race_FieldIndex.FaceGenData,
                errorMask: errorMask);
            Mutagen.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown_Property,
                doMasks: doMasks,
                fieldIndex: (int)Race_FieldIndex.Unknown,
                errorMask: errorMask,
                header: Race_Registration.SNAM_HEADER,
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Race_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Race_Mask<T>>
    {
        #region Ctors
        public Race_Mask()
        {
        }

        public Race_Mask(T initialValue)
        {
            this.Description = initialValue;
            this.Spells = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.Relations = new MaskItem<T, IEnumerable<MaskItem<T, Relation_Mask<T>>>>(initialValue, null);
            this.Data = new MaskItem<T, RaceData_Mask<T>>(initialValue, new RaceData_Mask<T>(initialValue));
            this.Voices = new MaskItem<T, RaceVoices_Mask<T>>(initialValue, new RaceVoices_Mask<T>(initialValue));
            this.DefaultHair = new MaskItem<T, RaceHair_Mask<T>>(initialValue, new RaceHair_Mask<T>(initialValue));
            this.DefaultHairColor = initialValue;
            this.FaceGenMainClamp = initialValue;
            this.FaceGenFaceClamp = initialValue;
            this.RaceStats = new MaskItem<T, RaceStatsGendered_Mask<T>>(initialValue, new RaceStatsGendered_Mask<T>(initialValue));
            this.FaceData = new MaskItem<T, IEnumerable<MaskItem<T, FacePart_Mask<T>>>>(initialValue, null);
            this.BodyData = new MaskItem<T, GenderedBodyData_Mask<T>>(initialValue, new GenderedBodyData_Mask<T>(initialValue));
            this.Hairs = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.Eyes = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.FaceGenData = new MaskItem<T, FaceGenData_Mask<T>>(initialValue, new FaceGenData_Mask<T>(initialValue));
            this.Unknown = initialValue;
        }
        #endregion

        #region Members
        public T Description;
        public MaskItem<T, IEnumerable<T>> Spells;
        public MaskItem<T, IEnumerable<MaskItem<T, Relation_Mask<T>>>> Relations;
        public MaskItem<T, RaceData_Mask<T>> Data { get; set; }
        public MaskItem<T, RaceVoices_Mask<T>> Voices { get; set; }
        public MaskItem<T, RaceHair_Mask<T>> DefaultHair { get; set; }
        public T DefaultHairColor;
        public T FaceGenMainClamp;
        public T FaceGenFaceClamp;
        public MaskItem<T, RaceStatsGendered_Mask<T>> RaceStats { get; set; }
        public MaskItem<T, IEnumerable<MaskItem<T, FacePart_Mask<T>>>> FaceData;
        public MaskItem<T, GenderedBodyData_Mask<T>> BodyData { get; set; }
        public MaskItem<T, IEnumerable<T>> Hairs;
        public MaskItem<T, IEnumerable<T>> Eyes;
        public MaskItem<T, FaceGenData_Mask<T>> FaceGenData { get; set; }
        public T Unknown;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Race_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Race_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Spells, rhs.Spells)) return false;
            if (!object.Equals(this.Relations, rhs.Relations)) return false;
            if (!object.Equals(this.Data, rhs.Data)) return false;
            if (!object.Equals(this.Voices, rhs.Voices)) return false;
            if (!object.Equals(this.DefaultHair, rhs.DefaultHair)) return false;
            if (!object.Equals(this.DefaultHairColor, rhs.DefaultHairColor)) return false;
            if (!object.Equals(this.FaceGenMainClamp, rhs.FaceGenMainClamp)) return false;
            if (!object.Equals(this.FaceGenFaceClamp, rhs.FaceGenFaceClamp)) return false;
            if (!object.Equals(this.RaceStats, rhs.RaceStats)) return false;
            if (!object.Equals(this.FaceData, rhs.FaceData)) return false;
            if (!object.Equals(this.BodyData, rhs.BodyData)) return false;
            if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
            if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(this.FaceGenData, rhs.FaceGenData)) return false;
            if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Spells?.GetHashCode());
            ret = ret.CombineHashCode(this.Relations?.GetHashCode());
            ret = ret.CombineHashCode(this.Data?.GetHashCode());
            ret = ret.CombineHashCode(this.Voices?.GetHashCode());
            ret = ret.CombineHashCode(this.DefaultHair?.GetHashCode());
            ret = ret.CombineHashCode(this.DefaultHairColor?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenMainClamp?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenFaceClamp?.GetHashCode());
            ret = ret.CombineHashCode(this.RaceStats?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceData?.GetHashCode());
            ret = ret.CombineHashCode(this.BodyData?.GetHashCode());
            ret = ret.CombineHashCode(this.Hairs?.GetHashCode());
            ret = ret.CombineHashCode(this.Eyes?.GetHashCode());
            ret = ret.CombineHashCode(this.FaceGenData?.GetHashCode());
            ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Description)) return false;
            if (Spells != null)
            {
                if (!eval(this.Spells.Overall)) return false;
                if (Spells.Specific != null)
                {
                    foreach (var item in Spells.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (Relations != null)
            {
                if (!eval(this.Relations.Overall)) return false;
                if (Relations.Specific != null)
                {
                    foreach (var item in Relations.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            if (Data != null)
            {
                if (!eval(this.Data.Overall)) return false;
                if (Data.Specific != null && !Data.Specific.AllEqual(eval)) return false;
            }
            if (Voices != null)
            {
                if (!eval(this.Voices.Overall)) return false;
                if (Voices.Specific != null && !Voices.Specific.AllEqual(eval)) return false;
            }
            if (DefaultHair != null)
            {
                if (!eval(this.DefaultHair.Overall)) return false;
                if (DefaultHair.Specific != null && !DefaultHair.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.DefaultHairColor)) return false;
            if (!eval(this.FaceGenMainClamp)) return false;
            if (!eval(this.FaceGenFaceClamp)) return false;
            if (RaceStats != null)
            {
                if (!eval(this.RaceStats.Overall)) return false;
                if (RaceStats.Specific != null && !RaceStats.Specific.AllEqual(eval)) return false;
            }
            if (FaceData != null)
            {
                if (!eval(this.FaceData.Overall)) return false;
                if (FaceData.Specific != null)
                {
                    foreach (var item in FaceData.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            if (BodyData != null)
            {
                if (!eval(this.BodyData.Overall)) return false;
                if (BodyData.Specific != null && !BodyData.Specific.AllEqual(eval)) return false;
            }
            if (Hairs != null)
            {
                if (!eval(this.Hairs.Overall)) return false;
                if (Hairs.Specific != null)
                {
                    foreach (var item in Hairs.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (Eyes != null)
            {
                if (!eval(this.Eyes.Overall)) return false;
                if (Eyes.Specific != null)
                {
                    foreach (var item in Eyes.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (FaceGenData != null)
            {
                if (!eval(this.FaceGenData.Overall)) return false;
                if (FaceGenData.Specific != null && !FaceGenData.Specific.AllEqual(eval)) return false;
            }
            if (!eval(this.Unknown)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new Race_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Race_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Race_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Description = eval(this.Description);
            if (Spells != null)
            {
                obj.Spells = new MaskItem<R, IEnumerable<R>>();
                obj.Spells.Overall = eval(this.Spells.Overall);
                if (Spells.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Spells.Specific = l;
                    foreach (var item in Spells.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (Relations != null)
            {
                obj.Relations = new MaskItem<R, IEnumerable<MaskItem<R, Relation_Mask<R>>>>();
                obj.Relations.Overall = eval(this.Relations.Overall);
                if (Relations.Specific != null)
                {
                    List<MaskItem<R, Relation_Mask<R>>> l = new List<MaskItem<R, Relation_Mask<R>>>();
                    obj.Relations.Specific = l;
                    foreach (var item in Relations.Specific)
                    {
                        MaskItem<R, Relation_Mask<R>> mask = default(MaskItem<R, Relation_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Relation_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (this.Data != null)
            {
                obj.Data = new MaskItem<R, RaceData_Mask<R>>();
                obj.Data.Overall = eval(this.Data.Overall);
                if (this.Data.Specific != null)
                {
                    obj.Data.Specific = this.Data.Specific.Translate(eval);
                }
            }
            if (this.Voices != null)
            {
                obj.Voices = new MaskItem<R, RaceVoices_Mask<R>>();
                obj.Voices.Overall = eval(this.Voices.Overall);
                if (this.Voices.Specific != null)
                {
                    obj.Voices.Specific = this.Voices.Specific.Translate(eval);
                }
            }
            if (this.DefaultHair != null)
            {
                obj.DefaultHair = new MaskItem<R, RaceHair_Mask<R>>();
                obj.DefaultHair.Overall = eval(this.DefaultHair.Overall);
                if (this.DefaultHair.Specific != null)
                {
                    obj.DefaultHair.Specific = this.DefaultHair.Specific.Translate(eval);
                }
            }
            obj.DefaultHairColor = eval(this.DefaultHairColor);
            obj.FaceGenMainClamp = eval(this.FaceGenMainClamp);
            obj.FaceGenFaceClamp = eval(this.FaceGenFaceClamp);
            if (this.RaceStats != null)
            {
                obj.RaceStats = new MaskItem<R, RaceStatsGendered_Mask<R>>();
                obj.RaceStats.Overall = eval(this.RaceStats.Overall);
                if (this.RaceStats.Specific != null)
                {
                    obj.RaceStats.Specific = this.RaceStats.Specific.Translate(eval);
                }
            }
            if (FaceData != null)
            {
                obj.FaceData = new MaskItem<R, IEnumerable<MaskItem<R, FacePart_Mask<R>>>>();
                obj.FaceData.Overall = eval(this.FaceData.Overall);
                if (FaceData.Specific != null)
                {
                    List<MaskItem<R, FacePart_Mask<R>>> l = new List<MaskItem<R, FacePart_Mask<R>>>();
                    obj.FaceData.Specific = l;
                    foreach (var item in FaceData.Specific)
                    {
                        MaskItem<R, FacePart_Mask<R>> mask = default(MaskItem<R, FacePart_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, FacePart_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (this.BodyData != null)
            {
                obj.BodyData = new MaskItem<R, GenderedBodyData_Mask<R>>();
                obj.BodyData.Overall = eval(this.BodyData.Overall);
                if (this.BodyData.Specific != null)
                {
                    obj.BodyData.Specific = this.BodyData.Specific.Translate(eval);
                }
            }
            if (Hairs != null)
            {
                obj.Hairs = new MaskItem<R, IEnumerable<R>>();
                obj.Hairs.Overall = eval(this.Hairs.Overall);
                if (Hairs.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Hairs.Specific = l;
                    foreach (var item in Hairs.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (Eyes != null)
            {
                obj.Eyes = new MaskItem<R, IEnumerable<R>>();
                obj.Eyes.Overall = eval(this.Eyes.Overall);
                if (Eyes.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Eyes.Specific = l;
                    foreach (var item in Eyes.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (this.FaceGenData != null)
            {
                obj.FaceGenData = new MaskItem<R, FaceGenData_Mask<R>>();
                obj.FaceGenData.Overall = eval(this.FaceGenData.Overall);
                if (this.FaceGenData.Specific != null)
                {
                    obj.FaceGenData.Specific = this.FaceGenData.Specific.Translate(eval);
                }
            }
            obj.Unknown = eval(this.Unknown);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Spells.Specific = null;
            this.Relations.Specific = null;
            this.FaceData.Specific = null;
            this.Hairs.Specific = null;
            this.Eyes.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Race_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Race_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Race_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description.ToStringSafe()}");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Spells.Overall != null)
                        {
                            fg.AppendLine(Spells.Overall.ToString());
                        }
                        if (Spells.Specific != null)
                        {
                            foreach (var subItem in Spells.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem.ToStringSafe()}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Relations?.Overall ?? true)
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Relations.Overall != null)
                        {
                            fg.AppendLine(Relations.Overall.ToString());
                        }
                        if (Relations.Specific != null)
                        {
                            foreach (var subItem in Relations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Data?.Overall ?? true)
                {
                    Data.ToString(fg);
                }
                if (printMask?.Voices?.Overall ?? true)
                {
                    Voices.ToString(fg);
                }
                if (printMask?.DefaultHair?.Overall ?? true)
                {
                    DefaultHair.ToString(fg);
                }
                if (printMask?.DefaultHairColor ?? true)
                {
                    fg.AppendLine($"DefaultHairColor => {DefaultHairColor.ToStringSafe()}");
                }
                if (printMask?.FaceGenMainClamp ?? true)
                {
                    fg.AppendLine($"FaceGenMainClamp => {FaceGenMainClamp.ToStringSafe()}");
                }
                if (printMask?.FaceGenFaceClamp ?? true)
                {
                    fg.AppendLine($"FaceGenFaceClamp => {FaceGenFaceClamp.ToStringSafe()}");
                }
                if (printMask?.RaceStats?.Overall ?? true)
                {
                    RaceStats.ToString(fg);
                }
                if (printMask?.FaceData?.Overall ?? true)
                {
                    fg.AppendLine("FaceData =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (FaceData.Overall != null)
                        {
                            fg.AppendLine(FaceData.Overall.ToString());
                        }
                        if (FaceData.Specific != null)
                        {
                            foreach (var subItem in FaceData.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.BodyData?.Overall ?? true)
                {
                    BodyData.ToString(fg);
                }
                if (printMask?.Hairs?.Overall ?? true)
                {
                    fg.AppendLine("Hairs =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Hairs.Overall != null)
                        {
                            fg.AppendLine(Hairs.Overall.ToString());
                        }
                        if (Hairs.Specific != null)
                        {
                            foreach (var subItem in Hairs.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem.ToStringSafe()}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    fg.AppendLine("Eyes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Eyes.Overall != null)
                        {
                            fg.AppendLine(Eyes.Overall.ToString());
                        }
                        if (Eyes.Specific != null)
                        {
                            foreach (var subItem in Eyes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem.ToStringSafe()}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.FaceGenData?.Overall ?? true)
                {
                    FaceGenData.ToString(fg);
                }
                if (printMask?.Unknown ?? true)
                {
                    fg.AppendLine($"Unknown => {Unknown.ToStringSafe()}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Race_ErrorMask : NamedMajorRecord_ErrorMask, IErrorMask<Race_ErrorMask>
    {
        #region Members
        public Exception Description;
        public MaskItem<Exception, IEnumerable<Exception>> Spells;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>> Relations;
        public MaskItem<Exception, RaceData_ErrorMask> Data;
        public MaskItem<Exception, RaceVoices_ErrorMask> Voices;
        public MaskItem<Exception, RaceHair_ErrorMask> DefaultHair;
        public Exception DefaultHairColor;
        public Exception FaceGenMainClamp;
        public Exception FaceGenFaceClamp;
        public MaskItem<Exception, RaceStatsGendered_ErrorMask> RaceStats;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, FacePart_ErrorMask>>> FaceData;
        public MaskItem<Exception, GenderedBodyData_ErrorMask> BodyData;
        public MaskItem<Exception, IEnumerable<Exception>> Hairs;
        public MaskItem<Exception, IEnumerable<Exception>> Eyes;
        public MaskItem<Exception, FaceGenData_ErrorMask> FaceGenData;
        public Exception Unknown;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case Race_FieldIndex.Spells:
                    this.Spells = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Race_FieldIndex.Relations:
                    this.Relations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>(ex, null);
                    break;
                case Race_FieldIndex.Data:
                    this.Data = new MaskItem<Exception, RaceData_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.Voices:
                    this.Voices = new MaskItem<Exception, RaceVoices_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.DefaultHair:
                    this.DefaultHair = new MaskItem<Exception, RaceHair_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    this.DefaultHairColor = ex;
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    this.FaceGenMainClamp = ex;
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    this.FaceGenFaceClamp = ex;
                    break;
                case Race_FieldIndex.RaceStats:
                    this.RaceStats = new MaskItem<Exception, RaceStatsGendered_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.FaceData:
                    this.FaceData = new MaskItem<Exception, IEnumerable<MaskItem<Exception, FacePart_ErrorMask>>>(ex, null);
                    break;
                case Race_FieldIndex.BodyData:
                    this.BodyData = new MaskItem<Exception, GenderedBodyData_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.Hairs:
                    this.Hairs = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Race_FieldIndex.Eyes:
                    this.Eyes = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Race_FieldIndex.FaceGenData:
                    this.FaceGenData = new MaskItem<Exception, FaceGenData_ErrorMask>(ex, null);
                    break;
                case Race_FieldIndex.Unknown:
                    this.Unknown = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case Race_FieldIndex.Spells:
                    this.Spells = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Race_FieldIndex.Relations:
                    this.Relations = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>)obj;
                    break;
                case Race_FieldIndex.Data:
                    this.Data = (MaskItem<Exception, RaceData_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.Voices:
                    this.Voices = (MaskItem<Exception, RaceVoices_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.DefaultHair:
                    this.DefaultHair = (MaskItem<Exception, RaceHair_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.DefaultHairColor:
                    this.DefaultHairColor = (Exception)obj;
                    break;
                case Race_FieldIndex.FaceGenMainClamp:
                    this.FaceGenMainClamp = (Exception)obj;
                    break;
                case Race_FieldIndex.FaceGenFaceClamp:
                    this.FaceGenFaceClamp = (Exception)obj;
                    break;
                case Race_FieldIndex.RaceStats:
                    this.RaceStats = (MaskItem<Exception, RaceStatsGendered_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.FaceData:
                    this.FaceData = (MaskItem<Exception, IEnumerable<MaskItem<Exception, FacePart_ErrorMask>>>)obj;
                    break;
                case Race_FieldIndex.BodyData:
                    this.BodyData = (MaskItem<Exception, GenderedBodyData_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.Hairs:
                    this.Hairs = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Race_FieldIndex.Eyes:
                    this.Eyes = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Race_FieldIndex.FaceGenData:
                    this.FaceGenData = (MaskItem<Exception, FaceGenData_ErrorMask>)obj;
                    break;
                case Race_FieldIndex.Unknown:
                    this.Unknown = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Race_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            if (Description != null)
            {
                fg.AppendLine($"Description => {Description.ToStringSafe()}");
            }
            if (Spells != null)
            {
                fg.AppendLine("Spells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Spells.Overall != null)
                    {
                        fg.AppendLine(Spells.Overall.ToString());
                    }
                    if (Spells.Specific != null)
                    {
                        foreach (var subItem in Spells.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($" => {subItem.ToStringSafe()}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (Relations != null)
            {
                fg.AppendLine("Relations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Relations.Overall != null)
                    {
                        fg.AppendLine(Relations.Overall.ToString());
                    }
                    if (Relations.Specific != null)
                    {
                        foreach (var subItem in Relations.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem.ToString(fg);
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (Data != null)
            {
                Data.ToString(fg);
            }
            if (Voices != null)
            {
                Voices.ToString(fg);
            }
            if (DefaultHair != null)
            {
                DefaultHair.ToString(fg);
            }
            if (DefaultHairColor != null)
            {
                fg.AppendLine($"DefaultHairColor => {DefaultHairColor.ToStringSafe()}");
            }
            if (FaceGenMainClamp != null)
            {
                fg.AppendLine($"FaceGenMainClamp => {FaceGenMainClamp.ToStringSafe()}");
            }
            if (FaceGenFaceClamp != null)
            {
                fg.AppendLine($"FaceGenFaceClamp => {FaceGenFaceClamp.ToStringSafe()}");
            }
            if (RaceStats != null)
            {
                RaceStats.ToString(fg);
            }
            if (FaceData != null)
            {
                fg.AppendLine("FaceData =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (FaceData.Overall != null)
                    {
                        fg.AppendLine(FaceData.Overall.ToString());
                    }
                    if (FaceData.Specific != null)
                    {
                        foreach (var subItem in FaceData.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem.ToString(fg);
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (BodyData != null)
            {
                BodyData.ToString(fg);
            }
            if (Hairs != null)
            {
                fg.AppendLine("Hairs =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Hairs.Overall != null)
                    {
                        fg.AppendLine(Hairs.Overall.ToString());
                    }
                    if (Hairs.Specific != null)
                    {
                        foreach (var subItem in Hairs.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($" => {subItem.ToStringSafe()}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (Eyes != null)
            {
                fg.AppendLine("Eyes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Eyes.Overall != null)
                    {
                        fg.AppendLine(Eyes.Overall.ToString());
                    }
                    if (Eyes.Specific != null)
                    {
                        foreach (var subItem in Eyes.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($" => {subItem.ToStringSafe()}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (FaceGenData != null)
            {
                FaceGenData.ToString(fg);
            }
            if (Unknown != null)
            {
                fg.AppendLine($"Unknown => {Unknown.ToStringSafe()}");
            }
        }
        #endregion

        #region Combine
        public Race_ErrorMask Combine(Race_ErrorMask rhs)
        {
            var ret = new Race_ErrorMask();
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Spells = new MaskItem<Exception, IEnumerable<Exception>>(this.Spells.Overall.Combine(rhs.Spells.Overall), new List<Exception>(this.Spells.Specific.And(rhs.Spells.Specific)));
            ret.Relations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>(this.Relations.Overall.Combine(rhs.Relations.Overall), new List<MaskItem<Exception, Relation_ErrorMask>>(this.Relations.Specific.And(rhs.Relations.Specific)));
            ret.Data = new MaskItem<Exception, RaceData_ErrorMask>(this.Data.Overall.Combine(rhs.Data.Overall), ((IErrorMask<RaceData_ErrorMask>)this.Data.Specific).Combine(rhs.Data.Specific));
            ret.Voices = new MaskItem<Exception, RaceVoices_ErrorMask>(this.Voices.Overall.Combine(rhs.Voices.Overall), ((IErrorMask<RaceVoices_ErrorMask>)this.Voices.Specific).Combine(rhs.Voices.Specific));
            ret.DefaultHair = new MaskItem<Exception, RaceHair_ErrorMask>(this.DefaultHair.Overall.Combine(rhs.DefaultHair.Overall), ((IErrorMask<RaceHair_ErrorMask>)this.DefaultHair.Specific).Combine(rhs.DefaultHair.Specific));
            ret.DefaultHairColor = this.DefaultHairColor.Combine(rhs.DefaultHairColor);
            ret.FaceGenMainClamp = this.FaceGenMainClamp.Combine(rhs.FaceGenMainClamp);
            ret.FaceGenFaceClamp = this.FaceGenFaceClamp.Combine(rhs.FaceGenFaceClamp);
            ret.RaceStats = new MaskItem<Exception, RaceStatsGendered_ErrorMask>(this.RaceStats.Overall.Combine(rhs.RaceStats.Overall), ((IErrorMask<RaceStatsGendered_ErrorMask>)this.RaceStats.Specific).Combine(rhs.RaceStats.Specific));
            ret.FaceData = new MaskItem<Exception, IEnumerable<MaskItem<Exception, FacePart_ErrorMask>>>(this.FaceData.Overall.Combine(rhs.FaceData.Overall), new List<MaskItem<Exception, FacePart_ErrorMask>>(this.FaceData.Specific.And(rhs.FaceData.Specific)));
            ret.BodyData = new MaskItem<Exception, GenderedBodyData_ErrorMask>(this.BodyData.Overall.Combine(rhs.BodyData.Overall), ((IErrorMask<GenderedBodyData_ErrorMask>)this.BodyData.Specific).Combine(rhs.BodyData.Specific));
            ret.Hairs = new MaskItem<Exception, IEnumerable<Exception>>(this.Hairs.Overall.Combine(rhs.Hairs.Overall), new List<Exception>(this.Hairs.Specific.And(rhs.Hairs.Specific)));
            ret.Eyes = new MaskItem<Exception, IEnumerable<Exception>>(this.Eyes.Overall.Combine(rhs.Eyes.Overall), new List<Exception>(this.Eyes.Specific.And(rhs.Eyes.Specific)));
            ret.FaceGenData = new MaskItem<Exception, FaceGenData_ErrorMask>(this.FaceGenData.Overall.Combine(rhs.FaceGenData.Overall), ((IErrorMask<FaceGenData_ErrorMask>)this.FaceGenData.Specific).Combine(rhs.FaceGenData.Specific));
            ret.Unknown = this.Unknown.Combine(rhs.Unknown);
            return ret;
        }
        public static Race_ErrorMask Combine(Race_ErrorMask lhs, Race_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Race_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public bool Description;
        public CopyOption Spells;
        public MaskItem<CopyOption, Relation_CopyMask> Relations;
        public MaskItem<CopyOption, RaceData_CopyMask> Data;
        public MaskItem<CopyOption, RaceVoices_CopyMask> Voices;
        public MaskItem<CopyOption, RaceHair_CopyMask> DefaultHair;
        public bool DefaultHairColor;
        public bool FaceGenMainClamp;
        public bool FaceGenFaceClamp;
        public MaskItem<CopyOption, RaceStatsGendered_CopyMask> RaceStats;
        public MaskItem<CopyOption, FacePart_CopyMask> FaceData;
        public MaskItem<CopyOption, GenderedBodyData_CopyMask> BodyData;
        public CopyOption Hairs;
        public CopyOption Eyes;
        public MaskItem<CopyOption, FaceGenData_CopyMask> FaceGenData;
        public bool Unknown;
        #endregion

    }
    #endregion




    #endregion

}
