/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using Mutagen;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class Race : NamedMajorRecord, IRace, ILoquiObjectSetter, IEquatable<Race>
    {
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static Race_Registration Registration => Race_Registration.Instance;

        #region Ctor
        public Race()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Description
        protected readonly INotifyingItem<String> _Description = NotifyingItem.Factory<String>(markAsSet: false);
        public INotifyingItem<String> Description_Property => _Description;
        public String Description
        {
            get => this._Description.Item;
            set => this._Description.Set(value);
        }
        INotifyingItem<String> IRace.Description_Property => this.Description_Property;
        INotifyingItemGetter<String> IRaceGetter.Description_Property => this.Description_Property;
        #endregion
        #region Spells
        private readonly INotifyingList<FormID> _Spells = new NotifyingList<FormID>();
        public INotifyingList<FormID> Spells => _Spells;
        #region Interface Members
        INotifyingList<FormID> IRace.Spells => _Spells;
        INotifyingListGetter<FormID> IRaceGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Relations
        private readonly INotifyingList<Relation> _Relations = new NotifyingList<Relation>();
        public INotifyingList<Relation> Relations => _Relations;
        #region Interface Members
        INotifyingList<Relation> IRace.Relations => _Relations;
        INotifyingListGetter<Relation> IRaceGetter.Relations => _Relations;
        #endregion

        #endregion
        #region Data
        private readonly INotifyingItem<RaceData> _Data = new NotifyingItem<RaceData>();
        public INotifyingItem<RaceData> Data_Property => this._Data;
        RaceData IRaceGetter.Data => this.Data;
        public RaceData Data { get => _Data.Item; set => _Data.Item = value; }
        INotifyingItem<RaceData> IRace.Data_Property => this.Data_Property;
        INotifyingItemGetter<RaceData> IRaceGetter.Data_Property => this.Data_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => RaceCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => RaceCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => RaceCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RaceCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return RaceCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Race_Mask<bool> printMask = null)
        {
            return RaceCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RaceCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new Race_Mask<bool> GetHasBeenSetMask()
        {
            return RaceCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Race rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Race rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Description_Property.HasBeenSet != rhs.Description_Property.HasBeenSet) return false;
            if (Description_Property.HasBeenSet)
            {
                if (!object.Equals(Description, rhs.Description)) return false;
            }
            if (Spells.HasBeenSet != rhs.Spells.HasBeenSet) return false;
            if (Spells.HasBeenSet)
            {
                if (!Spells.SequenceEqual(rhs.Spells)) return false;
            }
            if (Relations.HasBeenSet != rhs.Relations.HasBeenSet) return false;
            if (Relations.HasBeenSet)
            {
                if (!Relations.SequenceEqual(rhs.Relations)) return false;
            }
            if (Data_Property.HasBeenSet != rhs.Data_Property.HasBeenSet) return false;
            if (Data_Property.HasBeenSet)
            {
                if (!object.Equals(Data, rhs.Data)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Description_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Description).CombineHashCode(ret);
            }
            if (Spells.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Spells).CombineHashCode(ret);
            }
            if (Relations.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Relations).CombineHashCode(ret);
            }
            if (Data_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Data).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static Race Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Race Create_XML(
            XElement root,
            out Race_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Race Create_XML(
            XElement root,
            bool doMasks,
            out Race_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Race Object, Race_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Race_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Race_ErrorMask()) : default(Func<Race_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Race Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Race Create_XML(
            string path,
            out Race_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Race Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Race Create_XML(
            Stream stream,
            out Race_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Race, Race_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Race, Race_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Race_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_XML(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out Race_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Race_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Race_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Race_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Race_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public override void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public override void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public override void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            RaceCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Race Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            var ret = new Race();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Race item,
            XElement root,
            string name,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Description":
                    {
                        Exception subMask;
                        var tryGet = StringXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Description.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Description,
                            subMask);
                    }
                    break;
                case "Spells":
                    {
                        MaskItem<Exception, IEnumerable<Exception>> subMask;
                        var listTryGet = ListXmlTranslation<FormID, Exception>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                            {
                                return FormIDXmlTranslation.Instance.Parse(
                                    r,
                                    nullable: false,
                                    doMasks: listDoMasks,
                                    errorMask: out listSubMask).Bubble((o) => o.Value);
                            }
                            );
                        item._Spells.SetIfSucceeded(listTryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Spells,
                            subMask);
                    }
                    break;
                case "Relations":
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>> subMask;
                        var listTryGet = ListXmlTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                            {
                                return LoquiXmlTranslation<Relation, Relation_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: listDoMasks,
                                    mask: out listSubMask);
                            }
                            );
                        item._Relations.SetIfSucceeded(listTryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Relations,
                            subMask);
                    }
                    break;
                case "Data":
                    {
                        MaskItem<Exception, RaceData_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<RaceData, RaceData_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Data.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Data,
                            subMask);
                    }
                    break;
                default:
                    NamedMajorRecord.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static Race Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Race Create_Binary(
            MutagenFrame frame,
            out Race_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Race Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Race_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Race Object, Race_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            Race_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Race_ErrorMask()) : default(Func<Race_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Race Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Race Create_Binary(
            string path,
            out Race_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Race Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Race Create_Binary(
            Stream stream,
            out Race_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Race, Race_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Race, Race_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Race_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out NamedMajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Race_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out MajorRecord_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out Race_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Race_ErrorMask errorMask)
        {
            errorMask = (Race_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Race_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Race_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public override void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public override void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public override void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            RaceCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Race Create_Binary_Internal(
            MutagenFrame frame,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            var ret = new Race();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseRecord(
                    frame,
                    Race_Registration.DESC_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    while (!frame.Complete)
                    {
                        if (!Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            doMasks: doMasks,
                            errorMask: errorMask)) break;
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            Race item,
            MutagenFrame frame,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            NamedMajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                doMasks: doMasks,
                errorMask: errorMask);
            if (frame.Complete) return;
            var DatatryGet = LoquiBinaryTranslation<RaceData, RaceData_ErrorMask>.Instance.Parse(
                frame: frame.Spawn(snapToFinalPosition: false),
                doMasks: doMasks,
                fieldIndex: (int)Race_FieldIndex.Data,
                errorMask: errorMask);
            item._Data.SetIfSucceeded(DatatryGet);
        }

        protected static bool Fill_Binary_RecordTypes(
            Race item,
            MutagenFrame frame,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                frame: frame,
                contentLength: out var contentLength);
            switch (nextRecordType.Type)
            {
                case "DESC":
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var DescriptiontryGet = Mutagen.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        fieldIndex: (int)Race_FieldIndex.Description,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    item._Description.SetIfSucceeded(DescriptiontryGet);
                break;
                case "XNAM":
                    var RelationstryGet = Mutagen.Binary.ListBinaryTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.ParseRepeatedItem(
                        frame: frame,
                        triggeringRecord: Race_Registration.XNAM_HEADER,
                        fieldIndex: (int)Race_FieldIndex.Relations,
                        doMasks: doMasks,
                        objType: ObjectType.Struct,
                        errorMask: errorMask,
                        transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                        {
                            return LoquiBinaryTranslation<Relation, Relation_ErrorMask>.Instance.Parse(
                                frame: r.Spawn(snapToFinalPosition: false),
                                doMasks: listDoMasks,
                                errorMask: out listSubMask);
                        }
                        );
                    item._Relations.SetIfSucceeded(RelationstryGet);
                break;
                default:
                    if (nextRecordType.Equals(Race_Registration.SPLO_HEADER))
                    {
                        var SpellstryGet = Mutagen.Binary.ListBinaryTranslation<FormID, Exception>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: Race_Registration.SPLO_HEADER,
                            fieldIndex: (int)Race_FieldIndex.Spells,
                            doMasks: doMasks,
                            errorMask: errorMask,
                            transl: (MutagenFrame r, bool listDoMasks, out Exception listSubMask) =>
                            {
                                return Mutagen.Binary.FormIDBinaryTranslation.Instance.Parse(
                                    r,
                                    nullable: false,
                                    doMasks: listDoMasks,
                                    errorMask: out listSubMask).Bubble((o) => o.Value);
                            }
                            );
                        item._Spells.SetIfSucceeded(SpellstryGet);
                        break;
                    }
                    NamedMajorRecord.Fill_Binary_RecordTypes(
                        item: item,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
            return true;
        }

        #endregion

        public Race Copy(
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
        {
            return Race.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Race Copy(
            IRace item,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
        {
            Race ret;
            if (item.GetType().Equals(typeof(Race)))
            {
                ret = new Race();
            }
            else
            {
                ret = (Race)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
            where CopyType : class, IRace
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Race)))
            {
                ret = new Race() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Race Copy_ToLoqui(
            IRaceGetter item,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null)
        {
            var ret = new Race();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    this._Description.Set(
                        (String)obj,
                        cmds);
                    break;
                case Race_FieldIndex.Spells:
                    this._Spells.SetTo((IEnumerable<FormID>)obj, cmds);
                    break;
                case Race_FieldIndex.Relations:
                    this._Relations.SetTo((IEnumerable<Relation>)obj, cmds);
                    break;
                case Race_FieldIndex.Data:
                    this._Data.Set(
                        (RaceData)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RaceCommon.Clear(this, cmds);
        }


        public new static Race Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Race();
            foreach (var pair in fields)
            {
                CopyInInternal_Race(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_Race(Race obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Race_FieldIndex enu))
            {
                CopyInInternal_NamedMajorRecord(obj, pair);
            }
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    obj._Description.Set(
                        (String)pair.Value,
                        null);
                    break;
                case Race_FieldIndex.Spells:
                    obj._Spells.SetTo((IEnumerable<FormID>)pair.Value, null);
                    break;
                case Race_FieldIndex.Relations:
                    obj._Relations.SetTo((IEnumerable<Relation>)pair.Value, null);
                    break;
                case Race_FieldIndex.Data:
                    obj._Data.Set(
                        (RaceData)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Race obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IRace : IRaceGetter, INamedMajorRecord, ILoquiClass<IRace, IRaceGetter>, ILoquiClass<Race, IRaceGetter>
    {
        new String Description { get; set; }
        new INotifyingItem<String> Description_Property { get; }

        new INotifyingList<FormID> Spells { get; }
        new INotifyingList<Relation> Relations { get; }
        new RaceData Data { get; set; }
        new INotifyingItem<RaceData> Data_Property { get; }

    }

    public interface IRaceGetter : INamedMajorRecordGetter
    {
        #region Description
        String Description { get; }
        INotifyingItemGetter<String> Description_Property { get; }

        #endregion
        #region Spells
        INotifyingListGetter<FormID> Spells { get; }
        #endregion
        #region Relations
        INotifyingListGetter<Relation> Relations { get; }
        #endregion
        #region Data
        RaceData Data { get; }
        INotifyingItemGetter<RaceData> Data_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum Race_FieldIndex
    {
        Description = 6,
        Spells = 7,
        Relations = 8,
        Data = 9,
    }
    #endregion

    #region Registration
    public class Race_Registration : ILoquiRegistration
    {
        public static readonly Race_Registration Instance = new Race_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 25,
            version: 0);

        public const string GUID = "265136e6-60a6-4ade-a7c4-b31197fb95e5";

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(Race_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Race_ErrorMask);

        public static readonly Type ClassType = typeof(Race);

        public static readonly Type GetterType = typeof(IRaceGetter);

        public static readonly Type SetterType = typeof(IRace);

        public static readonly Type CommonType = typeof(RaceCommon);

        public const string FullName = "Mutagen.Race";

        public const string Name = "Race";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DESCRIPTION":
                    return (ushort)Race_FieldIndex.Description;
                case "SPELLS":
                    return (ushort)Race_FieldIndex.Spells;
                case "RELATIONS":
                    return (ushort)Race_FieldIndex.Relations;
                case "DATA":
                    return (ushort)Race_FieldIndex.Data;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                    return true;
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Data:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.Data:
                    return true;
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.Data:
                    return false;
                default:
                    return NamedMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    return "Description";
                case Race_FieldIndex.Spells:
                    return "Spells";
                case Race_FieldIndex.Relations:
                    return "Relations";
                case Race_FieldIndex.Data:
                    return "Data";
                default:
                    return NamedMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.Data:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                case Race_FieldIndex.Spells:
                case Race_FieldIndex.Relations:
                case Race_FieldIndex.Data:
                    return false;
                default:
                    return NamedMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    return typeof(String);
                case Race_FieldIndex.Spells:
                    return typeof(NotifyingList<FormID>);
                case Race_FieldIndex.Relations:
                    return typeof(NotifyingList<Relation>);
                case Race_FieldIndex.Data:
                    return typeof(RaceData);
                default:
                    return NamedMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType XNAM_HEADER = new RecordType("XNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = DESC_HEADER;
        public const int NumStructFields = 1;
        public const int NumTypedFields = 3;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class RaceCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IRace item,
            IRaceGetter rhs,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            RaceCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRace item,
            IRaceGetter rhs,
            out Race_ErrorMask errorMask,
            Race_CopyMask copyMask = null,
            IRaceGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            RaceCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRace item,
            IRaceGetter rhs,
            IRaceGetter def,
            bool doErrorMask,
            out Race_ErrorMask errorMask,
            Race_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            Race_ErrorMask retErrorMask = null;
            Func<Race_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Race_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IRace item,
            IRaceGetter rhs,
            IRaceGetter def,
            bool doErrorMask,
            Func<Race_ErrorMask> errorMask,
            Race_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            NamedMajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doErrorMask,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Description ?? true)
            {
                try
                {
                    item.Description_Property.SetToWithDefault(
                        rhs.Description_Property,
                        def?.Description_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Description, ex);
                }
            }
            if (copyMask?.Spells != CopyOption.Skip)
            {
                try
                {
                    item.Spells.SetToWithDefault(
                        rhs.Spells,
                        def?.Spells,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Spells, ex);
                }
            }
            if (copyMask?.Relations.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Relations.SetToWithDefault(
                        rhs.Relations,
                        def?.Relations,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Relations.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Relation);
                                    return Relation.Copy(
                                        r,
                                        copyMask?.Relations?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Relations.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Relations, ex);
                }
            }
            if (copyMask?.Data.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Data_Property.SetToWithDefault(
                        rhs.Data_Property,
                        def?.Data_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Data?.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    RaceDataCommon.CopyFieldsFrom(
                                        item: item.Data,
                                        rhs: rhs.Data,
                                        def: def?.Data,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<RaceData_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Data.Specific == null)
                                            {
                                                baseMask.Data = new MaskItem<Exception, RaceData_ErrorMask>(null, new RaceData_ErrorMask());
                                            }
                                            return baseMask.Data.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Data.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RaceData);
                                    return RaceData.Copy(
                                        r,
                                        copyMask?.Data?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Data?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Race_FieldIndex.Data, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRace obj,
            NotifyingFireParameters? cmds = null)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    obj.Description_Property.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Spells:
                    obj.Spells.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Relations:
                    obj.Relations.HasBeenSet = on;
                    break;
                case Race_FieldIndex.Data:
                    obj.Data_Property.HasBeenSet = on;
                    break;
                default:
                    NamedMajorRecordCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRace obj,
            NotifyingUnsetParameters? cmds = null)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    obj.Description_Property.Unset(cmds);
                    break;
                case Race_FieldIndex.Spells:
                    obj.Spells.Unset(cmds);
                    break;
                case Race_FieldIndex.Relations:
                    obj.Relations.Unset(cmds);
                    break;
                case Race_FieldIndex.Data:
                    obj.Data_Property.Unset(cmds);
                    break;
                default:
                    NamedMajorRecordCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRace obj)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    return obj.Description_Property.HasBeenSet;
                case Race_FieldIndex.Spells:
                    return obj.Spells.HasBeenSet;
                case Race_FieldIndex.Relations:
                    return obj.Relations.HasBeenSet;
                case Race_FieldIndex.Data:
                    return obj.Data_Property.HasBeenSet;
                default:
                    return NamedMajorRecordCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IRaceGetter obj)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    return obj.Description;
                case Race_FieldIndex.Spells:
                    return obj.Spells;
                case Race_FieldIndex.Relations:
                    return obj.Relations;
                case Race_FieldIndex.Data:
                    return obj.Data;
                default:
                    return NamedMajorRecordCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IRace item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Description_Property.Unset(cmds.ToUnsetParams());
            item.Spells.Unset(cmds.ToUnsetParams());
            item.Relations.Unset(cmds.ToUnsetParams());
            item.Data_Property.Unset(cmds.ToUnsetParams());
        }

        public static Race_Mask<bool> GetEqualsMask(
            this IRaceGetter item,
            IRaceGetter rhs)
        {
            var ret = new Race_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            Race_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Description = item.Description_Property.Equals(rhs.Description_Property, (l, r) => object.Equals(l, r));
            if (item.Spells.HasBeenSet == rhs.Spells.HasBeenSet)
            {
                if (item.Spells.HasBeenSet)
                {
                    ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Spells.Specific = item.Spells.SelectAgainst<FormID, bool>(rhs.Spells, ((l, r) => object.Equals(l, r)), out ret.Spells.Overall);
                    ret.Spells.Overall = ret.Spells.Overall && ret.Spells.Specific.All((b) => b);
                }
                else
                {
                    ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                    ret.Spells.Overall = true;
                }
            }
            else
            {
                ret.Spells = new MaskItem<bool, IEnumerable<bool>>();
                ret.Spells.Overall = false;
            }
            if (item.Relations.HasBeenSet == rhs.Relations.HasBeenSet)
            {
                if (item.Relations.HasBeenSet)
                {
                    ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>();
                    ret.Relations.Specific = item.Relations.SelectAgainst<Relation, MaskItem<bool, Relation_Mask<bool>>>(rhs.Relations, ((l, r) =>
                    {
                        MaskItem<bool, Relation_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => RelationCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.Relations.Overall);
                    ret.Relations.Overall = ret.Relations.Overall && ret.Relations.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>();
                    ret.Relations.Overall = true;
                }
            }
            else
            {
                ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>();
                ret.Relations.Overall = false;
            }
            ret.Data = item.Data_Property.LoquiEqualsHelper(rhs.Data_Property, (loqLhs, loqRhs) => RaceDataCommon.GetEqualsMask(loqLhs, loqRhs));
            NamedMajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRaceGetter item,
            string name = null,
            Race_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRaceGetter item,
            FileGeneration fg,
            string name = null,
            Race_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Race)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Race)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {item.Description}");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Spells)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Relations?.Overall ?? true)
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Relations)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Data?.Overall ?? true)
                {
                    item.Data?.ToString(fg, "Data");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRaceGetter item,
            Race_Mask<bool?> checkMask)
        {
            if (checkMask.Description.HasValue && checkMask.Description.Value != item.Description_Property.HasBeenSet) return false;
            if (checkMask.Spells.Overall.HasValue && checkMask.Spells.Overall.Value != item.Spells.HasBeenSet) return false;
            if (checkMask.Relations.Overall.HasValue && checkMask.Relations.Overall.Value != item.Relations.HasBeenSet) return false;
            if (checkMask.Data.Overall.HasValue && checkMask.Data.Overall.Value != item.Data_Property.HasBeenSet) return false;
            if (checkMask.Data.Specific != null && (item.Data_Property.Item == null || !item.Data_Property.Item.HasBeenSet(checkMask.Data.Specific))) return false;
            return true;
        }

        public static Race_Mask<bool> GetHasBeenSetMask(IRaceGetter item)
        {
            var ret = new Race_Mask<bool>();
            ret.Description = item.Description_Property.HasBeenSet;
            ret.Spells = new MaskItem<bool, IEnumerable<bool>>(item.Spells.HasBeenSet, null);
            ret.Relations = new MaskItem<bool, IEnumerable<MaskItem<bool, Relation_Mask<bool>>>>(item.Relations.HasBeenSet, item.Relations.Select((i) => new MaskItem<bool, Relation_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Data = new MaskItem<bool, RaceData_Mask<bool>>(item.Data_Property.HasBeenSet, RaceDataCommon.GetHasBeenSetMask(item.Data_Property.Item));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IRaceGetter item,
            bool doMasks,
            out Race_ErrorMask errorMask,
            string name = null)
        {
            Race_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Race_ErrorMask()) : default(Func<Race_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IRaceGetter item,
            bool doMasks,
            Func<Race_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Race"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Race");
                    }
                    if (item.Description_Property.HasBeenSet)
                    {
                        Exception subMask;
                        StringXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Description),
                            item.Description,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Description,
                            subMask);
                    }
                    if (item.Spells.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<Exception>> subMask;
                        ListXmlTranslation<FormID, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Spells),
                            item: item.Spells,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (FormID subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                FormIDXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: doMasks,
                                    errorMask: out listSubMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Spells,
                            subMask);
                    }
                    if (item.Relations.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>> subMask;
                        ListXmlTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Relations),
                            item: item.Relations,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (Relation subItem, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<Relation, Relation_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: doMasks,
                                    mask: out Relation_ErrorMask loquiMask);
                                listSubMask = loquiMask == null ? null : new MaskItem<Exception, Relation_ErrorMask>(null, loquiMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Relations,
                            subMask);
                    }
                    if (item.Data_Property.HasBeenSet)
                    {
                        MaskItem<Exception, RaceData_ErrorMask> subMask;
                        LoquiXmlTranslation<RaceData, RaceData_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Data,
                            name: nameof(item.Data),
                            doMasks: doMasks,
                            mask: out RaceData_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, RaceData_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Race_FieldIndex.Data,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IRaceGetter item,
            bool doMasks,
            out Race_ErrorMask errorMask)
        {
            Race_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Race_ErrorMask()) : default(Func<Race_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IRaceGetter item,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    doMasks: doMasks,
                    errorMask: errorMask);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    doMasks: doMasks,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            IRaceGetter item,
            MutagenWriter writer,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            MajorRecordCommon.Write_Binary_Embedded(
                item: item,
                writer: writer,
                doMasks: doMasks,
                errorMask: errorMask);
            LoquiBinaryTranslation<RaceData, RaceData_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.Data_Property,
                doMasks: doMasks,
                fieldIndex: (int)Race_FieldIndex.Data,
                errorMask: errorMask);
        }

        public static void Write_Binary_RecordTypes(
            IRaceGetter item,
            MutagenWriter writer,
            bool doMasks,
            Func<Race_ErrorMask> errorMask)
        {
            NamedMajorRecordCommon.Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                doMasks: doMasks,
                errorMask: errorMask);
            Mutagen.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description_Property,
                doMasks: doMasks,
                fieldIndex: (int)Race_FieldIndex.Description,
                errorMask: errorMask,
                header: Race_Registration.DESC_HEADER,
                nullable: false);
            Mutagen.Binary.ListBinaryTranslation<FormID, Exception>.Instance.Write(
                writer: writer,
                item: item.Spells,
                fieldIndex: (int)Race_FieldIndex.Spells,
                doMasks: doMasks,
                errorMask: errorMask,
                transl: (FormID subItem, bool listDoMasks, out Exception listSubMask) =>
                {
                    Mutagen.Binary.FormIDBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: subItem,
                        fieldIndex: (int)Race_FieldIndex.,
                        doMasks: doMasks,
                        errorMask: listSubMask,
                        header: Race_Registration.SPLO_HEADER,
                        nullable: false);
                }
                );
            Mutagen.Binary.ListBinaryTranslation<Relation, MaskItem<Exception, Relation_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Relations,
                fieldIndex: (int)Race_FieldIndex.Relations,
                doMasks: doMasks,
                errorMask: errorMask,
                transl: (Relation subItem, bool listDoMasks, out MaskItem<Exception, Relation_ErrorMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<Relation, Relation_ErrorMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: doMasks,
                        errorMask: out listSubMask);
                }
                );
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Race_Mask<T> : NamedMajorRecord_Mask<T>, IMask<T>, IEquatable<Race_Mask<T>>
    {
        #region Ctors
        public Race_Mask()
        {
        }

        public Race_Mask(T initialValue)
        {
            this.Description = initialValue;
            this.Spells = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.Relations = new MaskItem<T, IEnumerable<MaskItem<T, Relation_Mask<T>>>>(initialValue, null);
            this.Data = new MaskItem<T, RaceData_Mask<T>>(initialValue, new RaceData_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public T Description;
        public MaskItem<T, IEnumerable<T>> Spells;
        public MaskItem<T, IEnumerable<MaskItem<T, Relation_Mask<T>>>> Relations;
        public MaskItem<T, RaceData_Mask<T>> Data { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Race_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Race_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Description, rhs.Description)) return false;
            if (!object.Equals(this.Spells, rhs.Spells)) return false;
            if (!object.Equals(this.Relations, rhs.Relations)) return false;
            if (!object.Equals(this.Data, rhs.Data)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Description?.GetHashCode());
            ret = ret.CombineHashCode(this.Spells?.GetHashCode());
            ret = ret.CombineHashCode(this.Relations?.GetHashCode());
            ret = ret.CombineHashCode(this.Data?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Description)) return false;
            if (Spells != null)
            {
                if (!eval(this.Spells.Overall)) return false;
                if (Spells.Specific != null)
                {
                    foreach (var item in Spells.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (Relations != null)
            {
                if (!eval(this.Relations.Overall)) return false;
                if (Relations.Specific != null)
                {
                    foreach (var item in Relations.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            if (Data != null)
            {
                if (!eval(this.Data.Overall)) return false;
                if (Data.Specific != null && !Data.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public new Race_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Race_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Race_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Description = eval(this.Description);
            if (Spells != null)
            {
                obj.Spells = new MaskItem<R, IEnumerable<R>>();
                obj.Spells.Overall = eval(this.Spells.Overall);
                if (Spells.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Spells.Specific = l;
                    foreach (var item in Spells.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (Relations != null)
            {
                obj.Relations = new MaskItem<R, IEnumerable<MaskItem<R, Relation_Mask<R>>>>();
                obj.Relations.Overall = eval(this.Relations.Overall);
                if (Relations.Specific != null)
                {
                    List<MaskItem<R, Relation_Mask<R>>> l = new List<MaskItem<R, Relation_Mask<R>>>();
                    obj.Relations.Specific = l;
                    foreach (var item in Relations.Specific)
                    {
                        MaskItem<R, Relation_Mask<R>> mask = default(MaskItem<R, Relation_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Relation_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (this.Data != null)
            {
                obj.Data = new MaskItem<R, RaceData_Mask<R>>();
                obj.Data.Overall = eval(this.Data.Overall);
                if (this.Data.Specific != null)
                {
                    obj.Data.Specific = this.Data.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
            this.Spells.Specific = null;
            this.Relations.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Race_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Race_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Race_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Description ?? true)
                {
                    fg.AppendLine($"Description => {Description.ToStringSafe()}");
                }
                if (printMask?.Spells?.Overall ?? true)
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Spells.Overall != null)
                        {
                            fg.AppendLine(Spells.Overall.ToString());
                        }
                        if (Spells.Specific != null)
                        {
                            foreach (var subItem in Spells.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem.ToStringSafe()}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Relations?.Overall ?? true)
                {
                    fg.AppendLine("Relations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Relations.Overall != null)
                        {
                            fg.AppendLine(Relations.Overall.ToString());
                        }
                        if (Relations.Specific != null)
                        {
                            foreach (var subItem in Relations.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Data?.Overall ?? true)
                {
                    Data.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Race_ErrorMask : NamedMajorRecord_ErrorMask
    {
        #region Members
        public Exception Description;
        public MaskItem<Exception, IEnumerable<Exception>> Spells;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>> Relations;
        public MaskItem<Exception, RaceData_ErrorMask> Data;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    this.Description = ex;
                    break;
                case Race_FieldIndex.Spells:
                    this.Spells = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Race_FieldIndex.Relations:
                    this.Relations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>(ex, null);
                    break;
                case Race_FieldIndex.Data:
                    this.Data = new MaskItem<Exception, RaceData_ErrorMask>(ex, null);
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            Race_FieldIndex enu = (Race_FieldIndex)index;
            switch (enu)
            {
                case Race_FieldIndex.Description:
                    this.Description = (Exception)obj;
                    break;
                case Race_FieldIndex.Spells:
                    this.Spells = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Race_FieldIndex.Relations:
                    this.Relations = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>)obj;
                    break;
                case Race_FieldIndex.Data:
                    this.Data = (MaskItem<Exception, RaceData_ErrorMask>)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("Race_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            if (Description != null)
            {
                fg.AppendLine($"Description => {Description.ToStringSafe()}");
            }
            if (Spells != null)
            {
                fg.AppendLine("Spells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Spells.Overall != null)
                    {
                        fg.AppendLine(Spells.Overall.ToString());
                    }
                    if (Spells.Specific != null)
                    {
                        foreach (var subItem in Spells.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($" => {subItem.ToStringSafe()}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (Relations != null)
            {
                fg.AppendLine("Relations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Relations.Overall != null)
                    {
                        fg.AppendLine(Relations.Overall.ToString());
                    }
                    if (Relations.Specific != null)
                    {
                        foreach (var subItem in Relations.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem.ToString(fg);
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (Data != null)
            {
                Data.ToString(fg);
            }
        }
        #endregion

        #region Combine
        public Race_ErrorMask Combine(Race_ErrorMask rhs)
        {
            var ret = new Race_ErrorMask();
            ret.Description = this.Description.Combine(rhs.Description);
            ret.Spells = new MaskItem<Exception, IEnumerable<Exception>>(this.Spells.Overall.Combine(rhs.Spells.Overall), new List<Exception>(this.Spells.Specific.And(rhs.Spells.Specific)));
            ret.Relations = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Relation_ErrorMask>>>(this.Relations.Overall.Combine(rhs.Relations.Overall), new List<MaskItem<Exception, Relation_ErrorMask>>(this.Relations.Specific.And(rhs.Relations.Specific)));
            ret.Data = new MaskItem<Exception, RaceData_ErrorMask>(this.Data.Overall.Combine(rhs.Data.Overall), this.Data.Specific.Combine(rhs.Data.Specific));
            return ret;
        }
        public static Race_ErrorMask Combine(Race_ErrorMask lhs, Race_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Race_CopyMask : NamedMajorRecord_CopyMask
    {
        #region Members
        public bool Description;
        public CopyOption Spells;
        public MaskItem<CopyOption, Relation_CopyMask> Relations;
        public MaskItem<CopyOption, RaceData_CopyMask> Data;
        #endregion

    }
    #endregion




    #endregion

}
