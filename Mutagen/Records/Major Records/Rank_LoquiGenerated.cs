/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class Rank : IRank, ILoquiObjectSetter, IEquatable<Rank>
    {
        ILoquiRegistration ILoquiObject.Registration => Rank_Registration.Instance;
        public static Rank_Registration Registration => Rank_Registration.Instance;

        #region Ctor
        public Rank()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region RankNumber
        protected readonly INotifyingItem<Int32> _RankNumber = NotifyingItem.Factory<Int32>(markAsSet: false);
        public INotifyingItem<Int32> RankNumber_Property => _RankNumber;
        public Int32 RankNumber
        {
            get => this._RankNumber.Item;
            set => this._RankNumber.Set(value);
        }
        INotifyingItem<Int32> IRank.RankNumber_Property => this.RankNumber_Property;
        INotifyingItemGetter<Int32> IRankGetter.RankNumber_Property => this.RankNumber_Property;
        #endregion
        #region MaleName
        protected readonly INotifyingItem<String> _MaleName = NotifyingItem.Factory<String>(markAsSet: false);
        public INotifyingItem<String> MaleName_Property => _MaleName;
        public String MaleName
        {
            get => this._MaleName.Item;
            set => this._MaleName.Set(value);
        }
        INotifyingItem<String> IRank.MaleName_Property => this.MaleName_Property;
        INotifyingItemGetter<String> IRankGetter.MaleName_Property => this.MaleName_Property;
        #endregion
        #region FemaleName
        protected readonly INotifyingItem<String> _FemaleName = NotifyingItem.Factory<String>(markAsSet: false);
        public INotifyingItem<String> FemaleName_Property => _FemaleName;
        public String FemaleName
        {
            get => this._FemaleName.Item;
            set => this._FemaleName.Set(value);
        }
        INotifyingItem<String> IRank.FemaleName_Property => this.FemaleName_Property;
        INotifyingItemGetter<String> IRankGetter.FemaleName_Property => this.FemaleName_Property;
        #endregion
        #region Insignia
        protected readonly INotifyingItem<FilePath> _Insignia = NotifyingItem.Factory<FilePath>(markAsSet: false);
        public INotifyingItem<FilePath> Insignia_Property => _Insignia;
        public FilePath Insignia
        {
            get => this._Insignia.Item;
            set => this._Insignia.Set(value);
        }
        INotifyingItem<FilePath> IRank.Insignia_Property => this.Insignia_Property;
        INotifyingItemGetter<FilePath> IRankGetter.Insignia_Property => this.Insignia_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => RankCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => RankCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => RankCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RankCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return RankCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Rank_Mask<bool> printMask = null)
        {
            return RankCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RankCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public Rank_Mask<bool> GetHasBeenSetMask()
        {
            return RankCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Rank rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Rank rhs)
        {
            if (rhs == null) return false;
            if (RankNumber_Property.HasBeenSet != rhs.RankNumber_Property.HasBeenSet) return false;
            if (RankNumber_Property.HasBeenSet)
            {
                if (RankNumber != rhs.RankNumber) return false;
            }
            if (MaleName_Property.HasBeenSet != rhs.MaleName_Property.HasBeenSet) return false;
            if (MaleName_Property.HasBeenSet)
            {
                if (!object.Equals(MaleName, rhs.MaleName)) return false;
            }
            if (FemaleName_Property.HasBeenSet != rhs.FemaleName_Property.HasBeenSet) return false;
            if (FemaleName_Property.HasBeenSet)
            {
                if (!object.Equals(FemaleName, rhs.FemaleName)) return false;
            }
            if (Insignia_Property.HasBeenSet != rhs.Insignia_Property.HasBeenSet) return false;
            if (Insignia_Property.HasBeenSet)
            {
                if (!object.Equals(Insignia, rhs.Insignia)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (RankNumber_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RankNumber).CombineHashCode(ret);
            }
            if (MaleName_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(MaleName).CombineHashCode(ret);
            }
            if (FemaleName_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FemaleName).CombineHashCode(ret);
            }
            if (Insignia_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Insignia).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static Rank Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Rank Create_XML(
            XElement root,
            out Rank_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Rank Create_XML(
            XElement root,
            bool doMasks,
            out Rank_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Rank Object, Rank_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            Rank_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Rank_ErrorMask()) : default(Func<Rank_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Rank Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Rank Create_XML(
            string path,
            out Rank_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Rank Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Rank Create_XML(
            Stream stream,
            out Rank_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Rank, Rank_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Rank_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<Rank, Rank_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Rank_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Rank_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out Rank_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (Rank_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out Rank_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out Rank_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            RankCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Rank Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<Rank_ErrorMask> errorMask)
        {
            var ret = new Rank();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            Rank item,
            XElement root,
            string name,
            bool doMasks,
            Func<Rank_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "RankNumber":
                    {
                        Exception subMask;
                        var tryGet = Int32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RankNumber.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Rank_FieldIndex.RankNumber,
                            subMask);
                    }
                    break;
                case "MaleName":
                    {
                        Exception subMask;
                        var tryGet = StringXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._MaleName.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Rank_FieldIndex.MaleName,
                            subMask);
                    }
                    break;
                case "FemaleName":
                    {
                        Exception subMask;
                        var tryGet = StringXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._FemaleName.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Rank_FieldIndex.FemaleName,
                            subMask);
                    }
                    break;
                case "Insignia":
                    {
                        Exception subMask;
                        var tryGet = FilePathXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Insignia.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Rank_FieldIndex.Insignia,
                            subMask);
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static Rank Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Rank Create_Binary(
            MutagenFrame frame,
            out Rank_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Rank Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out Rank_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Rank Object, Rank_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            Rank_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Rank_ErrorMask()) : default(Func<Rank_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static Rank Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Rank Create_Binary(
            string path,
            out Rank_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Rank Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Rank Create_Binary(
            Stream stream,
            out Rank_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Rank, Rank_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out Rank_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<Rank, Rank_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out Rank_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out Rank_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out Rank_ErrorMask errorMask)
        {
            errorMask = (Rank_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out Rank_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out Rank_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            RankCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Rank Create_Binary_Internal(
            MutagenFrame frame,
            bool doMasks,
            Func<Rank_ErrorMask> errorMask)
        {
            var ret = new Rank();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    bool first = true;
                    while (!frame.Complete)
                    {
                        if (!Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            first: first,
                            doMasks: doMasks,
                            errorMask: errorMask)) break;
                        first = false;
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            Rank item,
            MutagenFrame frame,
            bool doMasks,
            Func<Rank_ErrorMask> errorMask)
        {
        }

        protected static bool Fill_Binary_RecordTypes(
            Rank item,
            MutagenFrame frame,
            bool first,
            bool doMasks,
            Func<Rank_ErrorMask> errorMask)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                frame: frame,
                contentLength: out var contentLength);
            switch (nextRecordType.Type)
            {
                case "RNAM":
                if (!first) return false;
                {
                    Exception subMask;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var tryGet = Mutagen.Binary.Int32BinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        doMasks: doMasks,
                        errorMask: out subMask);
                    item._RankNumber.SetIfSucceeded(tryGet);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        doMasks,
                        (int)Rank_FieldIndex.RankNumber,
                        subMask);
                }
                break;
                case "MNAM":
                {
                    Exception subMask;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var tryGet = Mutagen.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        doMasks: doMasks,
                        errorMask: out subMask);
                    item._MaleName.SetIfSucceeded(tryGet);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        doMasks,
                        (int)Rank_FieldIndex.MaleName,
                        subMask);
                }
                break;
                case "FNAM":
                {
                    Exception subMask;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var tryGet = Mutagen.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        doMasks: doMasks,
                        errorMask: out subMask);
                    item._FemaleName.SetIfSucceeded(tryGet);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        doMasks,
                        (int)Rank_FieldIndex.FemaleName,
                        subMask);
                }
                break;
                case "INAM":
                {
                    Exception subMask;
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    var tryGet = Mutagen.Binary.FilePathBinaryTranslation.Instance.Parse(
                        frame: frame.Spawn(contentLength),
                        doMasks: doMasks,
                        errorMask: out subMask);
                    item._Insignia.SetIfSucceeded(tryGet);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        doMasks,
                        (int)Rank_FieldIndex.Insignia,
                        subMask);
                }
                break;
                default:
                    throw new ArgumentException($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
            }
            return true;
        }

        #endregion

        public Rank Copy(
            Rank_CopyMask copyMask = null,
            IRankGetter def = null)
        {
            return Rank.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Rank Copy(
            IRank item,
            Rank_CopyMask copyMask = null,
            IRankGetter def = null)
        {
            Rank ret;
            if (item.GetType().Equals(typeof(Rank)))
            {
                ret = new Rank();
            }
            else
            {
                ret = (Rank)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            Rank_CopyMask copyMask = null,
            IRankGetter def = null)
            where CopyType : class, IRank
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Rank)))
            {
                ret = new Rank() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Rank Copy_ToLoqui(
            IRankGetter item,
            Rank_CopyMask copyMask = null,
            IRankGetter def = null)
        {
            var ret = new Rank();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    this._RankNumber.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case Rank_FieldIndex.MaleName:
                    this._MaleName.Set(
                        (String)obj,
                        cmds);
                    break;
                case Rank_FieldIndex.FemaleName:
                    this._FemaleName.Set(
                        (String)obj,
                        cmds);
                    break;
                case Rank_FieldIndex.Insignia:
                    this._Insignia.Set(
                        (FilePath)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RankCommon.Clear(this, cmds);
        }


        public static Rank Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Rank();
            foreach (var pair in fields)
            {
                CopyInInternal_Rank(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Rank(Rank obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Rank_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    obj._RankNumber.Set(
                        (Int32)pair.Value,
                        null);
                    break;
                case Rank_FieldIndex.MaleName:
                    obj._MaleName.Set(
                        (String)pair.Value,
                        null);
                    break;
                case Rank_FieldIndex.FemaleName:
                    obj._FemaleName.Set(
                        (String)pair.Value,
                        null);
                    break;
                case Rank_FieldIndex.Insignia:
                    obj._Insignia.Set(
                        (FilePath)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Rank obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IRank : IRankGetter, ILoquiClass<IRank, IRankGetter>, ILoquiClass<Rank, IRankGetter>
    {
        new Int32 RankNumber { get; set; }
        new INotifyingItem<Int32> RankNumber_Property { get; }

        new String MaleName { get; set; }
        new INotifyingItem<String> MaleName_Property { get; }

        new String FemaleName { get; set; }
        new INotifyingItem<String> FemaleName_Property { get; }

        new FilePath Insignia { get; set; }
        new INotifyingItem<FilePath> Insignia_Property { get; }

    }

    public interface IRankGetter : ILoquiObject
    {
        #region RankNumber
        Int32 RankNumber { get; }
        INotifyingItemGetter<Int32> RankNumber_Property { get; }

        #endregion
        #region MaleName
        String MaleName { get; }
        INotifyingItemGetter<String> MaleName_Property { get; }

        #endregion
        #region FemaleName
        String FemaleName { get; }
        INotifyingItemGetter<String> FemaleName_Property { get; }

        #endregion
        #region Insignia
        FilePath Insignia { get; }
        INotifyingItemGetter<FilePath> Insignia_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum Rank_FieldIndex
    {
        RankNumber = 0,
        MaleName = 1,
        FemaleName = 2,
        Insignia = 3,
    }
    #endregion

    #region Registration
    public class Rank_Registration : ILoquiRegistration
    {
        public static readonly Rank_Registration Instance = new Rank_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 24,
            version: 0);

        public const string GUID = "4945b664-16ac-4464-89b0-03534ffd5e18";

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(Rank_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Rank_ErrorMask);

        public static readonly Type ClassType = typeof(Rank);

        public static readonly Type GetterType = typeof(IRankGetter);

        public static readonly Type SetterType = typeof(IRank);

        public static readonly Type CommonType = typeof(RankCommon);

        public const string FullName = "Mutagen.Rank";

        public const string Name = "Rank";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "RANKNUMBER":
                    return (ushort)Rank_FieldIndex.RankNumber;
                case "MALENAME":
                    return (ushort)Rank_FieldIndex.MaleName;
                case "FEMALENAME":
                    return (ushort)Rank_FieldIndex.FemaleName;
                case "INSIGNIA":
                    return (ushort)Rank_FieldIndex.Insignia;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    return "RankNumber";
                case Rank_FieldIndex.MaleName:
                    return "MaleName";
                case Rank_FieldIndex.FemaleName:
                    return "FemaleName";
                case Rank_FieldIndex.Insignia:
                    return "Insignia";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                case Rank_FieldIndex.MaleName:
                case Rank_FieldIndex.FemaleName:
                case Rank_FieldIndex.Insignia:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    return typeof(Int32);
                case Rank_FieldIndex.MaleName:
                    return typeof(String);
                case Rank_FieldIndex.FemaleName:
                    return typeof(String);
                case Rank_FieldIndex.Insignia:
                    return typeof(FilePath);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RNAM_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class RankCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IRank item,
            IRankGetter rhs,
            Rank_CopyMask copyMask = null,
            IRankGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            RankCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRank item,
            IRankGetter rhs,
            out Rank_ErrorMask errorMask,
            Rank_CopyMask copyMask = null,
            IRankGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            RankCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRank item,
            IRankGetter rhs,
            IRankGetter def,
            bool doErrorMask,
            out Rank_ErrorMask errorMask,
            Rank_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            Rank_ErrorMask retErrorMask = null;
            Func<Rank_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Rank_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IRank item,
            IRankGetter rhs,
            IRankGetter def,
            bool doErrorMask,
            Func<Rank_ErrorMask> errorMask,
            Rank_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.RankNumber ?? true)
            {
                try
                {
                    item.RankNumber_Property.SetToWithDefault(
                        rhs.RankNumber_Property,
                        def?.RankNumber_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Rank_FieldIndex.RankNumber, ex);
                }
            }
            if (copyMask?.MaleName ?? true)
            {
                try
                {
                    item.MaleName_Property.SetToWithDefault(
                        rhs.MaleName_Property,
                        def?.MaleName_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Rank_FieldIndex.MaleName, ex);
                }
            }
            if (copyMask?.FemaleName ?? true)
            {
                try
                {
                    item.FemaleName_Property.SetToWithDefault(
                        rhs.FemaleName_Property,
                        def?.FemaleName_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Rank_FieldIndex.FemaleName, ex);
                }
            }
            if (copyMask?.Insignia ?? true)
            {
                try
                {
                    item.Insignia_Property.SetToWithDefault(
                        rhs.Insignia_Property,
                        def?.Insignia_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)Rank_FieldIndex.Insignia, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRank obj,
            NotifyingFireParameters? cmds = null)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    obj.RankNumber_Property.HasBeenSet = on;
                    break;
                case Rank_FieldIndex.MaleName:
                    obj.MaleName_Property.HasBeenSet = on;
                    break;
                case Rank_FieldIndex.FemaleName:
                    obj.FemaleName_Property.HasBeenSet = on;
                    break;
                case Rank_FieldIndex.Insignia:
                    obj.Insignia_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRank obj,
            NotifyingUnsetParameters? cmds = null)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    obj.RankNumber_Property.Unset(cmds);
                    break;
                case Rank_FieldIndex.MaleName:
                    obj.MaleName_Property.Unset(cmds);
                    break;
                case Rank_FieldIndex.FemaleName:
                    obj.FemaleName_Property.Unset(cmds);
                    break;
                case Rank_FieldIndex.Insignia:
                    obj.Insignia_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRank obj)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    return obj.RankNumber_Property.HasBeenSet;
                case Rank_FieldIndex.MaleName:
                    return obj.MaleName_Property.HasBeenSet;
                case Rank_FieldIndex.FemaleName:
                    return obj.FemaleName_Property.HasBeenSet;
                case Rank_FieldIndex.Insignia:
                    return obj.Insignia_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IRankGetter obj)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    return obj.RankNumber;
                case Rank_FieldIndex.MaleName:
                    return obj.MaleName;
                case Rank_FieldIndex.FemaleName:
                    return obj.FemaleName;
                case Rank_FieldIndex.Insignia:
                    return obj.Insignia;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IRank item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.RankNumber_Property.Unset(cmds.ToUnsetParams());
            item.MaleName_Property.Unset(cmds.ToUnsetParams());
            item.FemaleName_Property.Unset(cmds.ToUnsetParams());
            item.Insignia_Property.Unset(cmds.ToUnsetParams());
        }

        public static Rank_Mask<bool> GetEqualsMask(
            this IRankGetter item,
            IRankGetter rhs)
        {
            var ret = new Rank_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRankGetter item,
            IRankGetter rhs,
            Rank_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.RankNumber = item.RankNumber_Property.Equals(rhs.RankNumber_Property, (l, r) => l == r);
            ret.MaleName = item.MaleName_Property.Equals(rhs.MaleName_Property, (l, r) => object.Equals(l, r));
            ret.FemaleName = item.FemaleName_Property.Equals(rhs.FemaleName_Property, (l, r) => object.Equals(l, r));
            ret.Insignia = item.Insignia_Property.Equals(rhs.Insignia_Property, (l, r) => object.Equals(l, r));
        }

        public static string ToString(
            this IRankGetter item,
            string name = null,
            Rank_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRankGetter item,
            FileGeneration fg,
            string name = null,
            Rank_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Rank)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Rank)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.RankNumber ?? true)
                {
                    fg.AppendLine($"RankNumber => {item.RankNumber}");
                }
                if (printMask?.MaleName ?? true)
                {
                    fg.AppendLine($"MaleName => {item.MaleName}");
                }
                if (printMask?.FemaleName ?? true)
                {
                    fg.AppendLine($"FemaleName => {item.FemaleName}");
                }
                if (printMask?.Insignia ?? true)
                {
                    fg.AppendLine($"Insignia => {item.Insignia}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRankGetter item,
            Rank_Mask<bool?> checkMask)
        {
            if (checkMask.RankNumber.HasValue && checkMask.RankNumber.Value != item.RankNumber_Property.HasBeenSet) return false;
            if (checkMask.MaleName.HasValue && checkMask.MaleName.Value != item.MaleName_Property.HasBeenSet) return false;
            if (checkMask.FemaleName.HasValue && checkMask.FemaleName.Value != item.FemaleName_Property.HasBeenSet) return false;
            if (checkMask.Insignia.HasValue && checkMask.Insignia.Value != item.Insignia_Property.HasBeenSet) return false;
            return true;
        }

        public static Rank_Mask<bool> GetHasBeenSetMask(IRankGetter item)
        {
            var ret = new Rank_Mask<bool>();
            ret.RankNumber = item.RankNumber_Property.HasBeenSet;
            ret.MaleName = item.MaleName_Property.HasBeenSet;
            ret.FemaleName = item.FemaleName_Property.HasBeenSet;
            ret.Insignia = item.Insignia_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IRankGetter item,
            bool doMasks,
            out Rank_ErrorMask errorMask,
            string name = null)
        {
            Rank_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Rank_ErrorMask()) : default(Func<Rank_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IRankGetter item,
            bool doMasks,
            Func<Rank_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Rank"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Rank");
                    }
                    if (item.RankNumber_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RankNumber),
                            item.RankNumber,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Rank_FieldIndex.RankNumber,
                            subMask);
                    }
                    if (item.MaleName_Property.HasBeenSet)
                    {
                        Exception subMask;
                        StringXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.MaleName),
                            item.MaleName,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Rank_FieldIndex.MaleName,
                            subMask);
                    }
                    if (item.FemaleName_Property.HasBeenSet)
                    {
                        Exception subMask;
                        StringXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FemaleName),
                            item.FemaleName,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Rank_FieldIndex.FemaleName,
                            subMask);
                    }
                    if (item.Insignia_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FilePathXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Insignia),
                            item.Insignia,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)Rank_FieldIndex.Insignia,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IRankGetter item,
            bool doMasks,
            out Rank_ErrorMask errorMask)
        {
            Rank_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Rank_ErrorMask()) : default(Func<Rank_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IRankGetter item,
            bool doMasks,
            Func<Rank_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    doMasks: doMasks,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            IRankGetter item,
            MutagenWriter writer,
            bool doMasks,
            Func<Rank_ErrorMask> errorMask)
        {
            Mutagen.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RankNumber,
                fieldIndex: (int)Rank_FieldIndex.RankNumber,
                doMasks: doMasks,
                errorMask: errorMask,
                header: Rank_Registration.RNAM_HEADER,
                nullable: false);
            Mutagen.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MaleName,
                doMasks: doMasks,
                fieldIndex: (int)Rank_FieldIndex.MaleName,
                errorMask: errorMask,
                header: Rank_Registration.MNAM_HEADER,
                nullable: false);
            Mutagen.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FemaleName,
                doMasks: doMasks,
                fieldIndex: (int)Rank_FieldIndex.FemaleName,
                errorMask: errorMask,
                header: Rank_Registration.FNAM_HEADER,
                nullable: false);
            Mutagen.Binary.FilePathBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Insignia,
                fieldIndex: (int)Rank_FieldIndex.Insignia,
                doMasks: doMasks,
                errorMask: errorMask,
                header: Rank_Registration.INAM_HEADER,
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Rank_Mask<T> : IMask<T>, IEquatable<Rank_Mask<T>>
    {
        #region Ctors
        public Rank_Mask()
        {
        }

        public Rank_Mask(T initialValue)
        {
            this.RankNumber = initialValue;
            this.MaleName = initialValue;
            this.FemaleName = initialValue;
            this.Insignia = initialValue;
        }
        #endregion

        #region Members
        public T RankNumber;
        public T MaleName;
        public T FemaleName;
        public T Insignia;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Rank_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Rank_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.RankNumber, rhs.RankNumber)) return false;
            if (!object.Equals(this.MaleName, rhs.MaleName)) return false;
            if (!object.Equals(this.FemaleName, rhs.FemaleName)) return false;
            if (!object.Equals(this.Insignia, rhs.Insignia)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.RankNumber?.GetHashCode());
            ret = ret.CombineHashCode(this.MaleName?.GetHashCode());
            ret = ret.CombineHashCode(this.FemaleName?.GetHashCode());
            ret = ret.CombineHashCode(this.Insignia?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.RankNumber)) return false;
            if (!eval(this.MaleName)) return false;
            if (!eval(this.FemaleName)) return false;
            if (!eval(this.Insignia)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Rank_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Rank_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Rank_Mask<R> obj, Func<T, R> eval)
        {
            obj.RankNumber = eval(this.RankNumber);
            obj.MaleName = eval(this.MaleName);
            obj.FemaleName = eval(this.FemaleName);
            obj.Insignia = eval(this.Insignia);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Rank_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Rank_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Rank_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.RankNumber ?? true)
                {
                    fg.AppendLine($"RankNumber => {RankNumber.ToStringSafe()}");
                }
                if (printMask?.MaleName ?? true)
                {
                    fg.AppendLine($"MaleName => {MaleName.ToStringSafe()}");
                }
                if (printMask?.FemaleName ?? true)
                {
                    fg.AppendLine($"FemaleName => {FemaleName.ToStringSafe()}");
                }
                if (printMask?.Insignia ?? true)
                {
                    fg.AppendLine($"Insignia => {Insignia.ToStringSafe()}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Rank_ErrorMask : IErrorMask
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception RankNumber;
        public Exception MaleName;
        public Exception FemaleName;
        public Exception Insignia;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    this.RankNumber = ex;
                    break;
                case Rank_FieldIndex.MaleName:
                    this.MaleName = ex;
                    break;
                case Rank_FieldIndex.FemaleName:
                    this.FemaleName = ex;
                    break;
                case Rank_FieldIndex.Insignia:
                    this.Insignia = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Rank_FieldIndex enu = (Rank_FieldIndex)index;
            switch (enu)
            {
                case Rank_FieldIndex.RankNumber:
                    this.RankNumber = (Exception)obj;
                    break;
                case Rank_FieldIndex.MaleName:
                    this.MaleName = (Exception)obj;
                    break;
                case Rank_FieldIndex.FemaleName:
                    this.FemaleName = (Exception)obj;
                    break;
                case Rank_FieldIndex.Insignia:
                    this.Insignia = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Rank_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            if (RankNumber != null)
            {
                fg.AppendLine($"RankNumber => {RankNumber.ToStringSafe()}");
            }
            if (MaleName != null)
            {
                fg.AppendLine($"MaleName => {MaleName.ToStringSafe()}");
            }
            if (FemaleName != null)
            {
                fg.AppendLine($"FemaleName => {FemaleName.ToStringSafe()}");
            }
            if (Insignia != null)
            {
                fg.AppendLine($"Insignia => {Insignia.ToStringSafe()}");
            }
        }
        #endregion

        #region Combine
        public Rank_ErrorMask Combine(Rank_ErrorMask rhs)
        {
            var ret = new Rank_ErrorMask();
            ret.RankNumber = this.RankNumber.Combine(rhs.RankNumber);
            ret.MaleName = this.MaleName.Combine(rhs.MaleName);
            ret.FemaleName = this.FemaleName.Combine(rhs.FemaleName);
            ret.Insignia = this.Insignia.Combine(rhs.Insignia);
            return ret;
        }
        public static Rank_ErrorMask Combine(Rank_ErrorMask lhs, Rank_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Rank_CopyMask
    {
        #region Members
        public bool RankNumber;
        public bool MaleName;
        public bool FemaleName;
        public bool Insignia;
        #endregion

    }
    #endregion




    #endregion

}
