/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class SkillData : ISkillData, ILoquiObjectSetter, IEquatable<SkillData>
    {
        ILoquiRegistration ILoquiObject.Registration => SkillData_Registration.Instance;
        public static SkillData_Registration Registration => SkillData_Registration.Instance;

        #region Ctor
        public SkillData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Action
        protected readonly INotifyingItem<ActorValue> _Action = NotifyingItem.Factory<ActorValue>(markAsSet: false);
        public INotifyingItem<ActorValue> Action_Property => _Action;
        public ActorValue Action
        {
            get => this._Action.Item;
            set => this._Action.Set(value);
        }
        INotifyingItem<ActorValue> ISkillData.Action_Property => this.Action_Property;
        INotifyingItemGetter<ActorValue> ISkillDataGetter.Action_Property => this.Action_Property;
        #endregion
        #region Attribute
        protected readonly INotifyingItem<ActorValue> _Attribute = NotifyingItem.Factory<ActorValue>(markAsSet: false);
        public INotifyingItem<ActorValue> Attribute_Property => _Attribute;
        public ActorValue Attribute
        {
            get => this._Attribute.Item;
            set => this._Attribute.Set(value);
        }
        INotifyingItem<ActorValue> ISkillData.Attribute_Property => this.Attribute_Property;
        INotifyingItemGetter<ActorValue> ISkillDataGetter.Attribute_Property => this.Attribute_Property;
        #endregion
        #region Specialization
        protected readonly INotifyingItem<Specialization> _Specialization = NotifyingItem.Factory<Specialization>(markAsSet: false);
        public INotifyingItem<Specialization> Specialization_Property => _Specialization;
        public Specialization Specialization
        {
            get => this._Specialization.Item;
            set => this._Specialization.Set(value);
        }
        INotifyingItem<Specialization> ISkillData.Specialization_Property => this.Specialization_Property;
        INotifyingItemGetter<Specialization> ISkillDataGetter.Specialization_Property => this.Specialization_Property;
        #endregion
        #region UseValueFirst
        protected readonly INotifyingItem<Single> _UseValueFirst = NotifyingItem.Factory<Single>(markAsSet: false);
        public INotifyingItem<Single> UseValueFirst_Property => _UseValueFirst;
        public Single UseValueFirst
        {
            get => this._UseValueFirst.Item;
            set => this._UseValueFirst.Set(value);
        }
        INotifyingItem<Single> ISkillData.UseValueFirst_Property => this.UseValueFirst_Property;
        INotifyingItemGetter<Single> ISkillDataGetter.UseValueFirst_Property => this.UseValueFirst_Property;
        #endregion
        #region UseValueSecond
        protected readonly INotifyingItem<Single> _UseValueSecond = NotifyingItem.Factory<Single>(markAsSet: false);
        public INotifyingItem<Single> UseValueSecond_Property => _UseValueSecond;
        public Single UseValueSecond
        {
            get => this._UseValueSecond.Item;
            set => this._UseValueSecond.Set(value);
        }
        INotifyingItem<Single> ISkillData.UseValueSecond_Property => this.UseValueSecond_Property;
        INotifyingItemGetter<Single> ISkillDataGetter.UseValueSecond_Property => this.UseValueSecond_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => SkillDataCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => SkillDataCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => SkillDataCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            SkillDataCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return SkillDataCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            SkillData_Mask<bool> printMask = null)
        {
            return SkillDataCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            SkillDataCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public SkillData_Mask<bool> GetHasBeenSetMask()
        {
            return SkillDataCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is SkillData rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SkillData rhs)
        {
            if (rhs == null) return false;
            if (Action_Property.HasBeenSet != rhs.Action_Property.HasBeenSet) return false;
            if (Action_Property.HasBeenSet)
            {
                if (Action != rhs.Action) return false;
            }
            if (Attribute_Property.HasBeenSet != rhs.Attribute_Property.HasBeenSet) return false;
            if (Attribute_Property.HasBeenSet)
            {
                if (Attribute != rhs.Attribute) return false;
            }
            if (Specialization_Property.HasBeenSet != rhs.Specialization_Property.HasBeenSet) return false;
            if (Specialization_Property.HasBeenSet)
            {
                if (Specialization != rhs.Specialization) return false;
            }
            if (UseValueFirst_Property.HasBeenSet != rhs.UseValueFirst_Property.HasBeenSet) return false;
            if (UseValueFirst_Property.HasBeenSet)
            {
                if (UseValueFirst != rhs.UseValueFirst) return false;
            }
            if (UseValueSecond_Property.HasBeenSet != rhs.UseValueSecond_Property.HasBeenSet) return false;
            if (UseValueSecond_Property.HasBeenSet)
            {
                if (UseValueSecond != rhs.UseValueSecond) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (Action_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Action).CombineHashCode(ret);
            }
            if (Attribute_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Attribute).CombineHashCode(ret);
            }
            if (Specialization_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Specialization).CombineHashCode(ret);
            }
            if (UseValueFirst_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UseValueFirst).CombineHashCode(ret);
            }
            if (UseValueSecond_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UseValueSecond).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static SkillData Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static SkillData Create_XML(
            XElement root,
            out SkillData_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static SkillData Create_XML(
            XElement root,
            bool doMasks,
            out SkillData_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (SkillData Object, SkillData_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            SkillData_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SkillData_ErrorMask()) : default(Func<SkillData_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static SkillData Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static SkillData Create_XML(
            string path,
            out SkillData_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static SkillData Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static SkillData Create_XML(
            Stream stream,
            out SkillData_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<SkillData, SkillData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out SkillData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<SkillData, SkillData_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out SkillData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out SkillData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out SkillData_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (SkillData_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out SkillData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out SkillData_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            SkillDataCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static SkillData Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<SkillData_ErrorMask> errorMask)
        {
            var ret = new SkillData();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            SkillData item,
            XElement root,
            string name,
            bool doMasks,
            Func<SkillData_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Action":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<ActorValue>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Action.SetIfSucceeded(tryGet.Bubble((o) => o.Value));
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SkillData_FieldIndex.Action,
                            subMask);
                    }
                    break;
                case "Attribute":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<ActorValue>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Attribute.SetIfSucceeded(tryGet.Bubble((o) => o.Value));
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SkillData_FieldIndex.Attribute,
                            subMask);
                    }
                    break;
                case "Specialization":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<Specialization>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Specialization.SetIfSucceeded(tryGet.Bubble((o) => o.Value));
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SkillData_FieldIndex.Specialization,
                            subMask);
                    }
                    break;
                case "UseValueFirst":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UseValueFirst.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SkillData_FieldIndex.UseValueFirst,
                            subMask);
                    }
                    break;
                case "UseValueSecond":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UseValueSecond.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SkillData_FieldIndex.UseValueSecond,
                            subMask);
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static SkillData Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static SkillData Create_Binary(
            MutagenFrame frame,
            out SkillData_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static SkillData Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out SkillData_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (SkillData Object, SkillData_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            SkillData_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SkillData_ErrorMask()) : default(Func<SkillData_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static SkillData Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static SkillData Create_Binary(
            string path,
            out SkillData_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static SkillData Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static SkillData Create_Binary(
            Stream stream,
            out SkillData_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<SkillData, SkillData_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out SkillData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<SkillData, SkillData_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out SkillData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out SkillData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out SkillData_ErrorMask errorMask)
        {
            errorMask = (SkillData_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out SkillData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out SkillData_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            SkillDataCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static SkillData Create_Binary_Internal(
            MutagenFrame frame,
            bool doMasks,
            Func<SkillData_ErrorMask> errorMask)
        {
            var ret = new SkillData();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseSubrecord(
                    frame,
                    SkillData_Registration.DATA_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            SkillData item,
            MutagenFrame frame,
            bool doMasks,
            Func<SkillData_ErrorMask> errorMask)
        {
            if (frame.Complete) return;
            var ActiontryGet = Mutagen.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                frame: frame.Spawn(new ContentLength(4)),
                fieldIndex: (int)SkillData_FieldIndex.Action,
                doMasks: doMasks,
                errorMask: errorMask);
            item._Action.SetIfSucceeded(ActiontryGet);
            if (frame.Complete) return;
            var AttributetryGet = Mutagen.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                frame: frame.Spawn(new ContentLength(4)),
                fieldIndex: (int)SkillData_FieldIndex.Attribute,
                doMasks: doMasks,
                errorMask: errorMask);
            item._Attribute.SetIfSucceeded(AttributetryGet);
            if (frame.Complete) return;
            var SpecializationtryGet = Mutagen.Binary.EnumBinaryTranslation<Specialization>.Instance.Parse(
                frame: frame.Spawn(new ContentLength(4)),
                fieldIndex: (int)SkillData_FieldIndex.Specialization,
                doMasks: doMasks,
                errorMask: errorMask);
            item._Specialization.SetIfSucceeded(SpecializationtryGet);
            if (frame.Complete) return;
            item._UseValueFirst.SetIfSucceeded(Mutagen.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                doMasks: doMasks,
                fieldIndex: (int)SkillData_FieldIndex.UseValueFirst,
                errorMask: errorMask));
            if (frame.Complete) return;
            item._UseValueSecond.SetIfSucceeded(Mutagen.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                doMasks: doMasks,
                fieldIndex: (int)SkillData_FieldIndex.UseValueSecond,
                errorMask: errorMask));
        }

        #endregion

        public SkillData Copy(
            SkillData_CopyMask copyMask = null,
            ISkillDataGetter def = null)
        {
            return SkillData.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static SkillData Copy(
            ISkillData item,
            SkillData_CopyMask copyMask = null,
            ISkillDataGetter def = null)
        {
            SkillData ret;
            if (item.GetType().Equals(typeof(SkillData)))
            {
                ret = new SkillData();
            }
            else
            {
                ret = (SkillData)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            SkillData_CopyMask copyMask = null,
            ISkillDataGetter def = null)
            where CopyType : class, ISkillData
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(SkillData)))
            {
                ret = new SkillData() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static SkillData Copy_ToLoqui(
            ISkillDataGetter item,
            SkillData_CopyMask copyMask = null,
            ISkillDataGetter def = null)
        {
            var ret = new SkillData();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                    this._Action.Set(
                        (ActorValue)obj,
                        cmds);
                    break;
                case SkillData_FieldIndex.Attribute:
                    this._Attribute.Set(
                        (ActorValue)obj,
                        cmds);
                    break;
                case SkillData_FieldIndex.Specialization:
                    this._Specialization.Set(
                        (Specialization)obj,
                        cmds);
                    break;
                case SkillData_FieldIndex.UseValueFirst:
                    this._UseValueFirst.Set(
                        (Single)obj,
                        cmds);
                    break;
                case SkillData_FieldIndex.UseValueSecond:
                    this._UseValueSecond.Set(
                        (Single)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            SkillDataCommon.Clear(this, cmds);
        }


        public static SkillData Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new SkillData();
            foreach (var pair in fields)
            {
                CopyInInternal_SkillData(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_SkillData(SkillData obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out SkillData_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                    obj._Action.Set(
                        (ActorValue)pair.Value,
                        null);
                    break;
                case SkillData_FieldIndex.Attribute:
                    obj._Attribute.Set(
                        (ActorValue)pair.Value,
                        null);
                    break;
                case SkillData_FieldIndex.Specialization:
                    obj._Specialization.Set(
                        (Specialization)pair.Value,
                        null);
                    break;
                case SkillData_FieldIndex.UseValueFirst:
                    obj._UseValueFirst.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case SkillData_FieldIndex.UseValueSecond:
                    obj._UseValueSecond.Set(
                        (Single)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, SkillData obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ISkillData : ISkillDataGetter, ILoquiClass<ISkillData, ISkillDataGetter>, ILoquiClass<SkillData, ISkillDataGetter>
    {
        new ActorValue Action { get; set; }
        new INotifyingItem<ActorValue> Action_Property { get; }

        new ActorValue Attribute { get; set; }
        new INotifyingItem<ActorValue> Attribute_Property { get; }

        new Specialization Specialization { get; set; }
        new INotifyingItem<Specialization> Specialization_Property { get; }

        new Single UseValueFirst { get; set; }
        new INotifyingItem<Single> UseValueFirst_Property { get; }

        new Single UseValueSecond { get; set; }
        new INotifyingItem<Single> UseValueSecond_Property { get; }

    }

    public interface ISkillDataGetter : ILoquiObject
    {
        #region Action
        ActorValue Action { get; }
        INotifyingItemGetter<ActorValue> Action_Property { get; }

        #endregion
        #region Attribute
        ActorValue Attribute { get; }
        INotifyingItemGetter<ActorValue> Attribute_Property { get; }

        #endregion
        #region Specialization
        Specialization Specialization { get; }
        INotifyingItemGetter<Specialization> Specialization_Property { get; }

        #endregion
        #region UseValueFirst
        Single UseValueFirst { get; }
        INotifyingItemGetter<Single> UseValueFirst_Property { get; }

        #endregion
        #region UseValueSecond
        Single UseValueSecond { get; }
        INotifyingItemGetter<Single> UseValueSecond_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum SkillData_FieldIndex
    {
        Action = 0,
        Attribute = 1,
        Specialization = 2,
        UseValueFirst = 3,
        UseValueSecond = 4,
    }
    #endregion

    #region Registration
    public class SkillData_Registration : ILoquiRegistration
    {
        public static readonly SkillData_Registration Instance = new SkillData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 43,
            version: 0);

        public const string GUID = "61385379-0a7b-4da0-8228-ae04867c4360";

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(SkillData_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkillData_ErrorMask);

        public static readonly Type ClassType = typeof(SkillData);

        public static readonly Type GetterType = typeof(ISkillDataGetter);

        public static readonly Type SetterType = typeof(ISkillData);

        public static readonly Type CommonType = typeof(SkillDataCommon);

        public const string FullName = "Mutagen.SkillData";

        public const string Name = "SkillData";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ACTION":
                    return (ushort)SkillData_FieldIndex.Action;
                case "ATTRIBUTE":
                    return (ushort)SkillData_FieldIndex.Attribute;
                case "SPECIALIZATION":
                    return (ushort)SkillData_FieldIndex.Specialization;
                case "USEVALUEFIRST":
                    return (ushort)SkillData_FieldIndex.UseValueFirst;
                case "USEVALUESECOND":
                    return (ushort)SkillData_FieldIndex.UseValueSecond;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                case SkillData_FieldIndex.Attribute:
                case SkillData_FieldIndex.Specialization:
                case SkillData_FieldIndex.UseValueFirst:
                case SkillData_FieldIndex.UseValueSecond:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                case SkillData_FieldIndex.Attribute:
                case SkillData_FieldIndex.Specialization:
                case SkillData_FieldIndex.UseValueFirst:
                case SkillData_FieldIndex.UseValueSecond:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                case SkillData_FieldIndex.Attribute:
                case SkillData_FieldIndex.Specialization:
                case SkillData_FieldIndex.UseValueFirst:
                case SkillData_FieldIndex.UseValueSecond:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                    return "Action";
                case SkillData_FieldIndex.Attribute:
                    return "Attribute";
                case SkillData_FieldIndex.Specialization:
                    return "Specialization";
                case SkillData_FieldIndex.UseValueFirst:
                    return "UseValueFirst";
                case SkillData_FieldIndex.UseValueSecond:
                    return "UseValueSecond";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                case SkillData_FieldIndex.Attribute:
                case SkillData_FieldIndex.Specialization:
                case SkillData_FieldIndex.UseValueFirst:
                case SkillData_FieldIndex.UseValueSecond:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                case SkillData_FieldIndex.Attribute:
                case SkillData_FieldIndex.Specialization:
                case SkillData_FieldIndex.UseValueFirst:
                case SkillData_FieldIndex.UseValueSecond:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                    return typeof(ActorValue);
                case SkillData_FieldIndex.Attribute:
                    return typeof(ActorValue);
                case SkillData_FieldIndex.Specialization:
                    return typeof(Specialization);
                case SkillData_FieldIndex.UseValueFirst:
                    return typeof(Single);
                case SkillData_FieldIndex.UseValueSecond:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = DATA_HEADER;
        public const int NumStructFields = 5;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class SkillDataCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ISkillData item,
            ISkillDataGetter rhs,
            SkillData_CopyMask copyMask = null,
            ISkillDataGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            SkillDataCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ISkillData item,
            ISkillDataGetter rhs,
            out SkillData_ErrorMask errorMask,
            SkillData_CopyMask copyMask = null,
            ISkillDataGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            SkillDataCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ISkillData item,
            ISkillDataGetter rhs,
            ISkillDataGetter def,
            bool doErrorMask,
            out SkillData_ErrorMask errorMask,
            SkillData_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            SkillData_ErrorMask retErrorMask = null;
            Func<SkillData_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new SkillData_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ISkillData item,
            ISkillDataGetter rhs,
            ISkillDataGetter def,
            bool doErrorMask,
            Func<SkillData_ErrorMask> errorMask,
            SkillData_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.Action ?? true)
            {
                try
                {
                    item.Action_Property.SetToWithDefault(
                        rhs.Action_Property,
                        def?.Action_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)SkillData_FieldIndex.Action, ex);
                }
            }
            if (copyMask?.Attribute ?? true)
            {
                try
                {
                    item.Attribute_Property.SetToWithDefault(
                        rhs.Attribute_Property,
                        def?.Attribute_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)SkillData_FieldIndex.Attribute, ex);
                }
            }
            if (copyMask?.Specialization ?? true)
            {
                try
                {
                    item.Specialization_Property.SetToWithDefault(
                        rhs.Specialization_Property,
                        def?.Specialization_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)SkillData_FieldIndex.Specialization, ex);
                }
            }
            if (copyMask?.UseValueFirst ?? true)
            {
                try
                {
                    item.UseValueFirst_Property.SetToWithDefault(
                        rhs.UseValueFirst_Property,
                        def?.UseValueFirst_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)SkillData_FieldIndex.UseValueFirst, ex);
                }
            }
            if (copyMask?.UseValueSecond ?? true)
            {
                try
                {
                    item.UseValueSecond_Property.SetToWithDefault(
                        rhs.UseValueSecond_Property,
                        def?.UseValueSecond_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)SkillData_FieldIndex.UseValueSecond, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ISkillData obj,
            NotifyingFireParameters? cmds = null)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                    obj.Action_Property.HasBeenSet = on;
                    break;
                case SkillData_FieldIndex.Attribute:
                    obj.Attribute_Property.HasBeenSet = on;
                    break;
                case SkillData_FieldIndex.Specialization:
                    obj.Specialization_Property.HasBeenSet = on;
                    break;
                case SkillData_FieldIndex.UseValueFirst:
                    obj.UseValueFirst_Property.HasBeenSet = on;
                    break;
                case SkillData_FieldIndex.UseValueSecond:
                    obj.UseValueSecond_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ISkillData obj,
            NotifyingUnsetParameters? cmds = null)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                    obj.Action_Property.Unset(cmds);
                    break;
                case SkillData_FieldIndex.Attribute:
                    obj.Attribute_Property.Unset(cmds);
                    break;
                case SkillData_FieldIndex.Specialization:
                    obj.Specialization_Property.Unset(cmds);
                    break;
                case SkillData_FieldIndex.UseValueFirst:
                    obj.UseValueFirst_Property.Unset(cmds);
                    break;
                case SkillData_FieldIndex.UseValueSecond:
                    obj.UseValueSecond_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ISkillData obj)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                    return obj.Action_Property.HasBeenSet;
                case SkillData_FieldIndex.Attribute:
                    return obj.Attribute_Property.HasBeenSet;
                case SkillData_FieldIndex.Specialization:
                    return obj.Specialization_Property.HasBeenSet;
                case SkillData_FieldIndex.UseValueFirst:
                    return obj.UseValueFirst_Property.HasBeenSet;
                case SkillData_FieldIndex.UseValueSecond:
                    return obj.UseValueSecond_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ISkillDataGetter obj)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                    return obj.Action;
                case SkillData_FieldIndex.Attribute:
                    return obj.Attribute;
                case SkillData_FieldIndex.Specialization:
                    return obj.Specialization;
                case SkillData_FieldIndex.UseValueFirst:
                    return obj.UseValueFirst;
                case SkillData_FieldIndex.UseValueSecond:
                    return obj.UseValueSecond;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ISkillData item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Action_Property.Unset(cmds.ToUnsetParams());
            item.Attribute_Property.Unset(cmds.ToUnsetParams());
            item.Specialization_Property.Unset(cmds.ToUnsetParams());
            item.UseValueFirst_Property.Unset(cmds.ToUnsetParams());
            item.UseValueSecond_Property.Unset(cmds.ToUnsetParams());
        }

        public static SkillData_Mask<bool> GetEqualsMask(
            this ISkillDataGetter item,
            ISkillDataGetter rhs)
        {
            var ret = new SkillData_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ISkillDataGetter item,
            ISkillDataGetter rhs,
            SkillData_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Action = item.Action_Property.Equals(rhs.Action_Property, (l, r) => l == r);
            ret.Attribute = item.Attribute_Property.Equals(rhs.Attribute_Property, (l, r) => l == r);
            ret.Specialization = item.Specialization_Property.Equals(rhs.Specialization_Property, (l, r) => l == r);
            ret.UseValueFirst = item.UseValueFirst_Property.Equals(rhs.UseValueFirst_Property, (l, r) => l == r);
            ret.UseValueSecond = item.UseValueSecond_Property.Equals(rhs.UseValueSecond_Property, (l, r) => l == r);
        }

        public static string ToString(
            this ISkillDataGetter item,
            string name = null,
            SkillData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ISkillDataGetter item,
            FileGeneration fg,
            string name = null,
            SkillData_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(SkillData)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(SkillData)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Action ?? true)
                {
                    fg.AppendLine($"Action => {item.Action}");
                }
                if (printMask?.Attribute ?? true)
                {
                    fg.AppendLine($"Attribute => {item.Attribute}");
                }
                if (printMask?.Specialization ?? true)
                {
                    fg.AppendLine($"Specialization => {item.Specialization}");
                }
                if (printMask?.UseValueFirst ?? true)
                {
                    fg.AppendLine($"UseValueFirst => {item.UseValueFirst}");
                }
                if (printMask?.UseValueSecond ?? true)
                {
                    fg.AppendLine($"UseValueSecond => {item.UseValueSecond}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ISkillDataGetter item,
            SkillData_Mask<bool?> checkMask)
        {
            if (checkMask.Action.HasValue && checkMask.Action.Value != item.Action_Property.HasBeenSet) return false;
            if (checkMask.Attribute.HasValue && checkMask.Attribute.Value != item.Attribute_Property.HasBeenSet) return false;
            if (checkMask.Specialization.HasValue && checkMask.Specialization.Value != item.Specialization_Property.HasBeenSet) return false;
            if (checkMask.UseValueFirst.HasValue && checkMask.UseValueFirst.Value != item.UseValueFirst_Property.HasBeenSet) return false;
            if (checkMask.UseValueSecond.HasValue && checkMask.UseValueSecond.Value != item.UseValueSecond_Property.HasBeenSet) return false;
            return true;
        }

        public static SkillData_Mask<bool> GetHasBeenSetMask(ISkillDataGetter item)
        {
            var ret = new SkillData_Mask<bool>();
            ret.Action = item.Action_Property.HasBeenSet;
            ret.Attribute = item.Attribute_Property.HasBeenSet;
            ret.Specialization = item.Specialization_Property.HasBeenSet;
            ret.UseValueFirst = item.UseValueFirst_Property.HasBeenSet;
            ret.UseValueSecond = item.UseValueSecond_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ISkillDataGetter item,
            bool doMasks,
            out SkillData_ErrorMask errorMask,
            string name = null)
        {
            SkillData_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SkillData_ErrorMask()) : default(Func<SkillData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ISkillDataGetter item,
            bool doMasks,
            Func<SkillData_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.SkillData"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.SkillData");
                    }
                    if (item.Action_Property.HasBeenSet)
                    {
                        Exception subMask;
                        EnumXmlTranslation<ActorValue>.Instance.Write(
                            writer,
                            nameof(item.Action),
                            item.Action,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SkillData_FieldIndex.Action,
                            subMask);
                    }
                    if (item.Attribute_Property.HasBeenSet)
                    {
                        Exception subMask;
                        EnumXmlTranslation<ActorValue>.Instance.Write(
                            writer,
                            nameof(item.Attribute),
                            item.Attribute,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SkillData_FieldIndex.Attribute,
                            subMask);
                    }
                    if (item.Specialization_Property.HasBeenSet)
                    {
                        Exception subMask;
                        EnumXmlTranslation<Specialization>.Instance.Write(
                            writer,
                            nameof(item.Specialization),
                            item.Specialization,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SkillData_FieldIndex.Specialization,
                            subMask);
                    }
                    if (item.UseValueFirst_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UseValueFirst),
                            item.UseValueFirst,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SkillData_FieldIndex.UseValueFirst,
                            subMask);
                    }
                    if (item.UseValueSecond_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UseValueSecond),
                            item.UseValueSecond,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SkillData_FieldIndex.UseValueSecond,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            ISkillDataGetter item,
            bool doMasks,
            out SkillData_ErrorMask errorMask)
        {
            SkillData_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SkillData_ErrorMask()) : default(Func<SkillData_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            ISkillDataGetter item,
            bool doMasks,
            Func<SkillData_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: SkillData_Registration.DATA_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            ISkillDataGetter item,
            MutagenWriter writer,
            bool doMasks,
            Func<SkillData_ErrorMask> errorMask)
        {
            Mutagen.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                writer,
                item.Action_Property,
                doMasks: doMasks,
                length: new ContentLength(4),
                fieldIndex: (int)SkillData_FieldIndex.Action,
                errorMask: errorMask);
            Mutagen.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                writer,
                item.Attribute_Property,
                doMasks: doMasks,
                length: new ContentLength(4),
                fieldIndex: (int)SkillData_FieldIndex.Attribute,
                errorMask: errorMask);
            Mutagen.Binary.EnumBinaryTranslation<Specialization>.Instance.Write(
                writer,
                item.Specialization_Property,
                doMasks: doMasks,
                length: new ContentLength(4),
                fieldIndex: (int)SkillData_FieldIndex.Specialization,
                errorMask: errorMask);
            Mutagen.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UseValueFirst_Property,
                doMasks: doMasks,
                fieldIndex: (int)SkillData_FieldIndex.UseValueFirst,
                errorMask: errorMask);
            Mutagen.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UseValueSecond_Property,
                doMasks: doMasks,
                fieldIndex: (int)SkillData_FieldIndex.UseValueSecond,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class SkillData_Mask<T> : IMask<T>, IEquatable<SkillData_Mask<T>>
    {
        #region Ctors
        public SkillData_Mask()
        {
        }

        public SkillData_Mask(T initialValue)
        {
            this.Action = initialValue;
            this.Attribute = initialValue;
            this.Specialization = initialValue;
            this.UseValueFirst = initialValue;
            this.UseValueSecond = initialValue;
        }
        #endregion

        #region Members
        public T Action;
        public T Attribute;
        public T Specialization;
        public T UseValueFirst;
        public T UseValueSecond;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SkillData_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SkillData_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Action, rhs.Action)) return false;
            if (!object.Equals(this.Attribute, rhs.Attribute)) return false;
            if (!object.Equals(this.Specialization, rhs.Specialization)) return false;
            if (!object.Equals(this.UseValueFirst, rhs.UseValueFirst)) return false;
            if (!object.Equals(this.UseValueSecond, rhs.UseValueSecond)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Action?.GetHashCode());
            ret = ret.CombineHashCode(this.Attribute?.GetHashCode());
            ret = ret.CombineHashCode(this.Specialization?.GetHashCode());
            ret = ret.CombineHashCode(this.UseValueFirst?.GetHashCode());
            ret = ret.CombineHashCode(this.UseValueSecond?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Action)) return false;
            if (!eval(this.Attribute)) return false;
            if (!eval(this.Specialization)) return false;
            if (!eval(this.UseValueFirst)) return false;
            if (!eval(this.UseValueSecond)) return false;
            return true;
        }
        #endregion

        #region Translate
        public SkillData_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SkillData_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SkillData_Mask<R> obj, Func<T, R> eval)
        {
            obj.Action = eval(this.Action);
            obj.Attribute = eval(this.Attribute);
            obj.Specialization = eval(this.Specialization);
            obj.UseValueFirst = eval(this.UseValueFirst);
            obj.UseValueSecond = eval(this.UseValueSecond);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SkillData_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SkillData_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SkillData_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Action ?? true)
                {
                    fg.AppendLine($"Action => {Action.ToStringSafe()}");
                }
                if (printMask?.Attribute ?? true)
                {
                    fg.AppendLine($"Attribute => {Attribute.ToStringSafe()}");
                }
                if (printMask?.Specialization ?? true)
                {
                    fg.AppendLine($"Specialization => {Specialization.ToStringSafe()}");
                }
                if (printMask?.UseValueFirst ?? true)
                {
                    fg.AppendLine($"UseValueFirst => {UseValueFirst.ToStringSafe()}");
                }
                if (printMask?.UseValueSecond ?? true)
                {
                    fg.AppendLine($"UseValueSecond => {UseValueSecond.ToStringSafe()}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SkillData_ErrorMask : IErrorMask, IErrorMask<SkillData_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Action;
        public Exception Attribute;
        public Exception Specialization;
        public Exception UseValueFirst;
        public Exception UseValueSecond;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                    this.Action = ex;
                    break;
                case SkillData_FieldIndex.Attribute:
                    this.Attribute = ex;
                    break;
                case SkillData_FieldIndex.Specialization:
                    this.Specialization = ex;
                    break;
                case SkillData_FieldIndex.UseValueFirst:
                    this.UseValueFirst = ex;
                    break;
                case SkillData_FieldIndex.UseValueSecond:
                    this.UseValueSecond = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                    this.Action = (Exception)obj;
                    break;
                case SkillData_FieldIndex.Attribute:
                    this.Attribute = (Exception)obj;
                    break;
                case SkillData_FieldIndex.Specialization:
                    this.Specialization = (Exception)obj;
                    break;
                case SkillData_FieldIndex.UseValueFirst:
                    this.UseValueFirst = (Exception)obj;
                    break;
                case SkillData_FieldIndex.UseValueSecond:
                    this.UseValueSecond = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("SkillData_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            if (Action != null)
            {
                fg.AppendLine($"Action => {Action.ToStringSafe()}");
            }
            if (Attribute != null)
            {
                fg.AppendLine($"Attribute => {Attribute.ToStringSafe()}");
            }
            if (Specialization != null)
            {
                fg.AppendLine($"Specialization => {Specialization.ToStringSafe()}");
            }
            if (UseValueFirst != null)
            {
                fg.AppendLine($"UseValueFirst => {UseValueFirst.ToStringSafe()}");
            }
            if (UseValueSecond != null)
            {
                fg.AppendLine($"UseValueSecond => {UseValueSecond.ToStringSafe()}");
            }
        }
        #endregion

        #region Combine
        public SkillData_ErrorMask Combine(SkillData_ErrorMask rhs)
        {
            var ret = new SkillData_ErrorMask();
            ret.Action = this.Action.Combine(rhs.Action);
            ret.Attribute = this.Attribute.Combine(rhs.Attribute);
            ret.Specialization = this.Specialization.Combine(rhs.Specialization);
            ret.UseValueFirst = this.UseValueFirst.Combine(rhs.UseValueFirst);
            ret.UseValueSecond = this.UseValueSecond.Combine(rhs.UseValueSecond);
            return ret;
        }
        public static SkillData_ErrorMask Combine(SkillData_ErrorMask lhs, SkillData_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class SkillData_CopyMask
    {
        #region Members
        public bool Action;
        public bool Attribute;
        public bool Specialization;
        public bool UseValueFirst;
        public bool UseValueSecond;
        #endregion

    }
    #endregion




    #endregion

}
