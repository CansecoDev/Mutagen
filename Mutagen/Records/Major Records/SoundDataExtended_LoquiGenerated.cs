/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class SoundDataExtended : SoundData, ISoundDataExtended, ILoquiObjectSetter, IEquatable<SoundDataExtended>
    {
        ILoquiRegistration ILoquiObject.Registration => SoundDataExtended_Registration.Instance;
        public new static SoundDataExtended_Registration Registration => SoundDataExtended_Registration.Instance;

        #region Ctor
        public SoundDataExtended()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region StaticAttenuation
        protected readonly INotifyingItem<Single> _StaticAttenuation = NotifyingItem.Factory<Single>(markAsSet: false);
        public INotifyingItem<Single> StaticAttenuation_Property => _StaticAttenuation;
        public Single StaticAttenuation
        {
            get => this._StaticAttenuation.Item;
            set => this._StaticAttenuation.Set(value);
        }
        INotifyingItem<Single> ISoundDataExtended.StaticAttenuation_Property => this.StaticAttenuation_Property;
        INotifyingItemGetter<Single> ISoundDataExtendedGetter.StaticAttenuation_Property => this.StaticAttenuation_Property;
        #endregion
        #region StopTime
        protected readonly INotifyingItem<Byte> _StopTime = NotifyingItem.Factory<Byte>(markAsSet: false);
        public INotifyingItem<Byte> StopTime_Property => _StopTime;
        public Byte StopTime
        {
            get => this._StopTime.Item;
            set => this._StopTime.Set(value);
        }
        INotifyingItem<Byte> ISoundDataExtended.StopTime_Property => this.StopTime_Property;
        INotifyingItemGetter<Byte> ISoundDataExtendedGetter.StopTime_Property => this.StopTime_Property;
        #endregion
        #region StartTime
        protected readonly INotifyingItem<Byte> _StartTime = NotifyingItem.Factory<Byte>(markAsSet: false);
        public INotifyingItem<Byte> StartTime_Property => _StartTime;
        public Byte StartTime
        {
            get => this._StartTime.Item;
            set => this._StartTime.Set(value);
        }
        INotifyingItem<Byte> ISoundDataExtended.StartTime_Property => this.StartTime_Property;
        INotifyingItemGetter<Byte> ISoundDataExtendedGetter.StartTime_Property => this.StartTime_Property;
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => SoundDataExtendedCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => SoundDataExtendedCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => SoundDataExtendedCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            SoundDataExtendedCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return SoundDataExtendedCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            SoundDataExtended_Mask<bool> printMask = null)
        {
            return SoundDataExtendedCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            SoundDataExtendedCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new SoundDataExtended_Mask<bool> GetHasBeenSetMask()
        {
            return SoundDataExtendedCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is SoundDataExtended rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SoundDataExtended rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (StaticAttenuation_Property.HasBeenSet != rhs.StaticAttenuation_Property.HasBeenSet) return false;
            if (StaticAttenuation_Property.HasBeenSet)
            {
                if (StaticAttenuation != rhs.StaticAttenuation) return false;
            }
            if (StopTime_Property.HasBeenSet != rhs.StopTime_Property.HasBeenSet) return false;
            if (StopTime_Property.HasBeenSet)
            {
                if (StopTime != rhs.StopTime) return false;
            }
            if (StartTime_Property.HasBeenSet != rhs.StartTime_Property.HasBeenSet) return false;
            if (StartTime_Property.HasBeenSet)
            {
                if (StartTime != rhs.StartTime) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (StaticAttenuation_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(StaticAttenuation).CombineHashCode(ret);
            }
            if (StopTime_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(StopTime).CombineHashCode(ret);
            }
            if (StartTime_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(StartTime).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static SoundDataExtended Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static SoundDataExtended Create_XML(
            XElement root,
            out SoundDataExtended_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static SoundDataExtended Create_XML(
            XElement root,
            bool doMasks,
            out SoundDataExtended_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (SoundDataExtended Object, SoundDataExtended_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            SoundDataExtended_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SoundDataExtended_ErrorMask()) : default(Func<SoundDataExtended_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static SoundDataExtended Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static SoundDataExtended Create_XML(
            string path,
            out SoundDataExtended_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static SoundDataExtended Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static SoundDataExtended Create_XML(
            Stream stream,
            out SoundDataExtended_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<SoundDataExtended, SoundDataExtended_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out SoundDataExtended_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<SoundDataExtended, SoundDataExtended_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out SoundDataExtended_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out SoundDataExtended_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out SoundData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out SoundDataExtended_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out SoundDataExtended_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (SoundDataExtended_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out SoundDataExtended_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out SoundDataExtended_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_XML(
            XmlWriter writer,
            out SoundData_ErrorMask errorMask,
            string name = null)
        {
            Write_XML(
                writer: writer,
                name: name,
                errorMask: out SoundDataExtended_ErrorMask errMask);
            errorMask = errMask;
        }

        public override void Write_XML(
            string path,
            out SoundData_ErrorMask errorMask,
            string name = null)
        {
            Write_XML(
                path: path,
                name: name,
                errorMask: out SoundDataExtended_ErrorMask errMask);
            errorMask = errMask;
        }

        public override void Write_XML(
            Stream stream,
            out SoundData_ErrorMask errorMask,
            string name = null)
        {
            Write_XML(
                stream: stream,
                name: name,
                errorMask: out SoundDataExtended_ErrorMask errMask);
            errorMask = errMask;
        }

        #endregion

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            SoundDataExtendedCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static SoundDataExtended Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<SoundDataExtended_ErrorMask> errorMask)
        {
            var ret = new SoundDataExtended();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            SoundDataExtended item,
            XElement root,
            string name,
            bool doMasks,
            Func<SoundDataExtended_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "StaticAttenuation":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._StaticAttenuation.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SoundDataExtended_FieldIndex.StaticAttenuation,
                            subMask);
                    }
                    break;
                case "StopTime":
                    {
                        Exception subMask;
                        var tryGet = ByteXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._StopTime.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SoundDataExtended_FieldIndex.StopTime,
                            subMask);
                    }
                    break;
                case "StartTime":
                    {
                        Exception subMask;
                        var tryGet = ByteXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._StartTime.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SoundDataExtended_FieldIndex.StartTime,
                            subMask);
                    }
                    break;
                default:
                    SoundData.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public new static SoundDataExtended Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static SoundDataExtended Create_Binary(
            MutagenFrame frame,
            out SoundDataExtended_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static SoundDataExtended Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out SoundDataExtended_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (SoundDataExtended Object, SoundDataExtended_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            SoundDataExtended_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SoundDataExtended_ErrorMask()) : default(Func<SoundDataExtended_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static SoundDataExtended Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static SoundDataExtended Create_Binary(
            string path,
            out SoundDataExtended_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static SoundDataExtended Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static SoundDataExtended Create_Binary(
            Stream stream,
            out SoundDataExtended_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public override void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<SoundDataExtended, SoundDataExtended_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out SoundDataExtended_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<SoundDataExtended, SoundDataExtended_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out SoundDataExtended_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out SoundDataExtended_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public override void CopyIn_Binary(
            MutagenFrame frame,
            out SoundData_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_Binary(
                frame: frame,
                errorMask: out SoundDataExtended_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out SoundDataExtended_ErrorMask errorMask)
        {
            errorMask = (SoundDataExtended_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out SoundDataExtended_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out SoundDataExtended_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_Binary(
            MutagenWriter writer,
            out SoundData_ErrorMask errorMask)
        {
            Write_Binary(
                writer: writer,
                errorMask: out SoundDataExtended_ErrorMask errMask);
            errorMask = errMask;
        }

        public override void Write_Binary(
            string path,
            out SoundData_ErrorMask errorMask)
        {
            Write_Binary(
                path: path,
                errorMask: out SoundDataExtended_ErrorMask errMask);
            errorMask = errMask;
        }

        public override void Write_Binary(
            Stream stream,
            out SoundData_ErrorMask errorMask)
        {
            Write_Binary(
                stream: stream,
                errorMask: out SoundDataExtended_ErrorMask errMask);
            errorMask = errMask;
        }

        #endregion

        protected override object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            SoundDataExtendedCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static SoundDataExtended Create_Binary_Internal(
            MutagenFrame frame,
            bool doMasks,
            Func<SoundDataExtended_ErrorMask> errorMask)
        {
            var ret = new SoundDataExtended();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseSubrecord(
                    frame,
                    SoundDataExtended_Registration.SNDX_HEADER));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            SoundDataExtended item,
            MutagenFrame frame,
            bool doMasks,
            Func<SoundDataExtended_ErrorMask> errorMask)
        {
            SoundData.Fill_Binary_Structs(
                item: item,
                frame: frame,
                doMasks: doMasks,
                errorMask: errorMask);
            if (frame.Complete) return;
            var StaticAttenuationtryGet = Mutagen.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                doMasks: doMasks,
                fieldIndex: (int)SoundDataExtended_FieldIndex.StaticAttenuation,
                errorMask: errorMask);
            item._StaticAttenuation.SetIfSucceeded(StaticAttenuationtryGet);
            if (frame.Complete) return;
            var StopTimetryGet = Mutagen.Binary.ByteBinaryTranslation.Instance.Parse(
                frame: frame,
                doMasks: doMasks,
                fieldIndex: (int)SoundDataExtended_FieldIndex.StopTime,
                errorMask: errorMask);
            item._StopTime.SetIfSucceeded(StopTimetryGet);
            if (frame.Complete) return;
            var StartTimetryGet = Mutagen.Binary.ByteBinaryTranslation.Instance.Parse(
                frame: frame,
                doMasks: doMasks,
                fieldIndex: (int)SoundDataExtended_FieldIndex.StartTime,
                errorMask: errorMask);
            item._StartTime.SetIfSucceeded(StartTimetryGet);
        }

        #endregion

        public SoundDataExtended Copy(
            SoundDataExtended_CopyMask copyMask = null,
            ISoundDataExtendedGetter def = null)
        {
            return SoundDataExtended.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static SoundDataExtended Copy(
            ISoundDataExtended item,
            SoundDataExtended_CopyMask copyMask = null,
            ISoundDataExtendedGetter def = null)
        {
            SoundDataExtended ret;
            if (item.GetType().Equals(typeof(SoundDataExtended)))
            {
                ret = new SoundDataExtended();
            }
            else
            {
                ret = (SoundDataExtended)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            SoundDataExtended_CopyMask copyMask = null,
            ISoundDataExtendedGetter def = null)
            where CopyType : class, ISoundDataExtended
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(SoundDataExtended)))
            {
                ret = new SoundDataExtended() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static SoundDataExtended Copy_ToLoqui(
            ISoundDataExtendedGetter item,
            SoundDataExtended_CopyMask copyMask = null,
            ISoundDataExtendedGetter def = null)
        {
            var ret = new SoundDataExtended();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    this._StaticAttenuation.Set(
                        (Single)obj,
                        cmds);
                    break;
                case SoundDataExtended_FieldIndex.StopTime:
                    this._StopTime.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case SoundDataExtended_FieldIndex.StartTime:
                    this._StartTime.Set(
                        (Byte)obj,
                        cmds);
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            SoundDataExtendedCommon.Clear(this, cmds);
        }


        public new static SoundDataExtended Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new SoundDataExtended();
            foreach (var pair in fields)
            {
                CopyInInternal_SoundDataExtended(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_SoundDataExtended(SoundDataExtended obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out SoundDataExtended_FieldIndex enu))
            {
                CopyInInternal_SoundData(obj, pair);
            }
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    obj._StaticAttenuation.Set(
                        (Single)pair.Value,
                        null);
                    break;
                case SoundDataExtended_FieldIndex.StopTime:
                    obj._StopTime.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                case SoundDataExtended_FieldIndex.StartTime:
                    obj._StartTime.Set(
                        (Byte)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, SoundDataExtended obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ISoundDataExtended : ISoundDataExtendedGetter, ISoundData, ILoquiClass<ISoundDataExtended, ISoundDataExtendedGetter>, ILoquiClass<SoundDataExtended, ISoundDataExtendedGetter>
    {
        new Single StaticAttenuation { get; set; }
        new INotifyingItem<Single> StaticAttenuation_Property { get; }

        new Byte StopTime { get; set; }
        new INotifyingItem<Byte> StopTime_Property { get; }

        new Byte StartTime { get; set; }
        new INotifyingItem<Byte> StartTime_Property { get; }

    }

    public interface ISoundDataExtendedGetter : ISoundDataGetter
    {
        #region StaticAttenuation
        Single StaticAttenuation { get; }
        INotifyingItemGetter<Single> StaticAttenuation_Property { get; }

        #endregion
        #region StopTime
        Byte StopTime { get; }
        INotifyingItemGetter<Byte> StopTime_Property { get; }

        #endregion
        #region StartTime
        Byte StartTime { get; }
        INotifyingItemGetter<Byte> StartTime_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum SoundDataExtended_FieldIndex
    {
        StaticAttenuation = 5,
        StopTime = 6,
        StartTime = 7,
    }
    #endregion

    #region Registration
    public class SoundDataExtended_Registration : ILoquiRegistration
    {
        public static readonly SoundDataExtended_Registration Instance = new SoundDataExtended_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 41,
            version: 0);

        public const string GUID = "3af22aab-9cdf-4fac-a210-9c06331d2180";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(SoundDataExtended_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundDataExtended_ErrorMask);

        public static readonly Type ClassType = typeof(SoundDataExtended);

        public static readonly Type GetterType = typeof(ISoundDataExtendedGetter);

        public static readonly Type SetterType = typeof(ISoundDataExtended);

        public static readonly Type CommonType = typeof(SoundDataExtendedCommon);

        public const string FullName = "Mutagen.SoundDataExtended";

        public const string Name = "SoundDataExtended";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "STATICATTENUATION":
                    return (ushort)SoundDataExtended_FieldIndex.StaticAttenuation;
                case "STOPTIME":
                    return (ushort)SoundDataExtended_FieldIndex.StopTime;
                case "STARTTIME":
                    return (ushort)SoundDataExtended_FieldIndex.StartTime;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    return "StaticAttenuation";
                case SoundDataExtended_FieldIndex.StopTime:
                    return "StopTime";
                case SoundDataExtended_FieldIndex.StartTime:
                    return "StartTime";
                default:
                    return SoundData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                case SoundDataExtended_FieldIndex.StopTime:
                case SoundDataExtended_FieldIndex.StartTime:
                    return false;
                default:
                    return SoundData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    return typeof(Single);
                case SoundDataExtended_FieldIndex.StopTime:
                    return typeof(Byte);
                case SoundDataExtended_FieldIndex.StartTime:
                    return typeof(Byte);
                default:
                    return SoundData_Registration.GetNthType(index);
            }
        }

        public static readonly RecordType SNDX_HEADER = new RecordType("SNDX");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SNDX_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class SoundDataExtendedCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ISoundDataExtended item,
            ISoundDataExtendedGetter rhs,
            SoundDataExtended_CopyMask copyMask = null,
            ISoundDataExtendedGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            SoundDataExtendedCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ISoundDataExtended item,
            ISoundDataExtendedGetter rhs,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_CopyMask copyMask = null,
            ISoundDataExtendedGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            SoundDataExtendedCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ISoundDataExtended item,
            ISoundDataExtendedGetter rhs,
            ISoundDataExtendedGetter def,
            bool doErrorMask,
            out SoundDataExtended_ErrorMask errorMask,
            SoundDataExtended_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            SoundDataExtended_ErrorMask retErrorMask = null;
            Func<SoundDataExtended_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new SoundDataExtended_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ISoundDataExtended item,
            ISoundDataExtendedGetter rhs,
            ISoundDataExtendedGetter def,
            bool doErrorMask,
            Func<SoundDataExtended_ErrorMask> errorMask,
            SoundDataExtended_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            SoundDataCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doErrorMask,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.StaticAttenuation ?? true)
            {
                try
                {
                    item.StaticAttenuation_Property.SetToWithDefault(
                        rhs.StaticAttenuation_Property,
                        def?.StaticAttenuation_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)SoundDataExtended_FieldIndex.StaticAttenuation, ex);
                }
            }
            if (copyMask?.StopTime ?? true)
            {
                try
                {
                    item.StopTime_Property.SetToWithDefault(
                        rhs.StopTime_Property,
                        def?.StopTime_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)SoundDataExtended_FieldIndex.StopTime, ex);
                }
            }
            if (copyMask?.StartTime ?? true)
            {
                try
                {
                    item.StartTime_Property.SetToWithDefault(
                        rhs.StartTime_Property,
                        def?.StartTime_Property,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)SoundDataExtended_FieldIndex.StartTime, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ISoundDataExtended obj,
            NotifyingFireParameters? cmds = null)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    obj.StaticAttenuation_Property.HasBeenSet = on;
                    break;
                case SoundDataExtended_FieldIndex.StopTime:
                    obj.StopTime_Property.HasBeenSet = on;
                    break;
                case SoundDataExtended_FieldIndex.StartTime:
                    obj.StartTime_Property.HasBeenSet = on;
                    break;
                default:
                    SoundDataCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ISoundDataExtended obj,
            NotifyingUnsetParameters? cmds = null)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    obj.StaticAttenuation_Property.Unset(cmds);
                    break;
                case SoundDataExtended_FieldIndex.StopTime:
                    obj.StopTime_Property.Unset(cmds);
                    break;
                case SoundDataExtended_FieldIndex.StartTime:
                    obj.StartTime_Property.Unset(cmds);
                    break;
                default:
                    SoundDataCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ISoundDataExtended obj)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    return obj.StaticAttenuation_Property.HasBeenSet;
                case SoundDataExtended_FieldIndex.StopTime:
                    return obj.StopTime_Property.HasBeenSet;
                case SoundDataExtended_FieldIndex.StartTime:
                    return obj.StartTime_Property.HasBeenSet;
                default:
                    return SoundDataCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ISoundDataExtendedGetter obj)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    return obj.StaticAttenuation;
                case SoundDataExtended_FieldIndex.StopTime:
                    return obj.StopTime;
                case SoundDataExtended_FieldIndex.StartTime:
                    return obj.StartTime;
                default:
                    return SoundDataCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ISoundDataExtended item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.StaticAttenuation_Property.Unset(cmds.ToUnsetParams());
            item.StopTime_Property.Unset(cmds.ToUnsetParams());
            item.StartTime_Property.Unset(cmds.ToUnsetParams());
        }

        public static SoundDataExtended_Mask<bool> GetEqualsMask(
            this ISoundDataExtendedGetter item,
            ISoundDataExtendedGetter rhs)
        {
            var ret = new SoundDataExtended_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ISoundDataExtendedGetter item,
            ISoundDataExtendedGetter rhs,
            SoundDataExtended_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.StaticAttenuation = item.StaticAttenuation_Property.Equals(rhs.StaticAttenuation_Property, (l, r) => l == r);
            ret.StopTime = item.StopTime_Property.Equals(rhs.StopTime_Property, (l, r) => l == r);
            ret.StartTime = item.StartTime_Property.Equals(rhs.StartTime_Property, (l, r) => l == r);
            SoundDataCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ISoundDataExtendedGetter item,
            string name = null,
            SoundDataExtended_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ISoundDataExtendedGetter item,
            FileGeneration fg,
            string name = null,
            SoundDataExtended_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(SoundDataExtended)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(SoundDataExtended)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.StaticAttenuation ?? true)
                {
                    fg.AppendLine($"StaticAttenuation => {item.StaticAttenuation}");
                }
                if (printMask?.StopTime ?? true)
                {
                    fg.AppendLine($"StopTime => {item.StopTime}");
                }
                if (printMask?.StartTime ?? true)
                {
                    fg.AppendLine($"StartTime => {item.StartTime}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ISoundDataExtendedGetter item,
            SoundDataExtended_Mask<bool?> checkMask)
        {
            if (checkMask.StaticAttenuation.HasValue && checkMask.StaticAttenuation.Value != item.StaticAttenuation_Property.HasBeenSet) return false;
            if (checkMask.StopTime.HasValue && checkMask.StopTime.Value != item.StopTime_Property.HasBeenSet) return false;
            if (checkMask.StartTime.HasValue && checkMask.StartTime.Value != item.StartTime_Property.HasBeenSet) return false;
            return true;
        }

        public static SoundDataExtended_Mask<bool> GetHasBeenSetMask(ISoundDataExtendedGetter item)
        {
            var ret = new SoundDataExtended_Mask<bool>();
            ret.StaticAttenuation = item.StaticAttenuation_Property.HasBeenSet;
            ret.StopTime = item.StopTime_Property.HasBeenSet;
            ret.StartTime = item.StartTime_Property.HasBeenSet;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ISoundDataExtendedGetter item,
            bool doMasks,
            out SoundDataExtended_ErrorMask errorMask,
            string name = null)
        {
            SoundDataExtended_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SoundDataExtended_ErrorMask()) : default(Func<SoundDataExtended_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ISoundDataExtendedGetter item,
            bool doMasks,
            Func<SoundDataExtended_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.SoundDataExtended"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.SoundDataExtended");
                    }
                    if (item.StaticAttenuation_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.StaticAttenuation),
                            item.StaticAttenuation,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SoundDataExtended_FieldIndex.StaticAttenuation,
                            subMask);
                    }
                    if (item.StopTime_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.StopTime),
                            item.StopTime,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SoundDataExtended_FieldIndex.StopTime,
                            subMask);
                    }
                    if (item.StartTime_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.StartTime),
                            item.StartTime,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)SoundDataExtended_FieldIndex.StartTime,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            ISoundDataExtendedGetter item,
            bool doMasks,
            out SoundDataExtended_ErrorMask errorMask)
        {
            SoundDataExtended_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new SoundDataExtended_ErrorMask()) : default(Func<SoundDataExtended_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            ISoundDataExtendedGetter item,
            bool doMasks,
            Func<SoundDataExtended_ErrorMask> errorMask)
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: SoundDataExtended_Registration.SNDX_HEADER,
                    type: ObjectType.Subrecord))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded(
            ISoundDataExtendedGetter item,
            MutagenWriter writer,
            bool doMasks,
            Func<SoundDataExtended_ErrorMask> errorMask)
        {
            SoundDataCommon.Write_Binary_Embedded(
                item: item,
                writer: writer,
                doMasks: doMasks,
                errorMask: errorMask);
            Mutagen.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.StaticAttenuation_Property,
                doMasks: doMasks,
                fieldIndex: (int)SoundDataExtended_FieldIndex.StaticAttenuation,
                errorMask: errorMask);
            Mutagen.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.StopTime_Property,
                doMasks: doMasks,
                fieldIndex: (int)SoundDataExtended_FieldIndex.StopTime,
                errorMask: errorMask);
            Mutagen.Binary.ByteBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.StartTime_Property,
                doMasks: doMasks,
                fieldIndex: (int)SoundDataExtended_FieldIndex.StartTime,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class SoundDataExtended_Mask<T> : SoundData_Mask<T>, IMask<T>, IEquatable<SoundDataExtended_Mask<T>>
    {
        #region Ctors
        public SoundDataExtended_Mask()
        {
        }

        public SoundDataExtended_Mask(T initialValue)
        {
            this.StaticAttenuation = initialValue;
            this.StopTime = initialValue;
            this.StartTime = initialValue;
        }
        #endregion

        #region Members
        public T StaticAttenuation;
        public T StopTime;
        public T StartTime;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SoundDataExtended_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SoundDataExtended_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.StaticAttenuation, rhs.StaticAttenuation)) return false;
            if (!object.Equals(this.StopTime, rhs.StopTime)) return false;
            if (!object.Equals(this.StartTime, rhs.StartTime)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.StaticAttenuation?.GetHashCode());
            ret = ret.CombineHashCode(this.StopTime?.GetHashCode());
            ret = ret.CombineHashCode(this.StartTime?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.StaticAttenuation)) return false;
            if (!eval(this.StopTime)) return false;
            if (!eval(this.StartTime)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new SoundDataExtended_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SoundDataExtended_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SoundDataExtended_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.StaticAttenuation = eval(this.StaticAttenuation);
            obj.StopTime = eval(this.StopTime);
            obj.StartTime = eval(this.StartTime);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SoundDataExtended_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SoundDataExtended_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SoundDataExtended_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.StaticAttenuation ?? true)
                {
                    fg.AppendLine($"StaticAttenuation => {StaticAttenuation.ToStringSafe()}");
                }
                if (printMask?.StopTime ?? true)
                {
                    fg.AppendLine($"StopTime => {StopTime.ToStringSafe()}");
                }
                if (printMask?.StartTime ?? true)
                {
                    fg.AppendLine($"StartTime => {StartTime.ToStringSafe()}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SoundDataExtended_ErrorMask : SoundData_ErrorMask
    {
        #region Members
        public Exception StaticAttenuation;
        public Exception StopTime;
        public Exception StartTime;
        #endregion

        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    this.StaticAttenuation = ex;
                    break;
                case SoundDataExtended_FieldIndex.StopTime:
                    this.StopTime = ex;
                    break;
                case SoundDataExtended_FieldIndex.StartTime:
                    this.StartTime = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
            switch (enu)
            {
                case SoundDataExtended_FieldIndex.StaticAttenuation:
                    this.StaticAttenuation = (Exception)obj;
                    break;
                case SoundDataExtended_FieldIndex.StopTime:
                    this.StopTime = (Exception)obj;
                    break;
                case SoundDataExtended_FieldIndex.StartTime:
                    this.StartTime = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("SoundDataExtended_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            if (StaticAttenuation != null)
            {
                fg.AppendLine($"StaticAttenuation => {StaticAttenuation.ToStringSafe()}");
            }
            if (StopTime != null)
            {
                fg.AppendLine($"StopTime => {StopTime.ToStringSafe()}");
            }
            if (StartTime != null)
            {
                fg.AppendLine($"StartTime => {StartTime.ToStringSafe()}");
            }
        }
        #endregion

        #region Combine
        public SoundDataExtended_ErrorMask Combine(SoundDataExtended_ErrorMask rhs)
        {
            var ret = new SoundDataExtended_ErrorMask();
            ret.StaticAttenuation = this.StaticAttenuation.Combine(rhs.StaticAttenuation);
            ret.StopTime = this.StopTime.Combine(rhs.StopTime);
            ret.StartTime = this.StartTime.Combine(rhs.StartTime);
            return ret;
        }
        public static SoundDataExtended_ErrorMask Combine(SoundDataExtended_ErrorMask lhs, SoundDataExtended_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class SoundDataExtended_CopyMask : SoundData_CopyMask
    {
        #region Members
        public bool StaticAttenuation;
        public bool StopTime;
        public bool StartTime;
        #endregion

    }
    #endregion




    #endregion

}
