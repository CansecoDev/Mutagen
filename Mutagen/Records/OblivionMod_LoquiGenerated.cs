/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using Mutagen;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class OblivionMod : IOblivionMod, ILoquiObjectSetter, IEquatable<OblivionMod>
    {
        ILoquiRegistration ILoquiObject.Registration => OblivionMod_Registration.Instance;
        public static OblivionMod_Registration Registration => OblivionMod_Registration.Instance;

        #region Ctor
        public OblivionMod()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TES4
        private readonly INotifyingItem<TES4> _TES4 = new NotifyingItemConvertWrapper<TES4>(
            defaultVal: new TES4(),
            incomingConverter: (change) =>
            {
                if (change.New == null)
                {
                    return TryGet<TES4>.Succeed(new TES4());
                }
                return TryGet<TES4>.Succeed(change.New);
            }
        );
        public INotifyingItem<TES4> TES4_Property => this._TES4;
        TES4 IOblivionModGetter.TES4 => this.TES4;
        public TES4 TES4 { get => _TES4.Item; set => _TES4.Item = value; }
        INotifyingItem<TES4> IOblivionMod.TES4_Property => this.TES4_Property;
        INotifyingItemGetter<TES4> IOblivionModGetter.TES4_Property => this.TES4_Property;
        #endregion
        #region GameSettings
        private readonly INotifyingItem<Group<GameSetting>> _GameSettings = new NotifyingItem<Group<GameSetting>>();
        public INotifyingItem<Group<GameSetting>> GameSettings_Property => this._GameSettings;
        Group<GameSetting> IOblivionModGetter.GameSettings => this.GameSettings;
        public Group<GameSetting> GameSettings { get => _GameSettings.Item; set => _GameSettings.Item = value; }
        INotifyingItem<Group<GameSetting>> IOblivionMod.GameSettings_Property => this.GameSettings_Property;
        INotifyingItemGetter<Group<GameSetting>> IOblivionModGetter.GameSettings_Property => this.GameSettings_Property;
        #endregion
        #region Globals
        private readonly INotifyingItem<Group<Global>> _Globals = new NotifyingItem<Group<Global>>();
        public INotifyingItem<Group<Global>> Globals_Property => this._Globals;
        Group<Global> IOblivionModGetter.Globals => this.Globals;
        public Group<Global> Globals { get => _Globals.Item; set => _Globals.Item = value; }
        INotifyingItem<Group<Global>> IOblivionMod.Globals_Property => this.Globals_Property;
        INotifyingItemGetter<Group<Global>> IOblivionModGetter.Globals_Property => this.Globals_Property;
        #endregion
        #region Classes
        private readonly INotifyingItem<Group<Class>> _Classes = new NotifyingItem<Group<Class>>();
        public INotifyingItem<Group<Class>> Classes_Property => this._Classes;
        Group<Class> IOblivionModGetter.Classes => this.Classes;
        public Group<Class> Classes { get => _Classes.Item; set => _Classes.Item = value; }
        INotifyingItem<Group<Class>> IOblivionMod.Classes_Property => this.Classes_Property;
        INotifyingItemGetter<Group<Class>> IOblivionModGetter.Classes_Property => this.Classes_Property;
        #endregion
        #region Factions
        private readonly INotifyingItem<Group<Faction>> _Factions = new NotifyingItem<Group<Faction>>();
        public INotifyingItem<Group<Faction>> Factions_Property => this._Factions;
        Group<Faction> IOblivionModGetter.Factions => this.Factions;
        public Group<Faction> Factions { get => _Factions.Item; set => _Factions.Item = value; }
        INotifyingItem<Group<Faction>> IOblivionMod.Factions_Property => this.Factions_Property;
        INotifyingItemGetter<Group<Faction>> IOblivionModGetter.Factions_Property => this.Factions_Property;
        #endregion
        #region Hairs
        private readonly INotifyingItem<Group<Hair>> _Hairs = new NotifyingItem<Group<Hair>>();
        public INotifyingItem<Group<Hair>> Hairs_Property => this._Hairs;
        Group<Hair> IOblivionModGetter.Hairs => this.Hairs;
        public Group<Hair> Hairs { get => _Hairs.Item; set => _Hairs.Item = value; }
        INotifyingItem<Group<Hair>> IOblivionMod.Hairs_Property => this.Hairs_Property;
        INotifyingItemGetter<Group<Hair>> IOblivionModGetter.Hairs_Property => this.Hairs_Property;
        #endregion
        #region Eyes
        private readonly INotifyingItem<Group<Eye>> _Eyes = new NotifyingItem<Group<Eye>>();
        public INotifyingItem<Group<Eye>> Eyes_Property => this._Eyes;
        Group<Eye> IOblivionModGetter.Eyes => this.Eyes;
        public Group<Eye> Eyes { get => _Eyes.Item; set => _Eyes.Item = value; }
        INotifyingItem<Group<Eye>> IOblivionMod.Eyes_Property => this.Eyes_Property;
        INotifyingItemGetter<Group<Eye>> IOblivionModGetter.Eyes_Property => this.Eyes_Property;
        #endregion
        #region Races
        private readonly INotifyingItem<Group<Race>> _Races = new NotifyingItem<Group<Race>>();
        public INotifyingItem<Group<Race>> Races_Property => this._Races;
        Group<Race> IOblivionModGetter.Races => this.Races;
        public Group<Race> Races { get => _Races.Item; set => _Races.Item = value; }
        INotifyingItem<Group<Race>> IOblivionMod.Races_Property => this.Races_Property;
        INotifyingItemGetter<Group<Race>> IOblivionModGetter.Races_Property => this.Races_Property;
        #endregion
        #region Sounds
        private readonly INotifyingItem<Group<Sound>> _Sounds = new NotifyingItem<Group<Sound>>();
        public INotifyingItem<Group<Sound>> Sounds_Property => this._Sounds;
        Group<Sound> IOblivionModGetter.Sounds => this.Sounds;
        public Group<Sound> Sounds { get => _Sounds.Item; set => _Sounds.Item = value; }
        INotifyingItem<Group<Sound>> IOblivionMod.Sounds_Property => this.Sounds_Property;
        INotifyingItemGetter<Group<Sound>> IOblivionModGetter.Sounds_Property => this.Sounds_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => OblivionModCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => OblivionModCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => OblivionModCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            OblivionModCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return OblivionModCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            return OblivionModCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            OblivionModCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public OblivionMod_Mask<bool> GetHasBeenSetMask()
        {
            return OblivionModCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is OblivionMod rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(OblivionMod rhs)
        {
            if (rhs == null) return false;
            if (TES4_Property.HasBeenSet != rhs.TES4_Property.HasBeenSet) return false;
            if (TES4_Property.HasBeenSet)
            {
                if (!object.Equals(TES4, rhs.TES4)) return false;
            }
            if (GameSettings_Property.HasBeenSet != rhs.GameSettings_Property.HasBeenSet) return false;
            if (GameSettings_Property.HasBeenSet)
            {
                if (!object.Equals(GameSettings, rhs.GameSettings)) return false;
            }
            if (Globals_Property.HasBeenSet != rhs.Globals_Property.HasBeenSet) return false;
            if (Globals_Property.HasBeenSet)
            {
                if (!object.Equals(Globals, rhs.Globals)) return false;
            }
            if (Classes_Property.HasBeenSet != rhs.Classes_Property.HasBeenSet) return false;
            if (Classes_Property.HasBeenSet)
            {
                if (!object.Equals(Classes, rhs.Classes)) return false;
            }
            if (Factions_Property.HasBeenSet != rhs.Factions_Property.HasBeenSet) return false;
            if (Factions_Property.HasBeenSet)
            {
                if (!object.Equals(Factions, rhs.Factions)) return false;
            }
            if (Hairs_Property.HasBeenSet != rhs.Hairs_Property.HasBeenSet) return false;
            if (Hairs_Property.HasBeenSet)
            {
                if (!object.Equals(Hairs, rhs.Hairs)) return false;
            }
            if (Eyes_Property.HasBeenSet != rhs.Eyes_Property.HasBeenSet) return false;
            if (Eyes_Property.HasBeenSet)
            {
                if (!object.Equals(Eyes, rhs.Eyes)) return false;
            }
            if (Races_Property.HasBeenSet != rhs.Races_Property.HasBeenSet) return false;
            if (Races_Property.HasBeenSet)
            {
                if (!object.Equals(Races, rhs.Races)) return false;
            }
            if (Sounds_Property.HasBeenSet != rhs.Sounds_Property.HasBeenSet) return false;
            if (Sounds_Property.HasBeenSet)
            {
                if (!object.Equals(Sounds, rhs.Sounds)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (TES4_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(TES4).CombineHashCode(ret);
            }
            if (GameSettings_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(GameSettings).CombineHashCode(ret);
            }
            if (Globals_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Globals).CombineHashCode(ret);
            }
            if (Classes_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Classes).CombineHashCode(ret);
            }
            if (Factions_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Factions).CombineHashCode(ret);
            }
            if (Hairs_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Hairs).CombineHashCode(ret);
            }
            if (Eyes_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Eyes).CombineHashCode(ret);
            }
            if (Races_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Races).CombineHashCode(ret);
            }
            if (Sounds_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Sounds).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static OblivionMod Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static OblivionMod Create_XML(
            XElement root,
            out OblivionMod_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static OblivionMod Create_XML(
            XElement root,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (OblivionMod Object, OblivionMod_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            OblivionMod_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new OblivionMod_ErrorMask()) : default(Func<OblivionMod_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static OblivionMod Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static OblivionMod Create_XML(
            string path,
            out OblivionMod_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static OblivionMod Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static OblivionMod Create_XML(
            Stream stream,
            out OblivionMod_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<OblivionMod, OblivionMod_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<OblivionMod, OblivionMod_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out OblivionMod_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (OblivionMod_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out OblivionMod_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            OblivionModCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static OblivionMod Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            var ret = new OblivionMod();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            OblivionMod item,
            XElement root,
            string name,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "TES4":
                    {
                        MaskItem<Exception, TES4_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<TES4, TES4_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._TES4.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.TES4,
                            subMask);
                    }
                    break;
                case "GameSettings":
                    {
                        MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>> subMask;
                        var tryGet = LoquiXmlTranslation<Group<GameSetting>, Group_ErrorMask<GameSetting_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._GameSettings.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.GameSettings,
                            subMask);
                    }
                    break;
                case "Globals":
                    {
                        MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>> subMask;
                        var tryGet = LoquiXmlTranslation<Group<Global>, Group_ErrorMask<Global_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Globals.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.Globals,
                            subMask);
                    }
                    break;
                case "Classes":
                    {
                        MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>> subMask;
                        var tryGet = LoquiXmlTranslation<Group<Class>, Group_ErrorMask<Class_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Classes.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.Classes,
                            subMask);
                    }
                    break;
                case "Factions":
                    {
                        MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>> subMask;
                        var tryGet = LoquiXmlTranslation<Group<Faction>, Group_ErrorMask<Faction_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Factions.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.Factions,
                            subMask);
                    }
                    break;
                case "Hairs":
                    {
                        MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>> subMask;
                        var tryGet = LoquiXmlTranslation<Group<Hair>, Group_ErrorMask<Hair_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Hairs.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.Hairs,
                            subMask);
                    }
                    break;
                case "Eyes":
                    {
                        MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>> subMask;
                        var tryGet = LoquiXmlTranslation<Group<Eye>, Group_ErrorMask<Eye_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Eyes.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.Eyes,
                            subMask);
                    }
                    break;
                case "Races":
                    {
                        MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>> subMask;
                        var tryGet = LoquiXmlTranslation<Group<Race>, Group_ErrorMask<Race_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Races.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.Races,
                            subMask);
                    }
                    break;
                case "Sounds":
                    {
                        MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>> subMask;
                        var tryGet = LoquiXmlTranslation<Group<Sound>, Group_ErrorMask<Sound_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Sounds.SetIfSucceeded(tryGet);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.Sounds,
                            subMask);
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static OblivionMod Create_Binary(MutagenFrame frame)
        {
            return Create_Binary(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static OblivionMod Create_Binary(
            MutagenFrame frame,
            out OblivionMod_ErrorMask errorMask)
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static OblivionMod Create_Binary(
            MutagenFrame frame,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask)
        {
            var ret = Create_Binary(
                frame: frame,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (OblivionMod Object, OblivionMod_ErrorMask ErrorMask) Create_Binary(
            MutagenFrame frame,
            bool doMasks)
        {
            OblivionMod_ErrorMask errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new OblivionMod_ErrorMask()) : default(Func<OblivionMod_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static OblivionMod Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static OblivionMod Create_Binary(
            string path,
            out OblivionMod_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static OblivionMod Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static OblivionMod Create_Binary(
            Stream stream,
            out OblivionMod_ErrorMask errorMask)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<OblivionMod, OblivionMod_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary(
            MutagenFrame frame,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<OblivionMod, OblivionMod_ErrorMask>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            string path,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out OblivionMod_ErrorMask errorMask)
        {
            errorMask = (OblivionMod_ErrorMask)this.Write_Binary_Internal(
                writer: writer,
                doMasks: true);
        }

        public virtual void Write_Binary(
            string path,
            out OblivionMod_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out OblivionMod_ErrorMask errorMask)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal(
            MutagenWriter writer,
            bool doMasks)
        {
            OblivionModCommon.Write_Binary(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static OblivionMod Create_Binary_Internal(
            MutagenFrame frame,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            var ret = new OblivionMod();
            try
            {
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        doMasks: doMasks,
                        errorMask: errorMask);
                    while (!frame.Complete)
                    {
                        if (!Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            doMasks: doMasks,
                            errorMask: errorMask)) break;
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs(
            OblivionMod item,
            MutagenFrame frame,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask)
        {
        }

        protected static bool Fill_Binary_RecordTypes(
            OblivionMod item,
            MutagenFrame frame,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            var nextRecordType = HeaderTranslation.GetNextType(
                frame: frame,
                contentLength: out var contentLength);
            switch (nextRecordType.Type)
            {
                case "TES4":
                    item._TES4.SetIfSucceeded(LoquiBinaryTranslation<TES4, TES4_ErrorMask>.Instance.Parse(
                        frame: frame,
                        doMasks: doMasks,
                        fieldIndex: (int)OblivionMod_FieldIndex.TES4,
                        errorMask: errorMask));
                    break;
                case "GMST":
                    item._GameSettings.SetIfSucceeded(LoquiBinaryTranslation<Group<GameSetting>, Group_ErrorMask<GameSetting_ErrorMask>>.Instance.Parse(
                        frame: frame,
                        doMasks: doMasks,
                        fieldIndex: (int)OblivionMod_FieldIndex.GameSettings,
                        errorMask: errorMask));
                    break;
                case "GLOB":
                    item._Globals.SetIfSucceeded(LoquiBinaryTranslation<Group<Global>, Group_ErrorMask<Global_ErrorMask>>.Instance.Parse(
                        frame: frame,
                        doMasks: doMasks,
                        fieldIndex: (int)OblivionMod_FieldIndex.Globals,
                        errorMask: errorMask));
                    break;
                case "CLAS":
                    item._Classes.SetIfSucceeded(LoquiBinaryTranslation<Group<Class>, Group_ErrorMask<Class_ErrorMask>>.Instance.Parse(
                        frame: frame,
                        doMasks: doMasks,
                        fieldIndex: (int)OblivionMod_FieldIndex.Classes,
                        errorMask: errorMask));
                    break;
                case "FACT":
                    item._Factions.SetIfSucceeded(LoquiBinaryTranslation<Group<Faction>, Group_ErrorMask<Faction_ErrorMask>>.Instance.Parse(
                        frame: frame,
                        doMasks: doMasks,
                        fieldIndex: (int)OblivionMod_FieldIndex.Factions,
                        errorMask: errorMask));
                    break;
                case "HAIR":
                    item._Hairs.SetIfSucceeded(LoquiBinaryTranslation<Group<Hair>, Group_ErrorMask<Hair_ErrorMask>>.Instance.Parse(
                        frame: frame,
                        doMasks: doMasks,
                        fieldIndex: (int)OblivionMod_FieldIndex.Hairs,
                        errorMask: errorMask));
                    break;
                case "EYES":
                    item._Eyes.SetIfSucceeded(LoquiBinaryTranslation<Group<Eye>, Group_ErrorMask<Eye_ErrorMask>>.Instance.Parse(
                        frame: frame,
                        doMasks: doMasks,
                        fieldIndex: (int)OblivionMod_FieldIndex.Eyes,
                        errorMask: errorMask));
                    break;
                case "RACE":
                    item._Races.SetIfSucceeded(LoquiBinaryTranslation<Group<Race>, Group_ErrorMask<Race_ErrorMask>>.Instance.Parse(
                        frame: frame,
                        doMasks: doMasks,
                        fieldIndex: (int)OblivionMod_FieldIndex.Races,
                        errorMask: errorMask));
                    break;
                case "SOUN":
                    item._Sounds.SetIfSucceeded(LoquiBinaryTranslation<Group<Sound>, Group_ErrorMask<Sound_ErrorMask>>.Instance.Parse(
                        frame: frame,
                        doMasks: doMasks,
                        fieldIndex: (int)OblivionMod_FieldIndex.Sounds,
                        errorMask: errorMask));
                    break;
                default:
                    errorMask().Warnings.Add($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength;
                    break;
            }
            return true;
        }

        #endregion

        public OblivionMod Copy(
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
        {
            return OblivionMod.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static OblivionMod Copy(
            IOblivionMod item,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
        {
            OblivionMod ret;
            if (item.GetType().Equals(typeof(OblivionMod)))
            {
                ret = new OblivionMod();
            }
            else
            {
                ret = (OblivionMod)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
            where CopyType : class, IOblivionMod
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(OblivionMod)))
            {
                ret = new OblivionMod() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static OblivionMod Copy_ToLoqui(
            IOblivionModGetter item,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
        {
            var ret = new OblivionMod();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    this._TES4.Set(
                        (TES4)obj,
                        cmds);
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    this._GameSettings.Set(
                        (Group<GameSetting>)obj,
                        cmds);
                    break;
                case OblivionMod_FieldIndex.Globals:
                    this._Globals.Set(
                        (Group<Global>)obj,
                        cmds);
                    break;
                case OblivionMod_FieldIndex.Classes:
                    this._Classes.Set(
                        (Group<Class>)obj,
                        cmds);
                    break;
                case OblivionMod_FieldIndex.Factions:
                    this._Factions.Set(
                        (Group<Faction>)obj,
                        cmds);
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    this._Hairs.Set(
                        (Group<Hair>)obj,
                        cmds);
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    this._Eyes.Set(
                        (Group<Eye>)obj,
                        cmds);
                    break;
                case OblivionMod_FieldIndex.Races:
                    this._Races.Set(
                        (Group<Race>)obj,
                        cmds);
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    this._Sounds.Set(
                        (Group<Sound>)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            OblivionModCommon.Clear(this, cmds);
        }


        public static OblivionMod Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new OblivionMod();
            foreach (var pair in fields)
            {
                CopyInInternal_OblivionMod(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_OblivionMod(OblivionMod obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out OblivionMod_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    obj._TES4.Set(
                        (TES4)pair.Value,
                        null);
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    obj._GameSettings.Set(
                        (Group<GameSetting>)pair.Value,
                        null);
                    break;
                case OblivionMod_FieldIndex.Globals:
                    obj._Globals.Set(
                        (Group<Global>)pair.Value,
                        null);
                    break;
                case OblivionMod_FieldIndex.Classes:
                    obj._Classes.Set(
                        (Group<Class>)pair.Value,
                        null);
                    break;
                case OblivionMod_FieldIndex.Factions:
                    obj._Factions.Set(
                        (Group<Faction>)pair.Value,
                        null);
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    obj._Hairs.Set(
                        (Group<Hair>)pair.Value,
                        null);
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    obj._Eyes.Set(
                        (Group<Eye>)pair.Value,
                        null);
                    break;
                case OblivionMod_FieldIndex.Races:
                    obj._Races.Set(
                        (Group<Race>)pair.Value,
                        null);
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    obj._Sounds.Set(
                        (Group<Sound>)pair.Value,
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, OblivionMod obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IOblivionMod : IOblivionModGetter, ILoquiClass<IOblivionMod, IOblivionModGetter>, ILoquiClass<OblivionMod, IOblivionModGetter>
    {
        new TES4 TES4 { get; set; }
        new INotifyingItem<TES4> TES4_Property { get; }

        new Group<GameSetting> GameSettings { get; set; }
        new INotifyingItem<Group<GameSetting>> GameSettings_Property { get; }

        new Group<Global> Globals { get; set; }
        new INotifyingItem<Group<Global>> Globals_Property { get; }

        new Group<Class> Classes { get; set; }
        new INotifyingItem<Group<Class>> Classes_Property { get; }

        new Group<Faction> Factions { get; set; }
        new INotifyingItem<Group<Faction>> Factions_Property { get; }

        new Group<Hair> Hairs { get; set; }
        new INotifyingItem<Group<Hair>> Hairs_Property { get; }

        new Group<Eye> Eyes { get; set; }
        new INotifyingItem<Group<Eye>> Eyes_Property { get; }

        new Group<Race> Races { get; set; }
        new INotifyingItem<Group<Race>> Races_Property { get; }

        new Group<Sound> Sounds { get; set; }
        new INotifyingItem<Group<Sound>> Sounds_Property { get; }

    }

    public interface IOblivionModGetter : ILoquiObject
    {
        #region TES4
        TES4 TES4 { get; }
        INotifyingItemGetter<TES4> TES4_Property { get; }

        #endregion
        #region GameSettings
        Group<GameSetting> GameSettings { get; }
        INotifyingItemGetter<Group<GameSetting>> GameSettings_Property { get; }

        #endregion
        #region Globals
        Group<Global> Globals { get; }
        INotifyingItemGetter<Group<Global>> Globals_Property { get; }

        #endregion
        #region Classes
        Group<Class> Classes { get; }
        INotifyingItemGetter<Group<Class>> Classes_Property { get; }

        #endregion
        #region Factions
        Group<Faction> Factions { get; }
        INotifyingItemGetter<Group<Faction>> Factions_Property { get; }

        #endregion
        #region Hairs
        Group<Hair> Hairs { get; }
        INotifyingItemGetter<Group<Hair>> Hairs_Property { get; }

        #endregion
        #region Eyes
        Group<Eye> Eyes { get; }
        INotifyingItemGetter<Group<Eye>> Eyes_Property { get; }

        #endregion
        #region Races
        Group<Race> Races { get; }
        INotifyingItemGetter<Group<Race>> Races_Property { get; }

        #endregion
        #region Sounds
        Group<Sound> Sounds { get; }
        INotifyingItemGetter<Group<Sound>> Sounds_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum OblivionMod_FieldIndex
    {
        TES4 = 0,
        GameSettings = 1,
        Globals = 2,
        Classes = 3,
        Factions = 4,
        Hairs = 5,
        Eyes = 6,
        Races = 7,
        Sounds = 8,
    }
    #endregion

    #region Registration
    public class OblivionMod_Registration : ILoquiRegistration
    {
        public static readonly OblivionMod_Registration Instance = new OblivionMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "b6f626df-b164-466b-960a-1639d88f66bc";

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(OblivionMod_Mask<>);

        public static readonly Type ErrorMaskType = typeof(OblivionMod_ErrorMask);

        public static readonly Type ClassType = typeof(OblivionMod);

        public static readonly Type GetterType = typeof(IOblivionModGetter);

        public static readonly Type SetterType = typeof(IOblivionMod);

        public static readonly Type CommonType = typeof(OblivionModCommon);

        public const string FullName = "Mutagen.OblivionMod";

        public const string Name = "OblivionMod";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TES4":
                    return (ushort)OblivionMod_FieldIndex.TES4;
                case "GAMESETTINGS":
                    return (ushort)OblivionMod_FieldIndex.GameSettings;
                case "GLOBALS":
                    return (ushort)OblivionMod_FieldIndex.Globals;
                case "CLASSES":
                    return (ushort)OblivionMod_FieldIndex.Classes;
                case "FACTIONS":
                    return (ushort)OblivionMod_FieldIndex.Factions;
                case "HAIRS":
                    return (ushort)OblivionMod_FieldIndex.Hairs;
                case "EYES":
                    return (ushort)OblivionMod_FieldIndex.Eyes;
                case "RACES":
                    return (ushort)OblivionMod_FieldIndex.Races;
                case "SOUNDS":
                    return (ushort)OblivionMod_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return "TES4";
                case OblivionMod_FieldIndex.GameSettings:
                    return "GameSettings";
                case OblivionMod_FieldIndex.Globals:
                    return "Globals";
                case OblivionMod_FieldIndex.Classes:
                    return "Classes";
                case OblivionMod_FieldIndex.Factions:
                    return "Factions";
                case OblivionMod_FieldIndex.Hairs:
                    return "Hairs";
                case OblivionMod_FieldIndex.Eyes:
                    return "Eyes";
                case OblivionMod_FieldIndex.Races:
                    return "Races";
                case OblivionMod_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                case OblivionMod_FieldIndex.GameSettings:
                case OblivionMod_FieldIndex.Globals:
                case OblivionMod_FieldIndex.Classes:
                case OblivionMod_FieldIndex.Factions:
                case OblivionMod_FieldIndex.Hairs:
                case OblivionMod_FieldIndex.Eyes:
                case OblivionMod_FieldIndex.Races:
                case OblivionMod_FieldIndex.Sounds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return typeof(TES4);
                case OblivionMod_FieldIndex.GameSettings:
                    return typeof(Group<GameSetting>);
                case OblivionMod_FieldIndex.Globals:
                    return typeof(Group<Global>);
                case OblivionMod_FieldIndex.Classes:
                    return typeof(Group<Class>);
                case OblivionMod_FieldIndex.Factions:
                    return typeof(Group<Faction>);
                case OblivionMod_FieldIndex.Hairs:
                    return typeof(Group<Hair>);
                case OblivionMod_FieldIndex.Eyes:
                    return typeof(Group<Eye>);
                case OblivionMod_FieldIndex.Races:
                    return typeof(Group<Race>);
                case OblivionMod_FieldIndex.Sounds:
                    return typeof(Group<Sound>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType TES4_HEADER = new RecordType("TES4");
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType HAIR_HEADER = new RecordType("HAIR");
        public static readonly RecordType EYES_HEADER = new RecordType("EYES");
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType SOUN_HEADER = new RecordType("SOUN");
        public const int NumStructFields = 0;
        public const int NumTypedFields = 9;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class OblivionModCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IOblivionMod item,
            IOblivionModGetter rhs,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            OblivionModCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IOblivionMod item,
            IOblivionModGetter rhs,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            OblivionModCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IOblivionMod item,
            IOblivionModGetter rhs,
            IOblivionModGetter def,
            bool doErrorMask,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            OblivionMod_ErrorMask retErrorMask = null;
            Func<OblivionMod_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new OblivionMod_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IOblivionMod item,
            IOblivionModGetter rhs,
            IOblivionModGetter def,
            bool doErrorMask,
            Func<OblivionMod_ErrorMask> errorMask,
            OblivionMod_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.TES4.Overall != CopyOption.Skip)
            {
                try
                {
                    item.TES4_Property.SetToWithDefault(
                        rhs.TES4_Property,
                        def?.TES4_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.TES4?.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    TES4Common.CopyFieldsFrom(
                                        item: item.TES4,
                                        rhs: rhs.TES4,
                                        def: def?.TES4,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<TES4_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.TES4.Specific == null)
                                            {
                                                baseMask.TES4 = new MaskItem<Exception, TES4_ErrorMask>(null, new TES4_ErrorMask());
                                            }
                                            return baseMask.TES4.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.TES4.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(TES4);
                                    return TES4.Copy(
                                        r,
                                        copyMask?.TES4?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.TES4?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.TES4, ex);
                }
            }
            if (copyMask?.GameSettings.Overall != CopyOption.Skip)
            {
                try
                {
                    item.GameSettings_Property.SetToWithDefault(
                        rhs.GameSettings_Property,
                        def?.GameSettings_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.GameSettings?.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    GroupCommon.CopyFieldsFrom(
                                        item: item.GameSettings,
                                        rhs: rhs.GameSettings,
                                        def: def?.GameSettings,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<Group_ErrorMask<GameSetting_ErrorMask>>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.GameSettings.Specific == null)
                                            {
                                                baseMask.GameSettings = new MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>(null, new Group_ErrorMask<GameSetting_ErrorMask>());
                                            }
                                            return baseMask.GameSettings.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.GameSettings.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Group<GameSetting>);
                                    return Group<GameSetting>.Copy(
                                        r,
                                        copyMask?.GameSettings?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.GameSettings?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.GameSettings, ex);
                }
            }
            if (copyMask?.Globals.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Globals_Property.SetToWithDefault(
                        rhs.Globals_Property,
                        def?.Globals_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Globals?.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    GroupCommon.CopyFieldsFrom(
                                        item: item.Globals,
                                        rhs: rhs.Globals,
                                        def: def?.Globals,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<Group_ErrorMask<Global_ErrorMask>>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Globals.Specific == null)
                                            {
                                                baseMask.Globals = new MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>(null, new Group_ErrorMask<Global_ErrorMask>());
                                            }
                                            return baseMask.Globals.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Globals.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Group<Global>);
                                    return Group<Global>.Copy(
                                        r,
                                        copyMask?.Globals?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Globals?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Globals, ex);
                }
            }
            if (copyMask?.Classes.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Classes_Property.SetToWithDefault(
                        rhs.Classes_Property,
                        def?.Classes_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Classes?.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    GroupCommon.CopyFieldsFrom(
                                        item: item.Classes,
                                        rhs: rhs.Classes,
                                        def: def?.Classes,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<Group_ErrorMask<Class_ErrorMask>>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Classes.Specific == null)
                                            {
                                                baseMask.Classes = new MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>(null, new Group_ErrorMask<Class_ErrorMask>());
                                            }
                                            return baseMask.Classes.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Classes.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Group<Class>);
                                    return Group<Class>.Copy(
                                        r,
                                        copyMask?.Classes?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Classes?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Classes, ex);
                }
            }
            if (copyMask?.Factions.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Factions_Property.SetToWithDefault(
                        rhs.Factions_Property,
                        def?.Factions_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Factions?.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    GroupCommon.CopyFieldsFrom(
                                        item: item.Factions,
                                        rhs: rhs.Factions,
                                        def: def?.Factions,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<Group_ErrorMask<Faction_ErrorMask>>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Factions.Specific == null)
                                            {
                                                baseMask.Factions = new MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>(null, new Group_ErrorMask<Faction_ErrorMask>());
                                            }
                                            return baseMask.Factions.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Factions.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Group<Faction>);
                                    return Group<Faction>.Copy(
                                        r,
                                        copyMask?.Factions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Factions?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Factions, ex);
                }
            }
            if (copyMask?.Hairs.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Hairs_Property.SetToWithDefault(
                        rhs.Hairs_Property,
                        def?.Hairs_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Hairs?.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    GroupCommon.CopyFieldsFrom(
                                        item: item.Hairs,
                                        rhs: rhs.Hairs,
                                        def: def?.Hairs,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<Group_ErrorMask<Hair_ErrorMask>>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Hairs.Specific == null)
                                            {
                                                baseMask.Hairs = new MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>(null, new Group_ErrorMask<Hair_ErrorMask>());
                                            }
                                            return baseMask.Hairs.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Hairs.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Group<Hair>);
                                    return Group<Hair>.Copy(
                                        r,
                                        copyMask?.Hairs?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Hairs?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Hairs, ex);
                }
            }
            if (copyMask?.Eyes.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Eyes_Property.SetToWithDefault(
                        rhs.Eyes_Property,
                        def?.Eyes_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Eyes?.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    GroupCommon.CopyFieldsFrom(
                                        item: item.Eyes,
                                        rhs: rhs.Eyes,
                                        def: def?.Eyes,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<Group_ErrorMask<Eye_ErrorMask>>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Eyes.Specific == null)
                                            {
                                                baseMask.Eyes = new MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>(null, new Group_ErrorMask<Eye_ErrorMask>());
                                            }
                                            return baseMask.Eyes.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Eyes.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Group<Eye>);
                                    return Group<Eye>.Copy(
                                        r,
                                        copyMask?.Eyes?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Eyes?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Eyes, ex);
                }
            }
            if (copyMask?.Races.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Races_Property.SetToWithDefault(
                        rhs.Races_Property,
                        def?.Races_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Races?.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    GroupCommon.CopyFieldsFrom(
                                        item: item.Races,
                                        rhs: rhs.Races,
                                        def: def?.Races,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<Group_ErrorMask<Race_ErrorMask>>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Races.Specific == null)
                                            {
                                                baseMask.Races = new MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>(null, new Group_ErrorMask<Race_ErrorMask>());
                                            }
                                            return baseMask.Races.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Races.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Group<Race>);
                                    return Group<Race>.Copy(
                                        r,
                                        copyMask?.Races?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Races?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Races, ex);
                }
            }
            if (copyMask?.Sounds.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Sounds_Property.SetToWithDefault(
                        rhs.Sounds_Property,
                        def?.Sounds_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Sounds?.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    GroupCommon.CopyFieldsFrom(
                                        item: item.Sounds,
                                        rhs: rhs.Sounds,
                                        def: def?.Sounds,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<Group_ErrorMask<Sound_ErrorMask>>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Sounds.Specific == null)
                                            {
                                                baseMask.Sounds = new MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>(null, new Group_ErrorMask<Sound_ErrorMask>());
                                            }
                                            return baseMask.Sounds.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Sounds.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Group<Sound>);
                                    return Group<Sound>.Copy(
                                        r,
                                        copyMask?.Sounds?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Sounds?.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((int)OblivionMod_FieldIndex.Sounds, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IOblivionMod obj,
            NotifyingFireParameters? cmds = null)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    obj.TES4_Property.HasBeenSet = on;
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    obj.GameSettings_Property.HasBeenSet = on;
                    break;
                case OblivionMod_FieldIndex.Globals:
                    obj.Globals_Property.HasBeenSet = on;
                    break;
                case OblivionMod_FieldIndex.Classes:
                    obj.Classes_Property.HasBeenSet = on;
                    break;
                case OblivionMod_FieldIndex.Factions:
                    obj.Factions_Property.HasBeenSet = on;
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    obj.Hairs_Property.HasBeenSet = on;
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    obj.Eyes_Property.HasBeenSet = on;
                    break;
                case OblivionMod_FieldIndex.Races:
                    obj.Races_Property.HasBeenSet = on;
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    obj.Sounds_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IOblivionMod obj,
            NotifyingUnsetParameters? cmds = null)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    obj.TES4_Property.Unset(cmds);
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    obj.GameSettings_Property.Unset(cmds);
                    break;
                case OblivionMod_FieldIndex.Globals:
                    obj.Globals_Property.Unset(cmds);
                    break;
                case OblivionMod_FieldIndex.Classes:
                    obj.Classes_Property.Unset(cmds);
                    break;
                case OblivionMod_FieldIndex.Factions:
                    obj.Factions_Property.Unset(cmds);
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    obj.Hairs_Property.Unset(cmds);
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    obj.Eyes_Property.Unset(cmds);
                    break;
                case OblivionMod_FieldIndex.Races:
                    obj.Races_Property.Unset(cmds);
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    obj.Sounds_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IOblivionMod obj)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return obj.TES4_Property.HasBeenSet;
                case OblivionMod_FieldIndex.GameSettings:
                    return obj.GameSettings_Property.HasBeenSet;
                case OblivionMod_FieldIndex.Globals:
                    return obj.Globals_Property.HasBeenSet;
                case OblivionMod_FieldIndex.Classes:
                    return obj.Classes_Property.HasBeenSet;
                case OblivionMod_FieldIndex.Factions:
                    return obj.Factions_Property.HasBeenSet;
                case OblivionMod_FieldIndex.Hairs:
                    return obj.Hairs_Property.HasBeenSet;
                case OblivionMod_FieldIndex.Eyes:
                    return obj.Eyes_Property.HasBeenSet;
                case OblivionMod_FieldIndex.Races:
                    return obj.Races_Property.HasBeenSet;
                case OblivionMod_FieldIndex.Sounds:
                    return obj.Sounds_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IOblivionModGetter obj)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return obj.TES4;
                case OblivionMod_FieldIndex.GameSettings:
                    return obj.GameSettings;
                case OblivionMod_FieldIndex.Globals:
                    return obj.Globals;
                case OblivionMod_FieldIndex.Classes:
                    return obj.Classes;
                case OblivionMod_FieldIndex.Factions:
                    return obj.Factions;
                case OblivionMod_FieldIndex.Hairs:
                    return obj.Hairs;
                case OblivionMod_FieldIndex.Eyes:
                    return obj.Eyes;
                case OblivionMod_FieldIndex.Races:
                    return obj.Races;
                case OblivionMod_FieldIndex.Sounds:
                    return obj.Sounds;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IOblivionMod item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.TES4_Property.Unset(cmds.ToUnsetParams());
            item.GameSettings_Property.Unset(cmds.ToUnsetParams());
            item.Globals_Property.Unset(cmds.ToUnsetParams());
            item.Classes_Property.Unset(cmds.ToUnsetParams());
            item.Factions_Property.Unset(cmds.ToUnsetParams());
            item.Hairs_Property.Unset(cmds.ToUnsetParams());
            item.Eyes_Property.Unset(cmds.ToUnsetParams());
            item.Races_Property.Unset(cmds.ToUnsetParams());
            item.Sounds_Property.Unset(cmds.ToUnsetParams());
        }

        public static OblivionMod_Mask<bool> GetEqualsMask(
            this IOblivionModGetter item,
            IOblivionModGetter rhs)
        {
            var ret = new OblivionMod_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IOblivionModGetter item,
            IOblivionModGetter rhs,
            OblivionMod_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.TES4 = item.TES4_Property.LoquiEqualsHelper(rhs.TES4_Property, (loqLhs, loqRhs) => TES4Common.GetEqualsMask(loqLhs, loqRhs));
            ret.GameSettings = item.GameSettings_Property.LoquiEqualsHelper(rhs.GameSettings_Property, (loqLhs, loqRhs) => GroupCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Globals = item.Globals_Property.LoquiEqualsHelper(rhs.Globals_Property, (loqLhs, loqRhs) => GroupCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Classes = item.Classes_Property.LoquiEqualsHelper(rhs.Classes_Property, (loqLhs, loqRhs) => GroupCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Factions = item.Factions_Property.LoquiEqualsHelper(rhs.Factions_Property, (loqLhs, loqRhs) => GroupCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Hairs = item.Hairs_Property.LoquiEqualsHelper(rhs.Hairs_Property, (loqLhs, loqRhs) => GroupCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Eyes = item.Eyes_Property.LoquiEqualsHelper(rhs.Eyes_Property, (loqLhs, loqRhs) => GroupCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Races = item.Races_Property.LoquiEqualsHelper(rhs.Races_Property, (loqLhs, loqRhs) => GroupCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Sounds = item.Sounds_Property.LoquiEqualsHelper(rhs.Sounds_Property, (loqLhs, loqRhs) => GroupCommon.GetEqualsMask(loqLhs, loqRhs));
        }

        public static string ToString(
            this IOblivionModGetter item,
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IOblivionModGetter item,
            FileGeneration fg,
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(OblivionMod)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(OblivionMod)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TES4?.Overall ?? true)
                {
                    item.TES4?.ToString(fg, "TES4");
                }
                if (printMask?.GameSettings?.Overall ?? true)
                {
                    item.GameSettings?.ToString(fg, "GameSettings");
                }
                if (printMask?.Globals?.Overall ?? true)
                {
                    item.Globals?.ToString(fg, "Globals");
                }
                if (printMask?.Classes?.Overall ?? true)
                {
                    item.Classes?.ToString(fg, "Classes");
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    item.Factions?.ToString(fg, "Factions");
                }
                if (printMask?.Hairs?.Overall ?? true)
                {
                    item.Hairs?.ToString(fg, "Hairs");
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    item.Eyes?.ToString(fg, "Eyes");
                }
                if (printMask?.Races?.Overall ?? true)
                {
                    item.Races?.ToString(fg, "Races");
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    item.Sounds?.ToString(fg, "Sounds");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IOblivionModGetter item,
            OblivionMod_Mask<bool?> checkMask)
        {
            if (checkMask.TES4.Overall.HasValue && checkMask.TES4.Overall.Value != item.TES4_Property.HasBeenSet) return false;
            if (checkMask.TES4.Specific != null && (item.TES4_Property.Item == null || !item.TES4_Property.Item.HasBeenSet(checkMask.TES4.Specific))) return false;
            if (checkMask.GameSettings.Overall.HasValue && checkMask.GameSettings.Overall.Value != item.GameSettings_Property.HasBeenSet) return false;
            if (checkMask.GameSettings.Specific != null && (item.GameSettings_Property.Item == null || !item.GameSettings_Property.Item.HasBeenSet(checkMask.GameSettings.Specific))) return false;
            if (checkMask.Globals.Overall.HasValue && checkMask.Globals.Overall.Value != item.Globals_Property.HasBeenSet) return false;
            if (checkMask.Globals.Specific != null && (item.Globals_Property.Item == null || !item.Globals_Property.Item.HasBeenSet(checkMask.Globals.Specific))) return false;
            if (checkMask.Classes.Overall.HasValue && checkMask.Classes.Overall.Value != item.Classes_Property.HasBeenSet) return false;
            if (checkMask.Classes.Specific != null && (item.Classes_Property.Item == null || !item.Classes_Property.Item.HasBeenSet(checkMask.Classes.Specific))) return false;
            if (checkMask.Factions.Overall.HasValue && checkMask.Factions.Overall.Value != item.Factions_Property.HasBeenSet) return false;
            if (checkMask.Factions.Specific != null && (item.Factions_Property.Item == null || !item.Factions_Property.Item.HasBeenSet(checkMask.Factions.Specific))) return false;
            if (checkMask.Hairs.Overall.HasValue && checkMask.Hairs.Overall.Value != item.Hairs_Property.HasBeenSet) return false;
            if (checkMask.Hairs.Specific != null && (item.Hairs_Property.Item == null || !item.Hairs_Property.Item.HasBeenSet(checkMask.Hairs.Specific))) return false;
            if (checkMask.Eyes.Overall.HasValue && checkMask.Eyes.Overall.Value != item.Eyes_Property.HasBeenSet) return false;
            if (checkMask.Eyes.Specific != null && (item.Eyes_Property.Item == null || !item.Eyes_Property.Item.HasBeenSet(checkMask.Eyes.Specific))) return false;
            if (checkMask.Races.Overall.HasValue && checkMask.Races.Overall.Value != item.Races_Property.HasBeenSet) return false;
            if (checkMask.Races.Specific != null && (item.Races_Property.Item == null || !item.Races_Property.Item.HasBeenSet(checkMask.Races.Specific))) return false;
            if (checkMask.Sounds.Overall.HasValue && checkMask.Sounds.Overall.Value != item.Sounds_Property.HasBeenSet) return false;
            if (checkMask.Sounds.Specific != null && (item.Sounds_Property.Item == null || !item.Sounds_Property.Item.HasBeenSet(checkMask.Sounds.Specific))) return false;
            return true;
        }

        public static OblivionMod_Mask<bool> GetHasBeenSetMask(IOblivionModGetter item)
        {
            var ret = new OblivionMod_Mask<bool>();
            ret.TES4 = new MaskItem<bool, TES4_Mask<bool>>(item.TES4_Property.HasBeenSet, TES4Common.GetHasBeenSetMask(item.TES4_Property.Item));
            ret.GameSettings = new MaskItem<bool, Group_Mask<bool>>(item.GameSettings_Property.HasBeenSet, GroupCommon.GetHasBeenSetMask(item.GameSettings_Property.Item));
            ret.Globals = new MaskItem<bool, Group_Mask<bool>>(item.Globals_Property.HasBeenSet, GroupCommon.GetHasBeenSetMask(item.Globals_Property.Item));
            ret.Classes = new MaskItem<bool, Group_Mask<bool>>(item.Classes_Property.HasBeenSet, GroupCommon.GetHasBeenSetMask(item.Classes_Property.Item));
            ret.Factions = new MaskItem<bool, Group_Mask<bool>>(item.Factions_Property.HasBeenSet, GroupCommon.GetHasBeenSetMask(item.Factions_Property.Item));
            ret.Hairs = new MaskItem<bool, Group_Mask<bool>>(item.Hairs_Property.HasBeenSet, GroupCommon.GetHasBeenSetMask(item.Hairs_Property.Item));
            ret.Eyes = new MaskItem<bool, Group_Mask<bool>>(item.Eyes_Property.HasBeenSet, GroupCommon.GetHasBeenSetMask(item.Eyes_Property.Item));
            ret.Races = new MaskItem<bool, Group_Mask<bool>>(item.Races_Property.HasBeenSet, GroupCommon.GetHasBeenSetMask(item.Races_Property.Item));
            ret.Sounds = new MaskItem<bool, Group_Mask<bool>>(item.Sounds_Property.HasBeenSet, GroupCommon.GetHasBeenSetMask(item.Sounds_Property.Item));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IOblivionModGetter item,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask,
            string name = null)
        {
            OblivionMod_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new OblivionMod_ErrorMask()) : default(Func<OblivionMod_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IOblivionModGetter item,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.OblivionMod"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.OblivionMod");
                    }
                    if (item.TES4_Property.HasBeenSet)
                    {
                        MaskItem<Exception, TES4_ErrorMask> subMask;
                        LoquiXmlTranslation<TES4, TES4_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.TES4,
                            name: nameof(item.TES4),
                            doMasks: doMasks,
                            mask: out TES4_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, TES4_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.TES4,
                            subMask);
                    }
                    if (item.GameSettings_Property.HasBeenSet)
                    {
                        MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>> subMask;
                        LoquiXmlTranslation<Group<GameSetting>, Group_ErrorMask<GameSetting_ErrorMask>>.Instance.Write(
                            writer: writer,
                            item: item.GameSettings,
                            name: nameof(item.GameSettings),
                            doMasks: doMasks,
                            mask: out Group_ErrorMask<GameSetting_ErrorMask> loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.GameSettings,
                            subMask);
                    }
                    if (item.Globals_Property.HasBeenSet)
                    {
                        MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>> subMask;
                        LoquiXmlTranslation<Group<Global>, Group_ErrorMask<Global_ErrorMask>>.Instance.Write(
                            writer: writer,
                            item: item.Globals,
                            name: nameof(item.Globals),
                            doMasks: doMasks,
                            mask: out Group_ErrorMask<Global_ErrorMask> loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.Globals,
                            subMask);
                    }
                    if (item.Classes_Property.HasBeenSet)
                    {
                        MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>> subMask;
                        LoquiXmlTranslation<Group<Class>, Group_ErrorMask<Class_ErrorMask>>.Instance.Write(
                            writer: writer,
                            item: item.Classes,
                            name: nameof(item.Classes),
                            doMasks: doMasks,
                            mask: out Group_ErrorMask<Class_ErrorMask> loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.Classes,
                            subMask);
                    }
                    if (item.Factions_Property.HasBeenSet)
                    {
                        MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>> subMask;
                        LoquiXmlTranslation<Group<Faction>, Group_ErrorMask<Faction_ErrorMask>>.Instance.Write(
                            writer: writer,
                            item: item.Factions,
                            name: nameof(item.Factions),
                            doMasks: doMasks,
                            mask: out Group_ErrorMask<Faction_ErrorMask> loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.Factions,
                            subMask);
                    }
                    if (item.Hairs_Property.HasBeenSet)
                    {
                        MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>> subMask;
                        LoquiXmlTranslation<Group<Hair>, Group_ErrorMask<Hair_ErrorMask>>.Instance.Write(
                            writer: writer,
                            item: item.Hairs,
                            name: nameof(item.Hairs),
                            doMasks: doMasks,
                            mask: out Group_ErrorMask<Hair_ErrorMask> loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.Hairs,
                            subMask);
                    }
                    if (item.Eyes_Property.HasBeenSet)
                    {
                        MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>> subMask;
                        LoquiXmlTranslation<Group<Eye>, Group_ErrorMask<Eye_ErrorMask>>.Instance.Write(
                            writer: writer,
                            item: item.Eyes,
                            name: nameof(item.Eyes),
                            doMasks: doMasks,
                            mask: out Group_ErrorMask<Eye_ErrorMask> loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.Eyes,
                            subMask);
                    }
                    if (item.Races_Property.HasBeenSet)
                    {
                        MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>> subMask;
                        LoquiXmlTranslation<Group<Race>, Group_ErrorMask<Race_ErrorMask>>.Instance.Write(
                            writer: writer,
                            item: item.Races,
                            name: nameof(item.Races),
                            doMasks: doMasks,
                            mask: out Group_ErrorMask<Race_ErrorMask> loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.Races,
                            subMask);
                    }
                    if (item.Sounds_Property.HasBeenSet)
                    {
                        MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>> subMask;
                        LoquiXmlTranslation<Group<Sound>, Group_ErrorMask<Sound_ErrorMask>>.Instance.Write(
                            writer: writer,
                            item: item.Sounds,
                            name: nameof(item.Sounds),
                            doMasks: doMasks,
                            mask: out Group_ErrorMask<Sound_ErrorMask> loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            doMasks,
                            (int)OblivionMod_FieldIndex.Sounds,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            IOblivionModGetter item,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask)
        {
            OblivionMod_ErrorMask errMaskRet = null;
            Write_Binary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new OblivionMod_ErrorMask()) : default(Func<OblivionMod_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal(
            MutagenWriter writer,
            IOblivionModGetter item,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            try
            {
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    doMasks: doMasks,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_RecordTypes(
            IOblivionModGetter item,
            MutagenWriter writer,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            LoquiBinaryTranslation<TES4, TES4_ErrorMask>.Instance.Write(
                writer: writer,
                item: item.TES4_Property,
                doMasks: doMasks,
                fieldIndex: (int)OblivionMod_FieldIndex.TES4,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<GameSetting>, Group_ErrorMask<GameSetting_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.GameSettings_Property,
                doMasks: doMasks,
                fieldIndex: (int)OblivionMod_FieldIndex.GameSettings,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Global>, Group_ErrorMask<Global_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Globals_Property,
                doMasks: doMasks,
                fieldIndex: (int)OblivionMod_FieldIndex.Globals,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Class>, Group_ErrorMask<Class_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Classes_Property,
                doMasks: doMasks,
                fieldIndex: (int)OblivionMod_FieldIndex.Classes,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Faction>, Group_ErrorMask<Faction_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Factions_Property,
                doMasks: doMasks,
                fieldIndex: (int)OblivionMod_FieldIndex.Factions,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Hair>, Group_ErrorMask<Hair_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Hairs_Property,
                doMasks: doMasks,
                fieldIndex: (int)OblivionMod_FieldIndex.Hairs,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Eye>, Group_ErrorMask<Eye_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Eyes_Property,
                doMasks: doMasks,
                fieldIndex: (int)OblivionMod_FieldIndex.Eyes,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Race>, Group_ErrorMask<Race_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Races_Property,
                doMasks: doMasks,
                fieldIndex: (int)OblivionMod_FieldIndex.Races,
                errorMask: errorMask);
            LoquiBinaryTranslation<Group<Sound>, Group_ErrorMask<Sound_ErrorMask>>.Instance.Write(
                writer: writer,
                item: item.Sounds_Property,
                doMasks: doMasks,
                fieldIndex: (int)OblivionMod_FieldIndex.Sounds,
                errorMask: errorMask);
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class OblivionMod_Mask<T> : IMask<T>, IEquatable<OblivionMod_Mask<T>>
    {
        #region Ctors
        public OblivionMod_Mask()
        {
        }

        public OblivionMod_Mask(T initialValue)
        {
            this.TES4 = new MaskItem<T, TES4_Mask<T>>(initialValue, new TES4_Mask<T>(initialValue));
            this.GameSettings = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Globals = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Classes = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Factions = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Hairs = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Eyes = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Races = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Sounds = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, TES4_Mask<T>> TES4 { get; set; }
        public MaskItem<T, Group_Mask<T>> GameSettings { get; set; }
        public MaskItem<T, Group_Mask<T>> Globals { get; set; }
        public MaskItem<T, Group_Mask<T>> Classes { get; set; }
        public MaskItem<T, Group_Mask<T>> Factions { get; set; }
        public MaskItem<T, Group_Mask<T>> Hairs { get; set; }
        public MaskItem<T, Group_Mask<T>> Eyes { get; set; }
        public MaskItem<T, Group_Mask<T>> Races { get; set; }
        public MaskItem<T, Group_Mask<T>> Sounds { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is OblivionMod_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(OblivionMod_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.TES4, rhs.TES4)) return false;
            if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(this.Globals, rhs.Globals)) return false;
            if (!object.Equals(this.Classes, rhs.Classes)) return false;
            if (!object.Equals(this.Factions, rhs.Factions)) return false;
            if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
            if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(this.Races, rhs.Races)) return false;
            if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.TES4?.GetHashCode());
            ret = ret.CombineHashCode(this.GameSettings?.GetHashCode());
            ret = ret.CombineHashCode(this.Globals?.GetHashCode());
            ret = ret.CombineHashCode(this.Classes?.GetHashCode());
            ret = ret.CombineHashCode(this.Factions?.GetHashCode());
            ret = ret.CombineHashCode(this.Hairs?.GetHashCode());
            ret = ret.CombineHashCode(this.Eyes?.GetHashCode());
            ret = ret.CombineHashCode(this.Races?.GetHashCode());
            ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (TES4 != null)
            {
                if (!eval(this.TES4.Overall)) return false;
                if (TES4.Specific != null && !TES4.Specific.AllEqual(eval)) return false;
            }
            if (GameSettings != null)
            {
                if (!eval(this.GameSettings.Overall)) return false;
                if (GameSettings.Specific != null && !GameSettings.Specific.AllEqual(eval)) return false;
            }
            if (Globals != null)
            {
                if (!eval(this.Globals.Overall)) return false;
                if (Globals.Specific != null && !Globals.Specific.AllEqual(eval)) return false;
            }
            if (Classes != null)
            {
                if (!eval(this.Classes.Overall)) return false;
                if (Classes.Specific != null && !Classes.Specific.AllEqual(eval)) return false;
            }
            if (Factions != null)
            {
                if (!eval(this.Factions.Overall)) return false;
                if (Factions.Specific != null && !Factions.Specific.AllEqual(eval)) return false;
            }
            if (Hairs != null)
            {
                if (!eval(this.Hairs.Overall)) return false;
                if (Hairs.Specific != null && !Hairs.Specific.AllEqual(eval)) return false;
            }
            if (Eyes != null)
            {
                if (!eval(this.Eyes.Overall)) return false;
                if (Eyes.Specific != null && !Eyes.Specific.AllEqual(eval)) return false;
            }
            if (Races != null)
            {
                if (!eval(this.Races.Overall)) return false;
                if (Races.Specific != null && !Races.Specific.AllEqual(eval)) return false;
            }
            if (Sounds != null)
            {
                if (!eval(this.Sounds.Overall)) return false;
                if (Sounds.Specific != null && !Sounds.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public OblivionMod_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new OblivionMod_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(OblivionMod_Mask<R> obj, Func<T, R> eval)
        {
            if (this.TES4 != null)
            {
                obj.TES4 = new MaskItem<R, TES4_Mask<R>>();
                obj.TES4.Overall = eval(this.TES4.Overall);
                if (this.TES4.Specific != null)
                {
                    obj.TES4.Specific = this.TES4.Specific.Translate(eval);
                }
            }
            if (this.GameSettings != null)
            {
                obj.GameSettings = new MaskItem<R, Group_Mask<R>>();
                obj.GameSettings.Overall = eval(this.GameSettings.Overall);
                if (this.GameSettings.Specific != null)
                {
                    obj.GameSettings.Specific = this.GameSettings.Specific.Translate(eval);
                }
            }
            if (this.Globals != null)
            {
                obj.Globals = new MaskItem<R, Group_Mask<R>>();
                obj.Globals.Overall = eval(this.Globals.Overall);
                if (this.Globals.Specific != null)
                {
                    obj.Globals.Specific = this.Globals.Specific.Translate(eval);
                }
            }
            if (this.Classes != null)
            {
                obj.Classes = new MaskItem<R, Group_Mask<R>>();
                obj.Classes.Overall = eval(this.Classes.Overall);
                if (this.Classes.Specific != null)
                {
                    obj.Classes.Specific = this.Classes.Specific.Translate(eval);
                }
            }
            if (this.Factions != null)
            {
                obj.Factions = new MaskItem<R, Group_Mask<R>>();
                obj.Factions.Overall = eval(this.Factions.Overall);
                if (this.Factions.Specific != null)
                {
                    obj.Factions.Specific = this.Factions.Specific.Translate(eval);
                }
            }
            if (this.Hairs != null)
            {
                obj.Hairs = new MaskItem<R, Group_Mask<R>>();
                obj.Hairs.Overall = eval(this.Hairs.Overall);
                if (this.Hairs.Specific != null)
                {
                    obj.Hairs.Specific = this.Hairs.Specific.Translate(eval);
                }
            }
            if (this.Eyes != null)
            {
                obj.Eyes = new MaskItem<R, Group_Mask<R>>();
                obj.Eyes.Overall = eval(this.Eyes.Overall);
                if (this.Eyes.Specific != null)
                {
                    obj.Eyes.Specific = this.Eyes.Specific.Translate(eval);
                }
            }
            if (this.Races != null)
            {
                obj.Races = new MaskItem<R, Group_Mask<R>>();
                obj.Races.Overall = eval(this.Races.Overall);
                if (this.Races.Specific != null)
                {
                    obj.Races.Specific = this.Races.Specific.Translate(eval);
                }
            }
            if (this.Sounds != null)
            {
                obj.Sounds = new MaskItem<R, Group_Mask<R>>();
                obj.Sounds.Overall = eval(this.Sounds.Overall);
                if (this.Sounds.Specific != null)
                {
                    obj.Sounds.Specific = this.Sounds.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(OblivionMod_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, OblivionMod_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(OblivionMod_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TES4?.Overall ?? true)
                {
                    TES4.ToString(fg);
                }
                if (printMask?.GameSettings?.Overall ?? true)
                {
                    GameSettings.ToString(fg);
                }
                if (printMask?.Globals?.Overall ?? true)
                {
                    Globals.ToString(fg);
                }
                if (printMask?.Classes?.Overall ?? true)
                {
                    Classes.ToString(fg);
                }
                if (printMask?.Factions?.Overall ?? true)
                {
                    Factions.ToString(fg);
                }
                if (printMask?.Hairs?.Overall ?? true)
                {
                    Hairs.ToString(fg);
                }
                if (printMask?.Eyes?.Overall ?? true)
                {
                    Eyes.ToString(fg);
                }
                if (printMask?.Races?.Overall ?? true)
                {
                    Races.ToString(fg);
                }
                if (printMask?.Sounds?.Overall ?? true)
                {
                    Sounds.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class OblivionMod_ErrorMask : IErrorMask
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, TES4_ErrorMask> TES4;
        public MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>> GameSettings;
        public MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>> Globals;
        public MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>> Classes;
        public MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>> Factions;
        public MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>> Hairs;
        public MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>> Eyes;
        public MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>> Races;
        public MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>> Sounds;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    this.TES4 = new MaskItem<Exception, TES4_ErrorMask>(ex, null);
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    this.GameSettings = new MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Globals:
                    this.Globals = new MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Classes:
                    this.Classes = new MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Factions:
                    this.Factions = new MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    this.Hairs = new MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    this.Eyes = new MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Races:
                    this.Races = new MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>(ex, null);
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    this.Sounds = new MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    this.TES4 = (MaskItem<Exception, TES4_ErrorMask>)obj;
                    break;
                case OblivionMod_FieldIndex.GameSettings:
                    this.GameSettings = (MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Globals:
                    this.Globals = (MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Classes:
                    this.Classes = (MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Factions:
                    this.Factions = (MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Hairs:
                    this.Hairs = (MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Eyes:
                    this.Eyes = (MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Races:
                    this.Races = (MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>)obj;
                    break;
                case OblivionMod_FieldIndex.Sounds:
                    this.Sounds = (MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("OblivionMod_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            if (TES4 != null)
            {
                TES4.ToString(fg);
            }
            if (GameSettings != null)
            {
                GameSettings.ToString(fg);
            }
            if (Globals != null)
            {
                Globals.ToString(fg);
            }
            if (Classes != null)
            {
                Classes.ToString(fg);
            }
            if (Factions != null)
            {
                Factions.ToString(fg);
            }
            if (Hairs != null)
            {
                Hairs.ToString(fg);
            }
            if (Eyes != null)
            {
                Eyes.ToString(fg);
            }
            if (Races != null)
            {
                Races.ToString(fg);
            }
            if (Sounds != null)
            {
                Sounds.ToString(fg);
            }
        }
        #endregion

        #region Combine
        public OblivionMod_ErrorMask Combine(OblivionMod_ErrorMask rhs)
        {
            var ret = new OblivionMod_ErrorMask();
            ret.TES4 = new MaskItem<Exception, TES4_ErrorMask>(this.TES4.Overall.Combine(rhs.TES4.Overall), this.TES4.Specific.Combine(rhs.TES4.Specific));
            ret.GameSettings = new MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>(this.GameSettings.Overall.Combine(rhs.GameSettings.Overall), this.GameSettings.Specific.Combine(rhs.GameSettings.Specific));
            ret.Globals = new MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>(this.Globals.Overall.Combine(rhs.Globals.Overall), this.Globals.Specific.Combine(rhs.Globals.Specific));
            ret.Classes = new MaskItem<Exception, Group_ErrorMask<Class_ErrorMask>>(this.Classes.Overall.Combine(rhs.Classes.Overall), this.Classes.Specific.Combine(rhs.Classes.Specific));
            ret.Factions = new MaskItem<Exception, Group_ErrorMask<Faction_ErrorMask>>(this.Factions.Overall.Combine(rhs.Factions.Overall), this.Factions.Specific.Combine(rhs.Factions.Specific));
            ret.Hairs = new MaskItem<Exception, Group_ErrorMask<Hair_ErrorMask>>(this.Hairs.Overall.Combine(rhs.Hairs.Overall), this.Hairs.Specific.Combine(rhs.Hairs.Specific));
            ret.Eyes = new MaskItem<Exception, Group_ErrorMask<Eye_ErrorMask>>(this.Eyes.Overall.Combine(rhs.Eyes.Overall), this.Eyes.Specific.Combine(rhs.Eyes.Specific));
            ret.Races = new MaskItem<Exception, Group_ErrorMask<Race_ErrorMask>>(this.Races.Overall.Combine(rhs.Races.Overall), this.Races.Specific.Combine(rhs.Races.Specific));
            ret.Sounds = new MaskItem<Exception, Group_ErrorMask<Sound_ErrorMask>>(this.Sounds.Overall.Combine(rhs.Sounds.Overall), this.Sounds.Specific.Combine(rhs.Sounds.Specific));
            return ret;
        }
        public static OblivionMod_ErrorMask Combine(OblivionMod_ErrorMask lhs, OblivionMod_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class OblivionMod_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, TES4_CopyMask> TES4;
        public MaskItem<CopyOption, Group_CopyMask<GameSetting_CopyMask>> GameSettings;
        public MaskItem<CopyOption, Group_CopyMask<Global_CopyMask>> Globals;
        public MaskItem<CopyOption, Group_CopyMask<Class_CopyMask>> Classes;
        public MaskItem<CopyOption, Group_CopyMask<Faction_CopyMask>> Factions;
        public MaskItem<CopyOption, Group_CopyMask<Hair_CopyMask>> Hairs;
        public MaskItem<CopyOption, Group_CopyMask<Eye_CopyMask>> Eyes;
        public MaskItem<CopyOption, Group_CopyMask<Race_CopyMask>> Races;
        public MaskItem<CopyOption, Group_CopyMask<Sound_CopyMask>> Sounds;
        #endregion

    }
    #endregion




    #endregion

}
