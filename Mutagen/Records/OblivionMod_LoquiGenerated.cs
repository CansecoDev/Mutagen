/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Internals;
using Mutagen;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Mutagen.Binary;

namespace Mutagen
{
    #region Class
    public partial class OblivionMod : IOblivionMod, ILoquiObjectSetter, IEquatable<OblivionMod>
    {
        ILoquiRegistration ILoquiObject.Registration => OblivionMod_Registration.Instance;
        public static OblivionMod_Registration Registration => OblivionMod_Registration.Instance;

        #region Ctor
        public OblivionMod()
        {
            _TES4 = NotifyingItem.Factory<TES4>(
                defaultVal: _TES4_Object,
                markAsSet: true);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TES4
        private TES4 _TES4_Object = new TES4();
        protected readonly INotifyingItem<TES4> _TES4;
        public INotifyingItemGetter<TES4> TES4_Property => this._TES4;
        TES4 IOblivionModGetter.TES4 => this.TES4;
        public TES4 TES4 { get => _TES4.Item; }
        INotifyingItemGetter<TES4> IOblivionModGetter.TES4_Property => this.TES4_Property;
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => OblivionModCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => OblivionModCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => OblivionModCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            OblivionModCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return OblivionModCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            return OblivionModCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            OblivionModCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public OblivionMod_Mask<bool> GetHasBeenSetMask()
        {
            return OblivionModCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is OblivionMod rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(OblivionMod rhs)
        {
            if (rhs == null) return false;
            if (TES4_Property.HasBeenSet != rhs.TES4_Property.HasBeenSet) return false;
            if (TES4_Property.HasBeenSet)
            {
                if (!object.Equals(TES4, rhs.TES4)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (TES4_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(TES4).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        public static OblivionMod Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static OblivionMod Create_XML(
            XElement root,
            out OblivionMod_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static OblivionMod Create_XML(
            XElement root,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask)
        {
            OblivionMod_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new OblivionMod_ErrorMask()) : default(Func<OblivionMod_ErrorMask>));
            errorMask = errMaskRet;
            return ret;
        }

        public static OblivionMod Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static OblivionMod Create_XML(
            string path,
            out OblivionMod_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static OblivionMod Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static OblivionMod Create_XML(
            Stream stream,
            out OblivionMod_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<OblivionMod, OblivionMod_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out OblivionMod_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<OblivionMod, OblivionMod_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out OblivionMod_ErrorMask errorMask,
            string name = null)
        {
            OblivionModCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public virtual void Write_XML(
            string path,
            out OblivionMod_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            OblivionModCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                errorMask: out OblivionMod_ErrorMask errorMask);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        #endregion

        private static OblivionMod Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            var ret = new OblivionMod();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            OblivionMod item,
            XElement root,
            string name,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "TES4":
                    {
                        MaskItem<Exception, TES4_ErrorMask> subMask;
                        var tmp = TES4.Create_XML(
                            root: root,
                            doMasks: doMasks,
                            errorMask: out TES4_ErrorMask createMask);
                        TES4Common.CopyFieldsFrom(
                            item: item._TES4_Object,
                            rhs: tmp,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            doErrorMask: doMasks,
                            errorMask: out TES4_ErrorMask copyMask);
                        var loquiMask = TES4_ErrorMask.Combine(createMask, copyMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, TES4_ErrorMask>(null, loquiMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().TES4 = subMask;
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Record Types
        public static readonly RecordType TES4_HEADER = new RecordType("TES4");
        #endregion

        #region OblivionBinary Translation
        #region OblivionBinary Create
        public static OblivionMod Create_OblivionBinary(BinaryReader reader)
        {
            return Create_OblivionBinary(
                reader: reader,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static OblivionMod Create_OblivionBinary(
            BinaryReader reader,
            out OblivionMod_ErrorMask errorMask)
        {
            return Create_OblivionBinary(
                reader: reader,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static OblivionMod Create_OblivionBinary(
            BinaryReader reader,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask)
        {
            OblivionMod_ErrorMask errMaskRet = null;
            var ret = Create_OblivionBinary_Internal(
                reader: reader,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new OblivionMod_ErrorMask()) : default(Func<OblivionMod_ErrorMask>));
            errorMask = errMaskRet;
            return ret;
        }

        public static OblivionMod Create_OblivionBinary(string path)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    return Create_OblivionBinary(reader: reader);
                }
            }
        }

        public static OblivionMod Create_OblivionBinary(
            string path,
            out OblivionMod_ErrorMask errorMask)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    return Create_OblivionBinary(
                        reader: reader,
                        errorMask: out errorMask);
                }
            }
        }

        public static OblivionMod Create_OblivionBinary(Stream stream)
        {
            using (var reader = new BinaryReader(stream))
            {
                return Create_OblivionBinary(reader: reader);
            }
        }

        public static OblivionMod Create_OblivionBinary(
            Stream stream,
            out OblivionMod_ErrorMask errorMask)
        {
            using (var reader = new BinaryReader(stream))
            {
                return Create_OblivionBinary(
                    reader: reader,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region OblivionBinary Copy In
        public void CopyIn_OblivionBinary(
            BinaryReader reader,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<OblivionMod, OblivionMod_ErrorMask>.Instance.CopyIn(
                reader: reader,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out OblivionMod_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_OblivionBinary(
            BinaryReader reader,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiBinaryTranslation<OblivionMod, OblivionMod_ErrorMask>.Instance.CopyIn(
                reader: reader,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_OblivionBinary(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    this.CopyIn_OblivionBinary(
                        reader: reader,
                        cmds: cmds);
                }
            }
        }

        public void CopyIn_OblivionBinary(
            string path,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(fileStream))
                {
                    this.CopyIn_OblivionBinary(
                        reader: reader,
                        errorMask: out errorMask,
                        cmds: cmds);
                }
            }
        }

        public void CopyIn_OblivionBinary(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new BinaryReader(stream))
            {
                this.CopyIn_OblivionBinary(
                    reader: reader,
                    cmds: cmds);
            }
        }

        public void CopyIn_OblivionBinary(
            Stream stream,
            out OblivionMod_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            using (var reader = new BinaryReader(stream))
            {
                this.CopyIn_OblivionBinary(
                    reader: reader,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region OblivionBinary Write
        public virtual void Write_OblivionBinary(
            BinaryWriter writer,
            out OblivionMod_ErrorMask errorMask)
        {
            OblivionModCommon.Write_OblivionBinary(
                writer: writer,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public virtual void Write_OblivionBinary(
            string path,
            out OblivionMod_ErrorMask errorMask)
        {
            using (var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                using (var writer = new BinaryWriter(fileStream))
                {
                    Write_OblivionBinary(
                        writer: writer,
                        errorMask: out errorMask);
                }
            }
        }

        public virtual void Write_OblivionBinary(
            Stream stream,
            out OblivionMod_ErrorMask errorMask)
        {
            using (var writer = new BinaryWriter(stream))
            {
                Write_OblivionBinary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_OblivionBinary(BinaryWriter writer)
        {
            OblivionModCommon.Write_OblivionBinary(
                writer: writer,
                item: this,
                doMasks: false,
                errorMask: out OblivionMod_ErrorMask errorMask);
        }

        public void Write_OblivionBinary(string path)
        {
            using (var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                using (var writer = new BinaryWriter(fileStream))
                {
                    Write_OblivionBinary(writer: writer);
                }
            }
        }

        public void Write_OblivionBinary(Stream stream)
        {
            using (var writer = new BinaryWriter(stream))
            {
                Write_OblivionBinary(writer: writer);
            }
        }

        #endregion

        private static OblivionMod Create_OblivionBinary_Internal(
            BinaryReader reader,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            var ret = new OblivionMod();
            try
            {
                Fill_OblivionBinary_Internal(
                    item: ret,
                    reader: reader,
                    doMasks: doMasks,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_OblivionBinary_Internal(
            OblivionMod item,
            BinaryReader reader,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            {
                MaskItem<Exception, TES4_ErrorMask> subMask;
                var tmp = TES4.Create_OblivionBinary(
                    reader: reader,
                    doMasks: doMasks,
                    errorMask: out TES4_ErrorMask createMask);
                TES4Common.CopyFieldsFrom(
                    item: item._TES4_Object,
                    rhs: tmp,
                    def: null,
                    cmds: null,
                    copyMask: null,
                    doErrorMask: doMasks,
                    errorMask: out TES4_ErrorMask copyMask);
                var loquiMask = TES4_ErrorMask.Combine(createMask, copyMask);
                subMask = loquiMask == null ? null : new MaskItem<Exception, TES4_ErrorMask>(null, loquiMask);
                if (doMasks && subMask != null)
                {
                    errorMask().TES4 = subMask;
                }
            }
        }

        #endregion

        public OblivionMod Copy(
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
        {
            return OblivionMod.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static OblivionMod Copy(
            IOblivionMod item,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
        {
            OblivionMod ret;
            if (item.GetType().Equals(typeof(OblivionMod)))
            {
                ret = new OblivionMod();
            }
            else
            {
                ret = (OblivionMod)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
            where CopyType : class, IOblivionMod
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(OblivionMod)))
            {
                ret = new OblivionMod() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static OblivionMod Copy_ToLoqui(
            IOblivionModGetter item,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null)
        {
            var ret = new OblivionMod();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    this._TES4_Object.CopyFieldsFrom(rhs: (TES4)obj, cmds: cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            OblivionModCommon.Clear(this, cmds);
        }


        public static OblivionMod Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new OblivionMod();
            foreach (var pair in fields)
            {
                CopyInInternal_OblivionMod(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_OblivionMod(OblivionMod obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out OblivionMod_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    obj._TES4_Object.CopyFieldsFrom(rhs: (TES4)pair.Value, cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, OblivionMod obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IOblivionMod : IOblivionModGetter, ILoquiClass<IOblivionMod, IOblivionModGetter>, ILoquiClass<OblivionMod, IOblivionModGetter>
    {
    }

    public interface IOblivionModGetter : ILoquiObject
    {
        #region TES4
        TES4 TES4 { get; }
        INotifyingItemGetter<TES4> TES4_Property { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Internals
{
    #region Field Index
    public enum OblivionMod_FieldIndex
    {
        TES4 = 0,
    }
    #endregion

    #region Registration
    public class OblivionMod_Registration : ILoquiRegistration
    {
        public static readonly OblivionMod_Registration Instance = new OblivionMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Mutagen.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Mutagen.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "b6f626df-b164-466b-960a-1639d88f66bc";

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(OblivionMod_Mask<>);

        public static readonly Type ErrorMaskType = typeof(OblivionMod_ErrorMask);

        public static readonly Type ClassType = typeof(OblivionMod);

        public static readonly Type GetterType = typeof(IOblivionModGetter);

        public static readonly Type SetterType = typeof(IOblivionMod);

        public static readonly Type CommonType = typeof(OblivionModCommon);

        public const string FullName = "Mutagen.OblivionMod";

        public const string Name = "OblivionMod";

        public const string Namespace = "Mutagen";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TES4":
                    return (ushort)OblivionMod_FieldIndex.TES4;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return "TES4";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return typeof(TES4);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class OblivionModCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IOblivionMod item,
            IOblivionModGetter rhs,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            OblivionModCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IOblivionMod item,
            IOblivionModGetter rhs,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_CopyMask copyMask = null,
            IOblivionModGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            OblivionModCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IOblivionMod item,
            IOblivionModGetter rhs,
            IOblivionModGetter def,
            bool doErrorMask,
            out OblivionMod_ErrorMask errorMask,
            OblivionMod_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            OblivionMod_ErrorMask retErrorMask = null;
            Func<OblivionMod_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new OblivionMod_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IOblivionMod item,
            IOblivionModGetter rhs,
            IOblivionModGetter def,
            bool doErrorMask,
            Func<OblivionMod_ErrorMask> errorMask,
            OblivionMod_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.TES4.Overall ?? true)
            {
                try
                {
                    TES4Common.CopyFieldsFrom(
                        item: item.TES4,
                        rhs: rhs.TES4,
                        def: def?.TES4,
                        doErrorMask: doErrorMask,
                        errorMask: (doErrorMask ? new Func<TES4_ErrorMask>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.TES4.Specific == null)
                            {
                                baseMask.TES4 = new MaskItem<Exception, TES4_ErrorMask>(null, new TES4_ErrorMask());
                            }
                            return baseMask.TES4.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.TES4.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((ushort)OblivionMod_FieldIndex.TES4, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IOblivionMod obj,
            NotifyingFireParameters? cmds = null)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IOblivionMod obj,
            NotifyingUnsetParameters? cmds = null)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IOblivionMod obj)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return obj.TES4_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IOblivionModGetter obj)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    return obj.TES4;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IOblivionMod item,
            NotifyingUnsetParameters? cmds = null)
        {
        }

        public static OblivionMod_Mask<bool> GetEqualsMask(
            this IOblivionModGetter item,
            IOblivionModGetter rhs)
        {
            var ret = new OblivionMod_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IOblivionModGetter item,
            IOblivionModGetter rhs,
            OblivionMod_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.TES4 = item.TES4_Property.LoquiEqualsHelper(rhs.TES4_Property, (loqLhs, loqRhs) => TES4Common.GetEqualsMask(loqLhs, loqRhs));
        }

        public static string ToString(
            this IOblivionModGetter item,
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IOblivionModGetter item,
            FileGeneration fg,
            string name = null,
            OblivionMod_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(OblivionMod)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(OblivionMod)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TES4?.Overall ?? true)
                {
                    item.TES4.ToString(fg, "TES4");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IOblivionModGetter item,
            OblivionMod_Mask<bool?> checkMask)
        {
            if (checkMask.TES4.Overall.HasValue && checkMask.TES4.Overall.Value != item.TES4_Property.HasBeenSet) return false;
            if (checkMask.TES4.Specific != null && (item.TES4_Property.Item == null || !item.TES4_Property.Item.HasBeenSet(checkMask.TES4.Specific))) return false;
            return true;
        }

        public static OblivionMod_Mask<bool> GetHasBeenSetMask(IOblivionModGetter item)
        {
            var ret = new OblivionMod_Mask<bool>();
            ret.TES4 = new MaskItem<bool, TES4_Mask<bool>>(item.TES4_Property.HasBeenSet, TES4Common.GetHasBeenSetMask(item.TES4_Property.Item));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IOblivionModGetter item,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask,
            string name = null)
        {
            OblivionMod_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new OblivionMod_ErrorMask()) : default(Func<OblivionMod_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IOblivionModGetter item,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.OblivionMod"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.OblivionMod");
                    }
                    if (item.TES4_Property.HasBeenSet)
                    {
                        MaskItem<Exception, TES4_ErrorMask> subMask;
                        TES4Common.Write_XML(
                            writer: writer,
                            item: item.TES4,
                            name: nameof(item.TES4),
                            doMasks: doMasks,
                            errorMask: out TES4_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, TES4_ErrorMask>(null, loquiMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().TES4 = subMask;
                        }
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region OblivionBinary Translation
        #region OblivionBinary Write
        public static void Write_OblivionBinary(
            BinaryWriter writer,
            IOblivionModGetter item,
            bool doMasks,
            out OblivionMod_ErrorMask errorMask)
        {
            OblivionMod_ErrorMask errMaskRet = null;
            Write_OblivionBinary_Internal(
                writer: writer,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new OblivionMod_ErrorMask()) : default(Func<OblivionMod_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_OblivionBinary_Internal(
            BinaryWriter writer,
            IOblivionModGetter item,
            bool doMasks,
            Func<OblivionMod_ErrorMask> errorMask)
        {
            throw new NotImplementedException();
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class OblivionMod_Mask<T> : IMask<T>, IEquatable<OblivionMod_Mask<T>>
    {
        #region Ctors
        public OblivionMod_Mask()
        {
        }

        public OblivionMod_Mask(T initialValue)
        {
            this.TES4 = new MaskItem<T, TES4_Mask<T>>(initialValue, new TES4_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, TES4_Mask<T>> TES4 { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is OblivionMod_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(OblivionMod_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.TES4, rhs.TES4)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.TES4?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (TES4 != null)
            {
                if (!eval(this.TES4.Overall)) return false;
                if (TES4.Specific != null && !TES4.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public OblivionMod_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new OblivionMod_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(OblivionMod_Mask<R> obj, Func<T, R> eval)
        {
            if (this.TES4 != null)
            {
                obj.TES4 = new MaskItem<R, TES4_Mask<R>>();
                obj.TES4.Overall = eval(this.TES4.Overall);
                if (this.TES4.Specific != null)
                {
                    obj.TES4.Specific = this.TES4.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(OblivionMod_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, OblivionMod_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(OblivionMod_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TES4?.Overall ?? true)
                {
                    TES4.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class OblivionMod_ErrorMask : IErrorMask
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, TES4_ErrorMask> TES4;
        #endregion

        #region IErrorMask
        public void SetNthException(ushort index, Exception ex)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    this.TES4 = new MaskItem<Exception, TES4_ErrorMask>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(ushort index, object obj)
        {
            OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
            switch (enu)
            {
                case OblivionMod_FieldIndex.TES4:
                    this.TES4 = (MaskItem<Exception, TES4_ErrorMask>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("OblivionMod_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            if (TES4 != null)
            {
                TES4.ToString(fg);
            }
        }
        #endregion

        #region Combine
        public OblivionMod_ErrorMask Combine(OblivionMod_ErrorMask rhs)
        {
            var ret = new OblivionMod_ErrorMask();
            ret.TES4 = new MaskItem<Exception, TES4_ErrorMask>(this.TES4.Overall.Combine(rhs.TES4.Overall), this.TES4.Specific.Combine(rhs.TES4.Specific));
            return ret;
        }
        public static OblivionMod_ErrorMask Combine(OblivionMod_ErrorMask lhs, OblivionMod_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class OblivionMod_CopyMask
    {
        #region Members
        public MaskItem<bool, TES4_CopyMask> TES4;
        #endregion

    }
    #endregion




    #endregion

}
